# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImagePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImagePython', [dirname(__file__)])
        except ImportError:
            import _itkImagePython
            return _itkImagePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImagePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImagePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImagePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkOffsetPython
import itkSizePython
import pyBasePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import ITKCommonBasePython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython
import itkRGBAPixelPython

def itkImageCVD43_New():
  return itkImageCVD43.New()


def itkImageCVD33_New():
  return itkImageCVD33.New()


def itkImageCVD23_New():
  return itkImageCVD23.New()


def itkImageCVD42_New():
  return itkImageCVD42.New()


def itkImageCVD32_New():
  return itkImageCVD32.New()


def itkImageCVD22_New():
  return itkImageCVD22.New()


def itkImageVF13_New():
  return itkImageVF13.New()


def itkImageVD44_New():
  return itkImageVD44.New()


def itkImageVD34_New():
  return itkImageVD34.New()


def itkImageVD24_New():
  return itkImageVD24.New()


def itkImageVF12_New():
  return itkImageVF12.New()


def itkImageSSRTD33_New():
  return itkImageSSRTD33.New()


def itkImageO33_New():
  return itkImageO33.New()


def itkImageFAF33_New():
  return itkImageFAF33.New()


def itkImageB3_New():
  return itkImageB3.New()


def itkImageULL3_New():
  return itkImageULL3.New()


def itkImageUL3_New():
  return itkImageUL3.New()


def itkImageD3_New():
  return itkImageD3.New()


def itkImageVD43_New():
  return itkImageVD43.New()


def itkImageVD33_New():
  return itkImageVD33.New()


def itkImageVD23_New():
  return itkImageVD23.New()


def itkImageCF3_New():
  return itkImageCF3.New()


def itkImageF3_New():
  return itkImageF3.New()


def itkImageUS3_New():
  return itkImageUS3.New()


def itkImageUC3_New():
  return itkImageUC3.New()


def itkImageSS3_New():
  return itkImageSS3.New()


def itkImageCVF43_New():
  return itkImageCVF43.New()


def itkImageCVF33_New():
  return itkImageCVF33.New()


def itkImageCVF23_New():
  return itkImageCVF23.New()


def itkImageVF43_New():
  return itkImageVF43.New()


def itkImageVF33_New():
  return itkImageVF33.New()


def itkImageVF23_New():
  return itkImageVF23.New()


def itkImageRGBAUC3_New():
  return itkImageRGBAUC3.New()


def itkImageRGBUC3_New():
  return itkImageRGBUC3.New()


def itkImageSSRTD22_New():
  return itkImageSSRTD22.New()


def itkImageO22_New():
  return itkImageO22.New()


def itkImageFAF22_New():
  return itkImageFAF22.New()


def itkImageB2_New():
  return itkImageB2.New()


def itkImageULL2_New():
  return itkImageULL2.New()


def itkImageUL2_New():
  return itkImageUL2.New()


def itkImageD2_New():
  return itkImageD2.New()


def itkImageVD42_New():
  return itkImageVD42.New()


def itkImageVD32_New():
  return itkImageVD32.New()


def itkImageVD22_New():
  return itkImageVD22.New()


def itkImageCF2_New():
  return itkImageCF2.New()


def itkImageF2_New():
  return itkImageF2.New()


def itkImageUS2_New():
  return itkImageUS2.New()


def itkImageUC2_New():
  return itkImageUC2.New()


def itkImageSS2_New():
  return itkImageSS2.New()


def itkImageCVF42_New():
  return itkImageCVF42.New()


def itkImageCVF32_New():
  return itkImageCVF32.New()


def itkImageCVF22_New():
  return itkImageCVF22.New()


def itkImageVF42_New():
  return itkImageVF42.New()


def itkImageVF32_New():
  return itkImageVF32.New()


def itkImageVF22_New():
  return itkImageVF22.New()


def itkImageRGBAUC2_New():
  return itkImageRGBAUC2.New()


def itkImageRGBUC2_New():
  return itkImageRGBUC2.New()


def itkImageBase4_New():
  return itkImageBase4.New()


def itkImageBase3_New():
  return itkImageBase3.New()


def itkImageBase2_New():
  return itkImageBase2.New()

class vectoritkImageRGBUC2(object):
    """Proxy of C++ std::vector<(itkImageRGBUC2_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageRGBUC2 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageRGBUC2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageRGBUC2 self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageRGBUC2 self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC2___bool__(self)


    def __len__(self) -> "std::vector< itkImageRGBUC2_Pointer >::size_type":
        """__len__(vectoritkImageRGBUC2 self) -> std::vector< itkImageRGBUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC2___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageRGBUC2_Pointer >::difference_type', j: 'std::vector< itkImageRGBUC2_Pointer >::difference_type') -> "std::vector< itkImageRGBUC2_Pointer,std::allocator< itkImageRGBUC2_Pointer > > *":
        """__getslice__(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::difference_type i, std::vector< itkImageRGBUC2_Pointer >::difference_type j) -> vectoritkImageRGBUC2"""
        return _itkImagePython.vectoritkImageRGBUC2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::difference_type i, std::vector< itkImageRGBUC2_Pointer >::difference_type j)
        __setslice__(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::difference_type i, std::vector< itkImageRGBUC2_Pointer >::difference_type j, vectoritkImageRGBUC2 v)
        """
        return _itkImagePython.vectoritkImageRGBUC2___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageRGBUC2_Pointer >::difference_type', j: 'std::vector< itkImageRGBUC2_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::difference_type i, std::vector< itkImageRGBUC2_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageRGBUC2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::difference_type i)
        __delitem__(vectoritkImageRGBUC2 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageRGBUC2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageRGBUC2_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageRGBUC2 self, PySliceObject * slice) -> vectoritkImageRGBUC2
        __getitem__(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::difference_type i) -> std::vector< itkImageRGBUC2_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageRGBUC2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageRGBUC2 self, PySliceObject * slice, vectoritkImageRGBUC2 v)
        __setitem__(vectoritkImageRGBUC2 self, PySliceObject * slice)
        __setitem__(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::difference_type i, std::vector< itkImageRGBUC2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageRGBUC2___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageRGBUC2_Pointer >::value_type":
        """pop(vectoritkImageRGBUC2 self) -> std::vector< itkImageRGBUC2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageRGBUC2_pop(self)


    def append(self, x: 'std::vector< itkImageRGBUC2_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageRGBUC2_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageRGBUC2 self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC2_empty(self)


    def size(self) -> "std::vector< itkImageRGBUC2_Pointer >::size_type":
        """size(vectoritkImageRGBUC2 self) -> std::vector< itkImageRGBUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC2_size(self)


    def swap(self, v: 'vectoritkImageRGBUC2') -> "void":
        """swap(vectoritkImageRGBUC2 self, vectoritkImageRGBUC2 v)"""
        return _itkImagePython.vectoritkImageRGBUC2_swap(self, v)


    def begin(self) -> "std::vector< itkImageRGBUC2_Pointer >::iterator":
        """begin(vectoritkImageRGBUC2 self) -> std::vector< itkImageRGBUC2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBUC2_begin(self)


    def end(self) -> "std::vector< itkImageRGBUC2_Pointer >::iterator":
        """end(vectoritkImageRGBUC2 self) -> std::vector< itkImageRGBUC2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBUC2_end(self)


    def rbegin(self) -> "std::vector< itkImageRGBUC2_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageRGBUC2 self) -> std::vector< itkImageRGBUC2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBUC2_rbegin(self)


    def rend(self) -> "std::vector< itkImageRGBUC2_Pointer >::reverse_iterator":
        """rend(vectoritkImageRGBUC2 self) -> std::vector< itkImageRGBUC2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBUC2_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageRGBUC2 self)"""
        return _itkImagePython.vectoritkImageRGBUC2_clear(self)


    def get_allocator(self) -> "std::vector< itkImageRGBUC2_Pointer >::allocator_type":
        """get_allocator(vectoritkImageRGBUC2 self) -> std::vector< itkImageRGBUC2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageRGBUC2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageRGBUC2 self)"""
        return _itkImagePython.vectoritkImageRGBUC2_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageRGBUC2_Pointer >::iterator":
        """
        erase(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::iterator pos) -> std::vector< itkImageRGBUC2_Pointer >::iterator
        erase(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::iterator first, std::vector< itkImageRGBUC2_Pointer >::iterator last) -> std::vector< itkImageRGBUC2_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageRGBUC2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageRGBUC2_Pointer)> self) -> vectoritkImageRGBUC2
        __init__(std::vector<(itkImageRGBUC2_Pointer)> self, vectoritkImageRGBUC2 arg2) -> vectoritkImageRGBUC2
        __init__(std::vector<(itkImageRGBUC2_Pointer)> self, std::vector< itkImageRGBUC2_Pointer >::size_type size) -> vectoritkImageRGBUC2
        __init__(std::vector<(itkImageRGBUC2_Pointer)> self, std::vector< itkImageRGBUC2_Pointer >::size_type size, std::vector< itkImageRGBUC2_Pointer >::value_type const & value) -> vectoritkImageRGBUC2
        """
        _itkImagePython.vectoritkImageRGBUC2_swiginit(self, _itkImagePython.new_vectoritkImageRGBUC2(*args))

    def push_back(self, x: 'std::vector< itkImageRGBUC2_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageRGBUC2_push_back(self, x)


    def front(self) -> "std::vector< itkImageRGBUC2_Pointer >::value_type const &":
        """front(vectoritkImageRGBUC2 self) -> std::vector< itkImageRGBUC2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBUC2_front(self)


    def back(self) -> "std::vector< itkImageRGBUC2_Pointer >::value_type const &":
        """back(vectoritkImageRGBUC2 self) -> std::vector< itkImageRGBUC2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBUC2_back(self)


    def assign(self, n: 'std::vector< itkImageRGBUC2_Pointer >::size_type', x: 'std::vector< itkImageRGBUC2_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::size_type n, std::vector< itkImageRGBUC2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageRGBUC2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::size_type new_size)
        resize(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::size_type new_size, std::vector< itkImageRGBUC2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageRGBUC2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::iterator pos, std::vector< itkImageRGBUC2_Pointer >::value_type const & x) -> std::vector< itkImageRGBUC2_Pointer >::iterator
        insert(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::iterator pos, std::vector< itkImageRGBUC2_Pointer >::size_type n, std::vector< itkImageRGBUC2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageRGBUC2_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageRGBUC2_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageRGBUC2 self, std::vector< itkImageRGBUC2_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageRGBUC2_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageRGBUC2_Pointer >::size_type":
        """capacity(vectoritkImageRGBUC2 self) -> std::vector< itkImageRGBUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC2_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageRGBUC2
vectoritkImageRGBUC2.iterator = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_iterator, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2___nonzero__, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2___bool__, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.__len__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2___len__, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2___getslice__, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2___setslice__, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2___delslice__, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2___delitem__, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2___getitem__, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2___setitem__, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.pop = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_pop, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.append = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_append, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.empty = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_empty, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.size = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_size, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.swap = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_swap, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.begin = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_begin, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.end = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_end, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.rbegin = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_rbegin, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.rend = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_rend, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.clear = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_clear, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_get_allocator, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.pop_back = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_pop_back, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.erase = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_erase, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.push_back = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_push_back, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.front = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_front, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.back = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_back, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.assign = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_assign, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.resize = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_resize, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.insert = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_insert, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.reserve = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_reserve, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2.capacity = new_instancemethod(_itkImagePython.vectoritkImageRGBUC2_capacity, None, vectoritkImageRGBUC2)
vectoritkImageRGBUC2_swigregister = _itkImagePython.vectoritkImageRGBUC2_swigregister
vectoritkImageRGBUC2_swigregister(vectoritkImageRGBUC2)

class vectoritkImageRGBAUC2(object):
    """Proxy of C++ std::vector<(itkImageRGBAUC2_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageRGBAUC2 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageRGBAUC2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageRGBAUC2 self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageRGBAUC2 self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC2___bool__(self)


    def __len__(self) -> "std::vector< itkImageRGBAUC2_Pointer >::size_type":
        """__len__(vectoritkImageRGBAUC2 self) -> std::vector< itkImageRGBAUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC2___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageRGBAUC2_Pointer >::difference_type', j: 'std::vector< itkImageRGBAUC2_Pointer >::difference_type') -> "std::vector< itkImageRGBAUC2_Pointer,std::allocator< itkImageRGBAUC2_Pointer > > *":
        """__getslice__(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::difference_type i, std::vector< itkImageRGBAUC2_Pointer >::difference_type j) -> vectoritkImageRGBAUC2"""
        return _itkImagePython.vectoritkImageRGBAUC2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::difference_type i, std::vector< itkImageRGBAUC2_Pointer >::difference_type j)
        __setslice__(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::difference_type i, std::vector< itkImageRGBAUC2_Pointer >::difference_type j, vectoritkImageRGBAUC2 v)
        """
        return _itkImagePython.vectoritkImageRGBAUC2___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageRGBAUC2_Pointer >::difference_type', j: 'std::vector< itkImageRGBAUC2_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::difference_type i, std::vector< itkImageRGBAUC2_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageRGBAUC2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::difference_type i)
        __delitem__(vectoritkImageRGBAUC2 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageRGBAUC2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageRGBAUC2_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageRGBAUC2 self, PySliceObject * slice) -> vectoritkImageRGBAUC2
        __getitem__(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::difference_type i) -> std::vector< itkImageRGBAUC2_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageRGBAUC2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageRGBAUC2 self, PySliceObject * slice, vectoritkImageRGBAUC2 v)
        __setitem__(vectoritkImageRGBAUC2 self, PySliceObject * slice)
        __setitem__(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::difference_type i, std::vector< itkImageRGBAUC2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageRGBAUC2___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageRGBAUC2_Pointer >::value_type":
        """pop(vectoritkImageRGBAUC2 self) -> std::vector< itkImageRGBAUC2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageRGBAUC2_pop(self)


    def append(self, x: 'std::vector< itkImageRGBAUC2_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageRGBAUC2_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageRGBAUC2 self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC2_empty(self)


    def size(self) -> "std::vector< itkImageRGBAUC2_Pointer >::size_type":
        """size(vectoritkImageRGBAUC2 self) -> std::vector< itkImageRGBAUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC2_size(self)


    def swap(self, v: 'vectoritkImageRGBAUC2') -> "void":
        """swap(vectoritkImageRGBAUC2 self, vectoritkImageRGBAUC2 v)"""
        return _itkImagePython.vectoritkImageRGBAUC2_swap(self, v)


    def begin(self) -> "std::vector< itkImageRGBAUC2_Pointer >::iterator":
        """begin(vectoritkImageRGBAUC2 self) -> std::vector< itkImageRGBAUC2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBAUC2_begin(self)


    def end(self) -> "std::vector< itkImageRGBAUC2_Pointer >::iterator":
        """end(vectoritkImageRGBAUC2 self) -> std::vector< itkImageRGBAUC2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBAUC2_end(self)


    def rbegin(self) -> "std::vector< itkImageRGBAUC2_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageRGBAUC2 self) -> std::vector< itkImageRGBAUC2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBAUC2_rbegin(self)


    def rend(self) -> "std::vector< itkImageRGBAUC2_Pointer >::reverse_iterator":
        """rend(vectoritkImageRGBAUC2 self) -> std::vector< itkImageRGBAUC2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBAUC2_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageRGBAUC2 self)"""
        return _itkImagePython.vectoritkImageRGBAUC2_clear(self)


    def get_allocator(self) -> "std::vector< itkImageRGBAUC2_Pointer >::allocator_type":
        """get_allocator(vectoritkImageRGBAUC2 self) -> std::vector< itkImageRGBAUC2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageRGBAUC2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageRGBAUC2 self)"""
        return _itkImagePython.vectoritkImageRGBAUC2_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageRGBAUC2_Pointer >::iterator":
        """
        erase(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::iterator pos) -> std::vector< itkImageRGBAUC2_Pointer >::iterator
        erase(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::iterator first, std::vector< itkImageRGBAUC2_Pointer >::iterator last) -> std::vector< itkImageRGBAUC2_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageRGBAUC2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageRGBAUC2_Pointer)> self) -> vectoritkImageRGBAUC2
        __init__(std::vector<(itkImageRGBAUC2_Pointer)> self, vectoritkImageRGBAUC2 arg2) -> vectoritkImageRGBAUC2
        __init__(std::vector<(itkImageRGBAUC2_Pointer)> self, std::vector< itkImageRGBAUC2_Pointer >::size_type size) -> vectoritkImageRGBAUC2
        __init__(std::vector<(itkImageRGBAUC2_Pointer)> self, std::vector< itkImageRGBAUC2_Pointer >::size_type size, std::vector< itkImageRGBAUC2_Pointer >::value_type const & value) -> vectoritkImageRGBAUC2
        """
        _itkImagePython.vectoritkImageRGBAUC2_swiginit(self, _itkImagePython.new_vectoritkImageRGBAUC2(*args))

    def push_back(self, x: 'std::vector< itkImageRGBAUC2_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageRGBAUC2_push_back(self, x)


    def front(self) -> "std::vector< itkImageRGBAUC2_Pointer >::value_type const &":
        """front(vectoritkImageRGBAUC2 self) -> std::vector< itkImageRGBAUC2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBAUC2_front(self)


    def back(self) -> "std::vector< itkImageRGBAUC2_Pointer >::value_type const &":
        """back(vectoritkImageRGBAUC2 self) -> std::vector< itkImageRGBAUC2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBAUC2_back(self)


    def assign(self, n: 'std::vector< itkImageRGBAUC2_Pointer >::size_type', x: 'std::vector< itkImageRGBAUC2_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::size_type n, std::vector< itkImageRGBAUC2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageRGBAUC2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::size_type new_size)
        resize(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::size_type new_size, std::vector< itkImageRGBAUC2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageRGBAUC2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::iterator pos, std::vector< itkImageRGBAUC2_Pointer >::value_type const & x) -> std::vector< itkImageRGBAUC2_Pointer >::iterator
        insert(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::iterator pos, std::vector< itkImageRGBAUC2_Pointer >::size_type n, std::vector< itkImageRGBAUC2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageRGBAUC2_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageRGBAUC2_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageRGBAUC2 self, std::vector< itkImageRGBAUC2_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageRGBAUC2_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageRGBAUC2_Pointer >::size_type":
        """capacity(vectoritkImageRGBAUC2 self) -> std::vector< itkImageRGBAUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC2_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageRGBAUC2
vectoritkImageRGBAUC2.iterator = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_iterator, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2___nonzero__, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2___bool__, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.__len__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2___len__, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2___getslice__, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2___setslice__, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2___delslice__, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2___delitem__, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2___getitem__, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2___setitem__, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.pop = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_pop, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.append = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_append, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.empty = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_empty, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.size = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_size, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.swap = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_swap, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.begin = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_begin, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.end = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_end, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.rbegin = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_rbegin, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.rend = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_rend, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.clear = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_clear, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_get_allocator, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.pop_back = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_pop_back, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.erase = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_erase, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.push_back = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_push_back, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.front = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_front, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.back = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_back, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.assign = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_assign, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.resize = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_resize, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.insert = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_insert, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.reserve = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_reserve, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2.capacity = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC2_capacity, None, vectoritkImageRGBAUC2)
vectoritkImageRGBAUC2_swigregister = _itkImagePython.vectoritkImageRGBAUC2_swigregister
vectoritkImageRGBAUC2_swigregister(vectoritkImageRGBAUC2)

class vectoritkImageVF22(object):
    """Proxy of C++ std::vector<(itkImageVF22_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVF22 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF22_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVF22 self) -> bool"""
        return _itkImagePython.vectoritkImageVF22___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVF22 self) -> bool"""
        return _itkImagePython.vectoritkImageVF22___bool__(self)


    def __len__(self) -> "std::vector< itkImageVF22_Pointer >::size_type":
        """__len__(vectoritkImageVF22 self) -> std::vector< itkImageVF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF22___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVF22_Pointer >::difference_type', j: 'std::vector< itkImageVF22_Pointer >::difference_type') -> "std::vector< itkImageVF22_Pointer,std::allocator< itkImageVF22_Pointer > > *":
        """__getslice__(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::difference_type i, std::vector< itkImageVF22_Pointer >::difference_type j) -> vectoritkImageVF22"""
        return _itkImagePython.vectoritkImageVF22___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::difference_type i, std::vector< itkImageVF22_Pointer >::difference_type j)
        __setslice__(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::difference_type i, std::vector< itkImageVF22_Pointer >::difference_type j, vectoritkImageVF22 v)
        """
        return _itkImagePython.vectoritkImageVF22___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVF22_Pointer >::difference_type', j: 'std::vector< itkImageVF22_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::difference_type i, std::vector< itkImageVF22_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVF22___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::difference_type i)
        __delitem__(vectoritkImageVF22 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVF22___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVF22_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVF22 self, PySliceObject * slice) -> vectoritkImageVF22
        __getitem__(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::difference_type i) -> std::vector< itkImageVF22_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVF22___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVF22 self, PySliceObject * slice, vectoritkImageVF22 v)
        __setitem__(vectoritkImageVF22 self, PySliceObject * slice)
        __setitem__(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::difference_type i, std::vector< itkImageVF22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF22___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVF22_Pointer >::value_type":
        """pop(vectoritkImageVF22 self) -> std::vector< itkImageVF22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF22_pop(self)


    def append(self, x: 'std::vector< itkImageVF22_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF22_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVF22 self) -> bool"""
        return _itkImagePython.vectoritkImageVF22_empty(self)


    def size(self) -> "std::vector< itkImageVF22_Pointer >::size_type":
        """size(vectoritkImageVF22 self) -> std::vector< itkImageVF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF22_size(self)


    def swap(self, v: 'vectoritkImageVF22') -> "void":
        """swap(vectoritkImageVF22 self, vectoritkImageVF22 v)"""
        return _itkImagePython.vectoritkImageVF22_swap(self, v)


    def begin(self) -> "std::vector< itkImageVF22_Pointer >::iterator":
        """begin(vectoritkImageVF22 self) -> std::vector< itkImageVF22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF22_begin(self)


    def end(self) -> "std::vector< itkImageVF22_Pointer >::iterator":
        """end(vectoritkImageVF22 self) -> std::vector< itkImageVF22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF22_end(self)


    def rbegin(self) -> "std::vector< itkImageVF22_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVF22 self) -> std::vector< itkImageVF22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF22_rbegin(self)


    def rend(self) -> "std::vector< itkImageVF22_Pointer >::reverse_iterator":
        """rend(vectoritkImageVF22 self) -> std::vector< itkImageVF22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF22_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVF22 self)"""
        return _itkImagePython.vectoritkImageVF22_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVF22_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVF22 self) -> std::vector< itkImageVF22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF22_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVF22 self)"""
        return _itkImagePython.vectoritkImageVF22_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVF22_Pointer >::iterator":
        """
        erase(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::iterator pos) -> std::vector< itkImageVF22_Pointer >::iterator
        erase(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::iterator first, std::vector< itkImageVF22_Pointer >::iterator last) -> std::vector< itkImageVF22_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVF22_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVF22_Pointer)> self) -> vectoritkImageVF22
        __init__(std::vector<(itkImageVF22_Pointer)> self, vectoritkImageVF22 arg2) -> vectoritkImageVF22
        __init__(std::vector<(itkImageVF22_Pointer)> self, std::vector< itkImageVF22_Pointer >::size_type size) -> vectoritkImageVF22
        __init__(std::vector<(itkImageVF22_Pointer)> self, std::vector< itkImageVF22_Pointer >::size_type size, std::vector< itkImageVF22_Pointer >::value_type const & value) -> vectoritkImageVF22
        """
        _itkImagePython.vectoritkImageVF22_swiginit(self, _itkImagePython.new_vectoritkImageVF22(*args))

    def push_back(self, x: 'std::vector< itkImageVF22_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF22_push_back(self, x)


    def front(self) -> "std::vector< itkImageVF22_Pointer >::value_type const &":
        """front(vectoritkImageVF22 self) -> std::vector< itkImageVF22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF22_front(self)


    def back(self) -> "std::vector< itkImageVF22_Pointer >::value_type const &":
        """back(vectoritkImageVF22 self) -> std::vector< itkImageVF22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF22_back(self)


    def assign(self, n: 'std::vector< itkImageVF22_Pointer >::size_type', x: 'std::vector< itkImageVF22_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::size_type n, std::vector< itkImageVF22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF22_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::size_type new_size)
        resize(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::size_type new_size, std::vector< itkImageVF22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF22_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::iterator pos, std::vector< itkImageVF22_Pointer >::value_type const & x) -> std::vector< itkImageVF22_Pointer >::iterator
        insert(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::iterator pos, std::vector< itkImageVF22_Pointer >::size_type n, std::vector< itkImageVF22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF22_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVF22_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVF22 self, std::vector< itkImageVF22_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVF22_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVF22_Pointer >::size_type":
        """capacity(vectoritkImageVF22 self) -> std::vector< itkImageVF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF22_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF22
vectoritkImageVF22.iterator = new_instancemethod(_itkImagePython.vectoritkImageVF22_iterator, None, vectoritkImageVF22)
vectoritkImageVF22.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVF22___nonzero__, None, vectoritkImageVF22)
vectoritkImageVF22.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVF22___bool__, None, vectoritkImageVF22)
vectoritkImageVF22.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVF22___len__, None, vectoritkImageVF22)
vectoritkImageVF22.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF22___getslice__, None, vectoritkImageVF22)
vectoritkImageVF22.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF22___setslice__, None, vectoritkImageVF22)
vectoritkImageVF22.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF22___delslice__, None, vectoritkImageVF22)
vectoritkImageVF22.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF22___delitem__, None, vectoritkImageVF22)
vectoritkImageVF22.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF22___getitem__, None, vectoritkImageVF22)
vectoritkImageVF22.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF22___setitem__, None, vectoritkImageVF22)
vectoritkImageVF22.pop = new_instancemethod(_itkImagePython.vectoritkImageVF22_pop, None, vectoritkImageVF22)
vectoritkImageVF22.append = new_instancemethod(_itkImagePython.vectoritkImageVF22_append, None, vectoritkImageVF22)
vectoritkImageVF22.empty = new_instancemethod(_itkImagePython.vectoritkImageVF22_empty, None, vectoritkImageVF22)
vectoritkImageVF22.size = new_instancemethod(_itkImagePython.vectoritkImageVF22_size, None, vectoritkImageVF22)
vectoritkImageVF22.swap = new_instancemethod(_itkImagePython.vectoritkImageVF22_swap, None, vectoritkImageVF22)
vectoritkImageVF22.begin = new_instancemethod(_itkImagePython.vectoritkImageVF22_begin, None, vectoritkImageVF22)
vectoritkImageVF22.end = new_instancemethod(_itkImagePython.vectoritkImageVF22_end, None, vectoritkImageVF22)
vectoritkImageVF22.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVF22_rbegin, None, vectoritkImageVF22)
vectoritkImageVF22.rend = new_instancemethod(_itkImagePython.vectoritkImageVF22_rend, None, vectoritkImageVF22)
vectoritkImageVF22.clear = new_instancemethod(_itkImagePython.vectoritkImageVF22_clear, None, vectoritkImageVF22)
vectoritkImageVF22.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVF22_get_allocator, None, vectoritkImageVF22)
vectoritkImageVF22.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVF22_pop_back, None, vectoritkImageVF22)
vectoritkImageVF22.erase = new_instancemethod(_itkImagePython.vectoritkImageVF22_erase, None, vectoritkImageVF22)
vectoritkImageVF22.push_back = new_instancemethod(_itkImagePython.vectoritkImageVF22_push_back, None, vectoritkImageVF22)
vectoritkImageVF22.front = new_instancemethod(_itkImagePython.vectoritkImageVF22_front, None, vectoritkImageVF22)
vectoritkImageVF22.back = new_instancemethod(_itkImagePython.vectoritkImageVF22_back, None, vectoritkImageVF22)
vectoritkImageVF22.assign = new_instancemethod(_itkImagePython.vectoritkImageVF22_assign, None, vectoritkImageVF22)
vectoritkImageVF22.resize = new_instancemethod(_itkImagePython.vectoritkImageVF22_resize, None, vectoritkImageVF22)
vectoritkImageVF22.insert = new_instancemethod(_itkImagePython.vectoritkImageVF22_insert, None, vectoritkImageVF22)
vectoritkImageVF22.reserve = new_instancemethod(_itkImagePython.vectoritkImageVF22_reserve, None, vectoritkImageVF22)
vectoritkImageVF22.capacity = new_instancemethod(_itkImagePython.vectoritkImageVF22_capacity, None, vectoritkImageVF22)
vectoritkImageVF22_swigregister = _itkImagePython.vectoritkImageVF22_swigregister
vectoritkImageVF22_swigregister(vectoritkImageVF22)

class vectoritkImageVF32(object):
    """Proxy of C++ std::vector<(itkImageVF32_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVF32 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF32_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVF32 self) -> bool"""
        return _itkImagePython.vectoritkImageVF32___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVF32 self) -> bool"""
        return _itkImagePython.vectoritkImageVF32___bool__(self)


    def __len__(self) -> "std::vector< itkImageVF32_Pointer >::size_type":
        """__len__(vectoritkImageVF32 self) -> std::vector< itkImageVF32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF32___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVF32_Pointer >::difference_type', j: 'std::vector< itkImageVF32_Pointer >::difference_type') -> "std::vector< itkImageVF32_Pointer,std::allocator< itkImageVF32_Pointer > > *":
        """__getslice__(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::difference_type i, std::vector< itkImageVF32_Pointer >::difference_type j) -> vectoritkImageVF32"""
        return _itkImagePython.vectoritkImageVF32___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::difference_type i, std::vector< itkImageVF32_Pointer >::difference_type j)
        __setslice__(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::difference_type i, std::vector< itkImageVF32_Pointer >::difference_type j, vectoritkImageVF32 v)
        """
        return _itkImagePython.vectoritkImageVF32___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVF32_Pointer >::difference_type', j: 'std::vector< itkImageVF32_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::difference_type i, std::vector< itkImageVF32_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVF32___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::difference_type i)
        __delitem__(vectoritkImageVF32 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVF32___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVF32_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVF32 self, PySliceObject * slice) -> vectoritkImageVF32
        __getitem__(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::difference_type i) -> std::vector< itkImageVF32_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVF32___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVF32 self, PySliceObject * slice, vectoritkImageVF32 v)
        __setitem__(vectoritkImageVF32 self, PySliceObject * slice)
        __setitem__(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::difference_type i, std::vector< itkImageVF32_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF32___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVF32_Pointer >::value_type":
        """pop(vectoritkImageVF32 self) -> std::vector< itkImageVF32_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF32_pop(self)


    def append(self, x: 'std::vector< itkImageVF32_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF32_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVF32 self) -> bool"""
        return _itkImagePython.vectoritkImageVF32_empty(self)


    def size(self) -> "std::vector< itkImageVF32_Pointer >::size_type":
        """size(vectoritkImageVF32 self) -> std::vector< itkImageVF32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF32_size(self)


    def swap(self, v: 'vectoritkImageVF32') -> "void":
        """swap(vectoritkImageVF32 self, vectoritkImageVF32 v)"""
        return _itkImagePython.vectoritkImageVF32_swap(self, v)


    def begin(self) -> "std::vector< itkImageVF32_Pointer >::iterator":
        """begin(vectoritkImageVF32 self) -> std::vector< itkImageVF32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF32_begin(self)


    def end(self) -> "std::vector< itkImageVF32_Pointer >::iterator":
        """end(vectoritkImageVF32 self) -> std::vector< itkImageVF32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF32_end(self)


    def rbegin(self) -> "std::vector< itkImageVF32_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVF32 self) -> std::vector< itkImageVF32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF32_rbegin(self)


    def rend(self) -> "std::vector< itkImageVF32_Pointer >::reverse_iterator":
        """rend(vectoritkImageVF32 self) -> std::vector< itkImageVF32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF32_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVF32 self)"""
        return _itkImagePython.vectoritkImageVF32_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVF32_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVF32 self) -> std::vector< itkImageVF32_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF32_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVF32 self)"""
        return _itkImagePython.vectoritkImageVF32_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVF32_Pointer >::iterator":
        """
        erase(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::iterator pos) -> std::vector< itkImageVF32_Pointer >::iterator
        erase(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::iterator first, std::vector< itkImageVF32_Pointer >::iterator last) -> std::vector< itkImageVF32_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVF32_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVF32_Pointer)> self) -> vectoritkImageVF32
        __init__(std::vector<(itkImageVF32_Pointer)> self, vectoritkImageVF32 arg2) -> vectoritkImageVF32
        __init__(std::vector<(itkImageVF32_Pointer)> self, std::vector< itkImageVF32_Pointer >::size_type size) -> vectoritkImageVF32
        __init__(std::vector<(itkImageVF32_Pointer)> self, std::vector< itkImageVF32_Pointer >::size_type size, std::vector< itkImageVF32_Pointer >::value_type const & value) -> vectoritkImageVF32
        """
        _itkImagePython.vectoritkImageVF32_swiginit(self, _itkImagePython.new_vectoritkImageVF32(*args))

    def push_back(self, x: 'std::vector< itkImageVF32_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF32_push_back(self, x)


    def front(self) -> "std::vector< itkImageVF32_Pointer >::value_type const &":
        """front(vectoritkImageVF32 self) -> std::vector< itkImageVF32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF32_front(self)


    def back(self) -> "std::vector< itkImageVF32_Pointer >::value_type const &":
        """back(vectoritkImageVF32 self) -> std::vector< itkImageVF32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF32_back(self)


    def assign(self, n: 'std::vector< itkImageVF32_Pointer >::size_type', x: 'std::vector< itkImageVF32_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::size_type n, std::vector< itkImageVF32_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF32_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::size_type new_size)
        resize(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::size_type new_size, std::vector< itkImageVF32_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF32_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::iterator pos, std::vector< itkImageVF32_Pointer >::value_type const & x) -> std::vector< itkImageVF32_Pointer >::iterator
        insert(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::iterator pos, std::vector< itkImageVF32_Pointer >::size_type n, std::vector< itkImageVF32_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF32_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVF32_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVF32 self, std::vector< itkImageVF32_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVF32_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVF32_Pointer >::size_type":
        """capacity(vectoritkImageVF32 self) -> std::vector< itkImageVF32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF32_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF32
vectoritkImageVF32.iterator = new_instancemethod(_itkImagePython.vectoritkImageVF32_iterator, None, vectoritkImageVF32)
vectoritkImageVF32.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVF32___nonzero__, None, vectoritkImageVF32)
vectoritkImageVF32.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVF32___bool__, None, vectoritkImageVF32)
vectoritkImageVF32.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVF32___len__, None, vectoritkImageVF32)
vectoritkImageVF32.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF32___getslice__, None, vectoritkImageVF32)
vectoritkImageVF32.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF32___setslice__, None, vectoritkImageVF32)
vectoritkImageVF32.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF32___delslice__, None, vectoritkImageVF32)
vectoritkImageVF32.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF32___delitem__, None, vectoritkImageVF32)
vectoritkImageVF32.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF32___getitem__, None, vectoritkImageVF32)
vectoritkImageVF32.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF32___setitem__, None, vectoritkImageVF32)
vectoritkImageVF32.pop = new_instancemethod(_itkImagePython.vectoritkImageVF32_pop, None, vectoritkImageVF32)
vectoritkImageVF32.append = new_instancemethod(_itkImagePython.vectoritkImageVF32_append, None, vectoritkImageVF32)
vectoritkImageVF32.empty = new_instancemethod(_itkImagePython.vectoritkImageVF32_empty, None, vectoritkImageVF32)
vectoritkImageVF32.size = new_instancemethod(_itkImagePython.vectoritkImageVF32_size, None, vectoritkImageVF32)
vectoritkImageVF32.swap = new_instancemethod(_itkImagePython.vectoritkImageVF32_swap, None, vectoritkImageVF32)
vectoritkImageVF32.begin = new_instancemethod(_itkImagePython.vectoritkImageVF32_begin, None, vectoritkImageVF32)
vectoritkImageVF32.end = new_instancemethod(_itkImagePython.vectoritkImageVF32_end, None, vectoritkImageVF32)
vectoritkImageVF32.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVF32_rbegin, None, vectoritkImageVF32)
vectoritkImageVF32.rend = new_instancemethod(_itkImagePython.vectoritkImageVF32_rend, None, vectoritkImageVF32)
vectoritkImageVF32.clear = new_instancemethod(_itkImagePython.vectoritkImageVF32_clear, None, vectoritkImageVF32)
vectoritkImageVF32.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVF32_get_allocator, None, vectoritkImageVF32)
vectoritkImageVF32.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVF32_pop_back, None, vectoritkImageVF32)
vectoritkImageVF32.erase = new_instancemethod(_itkImagePython.vectoritkImageVF32_erase, None, vectoritkImageVF32)
vectoritkImageVF32.push_back = new_instancemethod(_itkImagePython.vectoritkImageVF32_push_back, None, vectoritkImageVF32)
vectoritkImageVF32.front = new_instancemethod(_itkImagePython.vectoritkImageVF32_front, None, vectoritkImageVF32)
vectoritkImageVF32.back = new_instancemethod(_itkImagePython.vectoritkImageVF32_back, None, vectoritkImageVF32)
vectoritkImageVF32.assign = new_instancemethod(_itkImagePython.vectoritkImageVF32_assign, None, vectoritkImageVF32)
vectoritkImageVF32.resize = new_instancemethod(_itkImagePython.vectoritkImageVF32_resize, None, vectoritkImageVF32)
vectoritkImageVF32.insert = new_instancemethod(_itkImagePython.vectoritkImageVF32_insert, None, vectoritkImageVF32)
vectoritkImageVF32.reserve = new_instancemethod(_itkImagePython.vectoritkImageVF32_reserve, None, vectoritkImageVF32)
vectoritkImageVF32.capacity = new_instancemethod(_itkImagePython.vectoritkImageVF32_capacity, None, vectoritkImageVF32)
vectoritkImageVF32_swigregister = _itkImagePython.vectoritkImageVF32_swigregister
vectoritkImageVF32_swigregister(vectoritkImageVF32)

class vectoritkImageVF42(object):
    """Proxy of C++ std::vector<(itkImageVF42_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVF42 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF42_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVF42 self) -> bool"""
        return _itkImagePython.vectoritkImageVF42___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVF42 self) -> bool"""
        return _itkImagePython.vectoritkImageVF42___bool__(self)


    def __len__(self) -> "std::vector< itkImageVF42_Pointer >::size_type":
        """__len__(vectoritkImageVF42 self) -> std::vector< itkImageVF42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF42___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVF42_Pointer >::difference_type', j: 'std::vector< itkImageVF42_Pointer >::difference_type') -> "std::vector< itkImageVF42_Pointer,std::allocator< itkImageVF42_Pointer > > *":
        """__getslice__(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::difference_type i, std::vector< itkImageVF42_Pointer >::difference_type j) -> vectoritkImageVF42"""
        return _itkImagePython.vectoritkImageVF42___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::difference_type i, std::vector< itkImageVF42_Pointer >::difference_type j)
        __setslice__(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::difference_type i, std::vector< itkImageVF42_Pointer >::difference_type j, vectoritkImageVF42 v)
        """
        return _itkImagePython.vectoritkImageVF42___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVF42_Pointer >::difference_type', j: 'std::vector< itkImageVF42_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::difference_type i, std::vector< itkImageVF42_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVF42___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::difference_type i)
        __delitem__(vectoritkImageVF42 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVF42___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVF42_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVF42 self, PySliceObject * slice) -> vectoritkImageVF42
        __getitem__(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::difference_type i) -> std::vector< itkImageVF42_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVF42___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVF42 self, PySliceObject * slice, vectoritkImageVF42 v)
        __setitem__(vectoritkImageVF42 self, PySliceObject * slice)
        __setitem__(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::difference_type i, std::vector< itkImageVF42_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF42___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVF42_Pointer >::value_type":
        """pop(vectoritkImageVF42 self) -> std::vector< itkImageVF42_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF42_pop(self)


    def append(self, x: 'std::vector< itkImageVF42_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF42_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVF42 self) -> bool"""
        return _itkImagePython.vectoritkImageVF42_empty(self)


    def size(self) -> "std::vector< itkImageVF42_Pointer >::size_type":
        """size(vectoritkImageVF42 self) -> std::vector< itkImageVF42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF42_size(self)


    def swap(self, v: 'vectoritkImageVF42') -> "void":
        """swap(vectoritkImageVF42 self, vectoritkImageVF42 v)"""
        return _itkImagePython.vectoritkImageVF42_swap(self, v)


    def begin(self) -> "std::vector< itkImageVF42_Pointer >::iterator":
        """begin(vectoritkImageVF42 self) -> std::vector< itkImageVF42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF42_begin(self)


    def end(self) -> "std::vector< itkImageVF42_Pointer >::iterator":
        """end(vectoritkImageVF42 self) -> std::vector< itkImageVF42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF42_end(self)


    def rbegin(self) -> "std::vector< itkImageVF42_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVF42 self) -> std::vector< itkImageVF42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF42_rbegin(self)


    def rend(self) -> "std::vector< itkImageVF42_Pointer >::reverse_iterator":
        """rend(vectoritkImageVF42 self) -> std::vector< itkImageVF42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF42_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVF42 self)"""
        return _itkImagePython.vectoritkImageVF42_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVF42_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVF42 self) -> std::vector< itkImageVF42_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF42_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVF42 self)"""
        return _itkImagePython.vectoritkImageVF42_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVF42_Pointer >::iterator":
        """
        erase(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::iterator pos) -> std::vector< itkImageVF42_Pointer >::iterator
        erase(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::iterator first, std::vector< itkImageVF42_Pointer >::iterator last) -> std::vector< itkImageVF42_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVF42_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVF42_Pointer)> self) -> vectoritkImageVF42
        __init__(std::vector<(itkImageVF42_Pointer)> self, vectoritkImageVF42 arg2) -> vectoritkImageVF42
        __init__(std::vector<(itkImageVF42_Pointer)> self, std::vector< itkImageVF42_Pointer >::size_type size) -> vectoritkImageVF42
        __init__(std::vector<(itkImageVF42_Pointer)> self, std::vector< itkImageVF42_Pointer >::size_type size, std::vector< itkImageVF42_Pointer >::value_type const & value) -> vectoritkImageVF42
        """
        _itkImagePython.vectoritkImageVF42_swiginit(self, _itkImagePython.new_vectoritkImageVF42(*args))

    def push_back(self, x: 'std::vector< itkImageVF42_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF42_push_back(self, x)


    def front(self) -> "std::vector< itkImageVF42_Pointer >::value_type const &":
        """front(vectoritkImageVF42 self) -> std::vector< itkImageVF42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF42_front(self)


    def back(self) -> "std::vector< itkImageVF42_Pointer >::value_type const &":
        """back(vectoritkImageVF42 self) -> std::vector< itkImageVF42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF42_back(self)


    def assign(self, n: 'std::vector< itkImageVF42_Pointer >::size_type', x: 'std::vector< itkImageVF42_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::size_type n, std::vector< itkImageVF42_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF42_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::size_type new_size)
        resize(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::size_type new_size, std::vector< itkImageVF42_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF42_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::iterator pos, std::vector< itkImageVF42_Pointer >::value_type const & x) -> std::vector< itkImageVF42_Pointer >::iterator
        insert(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::iterator pos, std::vector< itkImageVF42_Pointer >::size_type n, std::vector< itkImageVF42_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF42_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVF42_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVF42 self, std::vector< itkImageVF42_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVF42_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVF42_Pointer >::size_type":
        """capacity(vectoritkImageVF42 self) -> std::vector< itkImageVF42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF42_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF42
vectoritkImageVF42.iterator = new_instancemethod(_itkImagePython.vectoritkImageVF42_iterator, None, vectoritkImageVF42)
vectoritkImageVF42.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVF42___nonzero__, None, vectoritkImageVF42)
vectoritkImageVF42.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVF42___bool__, None, vectoritkImageVF42)
vectoritkImageVF42.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVF42___len__, None, vectoritkImageVF42)
vectoritkImageVF42.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF42___getslice__, None, vectoritkImageVF42)
vectoritkImageVF42.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF42___setslice__, None, vectoritkImageVF42)
vectoritkImageVF42.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF42___delslice__, None, vectoritkImageVF42)
vectoritkImageVF42.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF42___delitem__, None, vectoritkImageVF42)
vectoritkImageVF42.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF42___getitem__, None, vectoritkImageVF42)
vectoritkImageVF42.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF42___setitem__, None, vectoritkImageVF42)
vectoritkImageVF42.pop = new_instancemethod(_itkImagePython.vectoritkImageVF42_pop, None, vectoritkImageVF42)
vectoritkImageVF42.append = new_instancemethod(_itkImagePython.vectoritkImageVF42_append, None, vectoritkImageVF42)
vectoritkImageVF42.empty = new_instancemethod(_itkImagePython.vectoritkImageVF42_empty, None, vectoritkImageVF42)
vectoritkImageVF42.size = new_instancemethod(_itkImagePython.vectoritkImageVF42_size, None, vectoritkImageVF42)
vectoritkImageVF42.swap = new_instancemethod(_itkImagePython.vectoritkImageVF42_swap, None, vectoritkImageVF42)
vectoritkImageVF42.begin = new_instancemethod(_itkImagePython.vectoritkImageVF42_begin, None, vectoritkImageVF42)
vectoritkImageVF42.end = new_instancemethod(_itkImagePython.vectoritkImageVF42_end, None, vectoritkImageVF42)
vectoritkImageVF42.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVF42_rbegin, None, vectoritkImageVF42)
vectoritkImageVF42.rend = new_instancemethod(_itkImagePython.vectoritkImageVF42_rend, None, vectoritkImageVF42)
vectoritkImageVF42.clear = new_instancemethod(_itkImagePython.vectoritkImageVF42_clear, None, vectoritkImageVF42)
vectoritkImageVF42.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVF42_get_allocator, None, vectoritkImageVF42)
vectoritkImageVF42.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVF42_pop_back, None, vectoritkImageVF42)
vectoritkImageVF42.erase = new_instancemethod(_itkImagePython.vectoritkImageVF42_erase, None, vectoritkImageVF42)
vectoritkImageVF42.push_back = new_instancemethod(_itkImagePython.vectoritkImageVF42_push_back, None, vectoritkImageVF42)
vectoritkImageVF42.front = new_instancemethod(_itkImagePython.vectoritkImageVF42_front, None, vectoritkImageVF42)
vectoritkImageVF42.back = new_instancemethod(_itkImagePython.vectoritkImageVF42_back, None, vectoritkImageVF42)
vectoritkImageVF42.assign = new_instancemethod(_itkImagePython.vectoritkImageVF42_assign, None, vectoritkImageVF42)
vectoritkImageVF42.resize = new_instancemethod(_itkImagePython.vectoritkImageVF42_resize, None, vectoritkImageVF42)
vectoritkImageVF42.insert = new_instancemethod(_itkImagePython.vectoritkImageVF42_insert, None, vectoritkImageVF42)
vectoritkImageVF42.reserve = new_instancemethod(_itkImagePython.vectoritkImageVF42_reserve, None, vectoritkImageVF42)
vectoritkImageVF42.capacity = new_instancemethod(_itkImagePython.vectoritkImageVF42_capacity, None, vectoritkImageVF42)
vectoritkImageVF42_swigregister = _itkImagePython.vectoritkImageVF42_swigregister
vectoritkImageVF42_swigregister(vectoritkImageVF42)

class vectoritkImageCVF22(object):
    """Proxy of C++ std::vector<(itkImageCVF22_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageCVF22 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF22_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageCVF22 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF22___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageCVF22 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF22___bool__(self)


    def __len__(self) -> "std::vector< itkImageCVF22_Pointer >::size_type":
        """__len__(vectoritkImageCVF22 self) -> std::vector< itkImageCVF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF22___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageCVF22_Pointer >::difference_type', j: 'std::vector< itkImageCVF22_Pointer >::difference_type') -> "std::vector< itkImageCVF22_Pointer,std::allocator< itkImageCVF22_Pointer > > *":
        """__getslice__(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::difference_type i, std::vector< itkImageCVF22_Pointer >::difference_type j) -> vectoritkImageCVF22"""
        return _itkImagePython.vectoritkImageCVF22___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::difference_type i, std::vector< itkImageCVF22_Pointer >::difference_type j)
        __setslice__(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::difference_type i, std::vector< itkImageCVF22_Pointer >::difference_type j, vectoritkImageCVF22 v)
        """
        return _itkImagePython.vectoritkImageCVF22___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageCVF22_Pointer >::difference_type', j: 'std::vector< itkImageCVF22_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::difference_type i, std::vector< itkImageCVF22_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageCVF22___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::difference_type i)
        __delitem__(vectoritkImageCVF22 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageCVF22___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageCVF22_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageCVF22 self, PySliceObject * slice) -> vectoritkImageCVF22
        __getitem__(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::difference_type i) -> std::vector< itkImageCVF22_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageCVF22___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageCVF22 self, PySliceObject * slice, vectoritkImageCVF22 v)
        __setitem__(vectoritkImageCVF22 self, PySliceObject * slice)
        __setitem__(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::difference_type i, std::vector< itkImageCVF22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF22___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageCVF22_Pointer >::value_type":
        """pop(vectoritkImageCVF22 self) -> std::vector< itkImageCVF22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF22_pop(self)


    def append(self, x: 'std::vector< itkImageCVF22_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF22_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageCVF22 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF22_empty(self)


    def size(self) -> "std::vector< itkImageCVF22_Pointer >::size_type":
        """size(vectoritkImageCVF22 self) -> std::vector< itkImageCVF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF22_size(self)


    def swap(self, v: 'vectoritkImageCVF22') -> "void":
        """swap(vectoritkImageCVF22 self, vectoritkImageCVF22 v)"""
        return _itkImagePython.vectoritkImageCVF22_swap(self, v)


    def begin(self) -> "std::vector< itkImageCVF22_Pointer >::iterator":
        """begin(vectoritkImageCVF22 self) -> std::vector< itkImageCVF22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF22_begin(self)


    def end(self) -> "std::vector< itkImageCVF22_Pointer >::iterator":
        """end(vectoritkImageCVF22 self) -> std::vector< itkImageCVF22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF22_end(self)


    def rbegin(self) -> "std::vector< itkImageCVF22_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageCVF22 self) -> std::vector< itkImageCVF22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF22_rbegin(self)


    def rend(self) -> "std::vector< itkImageCVF22_Pointer >::reverse_iterator":
        """rend(vectoritkImageCVF22 self) -> std::vector< itkImageCVF22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF22_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageCVF22 self)"""
        return _itkImagePython.vectoritkImageCVF22_clear(self)


    def get_allocator(self) -> "std::vector< itkImageCVF22_Pointer >::allocator_type":
        """get_allocator(vectoritkImageCVF22 self) -> std::vector< itkImageCVF22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF22_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageCVF22 self)"""
        return _itkImagePython.vectoritkImageCVF22_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageCVF22_Pointer >::iterator":
        """
        erase(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::iterator pos) -> std::vector< itkImageCVF22_Pointer >::iterator
        erase(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::iterator first, std::vector< itkImageCVF22_Pointer >::iterator last) -> std::vector< itkImageCVF22_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageCVF22_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageCVF22_Pointer)> self) -> vectoritkImageCVF22
        __init__(std::vector<(itkImageCVF22_Pointer)> self, vectoritkImageCVF22 arg2) -> vectoritkImageCVF22
        __init__(std::vector<(itkImageCVF22_Pointer)> self, std::vector< itkImageCVF22_Pointer >::size_type size) -> vectoritkImageCVF22
        __init__(std::vector<(itkImageCVF22_Pointer)> self, std::vector< itkImageCVF22_Pointer >::size_type size, std::vector< itkImageCVF22_Pointer >::value_type const & value) -> vectoritkImageCVF22
        """
        _itkImagePython.vectoritkImageCVF22_swiginit(self, _itkImagePython.new_vectoritkImageCVF22(*args))

    def push_back(self, x: 'std::vector< itkImageCVF22_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF22_push_back(self, x)


    def front(self) -> "std::vector< itkImageCVF22_Pointer >::value_type const &":
        """front(vectoritkImageCVF22 self) -> std::vector< itkImageCVF22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF22_front(self)


    def back(self) -> "std::vector< itkImageCVF22_Pointer >::value_type const &":
        """back(vectoritkImageCVF22 self) -> std::vector< itkImageCVF22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF22_back(self)


    def assign(self, n: 'std::vector< itkImageCVF22_Pointer >::size_type', x: 'std::vector< itkImageCVF22_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::size_type n, std::vector< itkImageCVF22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF22_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::size_type new_size)
        resize(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::size_type new_size, std::vector< itkImageCVF22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF22_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::iterator pos, std::vector< itkImageCVF22_Pointer >::value_type const & x) -> std::vector< itkImageCVF22_Pointer >::iterator
        insert(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::iterator pos, std::vector< itkImageCVF22_Pointer >::size_type n, std::vector< itkImageCVF22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF22_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageCVF22_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageCVF22 self, std::vector< itkImageCVF22_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageCVF22_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageCVF22_Pointer >::size_type":
        """capacity(vectoritkImageCVF22 self) -> std::vector< itkImageCVF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF22_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF22
vectoritkImageCVF22.iterator = new_instancemethod(_itkImagePython.vectoritkImageCVF22_iterator, None, vectoritkImageCVF22)
vectoritkImageCVF22.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageCVF22___nonzero__, None, vectoritkImageCVF22)
vectoritkImageCVF22.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageCVF22___bool__, None, vectoritkImageCVF22)
vectoritkImageCVF22.__len__ = new_instancemethod(_itkImagePython.vectoritkImageCVF22___len__, None, vectoritkImageCVF22)
vectoritkImageCVF22.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF22___getslice__, None, vectoritkImageCVF22)
vectoritkImageCVF22.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF22___setslice__, None, vectoritkImageCVF22)
vectoritkImageCVF22.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF22___delslice__, None, vectoritkImageCVF22)
vectoritkImageCVF22.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF22___delitem__, None, vectoritkImageCVF22)
vectoritkImageCVF22.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF22___getitem__, None, vectoritkImageCVF22)
vectoritkImageCVF22.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF22___setitem__, None, vectoritkImageCVF22)
vectoritkImageCVF22.pop = new_instancemethod(_itkImagePython.vectoritkImageCVF22_pop, None, vectoritkImageCVF22)
vectoritkImageCVF22.append = new_instancemethod(_itkImagePython.vectoritkImageCVF22_append, None, vectoritkImageCVF22)
vectoritkImageCVF22.empty = new_instancemethod(_itkImagePython.vectoritkImageCVF22_empty, None, vectoritkImageCVF22)
vectoritkImageCVF22.size = new_instancemethod(_itkImagePython.vectoritkImageCVF22_size, None, vectoritkImageCVF22)
vectoritkImageCVF22.swap = new_instancemethod(_itkImagePython.vectoritkImageCVF22_swap, None, vectoritkImageCVF22)
vectoritkImageCVF22.begin = new_instancemethod(_itkImagePython.vectoritkImageCVF22_begin, None, vectoritkImageCVF22)
vectoritkImageCVF22.end = new_instancemethod(_itkImagePython.vectoritkImageCVF22_end, None, vectoritkImageCVF22)
vectoritkImageCVF22.rbegin = new_instancemethod(_itkImagePython.vectoritkImageCVF22_rbegin, None, vectoritkImageCVF22)
vectoritkImageCVF22.rend = new_instancemethod(_itkImagePython.vectoritkImageCVF22_rend, None, vectoritkImageCVF22)
vectoritkImageCVF22.clear = new_instancemethod(_itkImagePython.vectoritkImageCVF22_clear, None, vectoritkImageCVF22)
vectoritkImageCVF22.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageCVF22_get_allocator, None, vectoritkImageCVF22)
vectoritkImageCVF22.pop_back = new_instancemethod(_itkImagePython.vectoritkImageCVF22_pop_back, None, vectoritkImageCVF22)
vectoritkImageCVF22.erase = new_instancemethod(_itkImagePython.vectoritkImageCVF22_erase, None, vectoritkImageCVF22)
vectoritkImageCVF22.push_back = new_instancemethod(_itkImagePython.vectoritkImageCVF22_push_back, None, vectoritkImageCVF22)
vectoritkImageCVF22.front = new_instancemethod(_itkImagePython.vectoritkImageCVF22_front, None, vectoritkImageCVF22)
vectoritkImageCVF22.back = new_instancemethod(_itkImagePython.vectoritkImageCVF22_back, None, vectoritkImageCVF22)
vectoritkImageCVF22.assign = new_instancemethod(_itkImagePython.vectoritkImageCVF22_assign, None, vectoritkImageCVF22)
vectoritkImageCVF22.resize = new_instancemethod(_itkImagePython.vectoritkImageCVF22_resize, None, vectoritkImageCVF22)
vectoritkImageCVF22.insert = new_instancemethod(_itkImagePython.vectoritkImageCVF22_insert, None, vectoritkImageCVF22)
vectoritkImageCVF22.reserve = new_instancemethod(_itkImagePython.vectoritkImageCVF22_reserve, None, vectoritkImageCVF22)
vectoritkImageCVF22.capacity = new_instancemethod(_itkImagePython.vectoritkImageCVF22_capacity, None, vectoritkImageCVF22)
vectoritkImageCVF22_swigregister = _itkImagePython.vectoritkImageCVF22_swigregister
vectoritkImageCVF22_swigregister(vectoritkImageCVF22)

class vectoritkImageCVF32(object):
    """Proxy of C++ std::vector<(itkImageCVF32_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageCVF32 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF32_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageCVF32 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF32___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageCVF32 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF32___bool__(self)


    def __len__(self) -> "std::vector< itkImageCVF32_Pointer >::size_type":
        """__len__(vectoritkImageCVF32 self) -> std::vector< itkImageCVF32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF32___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageCVF32_Pointer >::difference_type', j: 'std::vector< itkImageCVF32_Pointer >::difference_type') -> "std::vector< itkImageCVF32_Pointer,std::allocator< itkImageCVF32_Pointer > > *":
        """__getslice__(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::difference_type i, std::vector< itkImageCVF32_Pointer >::difference_type j) -> vectoritkImageCVF32"""
        return _itkImagePython.vectoritkImageCVF32___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::difference_type i, std::vector< itkImageCVF32_Pointer >::difference_type j)
        __setslice__(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::difference_type i, std::vector< itkImageCVF32_Pointer >::difference_type j, vectoritkImageCVF32 v)
        """
        return _itkImagePython.vectoritkImageCVF32___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageCVF32_Pointer >::difference_type', j: 'std::vector< itkImageCVF32_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::difference_type i, std::vector< itkImageCVF32_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageCVF32___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::difference_type i)
        __delitem__(vectoritkImageCVF32 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageCVF32___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageCVF32_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageCVF32 self, PySliceObject * slice) -> vectoritkImageCVF32
        __getitem__(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::difference_type i) -> std::vector< itkImageCVF32_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageCVF32___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageCVF32 self, PySliceObject * slice, vectoritkImageCVF32 v)
        __setitem__(vectoritkImageCVF32 self, PySliceObject * slice)
        __setitem__(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::difference_type i, std::vector< itkImageCVF32_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF32___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageCVF32_Pointer >::value_type":
        """pop(vectoritkImageCVF32 self) -> std::vector< itkImageCVF32_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF32_pop(self)


    def append(self, x: 'std::vector< itkImageCVF32_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF32_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageCVF32 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF32_empty(self)


    def size(self) -> "std::vector< itkImageCVF32_Pointer >::size_type":
        """size(vectoritkImageCVF32 self) -> std::vector< itkImageCVF32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF32_size(self)


    def swap(self, v: 'vectoritkImageCVF32') -> "void":
        """swap(vectoritkImageCVF32 self, vectoritkImageCVF32 v)"""
        return _itkImagePython.vectoritkImageCVF32_swap(self, v)


    def begin(self) -> "std::vector< itkImageCVF32_Pointer >::iterator":
        """begin(vectoritkImageCVF32 self) -> std::vector< itkImageCVF32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF32_begin(self)


    def end(self) -> "std::vector< itkImageCVF32_Pointer >::iterator":
        """end(vectoritkImageCVF32 self) -> std::vector< itkImageCVF32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF32_end(self)


    def rbegin(self) -> "std::vector< itkImageCVF32_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageCVF32 self) -> std::vector< itkImageCVF32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF32_rbegin(self)


    def rend(self) -> "std::vector< itkImageCVF32_Pointer >::reverse_iterator":
        """rend(vectoritkImageCVF32 self) -> std::vector< itkImageCVF32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF32_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageCVF32 self)"""
        return _itkImagePython.vectoritkImageCVF32_clear(self)


    def get_allocator(self) -> "std::vector< itkImageCVF32_Pointer >::allocator_type":
        """get_allocator(vectoritkImageCVF32 self) -> std::vector< itkImageCVF32_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF32_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageCVF32 self)"""
        return _itkImagePython.vectoritkImageCVF32_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageCVF32_Pointer >::iterator":
        """
        erase(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::iterator pos) -> std::vector< itkImageCVF32_Pointer >::iterator
        erase(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::iterator first, std::vector< itkImageCVF32_Pointer >::iterator last) -> std::vector< itkImageCVF32_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageCVF32_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageCVF32_Pointer)> self) -> vectoritkImageCVF32
        __init__(std::vector<(itkImageCVF32_Pointer)> self, vectoritkImageCVF32 arg2) -> vectoritkImageCVF32
        __init__(std::vector<(itkImageCVF32_Pointer)> self, std::vector< itkImageCVF32_Pointer >::size_type size) -> vectoritkImageCVF32
        __init__(std::vector<(itkImageCVF32_Pointer)> self, std::vector< itkImageCVF32_Pointer >::size_type size, std::vector< itkImageCVF32_Pointer >::value_type const & value) -> vectoritkImageCVF32
        """
        _itkImagePython.vectoritkImageCVF32_swiginit(self, _itkImagePython.new_vectoritkImageCVF32(*args))

    def push_back(self, x: 'std::vector< itkImageCVF32_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF32_push_back(self, x)


    def front(self) -> "std::vector< itkImageCVF32_Pointer >::value_type const &":
        """front(vectoritkImageCVF32 self) -> std::vector< itkImageCVF32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF32_front(self)


    def back(self) -> "std::vector< itkImageCVF32_Pointer >::value_type const &":
        """back(vectoritkImageCVF32 self) -> std::vector< itkImageCVF32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF32_back(self)


    def assign(self, n: 'std::vector< itkImageCVF32_Pointer >::size_type', x: 'std::vector< itkImageCVF32_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::size_type n, std::vector< itkImageCVF32_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF32_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::size_type new_size)
        resize(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::size_type new_size, std::vector< itkImageCVF32_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF32_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::iterator pos, std::vector< itkImageCVF32_Pointer >::value_type const & x) -> std::vector< itkImageCVF32_Pointer >::iterator
        insert(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::iterator pos, std::vector< itkImageCVF32_Pointer >::size_type n, std::vector< itkImageCVF32_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF32_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageCVF32_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageCVF32 self, std::vector< itkImageCVF32_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageCVF32_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageCVF32_Pointer >::size_type":
        """capacity(vectoritkImageCVF32 self) -> std::vector< itkImageCVF32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF32_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF32
vectoritkImageCVF32.iterator = new_instancemethod(_itkImagePython.vectoritkImageCVF32_iterator, None, vectoritkImageCVF32)
vectoritkImageCVF32.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageCVF32___nonzero__, None, vectoritkImageCVF32)
vectoritkImageCVF32.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageCVF32___bool__, None, vectoritkImageCVF32)
vectoritkImageCVF32.__len__ = new_instancemethod(_itkImagePython.vectoritkImageCVF32___len__, None, vectoritkImageCVF32)
vectoritkImageCVF32.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF32___getslice__, None, vectoritkImageCVF32)
vectoritkImageCVF32.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF32___setslice__, None, vectoritkImageCVF32)
vectoritkImageCVF32.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF32___delslice__, None, vectoritkImageCVF32)
vectoritkImageCVF32.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF32___delitem__, None, vectoritkImageCVF32)
vectoritkImageCVF32.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF32___getitem__, None, vectoritkImageCVF32)
vectoritkImageCVF32.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF32___setitem__, None, vectoritkImageCVF32)
vectoritkImageCVF32.pop = new_instancemethod(_itkImagePython.vectoritkImageCVF32_pop, None, vectoritkImageCVF32)
vectoritkImageCVF32.append = new_instancemethod(_itkImagePython.vectoritkImageCVF32_append, None, vectoritkImageCVF32)
vectoritkImageCVF32.empty = new_instancemethod(_itkImagePython.vectoritkImageCVF32_empty, None, vectoritkImageCVF32)
vectoritkImageCVF32.size = new_instancemethod(_itkImagePython.vectoritkImageCVF32_size, None, vectoritkImageCVF32)
vectoritkImageCVF32.swap = new_instancemethod(_itkImagePython.vectoritkImageCVF32_swap, None, vectoritkImageCVF32)
vectoritkImageCVF32.begin = new_instancemethod(_itkImagePython.vectoritkImageCVF32_begin, None, vectoritkImageCVF32)
vectoritkImageCVF32.end = new_instancemethod(_itkImagePython.vectoritkImageCVF32_end, None, vectoritkImageCVF32)
vectoritkImageCVF32.rbegin = new_instancemethod(_itkImagePython.vectoritkImageCVF32_rbegin, None, vectoritkImageCVF32)
vectoritkImageCVF32.rend = new_instancemethod(_itkImagePython.vectoritkImageCVF32_rend, None, vectoritkImageCVF32)
vectoritkImageCVF32.clear = new_instancemethod(_itkImagePython.vectoritkImageCVF32_clear, None, vectoritkImageCVF32)
vectoritkImageCVF32.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageCVF32_get_allocator, None, vectoritkImageCVF32)
vectoritkImageCVF32.pop_back = new_instancemethod(_itkImagePython.vectoritkImageCVF32_pop_back, None, vectoritkImageCVF32)
vectoritkImageCVF32.erase = new_instancemethod(_itkImagePython.vectoritkImageCVF32_erase, None, vectoritkImageCVF32)
vectoritkImageCVF32.push_back = new_instancemethod(_itkImagePython.vectoritkImageCVF32_push_back, None, vectoritkImageCVF32)
vectoritkImageCVF32.front = new_instancemethod(_itkImagePython.vectoritkImageCVF32_front, None, vectoritkImageCVF32)
vectoritkImageCVF32.back = new_instancemethod(_itkImagePython.vectoritkImageCVF32_back, None, vectoritkImageCVF32)
vectoritkImageCVF32.assign = new_instancemethod(_itkImagePython.vectoritkImageCVF32_assign, None, vectoritkImageCVF32)
vectoritkImageCVF32.resize = new_instancemethod(_itkImagePython.vectoritkImageCVF32_resize, None, vectoritkImageCVF32)
vectoritkImageCVF32.insert = new_instancemethod(_itkImagePython.vectoritkImageCVF32_insert, None, vectoritkImageCVF32)
vectoritkImageCVF32.reserve = new_instancemethod(_itkImagePython.vectoritkImageCVF32_reserve, None, vectoritkImageCVF32)
vectoritkImageCVF32.capacity = new_instancemethod(_itkImagePython.vectoritkImageCVF32_capacity, None, vectoritkImageCVF32)
vectoritkImageCVF32_swigregister = _itkImagePython.vectoritkImageCVF32_swigregister
vectoritkImageCVF32_swigregister(vectoritkImageCVF32)

class vectoritkImageCVF42(object):
    """Proxy of C++ std::vector<(itkImageCVF42_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageCVF42 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF42_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageCVF42 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF42___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageCVF42 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF42___bool__(self)


    def __len__(self) -> "std::vector< itkImageCVF42_Pointer >::size_type":
        """__len__(vectoritkImageCVF42 self) -> std::vector< itkImageCVF42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF42___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageCVF42_Pointer >::difference_type', j: 'std::vector< itkImageCVF42_Pointer >::difference_type') -> "std::vector< itkImageCVF42_Pointer,std::allocator< itkImageCVF42_Pointer > > *":
        """__getslice__(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::difference_type i, std::vector< itkImageCVF42_Pointer >::difference_type j) -> vectoritkImageCVF42"""
        return _itkImagePython.vectoritkImageCVF42___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::difference_type i, std::vector< itkImageCVF42_Pointer >::difference_type j)
        __setslice__(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::difference_type i, std::vector< itkImageCVF42_Pointer >::difference_type j, vectoritkImageCVF42 v)
        """
        return _itkImagePython.vectoritkImageCVF42___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageCVF42_Pointer >::difference_type', j: 'std::vector< itkImageCVF42_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::difference_type i, std::vector< itkImageCVF42_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageCVF42___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::difference_type i)
        __delitem__(vectoritkImageCVF42 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageCVF42___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageCVF42_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageCVF42 self, PySliceObject * slice) -> vectoritkImageCVF42
        __getitem__(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::difference_type i) -> std::vector< itkImageCVF42_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageCVF42___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageCVF42 self, PySliceObject * slice, vectoritkImageCVF42 v)
        __setitem__(vectoritkImageCVF42 self, PySliceObject * slice)
        __setitem__(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::difference_type i, std::vector< itkImageCVF42_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF42___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageCVF42_Pointer >::value_type":
        """pop(vectoritkImageCVF42 self) -> std::vector< itkImageCVF42_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF42_pop(self)


    def append(self, x: 'std::vector< itkImageCVF42_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF42_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageCVF42 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF42_empty(self)


    def size(self) -> "std::vector< itkImageCVF42_Pointer >::size_type":
        """size(vectoritkImageCVF42 self) -> std::vector< itkImageCVF42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF42_size(self)


    def swap(self, v: 'vectoritkImageCVF42') -> "void":
        """swap(vectoritkImageCVF42 self, vectoritkImageCVF42 v)"""
        return _itkImagePython.vectoritkImageCVF42_swap(self, v)


    def begin(self) -> "std::vector< itkImageCVF42_Pointer >::iterator":
        """begin(vectoritkImageCVF42 self) -> std::vector< itkImageCVF42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF42_begin(self)


    def end(self) -> "std::vector< itkImageCVF42_Pointer >::iterator":
        """end(vectoritkImageCVF42 self) -> std::vector< itkImageCVF42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF42_end(self)


    def rbegin(self) -> "std::vector< itkImageCVF42_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageCVF42 self) -> std::vector< itkImageCVF42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF42_rbegin(self)


    def rend(self) -> "std::vector< itkImageCVF42_Pointer >::reverse_iterator":
        """rend(vectoritkImageCVF42 self) -> std::vector< itkImageCVF42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF42_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageCVF42 self)"""
        return _itkImagePython.vectoritkImageCVF42_clear(self)


    def get_allocator(self) -> "std::vector< itkImageCVF42_Pointer >::allocator_type":
        """get_allocator(vectoritkImageCVF42 self) -> std::vector< itkImageCVF42_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF42_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageCVF42 self)"""
        return _itkImagePython.vectoritkImageCVF42_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageCVF42_Pointer >::iterator":
        """
        erase(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::iterator pos) -> std::vector< itkImageCVF42_Pointer >::iterator
        erase(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::iterator first, std::vector< itkImageCVF42_Pointer >::iterator last) -> std::vector< itkImageCVF42_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageCVF42_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageCVF42_Pointer)> self) -> vectoritkImageCVF42
        __init__(std::vector<(itkImageCVF42_Pointer)> self, vectoritkImageCVF42 arg2) -> vectoritkImageCVF42
        __init__(std::vector<(itkImageCVF42_Pointer)> self, std::vector< itkImageCVF42_Pointer >::size_type size) -> vectoritkImageCVF42
        __init__(std::vector<(itkImageCVF42_Pointer)> self, std::vector< itkImageCVF42_Pointer >::size_type size, std::vector< itkImageCVF42_Pointer >::value_type const & value) -> vectoritkImageCVF42
        """
        _itkImagePython.vectoritkImageCVF42_swiginit(self, _itkImagePython.new_vectoritkImageCVF42(*args))

    def push_back(self, x: 'std::vector< itkImageCVF42_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF42_push_back(self, x)


    def front(self) -> "std::vector< itkImageCVF42_Pointer >::value_type const &":
        """front(vectoritkImageCVF42 self) -> std::vector< itkImageCVF42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF42_front(self)


    def back(self) -> "std::vector< itkImageCVF42_Pointer >::value_type const &":
        """back(vectoritkImageCVF42 self) -> std::vector< itkImageCVF42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF42_back(self)


    def assign(self, n: 'std::vector< itkImageCVF42_Pointer >::size_type', x: 'std::vector< itkImageCVF42_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::size_type n, std::vector< itkImageCVF42_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF42_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::size_type new_size)
        resize(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::size_type new_size, std::vector< itkImageCVF42_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF42_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::iterator pos, std::vector< itkImageCVF42_Pointer >::value_type const & x) -> std::vector< itkImageCVF42_Pointer >::iterator
        insert(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::iterator pos, std::vector< itkImageCVF42_Pointer >::size_type n, std::vector< itkImageCVF42_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF42_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageCVF42_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageCVF42 self, std::vector< itkImageCVF42_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageCVF42_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageCVF42_Pointer >::size_type":
        """capacity(vectoritkImageCVF42 self) -> std::vector< itkImageCVF42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF42_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF42
vectoritkImageCVF42.iterator = new_instancemethod(_itkImagePython.vectoritkImageCVF42_iterator, None, vectoritkImageCVF42)
vectoritkImageCVF42.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageCVF42___nonzero__, None, vectoritkImageCVF42)
vectoritkImageCVF42.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageCVF42___bool__, None, vectoritkImageCVF42)
vectoritkImageCVF42.__len__ = new_instancemethod(_itkImagePython.vectoritkImageCVF42___len__, None, vectoritkImageCVF42)
vectoritkImageCVF42.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF42___getslice__, None, vectoritkImageCVF42)
vectoritkImageCVF42.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF42___setslice__, None, vectoritkImageCVF42)
vectoritkImageCVF42.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF42___delslice__, None, vectoritkImageCVF42)
vectoritkImageCVF42.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF42___delitem__, None, vectoritkImageCVF42)
vectoritkImageCVF42.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF42___getitem__, None, vectoritkImageCVF42)
vectoritkImageCVF42.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF42___setitem__, None, vectoritkImageCVF42)
vectoritkImageCVF42.pop = new_instancemethod(_itkImagePython.vectoritkImageCVF42_pop, None, vectoritkImageCVF42)
vectoritkImageCVF42.append = new_instancemethod(_itkImagePython.vectoritkImageCVF42_append, None, vectoritkImageCVF42)
vectoritkImageCVF42.empty = new_instancemethod(_itkImagePython.vectoritkImageCVF42_empty, None, vectoritkImageCVF42)
vectoritkImageCVF42.size = new_instancemethod(_itkImagePython.vectoritkImageCVF42_size, None, vectoritkImageCVF42)
vectoritkImageCVF42.swap = new_instancemethod(_itkImagePython.vectoritkImageCVF42_swap, None, vectoritkImageCVF42)
vectoritkImageCVF42.begin = new_instancemethod(_itkImagePython.vectoritkImageCVF42_begin, None, vectoritkImageCVF42)
vectoritkImageCVF42.end = new_instancemethod(_itkImagePython.vectoritkImageCVF42_end, None, vectoritkImageCVF42)
vectoritkImageCVF42.rbegin = new_instancemethod(_itkImagePython.vectoritkImageCVF42_rbegin, None, vectoritkImageCVF42)
vectoritkImageCVF42.rend = new_instancemethod(_itkImagePython.vectoritkImageCVF42_rend, None, vectoritkImageCVF42)
vectoritkImageCVF42.clear = new_instancemethod(_itkImagePython.vectoritkImageCVF42_clear, None, vectoritkImageCVF42)
vectoritkImageCVF42.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageCVF42_get_allocator, None, vectoritkImageCVF42)
vectoritkImageCVF42.pop_back = new_instancemethod(_itkImagePython.vectoritkImageCVF42_pop_back, None, vectoritkImageCVF42)
vectoritkImageCVF42.erase = new_instancemethod(_itkImagePython.vectoritkImageCVF42_erase, None, vectoritkImageCVF42)
vectoritkImageCVF42.push_back = new_instancemethod(_itkImagePython.vectoritkImageCVF42_push_back, None, vectoritkImageCVF42)
vectoritkImageCVF42.front = new_instancemethod(_itkImagePython.vectoritkImageCVF42_front, None, vectoritkImageCVF42)
vectoritkImageCVF42.back = new_instancemethod(_itkImagePython.vectoritkImageCVF42_back, None, vectoritkImageCVF42)
vectoritkImageCVF42.assign = new_instancemethod(_itkImagePython.vectoritkImageCVF42_assign, None, vectoritkImageCVF42)
vectoritkImageCVF42.resize = new_instancemethod(_itkImagePython.vectoritkImageCVF42_resize, None, vectoritkImageCVF42)
vectoritkImageCVF42.insert = new_instancemethod(_itkImagePython.vectoritkImageCVF42_insert, None, vectoritkImageCVF42)
vectoritkImageCVF42.reserve = new_instancemethod(_itkImagePython.vectoritkImageCVF42_reserve, None, vectoritkImageCVF42)
vectoritkImageCVF42.capacity = new_instancemethod(_itkImagePython.vectoritkImageCVF42_capacity, None, vectoritkImageCVF42)
vectoritkImageCVF42_swigregister = _itkImagePython.vectoritkImageCVF42_swigregister
vectoritkImageCVF42_swigregister(vectoritkImageCVF42)

class vectoritkImageSS2(object):
    """Proxy of C++ std::vector<(itkImageSS2_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageSS2 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSS2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageSS2 self) -> bool"""
        return _itkImagePython.vectoritkImageSS2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageSS2 self) -> bool"""
        return _itkImagePython.vectoritkImageSS2___bool__(self)


    def __len__(self) -> "std::vector< itkImageSS2_Pointer >::size_type":
        """__len__(vectoritkImageSS2 self) -> std::vector< itkImageSS2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS2___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageSS2_Pointer >::difference_type', j: 'std::vector< itkImageSS2_Pointer >::difference_type') -> "std::vector< itkImageSS2_Pointer,std::allocator< itkImageSS2_Pointer > > *":
        """__getslice__(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::difference_type i, std::vector< itkImageSS2_Pointer >::difference_type j) -> vectoritkImageSS2"""
        return _itkImagePython.vectoritkImageSS2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::difference_type i, std::vector< itkImageSS2_Pointer >::difference_type j)
        __setslice__(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::difference_type i, std::vector< itkImageSS2_Pointer >::difference_type j, vectoritkImageSS2 v)
        """
        return _itkImagePython.vectoritkImageSS2___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageSS2_Pointer >::difference_type', j: 'std::vector< itkImageSS2_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::difference_type i, std::vector< itkImageSS2_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageSS2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::difference_type i)
        __delitem__(vectoritkImageSS2 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageSS2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageSS2_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageSS2 self, PySliceObject * slice) -> vectoritkImageSS2
        __getitem__(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::difference_type i) -> std::vector< itkImageSS2_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageSS2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageSS2 self, PySliceObject * slice, vectoritkImageSS2 v)
        __setitem__(vectoritkImageSS2 self, PySliceObject * slice)
        __setitem__(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::difference_type i, std::vector< itkImageSS2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageSS2___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageSS2_Pointer >::value_type":
        """pop(vectoritkImageSS2 self) -> std::vector< itkImageSS2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSS2_pop(self)


    def append(self, x: 'std::vector< itkImageSS2_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageSS2_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageSS2 self) -> bool"""
        return _itkImagePython.vectoritkImageSS2_empty(self)


    def size(self) -> "std::vector< itkImageSS2_Pointer >::size_type":
        """size(vectoritkImageSS2 self) -> std::vector< itkImageSS2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS2_size(self)


    def swap(self, v: 'vectoritkImageSS2') -> "void":
        """swap(vectoritkImageSS2 self, vectoritkImageSS2 v)"""
        return _itkImagePython.vectoritkImageSS2_swap(self, v)


    def begin(self) -> "std::vector< itkImageSS2_Pointer >::iterator":
        """begin(vectoritkImageSS2 self) -> std::vector< itkImageSS2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSS2_begin(self)


    def end(self) -> "std::vector< itkImageSS2_Pointer >::iterator":
        """end(vectoritkImageSS2 self) -> std::vector< itkImageSS2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSS2_end(self)


    def rbegin(self) -> "std::vector< itkImageSS2_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageSS2 self) -> std::vector< itkImageSS2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSS2_rbegin(self)


    def rend(self) -> "std::vector< itkImageSS2_Pointer >::reverse_iterator":
        """rend(vectoritkImageSS2 self) -> std::vector< itkImageSS2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSS2_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageSS2 self)"""
        return _itkImagePython.vectoritkImageSS2_clear(self)


    def get_allocator(self) -> "std::vector< itkImageSS2_Pointer >::allocator_type":
        """get_allocator(vectoritkImageSS2 self) -> std::vector< itkImageSS2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSS2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageSS2 self)"""
        return _itkImagePython.vectoritkImageSS2_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageSS2_Pointer >::iterator":
        """
        erase(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::iterator pos) -> std::vector< itkImageSS2_Pointer >::iterator
        erase(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::iterator first, std::vector< itkImageSS2_Pointer >::iterator last) -> std::vector< itkImageSS2_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageSS2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageSS2_Pointer)> self) -> vectoritkImageSS2
        __init__(std::vector<(itkImageSS2_Pointer)> self, vectoritkImageSS2 arg2) -> vectoritkImageSS2
        __init__(std::vector<(itkImageSS2_Pointer)> self, std::vector< itkImageSS2_Pointer >::size_type size) -> vectoritkImageSS2
        __init__(std::vector<(itkImageSS2_Pointer)> self, std::vector< itkImageSS2_Pointer >::size_type size, std::vector< itkImageSS2_Pointer >::value_type const & value) -> vectoritkImageSS2
        """
        _itkImagePython.vectoritkImageSS2_swiginit(self, _itkImagePython.new_vectoritkImageSS2(*args))

    def push_back(self, x: 'std::vector< itkImageSS2_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageSS2_push_back(self, x)


    def front(self) -> "std::vector< itkImageSS2_Pointer >::value_type const &":
        """front(vectoritkImageSS2 self) -> std::vector< itkImageSS2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSS2_front(self)


    def back(self) -> "std::vector< itkImageSS2_Pointer >::value_type const &":
        """back(vectoritkImageSS2 self) -> std::vector< itkImageSS2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSS2_back(self)


    def assign(self, n: 'std::vector< itkImageSS2_Pointer >::size_type', x: 'std::vector< itkImageSS2_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::size_type n, std::vector< itkImageSS2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageSS2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::size_type new_size)
        resize(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::size_type new_size, std::vector< itkImageSS2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageSS2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::iterator pos, std::vector< itkImageSS2_Pointer >::value_type const & x) -> std::vector< itkImageSS2_Pointer >::iterator
        insert(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::iterator pos, std::vector< itkImageSS2_Pointer >::size_type n, std::vector< itkImageSS2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageSS2_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageSS2_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageSS2 self, std::vector< itkImageSS2_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageSS2_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageSS2_Pointer >::size_type":
        """capacity(vectoritkImageSS2 self) -> std::vector< itkImageSS2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS2_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSS2
vectoritkImageSS2.iterator = new_instancemethod(_itkImagePython.vectoritkImageSS2_iterator, None, vectoritkImageSS2)
vectoritkImageSS2.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageSS2___nonzero__, None, vectoritkImageSS2)
vectoritkImageSS2.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageSS2___bool__, None, vectoritkImageSS2)
vectoritkImageSS2.__len__ = new_instancemethod(_itkImagePython.vectoritkImageSS2___len__, None, vectoritkImageSS2)
vectoritkImageSS2.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageSS2___getslice__, None, vectoritkImageSS2)
vectoritkImageSS2.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageSS2___setslice__, None, vectoritkImageSS2)
vectoritkImageSS2.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageSS2___delslice__, None, vectoritkImageSS2)
vectoritkImageSS2.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageSS2___delitem__, None, vectoritkImageSS2)
vectoritkImageSS2.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageSS2___getitem__, None, vectoritkImageSS2)
vectoritkImageSS2.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageSS2___setitem__, None, vectoritkImageSS2)
vectoritkImageSS2.pop = new_instancemethod(_itkImagePython.vectoritkImageSS2_pop, None, vectoritkImageSS2)
vectoritkImageSS2.append = new_instancemethod(_itkImagePython.vectoritkImageSS2_append, None, vectoritkImageSS2)
vectoritkImageSS2.empty = new_instancemethod(_itkImagePython.vectoritkImageSS2_empty, None, vectoritkImageSS2)
vectoritkImageSS2.size = new_instancemethod(_itkImagePython.vectoritkImageSS2_size, None, vectoritkImageSS2)
vectoritkImageSS2.swap = new_instancemethod(_itkImagePython.vectoritkImageSS2_swap, None, vectoritkImageSS2)
vectoritkImageSS2.begin = new_instancemethod(_itkImagePython.vectoritkImageSS2_begin, None, vectoritkImageSS2)
vectoritkImageSS2.end = new_instancemethod(_itkImagePython.vectoritkImageSS2_end, None, vectoritkImageSS2)
vectoritkImageSS2.rbegin = new_instancemethod(_itkImagePython.vectoritkImageSS2_rbegin, None, vectoritkImageSS2)
vectoritkImageSS2.rend = new_instancemethod(_itkImagePython.vectoritkImageSS2_rend, None, vectoritkImageSS2)
vectoritkImageSS2.clear = new_instancemethod(_itkImagePython.vectoritkImageSS2_clear, None, vectoritkImageSS2)
vectoritkImageSS2.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageSS2_get_allocator, None, vectoritkImageSS2)
vectoritkImageSS2.pop_back = new_instancemethod(_itkImagePython.vectoritkImageSS2_pop_back, None, vectoritkImageSS2)
vectoritkImageSS2.erase = new_instancemethod(_itkImagePython.vectoritkImageSS2_erase, None, vectoritkImageSS2)
vectoritkImageSS2.push_back = new_instancemethod(_itkImagePython.vectoritkImageSS2_push_back, None, vectoritkImageSS2)
vectoritkImageSS2.front = new_instancemethod(_itkImagePython.vectoritkImageSS2_front, None, vectoritkImageSS2)
vectoritkImageSS2.back = new_instancemethod(_itkImagePython.vectoritkImageSS2_back, None, vectoritkImageSS2)
vectoritkImageSS2.assign = new_instancemethod(_itkImagePython.vectoritkImageSS2_assign, None, vectoritkImageSS2)
vectoritkImageSS2.resize = new_instancemethod(_itkImagePython.vectoritkImageSS2_resize, None, vectoritkImageSS2)
vectoritkImageSS2.insert = new_instancemethod(_itkImagePython.vectoritkImageSS2_insert, None, vectoritkImageSS2)
vectoritkImageSS2.reserve = new_instancemethod(_itkImagePython.vectoritkImageSS2_reserve, None, vectoritkImageSS2)
vectoritkImageSS2.capacity = new_instancemethod(_itkImagePython.vectoritkImageSS2_capacity, None, vectoritkImageSS2)
vectoritkImageSS2_swigregister = _itkImagePython.vectoritkImageSS2_swigregister
vectoritkImageSS2_swigregister(vectoritkImageSS2)

class vectoritkImageUC2(object):
    """Proxy of C++ std::vector<(itkImageUC2_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageUC2 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUC2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageUC2 self) -> bool"""
        return _itkImagePython.vectoritkImageUC2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageUC2 self) -> bool"""
        return _itkImagePython.vectoritkImageUC2___bool__(self)


    def __len__(self) -> "std::vector< itkImageUC2_Pointer >::size_type":
        """__len__(vectoritkImageUC2 self) -> std::vector< itkImageUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC2___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageUC2_Pointer >::difference_type', j: 'std::vector< itkImageUC2_Pointer >::difference_type') -> "std::vector< itkImageUC2_Pointer,std::allocator< itkImageUC2_Pointer > > *":
        """__getslice__(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::difference_type i, std::vector< itkImageUC2_Pointer >::difference_type j) -> vectoritkImageUC2"""
        return _itkImagePython.vectoritkImageUC2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::difference_type i, std::vector< itkImageUC2_Pointer >::difference_type j)
        __setslice__(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::difference_type i, std::vector< itkImageUC2_Pointer >::difference_type j, vectoritkImageUC2 v)
        """
        return _itkImagePython.vectoritkImageUC2___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageUC2_Pointer >::difference_type', j: 'std::vector< itkImageUC2_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::difference_type i, std::vector< itkImageUC2_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageUC2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::difference_type i)
        __delitem__(vectoritkImageUC2 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageUC2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageUC2_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageUC2 self, PySliceObject * slice) -> vectoritkImageUC2
        __getitem__(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::difference_type i) -> std::vector< itkImageUC2_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageUC2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageUC2 self, PySliceObject * slice, vectoritkImageUC2 v)
        __setitem__(vectoritkImageUC2 self, PySliceObject * slice)
        __setitem__(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::difference_type i, std::vector< itkImageUC2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUC2___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageUC2_Pointer >::value_type":
        """pop(vectoritkImageUC2 self) -> std::vector< itkImageUC2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUC2_pop(self)


    def append(self, x: 'std::vector< itkImageUC2_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUC2_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageUC2 self) -> bool"""
        return _itkImagePython.vectoritkImageUC2_empty(self)


    def size(self) -> "std::vector< itkImageUC2_Pointer >::size_type":
        """size(vectoritkImageUC2 self) -> std::vector< itkImageUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC2_size(self)


    def swap(self, v: 'vectoritkImageUC2') -> "void":
        """swap(vectoritkImageUC2 self, vectoritkImageUC2 v)"""
        return _itkImagePython.vectoritkImageUC2_swap(self, v)


    def begin(self) -> "std::vector< itkImageUC2_Pointer >::iterator":
        """begin(vectoritkImageUC2 self) -> std::vector< itkImageUC2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUC2_begin(self)


    def end(self) -> "std::vector< itkImageUC2_Pointer >::iterator":
        """end(vectoritkImageUC2 self) -> std::vector< itkImageUC2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUC2_end(self)


    def rbegin(self) -> "std::vector< itkImageUC2_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageUC2 self) -> std::vector< itkImageUC2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUC2_rbegin(self)


    def rend(self) -> "std::vector< itkImageUC2_Pointer >::reverse_iterator":
        """rend(vectoritkImageUC2 self) -> std::vector< itkImageUC2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUC2_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageUC2 self)"""
        return _itkImagePython.vectoritkImageUC2_clear(self)


    def get_allocator(self) -> "std::vector< itkImageUC2_Pointer >::allocator_type":
        """get_allocator(vectoritkImageUC2 self) -> std::vector< itkImageUC2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUC2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageUC2 self)"""
        return _itkImagePython.vectoritkImageUC2_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageUC2_Pointer >::iterator":
        """
        erase(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::iterator pos) -> std::vector< itkImageUC2_Pointer >::iterator
        erase(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::iterator first, std::vector< itkImageUC2_Pointer >::iterator last) -> std::vector< itkImageUC2_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageUC2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageUC2_Pointer)> self) -> vectoritkImageUC2
        __init__(std::vector<(itkImageUC2_Pointer)> self, vectoritkImageUC2 arg2) -> vectoritkImageUC2
        __init__(std::vector<(itkImageUC2_Pointer)> self, std::vector< itkImageUC2_Pointer >::size_type size) -> vectoritkImageUC2
        __init__(std::vector<(itkImageUC2_Pointer)> self, std::vector< itkImageUC2_Pointer >::size_type size, std::vector< itkImageUC2_Pointer >::value_type const & value) -> vectoritkImageUC2
        """
        _itkImagePython.vectoritkImageUC2_swiginit(self, _itkImagePython.new_vectoritkImageUC2(*args))

    def push_back(self, x: 'std::vector< itkImageUC2_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUC2_push_back(self, x)


    def front(self) -> "std::vector< itkImageUC2_Pointer >::value_type const &":
        """front(vectoritkImageUC2 self) -> std::vector< itkImageUC2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUC2_front(self)


    def back(self) -> "std::vector< itkImageUC2_Pointer >::value_type const &":
        """back(vectoritkImageUC2 self) -> std::vector< itkImageUC2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUC2_back(self)


    def assign(self, n: 'std::vector< itkImageUC2_Pointer >::size_type', x: 'std::vector< itkImageUC2_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::size_type n, std::vector< itkImageUC2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUC2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::size_type new_size)
        resize(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::size_type new_size, std::vector< itkImageUC2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUC2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::iterator pos, std::vector< itkImageUC2_Pointer >::value_type const & x) -> std::vector< itkImageUC2_Pointer >::iterator
        insert(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::iterator pos, std::vector< itkImageUC2_Pointer >::size_type n, std::vector< itkImageUC2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUC2_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageUC2_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageUC2 self, std::vector< itkImageUC2_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageUC2_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageUC2_Pointer >::size_type":
        """capacity(vectoritkImageUC2 self) -> std::vector< itkImageUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC2_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUC2
vectoritkImageUC2.iterator = new_instancemethod(_itkImagePython.vectoritkImageUC2_iterator, None, vectoritkImageUC2)
vectoritkImageUC2.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageUC2___nonzero__, None, vectoritkImageUC2)
vectoritkImageUC2.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageUC2___bool__, None, vectoritkImageUC2)
vectoritkImageUC2.__len__ = new_instancemethod(_itkImagePython.vectoritkImageUC2___len__, None, vectoritkImageUC2)
vectoritkImageUC2.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageUC2___getslice__, None, vectoritkImageUC2)
vectoritkImageUC2.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageUC2___setslice__, None, vectoritkImageUC2)
vectoritkImageUC2.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageUC2___delslice__, None, vectoritkImageUC2)
vectoritkImageUC2.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageUC2___delitem__, None, vectoritkImageUC2)
vectoritkImageUC2.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageUC2___getitem__, None, vectoritkImageUC2)
vectoritkImageUC2.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageUC2___setitem__, None, vectoritkImageUC2)
vectoritkImageUC2.pop = new_instancemethod(_itkImagePython.vectoritkImageUC2_pop, None, vectoritkImageUC2)
vectoritkImageUC2.append = new_instancemethod(_itkImagePython.vectoritkImageUC2_append, None, vectoritkImageUC2)
vectoritkImageUC2.empty = new_instancemethod(_itkImagePython.vectoritkImageUC2_empty, None, vectoritkImageUC2)
vectoritkImageUC2.size = new_instancemethod(_itkImagePython.vectoritkImageUC2_size, None, vectoritkImageUC2)
vectoritkImageUC2.swap = new_instancemethod(_itkImagePython.vectoritkImageUC2_swap, None, vectoritkImageUC2)
vectoritkImageUC2.begin = new_instancemethod(_itkImagePython.vectoritkImageUC2_begin, None, vectoritkImageUC2)
vectoritkImageUC2.end = new_instancemethod(_itkImagePython.vectoritkImageUC2_end, None, vectoritkImageUC2)
vectoritkImageUC2.rbegin = new_instancemethod(_itkImagePython.vectoritkImageUC2_rbegin, None, vectoritkImageUC2)
vectoritkImageUC2.rend = new_instancemethod(_itkImagePython.vectoritkImageUC2_rend, None, vectoritkImageUC2)
vectoritkImageUC2.clear = new_instancemethod(_itkImagePython.vectoritkImageUC2_clear, None, vectoritkImageUC2)
vectoritkImageUC2.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageUC2_get_allocator, None, vectoritkImageUC2)
vectoritkImageUC2.pop_back = new_instancemethod(_itkImagePython.vectoritkImageUC2_pop_back, None, vectoritkImageUC2)
vectoritkImageUC2.erase = new_instancemethod(_itkImagePython.vectoritkImageUC2_erase, None, vectoritkImageUC2)
vectoritkImageUC2.push_back = new_instancemethod(_itkImagePython.vectoritkImageUC2_push_back, None, vectoritkImageUC2)
vectoritkImageUC2.front = new_instancemethod(_itkImagePython.vectoritkImageUC2_front, None, vectoritkImageUC2)
vectoritkImageUC2.back = new_instancemethod(_itkImagePython.vectoritkImageUC2_back, None, vectoritkImageUC2)
vectoritkImageUC2.assign = new_instancemethod(_itkImagePython.vectoritkImageUC2_assign, None, vectoritkImageUC2)
vectoritkImageUC2.resize = new_instancemethod(_itkImagePython.vectoritkImageUC2_resize, None, vectoritkImageUC2)
vectoritkImageUC2.insert = new_instancemethod(_itkImagePython.vectoritkImageUC2_insert, None, vectoritkImageUC2)
vectoritkImageUC2.reserve = new_instancemethod(_itkImagePython.vectoritkImageUC2_reserve, None, vectoritkImageUC2)
vectoritkImageUC2.capacity = new_instancemethod(_itkImagePython.vectoritkImageUC2_capacity, None, vectoritkImageUC2)
vectoritkImageUC2_swigregister = _itkImagePython.vectoritkImageUC2_swigregister
vectoritkImageUC2_swigregister(vectoritkImageUC2)

class vectoritkImageUS2(object):
    """Proxy of C++ std::vector<(itkImageUS2_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageUS2 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUS2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageUS2 self) -> bool"""
        return _itkImagePython.vectoritkImageUS2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageUS2 self) -> bool"""
        return _itkImagePython.vectoritkImageUS2___bool__(self)


    def __len__(self) -> "std::vector< itkImageUS2_Pointer >::size_type":
        """__len__(vectoritkImageUS2 self) -> std::vector< itkImageUS2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS2___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageUS2_Pointer >::difference_type', j: 'std::vector< itkImageUS2_Pointer >::difference_type') -> "std::vector< itkImageUS2_Pointer,std::allocator< itkImageUS2_Pointer > > *":
        """__getslice__(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::difference_type i, std::vector< itkImageUS2_Pointer >::difference_type j) -> vectoritkImageUS2"""
        return _itkImagePython.vectoritkImageUS2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::difference_type i, std::vector< itkImageUS2_Pointer >::difference_type j)
        __setslice__(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::difference_type i, std::vector< itkImageUS2_Pointer >::difference_type j, vectoritkImageUS2 v)
        """
        return _itkImagePython.vectoritkImageUS2___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageUS2_Pointer >::difference_type', j: 'std::vector< itkImageUS2_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::difference_type i, std::vector< itkImageUS2_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageUS2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::difference_type i)
        __delitem__(vectoritkImageUS2 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageUS2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageUS2_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageUS2 self, PySliceObject * slice) -> vectoritkImageUS2
        __getitem__(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::difference_type i) -> std::vector< itkImageUS2_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageUS2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageUS2 self, PySliceObject * slice, vectoritkImageUS2 v)
        __setitem__(vectoritkImageUS2 self, PySliceObject * slice)
        __setitem__(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::difference_type i, std::vector< itkImageUS2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUS2___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageUS2_Pointer >::value_type":
        """pop(vectoritkImageUS2 self) -> std::vector< itkImageUS2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUS2_pop(self)


    def append(self, x: 'std::vector< itkImageUS2_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUS2_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageUS2 self) -> bool"""
        return _itkImagePython.vectoritkImageUS2_empty(self)


    def size(self) -> "std::vector< itkImageUS2_Pointer >::size_type":
        """size(vectoritkImageUS2 self) -> std::vector< itkImageUS2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS2_size(self)


    def swap(self, v: 'vectoritkImageUS2') -> "void":
        """swap(vectoritkImageUS2 self, vectoritkImageUS2 v)"""
        return _itkImagePython.vectoritkImageUS2_swap(self, v)


    def begin(self) -> "std::vector< itkImageUS2_Pointer >::iterator":
        """begin(vectoritkImageUS2 self) -> std::vector< itkImageUS2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUS2_begin(self)


    def end(self) -> "std::vector< itkImageUS2_Pointer >::iterator":
        """end(vectoritkImageUS2 self) -> std::vector< itkImageUS2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUS2_end(self)


    def rbegin(self) -> "std::vector< itkImageUS2_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageUS2 self) -> std::vector< itkImageUS2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUS2_rbegin(self)


    def rend(self) -> "std::vector< itkImageUS2_Pointer >::reverse_iterator":
        """rend(vectoritkImageUS2 self) -> std::vector< itkImageUS2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUS2_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageUS2 self)"""
        return _itkImagePython.vectoritkImageUS2_clear(self)


    def get_allocator(self) -> "std::vector< itkImageUS2_Pointer >::allocator_type":
        """get_allocator(vectoritkImageUS2 self) -> std::vector< itkImageUS2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUS2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageUS2 self)"""
        return _itkImagePython.vectoritkImageUS2_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageUS2_Pointer >::iterator":
        """
        erase(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::iterator pos) -> std::vector< itkImageUS2_Pointer >::iterator
        erase(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::iterator first, std::vector< itkImageUS2_Pointer >::iterator last) -> std::vector< itkImageUS2_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageUS2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageUS2_Pointer)> self) -> vectoritkImageUS2
        __init__(std::vector<(itkImageUS2_Pointer)> self, vectoritkImageUS2 arg2) -> vectoritkImageUS2
        __init__(std::vector<(itkImageUS2_Pointer)> self, std::vector< itkImageUS2_Pointer >::size_type size) -> vectoritkImageUS2
        __init__(std::vector<(itkImageUS2_Pointer)> self, std::vector< itkImageUS2_Pointer >::size_type size, std::vector< itkImageUS2_Pointer >::value_type const & value) -> vectoritkImageUS2
        """
        _itkImagePython.vectoritkImageUS2_swiginit(self, _itkImagePython.new_vectoritkImageUS2(*args))

    def push_back(self, x: 'std::vector< itkImageUS2_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUS2_push_back(self, x)


    def front(self) -> "std::vector< itkImageUS2_Pointer >::value_type const &":
        """front(vectoritkImageUS2 self) -> std::vector< itkImageUS2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUS2_front(self)


    def back(self) -> "std::vector< itkImageUS2_Pointer >::value_type const &":
        """back(vectoritkImageUS2 self) -> std::vector< itkImageUS2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUS2_back(self)


    def assign(self, n: 'std::vector< itkImageUS2_Pointer >::size_type', x: 'std::vector< itkImageUS2_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::size_type n, std::vector< itkImageUS2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUS2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::size_type new_size)
        resize(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::size_type new_size, std::vector< itkImageUS2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUS2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::iterator pos, std::vector< itkImageUS2_Pointer >::value_type const & x) -> std::vector< itkImageUS2_Pointer >::iterator
        insert(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::iterator pos, std::vector< itkImageUS2_Pointer >::size_type n, std::vector< itkImageUS2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUS2_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageUS2_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageUS2 self, std::vector< itkImageUS2_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageUS2_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageUS2_Pointer >::size_type":
        """capacity(vectoritkImageUS2 self) -> std::vector< itkImageUS2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS2_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUS2
vectoritkImageUS2.iterator = new_instancemethod(_itkImagePython.vectoritkImageUS2_iterator, None, vectoritkImageUS2)
vectoritkImageUS2.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageUS2___nonzero__, None, vectoritkImageUS2)
vectoritkImageUS2.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageUS2___bool__, None, vectoritkImageUS2)
vectoritkImageUS2.__len__ = new_instancemethod(_itkImagePython.vectoritkImageUS2___len__, None, vectoritkImageUS2)
vectoritkImageUS2.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageUS2___getslice__, None, vectoritkImageUS2)
vectoritkImageUS2.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageUS2___setslice__, None, vectoritkImageUS2)
vectoritkImageUS2.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageUS2___delslice__, None, vectoritkImageUS2)
vectoritkImageUS2.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageUS2___delitem__, None, vectoritkImageUS2)
vectoritkImageUS2.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageUS2___getitem__, None, vectoritkImageUS2)
vectoritkImageUS2.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageUS2___setitem__, None, vectoritkImageUS2)
vectoritkImageUS2.pop = new_instancemethod(_itkImagePython.vectoritkImageUS2_pop, None, vectoritkImageUS2)
vectoritkImageUS2.append = new_instancemethod(_itkImagePython.vectoritkImageUS2_append, None, vectoritkImageUS2)
vectoritkImageUS2.empty = new_instancemethod(_itkImagePython.vectoritkImageUS2_empty, None, vectoritkImageUS2)
vectoritkImageUS2.size = new_instancemethod(_itkImagePython.vectoritkImageUS2_size, None, vectoritkImageUS2)
vectoritkImageUS2.swap = new_instancemethod(_itkImagePython.vectoritkImageUS2_swap, None, vectoritkImageUS2)
vectoritkImageUS2.begin = new_instancemethod(_itkImagePython.vectoritkImageUS2_begin, None, vectoritkImageUS2)
vectoritkImageUS2.end = new_instancemethod(_itkImagePython.vectoritkImageUS2_end, None, vectoritkImageUS2)
vectoritkImageUS2.rbegin = new_instancemethod(_itkImagePython.vectoritkImageUS2_rbegin, None, vectoritkImageUS2)
vectoritkImageUS2.rend = new_instancemethod(_itkImagePython.vectoritkImageUS2_rend, None, vectoritkImageUS2)
vectoritkImageUS2.clear = new_instancemethod(_itkImagePython.vectoritkImageUS2_clear, None, vectoritkImageUS2)
vectoritkImageUS2.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageUS2_get_allocator, None, vectoritkImageUS2)
vectoritkImageUS2.pop_back = new_instancemethod(_itkImagePython.vectoritkImageUS2_pop_back, None, vectoritkImageUS2)
vectoritkImageUS2.erase = new_instancemethod(_itkImagePython.vectoritkImageUS2_erase, None, vectoritkImageUS2)
vectoritkImageUS2.push_back = new_instancemethod(_itkImagePython.vectoritkImageUS2_push_back, None, vectoritkImageUS2)
vectoritkImageUS2.front = new_instancemethod(_itkImagePython.vectoritkImageUS2_front, None, vectoritkImageUS2)
vectoritkImageUS2.back = new_instancemethod(_itkImagePython.vectoritkImageUS2_back, None, vectoritkImageUS2)
vectoritkImageUS2.assign = new_instancemethod(_itkImagePython.vectoritkImageUS2_assign, None, vectoritkImageUS2)
vectoritkImageUS2.resize = new_instancemethod(_itkImagePython.vectoritkImageUS2_resize, None, vectoritkImageUS2)
vectoritkImageUS2.insert = new_instancemethod(_itkImagePython.vectoritkImageUS2_insert, None, vectoritkImageUS2)
vectoritkImageUS2.reserve = new_instancemethod(_itkImagePython.vectoritkImageUS2_reserve, None, vectoritkImageUS2)
vectoritkImageUS2.capacity = new_instancemethod(_itkImagePython.vectoritkImageUS2_capacity, None, vectoritkImageUS2)
vectoritkImageUS2_swigregister = _itkImagePython.vectoritkImageUS2_swigregister
vectoritkImageUS2_swigregister(vectoritkImageUS2)

class vectoritkImageF2(object):
    """Proxy of C++ std::vector<(itkImageF2_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageF2 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageF2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageF2 self) -> bool"""
        return _itkImagePython.vectoritkImageF2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageF2 self) -> bool"""
        return _itkImagePython.vectoritkImageF2___bool__(self)


    def __len__(self) -> "std::vector< itkImageF2_Pointer >::size_type":
        """__len__(vectoritkImageF2 self) -> std::vector< itkImageF2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF2___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageF2_Pointer >::difference_type', j: 'std::vector< itkImageF2_Pointer >::difference_type') -> "std::vector< itkImageF2_Pointer,std::allocator< itkImageF2_Pointer > > *":
        """__getslice__(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::difference_type i, std::vector< itkImageF2_Pointer >::difference_type j) -> vectoritkImageF2"""
        return _itkImagePython.vectoritkImageF2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::difference_type i, std::vector< itkImageF2_Pointer >::difference_type j)
        __setslice__(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::difference_type i, std::vector< itkImageF2_Pointer >::difference_type j, vectoritkImageF2 v)
        """
        return _itkImagePython.vectoritkImageF2___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageF2_Pointer >::difference_type', j: 'std::vector< itkImageF2_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::difference_type i, std::vector< itkImageF2_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageF2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::difference_type i)
        __delitem__(vectoritkImageF2 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageF2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageF2_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageF2 self, PySliceObject * slice) -> vectoritkImageF2
        __getitem__(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::difference_type i) -> std::vector< itkImageF2_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageF2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageF2 self, PySliceObject * slice, vectoritkImageF2 v)
        __setitem__(vectoritkImageF2 self, PySliceObject * slice)
        __setitem__(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::difference_type i, std::vector< itkImageF2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageF2___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageF2_Pointer >::value_type":
        """pop(vectoritkImageF2 self) -> std::vector< itkImageF2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageF2_pop(self)


    def append(self, x: 'std::vector< itkImageF2_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageF2_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageF2 self) -> bool"""
        return _itkImagePython.vectoritkImageF2_empty(self)


    def size(self) -> "std::vector< itkImageF2_Pointer >::size_type":
        """size(vectoritkImageF2 self) -> std::vector< itkImageF2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF2_size(self)


    def swap(self, v: 'vectoritkImageF2') -> "void":
        """swap(vectoritkImageF2 self, vectoritkImageF2 v)"""
        return _itkImagePython.vectoritkImageF2_swap(self, v)


    def begin(self) -> "std::vector< itkImageF2_Pointer >::iterator":
        """begin(vectoritkImageF2 self) -> std::vector< itkImageF2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageF2_begin(self)


    def end(self) -> "std::vector< itkImageF2_Pointer >::iterator":
        """end(vectoritkImageF2 self) -> std::vector< itkImageF2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageF2_end(self)


    def rbegin(self) -> "std::vector< itkImageF2_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageF2 self) -> std::vector< itkImageF2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageF2_rbegin(self)


    def rend(self) -> "std::vector< itkImageF2_Pointer >::reverse_iterator":
        """rend(vectoritkImageF2 self) -> std::vector< itkImageF2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageF2_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageF2 self)"""
        return _itkImagePython.vectoritkImageF2_clear(self)


    def get_allocator(self) -> "std::vector< itkImageF2_Pointer >::allocator_type":
        """get_allocator(vectoritkImageF2 self) -> std::vector< itkImageF2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageF2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageF2 self)"""
        return _itkImagePython.vectoritkImageF2_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageF2_Pointer >::iterator":
        """
        erase(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::iterator pos) -> std::vector< itkImageF2_Pointer >::iterator
        erase(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::iterator first, std::vector< itkImageF2_Pointer >::iterator last) -> std::vector< itkImageF2_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageF2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageF2_Pointer)> self) -> vectoritkImageF2
        __init__(std::vector<(itkImageF2_Pointer)> self, vectoritkImageF2 arg2) -> vectoritkImageF2
        __init__(std::vector<(itkImageF2_Pointer)> self, std::vector< itkImageF2_Pointer >::size_type size) -> vectoritkImageF2
        __init__(std::vector<(itkImageF2_Pointer)> self, std::vector< itkImageF2_Pointer >::size_type size, std::vector< itkImageF2_Pointer >::value_type const & value) -> vectoritkImageF2
        """
        _itkImagePython.vectoritkImageF2_swiginit(self, _itkImagePython.new_vectoritkImageF2(*args))

    def push_back(self, x: 'std::vector< itkImageF2_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageF2_push_back(self, x)


    def front(self) -> "std::vector< itkImageF2_Pointer >::value_type const &":
        """front(vectoritkImageF2 self) -> std::vector< itkImageF2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageF2_front(self)


    def back(self) -> "std::vector< itkImageF2_Pointer >::value_type const &":
        """back(vectoritkImageF2 self) -> std::vector< itkImageF2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageF2_back(self)


    def assign(self, n: 'std::vector< itkImageF2_Pointer >::size_type', x: 'std::vector< itkImageF2_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::size_type n, std::vector< itkImageF2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageF2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::size_type new_size)
        resize(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::size_type new_size, std::vector< itkImageF2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageF2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::iterator pos, std::vector< itkImageF2_Pointer >::value_type const & x) -> std::vector< itkImageF2_Pointer >::iterator
        insert(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::iterator pos, std::vector< itkImageF2_Pointer >::size_type n, std::vector< itkImageF2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageF2_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageF2_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageF2 self, std::vector< itkImageF2_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageF2_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageF2_Pointer >::size_type":
        """capacity(vectoritkImageF2 self) -> std::vector< itkImageF2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF2_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageF2
vectoritkImageF2.iterator = new_instancemethod(_itkImagePython.vectoritkImageF2_iterator, None, vectoritkImageF2)
vectoritkImageF2.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageF2___nonzero__, None, vectoritkImageF2)
vectoritkImageF2.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageF2___bool__, None, vectoritkImageF2)
vectoritkImageF2.__len__ = new_instancemethod(_itkImagePython.vectoritkImageF2___len__, None, vectoritkImageF2)
vectoritkImageF2.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageF2___getslice__, None, vectoritkImageF2)
vectoritkImageF2.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageF2___setslice__, None, vectoritkImageF2)
vectoritkImageF2.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageF2___delslice__, None, vectoritkImageF2)
vectoritkImageF2.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageF2___delitem__, None, vectoritkImageF2)
vectoritkImageF2.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageF2___getitem__, None, vectoritkImageF2)
vectoritkImageF2.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageF2___setitem__, None, vectoritkImageF2)
vectoritkImageF2.pop = new_instancemethod(_itkImagePython.vectoritkImageF2_pop, None, vectoritkImageF2)
vectoritkImageF2.append = new_instancemethod(_itkImagePython.vectoritkImageF2_append, None, vectoritkImageF2)
vectoritkImageF2.empty = new_instancemethod(_itkImagePython.vectoritkImageF2_empty, None, vectoritkImageF2)
vectoritkImageF2.size = new_instancemethod(_itkImagePython.vectoritkImageF2_size, None, vectoritkImageF2)
vectoritkImageF2.swap = new_instancemethod(_itkImagePython.vectoritkImageF2_swap, None, vectoritkImageF2)
vectoritkImageF2.begin = new_instancemethod(_itkImagePython.vectoritkImageF2_begin, None, vectoritkImageF2)
vectoritkImageF2.end = new_instancemethod(_itkImagePython.vectoritkImageF2_end, None, vectoritkImageF2)
vectoritkImageF2.rbegin = new_instancemethod(_itkImagePython.vectoritkImageF2_rbegin, None, vectoritkImageF2)
vectoritkImageF2.rend = new_instancemethod(_itkImagePython.vectoritkImageF2_rend, None, vectoritkImageF2)
vectoritkImageF2.clear = new_instancemethod(_itkImagePython.vectoritkImageF2_clear, None, vectoritkImageF2)
vectoritkImageF2.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageF2_get_allocator, None, vectoritkImageF2)
vectoritkImageF2.pop_back = new_instancemethod(_itkImagePython.vectoritkImageF2_pop_back, None, vectoritkImageF2)
vectoritkImageF2.erase = new_instancemethod(_itkImagePython.vectoritkImageF2_erase, None, vectoritkImageF2)
vectoritkImageF2.push_back = new_instancemethod(_itkImagePython.vectoritkImageF2_push_back, None, vectoritkImageF2)
vectoritkImageF2.front = new_instancemethod(_itkImagePython.vectoritkImageF2_front, None, vectoritkImageF2)
vectoritkImageF2.back = new_instancemethod(_itkImagePython.vectoritkImageF2_back, None, vectoritkImageF2)
vectoritkImageF2.assign = new_instancemethod(_itkImagePython.vectoritkImageF2_assign, None, vectoritkImageF2)
vectoritkImageF2.resize = new_instancemethod(_itkImagePython.vectoritkImageF2_resize, None, vectoritkImageF2)
vectoritkImageF2.insert = new_instancemethod(_itkImagePython.vectoritkImageF2_insert, None, vectoritkImageF2)
vectoritkImageF2.reserve = new_instancemethod(_itkImagePython.vectoritkImageF2_reserve, None, vectoritkImageF2)
vectoritkImageF2.capacity = new_instancemethod(_itkImagePython.vectoritkImageF2_capacity, None, vectoritkImageF2)
vectoritkImageF2_swigregister = _itkImagePython.vectoritkImageF2_swigregister
vectoritkImageF2_swigregister(vectoritkImageF2)

class vectoritkImageCF2(object):
    """Proxy of C++ std::vector<(itkImageCF2_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageCF2 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCF2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageCF2 self) -> bool"""
        return _itkImagePython.vectoritkImageCF2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageCF2 self) -> bool"""
        return _itkImagePython.vectoritkImageCF2___bool__(self)


    def __len__(self) -> "std::vector< itkImageCF2_Pointer >::size_type":
        """__len__(vectoritkImageCF2 self) -> std::vector< itkImageCF2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF2___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageCF2_Pointer >::difference_type', j: 'std::vector< itkImageCF2_Pointer >::difference_type') -> "std::vector< itkImageCF2_Pointer,std::allocator< itkImageCF2_Pointer > > *":
        """__getslice__(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::difference_type i, std::vector< itkImageCF2_Pointer >::difference_type j) -> vectoritkImageCF2"""
        return _itkImagePython.vectoritkImageCF2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::difference_type i, std::vector< itkImageCF2_Pointer >::difference_type j)
        __setslice__(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::difference_type i, std::vector< itkImageCF2_Pointer >::difference_type j, vectoritkImageCF2 v)
        """
        return _itkImagePython.vectoritkImageCF2___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageCF2_Pointer >::difference_type', j: 'std::vector< itkImageCF2_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::difference_type i, std::vector< itkImageCF2_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageCF2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::difference_type i)
        __delitem__(vectoritkImageCF2 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageCF2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageCF2_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageCF2 self, PySliceObject * slice) -> vectoritkImageCF2
        __getitem__(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::difference_type i) -> std::vector< itkImageCF2_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageCF2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageCF2 self, PySliceObject * slice, vectoritkImageCF2 v)
        __setitem__(vectoritkImageCF2 self, PySliceObject * slice)
        __setitem__(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::difference_type i, std::vector< itkImageCF2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCF2___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageCF2_Pointer >::value_type":
        """pop(vectoritkImageCF2 self) -> std::vector< itkImageCF2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCF2_pop(self)


    def append(self, x: 'std::vector< itkImageCF2_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCF2_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageCF2 self) -> bool"""
        return _itkImagePython.vectoritkImageCF2_empty(self)


    def size(self) -> "std::vector< itkImageCF2_Pointer >::size_type":
        """size(vectoritkImageCF2 self) -> std::vector< itkImageCF2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF2_size(self)


    def swap(self, v: 'vectoritkImageCF2') -> "void":
        """swap(vectoritkImageCF2 self, vectoritkImageCF2 v)"""
        return _itkImagePython.vectoritkImageCF2_swap(self, v)


    def begin(self) -> "std::vector< itkImageCF2_Pointer >::iterator":
        """begin(vectoritkImageCF2 self) -> std::vector< itkImageCF2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCF2_begin(self)


    def end(self) -> "std::vector< itkImageCF2_Pointer >::iterator":
        """end(vectoritkImageCF2 self) -> std::vector< itkImageCF2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCF2_end(self)


    def rbegin(self) -> "std::vector< itkImageCF2_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageCF2 self) -> std::vector< itkImageCF2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCF2_rbegin(self)


    def rend(self) -> "std::vector< itkImageCF2_Pointer >::reverse_iterator":
        """rend(vectoritkImageCF2 self) -> std::vector< itkImageCF2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCF2_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageCF2 self)"""
        return _itkImagePython.vectoritkImageCF2_clear(self)


    def get_allocator(self) -> "std::vector< itkImageCF2_Pointer >::allocator_type":
        """get_allocator(vectoritkImageCF2 self) -> std::vector< itkImageCF2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCF2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageCF2 self)"""
        return _itkImagePython.vectoritkImageCF2_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageCF2_Pointer >::iterator":
        """
        erase(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::iterator pos) -> std::vector< itkImageCF2_Pointer >::iterator
        erase(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::iterator first, std::vector< itkImageCF2_Pointer >::iterator last) -> std::vector< itkImageCF2_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageCF2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageCF2_Pointer)> self) -> vectoritkImageCF2
        __init__(std::vector<(itkImageCF2_Pointer)> self, vectoritkImageCF2 arg2) -> vectoritkImageCF2
        __init__(std::vector<(itkImageCF2_Pointer)> self, std::vector< itkImageCF2_Pointer >::size_type size) -> vectoritkImageCF2
        __init__(std::vector<(itkImageCF2_Pointer)> self, std::vector< itkImageCF2_Pointer >::size_type size, std::vector< itkImageCF2_Pointer >::value_type const & value) -> vectoritkImageCF2
        """
        _itkImagePython.vectoritkImageCF2_swiginit(self, _itkImagePython.new_vectoritkImageCF2(*args))

    def push_back(self, x: 'std::vector< itkImageCF2_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCF2_push_back(self, x)


    def front(self) -> "std::vector< itkImageCF2_Pointer >::value_type const &":
        """front(vectoritkImageCF2 self) -> std::vector< itkImageCF2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCF2_front(self)


    def back(self) -> "std::vector< itkImageCF2_Pointer >::value_type const &":
        """back(vectoritkImageCF2 self) -> std::vector< itkImageCF2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCF2_back(self)


    def assign(self, n: 'std::vector< itkImageCF2_Pointer >::size_type', x: 'std::vector< itkImageCF2_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::size_type n, std::vector< itkImageCF2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCF2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::size_type new_size)
        resize(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::size_type new_size, std::vector< itkImageCF2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCF2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::iterator pos, std::vector< itkImageCF2_Pointer >::value_type const & x) -> std::vector< itkImageCF2_Pointer >::iterator
        insert(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::iterator pos, std::vector< itkImageCF2_Pointer >::size_type n, std::vector< itkImageCF2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCF2_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageCF2_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageCF2 self, std::vector< itkImageCF2_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageCF2_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageCF2_Pointer >::size_type":
        """capacity(vectoritkImageCF2 self) -> std::vector< itkImageCF2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF2_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCF2
vectoritkImageCF2.iterator = new_instancemethod(_itkImagePython.vectoritkImageCF2_iterator, None, vectoritkImageCF2)
vectoritkImageCF2.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageCF2___nonzero__, None, vectoritkImageCF2)
vectoritkImageCF2.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageCF2___bool__, None, vectoritkImageCF2)
vectoritkImageCF2.__len__ = new_instancemethod(_itkImagePython.vectoritkImageCF2___len__, None, vectoritkImageCF2)
vectoritkImageCF2.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageCF2___getslice__, None, vectoritkImageCF2)
vectoritkImageCF2.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageCF2___setslice__, None, vectoritkImageCF2)
vectoritkImageCF2.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageCF2___delslice__, None, vectoritkImageCF2)
vectoritkImageCF2.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageCF2___delitem__, None, vectoritkImageCF2)
vectoritkImageCF2.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageCF2___getitem__, None, vectoritkImageCF2)
vectoritkImageCF2.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageCF2___setitem__, None, vectoritkImageCF2)
vectoritkImageCF2.pop = new_instancemethod(_itkImagePython.vectoritkImageCF2_pop, None, vectoritkImageCF2)
vectoritkImageCF2.append = new_instancemethod(_itkImagePython.vectoritkImageCF2_append, None, vectoritkImageCF2)
vectoritkImageCF2.empty = new_instancemethod(_itkImagePython.vectoritkImageCF2_empty, None, vectoritkImageCF2)
vectoritkImageCF2.size = new_instancemethod(_itkImagePython.vectoritkImageCF2_size, None, vectoritkImageCF2)
vectoritkImageCF2.swap = new_instancemethod(_itkImagePython.vectoritkImageCF2_swap, None, vectoritkImageCF2)
vectoritkImageCF2.begin = new_instancemethod(_itkImagePython.vectoritkImageCF2_begin, None, vectoritkImageCF2)
vectoritkImageCF2.end = new_instancemethod(_itkImagePython.vectoritkImageCF2_end, None, vectoritkImageCF2)
vectoritkImageCF2.rbegin = new_instancemethod(_itkImagePython.vectoritkImageCF2_rbegin, None, vectoritkImageCF2)
vectoritkImageCF2.rend = new_instancemethod(_itkImagePython.vectoritkImageCF2_rend, None, vectoritkImageCF2)
vectoritkImageCF2.clear = new_instancemethod(_itkImagePython.vectoritkImageCF2_clear, None, vectoritkImageCF2)
vectoritkImageCF2.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageCF2_get_allocator, None, vectoritkImageCF2)
vectoritkImageCF2.pop_back = new_instancemethod(_itkImagePython.vectoritkImageCF2_pop_back, None, vectoritkImageCF2)
vectoritkImageCF2.erase = new_instancemethod(_itkImagePython.vectoritkImageCF2_erase, None, vectoritkImageCF2)
vectoritkImageCF2.push_back = new_instancemethod(_itkImagePython.vectoritkImageCF2_push_back, None, vectoritkImageCF2)
vectoritkImageCF2.front = new_instancemethod(_itkImagePython.vectoritkImageCF2_front, None, vectoritkImageCF2)
vectoritkImageCF2.back = new_instancemethod(_itkImagePython.vectoritkImageCF2_back, None, vectoritkImageCF2)
vectoritkImageCF2.assign = new_instancemethod(_itkImagePython.vectoritkImageCF2_assign, None, vectoritkImageCF2)
vectoritkImageCF2.resize = new_instancemethod(_itkImagePython.vectoritkImageCF2_resize, None, vectoritkImageCF2)
vectoritkImageCF2.insert = new_instancemethod(_itkImagePython.vectoritkImageCF2_insert, None, vectoritkImageCF2)
vectoritkImageCF2.reserve = new_instancemethod(_itkImagePython.vectoritkImageCF2_reserve, None, vectoritkImageCF2)
vectoritkImageCF2.capacity = new_instancemethod(_itkImagePython.vectoritkImageCF2_capacity, None, vectoritkImageCF2)
vectoritkImageCF2_swigregister = _itkImagePython.vectoritkImageCF2_swigregister
vectoritkImageCF2_swigregister(vectoritkImageCF2)

class vectoritkImageVD22(object):
    """Proxy of C++ std::vector<(itkImageVD22_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVD22 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD22_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVD22 self) -> bool"""
        return _itkImagePython.vectoritkImageVD22___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVD22 self) -> bool"""
        return _itkImagePython.vectoritkImageVD22___bool__(self)


    def __len__(self) -> "std::vector< itkImageVD22_Pointer >::size_type":
        """__len__(vectoritkImageVD22 self) -> std::vector< itkImageVD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD22___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVD22_Pointer >::difference_type', j: 'std::vector< itkImageVD22_Pointer >::difference_type') -> "std::vector< itkImageVD22_Pointer,std::allocator< itkImageVD22_Pointer > > *":
        """__getslice__(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::difference_type i, std::vector< itkImageVD22_Pointer >::difference_type j) -> vectoritkImageVD22"""
        return _itkImagePython.vectoritkImageVD22___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::difference_type i, std::vector< itkImageVD22_Pointer >::difference_type j)
        __setslice__(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::difference_type i, std::vector< itkImageVD22_Pointer >::difference_type j, vectoritkImageVD22 v)
        """
        return _itkImagePython.vectoritkImageVD22___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVD22_Pointer >::difference_type', j: 'std::vector< itkImageVD22_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::difference_type i, std::vector< itkImageVD22_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVD22___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::difference_type i)
        __delitem__(vectoritkImageVD22 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVD22___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVD22_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVD22 self, PySliceObject * slice) -> vectoritkImageVD22
        __getitem__(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::difference_type i) -> std::vector< itkImageVD22_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVD22___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVD22 self, PySliceObject * slice, vectoritkImageVD22 v)
        __setitem__(vectoritkImageVD22 self, PySliceObject * slice)
        __setitem__(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::difference_type i, std::vector< itkImageVD22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD22___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVD22_Pointer >::value_type":
        """pop(vectoritkImageVD22 self) -> std::vector< itkImageVD22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD22_pop(self)


    def append(self, x: 'std::vector< itkImageVD22_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD22_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVD22 self) -> bool"""
        return _itkImagePython.vectoritkImageVD22_empty(self)


    def size(self) -> "std::vector< itkImageVD22_Pointer >::size_type":
        """size(vectoritkImageVD22 self) -> std::vector< itkImageVD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD22_size(self)


    def swap(self, v: 'vectoritkImageVD22') -> "void":
        """swap(vectoritkImageVD22 self, vectoritkImageVD22 v)"""
        return _itkImagePython.vectoritkImageVD22_swap(self, v)


    def begin(self) -> "std::vector< itkImageVD22_Pointer >::iterator":
        """begin(vectoritkImageVD22 self) -> std::vector< itkImageVD22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD22_begin(self)


    def end(self) -> "std::vector< itkImageVD22_Pointer >::iterator":
        """end(vectoritkImageVD22 self) -> std::vector< itkImageVD22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD22_end(self)


    def rbegin(self) -> "std::vector< itkImageVD22_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVD22 self) -> std::vector< itkImageVD22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD22_rbegin(self)


    def rend(self) -> "std::vector< itkImageVD22_Pointer >::reverse_iterator":
        """rend(vectoritkImageVD22 self) -> std::vector< itkImageVD22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD22_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVD22 self)"""
        return _itkImagePython.vectoritkImageVD22_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVD22_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVD22 self) -> std::vector< itkImageVD22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD22_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVD22 self)"""
        return _itkImagePython.vectoritkImageVD22_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVD22_Pointer >::iterator":
        """
        erase(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::iterator pos) -> std::vector< itkImageVD22_Pointer >::iterator
        erase(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::iterator first, std::vector< itkImageVD22_Pointer >::iterator last) -> std::vector< itkImageVD22_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVD22_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVD22_Pointer)> self) -> vectoritkImageVD22
        __init__(std::vector<(itkImageVD22_Pointer)> self, vectoritkImageVD22 arg2) -> vectoritkImageVD22
        __init__(std::vector<(itkImageVD22_Pointer)> self, std::vector< itkImageVD22_Pointer >::size_type size) -> vectoritkImageVD22
        __init__(std::vector<(itkImageVD22_Pointer)> self, std::vector< itkImageVD22_Pointer >::size_type size, std::vector< itkImageVD22_Pointer >::value_type const & value) -> vectoritkImageVD22
        """
        _itkImagePython.vectoritkImageVD22_swiginit(self, _itkImagePython.new_vectoritkImageVD22(*args))

    def push_back(self, x: 'std::vector< itkImageVD22_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD22_push_back(self, x)


    def front(self) -> "std::vector< itkImageVD22_Pointer >::value_type const &":
        """front(vectoritkImageVD22 self) -> std::vector< itkImageVD22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD22_front(self)


    def back(self) -> "std::vector< itkImageVD22_Pointer >::value_type const &":
        """back(vectoritkImageVD22 self) -> std::vector< itkImageVD22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD22_back(self)


    def assign(self, n: 'std::vector< itkImageVD22_Pointer >::size_type', x: 'std::vector< itkImageVD22_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::size_type n, std::vector< itkImageVD22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD22_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::size_type new_size)
        resize(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::size_type new_size, std::vector< itkImageVD22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD22_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::iterator pos, std::vector< itkImageVD22_Pointer >::value_type const & x) -> std::vector< itkImageVD22_Pointer >::iterator
        insert(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::iterator pos, std::vector< itkImageVD22_Pointer >::size_type n, std::vector< itkImageVD22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD22_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVD22_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVD22 self, std::vector< itkImageVD22_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVD22_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVD22_Pointer >::size_type":
        """capacity(vectoritkImageVD22 self) -> std::vector< itkImageVD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD22_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD22
vectoritkImageVD22.iterator = new_instancemethod(_itkImagePython.vectoritkImageVD22_iterator, None, vectoritkImageVD22)
vectoritkImageVD22.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVD22___nonzero__, None, vectoritkImageVD22)
vectoritkImageVD22.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVD22___bool__, None, vectoritkImageVD22)
vectoritkImageVD22.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVD22___len__, None, vectoritkImageVD22)
vectoritkImageVD22.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD22___getslice__, None, vectoritkImageVD22)
vectoritkImageVD22.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD22___setslice__, None, vectoritkImageVD22)
vectoritkImageVD22.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD22___delslice__, None, vectoritkImageVD22)
vectoritkImageVD22.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD22___delitem__, None, vectoritkImageVD22)
vectoritkImageVD22.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD22___getitem__, None, vectoritkImageVD22)
vectoritkImageVD22.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD22___setitem__, None, vectoritkImageVD22)
vectoritkImageVD22.pop = new_instancemethod(_itkImagePython.vectoritkImageVD22_pop, None, vectoritkImageVD22)
vectoritkImageVD22.append = new_instancemethod(_itkImagePython.vectoritkImageVD22_append, None, vectoritkImageVD22)
vectoritkImageVD22.empty = new_instancemethod(_itkImagePython.vectoritkImageVD22_empty, None, vectoritkImageVD22)
vectoritkImageVD22.size = new_instancemethod(_itkImagePython.vectoritkImageVD22_size, None, vectoritkImageVD22)
vectoritkImageVD22.swap = new_instancemethod(_itkImagePython.vectoritkImageVD22_swap, None, vectoritkImageVD22)
vectoritkImageVD22.begin = new_instancemethod(_itkImagePython.vectoritkImageVD22_begin, None, vectoritkImageVD22)
vectoritkImageVD22.end = new_instancemethod(_itkImagePython.vectoritkImageVD22_end, None, vectoritkImageVD22)
vectoritkImageVD22.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVD22_rbegin, None, vectoritkImageVD22)
vectoritkImageVD22.rend = new_instancemethod(_itkImagePython.vectoritkImageVD22_rend, None, vectoritkImageVD22)
vectoritkImageVD22.clear = new_instancemethod(_itkImagePython.vectoritkImageVD22_clear, None, vectoritkImageVD22)
vectoritkImageVD22.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVD22_get_allocator, None, vectoritkImageVD22)
vectoritkImageVD22.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVD22_pop_back, None, vectoritkImageVD22)
vectoritkImageVD22.erase = new_instancemethod(_itkImagePython.vectoritkImageVD22_erase, None, vectoritkImageVD22)
vectoritkImageVD22.push_back = new_instancemethod(_itkImagePython.vectoritkImageVD22_push_back, None, vectoritkImageVD22)
vectoritkImageVD22.front = new_instancemethod(_itkImagePython.vectoritkImageVD22_front, None, vectoritkImageVD22)
vectoritkImageVD22.back = new_instancemethod(_itkImagePython.vectoritkImageVD22_back, None, vectoritkImageVD22)
vectoritkImageVD22.assign = new_instancemethod(_itkImagePython.vectoritkImageVD22_assign, None, vectoritkImageVD22)
vectoritkImageVD22.resize = new_instancemethod(_itkImagePython.vectoritkImageVD22_resize, None, vectoritkImageVD22)
vectoritkImageVD22.insert = new_instancemethod(_itkImagePython.vectoritkImageVD22_insert, None, vectoritkImageVD22)
vectoritkImageVD22.reserve = new_instancemethod(_itkImagePython.vectoritkImageVD22_reserve, None, vectoritkImageVD22)
vectoritkImageVD22.capacity = new_instancemethod(_itkImagePython.vectoritkImageVD22_capacity, None, vectoritkImageVD22)
vectoritkImageVD22_swigregister = _itkImagePython.vectoritkImageVD22_swigregister
vectoritkImageVD22_swigregister(vectoritkImageVD22)

class vectoritkImageVD32(object):
    """Proxy of C++ std::vector<(itkImageVD32_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVD32 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD32_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVD32 self) -> bool"""
        return _itkImagePython.vectoritkImageVD32___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVD32 self) -> bool"""
        return _itkImagePython.vectoritkImageVD32___bool__(self)


    def __len__(self) -> "std::vector< itkImageVD32_Pointer >::size_type":
        """__len__(vectoritkImageVD32 self) -> std::vector< itkImageVD32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD32___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVD32_Pointer >::difference_type', j: 'std::vector< itkImageVD32_Pointer >::difference_type') -> "std::vector< itkImageVD32_Pointer,std::allocator< itkImageVD32_Pointer > > *":
        """__getslice__(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::difference_type i, std::vector< itkImageVD32_Pointer >::difference_type j) -> vectoritkImageVD32"""
        return _itkImagePython.vectoritkImageVD32___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::difference_type i, std::vector< itkImageVD32_Pointer >::difference_type j)
        __setslice__(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::difference_type i, std::vector< itkImageVD32_Pointer >::difference_type j, vectoritkImageVD32 v)
        """
        return _itkImagePython.vectoritkImageVD32___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVD32_Pointer >::difference_type', j: 'std::vector< itkImageVD32_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::difference_type i, std::vector< itkImageVD32_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVD32___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::difference_type i)
        __delitem__(vectoritkImageVD32 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVD32___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVD32_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVD32 self, PySliceObject * slice) -> vectoritkImageVD32
        __getitem__(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::difference_type i) -> std::vector< itkImageVD32_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVD32___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVD32 self, PySliceObject * slice, vectoritkImageVD32 v)
        __setitem__(vectoritkImageVD32 self, PySliceObject * slice)
        __setitem__(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::difference_type i, std::vector< itkImageVD32_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD32___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVD32_Pointer >::value_type":
        """pop(vectoritkImageVD32 self) -> std::vector< itkImageVD32_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD32_pop(self)


    def append(self, x: 'std::vector< itkImageVD32_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD32_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVD32 self) -> bool"""
        return _itkImagePython.vectoritkImageVD32_empty(self)


    def size(self) -> "std::vector< itkImageVD32_Pointer >::size_type":
        """size(vectoritkImageVD32 self) -> std::vector< itkImageVD32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD32_size(self)


    def swap(self, v: 'vectoritkImageVD32') -> "void":
        """swap(vectoritkImageVD32 self, vectoritkImageVD32 v)"""
        return _itkImagePython.vectoritkImageVD32_swap(self, v)


    def begin(self) -> "std::vector< itkImageVD32_Pointer >::iterator":
        """begin(vectoritkImageVD32 self) -> std::vector< itkImageVD32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD32_begin(self)


    def end(self) -> "std::vector< itkImageVD32_Pointer >::iterator":
        """end(vectoritkImageVD32 self) -> std::vector< itkImageVD32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD32_end(self)


    def rbegin(self) -> "std::vector< itkImageVD32_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVD32 self) -> std::vector< itkImageVD32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD32_rbegin(self)


    def rend(self) -> "std::vector< itkImageVD32_Pointer >::reverse_iterator":
        """rend(vectoritkImageVD32 self) -> std::vector< itkImageVD32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD32_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVD32 self)"""
        return _itkImagePython.vectoritkImageVD32_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVD32_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVD32 self) -> std::vector< itkImageVD32_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD32_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVD32 self)"""
        return _itkImagePython.vectoritkImageVD32_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVD32_Pointer >::iterator":
        """
        erase(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::iterator pos) -> std::vector< itkImageVD32_Pointer >::iterator
        erase(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::iterator first, std::vector< itkImageVD32_Pointer >::iterator last) -> std::vector< itkImageVD32_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVD32_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVD32_Pointer)> self) -> vectoritkImageVD32
        __init__(std::vector<(itkImageVD32_Pointer)> self, vectoritkImageVD32 arg2) -> vectoritkImageVD32
        __init__(std::vector<(itkImageVD32_Pointer)> self, std::vector< itkImageVD32_Pointer >::size_type size) -> vectoritkImageVD32
        __init__(std::vector<(itkImageVD32_Pointer)> self, std::vector< itkImageVD32_Pointer >::size_type size, std::vector< itkImageVD32_Pointer >::value_type const & value) -> vectoritkImageVD32
        """
        _itkImagePython.vectoritkImageVD32_swiginit(self, _itkImagePython.new_vectoritkImageVD32(*args))

    def push_back(self, x: 'std::vector< itkImageVD32_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD32_push_back(self, x)


    def front(self) -> "std::vector< itkImageVD32_Pointer >::value_type const &":
        """front(vectoritkImageVD32 self) -> std::vector< itkImageVD32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD32_front(self)


    def back(self) -> "std::vector< itkImageVD32_Pointer >::value_type const &":
        """back(vectoritkImageVD32 self) -> std::vector< itkImageVD32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD32_back(self)


    def assign(self, n: 'std::vector< itkImageVD32_Pointer >::size_type', x: 'std::vector< itkImageVD32_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::size_type n, std::vector< itkImageVD32_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD32_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::size_type new_size)
        resize(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::size_type new_size, std::vector< itkImageVD32_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD32_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::iterator pos, std::vector< itkImageVD32_Pointer >::value_type const & x) -> std::vector< itkImageVD32_Pointer >::iterator
        insert(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::iterator pos, std::vector< itkImageVD32_Pointer >::size_type n, std::vector< itkImageVD32_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD32_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVD32_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVD32 self, std::vector< itkImageVD32_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVD32_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVD32_Pointer >::size_type":
        """capacity(vectoritkImageVD32 self) -> std::vector< itkImageVD32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD32_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD32
vectoritkImageVD32.iterator = new_instancemethod(_itkImagePython.vectoritkImageVD32_iterator, None, vectoritkImageVD32)
vectoritkImageVD32.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVD32___nonzero__, None, vectoritkImageVD32)
vectoritkImageVD32.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVD32___bool__, None, vectoritkImageVD32)
vectoritkImageVD32.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVD32___len__, None, vectoritkImageVD32)
vectoritkImageVD32.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD32___getslice__, None, vectoritkImageVD32)
vectoritkImageVD32.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD32___setslice__, None, vectoritkImageVD32)
vectoritkImageVD32.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD32___delslice__, None, vectoritkImageVD32)
vectoritkImageVD32.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD32___delitem__, None, vectoritkImageVD32)
vectoritkImageVD32.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD32___getitem__, None, vectoritkImageVD32)
vectoritkImageVD32.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD32___setitem__, None, vectoritkImageVD32)
vectoritkImageVD32.pop = new_instancemethod(_itkImagePython.vectoritkImageVD32_pop, None, vectoritkImageVD32)
vectoritkImageVD32.append = new_instancemethod(_itkImagePython.vectoritkImageVD32_append, None, vectoritkImageVD32)
vectoritkImageVD32.empty = new_instancemethod(_itkImagePython.vectoritkImageVD32_empty, None, vectoritkImageVD32)
vectoritkImageVD32.size = new_instancemethod(_itkImagePython.vectoritkImageVD32_size, None, vectoritkImageVD32)
vectoritkImageVD32.swap = new_instancemethod(_itkImagePython.vectoritkImageVD32_swap, None, vectoritkImageVD32)
vectoritkImageVD32.begin = new_instancemethod(_itkImagePython.vectoritkImageVD32_begin, None, vectoritkImageVD32)
vectoritkImageVD32.end = new_instancemethod(_itkImagePython.vectoritkImageVD32_end, None, vectoritkImageVD32)
vectoritkImageVD32.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVD32_rbegin, None, vectoritkImageVD32)
vectoritkImageVD32.rend = new_instancemethod(_itkImagePython.vectoritkImageVD32_rend, None, vectoritkImageVD32)
vectoritkImageVD32.clear = new_instancemethod(_itkImagePython.vectoritkImageVD32_clear, None, vectoritkImageVD32)
vectoritkImageVD32.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVD32_get_allocator, None, vectoritkImageVD32)
vectoritkImageVD32.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVD32_pop_back, None, vectoritkImageVD32)
vectoritkImageVD32.erase = new_instancemethod(_itkImagePython.vectoritkImageVD32_erase, None, vectoritkImageVD32)
vectoritkImageVD32.push_back = new_instancemethod(_itkImagePython.vectoritkImageVD32_push_back, None, vectoritkImageVD32)
vectoritkImageVD32.front = new_instancemethod(_itkImagePython.vectoritkImageVD32_front, None, vectoritkImageVD32)
vectoritkImageVD32.back = new_instancemethod(_itkImagePython.vectoritkImageVD32_back, None, vectoritkImageVD32)
vectoritkImageVD32.assign = new_instancemethod(_itkImagePython.vectoritkImageVD32_assign, None, vectoritkImageVD32)
vectoritkImageVD32.resize = new_instancemethod(_itkImagePython.vectoritkImageVD32_resize, None, vectoritkImageVD32)
vectoritkImageVD32.insert = new_instancemethod(_itkImagePython.vectoritkImageVD32_insert, None, vectoritkImageVD32)
vectoritkImageVD32.reserve = new_instancemethod(_itkImagePython.vectoritkImageVD32_reserve, None, vectoritkImageVD32)
vectoritkImageVD32.capacity = new_instancemethod(_itkImagePython.vectoritkImageVD32_capacity, None, vectoritkImageVD32)
vectoritkImageVD32_swigregister = _itkImagePython.vectoritkImageVD32_swigregister
vectoritkImageVD32_swigregister(vectoritkImageVD32)

class vectoritkImageVD42(object):
    """Proxy of C++ std::vector<(itkImageVD42_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVD42 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD42_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVD42 self) -> bool"""
        return _itkImagePython.vectoritkImageVD42___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVD42 self) -> bool"""
        return _itkImagePython.vectoritkImageVD42___bool__(self)


    def __len__(self) -> "std::vector< itkImageVD42_Pointer >::size_type":
        """__len__(vectoritkImageVD42 self) -> std::vector< itkImageVD42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD42___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVD42_Pointer >::difference_type', j: 'std::vector< itkImageVD42_Pointer >::difference_type') -> "std::vector< itkImageVD42_Pointer,std::allocator< itkImageVD42_Pointer > > *":
        """__getslice__(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::difference_type i, std::vector< itkImageVD42_Pointer >::difference_type j) -> vectoritkImageVD42"""
        return _itkImagePython.vectoritkImageVD42___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::difference_type i, std::vector< itkImageVD42_Pointer >::difference_type j)
        __setslice__(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::difference_type i, std::vector< itkImageVD42_Pointer >::difference_type j, vectoritkImageVD42 v)
        """
        return _itkImagePython.vectoritkImageVD42___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVD42_Pointer >::difference_type', j: 'std::vector< itkImageVD42_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::difference_type i, std::vector< itkImageVD42_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVD42___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::difference_type i)
        __delitem__(vectoritkImageVD42 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVD42___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVD42_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVD42 self, PySliceObject * slice) -> vectoritkImageVD42
        __getitem__(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::difference_type i) -> std::vector< itkImageVD42_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVD42___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVD42 self, PySliceObject * slice, vectoritkImageVD42 v)
        __setitem__(vectoritkImageVD42 self, PySliceObject * slice)
        __setitem__(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::difference_type i, std::vector< itkImageVD42_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD42___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVD42_Pointer >::value_type":
        """pop(vectoritkImageVD42 self) -> std::vector< itkImageVD42_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD42_pop(self)


    def append(self, x: 'std::vector< itkImageVD42_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD42_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVD42 self) -> bool"""
        return _itkImagePython.vectoritkImageVD42_empty(self)


    def size(self) -> "std::vector< itkImageVD42_Pointer >::size_type":
        """size(vectoritkImageVD42 self) -> std::vector< itkImageVD42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD42_size(self)


    def swap(self, v: 'vectoritkImageVD42') -> "void":
        """swap(vectoritkImageVD42 self, vectoritkImageVD42 v)"""
        return _itkImagePython.vectoritkImageVD42_swap(self, v)


    def begin(self) -> "std::vector< itkImageVD42_Pointer >::iterator":
        """begin(vectoritkImageVD42 self) -> std::vector< itkImageVD42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD42_begin(self)


    def end(self) -> "std::vector< itkImageVD42_Pointer >::iterator":
        """end(vectoritkImageVD42 self) -> std::vector< itkImageVD42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD42_end(self)


    def rbegin(self) -> "std::vector< itkImageVD42_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVD42 self) -> std::vector< itkImageVD42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD42_rbegin(self)


    def rend(self) -> "std::vector< itkImageVD42_Pointer >::reverse_iterator":
        """rend(vectoritkImageVD42 self) -> std::vector< itkImageVD42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD42_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVD42 self)"""
        return _itkImagePython.vectoritkImageVD42_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVD42_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVD42 self) -> std::vector< itkImageVD42_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD42_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVD42 self)"""
        return _itkImagePython.vectoritkImageVD42_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVD42_Pointer >::iterator":
        """
        erase(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::iterator pos) -> std::vector< itkImageVD42_Pointer >::iterator
        erase(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::iterator first, std::vector< itkImageVD42_Pointer >::iterator last) -> std::vector< itkImageVD42_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVD42_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVD42_Pointer)> self) -> vectoritkImageVD42
        __init__(std::vector<(itkImageVD42_Pointer)> self, vectoritkImageVD42 arg2) -> vectoritkImageVD42
        __init__(std::vector<(itkImageVD42_Pointer)> self, std::vector< itkImageVD42_Pointer >::size_type size) -> vectoritkImageVD42
        __init__(std::vector<(itkImageVD42_Pointer)> self, std::vector< itkImageVD42_Pointer >::size_type size, std::vector< itkImageVD42_Pointer >::value_type const & value) -> vectoritkImageVD42
        """
        _itkImagePython.vectoritkImageVD42_swiginit(self, _itkImagePython.new_vectoritkImageVD42(*args))

    def push_back(self, x: 'std::vector< itkImageVD42_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD42_push_back(self, x)


    def front(self) -> "std::vector< itkImageVD42_Pointer >::value_type const &":
        """front(vectoritkImageVD42 self) -> std::vector< itkImageVD42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD42_front(self)


    def back(self) -> "std::vector< itkImageVD42_Pointer >::value_type const &":
        """back(vectoritkImageVD42 self) -> std::vector< itkImageVD42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD42_back(self)


    def assign(self, n: 'std::vector< itkImageVD42_Pointer >::size_type', x: 'std::vector< itkImageVD42_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::size_type n, std::vector< itkImageVD42_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD42_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::size_type new_size)
        resize(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::size_type new_size, std::vector< itkImageVD42_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD42_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::iterator pos, std::vector< itkImageVD42_Pointer >::value_type const & x) -> std::vector< itkImageVD42_Pointer >::iterator
        insert(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::iterator pos, std::vector< itkImageVD42_Pointer >::size_type n, std::vector< itkImageVD42_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD42_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVD42_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVD42 self, std::vector< itkImageVD42_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVD42_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVD42_Pointer >::size_type":
        """capacity(vectoritkImageVD42 self) -> std::vector< itkImageVD42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD42_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD42
vectoritkImageVD42.iterator = new_instancemethod(_itkImagePython.vectoritkImageVD42_iterator, None, vectoritkImageVD42)
vectoritkImageVD42.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVD42___nonzero__, None, vectoritkImageVD42)
vectoritkImageVD42.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVD42___bool__, None, vectoritkImageVD42)
vectoritkImageVD42.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVD42___len__, None, vectoritkImageVD42)
vectoritkImageVD42.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD42___getslice__, None, vectoritkImageVD42)
vectoritkImageVD42.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD42___setslice__, None, vectoritkImageVD42)
vectoritkImageVD42.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD42___delslice__, None, vectoritkImageVD42)
vectoritkImageVD42.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD42___delitem__, None, vectoritkImageVD42)
vectoritkImageVD42.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD42___getitem__, None, vectoritkImageVD42)
vectoritkImageVD42.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD42___setitem__, None, vectoritkImageVD42)
vectoritkImageVD42.pop = new_instancemethod(_itkImagePython.vectoritkImageVD42_pop, None, vectoritkImageVD42)
vectoritkImageVD42.append = new_instancemethod(_itkImagePython.vectoritkImageVD42_append, None, vectoritkImageVD42)
vectoritkImageVD42.empty = new_instancemethod(_itkImagePython.vectoritkImageVD42_empty, None, vectoritkImageVD42)
vectoritkImageVD42.size = new_instancemethod(_itkImagePython.vectoritkImageVD42_size, None, vectoritkImageVD42)
vectoritkImageVD42.swap = new_instancemethod(_itkImagePython.vectoritkImageVD42_swap, None, vectoritkImageVD42)
vectoritkImageVD42.begin = new_instancemethod(_itkImagePython.vectoritkImageVD42_begin, None, vectoritkImageVD42)
vectoritkImageVD42.end = new_instancemethod(_itkImagePython.vectoritkImageVD42_end, None, vectoritkImageVD42)
vectoritkImageVD42.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVD42_rbegin, None, vectoritkImageVD42)
vectoritkImageVD42.rend = new_instancemethod(_itkImagePython.vectoritkImageVD42_rend, None, vectoritkImageVD42)
vectoritkImageVD42.clear = new_instancemethod(_itkImagePython.vectoritkImageVD42_clear, None, vectoritkImageVD42)
vectoritkImageVD42.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVD42_get_allocator, None, vectoritkImageVD42)
vectoritkImageVD42.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVD42_pop_back, None, vectoritkImageVD42)
vectoritkImageVD42.erase = new_instancemethod(_itkImagePython.vectoritkImageVD42_erase, None, vectoritkImageVD42)
vectoritkImageVD42.push_back = new_instancemethod(_itkImagePython.vectoritkImageVD42_push_back, None, vectoritkImageVD42)
vectoritkImageVD42.front = new_instancemethod(_itkImagePython.vectoritkImageVD42_front, None, vectoritkImageVD42)
vectoritkImageVD42.back = new_instancemethod(_itkImagePython.vectoritkImageVD42_back, None, vectoritkImageVD42)
vectoritkImageVD42.assign = new_instancemethod(_itkImagePython.vectoritkImageVD42_assign, None, vectoritkImageVD42)
vectoritkImageVD42.resize = new_instancemethod(_itkImagePython.vectoritkImageVD42_resize, None, vectoritkImageVD42)
vectoritkImageVD42.insert = new_instancemethod(_itkImagePython.vectoritkImageVD42_insert, None, vectoritkImageVD42)
vectoritkImageVD42.reserve = new_instancemethod(_itkImagePython.vectoritkImageVD42_reserve, None, vectoritkImageVD42)
vectoritkImageVD42.capacity = new_instancemethod(_itkImagePython.vectoritkImageVD42_capacity, None, vectoritkImageVD42)
vectoritkImageVD42_swigregister = _itkImagePython.vectoritkImageVD42_swigregister
vectoritkImageVD42_swigregister(vectoritkImageVD42)

class vectoritkImageD2(object):
    """Proxy of C++ std::vector<(itkImageD2_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageD2 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageD2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageD2 self) -> bool"""
        return _itkImagePython.vectoritkImageD2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageD2 self) -> bool"""
        return _itkImagePython.vectoritkImageD2___bool__(self)


    def __len__(self) -> "std::vector< itkImageD2_Pointer >::size_type":
        """__len__(vectoritkImageD2 self) -> std::vector< itkImageD2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD2___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageD2_Pointer >::difference_type', j: 'std::vector< itkImageD2_Pointer >::difference_type') -> "std::vector< itkImageD2_Pointer,std::allocator< itkImageD2_Pointer > > *":
        """__getslice__(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::difference_type i, std::vector< itkImageD2_Pointer >::difference_type j) -> vectoritkImageD2"""
        return _itkImagePython.vectoritkImageD2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::difference_type i, std::vector< itkImageD2_Pointer >::difference_type j)
        __setslice__(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::difference_type i, std::vector< itkImageD2_Pointer >::difference_type j, vectoritkImageD2 v)
        """
        return _itkImagePython.vectoritkImageD2___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageD2_Pointer >::difference_type', j: 'std::vector< itkImageD2_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::difference_type i, std::vector< itkImageD2_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageD2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::difference_type i)
        __delitem__(vectoritkImageD2 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageD2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageD2_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageD2 self, PySliceObject * slice) -> vectoritkImageD2
        __getitem__(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::difference_type i) -> std::vector< itkImageD2_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageD2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageD2 self, PySliceObject * slice, vectoritkImageD2 v)
        __setitem__(vectoritkImageD2 self, PySliceObject * slice)
        __setitem__(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::difference_type i, std::vector< itkImageD2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageD2___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageD2_Pointer >::value_type":
        """pop(vectoritkImageD2 self) -> std::vector< itkImageD2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageD2_pop(self)


    def append(self, x: 'std::vector< itkImageD2_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageD2_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageD2 self) -> bool"""
        return _itkImagePython.vectoritkImageD2_empty(self)


    def size(self) -> "std::vector< itkImageD2_Pointer >::size_type":
        """size(vectoritkImageD2 self) -> std::vector< itkImageD2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD2_size(self)


    def swap(self, v: 'vectoritkImageD2') -> "void":
        """swap(vectoritkImageD2 self, vectoritkImageD2 v)"""
        return _itkImagePython.vectoritkImageD2_swap(self, v)


    def begin(self) -> "std::vector< itkImageD2_Pointer >::iterator":
        """begin(vectoritkImageD2 self) -> std::vector< itkImageD2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageD2_begin(self)


    def end(self) -> "std::vector< itkImageD2_Pointer >::iterator":
        """end(vectoritkImageD2 self) -> std::vector< itkImageD2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageD2_end(self)


    def rbegin(self) -> "std::vector< itkImageD2_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageD2 self) -> std::vector< itkImageD2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageD2_rbegin(self)


    def rend(self) -> "std::vector< itkImageD2_Pointer >::reverse_iterator":
        """rend(vectoritkImageD2 self) -> std::vector< itkImageD2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageD2_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageD2 self)"""
        return _itkImagePython.vectoritkImageD2_clear(self)


    def get_allocator(self) -> "std::vector< itkImageD2_Pointer >::allocator_type":
        """get_allocator(vectoritkImageD2 self) -> std::vector< itkImageD2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageD2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageD2 self)"""
        return _itkImagePython.vectoritkImageD2_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageD2_Pointer >::iterator":
        """
        erase(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::iterator pos) -> std::vector< itkImageD2_Pointer >::iterator
        erase(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::iterator first, std::vector< itkImageD2_Pointer >::iterator last) -> std::vector< itkImageD2_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageD2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageD2_Pointer)> self) -> vectoritkImageD2
        __init__(std::vector<(itkImageD2_Pointer)> self, vectoritkImageD2 arg2) -> vectoritkImageD2
        __init__(std::vector<(itkImageD2_Pointer)> self, std::vector< itkImageD2_Pointer >::size_type size) -> vectoritkImageD2
        __init__(std::vector<(itkImageD2_Pointer)> self, std::vector< itkImageD2_Pointer >::size_type size, std::vector< itkImageD2_Pointer >::value_type const & value) -> vectoritkImageD2
        """
        _itkImagePython.vectoritkImageD2_swiginit(self, _itkImagePython.new_vectoritkImageD2(*args))

    def push_back(self, x: 'std::vector< itkImageD2_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageD2_push_back(self, x)


    def front(self) -> "std::vector< itkImageD2_Pointer >::value_type const &":
        """front(vectoritkImageD2 self) -> std::vector< itkImageD2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageD2_front(self)


    def back(self) -> "std::vector< itkImageD2_Pointer >::value_type const &":
        """back(vectoritkImageD2 self) -> std::vector< itkImageD2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageD2_back(self)


    def assign(self, n: 'std::vector< itkImageD2_Pointer >::size_type', x: 'std::vector< itkImageD2_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::size_type n, std::vector< itkImageD2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageD2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::size_type new_size)
        resize(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::size_type new_size, std::vector< itkImageD2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageD2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::iterator pos, std::vector< itkImageD2_Pointer >::value_type const & x) -> std::vector< itkImageD2_Pointer >::iterator
        insert(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::iterator pos, std::vector< itkImageD2_Pointer >::size_type n, std::vector< itkImageD2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageD2_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageD2_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageD2 self, std::vector< itkImageD2_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageD2_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageD2_Pointer >::size_type":
        """capacity(vectoritkImageD2 self) -> std::vector< itkImageD2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD2_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageD2
vectoritkImageD2.iterator = new_instancemethod(_itkImagePython.vectoritkImageD2_iterator, None, vectoritkImageD2)
vectoritkImageD2.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageD2___nonzero__, None, vectoritkImageD2)
vectoritkImageD2.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageD2___bool__, None, vectoritkImageD2)
vectoritkImageD2.__len__ = new_instancemethod(_itkImagePython.vectoritkImageD2___len__, None, vectoritkImageD2)
vectoritkImageD2.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageD2___getslice__, None, vectoritkImageD2)
vectoritkImageD2.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageD2___setslice__, None, vectoritkImageD2)
vectoritkImageD2.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageD2___delslice__, None, vectoritkImageD2)
vectoritkImageD2.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageD2___delitem__, None, vectoritkImageD2)
vectoritkImageD2.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageD2___getitem__, None, vectoritkImageD2)
vectoritkImageD2.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageD2___setitem__, None, vectoritkImageD2)
vectoritkImageD2.pop = new_instancemethod(_itkImagePython.vectoritkImageD2_pop, None, vectoritkImageD2)
vectoritkImageD2.append = new_instancemethod(_itkImagePython.vectoritkImageD2_append, None, vectoritkImageD2)
vectoritkImageD2.empty = new_instancemethod(_itkImagePython.vectoritkImageD2_empty, None, vectoritkImageD2)
vectoritkImageD2.size = new_instancemethod(_itkImagePython.vectoritkImageD2_size, None, vectoritkImageD2)
vectoritkImageD2.swap = new_instancemethod(_itkImagePython.vectoritkImageD2_swap, None, vectoritkImageD2)
vectoritkImageD2.begin = new_instancemethod(_itkImagePython.vectoritkImageD2_begin, None, vectoritkImageD2)
vectoritkImageD2.end = new_instancemethod(_itkImagePython.vectoritkImageD2_end, None, vectoritkImageD2)
vectoritkImageD2.rbegin = new_instancemethod(_itkImagePython.vectoritkImageD2_rbegin, None, vectoritkImageD2)
vectoritkImageD2.rend = new_instancemethod(_itkImagePython.vectoritkImageD2_rend, None, vectoritkImageD2)
vectoritkImageD2.clear = new_instancemethod(_itkImagePython.vectoritkImageD2_clear, None, vectoritkImageD2)
vectoritkImageD2.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageD2_get_allocator, None, vectoritkImageD2)
vectoritkImageD2.pop_back = new_instancemethod(_itkImagePython.vectoritkImageD2_pop_back, None, vectoritkImageD2)
vectoritkImageD2.erase = new_instancemethod(_itkImagePython.vectoritkImageD2_erase, None, vectoritkImageD2)
vectoritkImageD2.push_back = new_instancemethod(_itkImagePython.vectoritkImageD2_push_back, None, vectoritkImageD2)
vectoritkImageD2.front = new_instancemethod(_itkImagePython.vectoritkImageD2_front, None, vectoritkImageD2)
vectoritkImageD2.back = new_instancemethod(_itkImagePython.vectoritkImageD2_back, None, vectoritkImageD2)
vectoritkImageD2.assign = new_instancemethod(_itkImagePython.vectoritkImageD2_assign, None, vectoritkImageD2)
vectoritkImageD2.resize = new_instancemethod(_itkImagePython.vectoritkImageD2_resize, None, vectoritkImageD2)
vectoritkImageD2.insert = new_instancemethod(_itkImagePython.vectoritkImageD2_insert, None, vectoritkImageD2)
vectoritkImageD2.reserve = new_instancemethod(_itkImagePython.vectoritkImageD2_reserve, None, vectoritkImageD2)
vectoritkImageD2.capacity = new_instancemethod(_itkImagePython.vectoritkImageD2_capacity, None, vectoritkImageD2)
vectoritkImageD2_swigregister = _itkImagePython.vectoritkImageD2_swigregister
vectoritkImageD2_swigregister(vectoritkImageD2)

class vectoritkImageUL2(object):
    """Proxy of C++ std::vector<(itkImageUL2_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageUL2 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUL2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageUL2 self) -> bool"""
        return _itkImagePython.vectoritkImageUL2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageUL2 self) -> bool"""
        return _itkImagePython.vectoritkImageUL2___bool__(self)


    def __len__(self) -> "std::vector< itkImageUL2_Pointer >::size_type":
        """__len__(vectoritkImageUL2 self) -> std::vector< itkImageUL2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL2___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageUL2_Pointer >::difference_type', j: 'std::vector< itkImageUL2_Pointer >::difference_type') -> "std::vector< itkImageUL2_Pointer,std::allocator< itkImageUL2_Pointer > > *":
        """__getslice__(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::difference_type i, std::vector< itkImageUL2_Pointer >::difference_type j) -> vectoritkImageUL2"""
        return _itkImagePython.vectoritkImageUL2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::difference_type i, std::vector< itkImageUL2_Pointer >::difference_type j)
        __setslice__(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::difference_type i, std::vector< itkImageUL2_Pointer >::difference_type j, vectoritkImageUL2 v)
        """
        return _itkImagePython.vectoritkImageUL2___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageUL2_Pointer >::difference_type', j: 'std::vector< itkImageUL2_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::difference_type i, std::vector< itkImageUL2_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageUL2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::difference_type i)
        __delitem__(vectoritkImageUL2 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageUL2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageUL2_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageUL2 self, PySliceObject * slice) -> vectoritkImageUL2
        __getitem__(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::difference_type i) -> std::vector< itkImageUL2_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageUL2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageUL2 self, PySliceObject * slice, vectoritkImageUL2 v)
        __setitem__(vectoritkImageUL2 self, PySliceObject * slice)
        __setitem__(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::difference_type i, std::vector< itkImageUL2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUL2___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageUL2_Pointer >::value_type":
        """pop(vectoritkImageUL2 self) -> std::vector< itkImageUL2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUL2_pop(self)


    def append(self, x: 'std::vector< itkImageUL2_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUL2_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageUL2 self) -> bool"""
        return _itkImagePython.vectoritkImageUL2_empty(self)


    def size(self) -> "std::vector< itkImageUL2_Pointer >::size_type":
        """size(vectoritkImageUL2 self) -> std::vector< itkImageUL2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL2_size(self)


    def swap(self, v: 'vectoritkImageUL2') -> "void":
        """swap(vectoritkImageUL2 self, vectoritkImageUL2 v)"""
        return _itkImagePython.vectoritkImageUL2_swap(self, v)


    def begin(self) -> "std::vector< itkImageUL2_Pointer >::iterator":
        """begin(vectoritkImageUL2 self) -> std::vector< itkImageUL2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUL2_begin(self)


    def end(self) -> "std::vector< itkImageUL2_Pointer >::iterator":
        """end(vectoritkImageUL2 self) -> std::vector< itkImageUL2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUL2_end(self)


    def rbegin(self) -> "std::vector< itkImageUL2_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageUL2 self) -> std::vector< itkImageUL2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUL2_rbegin(self)


    def rend(self) -> "std::vector< itkImageUL2_Pointer >::reverse_iterator":
        """rend(vectoritkImageUL2 self) -> std::vector< itkImageUL2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUL2_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageUL2 self)"""
        return _itkImagePython.vectoritkImageUL2_clear(self)


    def get_allocator(self) -> "std::vector< itkImageUL2_Pointer >::allocator_type":
        """get_allocator(vectoritkImageUL2 self) -> std::vector< itkImageUL2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUL2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageUL2 self)"""
        return _itkImagePython.vectoritkImageUL2_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageUL2_Pointer >::iterator":
        """
        erase(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::iterator pos) -> std::vector< itkImageUL2_Pointer >::iterator
        erase(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::iterator first, std::vector< itkImageUL2_Pointer >::iterator last) -> std::vector< itkImageUL2_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageUL2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageUL2_Pointer)> self) -> vectoritkImageUL2
        __init__(std::vector<(itkImageUL2_Pointer)> self, vectoritkImageUL2 arg2) -> vectoritkImageUL2
        __init__(std::vector<(itkImageUL2_Pointer)> self, std::vector< itkImageUL2_Pointer >::size_type size) -> vectoritkImageUL2
        __init__(std::vector<(itkImageUL2_Pointer)> self, std::vector< itkImageUL2_Pointer >::size_type size, std::vector< itkImageUL2_Pointer >::value_type const & value) -> vectoritkImageUL2
        """
        _itkImagePython.vectoritkImageUL2_swiginit(self, _itkImagePython.new_vectoritkImageUL2(*args))

    def push_back(self, x: 'std::vector< itkImageUL2_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUL2_push_back(self, x)


    def front(self) -> "std::vector< itkImageUL2_Pointer >::value_type const &":
        """front(vectoritkImageUL2 self) -> std::vector< itkImageUL2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUL2_front(self)


    def back(self) -> "std::vector< itkImageUL2_Pointer >::value_type const &":
        """back(vectoritkImageUL2 self) -> std::vector< itkImageUL2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUL2_back(self)


    def assign(self, n: 'std::vector< itkImageUL2_Pointer >::size_type', x: 'std::vector< itkImageUL2_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::size_type n, std::vector< itkImageUL2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUL2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::size_type new_size)
        resize(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::size_type new_size, std::vector< itkImageUL2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUL2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::iterator pos, std::vector< itkImageUL2_Pointer >::value_type const & x) -> std::vector< itkImageUL2_Pointer >::iterator
        insert(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::iterator pos, std::vector< itkImageUL2_Pointer >::size_type n, std::vector< itkImageUL2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUL2_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageUL2_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageUL2 self, std::vector< itkImageUL2_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageUL2_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageUL2_Pointer >::size_type":
        """capacity(vectoritkImageUL2 self) -> std::vector< itkImageUL2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL2_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUL2
vectoritkImageUL2.iterator = new_instancemethod(_itkImagePython.vectoritkImageUL2_iterator, None, vectoritkImageUL2)
vectoritkImageUL2.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageUL2___nonzero__, None, vectoritkImageUL2)
vectoritkImageUL2.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageUL2___bool__, None, vectoritkImageUL2)
vectoritkImageUL2.__len__ = new_instancemethod(_itkImagePython.vectoritkImageUL2___len__, None, vectoritkImageUL2)
vectoritkImageUL2.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageUL2___getslice__, None, vectoritkImageUL2)
vectoritkImageUL2.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageUL2___setslice__, None, vectoritkImageUL2)
vectoritkImageUL2.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageUL2___delslice__, None, vectoritkImageUL2)
vectoritkImageUL2.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageUL2___delitem__, None, vectoritkImageUL2)
vectoritkImageUL2.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageUL2___getitem__, None, vectoritkImageUL2)
vectoritkImageUL2.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageUL2___setitem__, None, vectoritkImageUL2)
vectoritkImageUL2.pop = new_instancemethod(_itkImagePython.vectoritkImageUL2_pop, None, vectoritkImageUL2)
vectoritkImageUL2.append = new_instancemethod(_itkImagePython.vectoritkImageUL2_append, None, vectoritkImageUL2)
vectoritkImageUL2.empty = new_instancemethod(_itkImagePython.vectoritkImageUL2_empty, None, vectoritkImageUL2)
vectoritkImageUL2.size = new_instancemethod(_itkImagePython.vectoritkImageUL2_size, None, vectoritkImageUL2)
vectoritkImageUL2.swap = new_instancemethod(_itkImagePython.vectoritkImageUL2_swap, None, vectoritkImageUL2)
vectoritkImageUL2.begin = new_instancemethod(_itkImagePython.vectoritkImageUL2_begin, None, vectoritkImageUL2)
vectoritkImageUL2.end = new_instancemethod(_itkImagePython.vectoritkImageUL2_end, None, vectoritkImageUL2)
vectoritkImageUL2.rbegin = new_instancemethod(_itkImagePython.vectoritkImageUL2_rbegin, None, vectoritkImageUL2)
vectoritkImageUL2.rend = new_instancemethod(_itkImagePython.vectoritkImageUL2_rend, None, vectoritkImageUL2)
vectoritkImageUL2.clear = new_instancemethod(_itkImagePython.vectoritkImageUL2_clear, None, vectoritkImageUL2)
vectoritkImageUL2.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageUL2_get_allocator, None, vectoritkImageUL2)
vectoritkImageUL2.pop_back = new_instancemethod(_itkImagePython.vectoritkImageUL2_pop_back, None, vectoritkImageUL2)
vectoritkImageUL2.erase = new_instancemethod(_itkImagePython.vectoritkImageUL2_erase, None, vectoritkImageUL2)
vectoritkImageUL2.push_back = new_instancemethod(_itkImagePython.vectoritkImageUL2_push_back, None, vectoritkImageUL2)
vectoritkImageUL2.front = new_instancemethod(_itkImagePython.vectoritkImageUL2_front, None, vectoritkImageUL2)
vectoritkImageUL2.back = new_instancemethod(_itkImagePython.vectoritkImageUL2_back, None, vectoritkImageUL2)
vectoritkImageUL2.assign = new_instancemethod(_itkImagePython.vectoritkImageUL2_assign, None, vectoritkImageUL2)
vectoritkImageUL2.resize = new_instancemethod(_itkImagePython.vectoritkImageUL2_resize, None, vectoritkImageUL2)
vectoritkImageUL2.insert = new_instancemethod(_itkImagePython.vectoritkImageUL2_insert, None, vectoritkImageUL2)
vectoritkImageUL2.reserve = new_instancemethod(_itkImagePython.vectoritkImageUL2_reserve, None, vectoritkImageUL2)
vectoritkImageUL2.capacity = new_instancemethod(_itkImagePython.vectoritkImageUL2_capacity, None, vectoritkImageUL2)
vectoritkImageUL2_swigregister = _itkImagePython.vectoritkImageUL2_swigregister
vectoritkImageUL2_swigregister(vectoritkImageUL2)

class vectoritkImageULL2(object):
    """Proxy of C++ std::vector<(itkImageULL2_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageULL2 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageULL2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageULL2 self) -> bool"""
        return _itkImagePython.vectoritkImageULL2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageULL2 self) -> bool"""
        return _itkImagePython.vectoritkImageULL2___bool__(self)


    def __len__(self) -> "std::vector< itkImageULL2_Pointer >::size_type":
        """__len__(vectoritkImageULL2 self) -> std::vector< itkImageULL2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL2___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageULL2_Pointer >::difference_type', j: 'std::vector< itkImageULL2_Pointer >::difference_type') -> "std::vector< itkImageULL2_Pointer,std::allocator< itkImageULL2_Pointer > > *":
        """__getslice__(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::difference_type i, std::vector< itkImageULL2_Pointer >::difference_type j) -> vectoritkImageULL2"""
        return _itkImagePython.vectoritkImageULL2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::difference_type i, std::vector< itkImageULL2_Pointer >::difference_type j)
        __setslice__(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::difference_type i, std::vector< itkImageULL2_Pointer >::difference_type j, vectoritkImageULL2 v)
        """
        return _itkImagePython.vectoritkImageULL2___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageULL2_Pointer >::difference_type', j: 'std::vector< itkImageULL2_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::difference_type i, std::vector< itkImageULL2_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageULL2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::difference_type i)
        __delitem__(vectoritkImageULL2 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageULL2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageULL2_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageULL2 self, PySliceObject * slice) -> vectoritkImageULL2
        __getitem__(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::difference_type i) -> std::vector< itkImageULL2_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageULL2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageULL2 self, PySliceObject * slice, vectoritkImageULL2 v)
        __setitem__(vectoritkImageULL2 self, PySliceObject * slice)
        __setitem__(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::difference_type i, std::vector< itkImageULL2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageULL2___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageULL2_Pointer >::value_type":
        """pop(vectoritkImageULL2 self) -> std::vector< itkImageULL2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageULL2_pop(self)


    def append(self, x: 'std::vector< itkImageULL2_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageULL2_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageULL2 self) -> bool"""
        return _itkImagePython.vectoritkImageULL2_empty(self)


    def size(self) -> "std::vector< itkImageULL2_Pointer >::size_type":
        """size(vectoritkImageULL2 self) -> std::vector< itkImageULL2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL2_size(self)


    def swap(self, v: 'vectoritkImageULL2') -> "void":
        """swap(vectoritkImageULL2 self, vectoritkImageULL2 v)"""
        return _itkImagePython.vectoritkImageULL2_swap(self, v)


    def begin(self) -> "std::vector< itkImageULL2_Pointer >::iterator":
        """begin(vectoritkImageULL2 self) -> std::vector< itkImageULL2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageULL2_begin(self)


    def end(self) -> "std::vector< itkImageULL2_Pointer >::iterator":
        """end(vectoritkImageULL2 self) -> std::vector< itkImageULL2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageULL2_end(self)


    def rbegin(self) -> "std::vector< itkImageULL2_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageULL2 self) -> std::vector< itkImageULL2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageULL2_rbegin(self)


    def rend(self) -> "std::vector< itkImageULL2_Pointer >::reverse_iterator":
        """rend(vectoritkImageULL2 self) -> std::vector< itkImageULL2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageULL2_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageULL2 self)"""
        return _itkImagePython.vectoritkImageULL2_clear(self)


    def get_allocator(self) -> "std::vector< itkImageULL2_Pointer >::allocator_type":
        """get_allocator(vectoritkImageULL2 self) -> std::vector< itkImageULL2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageULL2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageULL2 self)"""
        return _itkImagePython.vectoritkImageULL2_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageULL2_Pointer >::iterator":
        """
        erase(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::iterator pos) -> std::vector< itkImageULL2_Pointer >::iterator
        erase(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::iterator first, std::vector< itkImageULL2_Pointer >::iterator last) -> std::vector< itkImageULL2_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageULL2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageULL2_Pointer)> self) -> vectoritkImageULL2
        __init__(std::vector<(itkImageULL2_Pointer)> self, vectoritkImageULL2 arg2) -> vectoritkImageULL2
        __init__(std::vector<(itkImageULL2_Pointer)> self, std::vector< itkImageULL2_Pointer >::size_type size) -> vectoritkImageULL2
        __init__(std::vector<(itkImageULL2_Pointer)> self, std::vector< itkImageULL2_Pointer >::size_type size, std::vector< itkImageULL2_Pointer >::value_type const & value) -> vectoritkImageULL2
        """
        _itkImagePython.vectoritkImageULL2_swiginit(self, _itkImagePython.new_vectoritkImageULL2(*args))

    def push_back(self, x: 'std::vector< itkImageULL2_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageULL2_push_back(self, x)


    def front(self) -> "std::vector< itkImageULL2_Pointer >::value_type const &":
        """front(vectoritkImageULL2 self) -> std::vector< itkImageULL2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageULL2_front(self)


    def back(self) -> "std::vector< itkImageULL2_Pointer >::value_type const &":
        """back(vectoritkImageULL2 self) -> std::vector< itkImageULL2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageULL2_back(self)


    def assign(self, n: 'std::vector< itkImageULL2_Pointer >::size_type', x: 'std::vector< itkImageULL2_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::size_type n, std::vector< itkImageULL2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageULL2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::size_type new_size)
        resize(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::size_type new_size, std::vector< itkImageULL2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageULL2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::iterator pos, std::vector< itkImageULL2_Pointer >::value_type const & x) -> std::vector< itkImageULL2_Pointer >::iterator
        insert(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::iterator pos, std::vector< itkImageULL2_Pointer >::size_type n, std::vector< itkImageULL2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageULL2_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageULL2_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageULL2 self, std::vector< itkImageULL2_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageULL2_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageULL2_Pointer >::size_type":
        """capacity(vectoritkImageULL2 self) -> std::vector< itkImageULL2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL2_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageULL2
vectoritkImageULL2.iterator = new_instancemethod(_itkImagePython.vectoritkImageULL2_iterator, None, vectoritkImageULL2)
vectoritkImageULL2.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageULL2___nonzero__, None, vectoritkImageULL2)
vectoritkImageULL2.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageULL2___bool__, None, vectoritkImageULL2)
vectoritkImageULL2.__len__ = new_instancemethod(_itkImagePython.vectoritkImageULL2___len__, None, vectoritkImageULL2)
vectoritkImageULL2.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageULL2___getslice__, None, vectoritkImageULL2)
vectoritkImageULL2.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageULL2___setslice__, None, vectoritkImageULL2)
vectoritkImageULL2.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageULL2___delslice__, None, vectoritkImageULL2)
vectoritkImageULL2.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageULL2___delitem__, None, vectoritkImageULL2)
vectoritkImageULL2.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageULL2___getitem__, None, vectoritkImageULL2)
vectoritkImageULL2.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageULL2___setitem__, None, vectoritkImageULL2)
vectoritkImageULL2.pop = new_instancemethod(_itkImagePython.vectoritkImageULL2_pop, None, vectoritkImageULL2)
vectoritkImageULL2.append = new_instancemethod(_itkImagePython.vectoritkImageULL2_append, None, vectoritkImageULL2)
vectoritkImageULL2.empty = new_instancemethod(_itkImagePython.vectoritkImageULL2_empty, None, vectoritkImageULL2)
vectoritkImageULL2.size = new_instancemethod(_itkImagePython.vectoritkImageULL2_size, None, vectoritkImageULL2)
vectoritkImageULL2.swap = new_instancemethod(_itkImagePython.vectoritkImageULL2_swap, None, vectoritkImageULL2)
vectoritkImageULL2.begin = new_instancemethod(_itkImagePython.vectoritkImageULL2_begin, None, vectoritkImageULL2)
vectoritkImageULL2.end = new_instancemethod(_itkImagePython.vectoritkImageULL2_end, None, vectoritkImageULL2)
vectoritkImageULL2.rbegin = new_instancemethod(_itkImagePython.vectoritkImageULL2_rbegin, None, vectoritkImageULL2)
vectoritkImageULL2.rend = new_instancemethod(_itkImagePython.vectoritkImageULL2_rend, None, vectoritkImageULL2)
vectoritkImageULL2.clear = new_instancemethod(_itkImagePython.vectoritkImageULL2_clear, None, vectoritkImageULL2)
vectoritkImageULL2.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageULL2_get_allocator, None, vectoritkImageULL2)
vectoritkImageULL2.pop_back = new_instancemethod(_itkImagePython.vectoritkImageULL2_pop_back, None, vectoritkImageULL2)
vectoritkImageULL2.erase = new_instancemethod(_itkImagePython.vectoritkImageULL2_erase, None, vectoritkImageULL2)
vectoritkImageULL2.push_back = new_instancemethod(_itkImagePython.vectoritkImageULL2_push_back, None, vectoritkImageULL2)
vectoritkImageULL2.front = new_instancemethod(_itkImagePython.vectoritkImageULL2_front, None, vectoritkImageULL2)
vectoritkImageULL2.back = new_instancemethod(_itkImagePython.vectoritkImageULL2_back, None, vectoritkImageULL2)
vectoritkImageULL2.assign = new_instancemethod(_itkImagePython.vectoritkImageULL2_assign, None, vectoritkImageULL2)
vectoritkImageULL2.resize = new_instancemethod(_itkImagePython.vectoritkImageULL2_resize, None, vectoritkImageULL2)
vectoritkImageULL2.insert = new_instancemethod(_itkImagePython.vectoritkImageULL2_insert, None, vectoritkImageULL2)
vectoritkImageULL2.reserve = new_instancemethod(_itkImagePython.vectoritkImageULL2_reserve, None, vectoritkImageULL2)
vectoritkImageULL2.capacity = new_instancemethod(_itkImagePython.vectoritkImageULL2_capacity, None, vectoritkImageULL2)
vectoritkImageULL2_swigregister = _itkImagePython.vectoritkImageULL2_swigregister
vectoritkImageULL2_swigregister(vectoritkImageULL2)

class vectoritkImageB2(object):
    """Proxy of C++ std::vector<(itkImageB2_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageB2 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageB2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageB2 self) -> bool"""
        return _itkImagePython.vectoritkImageB2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageB2 self) -> bool"""
        return _itkImagePython.vectoritkImageB2___bool__(self)


    def __len__(self) -> "std::vector< itkImageB2_Pointer >::size_type":
        """__len__(vectoritkImageB2 self) -> std::vector< itkImageB2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB2___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageB2_Pointer >::difference_type', j: 'std::vector< itkImageB2_Pointer >::difference_type') -> "std::vector< itkImageB2_Pointer,std::allocator< itkImageB2_Pointer > > *":
        """__getslice__(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::difference_type i, std::vector< itkImageB2_Pointer >::difference_type j) -> vectoritkImageB2"""
        return _itkImagePython.vectoritkImageB2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::difference_type i, std::vector< itkImageB2_Pointer >::difference_type j)
        __setslice__(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::difference_type i, std::vector< itkImageB2_Pointer >::difference_type j, vectoritkImageB2 v)
        """
        return _itkImagePython.vectoritkImageB2___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageB2_Pointer >::difference_type', j: 'std::vector< itkImageB2_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::difference_type i, std::vector< itkImageB2_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageB2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::difference_type i)
        __delitem__(vectoritkImageB2 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageB2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageB2_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageB2 self, PySliceObject * slice) -> vectoritkImageB2
        __getitem__(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::difference_type i) -> std::vector< itkImageB2_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageB2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageB2 self, PySliceObject * slice, vectoritkImageB2 v)
        __setitem__(vectoritkImageB2 self, PySliceObject * slice)
        __setitem__(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::difference_type i, std::vector< itkImageB2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageB2___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageB2_Pointer >::value_type":
        """pop(vectoritkImageB2 self) -> std::vector< itkImageB2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageB2_pop(self)


    def append(self, x: 'std::vector< itkImageB2_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageB2_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageB2 self) -> bool"""
        return _itkImagePython.vectoritkImageB2_empty(self)


    def size(self) -> "std::vector< itkImageB2_Pointer >::size_type":
        """size(vectoritkImageB2 self) -> std::vector< itkImageB2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB2_size(self)


    def swap(self, v: 'vectoritkImageB2') -> "void":
        """swap(vectoritkImageB2 self, vectoritkImageB2 v)"""
        return _itkImagePython.vectoritkImageB2_swap(self, v)


    def begin(self) -> "std::vector< itkImageB2_Pointer >::iterator":
        """begin(vectoritkImageB2 self) -> std::vector< itkImageB2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageB2_begin(self)


    def end(self) -> "std::vector< itkImageB2_Pointer >::iterator":
        """end(vectoritkImageB2 self) -> std::vector< itkImageB2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageB2_end(self)


    def rbegin(self) -> "std::vector< itkImageB2_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageB2 self) -> std::vector< itkImageB2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageB2_rbegin(self)


    def rend(self) -> "std::vector< itkImageB2_Pointer >::reverse_iterator":
        """rend(vectoritkImageB2 self) -> std::vector< itkImageB2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageB2_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageB2 self)"""
        return _itkImagePython.vectoritkImageB2_clear(self)


    def get_allocator(self) -> "std::vector< itkImageB2_Pointer >::allocator_type":
        """get_allocator(vectoritkImageB2 self) -> std::vector< itkImageB2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageB2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageB2 self)"""
        return _itkImagePython.vectoritkImageB2_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageB2_Pointer >::iterator":
        """
        erase(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::iterator pos) -> std::vector< itkImageB2_Pointer >::iterator
        erase(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::iterator first, std::vector< itkImageB2_Pointer >::iterator last) -> std::vector< itkImageB2_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageB2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageB2_Pointer)> self) -> vectoritkImageB2
        __init__(std::vector<(itkImageB2_Pointer)> self, vectoritkImageB2 arg2) -> vectoritkImageB2
        __init__(std::vector<(itkImageB2_Pointer)> self, std::vector< itkImageB2_Pointer >::size_type size) -> vectoritkImageB2
        __init__(std::vector<(itkImageB2_Pointer)> self, std::vector< itkImageB2_Pointer >::size_type size, std::vector< itkImageB2_Pointer >::value_type const & value) -> vectoritkImageB2
        """
        _itkImagePython.vectoritkImageB2_swiginit(self, _itkImagePython.new_vectoritkImageB2(*args))

    def push_back(self, x: 'std::vector< itkImageB2_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageB2_push_back(self, x)


    def front(self) -> "std::vector< itkImageB2_Pointer >::value_type const &":
        """front(vectoritkImageB2 self) -> std::vector< itkImageB2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageB2_front(self)


    def back(self) -> "std::vector< itkImageB2_Pointer >::value_type const &":
        """back(vectoritkImageB2 self) -> std::vector< itkImageB2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageB2_back(self)


    def assign(self, n: 'std::vector< itkImageB2_Pointer >::size_type', x: 'std::vector< itkImageB2_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::size_type n, std::vector< itkImageB2_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageB2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::size_type new_size)
        resize(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::size_type new_size, std::vector< itkImageB2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageB2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::iterator pos, std::vector< itkImageB2_Pointer >::value_type const & x) -> std::vector< itkImageB2_Pointer >::iterator
        insert(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::iterator pos, std::vector< itkImageB2_Pointer >::size_type n, std::vector< itkImageB2_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageB2_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageB2_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageB2 self, std::vector< itkImageB2_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageB2_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageB2_Pointer >::size_type":
        """capacity(vectoritkImageB2 self) -> std::vector< itkImageB2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB2_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageB2
vectoritkImageB2.iterator = new_instancemethod(_itkImagePython.vectoritkImageB2_iterator, None, vectoritkImageB2)
vectoritkImageB2.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageB2___nonzero__, None, vectoritkImageB2)
vectoritkImageB2.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageB2___bool__, None, vectoritkImageB2)
vectoritkImageB2.__len__ = new_instancemethod(_itkImagePython.vectoritkImageB2___len__, None, vectoritkImageB2)
vectoritkImageB2.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageB2___getslice__, None, vectoritkImageB2)
vectoritkImageB2.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageB2___setslice__, None, vectoritkImageB2)
vectoritkImageB2.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageB2___delslice__, None, vectoritkImageB2)
vectoritkImageB2.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageB2___delitem__, None, vectoritkImageB2)
vectoritkImageB2.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageB2___getitem__, None, vectoritkImageB2)
vectoritkImageB2.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageB2___setitem__, None, vectoritkImageB2)
vectoritkImageB2.pop = new_instancemethod(_itkImagePython.vectoritkImageB2_pop, None, vectoritkImageB2)
vectoritkImageB2.append = new_instancemethod(_itkImagePython.vectoritkImageB2_append, None, vectoritkImageB2)
vectoritkImageB2.empty = new_instancemethod(_itkImagePython.vectoritkImageB2_empty, None, vectoritkImageB2)
vectoritkImageB2.size = new_instancemethod(_itkImagePython.vectoritkImageB2_size, None, vectoritkImageB2)
vectoritkImageB2.swap = new_instancemethod(_itkImagePython.vectoritkImageB2_swap, None, vectoritkImageB2)
vectoritkImageB2.begin = new_instancemethod(_itkImagePython.vectoritkImageB2_begin, None, vectoritkImageB2)
vectoritkImageB2.end = new_instancemethod(_itkImagePython.vectoritkImageB2_end, None, vectoritkImageB2)
vectoritkImageB2.rbegin = new_instancemethod(_itkImagePython.vectoritkImageB2_rbegin, None, vectoritkImageB2)
vectoritkImageB2.rend = new_instancemethod(_itkImagePython.vectoritkImageB2_rend, None, vectoritkImageB2)
vectoritkImageB2.clear = new_instancemethod(_itkImagePython.vectoritkImageB2_clear, None, vectoritkImageB2)
vectoritkImageB2.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageB2_get_allocator, None, vectoritkImageB2)
vectoritkImageB2.pop_back = new_instancemethod(_itkImagePython.vectoritkImageB2_pop_back, None, vectoritkImageB2)
vectoritkImageB2.erase = new_instancemethod(_itkImagePython.vectoritkImageB2_erase, None, vectoritkImageB2)
vectoritkImageB2.push_back = new_instancemethod(_itkImagePython.vectoritkImageB2_push_back, None, vectoritkImageB2)
vectoritkImageB2.front = new_instancemethod(_itkImagePython.vectoritkImageB2_front, None, vectoritkImageB2)
vectoritkImageB2.back = new_instancemethod(_itkImagePython.vectoritkImageB2_back, None, vectoritkImageB2)
vectoritkImageB2.assign = new_instancemethod(_itkImagePython.vectoritkImageB2_assign, None, vectoritkImageB2)
vectoritkImageB2.resize = new_instancemethod(_itkImagePython.vectoritkImageB2_resize, None, vectoritkImageB2)
vectoritkImageB2.insert = new_instancemethod(_itkImagePython.vectoritkImageB2_insert, None, vectoritkImageB2)
vectoritkImageB2.reserve = new_instancemethod(_itkImagePython.vectoritkImageB2_reserve, None, vectoritkImageB2)
vectoritkImageB2.capacity = new_instancemethod(_itkImagePython.vectoritkImageB2_capacity, None, vectoritkImageB2)
vectoritkImageB2_swigregister = _itkImagePython.vectoritkImageB2_swigregister
vectoritkImageB2_swigregister(vectoritkImageB2)

class vectoritkImageFAF22(object):
    """Proxy of C++ std::vector<(itkImageFAF22_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageFAF22 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageFAF22_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageFAF22 self) -> bool"""
        return _itkImagePython.vectoritkImageFAF22___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageFAF22 self) -> bool"""
        return _itkImagePython.vectoritkImageFAF22___bool__(self)


    def __len__(self) -> "std::vector< itkImageFAF22_Pointer >::size_type":
        """__len__(vectoritkImageFAF22 self) -> std::vector< itkImageFAF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF22___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageFAF22_Pointer >::difference_type', j: 'std::vector< itkImageFAF22_Pointer >::difference_type') -> "std::vector< itkImageFAF22_Pointer,std::allocator< itkImageFAF22_Pointer > > *":
        """__getslice__(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::difference_type i, std::vector< itkImageFAF22_Pointer >::difference_type j) -> vectoritkImageFAF22"""
        return _itkImagePython.vectoritkImageFAF22___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::difference_type i, std::vector< itkImageFAF22_Pointer >::difference_type j)
        __setslice__(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::difference_type i, std::vector< itkImageFAF22_Pointer >::difference_type j, vectoritkImageFAF22 v)
        """
        return _itkImagePython.vectoritkImageFAF22___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageFAF22_Pointer >::difference_type', j: 'std::vector< itkImageFAF22_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::difference_type i, std::vector< itkImageFAF22_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageFAF22___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::difference_type i)
        __delitem__(vectoritkImageFAF22 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageFAF22___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageFAF22_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageFAF22 self, PySliceObject * slice) -> vectoritkImageFAF22
        __getitem__(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::difference_type i) -> std::vector< itkImageFAF22_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageFAF22___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageFAF22 self, PySliceObject * slice, vectoritkImageFAF22 v)
        __setitem__(vectoritkImageFAF22 self, PySliceObject * slice)
        __setitem__(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::difference_type i, std::vector< itkImageFAF22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageFAF22___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageFAF22_Pointer >::value_type":
        """pop(vectoritkImageFAF22 self) -> std::vector< itkImageFAF22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageFAF22_pop(self)


    def append(self, x: 'std::vector< itkImageFAF22_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageFAF22_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageFAF22 self) -> bool"""
        return _itkImagePython.vectoritkImageFAF22_empty(self)


    def size(self) -> "std::vector< itkImageFAF22_Pointer >::size_type":
        """size(vectoritkImageFAF22 self) -> std::vector< itkImageFAF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF22_size(self)


    def swap(self, v: 'vectoritkImageFAF22') -> "void":
        """swap(vectoritkImageFAF22 self, vectoritkImageFAF22 v)"""
        return _itkImagePython.vectoritkImageFAF22_swap(self, v)


    def begin(self) -> "std::vector< itkImageFAF22_Pointer >::iterator":
        """begin(vectoritkImageFAF22 self) -> std::vector< itkImageFAF22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAF22_begin(self)


    def end(self) -> "std::vector< itkImageFAF22_Pointer >::iterator":
        """end(vectoritkImageFAF22 self) -> std::vector< itkImageFAF22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAF22_end(self)


    def rbegin(self) -> "std::vector< itkImageFAF22_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageFAF22 self) -> std::vector< itkImageFAF22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAF22_rbegin(self)


    def rend(self) -> "std::vector< itkImageFAF22_Pointer >::reverse_iterator":
        """rend(vectoritkImageFAF22 self) -> std::vector< itkImageFAF22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAF22_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageFAF22 self)"""
        return _itkImagePython.vectoritkImageFAF22_clear(self)


    def get_allocator(self) -> "std::vector< itkImageFAF22_Pointer >::allocator_type":
        """get_allocator(vectoritkImageFAF22 self) -> std::vector< itkImageFAF22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageFAF22_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageFAF22 self)"""
        return _itkImagePython.vectoritkImageFAF22_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageFAF22_Pointer >::iterator":
        """
        erase(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::iterator pos) -> std::vector< itkImageFAF22_Pointer >::iterator
        erase(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::iterator first, std::vector< itkImageFAF22_Pointer >::iterator last) -> std::vector< itkImageFAF22_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageFAF22_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageFAF22_Pointer)> self) -> vectoritkImageFAF22
        __init__(std::vector<(itkImageFAF22_Pointer)> self, vectoritkImageFAF22 arg2) -> vectoritkImageFAF22
        __init__(std::vector<(itkImageFAF22_Pointer)> self, std::vector< itkImageFAF22_Pointer >::size_type size) -> vectoritkImageFAF22
        __init__(std::vector<(itkImageFAF22_Pointer)> self, std::vector< itkImageFAF22_Pointer >::size_type size, std::vector< itkImageFAF22_Pointer >::value_type const & value) -> vectoritkImageFAF22
        """
        _itkImagePython.vectoritkImageFAF22_swiginit(self, _itkImagePython.new_vectoritkImageFAF22(*args))

    def push_back(self, x: 'std::vector< itkImageFAF22_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageFAF22_push_back(self, x)


    def front(self) -> "std::vector< itkImageFAF22_Pointer >::value_type const &":
        """front(vectoritkImageFAF22 self) -> std::vector< itkImageFAF22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAF22_front(self)


    def back(self) -> "std::vector< itkImageFAF22_Pointer >::value_type const &":
        """back(vectoritkImageFAF22 self) -> std::vector< itkImageFAF22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAF22_back(self)


    def assign(self, n: 'std::vector< itkImageFAF22_Pointer >::size_type', x: 'std::vector< itkImageFAF22_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::size_type n, std::vector< itkImageFAF22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageFAF22_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::size_type new_size)
        resize(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::size_type new_size, std::vector< itkImageFAF22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageFAF22_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::iterator pos, std::vector< itkImageFAF22_Pointer >::value_type const & x) -> std::vector< itkImageFAF22_Pointer >::iterator
        insert(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::iterator pos, std::vector< itkImageFAF22_Pointer >::size_type n, std::vector< itkImageFAF22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageFAF22_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageFAF22_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageFAF22 self, std::vector< itkImageFAF22_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageFAF22_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageFAF22_Pointer >::size_type":
        """capacity(vectoritkImageFAF22 self) -> std::vector< itkImageFAF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF22_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageFAF22
vectoritkImageFAF22.iterator = new_instancemethod(_itkImagePython.vectoritkImageFAF22_iterator, None, vectoritkImageFAF22)
vectoritkImageFAF22.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageFAF22___nonzero__, None, vectoritkImageFAF22)
vectoritkImageFAF22.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageFAF22___bool__, None, vectoritkImageFAF22)
vectoritkImageFAF22.__len__ = new_instancemethod(_itkImagePython.vectoritkImageFAF22___len__, None, vectoritkImageFAF22)
vectoritkImageFAF22.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageFAF22___getslice__, None, vectoritkImageFAF22)
vectoritkImageFAF22.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageFAF22___setslice__, None, vectoritkImageFAF22)
vectoritkImageFAF22.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageFAF22___delslice__, None, vectoritkImageFAF22)
vectoritkImageFAF22.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageFAF22___delitem__, None, vectoritkImageFAF22)
vectoritkImageFAF22.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageFAF22___getitem__, None, vectoritkImageFAF22)
vectoritkImageFAF22.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageFAF22___setitem__, None, vectoritkImageFAF22)
vectoritkImageFAF22.pop = new_instancemethod(_itkImagePython.vectoritkImageFAF22_pop, None, vectoritkImageFAF22)
vectoritkImageFAF22.append = new_instancemethod(_itkImagePython.vectoritkImageFAF22_append, None, vectoritkImageFAF22)
vectoritkImageFAF22.empty = new_instancemethod(_itkImagePython.vectoritkImageFAF22_empty, None, vectoritkImageFAF22)
vectoritkImageFAF22.size = new_instancemethod(_itkImagePython.vectoritkImageFAF22_size, None, vectoritkImageFAF22)
vectoritkImageFAF22.swap = new_instancemethod(_itkImagePython.vectoritkImageFAF22_swap, None, vectoritkImageFAF22)
vectoritkImageFAF22.begin = new_instancemethod(_itkImagePython.vectoritkImageFAF22_begin, None, vectoritkImageFAF22)
vectoritkImageFAF22.end = new_instancemethod(_itkImagePython.vectoritkImageFAF22_end, None, vectoritkImageFAF22)
vectoritkImageFAF22.rbegin = new_instancemethod(_itkImagePython.vectoritkImageFAF22_rbegin, None, vectoritkImageFAF22)
vectoritkImageFAF22.rend = new_instancemethod(_itkImagePython.vectoritkImageFAF22_rend, None, vectoritkImageFAF22)
vectoritkImageFAF22.clear = new_instancemethod(_itkImagePython.vectoritkImageFAF22_clear, None, vectoritkImageFAF22)
vectoritkImageFAF22.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageFAF22_get_allocator, None, vectoritkImageFAF22)
vectoritkImageFAF22.pop_back = new_instancemethod(_itkImagePython.vectoritkImageFAF22_pop_back, None, vectoritkImageFAF22)
vectoritkImageFAF22.erase = new_instancemethod(_itkImagePython.vectoritkImageFAF22_erase, None, vectoritkImageFAF22)
vectoritkImageFAF22.push_back = new_instancemethod(_itkImagePython.vectoritkImageFAF22_push_back, None, vectoritkImageFAF22)
vectoritkImageFAF22.front = new_instancemethod(_itkImagePython.vectoritkImageFAF22_front, None, vectoritkImageFAF22)
vectoritkImageFAF22.back = new_instancemethod(_itkImagePython.vectoritkImageFAF22_back, None, vectoritkImageFAF22)
vectoritkImageFAF22.assign = new_instancemethod(_itkImagePython.vectoritkImageFAF22_assign, None, vectoritkImageFAF22)
vectoritkImageFAF22.resize = new_instancemethod(_itkImagePython.vectoritkImageFAF22_resize, None, vectoritkImageFAF22)
vectoritkImageFAF22.insert = new_instancemethod(_itkImagePython.vectoritkImageFAF22_insert, None, vectoritkImageFAF22)
vectoritkImageFAF22.reserve = new_instancemethod(_itkImagePython.vectoritkImageFAF22_reserve, None, vectoritkImageFAF22)
vectoritkImageFAF22.capacity = new_instancemethod(_itkImagePython.vectoritkImageFAF22_capacity, None, vectoritkImageFAF22)
vectoritkImageFAF22_swigregister = _itkImagePython.vectoritkImageFAF22_swigregister
vectoritkImageFAF22_swigregister(vectoritkImageFAF22)

class vectoritkImageO22(object):
    """Proxy of C++ std::vector<(itkImageO22_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageO22 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageO22_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageO22 self) -> bool"""
        return _itkImagePython.vectoritkImageO22___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageO22 self) -> bool"""
        return _itkImagePython.vectoritkImageO22___bool__(self)


    def __len__(self) -> "std::vector< itkImageO22_Pointer >::size_type":
        """__len__(vectoritkImageO22 self) -> std::vector< itkImageO22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO22___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageO22_Pointer >::difference_type', j: 'std::vector< itkImageO22_Pointer >::difference_type') -> "std::vector< itkImageO22_Pointer,std::allocator< itkImageO22_Pointer > > *":
        """__getslice__(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::difference_type i, std::vector< itkImageO22_Pointer >::difference_type j) -> vectoritkImageO22"""
        return _itkImagePython.vectoritkImageO22___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::difference_type i, std::vector< itkImageO22_Pointer >::difference_type j)
        __setslice__(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::difference_type i, std::vector< itkImageO22_Pointer >::difference_type j, vectoritkImageO22 v)
        """
        return _itkImagePython.vectoritkImageO22___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageO22_Pointer >::difference_type', j: 'std::vector< itkImageO22_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::difference_type i, std::vector< itkImageO22_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageO22___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::difference_type i)
        __delitem__(vectoritkImageO22 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageO22___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageO22_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageO22 self, PySliceObject * slice) -> vectoritkImageO22
        __getitem__(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::difference_type i) -> std::vector< itkImageO22_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageO22___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageO22 self, PySliceObject * slice, vectoritkImageO22 v)
        __setitem__(vectoritkImageO22 self, PySliceObject * slice)
        __setitem__(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::difference_type i, std::vector< itkImageO22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageO22___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageO22_Pointer >::value_type":
        """pop(vectoritkImageO22 self) -> std::vector< itkImageO22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageO22_pop(self)


    def append(self, x: 'std::vector< itkImageO22_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageO22_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageO22 self) -> bool"""
        return _itkImagePython.vectoritkImageO22_empty(self)


    def size(self) -> "std::vector< itkImageO22_Pointer >::size_type":
        """size(vectoritkImageO22 self) -> std::vector< itkImageO22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO22_size(self)


    def swap(self, v: 'vectoritkImageO22') -> "void":
        """swap(vectoritkImageO22 self, vectoritkImageO22 v)"""
        return _itkImagePython.vectoritkImageO22_swap(self, v)


    def begin(self) -> "std::vector< itkImageO22_Pointer >::iterator":
        """begin(vectoritkImageO22 self) -> std::vector< itkImageO22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageO22_begin(self)


    def end(self) -> "std::vector< itkImageO22_Pointer >::iterator":
        """end(vectoritkImageO22 self) -> std::vector< itkImageO22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageO22_end(self)


    def rbegin(self) -> "std::vector< itkImageO22_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageO22 self) -> std::vector< itkImageO22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageO22_rbegin(self)


    def rend(self) -> "std::vector< itkImageO22_Pointer >::reverse_iterator":
        """rend(vectoritkImageO22 self) -> std::vector< itkImageO22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageO22_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageO22 self)"""
        return _itkImagePython.vectoritkImageO22_clear(self)


    def get_allocator(self) -> "std::vector< itkImageO22_Pointer >::allocator_type":
        """get_allocator(vectoritkImageO22 self) -> std::vector< itkImageO22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageO22_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageO22 self)"""
        return _itkImagePython.vectoritkImageO22_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageO22_Pointer >::iterator":
        """
        erase(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::iterator pos) -> std::vector< itkImageO22_Pointer >::iterator
        erase(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::iterator first, std::vector< itkImageO22_Pointer >::iterator last) -> std::vector< itkImageO22_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageO22_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageO22_Pointer)> self) -> vectoritkImageO22
        __init__(std::vector<(itkImageO22_Pointer)> self, vectoritkImageO22 arg2) -> vectoritkImageO22
        __init__(std::vector<(itkImageO22_Pointer)> self, std::vector< itkImageO22_Pointer >::size_type size) -> vectoritkImageO22
        __init__(std::vector<(itkImageO22_Pointer)> self, std::vector< itkImageO22_Pointer >::size_type size, std::vector< itkImageO22_Pointer >::value_type const & value) -> vectoritkImageO22
        """
        _itkImagePython.vectoritkImageO22_swiginit(self, _itkImagePython.new_vectoritkImageO22(*args))

    def push_back(self, x: 'std::vector< itkImageO22_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageO22_push_back(self, x)


    def front(self) -> "std::vector< itkImageO22_Pointer >::value_type const &":
        """front(vectoritkImageO22 self) -> std::vector< itkImageO22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageO22_front(self)


    def back(self) -> "std::vector< itkImageO22_Pointer >::value_type const &":
        """back(vectoritkImageO22 self) -> std::vector< itkImageO22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageO22_back(self)


    def assign(self, n: 'std::vector< itkImageO22_Pointer >::size_type', x: 'std::vector< itkImageO22_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::size_type n, std::vector< itkImageO22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageO22_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::size_type new_size)
        resize(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::size_type new_size, std::vector< itkImageO22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageO22_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::iterator pos, std::vector< itkImageO22_Pointer >::value_type const & x) -> std::vector< itkImageO22_Pointer >::iterator
        insert(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::iterator pos, std::vector< itkImageO22_Pointer >::size_type n, std::vector< itkImageO22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageO22_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageO22_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageO22 self, std::vector< itkImageO22_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageO22_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageO22_Pointer >::size_type":
        """capacity(vectoritkImageO22 self) -> std::vector< itkImageO22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO22_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageO22
vectoritkImageO22.iterator = new_instancemethod(_itkImagePython.vectoritkImageO22_iterator, None, vectoritkImageO22)
vectoritkImageO22.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageO22___nonzero__, None, vectoritkImageO22)
vectoritkImageO22.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageO22___bool__, None, vectoritkImageO22)
vectoritkImageO22.__len__ = new_instancemethod(_itkImagePython.vectoritkImageO22___len__, None, vectoritkImageO22)
vectoritkImageO22.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageO22___getslice__, None, vectoritkImageO22)
vectoritkImageO22.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageO22___setslice__, None, vectoritkImageO22)
vectoritkImageO22.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageO22___delslice__, None, vectoritkImageO22)
vectoritkImageO22.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageO22___delitem__, None, vectoritkImageO22)
vectoritkImageO22.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageO22___getitem__, None, vectoritkImageO22)
vectoritkImageO22.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageO22___setitem__, None, vectoritkImageO22)
vectoritkImageO22.pop = new_instancemethod(_itkImagePython.vectoritkImageO22_pop, None, vectoritkImageO22)
vectoritkImageO22.append = new_instancemethod(_itkImagePython.vectoritkImageO22_append, None, vectoritkImageO22)
vectoritkImageO22.empty = new_instancemethod(_itkImagePython.vectoritkImageO22_empty, None, vectoritkImageO22)
vectoritkImageO22.size = new_instancemethod(_itkImagePython.vectoritkImageO22_size, None, vectoritkImageO22)
vectoritkImageO22.swap = new_instancemethod(_itkImagePython.vectoritkImageO22_swap, None, vectoritkImageO22)
vectoritkImageO22.begin = new_instancemethod(_itkImagePython.vectoritkImageO22_begin, None, vectoritkImageO22)
vectoritkImageO22.end = new_instancemethod(_itkImagePython.vectoritkImageO22_end, None, vectoritkImageO22)
vectoritkImageO22.rbegin = new_instancemethod(_itkImagePython.vectoritkImageO22_rbegin, None, vectoritkImageO22)
vectoritkImageO22.rend = new_instancemethod(_itkImagePython.vectoritkImageO22_rend, None, vectoritkImageO22)
vectoritkImageO22.clear = new_instancemethod(_itkImagePython.vectoritkImageO22_clear, None, vectoritkImageO22)
vectoritkImageO22.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageO22_get_allocator, None, vectoritkImageO22)
vectoritkImageO22.pop_back = new_instancemethod(_itkImagePython.vectoritkImageO22_pop_back, None, vectoritkImageO22)
vectoritkImageO22.erase = new_instancemethod(_itkImagePython.vectoritkImageO22_erase, None, vectoritkImageO22)
vectoritkImageO22.push_back = new_instancemethod(_itkImagePython.vectoritkImageO22_push_back, None, vectoritkImageO22)
vectoritkImageO22.front = new_instancemethod(_itkImagePython.vectoritkImageO22_front, None, vectoritkImageO22)
vectoritkImageO22.back = new_instancemethod(_itkImagePython.vectoritkImageO22_back, None, vectoritkImageO22)
vectoritkImageO22.assign = new_instancemethod(_itkImagePython.vectoritkImageO22_assign, None, vectoritkImageO22)
vectoritkImageO22.resize = new_instancemethod(_itkImagePython.vectoritkImageO22_resize, None, vectoritkImageO22)
vectoritkImageO22.insert = new_instancemethod(_itkImagePython.vectoritkImageO22_insert, None, vectoritkImageO22)
vectoritkImageO22.reserve = new_instancemethod(_itkImagePython.vectoritkImageO22_reserve, None, vectoritkImageO22)
vectoritkImageO22.capacity = new_instancemethod(_itkImagePython.vectoritkImageO22_capacity, None, vectoritkImageO22)
vectoritkImageO22_swigregister = _itkImagePython.vectoritkImageO22_swigregister
vectoritkImageO22_swigregister(vectoritkImageO22)

class vectoritkImageSSRTD22(object):
    """Proxy of C++ std::vector<(itkImageSSRTD22_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageSSRTD22 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSSRTD22_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageSSRTD22 self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD22___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageSSRTD22 self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD22___bool__(self)


    def __len__(self) -> "std::vector< itkImageSSRTD22_Pointer >::size_type":
        """__len__(vectoritkImageSSRTD22 self) -> std::vector< itkImageSSRTD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD22___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageSSRTD22_Pointer >::difference_type', j: 'std::vector< itkImageSSRTD22_Pointer >::difference_type') -> "std::vector< itkImageSSRTD22_Pointer,std::allocator< itkImageSSRTD22_Pointer > > *":
        """__getslice__(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::difference_type i, std::vector< itkImageSSRTD22_Pointer >::difference_type j) -> vectoritkImageSSRTD22"""
        return _itkImagePython.vectoritkImageSSRTD22___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::difference_type i, std::vector< itkImageSSRTD22_Pointer >::difference_type j)
        __setslice__(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::difference_type i, std::vector< itkImageSSRTD22_Pointer >::difference_type j, vectoritkImageSSRTD22 v)
        """
        return _itkImagePython.vectoritkImageSSRTD22___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageSSRTD22_Pointer >::difference_type', j: 'std::vector< itkImageSSRTD22_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::difference_type i, std::vector< itkImageSSRTD22_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageSSRTD22___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::difference_type i)
        __delitem__(vectoritkImageSSRTD22 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageSSRTD22___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageSSRTD22_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageSSRTD22 self, PySliceObject * slice) -> vectoritkImageSSRTD22
        __getitem__(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::difference_type i) -> std::vector< itkImageSSRTD22_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageSSRTD22___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageSSRTD22 self, PySliceObject * slice, vectoritkImageSSRTD22 v)
        __setitem__(vectoritkImageSSRTD22 self, PySliceObject * slice)
        __setitem__(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::difference_type i, std::vector< itkImageSSRTD22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageSSRTD22___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageSSRTD22_Pointer >::value_type":
        """pop(vectoritkImageSSRTD22 self) -> std::vector< itkImageSSRTD22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSSRTD22_pop(self)


    def append(self, x: 'std::vector< itkImageSSRTD22_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageSSRTD22_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageSSRTD22 self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD22_empty(self)


    def size(self) -> "std::vector< itkImageSSRTD22_Pointer >::size_type":
        """size(vectoritkImageSSRTD22 self) -> std::vector< itkImageSSRTD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD22_size(self)


    def swap(self, v: 'vectoritkImageSSRTD22') -> "void":
        """swap(vectoritkImageSSRTD22 self, vectoritkImageSSRTD22 v)"""
        return _itkImagePython.vectoritkImageSSRTD22_swap(self, v)


    def begin(self) -> "std::vector< itkImageSSRTD22_Pointer >::iterator":
        """begin(vectoritkImageSSRTD22 self) -> std::vector< itkImageSSRTD22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTD22_begin(self)


    def end(self) -> "std::vector< itkImageSSRTD22_Pointer >::iterator":
        """end(vectoritkImageSSRTD22 self) -> std::vector< itkImageSSRTD22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTD22_end(self)


    def rbegin(self) -> "std::vector< itkImageSSRTD22_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageSSRTD22 self) -> std::vector< itkImageSSRTD22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTD22_rbegin(self)


    def rend(self) -> "std::vector< itkImageSSRTD22_Pointer >::reverse_iterator":
        """rend(vectoritkImageSSRTD22 self) -> std::vector< itkImageSSRTD22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTD22_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageSSRTD22 self)"""
        return _itkImagePython.vectoritkImageSSRTD22_clear(self)


    def get_allocator(self) -> "std::vector< itkImageSSRTD22_Pointer >::allocator_type":
        """get_allocator(vectoritkImageSSRTD22 self) -> std::vector< itkImageSSRTD22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSSRTD22_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageSSRTD22 self)"""
        return _itkImagePython.vectoritkImageSSRTD22_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageSSRTD22_Pointer >::iterator":
        """
        erase(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::iterator pos) -> std::vector< itkImageSSRTD22_Pointer >::iterator
        erase(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::iterator first, std::vector< itkImageSSRTD22_Pointer >::iterator last) -> std::vector< itkImageSSRTD22_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageSSRTD22_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageSSRTD22_Pointer)> self) -> vectoritkImageSSRTD22
        __init__(std::vector<(itkImageSSRTD22_Pointer)> self, vectoritkImageSSRTD22 arg2) -> vectoritkImageSSRTD22
        __init__(std::vector<(itkImageSSRTD22_Pointer)> self, std::vector< itkImageSSRTD22_Pointer >::size_type size) -> vectoritkImageSSRTD22
        __init__(std::vector<(itkImageSSRTD22_Pointer)> self, std::vector< itkImageSSRTD22_Pointer >::size_type size, std::vector< itkImageSSRTD22_Pointer >::value_type const & value) -> vectoritkImageSSRTD22
        """
        _itkImagePython.vectoritkImageSSRTD22_swiginit(self, _itkImagePython.new_vectoritkImageSSRTD22(*args))

    def push_back(self, x: 'std::vector< itkImageSSRTD22_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageSSRTD22_push_back(self, x)


    def front(self) -> "std::vector< itkImageSSRTD22_Pointer >::value_type const &":
        """front(vectoritkImageSSRTD22 self) -> std::vector< itkImageSSRTD22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTD22_front(self)


    def back(self) -> "std::vector< itkImageSSRTD22_Pointer >::value_type const &":
        """back(vectoritkImageSSRTD22 self) -> std::vector< itkImageSSRTD22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTD22_back(self)


    def assign(self, n: 'std::vector< itkImageSSRTD22_Pointer >::size_type', x: 'std::vector< itkImageSSRTD22_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::size_type n, std::vector< itkImageSSRTD22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageSSRTD22_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::size_type new_size)
        resize(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::size_type new_size, std::vector< itkImageSSRTD22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageSSRTD22_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::iterator pos, std::vector< itkImageSSRTD22_Pointer >::value_type const & x) -> std::vector< itkImageSSRTD22_Pointer >::iterator
        insert(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::iterator pos, std::vector< itkImageSSRTD22_Pointer >::size_type n, std::vector< itkImageSSRTD22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageSSRTD22_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageSSRTD22_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageSSRTD22 self, std::vector< itkImageSSRTD22_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageSSRTD22_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageSSRTD22_Pointer >::size_type":
        """capacity(vectoritkImageSSRTD22 self) -> std::vector< itkImageSSRTD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD22_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSSRTD22
vectoritkImageSSRTD22.iterator = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_iterator, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22___nonzero__, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22___bool__, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.__len__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22___len__, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22___getslice__, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22___setslice__, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22___delslice__, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22___delitem__, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22___getitem__, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22___setitem__, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.pop = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_pop, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.append = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_append, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.empty = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_empty, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.size = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_size, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.swap = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_swap, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.begin = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_begin, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.end = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_end, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.rbegin = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_rbegin, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.rend = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_rend, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.clear = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_clear, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_get_allocator, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.pop_back = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_pop_back, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.erase = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_erase, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.push_back = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_push_back, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.front = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_front, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.back = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_back, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.assign = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_assign, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.resize = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_resize, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.insert = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_insert, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.reserve = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_reserve, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22.capacity = new_instancemethod(_itkImagePython.vectoritkImageSSRTD22_capacity, None, vectoritkImageSSRTD22)
vectoritkImageSSRTD22_swigregister = _itkImagePython.vectoritkImageSSRTD22_swigregister
vectoritkImageSSRTD22_swigregister(vectoritkImageSSRTD22)

class vectoritkImageRGBUC3(object):
    """Proxy of C++ std::vector<(itkImageRGBUC3_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageRGBUC3 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageRGBUC3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageRGBUC3 self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageRGBUC3 self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC3___bool__(self)


    def __len__(self) -> "std::vector< itkImageRGBUC3_Pointer >::size_type":
        """__len__(vectoritkImageRGBUC3 self) -> std::vector< itkImageRGBUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC3___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageRGBUC3_Pointer >::difference_type', j: 'std::vector< itkImageRGBUC3_Pointer >::difference_type') -> "std::vector< itkImageRGBUC3_Pointer,std::allocator< itkImageRGBUC3_Pointer > > *":
        """__getslice__(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::difference_type i, std::vector< itkImageRGBUC3_Pointer >::difference_type j) -> vectoritkImageRGBUC3"""
        return _itkImagePython.vectoritkImageRGBUC3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::difference_type i, std::vector< itkImageRGBUC3_Pointer >::difference_type j)
        __setslice__(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::difference_type i, std::vector< itkImageRGBUC3_Pointer >::difference_type j, vectoritkImageRGBUC3 v)
        """
        return _itkImagePython.vectoritkImageRGBUC3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageRGBUC3_Pointer >::difference_type', j: 'std::vector< itkImageRGBUC3_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::difference_type i, std::vector< itkImageRGBUC3_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageRGBUC3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::difference_type i)
        __delitem__(vectoritkImageRGBUC3 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageRGBUC3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageRGBUC3_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageRGBUC3 self, PySliceObject * slice) -> vectoritkImageRGBUC3
        __getitem__(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::difference_type i) -> std::vector< itkImageRGBUC3_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageRGBUC3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageRGBUC3 self, PySliceObject * slice, vectoritkImageRGBUC3 v)
        __setitem__(vectoritkImageRGBUC3 self, PySliceObject * slice)
        __setitem__(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::difference_type i, std::vector< itkImageRGBUC3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageRGBUC3___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageRGBUC3_Pointer >::value_type":
        """pop(vectoritkImageRGBUC3 self) -> std::vector< itkImageRGBUC3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageRGBUC3_pop(self)


    def append(self, x: 'std::vector< itkImageRGBUC3_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageRGBUC3_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageRGBUC3 self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC3_empty(self)


    def size(self) -> "std::vector< itkImageRGBUC3_Pointer >::size_type":
        """size(vectoritkImageRGBUC3 self) -> std::vector< itkImageRGBUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC3_size(self)


    def swap(self, v: 'vectoritkImageRGBUC3') -> "void":
        """swap(vectoritkImageRGBUC3 self, vectoritkImageRGBUC3 v)"""
        return _itkImagePython.vectoritkImageRGBUC3_swap(self, v)


    def begin(self) -> "std::vector< itkImageRGBUC3_Pointer >::iterator":
        """begin(vectoritkImageRGBUC3 self) -> std::vector< itkImageRGBUC3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBUC3_begin(self)


    def end(self) -> "std::vector< itkImageRGBUC3_Pointer >::iterator":
        """end(vectoritkImageRGBUC3 self) -> std::vector< itkImageRGBUC3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBUC3_end(self)


    def rbegin(self) -> "std::vector< itkImageRGBUC3_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageRGBUC3 self) -> std::vector< itkImageRGBUC3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBUC3_rbegin(self)


    def rend(self) -> "std::vector< itkImageRGBUC3_Pointer >::reverse_iterator":
        """rend(vectoritkImageRGBUC3 self) -> std::vector< itkImageRGBUC3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBUC3_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageRGBUC3 self)"""
        return _itkImagePython.vectoritkImageRGBUC3_clear(self)


    def get_allocator(self) -> "std::vector< itkImageRGBUC3_Pointer >::allocator_type":
        """get_allocator(vectoritkImageRGBUC3 self) -> std::vector< itkImageRGBUC3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageRGBUC3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageRGBUC3 self)"""
        return _itkImagePython.vectoritkImageRGBUC3_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageRGBUC3_Pointer >::iterator":
        """
        erase(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::iterator pos) -> std::vector< itkImageRGBUC3_Pointer >::iterator
        erase(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::iterator first, std::vector< itkImageRGBUC3_Pointer >::iterator last) -> std::vector< itkImageRGBUC3_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageRGBUC3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageRGBUC3_Pointer)> self) -> vectoritkImageRGBUC3
        __init__(std::vector<(itkImageRGBUC3_Pointer)> self, vectoritkImageRGBUC3 arg2) -> vectoritkImageRGBUC3
        __init__(std::vector<(itkImageRGBUC3_Pointer)> self, std::vector< itkImageRGBUC3_Pointer >::size_type size) -> vectoritkImageRGBUC3
        __init__(std::vector<(itkImageRGBUC3_Pointer)> self, std::vector< itkImageRGBUC3_Pointer >::size_type size, std::vector< itkImageRGBUC3_Pointer >::value_type const & value) -> vectoritkImageRGBUC3
        """
        _itkImagePython.vectoritkImageRGBUC3_swiginit(self, _itkImagePython.new_vectoritkImageRGBUC3(*args))

    def push_back(self, x: 'std::vector< itkImageRGBUC3_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageRGBUC3_push_back(self, x)


    def front(self) -> "std::vector< itkImageRGBUC3_Pointer >::value_type const &":
        """front(vectoritkImageRGBUC3 self) -> std::vector< itkImageRGBUC3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBUC3_front(self)


    def back(self) -> "std::vector< itkImageRGBUC3_Pointer >::value_type const &":
        """back(vectoritkImageRGBUC3 self) -> std::vector< itkImageRGBUC3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBUC3_back(self)


    def assign(self, n: 'std::vector< itkImageRGBUC3_Pointer >::size_type', x: 'std::vector< itkImageRGBUC3_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::size_type n, std::vector< itkImageRGBUC3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageRGBUC3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::size_type new_size)
        resize(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::size_type new_size, std::vector< itkImageRGBUC3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageRGBUC3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::iterator pos, std::vector< itkImageRGBUC3_Pointer >::value_type const & x) -> std::vector< itkImageRGBUC3_Pointer >::iterator
        insert(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::iterator pos, std::vector< itkImageRGBUC3_Pointer >::size_type n, std::vector< itkImageRGBUC3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageRGBUC3_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageRGBUC3_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageRGBUC3 self, std::vector< itkImageRGBUC3_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageRGBUC3_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageRGBUC3_Pointer >::size_type":
        """capacity(vectoritkImageRGBUC3 self) -> std::vector< itkImageRGBUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC3_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageRGBUC3
vectoritkImageRGBUC3.iterator = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_iterator, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3___nonzero__, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3___bool__, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.__len__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3___len__, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3___getslice__, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3___setslice__, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3___delslice__, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3___delitem__, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3___getitem__, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3___setitem__, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.pop = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_pop, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.append = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_append, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.empty = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_empty, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.size = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_size, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.swap = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_swap, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.begin = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_begin, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.end = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_end, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.rbegin = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_rbegin, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.rend = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_rend, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.clear = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_clear, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_get_allocator, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.pop_back = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_pop_back, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.erase = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_erase, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.push_back = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_push_back, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.front = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_front, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.back = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_back, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.assign = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_assign, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.resize = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_resize, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.insert = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_insert, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.reserve = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_reserve, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3.capacity = new_instancemethod(_itkImagePython.vectoritkImageRGBUC3_capacity, None, vectoritkImageRGBUC3)
vectoritkImageRGBUC3_swigregister = _itkImagePython.vectoritkImageRGBUC3_swigregister
vectoritkImageRGBUC3_swigregister(vectoritkImageRGBUC3)

class vectoritkImageRGBAUC3(object):
    """Proxy of C++ std::vector<(itkImageRGBAUC3_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageRGBAUC3 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageRGBAUC3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageRGBAUC3 self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageRGBAUC3 self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC3___bool__(self)


    def __len__(self) -> "std::vector< itkImageRGBAUC3_Pointer >::size_type":
        """__len__(vectoritkImageRGBAUC3 self) -> std::vector< itkImageRGBAUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC3___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageRGBAUC3_Pointer >::difference_type', j: 'std::vector< itkImageRGBAUC3_Pointer >::difference_type') -> "std::vector< itkImageRGBAUC3_Pointer,std::allocator< itkImageRGBAUC3_Pointer > > *":
        """__getslice__(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::difference_type i, std::vector< itkImageRGBAUC3_Pointer >::difference_type j) -> vectoritkImageRGBAUC3"""
        return _itkImagePython.vectoritkImageRGBAUC3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::difference_type i, std::vector< itkImageRGBAUC3_Pointer >::difference_type j)
        __setslice__(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::difference_type i, std::vector< itkImageRGBAUC3_Pointer >::difference_type j, vectoritkImageRGBAUC3 v)
        """
        return _itkImagePython.vectoritkImageRGBAUC3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageRGBAUC3_Pointer >::difference_type', j: 'std::vector< itkImageRGBAUC3_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::difference_type i, std::vector< itkImageRGBAUC3_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageRGBAUC3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::difference_type i)
        __delitem__(vectoritkImageRGBAUC3 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageRGBAUC3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageRGBAUC3_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageRGBAUC3 self, PySliceObject * slice) -> vectoritkImageRGBAUC3
        __getitem__(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::difference_type i) -> std::vector< itkImageRGBAUC3_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageRGBAUC3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageRGBAUC3 self, PySliceObject * slice, vectoritkImageRGBAUC3 v)
        __setitem__(vectoritkImageRGBAUC3 self, PySliceObject * slice)
        __setitem__(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::difference_type i, std::vector< itkImageRGBAUC3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageRGBAUC3___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageRGBAUC3_Pointer >::value_type":
        """pop(vectoritkImageRGBAUC3 self) -> std::vector< itkImageRGBAUC3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageRGBAUC3_pop(self)


    def append(self, x: 'std::vector< itkImageRGBAUC3_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageRGBAUC3_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageRGBAUC3 self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC3_empty(self)


    def size(self) -> "std::vector< itkImageRGBAUC3_Pointer >::size_type":
        """size(vectoritkImageRGBAUC3 self) -> std::vector< itkImageRGBAUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC3_size(self)


    def swap(self, v: 'vectoritkImageRGBAUC3') -> "void":
        """swap(vectoritkImageRGBAUC3 self, vectoritkImageRGBAUC3 v)"""
        return _itkImagePython.vectoritkImageRGBAUC3_swap(self, v)


    def begin(self) -> "std::vector< itkImageRGBAUC3_Pointer >::iterator":
        """begin(vectoritkImageRGBAUC3 self) -> std::vector< itkImageRGBAUC3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBAUC3_begin(self)


    def end(self) -> "std::vector< itkImageRGBAUC3_Pointer >::iterator":
        """end(vectoritkImageRGBAUC3 self) -> std::vector< itkImageRGBAUC3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBAUC3_end(self)


    def rbegin(self) -> "std::vector< itkImageRGBAUC3_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageRGBAUC3 self) -> std::vector< itkImageRGBAUC3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBAUC3_rbegin(self)


    def rend(self) -> "std::vector< itkImageRGBAUC3_Pointer >::reverse_iterator":
        """rend(vectoritkImageRGBAUC3 self) -> std::vector< itkImageRGBAUC3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBAUC3_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageRGBAUC3 self)"""
        return _itkImagePython.vectoritkImageRGBAUC3_clear(self)


    def get_allocator(self) -> "std::vector< itkImageRGBAUC3_Pointer >::allocator_type":
        """get_allocator(vectoritkImageRGBAUC3 self) -> std::vector< itkImageRGBAUC3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageRGBAUC3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageRGBAUC3 self)"""
        return _itkImagePython.vectoritkImageRGBAUC3_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageRGBAUC3_Pointer >::iterator":
        """
        erase(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::iterator pos) -> std::vector< itkImageRGBAUC3_Pointer >::iterator
        erase(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::iterator first, std::vector< itkImageRGBAUC3_Pointer >::iterator last) -> std::vector< itkImageRGBAUC3_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageRGBAUC3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageRGBAUC3_Pointer)> self) -> vectoritkImageRGBAUC3
        __init__(std::vector<(itkImageRGBAUC3_Pointer)> self, vectoritkImageRGBAUC3 arg2) -> vectoritkImageRGBAUC3
        __init__(std::vector<(itkImageRGBAUC3_Pointer)> self, std::vector< itkImageRGBAUC3_Pointer >::size_type size) -> vectoritkImageRGBAUC3
        __init__(std::vector<(itkImageRGBAUC3_Pointer)> self, std::vector< itkImageRGBAUC3_Pointer >::size_type size, std::vector< itkImageRGBAUC3_Pointer >::value_type const & value) -> vectoritkImageRGBAUC3
        """
        _itkImagePython.vectoritkImageRGBAUC3_swiginit(self, _itkImagePython.new_vectoritkImageRGBAUC3(*args))

    def push_back(self, x: 'std::vector< itkImageRGBAUC3_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageRGBAUC3_push_back(self, x)


    def front(self) -> "std::vector< itkImageRGBAUC3_Pointer >::value_type const &":
        """front(vectoritkImageRGBAUC3 self) -> std::vector< itkImageRGBAUC3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBAUC3_front(self)


    def back(self) -> "std::vector< itkImageRGBAUC3_Pointer >::value_type const &":
        """back(vectoritkImageRGBAUC3 self) -> std::vector< itkImageRGBAUC3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBAUC3_back(self)


    def assign(self, n: 'std::vector< itkImageRGBAUC3_Pointer >::size_type', x: 'std::vector< itkImageRGBAUC3_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::size_type n, std::vector< itkImageRGBAUC3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageRGBAUC3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::size_type new_size)
        resize(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::size_type new_size, std::vector< itkImageRGBAUC3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageRGBAUC3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::iterator pos, std::vector< itkImageRGBAUC3_Pointer >::value_type const & x) -> std::vector< itkImageRGBAUC3_Pointer >::iterator
        insert(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::iterator pos, std::vector< itkImageRGBAUC3_Pointer >::size_type n, std::vector< itkImageRGBAUC3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageRGBAUC3_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageRGBAUC3_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageRGBAUC3 self, std::vector< itkImageRGBAUC3_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageRGBAUC3_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageRGBAUC3_Pointer >::size_type":
        """capacity(vectoritkImageRGBAUC3 self) -> std::vector< itkImageRGBAUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC3_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageRGBAUC3
vectoritkImageRGBAUC3.iterator = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_iterator, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3___nonzero__, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3___bool__, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.__len__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3___len__, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3___getslice__, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3___setslice__, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3___delslice__, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3___delitem__, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3___getitem__, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3___setitem__, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.pop = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_pop, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.append = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_append, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.empty = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_empty, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.size = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_size, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.swap = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_swap, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.begin = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_begin, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.end = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_end, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.rbegin = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_rbegin, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.rend = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_rend, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.clear = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_clear, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_get_allocator, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.pop_back = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_pop_back, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.erase = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_erase, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.push_back = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_push_back, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.front = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_front, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.back = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_back, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.assign = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_assign, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.resize = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_resize, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.insert = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_insert, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.reserve = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_reserve, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3.capacity = new_instancemethod(_itkImagePython.vectoritkImageRGBAUC3_capacity, None, vectoritkImageRGBAUC3)
vectoritkImageRGBAUC3_swigregister = _itkImagePython.vectoritkImageRGBAUC3_swigregister
vectoritkImageRGBAUC3_swigregister(vectoritkImageRGBAUC3)

class vectoritkImageVF23(object):
    """Proxy of C++ std::vector<(itkImageVF23_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVF23 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF23_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVF23 self) -> bool"""
        return _itkImagePython.vectoritkImageVF23___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVF23 self) -> bool"""
        return _itkImagePython.vectoritkImageVF23___bool__(self)


    def __len__(self) -> "std::vector< itkImageVF23_Pointer >::size_type":
        """__len__(vectoritkImageVF23 self) -> std::vector< itkImageVF23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF23___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVF23_Pointer >::difference_type', j: 'std::vector< itkImageVF23_Pointer >::difference_type') -> "std::vector< itkImageVF23_Pointer,std::allocator< itkImageVF23_Pointer > > *":
        """__getslice__(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::difference_type i, std::vector< itkImageVF23_Pointer >::difference_type j) -> vectoritkImageVF23"""
        return _itkImagePython.vectoritkImageVF23___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::difference_type i, std::vector< itkImageVF23_Pointer >::difference_type j)
        __setslice__(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::difference_type i, std::vector< itkImageVF23_Pointer >::difference_type j, vectoritkImageVF23 v)
        """
        return _itkImagePython.vectoritkImageVF23___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVF23_Pointer >::difference_type', j: 'std::vector< itkImageVF23_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::difference_type i, std::vector< itkImageVF23_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVF23___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::difference_type i)
        __delitem__(vectoritkImageVF23 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVF23___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVF23_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVF23 self, PySliceObject * slice) -> vectoritkImageVF23
        __getitem__(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::difference_type i) -> std::vector< itkImageVF23_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVF23___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVF23 self, PySliceObject * slice, vectoritkImageVF23 v)
        __setitem__(vectoritkImageVF23 self, PySliceObject * slice)
        __setitem__(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::difference_type i, std::vector< itkImageVF23_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF23___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVF23_Pointer >::value_type":
        """pop(vectoritkImageVF23 self) -> std::vector< itkImageVF23_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF23_pop(self)


    def append(self, x: 'std::vector< itkImageVF23_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF23_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVF23 self) -> bool"""
        return _itkImagePython.vectoritkImageVF23_empty(self)


    def size(self) -> "std::vector< itkImageVF23_Pointer >::size_type":
        """size(vectoritkImageVF23 self) -> std::vector< itkImageVF23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF23_size(self)


    def swap(self, v: 'vectoritkImageVF23') -> "void":
        """swap(vectoritkImageVF23 self, vectoritkImageVF23 v)"""
        return _itkImagePython.vectoritkImageVF23_swap(self, v)


    def begin(self) -> "std::vector< itkImageVF23_Pointer >::iterator":
        """begin(vectoritkImageVF23 self) -> std::vector< itkImageVF23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF23_begin(self)


    def end(self) -> "std::vector< itkImageVF23_Pointer >::iterator":
        """end(vectoritkImageVF23 self) -> std::vector< itkImageVF23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF23_end(self)


    def rbegin(self) -> "std::vector< itkImageVF23_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVF23 self) -> std::vector< itkImageVF23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF23_rbegin(self)


    def rend(self) -> "std::vector< itkImageVF23_Pointer >::reverse_iterator":
        """rend(vectoritkImageVF23 self) -> std::vector< itkImageVF23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF23_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVF23 self)"""
        return _itkImagePython.vectoritkImageVF23_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVF23_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVF23 self) -> std::vector< itkImageVF23_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF23_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVF23 self)"""
        return _itkImagePython.vectoritkImageVF23_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVF23_Pointer >::iterator":
        """
        erase(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::iterator pos) -> std::vector< itkImageVF23_Pointer >::iterator
        erase(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::iterator first, std::vector< itkImageVF23_Pointer >::iterator last) -> std::vector< itkImageVF23_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVF23_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVF23_Pointer)> self) -> vectoritkImageVF23
        __init__(std::vector<(itkImageVF23_Pointer)> self, vectoritkImageVF23 arg2) -> vectoritkImageVF23
        __init__(std::vector<(itkImageVF23_Pointer)> self, std::vector< itkImageVF23_Pointer >::size_type size) -> vectoritkImageVF23
        __init__(std::vector<(itkImageVF23_Pointer)> self, std::vector< itkImageVF23_Pointer >::size_type size, std::vector< itkImageVF23_Pointer >::value_type const & value) -> vectoritkImageVF23
        """
        _itkImagePython.vectoritkImageVF23_swiginit(self, _itkImagePython.new_vectoritkImageVF23(*args))

    def push_back(self, x: 'std::vector< itkImageVF23_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF23_push_back(self, x)


    def front(self) -> "std::vector< itkImageVF23_Pointer >::value_type const &":
        """front(vectoritkImageVF23 self) -> std::vector< itkImageVF23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF23_front(self)


    def back(self) -> "std::vector< itkImageVF23_Pointer >::value_type const &":
        """back(vectoritkImageVF23 self) -> std::vector< itkImageVF23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF23_back(self)


    def assign(self, n: 'std::vector< itkImageVF23_Pointer >::size_type', x: 'std::vector< itkImageVF23_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::size_type n, std::vector< itkImageVF23_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF23_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::size_type new_size)
        resize(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::size_type new_size, std::vector< itkImageVF23_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF23_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::iterator pos, std::vector< itkImageVF23_Pointer >::value_type const & x) -> std::vector< itkImageVF23_Pointer >::iterator
        insert(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::iterator pos, std::vector< itkImageVF23_Pointer >::size_type n, std::vector< itkImageVF23_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF23_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVF23_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVF23 self, std::vector< itkImageVF23_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVF23_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVF23_Pointer >::size_type":
        """capacity(vectoritkImageVF23 self) -> std::vector< itkImageVF23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF23_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF23
vectoritkImageVF23.iterator = new_instancemethod(_itkImagePython.vectoritkImageVF23_iterator, None, vectoritkImageVF23)
vectoritkImageVF23.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVF23___nonzero__, None, vectoritkImageVF23)
vectoritkImageVF23.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVF23___bool__, None, vectoritkImageVF23)
vectoritkImageVF23.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVF23___len__, None, vectoritkImageVF23)
vectoritkImageVF23.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF23___getslice__, None, vectoritkImageVF23)
vectoritkImageVF23.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF23___setslice__, None, vectoritkImageVF23)
vectoritkImageVF23.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF23___delslice__, None, vectoritkImageVF23)
vectoritkImageVF23.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF23___delitem__, None, vectoritkImageVF23)
vectoritkImageVF23.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF23___getitem__, None, vectoritkImageVF23)
vectoritkImageVF23.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF23___setitem__, None, vectoritkImageVF23)
vectoritkImageVF23.pop = new_instancemethod(_itkImagePython.vectoritkImageVF23_pop, None, vectoritkImageVF23)
vectoritkImageVF23.append = new_instancemethod(_itkImagePython.vectoritkImageVF23_append, None, vectoritkImageVF23)
vectoritkImageVF23.empty = new_instancemethod(_itkImagePython.vectoritkImageVF23_empty, None, vectoritkImageVF23)
vectoritkImageVF23.size = new_instancemethod(_itkImagePython.vectoritkImageVF23_size, None, vectoritkImageVF23)
vectoritkImageVF23.swap = new_instancemethod(_itkImagePython.vectoritkImageVF23_swap, None, vectoritkImageVF23)
vectoritkImageVF23.begin = new_instancemethod(_itkImagePython.vectoritkImageVF23_begin, None, vectoritkImageVF23)
vectoritkImageVF23.end = new_instancemethod(_itkImagePython.vectoritkImageVF23_end, None, vectoritkImageVF23)
vectoritkImageVF23.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVF23_rbegin, None, vectoritkImageVF23)
vectoritkImageVF23.rend = new_instancemethod(_itkImagePython.vectoritkImageVF23_rend, None, vectoritkImageVF23)
vectoritkImageVF23.clear = new_instancemethod(_itkImagePython.vectoritkImageVF23_clear, None, vectoritkImageVF23)
vectoritkImageVF23.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVF23_get_allocator, None, vectoritkImageVF23)
vectoritkImageVF23.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVF23_pop_back, None, vectoritkImageVF23)
vectoritkImageVF23.erase = new_instancemethod(_itkImagePython.vectoritkImageVF23_erase, None, vectoritkImageVF23)
vectoritkImageVF23.push_back = new_instancemethod(_itkImagePython.vectoritkImageVF23_push_back, None, vectoritkImageVF23)
vectoritkImageVF23.front = new_instancemethod(_itkImagePython.vectoritkImageVF23_front, None, vectoritkImageVF23)
vectoritkImageVF23.back = new_instancemethod(_itkImagePython.vectoritkImageVF23_back, None, vectoritkImageVF23)
vectoritkImageVF23.assign = new_instancemethod(_itkImagePython.vectoritkImageVF23_assign, None, vectoritkImageVF23)
vectoritkImageVF23.resize = new_instancemethod(_itkImagePython.vectoritkImageVF23_resize, None, vectoritkImageVF23)
vectoritkImageVF23.insert = new_instancemethod(_itkImagePython.vectoritkImageVF23_insert, None, vectoritkImageVF23)
vectoritkImageVF23.reserve = new_instancemethod(_itkImagePython.vectoritkImageVF23_reserve, None, vectoritkImageVF23)
vectoritkImageVF23.capacity = new_instancemethod(_itkImagePython.vectoritkImageVF23_capacity, None, vectoritkImageVF23)
vectoritkImageVF23_swigregister = _itkImagePython.vectoritkImageVF23_swigregister
vectoritkImageVF23_swigregister(vectoritkImageVF23)

class vectoritkImageVF33(object):
    """Proxy of C++ std::vector<(itkImageVF33_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVF33 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF33_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVF33 self) -> bool"""
        return _itkImagePython.vectoritkImageVF33___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVF33 self) -> bool"""
        return _itkImagePython.vectoritkImageVF33___bool__(self)


    def __len__(self) -> "std::vector< itkImageVF33_Pointer >::size_type":
        """__len__(vectoritkImageVF33 self) -> std::vector< itkImageVF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF33___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVF33_Pointer >::difference_type', j: 'std::vector< itkImageVF33_Pointer >::difference_type') -> "std::vector< itkImageVF33_Pointer,std::allocator< itkImageVF33_Pointer > > *":
        """__getslice__(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::difference_type i, std::vector< itkImageVF33_Pointer >::difference_type j) -> vectoritkImageVF33"""
        return _itkImagePython.vectoritkImageVF33___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::difference_type i, std::vector< itkImageVF33_Pointer >::difference_type j)
        __setslice__(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::difference_type i, std::vector< itkImageVF33_Pointer >::difference_type j, vectoritkImageVF33 v)
        """
        return _itkImagePython.vectoritkImageVF33___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVF33_Pointer >::difference_type', j: 'std::vector< itkImageVF33_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::difference_type i, std::vector< itkImageVF33_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVF33___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::difference_type i)
        __delitem__(vectoritkImageVF33 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVF33___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVF33_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVF33 self, PySliceObject * slice) -> vectoritkImageVF33
        __getitem__(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::difference_type i) -> std::vector< itkImageVF33_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVF33___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVF33 self, PySliceObject * slice, vectoritkImageVF33 v)
        __setitem__(vectoritkImageVF33 self, PySliceObject * slice)
        __setitem__(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::difference_type i, std::vector< itkImageVF33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF33___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVF33_Pointer >::value_type":
        """pop(vectoritkImageVF33 self) -> std::vector< itkImageVF33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF33_pop(self)


    def append(self, x: 'std::vector< itkImageVF33_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF33_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVF33 self) -> bool"""
        return _itkImagePython.vectoritkImageVF33_empty(self)


    def size(self) -> "std::vector< itkImageVF33_Pointer >::size_type":
        """size(vectoritkImageVF33 self) -> std::vector< itkImageVF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF33_size(self)


    def swap(self, v: 'vectoritkImageVF33') -> "void":
        """swap(vectoritkImageVF33 self, vectoritkImageVF33 v)"""
        return _itkImagePython.vectoritkImageVF33_swap(self, v)


    def begin(self) -> "std::vector< itkImageVF33_Pointer >::iterator":
        """begin(vectoritkImageVF33 self) -> std::vector< itkImageVF33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF33_begin(self)


    def end(self) -> "std::vector< itkImageVF33_Pointer >::iterator":
        """end(vectoritkImageVF33 self) -> std::vector< itkImageVF33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF33_end(self)


    def rbegin(self) -> "std::vector< itkImageVF33_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVF33 self) -> std::vector< itkImageVF33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF33_rbegin(self)


    def rend(self) -> "std::vector< itkImageVF33_Pointer >::reverse_iterator":
        """rend(vectoritkImageVF33 self) -> std::vector< itkImageVF33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF33_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVF33 self)"""
        return _itkImagePython.vectoritkImageVF33_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVF33_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVF33 self) -> std::vector< itkImageVF33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF33_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVF33 self)"""
        return _itkImagePython.vectoritkImageVF33_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVF33_Pointer >::iterator":
        """
        erase(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::iterator pos) -> std::vector< itkImageVF33_Pointer >::iterator
        erase(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::iterator first, std::vector< itkImageVF33_Pointer >::iterator last) -> std::vector< itkImageVF33_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVF33_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVF33_Pointer)> self) -> vectoritkImageVF33
        __init__(std::vector<(itkImageVF33_Pointer)> self, vectoritkImageVF33 arg2) -> vectoritkImageVF33
        __init__(std::vector<(itkImageVF33_Pointer)> self, std::vector< itkImageVF33_Pointer >::size_type size) -> vectoritkImageVF33
        __init__(std::vector<(itkImageVF33_Pointer)> self, std::vector< itkImageVF33_Pointer >::size_type size, std::vector< itkImageVF33_Pointer >::value_type const & value) -> vectoritkImageVF33
        """
        _itkImagePython.vectoritkImageVF33_swiginit(self, _itkImagePython.new_vectoritkImageVF33(*args))

    def push_back(self, x: 'std::vector< itkImageVF33_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF33_push_back(self, x)


    def front(self) -> "std::vector< itkImageVF33_Pointer >::value_type const &":
        """front(vectoritkImageVF33 self) -> std::vector< itkImageVF33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF33_front(self)


    def back(self) -> "std::vector< itkImageVF33_Pointer >::value_type const &":
        """back(vectoritkImageVF33 self) -> std::vector< itkImageVF33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF33_back(self)


    def assign(self, n: 'std::vector< itkImageVF33_Pointer >::size_type', x: 'std::vector< itkImageVF33_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::size_type n, std::vector< itkImageVF33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF33_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::size_type new_size)
        resize(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::size_type new_size, std::vector< itkImageVF33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF33_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::iterator pos, std::vector< itkImageVF33_Pointer >::value_type const & x) -> std::vector< itkImageVF33_Pointer >::iterator
        insert(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::iterator pos, std::vector< itkImageVF33_Pointer >::size_type n, std::vector< itkImageVF33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF33_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVF33_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVF33 self, std::vector< itkImageVF33_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVF33_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVF33_Pointer >::size_type":
        """capacity(vectoritkImageVF33 self) -> std::vector< itkImageVF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF33_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF33
vectoritkImageVF33.iterator = new_instancemethod(_itkImagePython.vectoritkImageVF33_iterator, None, vectoritkImageVF33)
vectoritkImageVF33.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVF33___nonzero__, None, vectoritkImageVF33)
vectoritkImageVF33.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVF33___bool__, None, vectoritkImageVF33)
vectoritkImageVF33.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVF33___len__, None, vectoritkImageVF33)
vectoritkImageVF33.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF33___getslice__, None, vectoritkImageVF33)
vectoritkImageVF33.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF33___setslice__, None, vectoritkImageVF33)
vectoritkImageVF33.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF33___delslice__, None, vectoritkImageVF33)
vectoritkImageVF33.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF33___delitem__, None, vectoritkImageVF33)
vectoritkImageVF33.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF33___getitem__, None, vectoritkImageVF33)
vectoritkImageVF33.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF33___setitem__, None, vectoritkImageVF33)
vectoritkImageVF33.pop = new_instancemethod(_itkImagePython.vectoritkImageVF33_pop, None, vectoritkImageVF33)
vectoritkImageVF33.append = new_instancemethod(_itkImagePython.vectoritkImageVF33_append, None, vectoritkImageVF33)
vectoritkImageVF33.empty = new_instancemethod(_itkImagePython.vectoritkImageVF33_empty, None, vectoritkImageVF33)
vectoritkImageVF33.size = new_instancemethod(_itkImagePython.vectoritkImageVF33_size, None, vectoritkImageVF33)
vectoritkImageVF33.swap = new_instancemethod(_itkImagePython.vectoritkImageVF33_swap, None, vectoritkImageVF33)
vectoritkImageVF33.begin = new_instancemethod(_itkImagePython.vectoritkImageVF33_begin, None, vectoritkImageVF33)
vectoritkImageVF33.end = new_instancemethod(_itkImagePython.vectoritkImageVF33_end, None, vectoritkImageVF33)
vectoritkImageVF33.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVF33_rbegin, None, vectoritkImageVF33)
vectoritkImageVF33.rend = new_instancemethod(_itkImagePython.vectoritkImageVF33_rend, None, vectoritkImageVF33)
vectoritkImageVF33.clear = new_instancemethod(_itkImagePython.vectoritkImageVF33_clear, None, vectoritkImageVF33)
vectoritkImageVF33.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVF33_get_allocator, None, vectoritkImageVF33)
vectoritkImageVF33.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVF33_pop_back, None, vectoritkImageVF33)
vectoritkImageVF33.erase = new_instancemethod(_itkImagePython.vectoritkImageVF33_erase, None, vectoritkImageVF33)
vectoritkImageVF33.push_back = new_instancemethod(_itkImagePython.vectoritkImageVF33_push_back, None, vectoritkImageVF33)
vectoritkImageVF33.front = new_instancemethod(_itkImagePython.vectoritkImageVF33_front, None, vectoritkImageVF33)
vectoritkImageVF33.back = new_instancemethod(_itkImagePython.vectoritkImageVF33_back, None, vectoritkImageVF33)
vectoritkImageVF33.assign = new_instancemethod(_itkImagePython.vectoritkImageVF33_assign, None, vectoritkImageVF33)
vectoritkImageVF33.resize = new_instancemethod(_itkImagePython.vectoritkImageVF33_resize, None, vectoritkImageVF33)
vectoritkImageVF33.insert = new_instancemethod(_itkImagePython.vectoritkImageVF33_insert, None, vectoritkImageVF33)
vectoritkImageVF33.reserve = new_instancemethod(_itkImagePython.vectoritkImageVF33_reserve, None, vectoritkImageVF33)
vectoritkImageVF33.capacity = new_instancemethod(_itkImagePython.vectoritkImageVF33_capacity, None, vectoritkImageVF33)
vectoritkImageVF33_swigregister = _itkImagePython.vectoritkImageVF33_swigregister
vectoritkImageVF33_swigregister(vectoritkImageVF33)

class vectoritkImageVF43(object):
    """Proxy of C++ std::vector<(itkImageVF43_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVF43 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF43_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVF43 self) -> bool"""
        return _itkImagePython.vectoritkImageVF43___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVF43 self) -> bool"""
        return _itkImagePython.vectoritkImageVF43___bool__(self)


    def __len__(self) -> "std::vector< itkImageVF43_Pointer >::size_type":
        """__len__(vectoritkImageVF43 self) -> std::vector< itkImageVF43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF43___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVF43_Pointer >::difference_type', j: 'std::vector< itkImageVF43_Pointer >::difference_type') -> "std::vector< itkImageVF43_Pointer,std::allocator< itkImageVF43_Pointer > > *":
        """__getslice__(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::difference_type i, std::vector< itkImageVF43_Pointer >::difference_type j) -> vectoritkImageVF43"""
        return _itkImagePython.vectoritkImageVF43___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::difference_type i, std::vector< itkImageVF43_Pointer >::difference_type j)
        __setslice__(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::difference_type i, std::vector< itkImageVF43_Pointer >::difference_type j, vectoritkImageVF43 v)
        """
        return _itkImagePython.vectoritkImageVF43___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVF43_Pointer >::difference_type', j: 'std::vector< itkImageVF43_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::difference_type i, std::vector< itkImageVF43_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVF43___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::difference_type i)
        __delitem__(vectoritkImageVF43 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVF43___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVF43_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVF43 self, PySliceObject * slice) -> vectoritkImageVF43
        __getitem__(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::difference_type i) -> std::vector< itkImageVF43_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVF43___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVF43 self, PySliceObject * slice, vectoritkImageVF43 v)
        __setitem__(vectoritkImageVF43 self, PySliceObject * slice)
        __setitem__(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::difference_type i, std::vector< itkImageVF43_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF43___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVF43_Pointer >::value_type":
        """pop(vectoritkImageVF43 self) -> std::vector< itkImageVF43_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF43_pop(self)


    def append(self, x: 'std::vector< itkImageVF43_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF43_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVF43 self) -> bool"""
        return _itkImagePython.vectoritkImageVF43_empty(self)


    def size(self) -> "std::vector< itkImageVF43_Pointer >::size_type":
        """size(vectoritkImageVF43 self) -> std::vector< itkImageVF43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF43_size(self)


    def swap(self, v: 'vectoritkImageVF43') -> "void":
        """swap(vectoritkImageVF43 self, vectoritkImageVF43 v)"""
        return _itkImagePython.vectoritkImageVF43_swap(self, v)


    def begin(self) -> "std::vector< itkImageVF43_Pointer >::iterator":
        """begin(vectoritkImageVF43 self) -> std::vector< itkImageVF43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF43_begin(self)


    def end(self) -> "std::vector< itkImageVF43_Pointer >::iterator":
        """end(vectoritkImageVF43 self) -> std::vector< itkImageVF43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF43_end(self)


    def rbegin(self) -> "std::vector< itkImageVF43_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVF43 self) -> std::vector< itkImageVF43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF43_rbegin(self)


    def rend(self) -> "std::vector< itkImageVF43_Pointer >::reverse_iterator":
        """rend(vectoritkImageVF43 self) -> std::vector< itkImageVF43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF43_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVF43 self)"""
        return _itkImagePython.vectoritkImageVF43_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVF43_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVF43 self) -> std::vector< itkImageVF43_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF43_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVF43 self)"""
        return _itkImagePython.vectoritkImageVF43_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVF43_Pointer >::iterator":
        """
        erase(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::iterator pos) -> std::vector< itkImageVF43_Pointer >::iterator
        erase(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::iterator first, std::vector< itkImageVF43_Pointer >::iterator last) -> std::vector< itkImageVF43_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVF43_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVF43_Pointer)> self) -> vectoritkImageVF43
        __init__(std::vector<(itkImageVF43_Pointer)> self, vectoritkImageVF43 arg2) -> vectoritkImageVF43
        __init__(std::vector<(itkImageVF43_Pointer)> self, std::vector< itkImageVF43_Pointer >::size_type size) -> vectoritkImageVF43
        __init__(std::vector<(itkImageVF43_Pointer)> self, std::vector< itkImageVF43_Pointer >::size_type size, std::vector< itkImageVF43_Pointer >::value_type const & value) -> vectoritkImageVF43
        """
        _itkImagePython.vectoritkImageVF43_swiginit(self, _itkImagePython.new_vectoritkImageVF43(*args))

    def push_back(self, x: 'std::vector< itkImageVF43_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF43_push_back(self, x)


    def front(self) -> "std::vector< itkImageVF43_Pointer >::value_type const &":
        """front(vectoritkImageVF43 self) -> std::vector< itkImageVF43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF43_front(self)


    def back(self) -> "std::vector< itkImageVF43_Pointer >::value_type const &":
        """back(vectoritkImageVF43 self) -> std::vector< itkImageVF43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF43_back(self)


    def assign(self, n: 'std::vector< itkImageVF43_Pointer >::size_type', x: 'std::vector< itkImageVF43_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::size_type n, std::vector< itkImageVF43_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF43_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::size_type new_size)
        resize(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::size_type new_size, std::vector< itkImageVF43_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF43_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::iterator pos, std::vector< itkImageVF43_Pointer >::value_type const & x) -> std::vector< itkImageVF43_Pointer >::iterator
        insert(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::iterator pos, std::vector< itkImageVF43_Pointer >::size_type n, std::vector< itkImageVF43_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF43_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVF43_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVF43 self, std::vector< itkImageVF43_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVF43_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVF43_Pointer >::size_type":
        """capacity(vectoritkImageVF43 self) -> std::vector< itkImageVF43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF43_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF43
vectoritkImageVF43.iterator = new_instancemethod(_itkImagePython.vectoritkImageVF43_iterator, None, vectoritkImageVF43)
vectoritkImageVF43.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVF43___nonzero__, None, vectoritkImageVF43)
vectoritkImageVF43.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVF43___bool__, None, vectoritkImageVF43)
vectoritkImageVF43.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVF43___len__, None, vectoritkImageVF43)
vectoritkImageVF43.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF43___getslice__, None, vectoritkImageVF43)
vectoritkImageVF43.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF43___setslice__, None, vectoritkImageVF43)
vectoritkImageVF43.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF43___delslice__, None, vectoritkImageVF43)
vectoritkImageVF43.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF43___delitem__, None, vectoritkImageVF43)
vectoritkImageVF43.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF43___getitem__, None, vectoritkImageVF43)
vectoritkImageVF43.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF43___setitem__, None, vectoritkImageVF43)
vectoritkImageVF43.pop = new_instancemethod(_itkImagePython.vectoritkImageVF43_pop, None, vectoritkImageVF43)
vectoritkImageVF43.append = new_instancemethod(_itkImagePython.vectoritkImageVF43_append, None, vectoritkImageVF43)
vectoritkImageVF43.empty = new_instancemethod(_itkImagePython.vectoritkImageVF43_empty, None, vectoritkImageVF43)
vectoritkImageVF43.size = new_instancemethod(_itkImagePython.vectoritkImageVF43_size, None, vectoritkImageVF43)
vectoritkImageVF43.swap = new_instancemethod(_itkImagePython.vectoritkImageVF43_swap, None, vectoritkImageVF43)
vectoritkImageVF43.begin = new_instancemethod(_itkImagePython.vectoritkImageVF43_begin, None, vectoritkImageVF43)
vectoritkImageVF43.end = new_instancemethod(_itkImagePython.vectoritkImageVF43_end, None, vectoritkImageVF43)
vectoritkImageVF43.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVF43_rbegin, None, vectoritkImageVF43)
vectoritkImageVF43.rend = new_instancemethod(_itkImagePython.vectoritkImageVF43_rend, None, vectoritkImageVF43)
vectoritkImageVF43.clear = new_instancemethod(_itkImagePython.vectoritkImageVF43_clear, None, vectoritkImageVF43)
vectoritkImageVF43.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVF43_get_allocator, None, vectoritkImageVF43)
vectoritkImageVF43.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVF43_pop_back, None, vectoritkImageVF43)
vectoritkImageVF43.erase = new_instancemethod(_itkImagePython.vectoritkImageVF43_erase, None, vectoritkImageVF43)
vectoritkImageVF43.push_back = new_instancemethod(_itkImagePython.vectoritkImageVF43_push_back, None, vectoritkImageVF43)
vectoritkImageVF43.front = new_instancemethod(_itkImagePython.vectoritkImageVF43_front, None, vectoritkImageVF43)
vectoritkImageVF43.back = new_instancemethod(_itkImagePython.vectoritkImageVF43_back, None, vectoritkImageVF43)
vectoritkImageVF43.assign = new_instancemethod(_itkImagePython.vectoritkImageVF43_assign, None, vectoritkImageVF43)
vectoritkImageVF43.resize = new_instancemethod(_itkImagePython.vectoritkImageVF43_resize, None, vectoritkImageVF43)
vectoritkImageVF43.insert = new_instancemethod(_itkImagePython.vectoritkImageVF43_insert, None, vectoritkImageVF43)
vectoritkImageVF43.reserve = new_instancemethod(_itkImagePython.vectoritkImageVF43_reserve, None, vectoritkImageVF43)
vectoritkImageVF43.capacity = new_instancemethod(_itkImagePython.vectoritkImageVF43_capacity, None, vectoritkImageVF43)
vectoritkImageVF43_swigregister = _itkImagePython.vectoritkImageVF43_swigregister
vectoritkImageVF43_swigregister(vectoritkImageVF43)

class vectoritkImageCVF23(object):
    """Proxy of C++ std::vector<(itkImageCVF23_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageCVF23 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF23_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageCVF23 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF23___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageCVF23 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF23___bool__(self)


    def __len__(self) -> "std::vector< itkImageCVF23_Pointer >::size_type":
        """__len__(vectoritkImageCVF23 self) -> std::vector< itkImageCVF23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF23___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageCVF23_Pointer >::difference_type', j: 'std::vector< itkImageCVF23_Pointer >::difference_type') -> "std::vector< itkImageCVF23_Pointer,std::allocator< itkImageCVF23_Pointer > > *":
        """__getslice__(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::difference_type i, std::vector< itkImageCVF23_Pointer >::difference_type j) -> vectoritkImageCVF23"""
        return _itkImagePython.vectoritkImageCVF23___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::difference_type i, std::vector< itkImageCVF23_Pointer >::difference_type j)
        __setslice__(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::difference_type i, std::vector< itkImageCVF23_Pointer >::difference_type j, vectoritkImageCVF23 v)
        """
        return _itkImagePython.vectoritkImageCVF23___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageCVF23_Pointer >::difference_type', j: 'std::vector< itkImageCVF23_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::difference_type i, std::vector< itkImageCVF23_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageCVF23___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::difference_type i)
        __delitem__(vectoritkImageCVF23 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageCVF23___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageCVF23_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageCVF23 self, PySliceObject * slice) -> vectoritkImageCVF23
        __getitem__(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::difference_type i) -> std::vector< itkImageCVF23_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageCVF23___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageCVF23 self, PySliceObject * slice, vectoritkImageCVF23 v)
        __setitem__(vectoritkImageCVF23 self, PySliceObject * slice)
        __setitem__(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::difference_type i, std::vector< itkImageCVF23_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF23___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageCVF23_Pointer >::value_type":
        """pop(vectoritkImageCVF23 self) -> std::vector< itkImageCVF23_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF23_pop(self)


    def append(self, x: 'std::vector< itkImageCVF23_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF23_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageCVF23 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF23_empty(self)


    def size(self) -> "std::vector< itkImageCVF23_Pointer >::size_type":
        """size(vectoritkImageCVF23 self) -> std::vector< itkImageCVF23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF23_size(self)


    def swap(self, v: 'vectoritkImageCVF23') -> "void":
        """swap(vectoritkImageCVF23 self, vectoritkImageCVF23 v)"""
        return _itkImagePython.vectoritkImageCVF23_swap(self, v)


    def begin(self) -> "std::vector< itkImageCVF23_Pointer >::iterator":
        """begin(vectoritkImageCVF23 self) -> std::vector< itkImageCVF23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF23_begin(self)


    def end(self) -> "std::vector< itkImageCVF23_Pointer >::iterator":
        """end(vectoritkImageCVF23 self) -> std::vector< itkImageCVF23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF23_end(self)


    def rbegin(self) -> "std::vector< itkImageCVF23_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageCVF23 self) -> std::vector< itkImageCVF23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF23_rbegin(self)


    def rend(self) -> "std::vector< itkImageCVF23_Pointer >::reverse_iterator":
        """rend(vectoritkImageCVF23 self) -> std::vector< itkImageCVF23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF23_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageCVF23 self)"""
        return _itkImagePython.vectoritkImageCVF23_clear(self)


    def get_allocator(self) -> "std::vector< itkImageCVF23_Pointer >::allocator_type":
        """get_allocator(vectoritkImageCVF23 self) -> std::vector< itkImageCVF23_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF23_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageCVF23 self)"""
        return _itkImagePython.vectoritkImageCVF23_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageCVF23_Pointer >::iterator":
        """
        erase(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::iterator pos) -> std::vector< itkImageCVF23_Pointer >::iterator
        erase(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::iterator first, std::vector< itkImageCVF23_Pointer >::iterator last) -> std::vector< itkImageCVF23_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageCVF23_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageCVF23_Pointer)> self) -> vectoritkImageCVF23
        __init__(std::vector<(itkImageCVF23_Pointer)> self, vectoritkImageCVF23 arg2) -> vectoritkImageCVF23
        __init__(std::vector<(itkImageCVF23_Pointer)> self, std::vector< itkImageCVF23_Pointer >::size_type size) -> vectoritkImageCVF23
        __init__(std::vector<(itkImageCVF23_Pointer)> self, std::vector< itkImageCVF23_Pointer >::size_type size, std::vector< itkImageCVF23_Pointer >::value_type const & value) -> vectoritkImageCVF23
        """
        _itkImagePython.vectoritkImageCVF23_swiginit(self, _itkImagePython.new_vectoritkImageCVF23(*args))

    def push_back(self, x: 'std::vector< itkImageCVF23_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF23_push_back(self, x)


    def front(self) -> "std::vector< itkImageCVF23_Pointer >::value_type const &":
        """front(vectoritkImageCVF23 self) -> std::vector< itkImageCVF23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF23_front(self)


    def back(self) -> "std::vector< itkImageCVF23_Pointer >::value_type const &":
        """back(vectoritkImageCVF23 self) -> std::vector< itkImageCVF23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF23_back(self)


    def assign(self, n: 'std::vector< itkImageCVF23_Pointer >::size_type', x: 'std::vector< itkImageCVF23_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::size_type n, std::vector< itkImageCVF23_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF23_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::size_type new_size)
        resize(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::size_type new_size, std::vector< itkImageCVF23_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF23_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::iterator pos, std::vector< itkImageCVF23_Pointer >::value_type const & x) -> std::vector< itkImageCVF23_Pointer >::iterator
        insert(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::iterator pos, std::vector< itkImageCVF23_Pointer >::size_type n, std::vector< itkImageCVF23_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF23_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageCVF23_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageCVF23 self, std::vector< itkImageCVF23_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageCVF23_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageCVF23_Pointer >::size_type":
        """capacity(vectoritkImageCVF23 self) -> std::vector< itkImageCVF23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF23_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF23
vectoritkImageCVF23.iterator = new_instancemethod(_itkImagePython.vectoritkImageCVF23_iterator, None, vectoritkImageCVF23)
vectoritkImageCVF23.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageCVF23___nonzero__, None, vectoritkImageCVF23)
vectoritkImageCVF23.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageCVF23___bool__, None, vectoritkImageCVF23)
vectoritkImageCVF23.__len__ = new_instancemethod(_itkImagePython.vectoritkImageCVF23___len__, None, vectoritkImageCVF23)
vectoritkImageCVF23.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF23___getslice__, None, vectoritkImageCVF23)
vectoritkImageCVF23.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF23___setslice__, None, vectoritkImageCVF23)
vectoritkImageCVF23.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF23___delslice__, None, vectoritkImageCVF23)
vectoritkImageCVF23.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF23___delitem__, None, vectoritkImageCVF23)
vectoritkImageCVF23.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF23___getitem__, None, vectoritkImageCVF23)
vectoritkImageCVF23.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF23___setitem__, None, vectoritkImageCVF23)
vectoritkImageCVF23.pop = new_instancemethod(_itkImagePython.vectoritkImageCVF23_pop, None, vectoritkImageCVF23)
vectoritkImageCVF23.append = new_instancemethod(_itkImagePython.vectoritkImageCVF23_append, None, vectoritkImageCVF23)
vectoritkImageCVF23.empty = new_instancemethod(_itkImagePython.vectoritkImageCVF23_empty, None, vectoritkImageCVF23)
vectoritkImageCVF23.size = new_instancemethod(_itkImagePython.vectoritkImageCVF23_size, None, vectoritkImageCVF23)
vectoritkImageCVF23.swap = new_instancemethod(_itkImagePython.vectoritkImageCVF23_swap, None, vectoritkImageCVF23)
vectoritkImageCVF23.begin = new_instancemethod(_itkImagePython.vectoritkImageCVF23_begin, None, vectoritkImageCVF23)
vectoritkImageCVF23.end = new_instancemethod(_itkImagePython.vectoritkImageCVF23_end, None, vectoritkImageCVF23)
vectoritkImageCVF23.rbegin = new_instancemethod(_itkImagePython.vectoritkImageCVF23_rbegin, None, vectoritkImageCVF23)
vectoritkImageCVF23.rend = new_instancemethod(_itkImagePython.vectoritkImageCVF23_rend, None, vectoritkImageCVF23)
vectoritkImageCVF23.clear = new_instancemethod(_itkImagePython.vectoritkImageCVF23_clear, None, vectoritkImageCVF23)
vectoritkImageCVF23.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageCVF23_get_allocator, None, vectoritkImageCVF23)
vectoritkImageCVF23.pop_back = new_instancemethod(_itkImagePython.vectoritkImageCVF23_pop_back, None, vectoritkImageCVF23)
vectoritkImageCVF23.erase = new_instancemethod(_itkImagePython.vectoritkImageCVF23_erase, None, vectoritkImageCVF23)
vectoritkImageCVF23.push_back = new_instancemethod(_itkImagePython.vectoritkImageCVF23_push_back, None, vectoritkImageCVF23)
vectoritkImageCVF23.front = new_instancemethod(_itkImagePython.vectoritkImageCVF23_front, None, vectoritkImageCVF23)
vectoritkImageCVF23.back = new_instancemethod(_itkImagePython.vectoritkImageCVF23_back, None, vectoritkImageCVF23)
vectoritkImageCVF23.assign = new_instancemethod(_itkImagePython.vectoritkImageCVF23_assign, None, vectoritkImageCVF23)
vectoritkImageCVF23.resize = new_instancemethod(_itkImagePython.vectoritkImageCVF23_resize, None, vectoritkImageCVF23)
vectoritkImageCVF23.insert = new_instancemethod(_itkImagePython.vectoritkImageCVF23_insert, None, vectoritkImageCVF23)
vectoritkImageCVF23.reserve = new_instancemethod(_itkImagePython.vectoritkImageCVF23_reserve, None, vectoritkImageCVF23)
vectoritkImageCVF23.capacity = new_instancemethod(_itkImagePython.vectoritkImageCVF23_capacity, None, vectoritkImageCVF23)
vectoritkImageCVF23_swigregister = _itkImagePython.vectoritkImageCVF23_swigregister
vectoritkImageCVF23_swigregister(vectoritkImageCVF23)

class vectoritkImageCVF33(object):
    """Proxy of C++ std::vector<(itkImageCVF33_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageCVF33 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF33_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageCVF33 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF33___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageCVF33 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF33___bool__(self)


    def __len__(self) -> "std::vector< itkImageCVF33_Pointer >::size_type":
        """__len__(vectoritkImageCVF33 self) -> std::vector< itkImageCVF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF33___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageCVF33_Pointer >::difference_type', j: 'std::vector< itkImageCVF33_Pointer >::difference_type') -> "std::vector< itkImageCVF33_Pointer,std::allocator< itkImageCVF33_Pointer > > *":
        """__getslice__(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::difference_type i, std::vector< itkImageCVF33_Pointer >::difference_type j) -> vectoritkImageCVF33"""
        return _itkImagePython.vectoritkImageCVF33___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::difference_type i, std::vector< itkImageCVF33_Pointer >::difference_type j)
        __setslice__(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::difference_type i, std::vector< itkImageCVF33_Pointer >::difference_type j, vectoritkImageCVF33 v)
        """
        return _itkImagePython.vectoritkImageCVF33___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageCVF33_Pointer >::difference_type', j: 'std::vector< itkImageCVF33_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::difference_type i, std::vector< itkImageCVF33_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageCVF33___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::difference_type i)
        __delitem__(vectoritkImageCVF33 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageCVF33___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageCVF33_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageCVF33 self, PySliceObject * slice) -> vectoritkImageCVF33
        __getitem__(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::difference_type i) -> std::vector< itkImageCVF33_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageCVF33___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageCVF33 self, PySliceObject * slice, vectoritkImageCVF33 v)
        __setitem__(vectoritkImageCVF33 self, PySliceObject * slice)
        __setitem__(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::difference_type i, std::vector< itkImageCVF33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF33___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageCVF33_Pointer >::value_type":
        """pop(vectoritkImageCVF33 self) -> std::vector< itkImageCVF33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF33_pop(self)


    def append(self, x: 'std::vector< itkImageCVF33_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF33_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageCVF33 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF33_empty(self)


    def size(self) -> "std::vector< itkImageCVF33_Pointer >::size_type":
        """size(vectoritkImageCVF33 self) -> std::vector< itkImageCVF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF33_size(self)


    def swap(self, v: 'vectoritkImageCVF33') -> "void":
        """swap(vectoritkImageCVF33 self, vectoritkImageCVF33 v)"""
        return _itkImagePython.vectoritkImageCVF33_swap(self, v)


    def begin(self) -> "std::vector< itkImageCVF33_Pointer >::iterator":
        """begin(vectoritkImageCVF33 self) -> std::vector< itkImageCVF33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF33_begin(self)


    def end(self) -> "std::vector< itkImageCVF33_Pointer >::iterator":
        """end(vectoritkImageCVF33 self) -> std::vector< itkImageCVF33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF33_end(self)


    def rbegin(self) -> "std::vector< itkImageCVF33_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageCVF33 self) -> std::vector< itkImageCVF33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF33_rbegin(self)


    def rend(self) -> "std::vector< itkImageCVF33_Pointer >::reverse_iterator":
        """rend(vectoritkImageCVF33 self) -> std::vector< itkImageCVF33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF33_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageCVF33 self)"""
        return _itkImagePython.vectoritkImageCVF33_clear(self)


    def get_allocator(self) -> "std::vector< itkImageCVF33_Pointer >::allocator_type":
        """get_allocator(vectoritkImageCVF33 self) -> std::vector< itkImageCVF33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF33_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageCVF33 self)"""
        return _itkImagePython.vectoritkImageCVF33_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageCVF33_Pointer >::iterator":
        """
        erase(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::iterator pos) -> std::vector< itkImageCVF33_Pointer >::iterator
        erase(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::iterator first, std::vector< itkImageCVF33_Pointer >::iterator last) -> std::vector< itkImageCVF33_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageCVF33_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageCVF33_Pointer)> self) -> vectoritkImageCVF33
        __init__(std::vector<(itkImageCVF33_Pointer)> self, vectoritkImageCVF33 arg2) -> vectoritkImageCVF33
        __init__(std::vector<(itkImageCVF33_Pointer)> self, std::vector< itkImageCVF33_Pointer >::size_type size) -> vectoritkImageCVF33
        __init__(std::vector<(itkImageCVF33_Pointer)> self, std::vector< itkImageCVF33_Pointer >::size_type size, std::vector< itkImageCVF33_Pointer >::value_type const & value) -> vectoritkImageCVF33
        """
        _itkImagePython.vectoritkImageCVF33_swiginit(self, _itkImagePython.new_vectoritkImageCVF33(*args))

    def push_back(self, x: 'std::vector< itkImageCVF33_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF33_push_back(self, x)


    def front(self) -> "std::vector< itkImageCVF33_Pointer >::value_type const &":
        """front(vectoritkImageCVF33 self) -> std::vector< itkImageCVF33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF33_front(self)


    def back(self) -> "std::vector< itkImageCVF33_Pointer >::value_type const &":
        """back(vectoritkImageCVF33 self) -> std::vector< itkImageCVF33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF33_back(self)


    def assign(self, n: 'std::vector< itkImageCVF33_Pointer >::size_type', x: 'std::vector< itkImageCVF33_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::size_type n, std::vector< itkImageCVF33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF33_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::size_type new_size)
        resize(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::size_type new_size, std::vector< itkImageCVF33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF33_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::iterator pos, std::vector< itkImageCVF33_Pointer >::value_type const & x) -> std::vector< itkImageCVF33_Pointer >::iterator
        insert(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::iterator pos, std::vector< itkImageCVF33_Pointer >::size_type n, std::vector< itkImageCVF33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF33_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageCVF33_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageCVF33 self, std::vector< itkImageCVF33_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageCVF33_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageCVF33_Pointer >::size_type":
        """capacity(vectoritkImageCVF33 self) -> std::vector< itkImageCVF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF33_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF33
vectoritkImageCVF33.iterator = new_instancemethod(_itkImagePython.vectoritkImageCVF33_iterator, None, vectoritkImageCVF33)
vectoritkImageCVF33.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageCVF33___nonzero__, None, vectoritkImageCVF33)
vectoritkImageCVF33.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageCVF33___bool__, None, vectoritkImageCVF33)
vectoritkImageCVF33.__len__ = new_instancemethod(_itkImagePython.vectoritkImageCVF33___len__, None, vectoritkImageCVF33)
vectoritkImageCVF33.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF33___getslice__, None, vectoritkImageCVF33)
vectoritkImageCVF33.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF33___setslice__, None, vectoritkImageCVF33)
vectoritkImageCVF33.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF33___delslice__, None, vectoritkImageCVF33)
vectoritkImageCVF33.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF33___delitem__, None, vectoritkImageCVF33)
vectoritkImageCVF33.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF33___getitem__, None, vectoritkImageCVF33)
vectoritkImageCVF33.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF33___setitem__, None, vectoritkImageCVF33)
vectoritkImageCVF33.pop = new_instancemethod(_itkImagePython.vectoritkImageCVF33_pop, None, vectoritkImageCVF33)
vectoritkImageCVF33.append = new_instancemethod(_itkImagePython.vectoritkImageCVF33_append, None, vectoritkImageCVF33)
vectoritkImageCVF33.empty = new_instancemethod(_itkImagePython.vectoritkImageCVF33_empty, None, vectoritkImageCVF33)
vectoritkImageCVF33.size = new_instancemethod(_itkImagePython.vectoritkImageCVF33_size, None, vectoritkImageCVF33)
vectoritkImageCVF33.swap = new_instancemethod(_itkImagePython.vectoritkImageCVF33_swap, None, vectoritkImageCVF33)
vectoritkImageCVF33.begin = new_instancemethod(_itkImagePython.vectoritkImageCVF33_begin, None, vectoritkImageCVF33)
vectoritkImageCVF33.end = new_instancemethod(_itkImagePython.vectoritkImageCVF33_end, None, vectoritkImageCVF33)
vectoritkImageCVF33.rbegin = new_instancemethod(_itkImagePython.vectoritkImageCVF33_rbegin, None, vectoritkImageCVF33)
vectoritkImageCVF33.rend = new_instancemethod(_itkImagePython.vectoritkImageCVF33_rend, None, vectoritkImageCVF33)
vectoritkImageCVF33.clear = new_instancemethod(_itkImagePython.vectoritkImageCVF33_clear, None, vectoritkImageCVF33)
vectoritkImageCVF33.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageCVF33_get_allocator, None, vectoritkImageCVF33)
vectoritkImageCVF33.pop_back = new_instancemethod(_itkImagePython.vectoritkImageCVF33_pop_back, None, vectoritkImageCVF33)
vectoritkImageCVF33.erase = new_instancemethod(_itkImagePython.vectoritkImageCVF33_erase, None, vectoritkImageCVF33)
vectoritkImageCVF33.push_back = new_instancemethod(_itkImagePython.vectoritkImageCVF33_push_back, None, vectoritkImageCVF33)
vectoritkImageCVF33.front = new_instancemethod(_itkImagePython.vectoritkImageCVF33_front, None, vectoritkImageCVF33)
vectoritkImageCVF33.back = new_instancemethod(_itkImagePython.vectoritkImageCVF33_back, None, vectoritkImageCVF33)
vectoritkImageCVF33.assign = new_instancemethod(_itkImagePython.vectoritkImageCVF33_assign, None, vectoritkImageCVF33)
vectoritkImageCVF33.resize = new_instancemethod(_itkImagePython.vectoritkImageCVF33_resize, None, vectoritkImageCVF33)
vectoritkImageCVF33.insert = new_instancemethod(_itkImagePython.vectoritkImageCVF33_insert, None, vectoritkImageCVF33)
vectoritkImageCVF33.reserve = new_instancemethod(_itkImagePython.vectoritkImageCVF33_reserve, None, vectoritkImageCVF33)
vectoritkImageCVF33.capacity = new_instancemethod(_itkImagePython.vectoritkImageCVF33_capacity, None, vectoritkImageCVF33)
vectoritkImageCVF33_swigregister = _itkImagePython.vectoritkImageCVF33_swigregister
vectoritkImageCVF33_swigregister(vectoritkImageCVF33)

class vectoritkImageCVF43(object):
    """Proxy of C++ std::vector<(itkImageCVF43_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageCVF43 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF43_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageCVF43 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF43___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageCVF43 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF43___bool__(self)


    def __len__(self) -> "std::vector< itkImageCVF43_Pointer >::size_type":
        """__len__(vectoritkImageCVF43 self) -> std::vector< itkImageCVF43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF43___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageCVF43_Pointer >::difference_type', j: 'std::vector< itkImageCVF43_Pointer >::difference_type') -> "std::vector< itkImageCVF43_Pointer,std::allocator< itkImageCVF43_Pointer > > *":
        """__getslice__(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::difference_type i, std::vector< itkImageCVF43_Pointer >::difference_type j) -> vectoritkImageCVF43"""
        return _itkImagePython.vectoritkImageCVF43___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::difference_type i, std::vector< itkImageCVF43_Pointer >::difference_type j)
        __setslice__(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::difference_type i, std::vector< itkImageCVF43_Pointer >::difference_type j, vectoritkImageCVF43 v)
        """
        return _itkImagePython.vectoritkImageCVF43___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageCVF43_Pointer >::difference_type', j: 'std::vector< itkImageCVF43_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::difference_type i, std::vector< itkImageCVF43_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageCVF43___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::difference_type i)
        __delitem__(vectoritkImageCVF43 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageCVF43___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageCVF43_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageCVF43 self, PySliceObject * slice) -> vectoritkImageCVF43
        __getitem__(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::difference_type i) -> std::vector< itkImageCVF43_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageCVF43___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageCVF43 self, PySliceObject * slice, vectoritkImageCVF43 v)
        __setitem__(vectoritkImageCVF43 self, PySliceObject * slice)
        __setitem__(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::difference_type i, std::vector< itkImageCVF43_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF43___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageCVF43_Pointer >::value_type":
        """pop(vectoritkImageCVF43 self) -> std::vector< itkImageCVF43_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF43_pop(self)


    def append(self, x: 'std::vector< itkImageCVF43_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF43_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageCVF43 self) -> bool"""
        return _itkImagePython.vectoritkImageCVF43_empty(self)


    def size(self) -> "std::vector< itkImageCVF43_Pointer >::size_type":
        """size(vectoritkImageCVF43 self) -> std::vector< itkImageCVF43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF43_size(self)


    def swap(self, v: 'vectoritkImageCVF43') -> "void":
        """swap(vectoritkImageCVF43 self, vectoritkImageCVF43 v)"""
        return _itkImagePython.vectoritkImageCVF43_swap(self, v)


    def begin(self) -> "std::vector< itkImageCVF43_Pointer >::iterator":
        """begin(vectoritkImageCVF43 self) -> std::vector< itkImageCVF43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF43_begin(self)


    def end(self) -> "std::vector< itkImageCVF43_Pointer >::iterator":
        """end(vectoritkImageCVF43 self) -> std::vector< itkImageCVF43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF43_end(self)


    def rbegin(self) -> "std::vector< itkImageCVF43_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageCVF43 self) -> std::vector< itkImageCVF43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF43_rbegin(self)


    def rend(self) -> "std::vector< itkImageCVF43_Pointer >::reverse_iterator":
        """rend(vectoritkImageCVF43 self) -> std::vector< itkImageCVF43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF43_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageCVF43 self)"""
        return _itkImagePython.vectoritkImageCVF43_clear(self)


    def get_allocator(self) -> "std::vector< itkImageCVF43_Pointer >::allocator_type":
        """get_allocator(vectoritkImageCVF43 self) -> std::vector< itkImageCVF43_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF43_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageCVF43 self)"""
        return _itkImagePython.vectoritkImageCVF43_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageCVF43_Pointer >::iterator":
        """
        erase(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::iterator pos) -> std::vector< itkImageCVF43_Pointer >::iterator
        erase(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::iterator first, std::vector< itkImageCVF43_Pointer >::iterator last) -> std::vector< itkImageCVF43_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageCVF43_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageCVF43_Pointer)> self) -> vectoritkImageCVF43
        __init__(std::vector<(itkImageCVF43_Pointer)> self, vectoritkImageCVF43 arg2) -> vectoritkImageCVF43
        __init__(std::vector<(itkImageCVF43_Pointer)> self, std::vector< itkImageCVF43_Pointer >::size_type size) -> vectoritkImageCVF43
        __init__(std::vector<(itkImageCVF43_Pointer)> self, std::vector< itkImageCVF43_Pointer >::size_type size, std::vector< itkImageCVF43_Pointer >::value_type const & value) -> vectoritkImageCVF43
        """
        _itkImagePython.vectoritkImageCVF43_swiginit(self, _itkImagePython.new_vectoritkImageCVF43(*args))

    def push_back(self, x: 'std::vector< itkImageCVF43_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF43_push_back(self, x)


    def front(self) -> "std::vector< itkImageCVF43_Pointer >::value_type const &":
        """front(vectoritkImageCVF43 self) -> std::vector< itkImageCVF43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF43_front(self)


    def back(self) -> "std::vector< itkImageCVF43_Pointer >::value_type const &":
        """back(vectoritkImageCVF43 self) -> std::vector< itkImageCVF43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF43_back(self)


    def assign(self, n: 'std::vector< itkImageCVF43_Pointer >::size_type', x: 'std::vector< itkImageCVF43_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::size_type n, std::vector< itkImageCVF43_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVF43_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::size_type new_size)
        resize(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::size_type new_size, std::vector< itkImageCVF43_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF43_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::iterator pos, std::vector< itkImageCVF43_Pointer >::value_type const & x) -> std::vector< itkImageCVF43_Pointer >::iterator
        insert(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::iterator pos, std::vector< itkImageCVF43_Pointer >::size_type n, std::vector< itkImageCVF43_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVF43_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageCVF43_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageCVF43 self, std::vector< itkImageCVF43_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageCVF43_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageCVF43_Pointer >::size_type":
        """capacity(vectoritkImageCVF43 self) -> std::vector< itkImageCVF43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF43_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF43
vectoritkImageCVF43.iterator = new_instancemethod(_itkImagePython.vectoritkImageCVF43_iterator, None, vectoritkImageCVF43)
vectoritkImageCVF43.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageCVF43___nonzero__, None, vectoritkImageCVF43)
vectoritkImageCVF43.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageCVF43___bool__, None, vectoritkImageCVF43)
vectoritkImageCVF43.__len__ = new_instancemethod(_itkImagePython.vectoritkImageCVF43___len__, None, vectoritkImageCVF43)
vectoritkImageCVF43.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF43___getslice__, None, vectoritkImageCVF43)
vectoritkImageCVF43.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF43___setslice__, None, vectoritkImageCVF43)
vectoritkImageCVF43.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVF43___delslice__, None, vectoritkImageCVF43)
vectoritkImageCVF43.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF43___delitem__, None, vectoritkImageCVF43)
vectoritkImageCVF43.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF43___getitem__, None, vectoritkImageCVF43)
vectoritkImageCVF43.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVF43___setitem__, None, vectoritkImageCVF43)
vectoritkImageCVF43.pop = new_instancemethod(_itkImagePython.vectoritkImageCVF43_pop, None, vectoritkImageCVF43)
vectoritkImageCVF43.append = new_instancemethod(_itkImagePython.vectoritkImageCVF43_append, None, vectoritkImageCVF43)
vectoritkImageCVF43.empty = new_instancemethod(_itkImagePython.vectoritkImageCVF43_empty, None, vectoritkImageCVF43)
vectoritkImageCVF43.size = new_instancemethod(_itkImagePython.vectoritkImageCVF43_size, None, vectoritkImageCVF43)
vectoritkImageCVF43.swap = new_instancemethod(_itkImagePython.vectoritkImageCVF43_swap, None, vectoritkImageCVF43)
vectoritkImageCVF43.begin = new_instancemethod(_itkImagePython.vectoritkImageCVF43_begin, None, vectoritkImageCVF43)
vectoritkImageCVF43.end = new_instancemethod(_itkImagePython.vectoritkImageCVF43_end, None, vectoritkImageCVF43)
vectoritkImageCVF43.rbegin = new_instancemethod(_itkImagePython.vectoritkImageCVF43_rbegin, None, vectoritkImageCVF43)
vectoritkImageCVF43.rend = new_instancemethod(_itkImagePython.vectoritkImageCVF43_rend, None, vectoritkImageCVF43)
vectoritkImageCVF43.clear = new_instancemethod(_itkImagePython.vectoritkImageCVF43_clear, None, vectoritkImageCVF43)
vectoritkImageCVF43.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageCVF43_get_allocator, None, vectoritkImageCVF43)
vectoritkImageCVF43.pop_back = new_instancemethod(_itkImagePython.vectoritkImageCVF43_pop_back, None, vectoritkImageCVF43)
vectoritkImageCVF43.erase = new_instancemethod(_itkImagePython.vectoritkImageCVF43_erase, None, vectoritkImageCVF43)
vectoritkImageCVF43.push_back = new_instancemethod(_itkImagePython.vectoritkImageCVF43_push_back, None, vectoritkImageCVF43)
vectoritkImageCVF43.front = new_instancemethod(_itkImagePython.vectoritkImageCVF43_front, None, vectoritkImageCVF43)
vectoritkImageCVF43.back = new_instancemethod(_itkImagePython.vectoritkImageCVF43_back, None, vectoritkImageCVF43)
vectoritkImageCVF43.assign = new_instancemethod(_itkImagePython.vectoritkImageCVF43_assign, None, vectoritkImageCVF43)
vectoritkImageCVF43.resize = new_instancemethod(_itkImagePython.vectoritkImageCVF43_resize, None, vectoritkImageCVF43)
vectoritkImageCVF43.insert = new_instancemethod(_itkImagePython.vectoritkImageCVF43_insert, None, vectoritkImageCVF43)
vectoritkImageCVF43.reserve = new_instancemethod(_itkImagePython.vectoritkImageCVF43_reserve, None, vectoritkImageCVF43)
vectoritkImageCVF43.capacity = new_instancemethod(_itkImagePython.vectoritkImageCVF43_capacity, None, vectoritkImageCVF43)
vectoritkImageCVF43_swigregister = _itkImagePython.vectoritkImageCVF43_swigregister
vectoritkImageCVF43_swigregister(vectoritkImageCVF43)

class vectoritkImageSS3(object):
    """Proxy of C++ std::vector<(itkImageSS3_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageSS3 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSS3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageSS3 self) -> bool"""
        return _itkImagePython.vectoritkImageSS3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageSS3 self) -> bool"""
        return _itkImagePython.vectoritkImageSS3___bool__(self)


    def __len__(self) -> "std::vector< itkImageSS3_Pointer >::size_type":
        """__len__(vectoritkImageSS3 self) -> std::vector< itkImageSS3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS3___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageSS3_Pointer >::difference_type', j: 'std::vector< itkImageSS3_Pointer >::difference_type') -> "std::vector< itkImageSS3_Pointer,std::allocator< itkImageSS3_Pointer > > *":
        """__getslice__(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::difference_type i, std::vector< itkImageSS3_Pointer >::difference_type j) -> vectoritkImageSS3"""
        return _itkImagePython.vectoritkImageSS3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::difference_type i, std::vector< itkImageSS3_Pointer >::difference_type j)
        __setslice__(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::difference_type i, std::vector< itkImageSS3_Pointer >::difference_type j, vectoritkImageSS3 v)
        """
        return _itkImagePython.vectoritkImageSS3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageSS3_Pointer >::difference_type', j: 'std::vector< itkImageSS3_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::difference_type i, std::vector< itkImageSS3_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageSS3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::difference_type i)
        __delitem__(vectoritkImageSS3 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageSS3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageSS3_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageSS3 self, PySliceObject * slice) -> vectoritkImageSS3
        __getitem__(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::difference_type i) -> std::vector< itkImageSS3_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageSS3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageSS3 self, PySliceObject * slice, vectoritkImageSS3 v)
        __setitem__(vectoritkImageSS3 self, PySliceObject * slice)
        __setitem__(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::difference_type i, std::vector< itkImageSS3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageSS3___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageSS3_Pointer >::value_type":
        """pop(vectoritkImageSS3 self) -> std::vector< itkImageSS3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSS3_pop(self)


    def append(self, x: 'std::vector< itkImageSS3_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageSS3_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageSS3 self) -> bool"""
        return _itkImagePython.vectoritkImageSS3_empty(self)


    def size(self) -> "std::vector< itkImageSS3_Pointer >::size_type":
        """size(vectoritkImageSS3 self) -> std::vector< itkImageSS3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS3_size(self)


    def swap(self, v: 'vectoritkImageSS3') -> "void":
        """swap(vectoritkImageSS3 self, vectoritkImageSS3 v)"""
        return _itkImagePython.vectoritkImageSS3_swap(self, v)


    def begin(self) -> "std::vector< itkImageSS3_Pointer >::iterator":
        """begin(vectoritkImageSS3 self) -> std::vector< itkImageSS3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSS3_begin(self)


    def end(self) -> "std::vector< itkImageSS3_Pointer >::iterator":
        """end(vectoritkImageSS3 self) -> std::vector< itkImageSS3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSS3_end(self)


    def rbegin(self) -> "std::vector< itkImageSS3_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageSS3 self) -> std::vector< itkImageSS3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSS3_rbegin(self)


    def rend(self) -> "std::vector< itkImageSS3_Pointer >::reverse_iterator":
        """rend(vectoritkImageSS3 self) -> std::vector< itkImageSS3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSS3_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageSS3 self)"""
        return _itkImagePython.vectoritkImageSS3_clear(self)


    def get_allocator(self) -> "std::vector< itkImageSS3_Pointer >::allocator_type":
        """get_allocator(vectoritkImageSS3 self) -> std::vector< itkImageSS3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSS3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageSS3 self)"""
        return _itkImagePython.vectoritkImageSS3_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageSS3_Pointer >::iterator":
        """
        erase(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::iterator pos) -> std::vector< itkImageSS3_Pointer >::iterator
        erase(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::iterator first, std::vector< itkImageSS3_Pointer >::iterator last) -> std::vector< itkImageSS3_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageSS3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageSS3_Pointer)> self) -> vectoritkImageSS3
        __init__(std::vector<(itkImageSS3_Pointer)> self, vectoritkImageSS3 arg2) -> vectoritkImageSS3
        __init__(std::vector<(itkImageSS3_Pointer)> self, std::vector< itkImageSS3_Pointer >::size_type size) -> vectoritkImageSS3
        __init__(std::vector<(itkImageSS3_Pointer)> self, std::vector< itkImageSS3_Pointer >::size_type size, std::vector< itkImageSS3_Pointer >::value_type const & value) -> vectoritkImageSS3
        """
        _itkImagePython.vectoritkImageSS3_swiginit(self, _itkImagePython.new_vectoritkImageSS3(*args))

    def push_back(self, x: 'std::vector< itkImageSS3_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageSS3_push_back(self, x)


    def front(self) -> "std::vector< itkImageSS3_Pointer >::value_type const &":
        """front(vectoritkImageSS3 self) -> std::vector< itkImageSS3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSS3_front(self)


    def back(self) -> "std::vector< itkImageSS3_Pointer >::value_type const &":
        """back(vectoritkImageSS3 self) -> std::vector< itkImageSS3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSS3_back(self)


    def assign(self, n: 'std::vector< itkImageSS3_Pointer >::size_type', x: 'std::vector< itkImageSS3_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::size_type n, std::vector< itkImageSS3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageSS3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::size_type new_size)
        resize(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::size_type new_size, std::vector< itkImageSS3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageSS3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::iterator pos, std::vector< itkImageSS3_Pointer >::value_type const & x) -> std::vector< itkImageSS3_Pointer >::iterator
        insert(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::iterator pos, std::vector< itkImageSS3_Pointer >::size_type n, std::vector< itkImageSS3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageSS3_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageSS3_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageSS3 self, std::vector< itkImageSS3_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageSS3_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageSS3_Pointer >::size_type":
        """capacity(vectoritkImageSS3 self) -> std::vector< itkImageSS3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS3_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSS3
vectoritkImageSS3.iterator = new_instancemethod(_itkImagePython.vectoritkImageSS3_iterator, None, vectoritkImageSS3)
vectoritkImageSS3.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageSS3___nonzero__, None, vectoritkImageSS3)
vectoritkImageSS3.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageSS3___bool__, None, vectoritkImageSS3)
vectoritkImageSS3.__len__ = new_instancemethod(_itkImagePython.vectoritkImageSS3___len__, None, vectoritkImageSS3)
vectoritkImageSS3.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageSS3___getslice__, None, vectoritkImageSS3)
vectoritkImageSS3.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageSS3___setslice__, None, vectoritkImageSS3)
vectoritkImageSS3.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageSS3___delslice__, None, vectoritkImageSS3)
vectoritkImageSS3.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageSS3___delitem__, None, vectoritkImageSS3)
vectoritkImageSS3.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageSS3___getitem__, None, vectoritkImageSS3)
vectoritkImageSS3.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageSS3___setitem__, None, vectoritkImageSS3)
vectoritkImageSS3.pop = new_instancemethod(_itkImagePython.vectoritkImageSS3_pop, None, vectoritkImageSS3)
vectoritkImageSS3.append = new_instancemethod(_itkImagePython.vectoritkImageSS3_append, None, vectoritkImageSS3)
vectoritkImageSS3.empty = new_instancemethod(_itkImagePython.vectoritkImageSS3_empty, None, vectoritkImageSS3)
vectoritkImageSS3.size = new_instancemethod(_itkImagePython.vectoritkImageSS3_size, None, vectoritkImageSS3)
vectoritkImageSS3.swap = new_instancemethod(_itkImagePython.vectoritkImageSS3_swap, None, vectoritkImageSS3)
vectoritkImageSS3.begin = new_instancemethod(_itkImagePython.vectoritkImageSS3_begin, None, vectoritkImageSS3)
vectoritkImageSS3.end = new_instancemethod(_itkImagePython.vectoritkImageSS3_end, None, vectoritkImageSS3)
vectoritkImageSS3.rbegin = new_instancemethod(_itkImagePython.vectoritkImageSS3_rbegin, None, vectoritkImageSS3)
vectoritkImageSS3.rend = new_instancemethod(_itkImagePython.vectoritkImageSS3_rend, None, vectoritkImageSS3)
vectoritkImageSS3.clear = new_instancemethod(_itkImagePython.vectoritkImageSS3_clear, None, vectoritkImageSS3)
vectoritkImageSS3.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageSS3_get_allocator, None, vectoritkImageSS3)
vectoritkImageSS3.pop_back = new_instancemethod(_itkImagePython.vectoritkImageSS3_pop_back, None, vectoritkImageSS3)
vectoritkImageSS3.erase = new_instancemethod(_itkImagePython.vectoritkImageSS3_erase, None, vectoritkImageSS3)
vectoritkImageSS3.push_back = new_instancemethod(_itkImagePython.vectoritkImageSS3_push_back, None, vectoritkImageSS3)
vectoritkImageSS3.front = new_instancemethod(_itkImagePython.vectoritkImageSS3_front, None, vectoritkImageSS3)
vectoritkImageSS3.back = new_instancemethod(_itkImagePython.vectoritkImageSS3_back, None, vectoritkImageSS3)
vectoritkImageSS3.assign = new_instancemethod(_itkImagePython.vectoritkImageSS3_assign, None, vectoritkImageSS3)
vectoritkImageSS3.resize = new_instancemethod(_itkImagePython.vectoritkImageSS3_resize, None, vectoritkImageSS3)
vectoritkImageSS3.insert = new_instancemethod(_itkImagePython.vectoritkImageSS3_insert, None, vectoritkImageSS3)
vectoritkImageSS3.reserve = new_instancemethod(_itkImagePython.vectoritkImageSS3_reserve, None, vectoritkImageSS3)
vectoritkImageSS3.capacity = new_instancemethod(_itkImagePython.vectoritkImageSS3_capacity, None, vectoritkImageSS3)
vectoritkImageSS3_swigregister = _itkImagePython.vectoritkImageSS3_swigregister
vectoritkImageSS3_swigregister(vectoritkImageSS3)

class vectoritkImageUC3(object):
    """Proxy of C++ std::vector<(itkImageUC3_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageUC3 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUC3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageUC3 self) -> bool"""
        return _itkImagePython.vectoritkImageUC3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageUC3 self) -> bool"""
        return _itkImagePython.vectoritkImageUC3___bool__(self)


    def __len__(self) -> "std::vector< itkImageUC3_Pointer >::size_type":
        """__len__(vectoritkImageUC3 self) -> std::vector< itkImageUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC3___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageUC3_Pointer >::difference_type', j: 'std::vector< itkImageUC3_Pointer >::difference_type') -> "std::vector< itkImageUC3_Pointer,std::allocator< itkImageUC3_Pointer > > *":
        """__getslice__(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::difference_type i, std::vector< itkImageUC3_Pointer >::difference_type j) -> vectoritkImageUC3"""
        return _itkImagePython.vectoritkImageUC3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::difference_type i, std::vector< itkImageUC3_Pointer >::difference_type j)
        __setslice__(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::difference_type i, std::vector< itkImageUC3_Pointer >::difference_type j, vectoritkImageUC3 v)
        """
        return _itkImagePython.vectoritkImageUC3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageUC3_Pointer >::difference_type', j: 'std::vector< itkImageUC3_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::difference_type i, std::vector< itkImageUC3_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageUC3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::difference_type i)
        __delitem__(vectoritkImageUC3 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageUC3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageUC3_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageUC3 self, PySliceObject * slice) -> vectoritkImageUC3
        __getitem__(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::difference_type i) -> std::vector< itkImageUC3_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageUC3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageUC3 self, PySliceObject * slice, vectoritkImageUC3 v)
        __setitem__(vectoritkImageUC3 self, PySliceObject * slice)
        __setitem__(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::difference_type i, std::vector< itkImageUC3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUC3___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageUC3_Pointer >::value_type":
        """pop(vectoritkImageUC3 self) -> std::vector< itkImageUC3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUC3_pop(self)


    def append(self, x: 'std::vector< itkImageUC3_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUC3_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageUC3 self) -> bool"""
        return _itkImagePython.vectoritkImageUC3_empty(self)


    def size(self) -> "std::vector< itkImageUC3_Pointer >::size_type":
        """size(vectoritkImageUC3 self) -> std::vector< itkImageUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC3_size(self)


    def swap(self, v: 'vectoritkImageUC3') -> "void":
        """swap(vectoritkImageUC3 self, vectoritkImageUC3 v)"""
        return _itkImagePython.vectoritkImageUC3_swap(self, v)


    def begin(self) -> "std::vector< itkImageUC3_Pointer >::iterator":
        """begin(vectoritkImageUC3 self) -> std::vector< itkImageUC3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUC3_begin(self)


    def end(self) -> "std::vector< itkImageUC3_Pointer >::iterator":
        """end(vectoritkImageUC3 self) -> std::vector< itkImageUC3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUC3_end(self)


    def rbegin(self) -> "std::vector< itkImageUC3_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageUC3 self) -> std::vector< itkImageUC3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUC3_rbegin(self)


    def rend(self) -> "std::vector< itkImageUC3_Pointer >::reverse_iterator":
        """rend(vectoritkImageUC3 self) -> std::vector< itkImageUC3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUC3_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageUC3 self)"""
        return _itkImagePython.vectoritkImageUC3_clear(self)


    def get_allocator(self) -> "std::vector< itkImageUC3_Pointer >::allocator_type":
        """get_allocator(vectoritkImageUC3 self) -> std::vector< itkImageUC3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUC3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageUC3 self)"""
        return _itkImagePython.vectoritkImageUC3_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageUC3_Pointer >::iterator":
        """
        erase(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::iterator pos) -> std::vector< itkImageUC3_Pointer >::iterator
        erase(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::iterator first, std::vector< itkImageUC3_Pointer >::iterator last) -> std::vector< itkImageUC3_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageUC3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageUC3_Pointer)> self) -> vectoritkImageUC3
        __init__(std::vector<(itkImageUC3_Pointer)> self, vectoritkImageUC3 arg2) -> vectoritkImageUC3
        __init__(std::vector<(itkImageUC3_Pointer)> self, std::vector< itkImageUC3_Pointer >::size_type size) -> vectoritkImageUC3
        __init__(std::vector<(itkImageUC3_Pointer)> self, std::vector< itkImageUC3_Pointer >::size_type size, std::vector< itkImageUC3_Pointer >::value_type const & value) -> vectoritkImageUC3
        """
        _itkImagePython.vectoritkImageUC3_swiginit(self, _itkImagePython.new_vectoritkImageUC3(*args))

    def push_back(self, x: 'std::vector< itkImageUC3_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUC3_push_back(self, x)


    def front(self) -> "std::vector< itkImageUC3_Pointer >::value_type const &":
        """front(vectoritkImageUC3 self) -> std::vector< itkImageUC3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUC3_front(self)


    def back(self) -> "std::vector< itkImageUC3_Pointer >::value_type const &":
        """back(vectoritkImageUC3 self) -> std::vector< itkImageUC3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUC3_back(self)


    def assign(self, n: 'std::vector< itkImageUC3_Pointer >::size_type', x: 'std::vector< itkImageUC3_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::size_type n, std::vector< itkImageUC3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUC3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::size_type new_size)
        resize(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::size_type new_size, std::vector< itkImageUC3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUC3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::iterator pos, std::vector< itkImageUC3_Pointer >::value_type const & x) -> std::vector< itkImageUC3_Pointer >::iterator
        insert(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::iterator pos, std::vector< itkImageUC3_Pointer >::size_type n, std::vector< itkImageUC3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUC3_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageUC3_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageUC3 self, std::vector< itkImageUC3_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageUC3_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageUC3_Pointer >::size_type":
        """capacity(vectoritkImageUC3 self) -> std::vector< itkImageUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC3_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUC3
vectoritkImageUC3.iterator = new_instancemethod(_itkImagePython.vectoritkImageUC3_iterator, None, vectoritkImageUC3)
vectoritkImageUC3.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageUC3___nonzero__, None, vectoritkImageUC3)
vectoritkImageUC3.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageUC3___bool__, None, vectoritkImageUC3)
vectoritkImageUC3.__len__ = new_instancemethod(_itkImagePython.vectoritkImageUC3___len__, None, vectoritkImageUC3)
vectoritkImageUC3.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageUC3___getslice__, None, vectoritkImageUC3)
vectoritkImageUC3.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageUC3___setslice__, None, vectoritkImageUC3)
vectoritkImageUC3.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageUC3___delslice__, None, vectoritkImageUC3)
vectoritkImageUC3.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageUC3___delitem__, None, vectoritkImageUC3)
vectoritkImageUC3.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageUC3___getitem__, None, vectoritkImageUC3)
vectoritkImageUC3.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageUC3___setitem__, None, vectoritkImageUC3)
vectoritkImageUC3.pop = new_instancemethod(_itkImagePython.vectoritkImageUC3_pop, None, vectoritkImageUC3)
vectoritkImageUC3.append = new_instancemethod(_itkImagePython.vectoritkImageUC3_append, None, vectoritkImageUC3)
vectoritkImageUC3.empty = new_instancemethod(_itkImagePython.vectoritkImageUC3_empty, None, vectoritkImageUC3)
vectoritkImageUC3.size = new_instancemethod(_itkImagePython.vectoritkImageUC3_size, None, vectoritkImageUC3)
vectoritkImageUC3.swap = new_instancemethod(_itkImagePython.vectoritkImageUC3_swap, None, vectoritkImageUC3)
vectoritkImageUC3.begin = new_instancemethod(_itkImagePython.vectoritkImageUC3_begin, None, vectoritkImageUC3)
vectoritkImageUC3.end = new_instancemethod(_itkImagePython.vectoritkImageUC3_end, None, vectoritkImageUC3)
vectoritkImageUC3.rbegin = new_instancemethod(_itkImagePython.vectoritkImageUC3_rbegin, None, vectoritkImageUC3)
vectoritkImageUC3.rend = new_instancemethod(_itkImagePython.vectoritkImageUC3_rend, None, vectoritkImageUC3)
vectoritkImageUC3.clear = new_instancemethod(_itkImagePython.vectoritkImageUC3_clear, None, vectoritkImageUC3)
vectoritkImageUC3.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageUC3_get_allocator, None, vectoritkImageUC3)
vectoritkImageUC3.pop_back = new_instancemethod(_itkImagePython.vectoritkImageUC3_pop_back, None, vectoritkImageUC3)
vectoritkImageUC3.erase = new_instancemethod(_itkImagePython.vectoritkImageUC3_erase, None, vectoritkImageUC3)
vectoritkImageUC3.push_back = new_instancemethod(_itkImagePython.vectoritkImageUC3_push_back, None, vectoritkImageUC3)
vectoritkImageUC3.front = new_instancemethod(_itkImagePython.vectoritkImageUC3_front, None, vectoritkImageUC3)
vectoritkImageUC3.back = new_instancemethod(_itkImagePython.vectoritkImageUC3_back, None, vectoritkImageUC3)
vectoritkImageUC3.assign = new_instancemethod(_itkImagePython.vectoritkImageUC3_assign, None, vectoritkImageUC3)
vectoritkImageUC3.resize = new_instancemethod(_itkImagePython.vectoritkImageUC3_resize, None, vectoritkImageUC3)
vectoritkImageUC3.insert = new_instancemethod(_itkImagePython.vectoritkImageUC3_insert, None, vectoritkImageUC3)
vectoritkImageUC3.reserve = new_instancemethod(_itkImagePython.vectoritkImageUC3_reserve, None, vectoritkImageUC3)
vectoritkImageUC3.capacity = new_instancemethod(_itkImagePython.vectoritkImageUC3_capacity, None, vectoritkImageUC3)
vectoritkImageUC3_swigregister = _itkImagePython.vectoritkImageUC3_swigregister
vectoritkImageUC3_swigregister(vectoritkImageUC3)

class vectoritkImageUS3(object):
    """Proxy of C++ std::vector<(itkImageUS3_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageUS3 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUS3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageUS3 self) -> bool"""
        return _itkImagePython.vectoritkImageUS3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageUS3 self) -> bool"""
        return _itkImagePython.vectoritkImageUS3___bool__(self)


    def __len__(self) -> "std::vector< itkImageUS3_Pointer >::size_type":
        """__len__(vectoritkImageUS3 self) -> std::vector< itkImageUS3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS3___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageUS3_Pointer >::difference_type', j: 'std::vector< itkImageUS3_Pointer >::difference_type') -> "std::vector< itkImageUS3_Pointer,std::allocator< itkImageUS3_Pointer > > *":
        """__getslice__(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::difference_type i, std::vector< itkImageUS3_Pointer >::difference_type j) -> vectoritkImageUS3"""
        return _itkImagePython.vectoritkImageUS3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::difference_type i, std::vector< itkImageUS3_Pointer >::difference_type j)
        __setslice__(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::difference_type i, std::vector< itkImageUS3_Pointer >::difference_type j, vectoritkImageUS3 v)
        """
        return _itkImagePython.vectoritkImageUS3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageUS3_Pointer >::difference_type', j: 'std::vector< itkImageUS3_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::difference_type i, std::vector< itkImageUS3_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageUS3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::difference_type i)
        __delitem__(vectoritkImageUS3 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageUS3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageUS3_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageUS3 self, PySliceObject * slice) -> vectoritkImageUS3
        __getitem__(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::difference_type i) -> std::vector< itkImageUS3_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageUS3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageUS3 self, PySliceObject * slice, vectoritkImageUS3 v)
        __setitem__(vectoritkImageUS3 self, PySliceObject * slice)
        __setitem__(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::difference_type i, std::vector< itkImageUS3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUS3___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageUS3_Pointer >::value_type":
        """pop(vectoritkImageUS3 self) -> std::vector< itkImageUS3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUS3_pop(self)


    def append(self, x: 'std::vector< itkImageUS3_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUS3_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageUS3 self) -> bool"""
        return _itkImagePython.vectoritkImageUS3_empty(self)


    def size(self) -> "std::vector< itkImageUS3_Pointer >::size_type":
        """size(vectoritkImageUS3 self) -> std::vector< itkImageUS3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS3_size(self)


    def swap(self, v: 'vectoritkImageUS3') -> "void":
        """swap(vectoritkImageUS3 self, vectoritkImageUS3 v)"""
        return _itkImagePython.vectoritkImageUS3_swap(self, v)


    def begin(self) -> "std::vector< itkImageUS3_Pointer >::iterator":
        """begin(vectoritkImageUS3 self) -> std::vector< itkImageUS3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUS3_begin(self)


    def end(self) -> "std::vector< itkImageUS3_Pointer >::iterator":
        """end(vectoritkImageUS3 self) -> std::vector< itkImageUS3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUS3_end(self)


    def rbegin(self) -> "std::vector< itkImageUS3_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageUS3 self) -> std::vector< itkImageUS3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUS3_rbegin(self)


    def rend(self) -> "std::vector< itkImageUS3_Pointer >::reverse_iterator":
        """rend(vectoritkImageUS3 self) -> std::vector< itkImageUS3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUS3_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageUS3 self)"""
        return _itkImagePython.vectoritkImageUS3_clear(self)


    def get_allocator(self) -> "std::vector< itkImageUS3_Pointer >::allocator_type":
        """get_allocator(vectoritkImageUS3 self) -> std::vector< itkImageUS3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUS3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageUS3 self)"""
        return _itkImagePython.vectoritkImageUS3_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageUS3_Pointer >::iterator":
        """
        erase(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::iterator pos) -> std::vector< itkImageUS3_Pointer >::iterator
        erase(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::iterator first, std::vector< itkImageUS3_Pointer >::iterator last) -> std::vector< itkImageUS3_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageUS3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageUS3_Pointer)> self) -> vectoritkImageUS3
        __init__(std::vector<(itkImageUS3_Pointer)> self, vectoritkImageUS3 arg2) -> vectoritkImageUS3
        __init__(std::vector<(itkImageUS3_Pointer)> self, std::vector< itkImageUS3_Pointer >::size_type size) -> vectoritkImageUS3
        __init__(std::vector<(itkImageUS3_Pointer)> self, std::vector< itkImageUS3_Pointer >::size_type size, std::vector< itkImageUS3_Pointer >::value_type const & value) -> vectoritkImageUS3
        """
        _itkImagePython.vectoritkImageUS3_swiginit(self, _itkImagePython.new_vectoritkImageUS3(*args))

    def push_back(self, x: 'std::vector< itkImageUS3_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUS3_push_back(self, x)


    def front(self) -> "std::vector< itkImageUS3_Pointer >::value_type const &":
        """front(vectoritkImageUS3 self) -> std::vector< itkImageUS3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUS3_front(self)


    def back(self) -> "std::vector< itkImageUS3_Pointer >::value_type const &":
        """back(vectoritkImageUS3 self) -> std::vector< itkImageUS3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUS3_back(self)


    def assign(self, n: 'std::vector< itkImageUS3_Pointer >::size_type', x: 'std::vector< itkImageUS3_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::size_type n, std::vector< itkImageUS3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUS3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::size_type new_size)
        resize(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::size_type new_size, std::vector< itkImageUS3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUS3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::iterator pos, std::vector< itkImageUS3_Pointer >::value_type const & x) -> std::vector< itkImageUS3_Pointer >::iterator
        insert(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::iterator pos, std::vector< itkImageUS3_Pointer >::size_type n, std::vector< itkImageUS3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUS3_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageUS3_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageUS3 self, std::vector< itkImageUS3_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageUS3_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageUS3_Pointer >::size_type":
        """capacity(vectoritkImageUS3 self) -> std::vector< itkImageUS3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS3_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUS3
vectoritkImageUS3.iterator = new_instancemethod(_itkImagePython.vectoritkImageUS3_iterator, None, vectoritkImageUS3)
vectoritkImageUS3.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageUS3___nonzero__, None, vectoritkImageUS3)
vectoritkImageUS3.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageUS3___bool__, None, vectoritkImageUS3)
vectoritkImageUS3.__len__ = new_instancemethod(_itkImagePython.vectoritkImageUS3___len__, None, vectoritkImageUS3)
vectoritkImageUS3.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageUS3___getslice__, None, vectoritkImageUS3)
vectoritkImageUS3.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageUS3___setslice__, None, vectoritkImageUS3)
vectoritkImageUS3.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageUS3___delslice__, None, vectoritkImageUS3)
vectoritkImageUS3.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageUS3___delitem__, None, vectoritkImageUS3)
vectoritkImageUS3.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageUS3___getitem__, None, vectoritkImageUS3)
vectoritkImageUS3.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageUS3___setitem__, None, vectoritkImageUS3)
vectoritkImageUS3.pop = new_instancemethod(_itkImagePython.vectoritkImageUS3_pop, None, vectoritkImageUS3)
vectoritkImageUS3.append = new_instancemethod(_itkImagePython.vectoritkImageUS3_append, None, vectoritkImageUS3)
vectoritkImageUS3.empty = new_instancemethod(_itkImagePython.vectoritkImageUS3_empty, None, vectoritkImageUS3)
vectoritkImageUS3.size = new_instancemethod(_itkImagePython.vectoritkImageUS3_size, None, vectoritkImageUS3)
vectoritkImageUS3.swap = new_instancemethod(_itkImagePython.vectoritkImageUS3_swap, None, vectoritkImageUS3)
vectoritkImageUS3.begin = new_instancemethod(_itkImagePython.vectoritkImageUS3_begin, None, vectoritkImageUS3)
vectoritkImageUS3.end = new_instancemethod(_itkImagePython.vectoritkImageUS3_end, None, vectoritkImageUS3)
vectoritkImageUS3.rbegin = new_instancemethod(_itkImagePython.vectoritkImageUS3_rbegin, None, vectoritkImageUS3)
vectoritkImageUS3.rend = new_instancemethod(_itkImagePython.vectoritkImageUS3_rend, None, vectoritkImageUS3)
vectoritkImageUS3.clear = new_instancemethod(_itkImagePython.vectoritkImageUS3_clear, None, vectoritkImageUS3)
vectoritkImageUS3.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageUS3_get_allocator, None, vectoritkImageUS3)
vectoritkImageUS3.pop_back = new_instancemethod(_itkImagePython.vectoritkImageUS3_pop_back, None, vectoritkImageUS3)
vectoritkImageUS3.erase = new_instancemethod(_itkImagePython.vectoritkImageUS3_erase, None, vectoritkImageUS3)
vectoritkImageUS3.push_back = new_instancemethod(_itkImagePython.vectoritkImageUS3_push_back, None, vectoritkImageUS3)
vectoritkImageUS3.front = new_instancemethod(_itkImagePython.vectoritkImageUS3_front, None, vectoritkImageUS3)
vectoritkImageUS3.back = new_instancemethod(_itkImagePython.vectoritkImageUS3_back, None, vectoritkImageUS3)
vectoritkImageUS3.assign = new_instancemethod(_itkImagePython.vectoritkImageUS3_assign, None, vectoritkImageUS3)
vectoritkImageUS3.resize = new_instancemethod(_itkImagePython.vectoritkImageUS3_resize, None, vectoritkImageUS3)
vectoritkImageUS3.insert = new_instancemethod(_itkImagePython.vectoritkImageUS3_insert, None, vectoritkImageUS3)
vectoritkImageUS3.reserve = new_instancemethod(_itkImagePython.vectoritkImageUS3_reserve, None, vectoritkImageUS3)
vectoritkImageUS3.capacity = new_instancemethod(_itkImagePython.vectoritkImageUS3_capacity, None, vectoritkImageUS3)
vectoritkImageUS3_swigregister = _itkImagePython.vectoritkImageUS3_swigregister
vectoritkImageUS3_swigregister(vectoritkImageUS3)

class vectoritkImageF3(object):
    """Proxy of C++ std::vector<(itkImageF3_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageF3 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageF3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageF3 self) -> bool"""
        return _itkImagePython.vectoritkImageF3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageF3 self) -> bool"""
        return _itkImagePython.vectoritkImageF3___bool__(self)


    def __len__(self) -> "std::vector< itkImageF3_Pointer >::size_type":
        """__len__(vectoritkImageF3 self) -> std::vector< itkImageF3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF3___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageF3_Pointer >::difference_type', j: 'std::vector< itkImageF3_Pointer >::difference_type') -> "std::vector< itkImageF3_Pointer,std::allocator< itkImageF3_Pointer > > *":
        """__getslice__(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::difference_type i, std::vector< itkImageF3_Pointer >::difference_type j) -> vectoritkImageF3"""
        return _itkImagePython.vectoritkImageF3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::difference_type i, std::vector< itkImageF3_Pointer >::difference_type j)
        __setslice__(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::difference_type i, std::vector< itkImageF3_Pointer >::difference_type j, vectoritkImageF3 v)
        """
        return _itkImagePython.vectoritkImageF3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageF3_Pointer >::difference_type', j: 'std::vector< itkImageF3_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::difference_type i, std::vector< itkImageF3_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageF3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::difference_type i)
        __delitem__(vectoritkImageF3 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageF3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageF3_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageF3 self, PySliceObject * slice) -> vectoritkImageF3
        __getitem__(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::difference_type i) -> std::vector< itkImageF3_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageF3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageF3 self, PySliceObject * slice, vectoritkImageF3 v)
        __setitem__(vectoritkImageF3 self, PySliceObject * slice)
        __setitem__(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::difference_type i, std::vector< itkImageF3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageF3___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageF3_Pointer >::value_type":
        """pop(vectoritkImageF3 self) -> std::vector< itkImageF3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageF3_pop(self)


    def append(self, x: 'std::vector< itkImageF3_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageF3_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageF3 self) -> bool"""
        return _itkImagePython.vectoritkImageF3_empty(self)


    def size(self) -> "std::vector< itkImageF3_Pointer >::size_type":
        """size(vectoritkImageF3 self) -> std::vector< itkImageF3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF3_size(self)


    def swap(self, v: 'vectoritkImageF3') -> "void":
        """swap(vectoritkImageF3 self, vectoritkImageF3 v)"""
        return _itkImagePython.vectoritkImageF3_swap(self, v)


    def begin(self) -> "std::vector< itkImageF3_Pointer >::iterator":
        """begin(vectoritkImageF3 self) -> std::vector< itkImageF3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageF3_begin(self)


    def end(self) -> "std::vector< itkImageF3_Pointer >::iterator":
        """end(vectoritkImageF3 self) -> std::vector< itkImageF3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageF3_end(self)


    def rbegin(self) -> "std::vector< itkImageF3_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageF3 self) -> std::vector< itkImageF3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageF3_rbegin(self)


    def rend(self) -> "std::vector< itkImageF3_Pointer >::reverse_iterator":
        """rend(vectoritkImageF3 self) -> std::vector< itkImageF3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageF3_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageF3 self)"""
        return _itkImagePython.vectoritkImageF3_clear(self)


    def get_allocator(self) -> "std::vector< itkImageF3_Pointer >::allocator_type":
        """get_allocator(vectoritkImageF3 self) -> std::vector< itkImageF3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageF3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageF3 self)"""
        return _itkImagePython.vectoritkImageF3_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageF3_Pointer >::iterator":
        """
        erase(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::iterator pos) -> std::vector< itkImageF3_Pointer >::iterator
        erase(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::iterator first, std::vector< itkImageF3_Pointer >::iterator last) -> std::vector< itkImageF3_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageF3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageF3_Pointer)> self) -> vectoritkImageF3
        __init__(std::vector<(itkImageF3_Pointer)> self, vectoritkImageF3 arg2) -> vectoritkImageF3
        __init__(std::vector<(itkImageF3_Pointer)> self, std::vector< itkImageF3_Pointer >::size_type size) -> vectoritkImageF3
        __init__(std::vector<(itkImageF3_Pointer)> self, std::vector< itkImageF3_Pointer >::size_type size, std::vector< itkImageF3_Pointer >::value_type const & value) -> vectoritkImageF3
        """
        _itkImagePython.vectoritkImageF3_swiginit(self, _itkImagePython.new_vectoritkImageF3(*args))

    def push_back(self, x: 'std::vector< itkImageF3_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageF3_push_back(self, x)


    def front(self) -> "std::vector< itkImageF3_Pointer >::value_type const &":
        """front(vectoritkImageF3 self) -> std::vector< itkImageF3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageF3_front(self)


    def back(self) -> "std::vector< itkImageF3_Pointer >::value_type const &":
        """back(vectoritkImageF3 self) -> std::vector< itkImageF3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageF3_back(self)


    def assign(self, n: 'std::vector< itkImageF3_Pointer >::size_type', x: 'std::vector< itkImageF3_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::size_type n, std::vector< itkImageF3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageF3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::size_type new_size)
        resize(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::size_type new_size, std::vector< itkImageF3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageF3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::iterator pos, std::vector< itkImageF3_Pointer >::value_type const & x) -> std::vector< itkImageF3_Pointer >::iterator
        insert(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::iterator pos, std::vector< itkImageF3_Pointer >::size_type n, std::vector< itkImageF3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageF3_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageF3_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageF3 self, std::vector< itkImageF3_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageF3_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageF3_Pointer >::size_type":
        """capacity(vectoritkImageF3 self) -> std::vector< itkImageF3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF3_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageF3
vectoritkImageF3.iterator = new_instancemethod(_itkImagePython.vectoritkImageF3_iterator, None, vectoritkImageF3)
vectoritkImageF3.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageF3___nonzero__, None, vectoritkImageF3)
vectoritkImageF3.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageF3___bool__, None, vectoritkImageF3)
vectoritkImageF3.__len__ = new_instancemethod(_itkImagePython.vectoritkImageF3___len__, None, vectoritkImageF3)
vectoritkImageF3.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageF3___getslice__, None, vectoritkImageF3)
vectoritkImageF3.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageF3___setslice__, None, vectoritkImageF3)
vectoritkImageF3.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageF3___delslice__, None, vectoritkImageF3)
vectoritkImageF3.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageF3___delitem__, None, vectoritkImageF3)
vectoritkImageF3.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageF3___getitem__, None, vectoritkImageF3)
vectoritkImageF3.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageF3___setitem__, None, vectoritkImageF3)
vectoritkImageF3.pop = new_instancemethod(_itkImagePython.vectoritkImageF3_pop, None, vectoritkImageF3)
vectoritkImageF3.append = new_instancemethod(_itkImagePython.vectoritkImageF3_append, None, vectoritkImageF3)
vectoritkImageF3.empty = new_instancemethod(_itkImagePython.vectoritkImageF3_empty, None, vectoritkImageF3)
vectoritkImageF3.size = new_instancemethod(_itkImagePython.vectoritkImageF3_size, None, vectoritkImageF3)
vectoritkImageF3.swap = new_instancemethod(_itkImagePython.vectoritkImageF3_swap, None, vectoritkImageF3)
vectoritkImageF3.begin = new_instancemethod(_itkImagePython.vectoritkImageF3_begin, None, vectoritkImageF3)
vectoritkImageF3.end = new_instancemethod(_itkImagePython.vectoritkImageF3_end, None, vectoritkImageF3)
vectoritkImageF3.rbegin = new_instancemethod(_itkImagePython.vectoritkImageF3_rbegin, None, vectoritkImageF3)
vectoritkImageF3.rend = new_instancemethod(_itkImagePython.vectoritkImageF3_rend, None, vectoritkImageF3)
vectoritkImageF3.clear = new_instancemethod(_itkImagePython.vectoritkImageF3_clear, None, vectoritkImageF3)
vectoritkImageF3.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageF3_get_allocator, None, vectoritkImageF3)
vectoritkImageF3.pop_back = new_instancemethod(_itkImagePython.vectoritkImageF3_pop_back, None, vectoritkImageF3)
vectoritkImageF3.erase = new_instancemethod(_itkImagePython.vectoritkImageF3_erase, None, vectoritkImageF3)
vectoritkImageF3.push_back = new_instancemethod(_itkImagePython.vectoritkImageF3_push_back, None, vectoritkImageF3)
vectoritkImageF3.front = new_instancemethod(_itkImagePython.vectoritkImageF3_front, None, vectoritkImageF3)
vectoritkImageF3.back = new_instancemethod(_itkImagePython.vectoritkImageF3_back, None, vectoritkImageF3)
vectoritkImageF3.assign = new_instancemethod(_itkImagePython.vectoritkImageF3_assign, None, vectoritkImageF3)
vectoritkImageF3.resize = new_instancemethod(_itkImagePython.vectoritkImageF3_resize, None, vectoritkImageF3)
vectoritkImageF3.insert = new_instancemethod(_itkImagePython.vectoritkImageF3_insert, None, vectoritkImageF3)
vectoritkImageF3.reserve = new_instancemethod(_itkImagePython.vectoritkImageF3_reserve, None, vectoritkImageF3)
vectoritkImageF3.capacity = new_instancemethod(_itkImagePython.vectoritkImageF3_capacity, None, vectoritkImageF3)
vectoritkImageF3_swigregister = _itkImagePython.vectoritkImageF3_swigregister
vectoritkImageF3_swigregister(vectoritkImageF3)

class vectoritkImageCF3(object):
    """Proxy of C++ std::vector<(itkImageCF3_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageCF3 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCF3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageCF3 self) -> bool"""
        return _itkImagePython.vectoritkImageCF3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageCF3 self) -> bool"""
        return _itkImagePython.vectoritkImageCF3___bool__(self)


    def __len__(self) -> "std::vector< itkImageCF3_Pointer >::size_type":
        """__len__(vectoritkImageCF3 self) -> std::vector< itkImageCF3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF3___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageCF3_Pointer >::difference_type', j: 'std::vector< itkImageCF3_Pointer >::difference_type') -> "std::vector< itkImageCF3_Pointer,std::allocator< itkImageCF3_Pointer > > *":
        """__getslice__(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::difference_type i, std::vector< itkImageCF3_Pointer >::difference_type j) -> vectoritkImageCF3"""
        return _itkImagePython.vectoritkImageCF3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::difference_type i, std::vector< itkImageCF3_Pointer >::difference_type j)
        __setslice__(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::difference_type i, std::vector< itkImageCF3_Pointer >::difference_type j, vectoritkImageCF3 v)
        """
        return _itkImagePython.vectoritkImageCF3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageCF3_Pointer >::difference_type', j: 'std::vector< itkImageCF3_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::difference_type i, std::vector< itkImageCF3_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageCF3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::difference_type i)
        __delitem__(vectoritkImageCF3 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageCF3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageCF3_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageCF3 self, PySliceObject * slice) -> vectoritkImageCF3
        __getitem__(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::difference_type i) -> std::vector< itkImageCF3_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageCF3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageCF3 self, PySliceObject * slice, vectoritkImageCF3 v)
        __setitem__(vectoritkImageCF3 self, PySliceObject * slice)
        __setitem__(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::difference_type i, std::vector< itkImageCF3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCF3___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageCF3_Pointer >::value_type":
        """pop(vectoritkImageCF3 self) -> std::vector< itkImageCF3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCF3_pop(self)


    def append(self, x: 'std::vector< itkImageCF3_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCF3_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageCF3 self) -> bool"""
        return _itkImagePython.vectoritkImageCF3_empty(self)


    def size(self) -> "std::vector< itkImageCF3_Pointer >::size_type":
        """size(vectoritkImageCF3 self) -> std::vector< itkImageCF3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF3_size(self)


    def swap(self, v: 'vectoritkImageCF3') -> "void":
        """swap(vectoritkImageCF3 self, vectoritkImageCF3 v)"""
        return _itkImagePython.vectoritkImageCF3_swap(self, v)


    def begin(self) -> "std::vector< itkImageCF3_Pointer >::iterator":
        """begin(vectoritkImageCF3 self) -> std::vector< itkImageCF3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCF3_begin(self)


    def end(self) -> "std::vector< itkImageCF3_Pointer >::iterator":
        """end(vectoritkImageCF3 self) -> std::vector< itkImageCF3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCF3_end(self)


    def rbegin(self) -> "std::vector< itkImageCF3_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageCF3 self) -> std::vector< itkImageCF3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCF3_rbegin(self)


    def rend(self) -> "std::vector< itkImageCF3_Pointer >::reverse_iterator":
        """rend(vectoritkImageCF3 self) -> std::vector< itkImageCF3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCF3_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageCF3 self)"""
        return _itkImagePython.vectoritkImageCF3_clear(self)


    def get_allocator(self) -> "std::vector< itkImageCF3_Pointer >::allocator_type":
        """get_allocator(vectoritkImageCF3 self) -> std::vector< itkImageCF3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCF3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageCF3 self)"""
        return _itkImagePython.vectoritkImageCF3_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageCF3_Pointer >::iterator":
        """
        erase(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::iterator pos) -> std::vector< itkImageCF3_Pointer >::iterator
        erase(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::iterator first, std::vector< itkImageCF3_Pointer >::iterator last) -> std::vector< itkImageCF3_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageCF3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageCF3_Pointer)> self) -> vectoritkImageCF3
        __init__(std::vector<(itkImageCF3_Pointer)> self, vectoritkImageCF3 arg2) -> vectoritkImageCF3
        __init__(std::vector<(itkImageCF3_Pointer)> self, std::vector< itkImageCF3_Pointer >::size_type size) -> vectoritkImageCF3
        __init__(std::vector<(itkImageCF3_Pointer)> self, std::vector< itkImageCF3_Pointer >::size_type size, std::vector< itkImageCF3_Pointer >::value_type const & value) -> vectoritkImageCF3
        """
        _itkImagePython.vectoritkImageCF3_swiginit(self, _itkImagePython.new_vectoritkImageCF3(*args))

    def push_back(self, x: 'std::vector< itkImageCF3_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCF3_push_back(self, x)


    def front(self) -> "std::vector< itkImageCF3_Pointer >::value_type const &":
        """front(vectoritkImageCF3 self) -> std::vector< itkImageCF3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCF3_front(self)


    def back(self) -> "std::vector< itkImageCF3_Pointer >::value_type const &":
        """back(vectoritkImageCF3 self) -> std::vector< itkImageCF3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCF3_back(self)


    def assign(self, n: 'std::vector< itkImageCF3_Pointer >::size_type', x: 'std::vector< itkImageCF3_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::size_type n, std::vector< itkImageCF3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCF3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::size_type new_size)
        resize(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::size_type new_size, std::vector< itkImageCF3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCF3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::iterator pos, std::vector< itkImageCF3_Pointer >::value_type const & x) -> std::vector< itkImageCF3_Pointer >::iterator
        insert(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::iterator pos, std::vector< itkImageCF3_Pointer >::size_type n, std::vector< itkImageCF3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCF3_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageCF3_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageCF3 self, std::vector< itkImageCF3_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageCF3_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageCF3_Pointer >::size_type":
        """capacity(vectoritkImageCF3 self) -> std::vector< itkImageCF3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF3_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCF3
vectoritkImageCF3.iterator = new_instancemethod(_itkImagePython.vectoritkImageCF3_iterator, None, vectoritkImageCF3)
vectoritkImageCF3.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageCF3___nonzero__, None, vectoritkImageCF3)
vectoritkImageCF3.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageCF3___bool__, None, vectoritkImageCF3)
vectoritkImageCF3.__len__ = new_instancemethod(_itkImagePython.vectoritkImageCF3___len__, None, vectoritkImageCF3)
vectoritkImageCF3.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageCF3___getslice__, None, vectoritkImageCF3)
vectoritkImageCF3.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageCF3___setslice__, None, vectoritkImageCF3)
vectoritkImageCF3.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageCF3___delslice__, None, vectoritkImageCF3)
vectoritkImageCF3.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageCF3___delitem__, None, vectoritkImageCF3)
vectoritkImageCF3.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageCF3___getitem__, None, vectoritkImageCF3)
vectoritkImageCF3.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageCF3___setitem__, None, vectoritkImageCF3)
vectoritkImageCF3.pop = new_instancemethod(_itkImagePython.vectoritkImageCF3_pop, None, vectoritkImageCF3)
vectoritkImageCF3.append = new_instancemethod(_itkImagePython.vectoritkImageCF3_append, None, vectoritkImageCF3)
vectoritkImageCF3.empty = new_instancemethod(_itkImagePython.vectoritkImageCF3_empty, None, vectoritkImageCF3)
vectoritkImageCF3.size = new_instancemethod(_itkImagePython.vectoritkImageCF3_size, None, vectoritkImageCF3)
vectoritkImageCF3.swap = new_instancemethod(_itkImagePython.vectoritkImageCF3_swap, None, vectoritkImageCF3)
vectoritkImageCF3.begin = new_instancemethod(_itkImagePython.vectoritkImageCF3_begin, None, vectoritkImageCF3)
vectoritkImageCF3.end = new_instancemethod(_itkImagePython.vectoritkImageCF3_end, None, vectoritkImageCF3)
vectoritkImageCF3.rbegin = new_instancemethod(_itkImagePython.vectoritkImageCF3_rbegin, None, vectoritkImageCF3)
vectoritkImageCF3.rend = new_instancemethod(_itkImagePython.vectoritkImageCF3_rend, None, vectoritkImageCF3)
vectoritkImageCF3.clear = new_instancemethod(_itkImagePython.vectoritkImageCF3_clear, None, vectoritkImageCF3)
vectoritkImageCF3.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageCF3_get_allocator, None, vectoritkImageCF3)
vectoritkImageCF3.pop_back = new_instancemethod(_itkImagePython.vectoritkImageCF3_pop_back, None, vectoritkImageCF3)
vectoritkImageCF3.erase = new_instancemethod(_itkImagePython.vectoritkImageCF3_erase, None, vectoritkImageCF3)
vectoritkImageCF3.push_back = new_instancemethod(_itkImagePython.vectoritkImageCF3_push_back, None, vectoritkImageCF3)
vectoritkImageCF3.front = new_instancemethod(_itkImagePython.vectoritkImageCF3_front, None, vectoritkImageCF3)
vectoritkImageCF3.back = new_instancemethod(_itkImagePython.vectoritkImageCF3_back, None, vectoritkImageCF3)
vectoritkImageCF3.assign = new_instancemethod(_itkImagePython.vectoritkImageCF3_assign, None, vectoritkImageCF3)
vectoritkImageCF3.resize = new_instancemethod(_itkImagePython.vectoritkImageCF3_resize, None, vectoritkImageCF3)
vectoritkImageCF3.insert = new_instancemethod(_itkImagePython.vectoritkImageCF3_insert, None, vectoritkImageCF3)
vectoritkImageCF3.reserve = new_instancemethod(_itkImagePython.vectoritkImageCF3_reserve, None, vectoritkImageCF3)
vectoritkImageCF3.capacity = new_instancemethod(_itkImagePython.vectoritkImageCF3_capacity, None, vectoritkImageCF3)
vectoritkImageCF3_swigregister = _itkImagePython.vectoritkImageCF3_swigregister
vectoritkImageCF3_swigregister(vectoritkImageCF3)

class vectoritkImageVD23(object):
    """Proxy of C++ std::vector<(itkImageVD23_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVD23 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD23_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVD23 self) -> bool"""
        return _itkImagePython.vectoritkImageVD23___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVD23 self) -> bool"""
        return _itkImagePython.vectoritkImageVD23___bool__(self)


    def __len__(self) -> "std::vector< itkImageVD23_Pointer >::size_type":
        """__len__(vectoritkImageVD23 self) -> std::vector< itkImageVD23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD23___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVD23_Pointer >::difference_type', j: 'std::vector< itkImageVD23_Pointer >::difference_type') -> "std::vector< itkImageVD23_Pointer,std::allocator< itkImageVD23_Pointer > > *":
        """__getslice__(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::difference_type i, std::vector< itkImageVD23_Pointer >::difference_type j) -> vectoritkImageVD23"""
        return _itkImagePython.vectoritkImageVD23___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::difference_type i, std::vector< itkImageVD23_Pointer >::difference_type j)
        __setslice__(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::difference_type i, std::vector< itkImageVD23_Pointer >::difference_type j, vectoritkImageVD23 v)
        """
        return _itkImagePython.vectoritkImageVD23___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVD23_Pointer >::difference_type', j: 'std::vector< itkImageVD23_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::difference_type i, std::vector< itkImageVD23_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVD23___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::difference_type i)
        __delitem__(vectoritkImageVD23 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVD23___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVD23_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVD23 self, PySliceObject * slice) -> vectoritkImageVD23
        __getitem__(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::difference_type i) -> std::vector< itkImageVD23_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVD23___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVD23 self, PySliceObject * slice, vectoritkImageVD23 v)
        __setitem__(vectoritkImageVD23 self, PySliceObject * slice)
        __setitem__(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::difference_type i, std::vector< itkImageVD23_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD23___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVD23_Pointer >::value_type":
        """pop(vectoritkImageVD23 self) -> std::vector< itkImageVD23_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD23_pop(self)


    def append(self, x: 'std::vector< itkImageVD23_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD23_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVD23 self) -> bool"""
        return _itkImagePython.vectoritkImageVD23_empty(self)


    def size(self) -> "std::vector< itkImageVD23_Pointer >::size_type":
        """size(vectoritkImageVD23 self) -> std::vector< itkImageVD23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD23_size(self)


    def swap(self, v: 'vectoritkImageVD23') -> "void":
        """swap(vectoritkImageVD23 self, vectoritkImageVD23 v)"""
        return _itkImagePython.vectoritkImageVD23_swap(self, v)


    def begin(self) -> "std::vector< itkImageVD23_Pointer >::iterator":
        """begin(vectoritkImageVD23 self) -> std::vector< itkImageVD23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD23_begin(self)


    def end(self) -> "std::vector< itkImageVD23_Pointer >::iterator":
        """end(vectoritkImageVD23 self) -> std::vector< itkImageVD23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD23_end(self)


    def rbegin(self) -> "std::vector< itkImageVD23_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVD23 self) -> std::vector< itkImageVD23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD23_rbegin(self)


    def rend(self) -> "std::vector< itkImageVD23_Pointer >::reverse_iterator":
        """rend(vectoritkImageVD23 self) -> std::vector< itkImageVD23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD23_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVD23 self)"""
        return _itkImagePython.vectoritkImageVD23_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVD23_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVD23 self) -> std::vector< itkImageVD23_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD23_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVD23 self)"""
        return _itkImagePython.vectoritkImageVD23_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVD23_Pointer >::iterator":
        """
        erase(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::iterator pos) -> std::vector< itkImageVD23_Pointer >::iterator
        erase(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::iterator first, std::vector< itkImageVD23_Pointer >::iterator last) -> std::vector< itkImageVD23_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVD23_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVD23_Pointer)> self) -> vectoritkImageVD23
        __init__(std::vector<(itkImageVD23_Pointer)> self, vectoritkImageVD23 arg2) -> vectoritkImageVD23
        __init__(std::vector<(itkImageVD23_Pointer)> self, std::vector< itkImageVD23_Pointer >::size_type size) -> vectoritkImageVD23
        __init__(std::vector<(itkImageVD23_Pointer)> self, std::vector< itkImageVD23_Pointer >::size_type size, std::vector< itkImageVD23_Pointer >::value_type const & value) -> vectoritkImageVD23
        """
        _itkImagePython.vectoritkImageVD23_swiginit(self, _itkImagePython.new_vectoritkImageVD23(*args))

    def push_back(self, x: 'std::vector< itkImageVD23_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD23_push_back(self, x)


    def front(self) -> "std::vector< itkImageVD23_Pointer >::value_type const &":
        """front(vectoritkImageVD23 self) -> std::vector< itkImageVD23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD23_front(self)


    def back(self) -> "std::vector< itkImageVD23_Pointer >::value_type const &":
        """back(vectoritkImageVD23 self) -> std::vector< itkImageVD23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD23_back(self)


    def assign(self, n: 'std::vector< itkImageVD23_Pointer >::size_type', x: 'std::vector< itkImageVD23_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::size_type n, std::vector< itkImageVD23_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD23_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::size_type new_size)
        resize(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::size_type new_size, std::vector< itkImageVD23_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD23_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::iterator pos, std::vector< itkImageVD23_Pointer >::value_type const & x) -> std::vector< itkImageVD23_Pointer >::iterator
        insert(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::iterator pos, std::vector< itkImageVD23_Pointer >::size_type n, std::vector< itkImageVD23_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD23_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVD23_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVD23 self, std::vector< itkImageVD23_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVD23_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVD23_Pointer >::size_type":
        """capacity(vectoritkImageVD23 self) -> std::vector< itkImageVD23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD23_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD23
vectoritkImageVD23.iterator = new_instancemethod(_itkImagePython.vectoritkImageVD23_iterator, None, vectoritkImageVD23)
vectoritkImageVD23.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVD23___nonzero__, None, vectoritkImageVD23)
vectoritkImageVD23.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVD23___bool__, None, vectoritkImageVD23)
vectoritkImageVD23.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVD23___len__, None, vectoritkImageVD23)
vectoritkImageVD23.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD23___getslice__, None, vectoritkImageVD23)
vectoritkImageVD23.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD23___setslice__, None, vectoritkImageVD23)
vectoritkImageVD23.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD23___delslice__, None, vectoritkImageVD23)
vectoritkImageVD23.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD23___delitem__, None, vectoritkImageVD23)
vectoritkImageVD23.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD23___getitem__, None, vectoritkImageVD23)
vectoritkImageVD23.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD23___setitem__, None, vectoritkImageVD23)
vectoritkImageVD23.pop = new_instancemethod(_itkImagePython.vectoritkImageVD23_pop, None, vectoritkImageVD23)
vectoritkImageVD23.append = new_instancemethod(_itkImagePython.vectoritkImageVD23_append, None, vectoritkImageVD23)
vectoritkImageVD23.empty = new_instancemethod(_itkImagePython.vectoritkImageVD23_empty, None, vectoritkImageVD23)
vectoritkImageVD23.size = new_instancemethod(_itkImagePython.vectoritkImageVD23_size, None, vectoritkImageVD23)
vectoritkImageVD23.swap = new_instancemethod(_itkImagePython.vectoritkImageVD23_swap, None, vectoritkImageVD23)
vectoritkImageVD23.begin = new_instancemethod(_itkImagePython.vectoritkImageVD23_begin, None, vectoritkImageVD23)
vectoritkImageVD23.end = new_instancemethod(_itkImagePython.vectoritkImageVD23_end, None, vectoritkImageVD23)
vectoritkImageVD23.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVD23_rbegin, None, vectoritkImageVD23)
vectoritkImageVD23.rend = new_instancemethod(_itkImagePython.vectoritkImageVD23_rend, None, vectoritkImageVD23)
vectoritkImageVD23.clear = new_instancemethod(_itkImagePython.vectoritkImageVD23_clear, None, vectoritkImageVD23)
vectoritkImageVD23.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVD23_get_allocator, None, vectoritkImageVD23)
vectoritkImageVD23.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVD23_pop_back, None, vectoritkImageVD23)
vectoritkImageVD23.erase = new_instancemethod(_itkImagePython.vectoritkImageVD23_erase, None, vectoritkImageVD23)
vectoritkImageVD23.push_back = new_instancemethod(_itkImagePython.vectoritkImageVD23_push_back, None, vectoritkImageVD23)
vectoritkImageVD23.front = new_instancemethod(_itkImagePython.vectoritkImageVD23_front, None, vectoritkImageVD23)
vectoritkImageVD23.back = new_instancemethod(_itkImagePython.vectoritkImageVD23_back, None, vectoritkImageVD23)
vectoritkImageVD23.assign = new_instancemethod(_itkImagePython.vectoritkImageVD23_assign, None, vectoritkImageVD23)
vectoritkImageVD23.resize = new_instancemethod(_itkImagePython.vectoritkImageVD23_resize, None, vectoritkImageVD23)
vectoritkImageVD23.insert = new_instancemethod(_itkImagePython.vectoritkImageVD23_insert, None, vectoritkImageVD23)
vectoritkImageVD23.reserve = new_instancemethod(_itkImagePython.vectoritkImageVD23_reserve, None, vectoritkImageVD23)
vectoritkImageVD23.capacity = new_instancemethod(_itkImagePython.vectoritkImageVD23_capacity, None, vectoritkImageVD23)
vectoritkImageVD23_swigregister = _itkImagePython.vectoritkImageVD23_swigregister
vectoritkImageVD23_swigregister(vectoritkImageVD23)

class vectoritkImageVD33(object):
    """Proxy of C++ std::vector<(itkImageVD33_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVD33 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD33_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVD33 self) -> bool"""
        return _itkImagePython.vectoritkImageVD33___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVD33 self) -> bool"""
        return _itkImagePython.vectoritkImageVD33___bool__(self)


    def __len__(self) -> "std::vector< itkImageVD33_Pointer >::size_type":
        """__len__(vectoritkImageVD33 self) -> std::vector< itkImageVD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD33___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVD33_Pointer >::difference_type', j: 'std::vector< itkImageVD33_Pointer >::difference_type') -> "std::vector< itkImageVD33_Pointer,std::allocator< itkImageVD33_Pointer > > *":
        """__getslice__(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::difference_type i, std::vector< itkImageVD33_Pointer >::difference_type j) -> vectoritkImageVD33"""
        return _itkImagePython.vectoritkImageVD33___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::difference_type i, std::vector< itkImageVD33_Pointer >::difference_type j)
        __setslice__(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::difference_type i, std::vector< itkImageVD33_Pointer >::difference_type j, vectoritkImageVD33 v)
        """
        return _itkImagePython.vectoritkImageVD33___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVD33_Pointer >::difference_type', j: 'std::vector< itkImageVD33_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::difference_type i, std::vector< itkImageVD33_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVD33___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::difference_type i)
        __delitem__(vectoritkImageVD33 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVD33___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVD33_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVD33 self, PySliceObject * slice) -> vectoritkImageVD33
        __getitem__(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::difference_type i) -> std::vector< itkImageVD33_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVD33___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVD33 self, PySliceObject * slice, vectoritkImageVD33 v)
        __setitem__(vectoritkImageVD33 self, PySliceObject * slice)
        __setitem__(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::difference_type i, std::vector< itkImageVD33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD33___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVD33_Pointer >::value_type":
        """pop(vectoritkImageVD33 self) -> std::vector< itkImageVD33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD33_pop(self)


    def append(self, x: 'std::vector< itkImageVD33_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD33_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVD33 self) -> bool"""
        return _itkImagePython.vectoritkImageVD33_empty(self)


    def size(self) -> "std::vector< itkImageVD33_Pointer >::size_type":
        """size(vectoritkImageVD33 self) -> std::vector< itkImageVD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD33_size(self)


    def swap(self, v: 'vectoritkImageVD33') -> "void":
        """swap(vectoritkImageVD33 self, vectoritkImageVD33 v)"""
        return _itkImagePython.vectoritkImageVD33_swap(self, v)


    def begin(self) -> "std::vector< itkImageVD33_Pointer >::iterator":
        """begin(vectoritkImageVD33 self) -> std::vector< itkImageVD33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD33_begin(self)


    def end(self) -> "std::vector< itkImageVD33_Pointer >::iterator":
        """end(vectoritkImageVD33 self) -> std::vector< itkImageVD33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD33_end(self)


    def rbegin(self) -> "std::vector< itkImageVD33_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVD33 self) -> std::vector< itkImageVD33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD33_rbegin(self)


    def rend(self) -> "std::vector< itkImageVD33_Pointer >::reverse_iterator":
        """rend(vectoritkImageVD33 self) -> std::vector< itkImageVD33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD33_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVD33 self)"""
        return _itkImagePython.vectoritkImageVD33_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVD33_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVD33 self) -> std::vector< itkImageVD33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD33_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVD33 self)"""
        return _itkImagePython.vectoritkImageVD33_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVD33_Pointer >::iterator":
        """
        erase(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::iterator pos) -> std::vector< itkImageVD33_Pointer >::iterator
        erase(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::iterator first, std::vector< itkImageVD33_Pointer >::iterator last) -> std::vector< itkImageVD33_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVD33_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVD33_Pointer)> self) -> vectoritkImageVD33
        __init__(std::vector<(itkImageVD33_Pointer)> self, vectoritkImageVD33 arg2) -> vectoritkImageVD33
        __init__(std::vector<(itkImageVD33_Pointer)> self, std::vector< itkImageVD33_Pointer >::size_type size) -> vectoritkImageVD33
        __init__(std::vector<(itkImageVD33_Pointer)> self, std::vector< itkImageVD33_Pointer >::size_type size, std::vector< itkImageVD33_Pointer >::value_type const & value) -> vectoritkImageVD33
        """
        _itkImagePython.vectoritkImageVD33_swiginit(self, _itkImagePython.new_vectoritkImageVD33(*args))

    def push_back(self, x: 'std::vector< itkImageVD33_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD33_push_back(self, x)


    def front(self) -> "std::vector< itkImageVD33_Pointer >::value_type const &":
        """front(vectoritkImageVD33 self) -> std::vector< itkImageVD33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD33_front(self)


    def back(self) -> "std::vector< itkImageVD33_Pointer >::value_type const &":
        """back(vectoritkImageVD33 self) -> std::vector< itkImageVD33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD33_back(self)


    def assign(self, n: 'std::vector< itkImageVD33_Pointer >::size_type', x: 'std::vector< itkImageVD33_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::size_type n, std::vector< itkImageVD33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD33_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::size_type new_size)
        resize(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::size_type new_size, std::vector< itkImageVD33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD33_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::iterator pos, std::vector< itkImageVD33_Pointer >::value_type const & x) -> std::vector< itkImageVD33_Pointer >::iterator
        insert(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::iterator pos, std::vector< itkImageVD33_Pointer >::size_type n, std::vector< itkImageVD33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD33_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVD33_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVD33 self, std::vector< itkImageVD33_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVD33_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVD33_Pointer >::size_type":
        """capacity(vectoritkImageVD33 self) -> std::vector< itkImageVD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD33_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD33
vectoritkImageVD33.iterator = new_instancemethod(_itkImagePython.vectoritkImageVD33_iterator, None, vectoritkImageVD33)
vectoritkImageVD33.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVD33___nonzero__, None, vectoritkImageVD33)
vectoritkImageVD33.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVD33___bool__, None, vectoritkImageVD33)
vectoritkImageVD33.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVD33___len__, None, vectoritkImageVD33)
vectoritkImageVD33.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD33___getslice__, None, vectoritkImageVD33)
vectoritkImageVD33.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD33___setslice__, None, vectoritkImageVD33)
vectoritkImageVD33.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD33___delslice__, None, vectoritkImageVD33)
vectoritkImageVD33.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD33___delitem__, None, vectoritkImageVD33)
vectoritkImageVD33.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD33___getitem__, None, vectoritkImageVD33)
vectoritkImageVD33.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD33___setitem__, None, vectoritkImageVD33)
vectoritkImageVD33.pop = new_instancemethod(_itkImagePython.vectoritkImageVD33_pop, None, vectoritkImageVD33)
vectoritkImageVD33.append = new_instancemethod(_itkImagePython.vectoritkImageVD33_append, None, vectoritkImageVD33)
vectoritkImageVD33.empty = new_instancemethod(_itkImagePython.vectoritkImageVD33_empty, None, vectoritkImageVD33)
vectoritkImageVD33.size = new_instancemethod(_itkImagePython.vectoritkImageVD33_size, None, vectoritkImageVD33)
vectoritkImageVD33.swap = new_instancemethod(_itkImagePython.vectoritkImageVD33_swap, None, vectoritkImageVD33)
vectoritkImageVD33.begin = new_instancemethod(_itkImagePython.vectoritkImageVD33_begin, None, vectoritkImageVD33)
vectoritkImageVD33.end = new_instancemethod(_itkImagePython.vectoritkImageVD33_end, None, vectoritkImageVD33)
vectoritkImageVD33.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVD33_rbegin, None, vectoritkImageVD33)
vectoritkImageVD33.rend = new_instancemethod(_itkImagePython.vectoritkImageVD33_rend, None, vectoritkImageVD33)
vectoritkImageVD33.clear = new_instancemethod(_itkImagePython.vectoritkImageVD33_clear, None, vectoritkImageVD33)
vectoritkImageVD33.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVD33_get_allocator, None, vectoritkImageVD33)
vectoritkImageVD33.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVD33_pop_back, None, vectoritkImageVD33)
vectoritkImageVD33.erase = new_instancemethod(_itkImagePython.vectoritkImageVD33_erase, None, vectoritkImageVD33)
vectoritkImageVD33.push_back = new_instancemethod(_itkImagePython.vectoritkImageVD33_push_back, None, vectoritkImageVD33)
vectoritkImageVD33.front = new_instancemethod(_itkImagePython.vectoritkImageVD33_front, None, vectoritkImageVD33)
vectoritkImageVD33.back = new_instancemethod(_itkImagePython.vectoritkImageVD33_back, None, vectoritkImageVD33)
vectoritkImageVD33.assign = new_instancemethod(_itkImagePython.vectoritkImageVD33_assign, None, vectoritkImageVD33)
vectoritkImageVD33.resize = new_instancemethod(_itkImagePython.vectoritkImageVD33_resize, None, vectoritkImageVD33)
vectoritkImageVD33.insert = new_instancemethod(_itkImagePython.vectoritkImageVD33_insert, None, vectoritkImageVD33)
vectoritkImageVD33.reserve = new_instancemethod(_itkImagePython.vectoritkImageVD33_reserve, None, vectoritkImageVD33)
vectoritkImageVD33.capacity = new_instancemethod(_itkImagePython.vectoritkImageVD33_capacity, None, vectoritkImageVD33)
vectoritkImageVD33_swigregister = _itkImagePython.vectoritkImageVD33_swigregister
vectoritkImageVD33_swigregister(vectoritkImageVD33)

class vectoritkImageVD43(object):
    """Proxy of C++ std::vector<(itkImageVD43_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVD43 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD43_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVD43 self) -> bool"""
        return _itkImagePython.vectoritkImageVD43___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVD43 self) -> bool"""
        return _itkImagePython.vectoritkImageVD43___bool__(self)


    def __len__(self) -> "std::vector< itkImageVD43_Pointer >::size_type":
        """__len__(vectoritkImageVD43 self) -> std::vector< itkImageVD43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD43___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVD43_Pointer >::difference_type', j: 'std::vector< itkImageVD43_Pointer >::difference_type') -> "std::vector< itkImageVD43_Pointer,std::allocator< itkImageVD43_Pointer > > *":
        """__getslice__(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::difference_type i, std::vector< itkImageVD43_Pointer >::difference_type j) -> vectoritkImageVD43"""
        return _itkImagePython.vectoritkImageVD43___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::difference_type i, std::vector< itkImageVD43_Pointer >::difference_type j)
        __setslice__(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::difference_type i, std::vector< itkImageVD43_Pointer >::difference_type j, vectoritkImageVD43 v)
        """
        return _itkImagePython.vectoritkImageVD43___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVD43_Pointer >::difference_type', j: 'std::vector< itkImageVD43_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::difference_type i, std::vector< itkImageVD43_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVD43___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::difference_type i)
        __delitem__(vectoritkImageVD43 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVD43___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVD43_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVD43 self, PySliceObject * slice) -> vectoritkImageVD43
        __getitem__(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::difference_type i) -> std::vector< itkImageVD43_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVD43___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVD43 self, PySliceObject * slice, vectoritkImageVD43 v)
        __setitem__(vectoritkImageVD43 self, PySliceObject * slice)
        __setitem__(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::difference_type i, std::vector< itkImageVD43_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD43___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVD43_Pointer >::value_type":
        """pop(vectoritkImageVD43 self) -> std::vector< itkImageVD43_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD43_pop(self)


    def append(self, x: 'std::vector< itkImageVD43_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD43_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVD43 self) -> bool"""
        return _itkImagePython.vectoritkImageVD43_empty(self)


    def size(self) -> "std::vector< itkImageVD43_Pointer >::size_type":
        """size(vectoritkImageVD43 self) -> std::vector< itkImageVD43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD43_size(self)


    def swap(self, v: 'vectoritkImageVD43') -> "void":
        """swap(vectoritkImageVD43 self, vectoritkImageVD43 v)"""
        return _itkImagePython.vectoritkImageVD43_swap(self, v)


    def begin(self) -> "std::vector< itkImageVD43_Pointer >::iterator":
        """begin(vectoritkImageVD43 self) -> std::vector< itkImageVD43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD43_begin(self)


    def end(self) -> "std::vector< itkImageVD43_Pointer >::iterator":
        """end(vectoritkImageVD43 self) -> std::vector< itkImageVD43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD43_end(self)


    def rbegin(self) -> "std::vector< itkImageVD43_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVD43 self) -> std::vector< itkImageVD43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD43_rbegin(self)


    def rend(self) -> "std::vector< itkImageVD43_Pointer >::reverse_iterator":
        """rend(vectoritkImageVD43 self) -> std::vector< itkImageVD43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD43_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVD43 self)"""
        return _itkImagePython.vectoritkImageVD43_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVD43_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVD43 self) -> std::vector< itkImageVD43_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD43_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVD43 self)"""
        return _itkImagePython.vectoritkImageVD43_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVD43_Pointer >::iterator":
        """
        erase(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::iterator pos) -> std::vector< itkImageVD43_Pointer >::iterator
        erase(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::iterator first, std::vector< itkImageVD43_Pointer >::iterator last) -> std::vector< itkImageVD43_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVD43_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVD43_Pointer)> self) -> vectoritkImageVD43
        __init__(std::vector<(itkImageVD43_Pointer)> self, vectoritkImageVD43 arg2) -> vectoritkImageVD43
        __init__(std::vector<(itkImageVD43_Pointer)> self, std::vector< itkImageVD43_Pointer >::size_type size) -> vectoritkImageVD43
        __init__(std::vector<(itkImageVD43_Pointer)> self, std::vector< itkImageVD43_Pointer >::size_type size, std::vector< itkImageVD43_Pointer >::value_type const & value) -> vectoritkImageVD43
        """
        _itkImagePython.vectoritkImageVD43_swiginit(self, _itkImagePython.new_vectoritkImageVD43(*args))

    def push_back(self, x: 'std::vector< itkImageVD43_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD43_push_back(self, x)


    def front(self) -> "std::vector< itkImageVD43_Pointer >::value_type const &":
        """front(vectoritkImageVD43 self) -> std::vector< itkImageVD43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD43_front(self)


    def back(self) -> "std::vector< itkImageVD43_Pointer >::value_type const &":
        """back(vectoritkImageVD43 self) -> std::vector< itkImageVD43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD43_back(self)


    def assign(self, n: 'std::vector< itkImageVD43_Pointer >::size_type', x: 'std::vector< itkImageVD43_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::size_type n, std::vector< itkImageVD43_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD43_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::size_type new_size)
        resize(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::size_type new_size, std::vector< itkImageVD43_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD43_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::iterator pos, std::vector< itkImageVD43_Pointer >::value_type const & x) -> std::vector< itkImageVD43_Pointer >::iterator
        insert(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::iterator pos, std::vector< itkImageVD43_Pointer >::size_type n, std::vector< itkImageVD43_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD43_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVD43_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVD43 self, std::vector< itkImageVD43_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVD43_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVD43_Pointer >::size_type":
        """capacity(vectoritkImageVD43 self) -> std::vector< itkImageVD43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD43_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD43
vectoritkImageVD43.iterator = new_instancemethod(_itkImagePython.vectoritkImageVD43_iterator, None, vectoritkImageVD43)
vectoritkImageVD43.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVD43___nonzero__, None, vectoritkImageVD43)
vectoritkImageVD43.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVD43___bool__, None, vectoritkImageVD43)
vectoritkImageVD43.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVD43___len__, None, vectoritkImageVD43)
vectoritkImageVD43.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD43___getslice__, None, vectoritkImageVD43)
vectoritkImageVD43.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD43___setslice__, None, vectoritkImageVD43)
vectoritkImageVD43.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD43___delslice__, None, vectoritkImageVD43)
vectoritkImageVD43.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD43___delitem__, None, vectoritkImageVD43)
vectoritkImageVD43.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD43___getitem__, None, vectoritkImageVD43)
vectoritkImageVD43.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD43___setitem__, None, vectoritkImageVD43)
vectoritkImageVD43.pop = new_instancemethod(_itkImagePython.vectoritkImageVD43_pop, None, vectoritkImageVD43)
vectoritkImageVD43.append = new_instancemethod(_itkImagePython.vectoritkImageVD43_append, None, vectoritkImageVD43)
vectoritkImageVD43.empty = new_instancemethod(_itkImagePython.vectoritkImageVD43_empty, None, vectoritkImageVD43)
vectoritkImageVD43.size = new_instancemethod(_itkImagePython.vectoritkImageVD43_size, None, vectoritkImageVD43)
vectoritkImageVD43.swap = new_instancemethod(_itkImagePython.vectoritkImageVD43_swap, None, vectoritkImageVD43)
vectoritkImageVD43.begin = new_instancemethod(_itkImagePython.vectoritkImageVD43_begin, None, vectoritkImageVD43)
vectoritkImageVD43.end = new_instancemethod(_itkImagePython.vectoritkImageVD43_end, None, vectoritkImageVD43)
vectoritkImageVD43.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVD43_rbegin, None, vectoritkImageVD43)
vectoritkImageVD43.rend = new_instancemethod(_itkImagePython.vectoritkImageVD43_rend, None, vectoritkImageVD43)
vectoritkImageVD43.clear = new_instancemethod(_itkImagePython.vectoritkImageVD43_clear, None, vectoritkImageVD43)
vectoritkImageVD43.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVD43_get_allocator, None, vectoritkImageVD43)
vectoritkImageVD43.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVD43_pop_back, None, vectoritkImageVD43)
vectoritkImageVD43.erase = new_instancemethod(_itkImagePython.vectoritkImageVD43_erase, None, vectoritkImageVD43)
vectoritkImageVD43.push_back = new_instancemethod(_itkImagePython.vectoritkImageVD43_push_back, None, vectoritkImageVD43)
vectoritkImageVD43.front = new_instancemethod(_itkImagePython.vectoritkImageVD43_front, None, vectoritkImageVD43)
vectoritkImageVD43.back = new_instancemethod(_itkImagePython.vectoritkImageVD43_back, None, vectoritkImageVD43)
vectoritkImageVD43.assign = new_instancemethod(_itkImagePython.vectoritkImageVD43_assign, None, vectoritkImageVD43)
vectoritkImageVD43.resize = new_instancemethod(_itkImagePython.vectoritkImageVD43_resize, None, vectoritkImageVD43)
vectoritkImageVD43.insert = new_instancemethod(_itkImagePython.vectoritkImageVD43_insert, None, vectoritkImageVD43)
vectoritkImageVD43.reserve = new_instancemethod(_itkImagePython.vectoritkImageVD43_reserve, None, vectoritkImageVD43)
vectoritkImageVD43.capacity = new_instancemethod(_itkImagePython.vectoritkImageVD43_capacity, None, vectoritkImageVD43)
vectoritkImageVD43_swigregister = _itkImagePython.vectoritkImageVD43_swigregister
vectoritkImageVD43_swigregister(vectoritkImageVD43)

class vectoritkImageD3(object):
    """Proxy of C++ std::vector<(itkImageD3_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageD3 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageD3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageD3 self) -> bool"""
        return _itkImagePython.vectoritkImageD3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageD3 self) -> bool"""
        return _itkImagePython.vectoritkImageD3___bool__(self)


    def __len__(self) -> "std::vector< itkImageD3_Pointer >::size_type":
        """__len__(vectoritkImageD3 self) -> std::vector< itkImageD3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD3___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageD3_Pointer >::difference_type', j: 'std::vector< itkImageD3_Pointer >::difference_type') -> "std::vector< itkImageD3_Pointer,std::allocator< itkImageD3_Pointer > > *":
        """__getslice__(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::difference_type i, std::vector< itkImageD3_Pointer >::difference_type j) -> vectoritkImageD3"""
        return _itkImagePython.vectoritkImageD3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::difference_type i, std::vector< itkImageD3_Pointer >::difference_type j)
        __setslice__(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::difference_type i, std::vector< itkImageD3_Pointer >::difference_type j, vectoritkImageD3 v)
        """
        return _itkImagePython.vectoritkImageD3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageD3_Pointer >::difference_type', j: 'std::vector< itkImageD3_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::difference_type i, std::vector< itkImageD3_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageD3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::difference_type i)
        __delitem__(vectoritkImageD3 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageD3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageD3_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageD3 self, PySliceObject * slice) -> vectoritkImageD3
        __getitem__(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::difference_type i) -> std::vector< itkImageD3_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageD3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageD3 self, PySliceObject * slice, vectoritkImageD3 v)
        __setitem__(vectoritkImageD3 self, PySliceObject * slice)
        __setitem__(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::difference_type i, std::vector< itkImageD3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageD3___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageD3_Pointer >::value_type":
        """pop(vectoritkImageD3 self) -> std::vector< itkImageD3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageD3_pop(self)


    def append(self, x: 'std::vector< itkImageD3_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageD3_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageD3 self) -> bool"""
        return _itkImagePython.vectoritkImageD3_empty(self)


    def size(self) -> "std::vector< itkImageD3_Pointer >::size_type":
        """size(vectoritkImageD3 self) -> std::vector< itkImageD3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD3_size(self)


    def swap(self, v: 'vectoritkImageD3') -> "void":
        """swap(vectoritkImageD3 self, vectoritkImageD3 v)"""
        return _itkImagePython.vectoritkImageD3_swap(self, v)


    def begin(self) -> "std::vector< itkImageD3_Pointer >::iterator":
        """begin(vectoritkImageD3 self) -> std::vector< itkImageD3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageD3_begin(self)


    def end(self) -> "std::vector< itkImageD3_Pointer >::iterator":
        """end(vectoritkImageD3 self) -> std::vector< itkImageD3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageD3_end(self)


    def rbegin(self) -> "std::vector< itkImageD3_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageD3 self) -> std::vector< itkImageD3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageD3_rbegin(self)


    def rend(self) -> "std::vector< itkImageD3_Pointer >::reverse_iterator":
        """rend(vectoritkImageD3 self) -> std::vector< itkImageD3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageD3_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageD3 self)"""
        return _itkImagePython.vectoritkImageD3_clear(self)


    def get_allocator(self) -> "std::vector< itkImageD3_Pointer >::allocator_type":
        """get_allocator(vectoritkImageD3 self) -> std::vector< itkImageD3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageD3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageD3 self)"""
        return _itkImagePython.vectoritkImageD3_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageD3_Pointer >::iterator":
        """
        erase(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::iterator pos) -> std::vector< itkImageD3_Pointer >::iterator
        erase(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::iterator first, std::vector< itkImageD3_Pointer >::iterator last) -> std::vector< itkImageD3_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageD3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageD3_Pointer)> self) -> vectoritkImageD3
        __init__(std::vector<(itkImageD3_Pointer)> self, vectoritkImageD3 arg2) -> vectoritkImageD3
        __init__(std::vector<(itkImageD3_Pointer)> self, std::vector< itkImageD3_Pointer >::size_type size) -> vectoritkImageD3
        __init__(std::vector<(itkImageD3_Pointer)> self, std::vector< itkImageD3_Pointer >::size_type size, std::vector< itkImageD3_Pointer >::value_type const & value) -> vectoritkImageD3
        """
        _itkImagePython.vectoritkImageD3_swiginit(self, _itkImagePython.new_vectoritkImageD3(*args))

    def push_back(self, x: 'std::vector< itkImageD3_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageD3_push_back(self, x)


    def front(self) -> "std::vector< itkImageD3_Pointer >::value_type const &":
        """front(vectoritkImageD3 self) -> std::vector< itkImageD3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageD3_front(self)


    def back(self) -> "std::vector< itkImageD3_Pointer >::value_type const &":
        """back(vectoritkImageD3 self) -> std::vector< itkImageD3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageD3_back(self)


    def assign(self, n: 'std::vector< itkImageD3_Pointer >::size_type', x: 'std::vector< itkImageD3_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::size_type n, std::vector< itkImageD3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageD3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::size_type new_size)
        resize(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::size_type new_size, std::vector< itkImageD3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageD3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::iterator pos, std::vector< itkImageD3_Pointer >::value_type const & x) -> std::vector< itkImageD3_Pointer >::iterator
        insert(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::iterator pos, std::vector< itkImageD3_Pointer >::size_type n, std::vector< itkImageD3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageD3_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageD3_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageD3 self, std::vector< itkImageD3_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageD3_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageD3_Pointer >::size_type":
        """capacity(vectoritkImageD3 self) -> std::vector< itkImageD3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD3_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageD3
vectoritkImageD3.iterator = new_instancemethod(_itkImagePython.vectoritkImageD3_iterator, None, vectoritkImageD3)
vectoritkImageD3.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageD3___nonzero__, None, vectoritkImageD3)
vectoritkImageD3.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageD3___bool__, None, vectoritkImageD3)
vectoritkImageD3.__len__ = new_instancemethod(_itkImagePython.vectoritkImageD3___len__, None, vectoritkImageD3)
vectoritkImageD3.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageD3___getslice__, None, vectoritkImageD3)
vectoritkImageD3.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageD3___setslice__, None, vectoritkImageD3)
vectoritkImageD3.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageD3___delslice__, None, vectoritkImageD3)
vectoritkImageD3.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageD3___delitem__, None, vectoritkImageD3)
vectoritkImageD3.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageD3___getitem__, None, vectoritkImageD3)
vectoritkImageD3.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageD3___setitem__, None, vectoritkImageD3)
vectoritkImageD3.pop = new_instancemethod(_itkImagePython.vectoritkImageD3_pop, None, vectoritkImageD3)
vectoritkImageD3.append = new_instancemethod(_itkImagePython.vectoritkImageD3_append, None, vectoritkImageD3)
vectoritkImageD3.empty = new_instancemethod(_itkImagePython.vectoritkImageD3_empty, None, vectoritkImageD3)
vectoritkImageD3.size = new_instancemethod(_itkImagePython.vectoritkImageD3_size, None, vectoritkImageD3)
vectoritkImageD3.swap = new_instancemethod(_itkImagePython.vectoritkImageD3_swap, None, vectoritkImageD3)
vectoritkImageD3.begin = new_instancemethod(_itkImagePython.vectoritkImageD3_begin, None, vectoritkImageD3)
vectoritkImageD3.end = new_instancemethod(_itkImagePython.vectoritkImageD3_end, None, vectoritkImageD3)
vectoritkImageD3.rbegin = new_instancemethod(_itkImagePython.vectoritkImageD3_rbegin, None, vectoritkImageD3)
vectoritkImageD3.rend = new_instancemethod(_itkImagePython.vectoritkImageD3_rend, None, vectoritkImageD3)
vectoritkImageD3.clear = new_instancemethod(_itkImagePython.vectoritkImageD3_clear, None, vectoritkImageD3)
vectoritkImageD3.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageD3_get_allocator, None, vectoritkImageD3)
vectoritkImageD3.pop_back = new_instancemethod(_itkImagePython.vectoritkImageD3_pop_back, None, vectoritkImageD3)
vectoritkImageD3.erase = new_instancemethod(_itkImagePython.vectoritkImageD3_erase, None, vectoritkImageD3)
vectoritkImageD3.push_back = new_instancemethod(_itkImagePython.vectoritkImageD3_push_back, None, vectoritkImageD3)
vectoritkImageD3.front = new_instancemethod(_itkImagePython.vectoritkImageD3_front, None, vectoritkImageD3)
vectoritkImageD3.back = new_instancemethod(_itkImagePython.vectoritkImageD3_back, None, vectoritkImageD3)
vectoritkImageD3.assign = new_instancemethod(_itkImagePython.vectoritkImageD3_assign, None, vectoritkImageD3)
vectoritkImageD3.resize = new_instancemethod(_itkImagePython.vectoritkImageD3_resize, None, vectoritkImageD3)
vectoritkImageD3.insert = new_instancemethod(_itkImagePython.vectoritkImageD3_insert, None, vectoritkImageD3)
vectoritkImageD3.reserve = new_instancemethod(_itkImagePython.vectoritkImageD3_reserve, None, vectoritkImageD3)
vectoritkImageD3.capacity = new_instancemethod(_itkImagePython.vectoritkImageD3_capacity, None, vectoritkImageD3)
vectoritkImageD3_swigregister = _itkImagePython.vectoritkImageD3_swigregister
vectoritkImageD3_swigregister(vectoritkImageD3)

class vectoritkImageUL3(object):
    """Proxy of C++ std::vector<(itkImageUL3_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageUL3 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUL3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageUL3 self) -> bool"""
        return _itkImagePython.vectoritkImageUL3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageUL3 self) -> bool"""
        return _itkImagePython.vectoritkImageUL3___bool__(self)


    def __len__(self) -> "std::vector< itkImageUL3_Pointer >::size_type":
        """__len__(vectoritkImageUL3 self) -> std::vector< itkImageUL3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL3___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageUL3_Pointer >::difference_type', j: 'std::vector< itkImageUL3_Pointer >::difference_type') -> "std::vector< itkImageUL3_Pointer,std::allocator< itkImageUL3_Pointer > > *":
        """__getslice__(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::difference_type i, std::vector< itkImageUL3_Pointer >::difference_type j) -> vectoritkImageUL3"""
        return _itkImagePython.vectoritkImageUL3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::difference_type i, std::vector< itkImageUL3_Pointer >::difference_type j)
        __setslice__(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::difference_type i, std::vector< itkImageUL3_Pointer >::difference_type j, vectoritkImageUL3 v)
        """
        return _itkImagePython.vectoritkImageUL3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageUL3_Pointer >::difference_type', j: 'std::vector< itkImageUL3_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::difference_type i, std::vector< itkImageUL3_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageUL3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::difference_type i)
        __delitem__(vectoritkImageUL3 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageUL3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageUL3_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageUL3 self, PySliceObject * slice) -> vectoritkImageUL3
        __getitem__(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::difference_type i) -> std::vector< itkImageUL3_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageUL3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageUL3 self, PySliceObject * slice, vectoritkImageUL3 v)
        __setitem__(vectoritkImageUL3 self, PySliceObject * slice)
        __setitem__(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::difference_type i, std::vector< itkImageUL3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUL3___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageUL3_Pointer >::value_type":
        """pop(vectoritkImageUL3 self) -> std::vector< itkImageUL3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUL3_pop(self)


    def append(self, x: 'std::vector< itkImageUL3_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUL3_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageUL3 self) -> bool"""
        return _itkImagePython.vectoritkImageUL3_empty(self)


    def size(self) -> "std::vector< itkImageUL3_Pointer >::size_type":
        """size(vectoritkImageUL3 self) -> std::vector< itkImageUL3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL3_size(self)


    def swap(self, v: 'vectoritkImageUL3') -> "void":
        """swap(vectoritkImageUL3 self, vectoritkImageUL3 v)"""
        return _itkImagePython.vectoritkImageUL3_swap(self, v)


    def begin(self) -> "std::vector< itkImageUL3_Pointer >::iterator":
        """begin(vectoritkImageUL3 self) -> std::vector< itkImageUL3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUL3_begin(self)


    def end(self) -> "std::vector< itkImageUL3_Pointer >::iterator":
        """end(vectoritkImageUL3 self) -> std::vector< itkImageUL3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUL3_end(self)


    def rbegin(self) -> "std::vector< itkImageUL3_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageUL3 self) -> std::vector< itkImageUL3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUL3_rbegin(self)


    def rend(self) -> "std::vector< itkImageUL3_Pointer >::reverse_iterator":
        """rend(vectoritkImageUL3 self) -> std::vector< itkImageUL3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUL3_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageUL3 self)"""
        return _itkImagePython.vectoritkImageUL3_clear(self)


    def get_allocator(self) -> "std::vector< itkImageUL3_Pointer >::allocator_type":
        """get_allocator(vectoritkImageUL3 self) -> std::vector< itkImageUL3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUL3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageUL3 self)"""
        return _itkImagePython.vectoritkImageUL3_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageUL3_Pointer >::iterator":
        """
        erase(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::iterator pos) -> std::vector< itkImageUL3_Pointer >::iterator
        erase(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::iterator first, std::vector< itkImageUL3_Pointer >::iterator last) -> std::vector< itkImageUL3_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageUL3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageUL3_Pointer)> self) -> vectoritkImageUL3
        __init__(std::vector<(itkImageUL3_Pointer)> self, vectoritkImageUL3 arg2) -> vectoritkImageUL3
        __init__(std::vector<(itkImageUL3_Pointer)> self, std::vector< itkImageUL3_Pointer >::size_type size) -> vectoritkImageUL3
        __init__(std::vector<(itkImageUL3_Pointer)> self, std::vector< itkImageUL3_Pointer >::size_type size, std::vector< itkImageUL3_Pointer >::value_type const & value) -> vectoritkImageUL3
        """
        _itkImagePython.vectoritkImageUL3_swiginit(self, _itkImagePython.new_vectoritkImageUL3(*args))

    def push_back(self, x: 'std::vector< itkImageUL3_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUL3_push_back(self, x)


    def front(self) -> "std::vector< itkImageUL3_Pointer >::value_type const &":
        """front(vectoritkImageUL3 self) -> std::vector< itkImageUL3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUL3_front(self)


    def back(self) -> "std::vector< itkImageUL3_Pointer >::value_type const &":
        """back(vectoritkImageUL3 self) -> std::vector< itkImageUL3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUL3_back(self)


    def assign(self, n: 'std::vector< itkImageUL3_Pointer >::size_type', x: 'std::vector< itkImageUL3_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::size_type n, std::vector< itkImageUL3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageUL3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::size_type new_size)
        resize(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::size_type new_size, std::vector< itkImageUL3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUL3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::iterator pos, std::vector< itkImageUL3_Pointer >::value_type const & x) -> std::vector< itkImageUL3_Pointer >::iterator
        insert(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::iterator pos, std::vector< itkImageUL3_Pointer >::size_type n, std::vector< itkImageUL3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageUL3_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageUL3_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageUL3 self, std::vector< itkImageUL3_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageUL3_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageUL3_Pointer >::size_type":
        """capacity(vectoritkImageUL3 self) -> std::vector< itkImageUL3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL3_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUL3
vectoritkImageUL3.iterator = new_instancemethod(_itkImagePython.vectoritkImageUL3_iterator, None, vectoritkImageUL3)
vectoritkImageUL3.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageUL3___nonzero__, None, vectoritkImageUL3)
vectoritkImageUL3.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageUL3___bool__, None, vectoritkImageUL3)
vectoritkImageUL3.__len__ = new_instancemethod(_itkImagePython.vectoritkImageUL3___len__, None, vectoritkImageUL3)
vectoritkImageUL3.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageUL3___getslice__, None, vectoritkImageUL3)
vectoritkImageUL3.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageUL3___setslice__, None, vectoritkImageUL3)
vectoritkImageUL3.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageUL3___delslice__, None, vectoritkImageUL3)
vectoritkImageUL3.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageUL3___delitem__, None, vectoritkImageUL3)
vectoritkImageUL3.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageUL3___getitem__, None, vectoritkImageUL3)
vectoritkImageUL3.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageUL3___setitem__, None, vectoritkImageUL3)
vectoritkImageUL3.pop = new_instancemethod(_itkImagePython.vectoritkImageUL3_pop, None, vectoritkImageUL3)
vectoritkImageUL3.append = new_instancemethod(_itkImagePython.vectoritkImageUL3_append, None, vectoritkImageUL3)
vectoritkImageUL3.empty = new_instancemethod(_itkImagePython.vectoritkImageUL3_empty, None, vectoritkImageUL3)
vectoritkImageUL3.size = new_instancemethod(_itkImagePython.vectoritkImageUL3_size, None, vectoritkImageUL3)
vectoritkImageUL3.swap = new_instancemethod(_itkImagePython.vectoritkImageUL3_swap, None, vectoritkImageUL3)
vectoritkImageUL3.begin = new_instancemethod(_itkImagePython.vectoritkImageUL3_begin, None, vectoritkImageUL3)
vectoritkImageUL3.end = new_instancemethod(_itkImagePython.vectoritkImageUL3_end, None, vectoritkImageUL3)
vectoritkImageUL3.rbegin = new_instancemethod(_itkImagePython.vectoritkImageUL3_rbegin, None, vectoritkImageUL3)
vectoritkImageUL3.rend = new_instancemethod(_itkImagePython.vectoritkImageUL3_rend, None, vectoritkImageUL3)
vectoritkImageUL3.clear = new_instancemethod(_itkImagePython.vectoritkImageUL3_clear, None, vectoritkImageUL3)
vectoritkImageUL3.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageUL3_get_allocator, None, vectoritkImageUL3)
vectoritkImageUL3.pop_back = new_instancemethod(_itkImagePython.vectoritkImageUL3_pop_back, None, vectoritkImageUL3)
vectoritkImageUL3.erase = new_instancemethod(_itkImagePython.vectoritkImageUL3_erase, None, vectoritkImageUL3)
vectoritkImageUL3.push_back = new_instancemethod(_itkImagePython.vectoritkImageUL3_push_back, None, vectoritkImageUL3)
vectoritkImageUL3.front = new_instancemethod(_itkImagePython.vectoritkImageUL3_front, None, vectoritkImageUL3)
vectoritkImageUL3.back = new_instancemethod(_itkImagePython.vectoritkImageUL3_back, None, vectoritkImageUL3)
vectoritkImageUL3.assign = new_instancemethod(_itkImagePython.vectoritkImageUL3_assign, None, vectoritkImageUL3)
vectoritkImageUL3.resize = new_instancemethod(_itkImagePython.vectoritkImageUL3_resize, None, vectoritkImageUL3)
vectoritkImageUL3.insert = new_instancemethod(_itkImagePython.vectoritkImageUL3_insert, None, vectoritkImageUL3)
vectoritkImageUL3.reserve = new_instancemethod(_itkImagePython.vectoritkImageUL3_reserve, None, vectoritkImageUL3)
vectoritkImageUL3.capacity = new_instancemethod(_itkImagePython.vectoritkImageUL3_capacity, None, vectoritkImageUL3)
vectoritkImageUL3_swigregister = _itkImagePython.vectoritkImageUL3_swigregister
vectoritkImageUL3_swigregister(vectoritkImageUL3)

class vectoritkImageULL3(object):
    """Proxy of C++ std::vector<(itkImageULL3_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageULL3 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageULL3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageULL3 self) -> bool"""
        return _itkImagePython.vectoritkImageULL3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageULL3 self) -> bool"""
        return _itkImagePython.vectoritkImageULL3___bool__(self)


    def __len__(self) -> "std::vector< itkImageULL3_Pointer >::size_type":
        """__len__(vectoritkImageULL3 self) -> std::vector< itkImageULL3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL3___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageULL3_Pointer >::difference_type', j: 'std::vector< itkImageULL3_Pointer >::difference_type') -> "std::vector< itkImageULL3_Pointer,std::allocator< itkImageULL3_Pointer > > *":
        """__getslice__(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::difference_type i, std::vector< itkImageULL3_Pointer >::difference_type j) -> vectoritkImageULL3"""
        return _itkImagePython.vectoritkImageULL3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::difference_type i, std::vector< itkImageULL3_Pointer >::difference_type j)
        __setslice__(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::difference_type i, std::vector< itkImageULL3_Pointer >::difference_type j, vectoritkImageULL3 v)
        """
        return _itkImagePython.vectoritkImageULL3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageULL3_Pointer >::difference_type', j: 'std::vector< itkImageULL3_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::difference_type i, std::vector< itkImageULL3_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageULL3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::difference_type i)
        __delitem__(vectoritkImageULL3 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageULL3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageULL3_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageULL3 self, PySliceObject * slice) -> vectoritkImageULL3
        __getitem__(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::difference_type i) -> std::vector< itkImageULL3_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageULL3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageULL3 self, PySliceObject * slice, vectoritkImageULL3 v)
        __setitem__(vectoritkImageULL3 self, PySliceObject * slice)
        __setitem__(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::difference_type i, std::vector< itkImageULL3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageULL3___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageULL3_Pointer >::value_type":
        """pop(vectoritkImageULL3 self) -> std::vector< itkImageULL3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageULL3_pop(self)


    def append(self, x: 'std::vector< itkImageULL3_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageULL3_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageULL3 self) -> bool"""
        return _itkImagePython.vectoritkImageULL3_empty(self)


    def size(self) -> "std::vector< itkImageULL3_Pointer >::size_type":
        """size(vectoritkImageULL3 self) -> std::vector< itkImageULL3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL3_size(self)


    def swap(self, v: 'vectoritkImageULL3') -> "void":
        """swap(vectoritkImageULL3 self, vectoritkImageULL3 v)"""
        return _itkImagePython.vectoritkImageULL3_swap(self, v)


    def begin(self) -> "std::vector< itkImageULL3_Pointer >::iterator":
        """begin(vectoritkImageULL3 self) -> std::vector< itkImageULL3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageULL3_begin(self)


    def end(self) -> "std::vector< itkImageULL3_Pointer >::iterator":
        """end(vectoritkImageULL3 self) -> std::vector< itkImageULL3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageULL3_end(self)


    def rbegin(self) -> "std::vector< itkImageULL3_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageULL3 self) -> std::vector< itkImageULL3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageULL3_rbegin(self)


    def rend(self) -> "std::vector< itkImageULL3_Pointer >::reverse_iterator":
        """rend(vectoritkImageULL3 self) -> std::vector< itkImageULL3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageULL3_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageULL3 self)"""
        return _itkImagePython.vectoritkImageULL3_clear(self)


    def get_allocator(self) -> "std::vector< itkImageULL3_Pointer >::allocator_type":
        """get_allocator(vectoritkImageULL3 self) -> std::vector< itkImageULL3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageULL3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageULL3 self)"""
        return _itkImagePython.vectoritkImageULL3_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageULL3_Pointer >::iterator":
        """
        erase(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::iterator pos) -> std::vector< itkImageULL3_Pointer >::iterator
        erase(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::iterator first, std::vector< itkImageULL3_Pointer >::iterator last) -> std::vector< itkImageULL3_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageULL3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageULL3_Pointer)> self) -> vectoritkImageULL3
        __init__(std::vector<(itkImageULL3_Pointer)> self, vectoritkImageULL3 arg2) -> vectoritkImageULL3
        __init__(std::vector<(itkImageULL3_Pointer)> self, std::vector< itkImageULL3_Pointer >::size_type size) -> vectoritkImageULL3
        __init__(std::vector<(itkImageULL3_Pointer)> self, std::vector< itkImageULL3_Pointer >::size_type size, std::vector< itkImageULL3_Pointer >::value_type const & value) -> vectoritkImageULL3
        """
        _itkImagePython.vectoritkImageULL3_swiginit(self, _itkImagePython.new_vectoritkImageULL3(*args))

    def push_back(self, x: 'std::vector< itkImageULL3_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageULL3_push_back(self, x)


    def front(self) -> "std::vector< itkImageULL3_Pointer >::value_type const &":
        """front(vectoritkImageULL3 self) -> std::vector< itkImageULL3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageULL3_front(self)


    def back(self) -> "std::vector< itkImageULL3_Pointer >::value_type const &":
        """back(vectoritkImageULL3 self) -> std::vector< itkImageULL3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageULL3_back(self)


    def assign(self, n: 'std::vector< itkImageULL3_Pointer >::size_type', x: 'std::vector< itkImageULL3_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::size_type n, std::vector< itkImageULL3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageULL3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::size_type new_size)
        resize(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::size_type new_size, std::vector< itkImageULL3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageULL3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::iterator pos, std::vector< itkImageULL3_Pointer >::value_type const & x) -> std::vector< itkImageULL3_Pointer >::iterator
        insert(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::iterator pos, std::vector< itkImageULL3_Pointer >::size_type n, std::vector< itkImageULL3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageULL3_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageULL3_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageULL3 self, std::vector< itkImageULL3_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageULL3_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageULL3_Pointer >::size_type":
        """capacity(vectoritkImageULL3 self) -> std::vector< itkImageULL3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL3_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageULL3
vectoritkImageULL3.iterator = new_instancemethod(_itkImagePython.vectoritkImageULL3_iterator, None, vectoritkImageULL3)
vectoritkImageULL3.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageULL3___nonzero__, None, vectoritkImageULL3)
vectoritkImageULL3.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageULL3___bool__, None, vectoritkImageULL3)
vectoritkImageULL3.__len__ = new_instancemethod(_itkImagePython.vectoritkImageULL3___len__, None, vectoritkImageULL3)
vectoritkImageULL3.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageULL3___getslice__, None, vectoritkImageULL3)
vectoritkImageULL3.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageULL3___setslice__, None, vectoritkImageULL3)
vectoritkImageULL3.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageULL3___delslice__, None, vectoritkImageULL3)
vectoritkImageULL3.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageULL3___delitem__, None, vectoritkImageULL3)
vectoritkImageULL3.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageULL3___getitem__, None, vectoritkImageULL3)
vectoritkImageULL3.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageULL3___setitem__, None, vectoritkImageULL3)
vectoritkImageULL3.pop = new_instancemethod(_itkImagePython.vectoritkImageULL3_pop, None, vectoritkImageULL3)
vectoritkImageULL3.append = new_instancemethod(_itkImagePython.vectoritkImageULL3_append, None, vectoritkImageULL3)
vectoritkImageULL3.empty = new_instancemethod(_itkImagePython.vectoritkImageULL3_empty, None, vectoritkImageULL3)
vectoritkImageULL3.size = new_instancemethod(_itkImagePython.vectoritkImageULL3_size, None, vectoritkImageULL3)
vectoritkImageULL3.swap = new_instancemethod(_itkImagePython.vectoritkImageULL3_swap, None, vectoritkImageULL3)
vectoritkImageULL3.begin = new_instancemethod(_itkImagePython.vectoritkImageULL3_begin, None, vectoritkImageULL3)
vectoritkImageULL3.end = new_instancemethod(_itkImagePython.vectoritkImageULL3_end, None, vectoritkImageULL3)
vectoritkImageULL3.rbegin = new_instancemethod(_itkImagePython.vectoritkImageULL3_rbegin, None, vectoritkImageULL3)
vectoritkImageULL3.rend = new_instancemethod(_itkImagePython.vectoritkImageULL3_rend, None, vectoritkImageULL3)
vectoritkImageULL3.clear = new_instancemethod(_itkImagePython.vectoritkImageULL3_clear, None, vectoritkImageULL3)
vectoritkImageULL3.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageULL3_get_allocator, None, vectoritkImageULL3)
vectoritkImageULL3.pop_back = new_instancemethod(_itkImagePython.vectoritkImageULL3_pop_back, None, vectoritkImageULL3)
vectoritkImageULL3.erase = new_instancemethod(_itkImagePython.vectoritkImageULL3_erase, None, vectoritkImageULL3)
vectoritkImageULL3.push_back = new_instancemethod(_itkImagePython.vectoritkImageULL3_push_back, None, vectoritkImageULL3)
vectoritkImageULL3.front = new_instancemethod(_itkImagePython.vectoritkImageULL3_front, None, vectoritkImageULL3)
vectoritkImageULL3.back = new_instancemethod(_itkImagePython.vectoritkImageULL3_back, None, vectoritkImageULL3)
vectoritkImageULL3.assign = new_instancemethod(_itkImagePython.vectoritkImageULL3_assign, None, vectoritkImageULL3)
vectoritkImageULL3.resize = new_instancemethod(_itkImagePython.vectoritkImageULL3_resize, None, vectoritkImageULL3)
vectoritkImageULL3.insert = new_instancemethod(_itkImagePython.vectoritkImageULL3_insert, None, vectoritkImageULL3)
vectoritkImageULL3.reserve = new_instancemethod(_itkImagePython.vectoritkImageULL3_reserve, None, vectoritkImageULL3)
vectoritkImageULL3.capacity = new_instancemethod(_itkImagePython.vectoritkImageULL3_capacity, None, vectoritkImageULL3)
vectoritkImageULL3_swigregister = _itkImagePython.vectoritkImageULL3_swigregister
vectoritkImageULL3_swigregister(vectoritkImageULL3)

class vectoritkImageB3(object):
    """Proxy of C++ std::vector<(itkImageB3_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageB3 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageB3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageB3 self) -> bool"""
        return _itkImagePython.vectoritkImageB3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageB3 self) -> bool"""
        return _itkImagePython.vectoritkImageB3___bool__(self)


    def __len__(self) -> "std::vector< itkImageB3_Pointer >::size_type":
        """__len__(vectoritkImageB3 self) -> std::vector< itkImageB3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB3___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageB3_Pointer >::difference_type', j: 'std::vector< itkImageB3_Pointer >::difference_type') -> "std::vector< itkImageB3_Pointer,std::allocator< itkImageB3_Pointer > > *":
        """__getslice__(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::difference_type i, std::vector< itkImageB3_Pointer >::difference_type j) -> vectoritkImageB3"""
        return _itkImagePython.vectoritkImageB3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::difference_type i, std::vector< itkImageB3_Pointer >::difference_type j)
        __setslice__(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::difference_type i, std::vector< itkImageB3_Pointer >::difference_type j, vectoritkImageB3 v)
        """
        return _itkImagePython.vectoritkImageB3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageB3_Pointer >::difference_type', j: 'std::vector< itkImageB3_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::difference_type i, std::vector< itkImageB3_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageB3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::difference_type i)
        __delitem__(vectoritkImageB3 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageB3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageB3_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageB3 self, PySliceObject * slice) -> vectoritkImageB3
        __getitem__(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::difference_type i) -> std::vector< itkImageB3_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageB3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageB3 self, PySliceObject * slice, vectoritkImageB3 v)
        __setitem__(vectoritkImageB3 self, PySliceObject * slice)
        __setitem__(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::difference_type i, std::vector< itkImageB3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageB3___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageB3_Pointer >::value_type":
        """pop(vectoritkImageB3 self) -> std::vector< itkImageB3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageB3_pop(self)


    def append(self, x: 'std::vector< itkImageB3_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageB3_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageB3 self) -> bool"""
        return _itkImagePython.vectoritkImageB3_empty(self)


    def size(self) -> "std::vector< itkImageB3_Pointer >::size_type":
        """size(vectoritkImageB3 self) -> std::vector< itkImageB3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB3_size(self)


    def swap(self, v: 'vectoritkImageB3') -> "void":
        """swap(vectoritkImageB3 self, vectoritkImageB3 v)"""
        return _itkImagePython.vectoritkImageB3_swap(self, v)


    def begin(self) -> "std::vector< itkImageB3_Pointer >::iterator":
        """begin(vectoritkImageB3 self) -> std::vector< itkImageB3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageB3_begin(self)


    def end(self) -> "std::vector< itkImageB3_Pointer >::iterator":
        """end(vectoritkImageB3 self) -> std::vector< itkImageB3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageB3_end(self)


    def rbegin(self) -> "std::vector< itkImageB3_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageB3 self) -> std::vector< itkImageB3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageB3_rbegin(self)


    def rend(self) -> "std::vector< itkImageB3_Pointer >::reverse_iterator":
        """rend(vectoritkImageB3 self) -> std::vector< itkImageB3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageB3_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageB3 self)"""
        return _itkImagePython.vectoritkImageB3_clear(self)


    def get_allocator(self) -> "std::vector< itkImageB3_Pointer >::allocator_type":
        """get_allocator(vectoritkImageB3 self) -> std::vector< itkImageB3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageB3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageB3 self)"""
        return _itkImagePython.vectoritkImageB3_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageB3_Pointer >::iterator":
        """
        erase(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::iterator pos) -> std::vector< itkImageB3_Pointer >::iterator
        erase(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::iterator first, std::vector< itkImageB3_Pointer >::iterator last) -> std::vector< itkImageB3_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageB3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageB3_Pointer)> self) -> vectoritkImageB3
        __init__(std::vector<(itkImageB3_Pointer)> self, vectoritkImageB3 arg2) -> vectoritkImageB3
        __init__(std::vector<(itkImageB3_Pointer)> self, std::vector< itkImageB3_Pointer >::size_type size) -> vectoritkImageB3
        __init__(std::vector<(itkImageB3_Pointer)> self, std::vector< itkImageB3_Pointer >::size_type size, std::vector< itkImageB3_Pointer >::value_type const & value) -> vectoritkImageB3
        """
        _itkImagePython.vectoritkImageB3_swiginit(self, _itkImagePython.new_vectoritkImageB3(*args))

    def push_back(self, x: 'std::vector< itkImageB3_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageB3_push_back(self, x)


    def front(self) -> "std::vector< itkImageB3_Pointer >::value_type const &":
        """front(vectoritkImageB3 self) -> std::vector< itkImageB3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageB3_front(self)


    def back(self) -> "std::vector< itkImageB3_Pointer >::value_type const &":
        """back(vectoritkImageB3 self) -> std::vector< itkImageB3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageB3_back(self)


    def assign(self, n: 'std::vector< itkImageB3_Pointer >::size_type', x: 'std::vector< itkImageB3_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::size_type n, std::vector< itkImageB3_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageB3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::size_type new_size)
        resize(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::size_type new_size, std::vector< itkImageB3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageB3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::iterator pos, std::vector< itkImageB3_Pointer >::value_type const & x) -> std::vector< itkImageB3_Pointer >::iterator
        insert(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::iterator pos, std::vector< itkImageB3_Pointer >::size_type n, std::vector< itkImageB3_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageB3_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageB3_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageB3 self, std::vector< itkImageB3_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageB3_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageB3_Pointer >::size_type":
        """capacity(vectoritkImageB3 self) -> std::vector< itkImageB3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB3_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageB3
vectoritkImageB3.iterator = new_instancemethod(_itkImagePython.vectoritkImageB3_iterator, None, vectoritkImageB3)
vectoritkImageB3.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageB3___nonzero__, None, vectoritkImageB3)
vectoritkImageB3.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageB3___bool__, None, vectoritkImageB3)
vectoritkImageB3.__len__ = new_instancemethod(_itkImagePython.vectoritkImageB3___len__, None, vectoritkImageB3)
vectoritkImageB3.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageB3___getslice__, None, vectoritkImageB3)
vectoritkImageB3.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageB3___setslice__, None, vectoritkImageB3)
vectoritkImageB3.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageB3___delslice__, None, vectoritkImageB3)
vectoritkImageB3.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageB3___delitem__, None, vectoritkImageB3)
vectoritkImageB3.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageB3___getitem__, None, vectoritkImageB3)
vectoritkImageB3.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageB3___setitem__, None, vectoritkImageB3)
vectoritkImageB3.pop = new_instancemethod(_itkImagePython.vectoritkImageB3_pop, None, vectoritkImageB3)
vectoritkImageB3.append = new_instancemethod(_itkImagePython.vectoritkImageB3_append, None, vectoritkImageB3)
vectoritkImageB3.empty = new_instancemethod(_itkImagePython.vectoritkImageB3_empty, None, vectoritkImageB3)
vectoritkImageB3.size = new_instancemethod(_itkImagePython.vectoritkImageB3_size, None, vectoritkImageB3)
vectoritkImageB3.swap = new_instancemethod(_itkImagePython.vectoritkImageB3_swap, None, vectoritkImageB3)
vectoritkImageB3.begin = new_instancemethod(_itkImagePython.vectoritkImageB3_begin, None, vectoritkImageB3)
vectoritkImageB3.end = new_instancemethod(_itkImagePython.vectoritkImageB3_end, None, vectoritkImageB3)
vectoritkImageB3.rbegin = new_instancemethod(_itkImagePython.vectoritkImageB3_rbegin, None, vectoritkImageB3)
vectoritkImageB3.rend = new_instancemethod(_itkImagePython.vectoritkImageB3_rend, None, vectoritkImageB3)
vectoritkImageB3.clear = new_instancemethod(_itkImagePython.vectoritkImageB3_clear, None, vectoritkImageB3)
vectoritkImageB3.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageB3_get_allocator, None, vectoritkImageB3)
vectoritkImageB3.pop_back = new_instancemethod(_itkImagePython.vectoritkImageB3_pop_back, None, vectoritkImageB3)
vectoritkImageB3.erase = new_instancemethod(_itkImagePython.vectoritkImageB3_erase, None, vectoritkImageB3)
vectoritkImageB3.push_back = new_instancemethod(_itkImagePython.vectoritkImageB3_push_back, None, vectoritkImageB3)
vectoritkImageB3.front = new_instancemethod(_itkImagePython.vectoritkImageB3_front, None, vectoritkImageB3)
vectoritkImageB3.back = new_instancemethod(_itkImagePython.vectoritkImageB3_back, None, vectoritkImageB3)
vectoritkImageB3.assign = new_instancemethod(_itkImagePython.vectoritkImageB3_assign, None, vectoritkImageB3)
vectoritkImageB3.resize = new_instancemethod(_itkImagePython.vectoritkImageB3_resize, None, vectoritkImageB3)
vectoritkImageB3.insert = new_instancemethod(_itkImagePython.vectoritkImageB3_insert, None, vectoritkImageB3)
vectoritkImageB3.reserve = new_instancemethod(_itkImagePython.vectoritkImageB3_reserve, None, vectoritkImageB3)
vectoritkImageB3.capacity = new_instancemethod(_itkImagePython.vectoritkImageB3_capacity, None, vectoritkImageB3)
vectoritkImageB3_swigregister = _itkImagePython.vectoritkImageB3_swigregister
vectoritkImageB3_swigregister(vectoritkImageB3)

class vectoritkImageFAF33(object):
    """Proxy of C++ std::vector<(itkImageFAF33_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageFAF33 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageFAF33_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageFAF33 self) -> bool"""
        return _itkImagePython.vectoritkImageFAF33___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageFAF33 self) -> bool"""
        return _itkImagePython.vectoritkImageFAF33___bool__(self)


    def __len__(self) -> "std::vector< itkImageFAF33_Pointer >::size_type":
        """__len__(vectoritkImageFAF33 self) -> std::vector< itkImageFAF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF33___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageFAF33_Pointer >::difference_type', j: 'std::vector< itkImageFAF33_Pointer >::difference_type') -> "std::vector< itkImageFAF33_Pointer,std::allocator< itkImageFAF33_Pointer > > *":
        """__getslice__(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::difference_type i, std::vector< itkImageFAF33_Pointer >::difference_type j) -> vectoritkImageFAF33"""
        return _itkImagePython.vectoritkImageFAF33___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::difference_type i, std::vector< itkImageFAF33_Pointer >::difference_type j)
        __setslice__(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::difference_type i, std::vector< itkImageFAF33_Pointer >::difference_type j, vectoritkImageFAF33 v)
        """
        return _itkImagePython.vectoritkImageFAF33___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageFAF33_Pointer >::difference_type', j: 'std::vector< itkImageFAF33_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::difference_type i, std::vector< itkImageFAF33_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageFAF33___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::difference_type i)
        __delitem__(vectoritkImageFAF33 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageFAF33___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageFAF33_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageFAF33 self, PySliceObject * slice) -> vectoritkImageFAF33
        __getitem__(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::difference_type i) -> std::vector< itkImageFAF33_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageFAF33___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageFAF33 self, PySliceObject * slice, vectoritkImageFAF33 v)
        __setitem__(vectoritkImageFAF33 self, PySliceObject * slice)
        __setitem__(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::difference_type i, std::vector< itkImageFAF33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageFAF33___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageFAF33_Pointer >::value_type":
        """pop(vectoritkImageFAF33 self) -> std::vector< itkImageFAF33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageFAF33_pop(self)


    def append(self, x: 'std::vector< itkImageFAF33_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageFAF33_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageFAF33 self) -> bool"""
        return _itkImagePython.vectoritkImageFAF33_empty(self)


    def size(self) -> "std::vector< itkImageFAF33_Pointer >::size_type":
        """size(vectoritkImageFAF33 self) -> std::vector< itkImageFAF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF33_size(self)


    def swap(self, v: 'vectoritkImageFAF33') -> "void":
        """swap(vectoritkImageFAF33 self, vectoritkImageFAF33 v)"""
        return _itkImagePython.vectoritkImageFAF33_swap(self, v)


    def begin(self) -> "std::vector< itkImageFAF33_Pointer >::iterator":
        """begin(vectoritkImageFAF33 self) -> std::vector< itkImageFAF33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAF33_begin(self)


    def end(self) -> "std::vector< itkImageFAF33_Pointer >::iterator":
        """end(vectoritkImageFAF33 self) -> std::vector< itkImageFAF33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAF33_end(self)


    def rbegin(self) -> "std::vector< itkImageFAF33_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageFAF33 self) -> std::vector< itkImageFAF33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAF33_rbegin(self)


    def rend(self) -> "std::vector< itkImageFAF33_Pointer >::reverse_iterator":
        """rend(vectoritkImageFAF33 self) -> std::vector< itkImageFAF33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAF33_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageFAF33 self)"""
        return _itkImagePython.vectoritkImageFAF33_clear(self)


    def get_allocator(self) -> "std::vector< itkImageFAF33_Pointer >::allocator_type":
        """get_allocator(vectoritkImageFAF33 self) -> std::vector< itkImageFAF33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageFAF33_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageFAF33 self)"""
        return _itkImagePython.vectoritkImageFAF33_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageFAF33_Pointer >::iterator":
        """
        erase(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::iterator pos) -> std::vector< itkImageFAF33_Pointer >::iterator
        erase(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::iterator first, std::vector< itkImageFAF33_Pointer >::iterator last) -> std::vector< itkImageFAF33_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageFAF33_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageFAF33_Pointer)> self) -> vectoritkImageFAF33
        __init__(std::vector<(itkImageFAF33_Pointer)> self, vectoritkImageFAF33 arg2) -> vectoritkImageFAF33
        __init__(std::vector<(itkImageFAF33_Pointer)> self, std::vector< itkImageFAF33_Pointer >::size_type size) -> vectoritkImageFAF33
        __init__(std::vector<(itkImageFAF33_Pointer)> self, std::vector< itkImageFAF33_Pointer >::size_type size, std::vector< itkImageFAF33_Pointer >::value_type const & value) -> vectoritkImageFAF33
        """
        _itkImagePython.vectoritkImageFAF33_swiginit(self, _itkImagePython.new_vectoritkImageFAF33(*args))

    def push_back(self, x: 'std::vector< itkImageFAF33_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageFAF33_push_back(self, x)


    def front(self) -> "std::vector< itkImageFAF33_Pointer >::value_type const &":
        """front(vectoritkImageFAF33 self) -> std::vector< itkImageFAF33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAF33_front(self)


    def back(self) -> "std::vector< itkImageFAF33_Pointer >::value_type const &":
        """back(vectoritkImageFAF33 self) -> std::vector< itkImageFAF33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAF33_back(self)


    def assign(self, n: 'std::vector< itkImageFAF33_Pointer >::size_type', x: 'std::vector< itkImageFAF33_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::size_type n, std::vector< itkImageFAF33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageFAF33_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::size_type new_size)
        resize(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::size_type new_size, std::vector< itkImageFAF33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageFAF33_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::iterator pos, std::vector< itkImageFAF33_Pointer >::value_type const & x) -> std::vector< itkImageFAF33_Pointer >::iterator
        insert(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::iterator pos, std::vector< itkImageFAF33_Pointer >::size_type n, std::vector< itkImageFAF33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageFAF33_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageFAF33_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageFAF33 self, std::vector< itkImageFAF33_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageFAF33_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageFAF33_Pointer >::size_type":
        """capacity(vectoritkImageFAF33 self) -> std::vector< itkImageFAF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF33_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageFAF33
vectoritkImageFAF33.iterator = new_instancemethod(_itkImagePython.vectoritkImageFAF33_iterator, None, vectoritkImageFAF33)
vectoritkImageFAF33.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageFAF33___nonzero__, None, vectoritkImageFAF33)
vectoritkImageFAF33.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageFAF33___bool__, None, vectoritkImageFAF33)
vectoritkImageFAF33.__len__ = new_instancemethod(_itkImagePython.vectoritkImageFAF33___len__, None, vectoritkImageFAF33)
vectoritkImageFAF33.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageFAF33___getslice__, None, vectoritkImageFAF33)
vectoritkImageFAF33.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageFAF33___setslice__, None, vectoritkImageFAF33)
vectoritkImageFAF33.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageFAF33___delslice__, None, vectoritkImageFAF33)
vectoritkImageFAF33.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageFAF33___delitem__, None, vectoritkImageFAF33)
vectoritkImageFAF33.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageFAF33___getitem__, None, vectoritkImageFAF33)
vectoritkImageFAF33.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageFAF33___setitem__, None, vectoritkImageFAF33)
vectoritkImageFAF33.pop = new_instancemethod(_itkImagePython.vectoritkImageFAF33_pop, None, vectoritkImageFAF33)
vectoritkImageFAF33.append = new_instancemethod(_itkImagePython.vectoritkImageFAF33_append, None, vectoritkImageFAF33)
vectoritkImageFAF33.empty = new_instancemethod(_itkImagePython.vectoritkImageFAF33_empty, None, vectoritkImageFAF33)
vectoritkImageFAF33.size = new_instancemethod(_itkImagePython.vectoritkImageFAF33_size, None, vectoritkImageFAF33)
vectoritkImageFAF33.swap = new_instancemethod(_itkImagePython.vectoritkImageFAF33_swap, None, vectoritkImageFAF33)
vectoritkImageFAF33.begin = new_instancemethod(_itkImagePython.vectoritkImageFAF33_begin, None, vectoritkImageFAF33)
vectoritkImageFAF33.end = new_instancemethod(_itkImagePython.vectoritkImageFAF33_end, None, vectoritkImageFAF33)
vectoritkImageFAF33.rbegin = new_instancemethod(_itkImagePython.vectoritkImageFAF33_rbegin, None, vectoritkImageFAF33)
vectoritkImageFAF33.rend = new_instancemethod(_itkImagePython.vectoritkImageFAF33_rend, None, vectoritkImageFAF33)
vectoritkImageFAF33.clear = new_instancemethod(_itkImagePython.vectoritkImageFAF33_clear, None, vectoritkImageFAF33)
vectoritkImageFAF33.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageFAF33_get_allocator, None, vectoritkImageFAF33)
vectoritkImageFAF33.pop_back = new_instancemethod(_itkImagePython.vectoritkImageFAF33_pop_back, None, vectoritkImageFAF33)
vectoritkImageFAF33.erase = new_instancemethod(_itkImagePython.vectoritkImageFAF33_erase, None, vectoritkImageFAF33)
vectoritkImageFAF33.push_back = new_instancemethod(_itkImagePython.vectoritkImageFAF33_push_back, None, vectoritkImageFAF33)
vectoritkImageFAF33.front = new_instancemethod(_itkImagePython.vectoritkImageFAF33_front, None, vectoritkImageFAF33)
vectoritkImageFAF33.back = new_instancemethod(_itkImagePython.vectoritkImageFAF33_back, None, vectoritkImageFAF33)
vectoritkImageFAF33.assign = new_instancemethod(_itkImagePython.vectoritkImageFAF33_assign, None, vectoritkImageFAF33)
vectoritkImageFAF33.resize = new_instancemethod(_itkImagePython.vectoritkImageFAF33_resize, None, vectoritkImageFAF33)
vectoritkImageFAF33.insert = new_instancemethod(_itkImagePython.vectoritkImageFAF33_insert, None, vectoritkImageFAF33)
vectoritkImageFAF33.reserve = new_instancemethod(_itkImagePython.vectoritkImageFAF33_reserve, None, vectoritkImageFAF33)
vectoritkImageFAF33.capacity = new_instancemethod(_itkImagePython.vectoritkImageFAF33_capacity, None, vectoritkImageFAF33)
vectoritkImageFAF33_swigregister = _itkImagePython.vectoritkImageFAF33_swigregister
vectoritkImageFAF33_swigregister(vectoritkImageFAF33)

class vectoritkImageO33(object):
    """Proxy of C++ std::vector<(itkImageO33_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageO33 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageO33_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageO33 self) -> bool"""
        return _itkImagePython.vectoritkImageO33___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageO33 self) -> bool"""
        return _itkImagePython.vectoritkImageO33___bool__(self)


    def __len__(self) -> "std::vector< itkImageO33_Pointer >::size_type":
        """__len__(vectoritkImageO33 self) -> std::vector< itkImageO33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO33___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageO33_Pointer >::difference_type', j: 'std::vector< itkImageO33_Pointer >::difference_type') -> "std::vector< itkImageO33_Pointer,std::allocator< itkImageO33_Pointer > > *":
        """__getslice__(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::difference_type i, std::vector< itkImageO33_Pointer >::difference_type j) -> vectoritkImageO33"""
        return _itkImagePython.vectoritkImageO33___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::difference_type i, std::vector< itkImageO33_Pointer >::difference_type j)
        __setslice__(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::difference_type i, std::vector< itkImageO33_Pointer >::difference_type j, vectoritkImageO33 v)
        """
        return _itkImagePython.vectoritkImageO33___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageO33_Pointer >::difference_type', j: 'std::vector< itkImageO33_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::difference_type i, std::vector< itkImageO33_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageO33___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::difference_type i)
        __delitem__(vectoritkImageO33 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageO33___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageO33_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageO33 self, PySliceObject * slice) -> vectoritkImageO33
        __getitem__(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::difference_type i) -> std::vector< itkImageO33_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageO33___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageO33 self, PySliceObject * slice, vectoritkImageO33 v)
        __setitem__(vectoritkImageO33 self, PySliceObject * slice)
        __setitem__(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::difference_type i, std::vector< itkImageO33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageO33___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageO33_Pointer >::value_type":
        """pop(vectoritkImageO33 self) -> std::vector< itkImageO33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageO33_pop(self)


    def append(self, x: 'std::vector< itkImageO33_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageO33_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageO33 self) -> bool"""
        return _itkImagePython.vectoritkImageO33_empty(self)


    def size(self) -> "std::vector< itkImageO33_Pointer >::size_type":
        """size(vectoritkImageO33 self) -> std::vector< itkImageO33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO33_size(self)


    def swap(self, v: 'vectoritkImageO33') -> "void":
        """swap(vectoritkImageO33 self, vectoritkImageO33 v)"""
        return _itkImagePython.vectoritkImageO33_swap(self, v)


    def begin(self) -> "std::vector< itkImageO33_Pointer >::iterator":
        """begin(vectoritkImageO33 self) -> std::vector< itkImageO33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageO33_begin(self)


    def end(self) -> "std::vector< itkImageO33_Pointer >::iterator":
        """end(vectoritkImageO33 self) -> std::vector< itkImageO33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageO33_end(self)


    def rbegin(self) -> "std::vector< itkImageO33_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageO33 self) -> std::vector< itkImageO33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageO33_rbegin(self)


    def rend(self) -> "std::vector< itkImageO33_Pointer >::reverse_iterator":
        """rend(vectoritkImageO33 self) -> std::vector< itkImageO33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageO33_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageO33 self)"""
        return _itkImagePython.vectoritkImageO33_clear(self)


    def get_allocator(self) -> "std::vector< itkImageO33_Pointer >::allocator_type":
        """get_allocator(vectoritkImageO33 self) -> std::vector< itkImageO33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageO33_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageO33 self)"""
        return _itkImagePython.vectoritkImageO33_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageO33_Pointer >::iterator":
        """
        erase(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::iterator pos) -> std::vector< itkImageO33_Pointer >::iterator
        erase(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::iterator first, std::vector< itkImageO33_Pointer >::iterator last) -> std::vector< itkImageO33_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageO33_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageO33_Pointer)> self) -> vectoritkImageO33
        __init__(std::vector<(itkImageO33_Pointer)> self, vectoritkImageO33 arg2) -> vectoritkImageO33
        __init__(std::vector<(itkImageO33_Pointer)> self, std::vector< itkImageO33_Pointer >::size_type size) -> vectoritkImageO33
        __init__(std::vector<(itkImageO33_Pointer)> self, std::vector< itkImageO33_Pointer >::size_type size, std::vector< itkImageO33_Pointer >::value_type const & value) -> vectoritkImageO33
        """
        _itkImagePython.vectoritkImageO33_swiginit(self, _itkImagePython.new_vectoritkImageO33(*args))

    def push_back(self, x: 'std::vector< itkImageO33_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageO33_push_back(self, x)


    def front(self) -> "std::vector< itkImageO33_Pointer >::value_type const &":
        """front(vectoritkImageO33 self) -> std::vector< itkImageO33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageO33_front(self)


    def back(self) -> "std::vector< itkImageO33_Pointer >::value_type const &":
        """back(vectoritkImageO33 self) -> std::vector< itkImageO33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageO33_back(self)


    def assign(self, n: 'std::vector< itkImageO33_Pointer >::size_type', x: 'std::vector< itkImageO33_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::size_type n, std::vector< itkImageO33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageO33_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::size_type new_size)
        resize(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::size_type new_size, std::vector< itkImageO33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageO33_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::iterator pos, std::vector< itkImageO33_Pointer >::value_type const & x) -> std::vector< itkImageO33_Pointer >::iterator
        insert(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::iterator pos, std::vector< itkImageO33_Pointer >::size_type n, std::vector< itkImageO33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageO33_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageO33_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageO33 self, std::vector< itkImageO33_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageO33_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageO33_Pointer >::size_type":
        """capacity(vectoritkImageO33 self) -> std::vector< itkImageO33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO33_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageO33
vectoritkImageO33.iterator = new_instancemethod(_itkImagePython.vectoritkImageO33_iterator, None, vectoritkImageO33)
vectoritkImageO33.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageO33___nonzero__, None, vectoritkImageO33)
vectoritkImageO33.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageO33___bool__, None, vectoritkImageO33)
vectoritkImageO33.__len__ = new_instancemethod(_itkImagePython.vectoritkImageO33___len__, None, vectoritkImageO33)
vectoritkImageO33.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageO33___getslice__, None, vectoritkImageO33)
vectoritkImageO33.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageO33___setslice__, None, vectoritkImageO33)
vectoritkImageO33.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageO33___delslice__, None, vectoritkImageO33)
vectoritkImageO33.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageO33___delitem__, None, vectoritkImageO33)
vectoritkImageO33.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageO33___getitem__, None, vectoritkImageO33)
vectoritkImageO33.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageO33___setitem__, None, vectoritkImageO33)
vectoritkImageO33.pop = new_instancemethod(_itkImagePython.vectoritkImageO33_pop, None, vectoritkImageO33)
vectoritkImageO33.append = new_instancemethod(_itkImagePython.vectoritkImageO33_append, None, vectoritkImageO33)
vectoritkImageO33.empty = new_instancemethod(_itkImagePython.vectoritkImageO33_empty, None, vectoritkImageO33)
vectoritkImageO33.size = new_instancemethod(_itkImagePython.vectoritkImageO33_size, None, vectoritkImageO33)
vectoritkImageO33.swap = new_instancemethod(_itkImagePython.vectoritkImageO33_swap, None, vectoritkImageO33)
vectoritkImageO33.begin = new_instancemethod(_itkImagePython.vectoritkImageO33_begin, None, vectoritkImageO33)
vectoritkImageO33.end = new_instancemethod(_itkImagePython.vectoritkImageO33_end, None, vectoritkImageO33)
vectoritkImageO33.rbegin = new_instancemethod(_itkImagePython.vectoritkImageO33_rbegin, None, vectoritkImageO33)
vectoritkImageO33.rend = new_instancemethod(_itkImagePython.vectoritkImageO33_rend, None, vectoritkImageO33)
vectoritkImageO33.clear = new_instancemethod(_itkImagePython.vectoritkImageO33_clear, None, vectoritkImageO33)
vectoritkImageO33.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageO33_get_allocator, None, vectoritkImageO33)
vectoritkImageO33.pop_back = new_instancemethod(_itkImagePython.vectoritkImageO33_pop_back, None, vectoritkImageO33)
vectoritkImageO33.erase = new_instancemethod(_itkImagePython.vectoritkImageO33_erase, None, vectoritkImageO33)
vectoritkImageO33.push_back = new_instancemethod(_itkImagePython.vectoritkImageO33_push_back, None, vectoritkImageO33)
vectoritkImageO33.front = new_instancemethod(_itkImagePython.vectoritkImageO33_front, None, vectoritkImageO33)
vectoritkImageO33.back = new_instancemethod(_itkImagePython.vectoritkImageO33_back, None, vectoritkImageO33)
vectoritkImageO33.assign = new_instancemethod(_itkImagePython.vectoritkImageO33_assign, None, vectoritkImageO33)
vectoritkImageO33.resize = new_instancemethod(_itkImagePython.vectoritkImageO33_resize, None, vectoritkImageO33)
vectoritkImageO33.insert = new_instancemethod(_itkImagePython.vectoritkImageO33_insert, None, vectoritkImageO33)
vectoritkImageO33.reserve = new_instancemethod(_itkImagePython.vectoritkImageO33_reserve, None, vectoritkImageO33)
vectoritkImageO33.capacity = new_instancemethod(_itkImagePython.vectoritkImageO33_capacity, None, vectoritkImageO33)
vectoritkImageO33_swigregister = _itkImagePython.vectoritkImageO33_swigregister
vectoritkImageO33_swigregister(vectoritkImageO33)

class vectoritkImageSSRTD33(object):
    """Proxy of C++ std::vector<(itkImageSSRTD33_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageSSRTD33 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSSRTD33_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageSSRTD33 self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD33___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageSSRTD33 self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD33___bool__(self)


    def __len__(self) -> "std::vector< itkImageSSRTD33_Pointer >::size_type":
        """__len__(vectoritkImageSSRTD33 self) -> std::vector< itkImageSSRTD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD33___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageSSRTD33_Pointer >::difference_type', j: 'std::vector< itkImageSSRTD33_Pointer >::difference_type') -> "std::vector< itkImageSSRTD33_Pointer,std::allocator< itkImageSSRTD33_Pointer > > *":
        """__getslice__(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::difference_type i, std::vector< itkImageSSRTD33_Pointer >::difference_type j) -> vectoritkImageSSRTD33"""
        return _itkImagePython.vectoritkImageSSRTD33___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::difference_type i, std::vector< itkImageSSRTD33_Pointer >::difference_type j)
        __setslice__(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::difference_type i, std::vector< itkImageSSRTD33_Pointer >::difference_type j, vectoritkImageSSRTD33 v)
        """
        return _itkImagePython.vectoritkImageSSRTD33___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageSSRTD33_Pointer >::difference_type', j: 'std::vector< itkImageSSRTD33_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::difference_type i, std::vector< itkImageSSRTD33_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageSSRTD33___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::difference_type i)
        __delitem__(vectoritkImageSSRTD33 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageSSRTD33___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageSSRTD33_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageSSRTD33 self, PySliceObject * slice) -> vectoritkImageSSRTD33
        __getitem__(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::difference_type i) -> std::vector< itkImageSSRTD33_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageSSRTD33___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageSSRTD33 self, PySliceObject * slice, vectoritkImageSSRTD33 v)
        __setitem__(vectoritkImageSSRTD33 self, PySliceObject * slice)
        __setitem__(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::difference_type i, std::vector< itkImageSSRTD33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageSSRTD33___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageSSRTD33_Pointer >::value_type":
        """pop(vectoritkImageSSRTD33 self) -> std::vector< itkImageSSRTD33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSSRTD33_pop(self)


    def append(self, x: 'std::vector< itkImageSSRTD33_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageSSRTD33_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageSSRTD33 self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD33_empty(self)


    def size(self) -> "std::vector< itkImageSSRTD33_Pointer >::size_type":
        """size(vectoritkImageSSRTD33 self) -> std::vector< itkImageSSRTD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD33_size(self)


    def swap(self, v: 'vectoritkImageSSRTD33') -> "void":
        """swap(vectoritkImageSSRTD33 self, vectoritkImageSSRTD33 v)"""
        return _itkImagePython.vectoritkImageSSRTD33_swap(self, v)


    def begin(self) -> "std::vector< itkImageSSRTD33_Pointer >::iterator":
        """begin(vectoritkImageSSRTD33 self) -> std::vector< itkImageSSRTD33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTD33_begin(self)


    def end(self) -> "std::vector< itkImageSSRTD33_Pointer >::iterator":
        """end(vectoritkImageSSRTD33 self) -> std::vector< itkImageSSRTD33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTD33_end(self)


    def rbegin(self) -> "std::vector< itkImageSSRTD33_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageSSRTD33 self) -> std::vector< itkImageSSRTD33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTD33_rbegin(self)


    def rend(self) -> "std::vector< itkImageSSRTD33_Pointer >::reverse_iterator":
        """rend(vectoritkImageSSRTD33 self) -> std::vector< itkImageSSRTD33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTD33_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageSSRTD33 self)"""
        return _itkImagePython.vectoritkImageSSRTD33_clear(self)


    def get_allocator(self) -> "std::vector< itkImageSSRTD33_Pointer >::allocator_type":
        """get_allocator(vectoritkImageSSRTD33 self) -> std::vector< itkImageSSRTD33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSSRTD33_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageSSRTD33 self)"""
        return _itkImagePython.vectoritkImageSSRTD33_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageSSRTD33_Pointer >::iterator":
        """
        erase(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::iterator pos) -> std::vector< itkImageSSRTD33_Pointer >::iterator
        erase(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::iterator first, std::vector< itkImageSSRTD33_Pointer >::iterator last) -> std::vector< itkImageSSRTD33_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageSSRTD33_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageSSRTD33_Pointer)> self) -> vectoritkImageSSRTD33
        __init__(std::vector<(itkImageSSRTD33_Pointer)> self, vectoritkImageSSRTD33 arg2) -> vectoritkImageSSRTD33
        __init__(std::vector<(itkImageSSRTD33_Pointer)> self, std::vector< itkImageSSRTD33_Pointer >::size_type size) -> vectoritkImageSSRTD33
        __init__(std::vector<(itkImageSSRTD33_Pointer)> self, std::vector< itkImageSSRTD33_Pointer >::size_type size, std::vector< itkImageSSRTD33_Pointer >::value_type const & value) -> vectoritkImageSSRTD33
        """
        _itkImagePython.vectoritkImageSSRTD33_swiginit(self, _itkImagePython.new_vectoritkImageSSRTD33(*args))

    def push_back(self, x: 'std::vector< itkImageSSRTD33_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageSSRTD33_push_back(self, x)


    def front(self) -> "std::vector< itkImageSSRTD33_Pointer >::value_type const &":
        """front(vectoritkImageSSRTD33 self) -> std::vector< itkImageSSRTD33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTD33_front(self)


    def back(self) -> "std::vector< itkImageSSRTD33_Pointer >::value_type const &":
        """back(vectoritkImageSSRTD33 self) -> std::vector< itkImageSSRTD33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTD33_back(self)


    def assign(self, n: 'std::vector< itkImageSSRTD33_Pointer >::size_type', x: 'std::vector< itkImageSSRTD33_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::size_type n, std::vector< itkImageSSRTD33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageSSRTD33_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::size_type new_size)
        resize(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::size_type new_size, std::vector< itkImageSSRTD33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageSSRTD33_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::iterator pos, std::vector< itkImageSSRTD33_Pointer >::value_type const & x) -> std::vector< itkImageSSRTD33_Pointer >::iterator
        insert(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::iterator pos, std::vector< itkImageSSRTD33_Pointer >::size_type n, std::vector< itkImageSSRTD33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageSSRTD33_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageSSRTD33_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageSSRTD33 self, std::vector< itkImageSSRTD33_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageSSRTD33_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageSSRTD33_Pointer >::size_type":
        """capacity(vectoritkImageSSRTD33 self) -> std::vector< itkImageSSRTD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD33_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSSRTD33
vectoritkImageSSRTD33.iterator = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_iterator, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33___nonzero__, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33___bool__, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.__len__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33___len__, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33___getslice__, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33___setslice__, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33___delslice__, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33___delitem__, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33___getitem__, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33___setitem__, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.pop = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_pop, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.append = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_append, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.empty = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_empty, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.size = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_size, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.swap = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_swap, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.begin = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_begin, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.end = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_end, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.rbegin = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_rbegin, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.rend = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_rend, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.clear = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_clear, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_get_allocator, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.pop_back = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_pop_back, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.erase = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_erase, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.push_back = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_push_back, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.front = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_front, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.back = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_back, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.assign = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_assign, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.resize = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_resize, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.insert = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_insert, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.reserve = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_reserve, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33.capacity = new_instancemethod(_itkImagePython.vectoritkImageSSRTD33_capacity, None, vectoritkImageSSRTD33)
vectoritkImageSSRTD33_swigregister = _itkImagePython.vectoritkImageSSRTD33_swigregister
vectoritkImageSSRTD33_swigregister(vectoritkImageSSRTD33)

class vectoritkImageVF12(object):
    """Proxy of C++ std::vector<(itkImageVF12_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVF12 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF12_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVF12 self) -> bool"""
        return _itkImagePython.vectoritkImageVF12___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVF12 self) -> bool"""
        return _itkImagePython.vectoritkImageVF12___bool__(self)


    def __len__(self) -> "std::vector< itkImageVF12_Pointer >::size_type":
        """__len__(vectoritkImageVF12 self) -> std::vector< itkImageVF12_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF12___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVF12_Pointer >::difference_type', j: 'std::vector< itkImageVF12_Pointer >::difference_type') -> "std::vector< itkImageVF12_Pointer,std::allocator< itkImageVF12_Pointer > > *":
        """__getslice__(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::difference_type i, std::vector< itkImageVF12_Pointer >::difference_type j) -> vectoritkImageVF12"""
        return _itkImagePython.vectoritkImageVF12___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::difference_type i, std::vector< itkImageVF12_Pointer >::difference_type j)
        __setslice__(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::difference_type i, std::vector< itkImageVF12_Pointer >::difference_type j, vectoritkImageVF12 v)
        """
        return _itkImagePython.vectoritkImageVF12___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVF12_Pointer >::difference_type', j: 'std::vector< itkImageVF12_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::difference_type i, std::vector< itkImageVF12_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVF12___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::difference_type i)
        __delitem__(vectoritkImageVF12 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVF12___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVF12_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVF12 self, PySliceObject * slice) -> vectoritkImageVF12
        __getitem__(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::difference_type i) -> std::vector< itkImageVF12_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVF12___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVF12 self, PySliceObject * slice, vectoritkImageVF12 v)
        __setitem__(vectoritkImageVF12 self, PySliceObject * slice)
        __setitem__(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::difference_type i, std::vector< itkImageVF12_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF12___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVF12_Pointer >::value_type":
        """pop(vectoritkImageVF12 self) -> std::vector< itkImageVF12_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF12_pop(self)


    def append(self, x: 'std::vector< itkImageVF12_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF12_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVF12 self) -> bool"""
        return _itkImagePython.vectoritkImageVF12_empty(self)


    def size(self) -> "std::vector< itkImageVF12_Pointer >::size_type":
        """size(vectoritkImageVF12 self) -> std::vector< itkImageVF12_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF12_size(self)


    def swap(self, v: 'vectoritkImageVF12') -> "void":
        """swap(vectoritkImageVF12 self, vectoritkImageVF12 v)"""
        return _itkImagePython.vectoritkImageVF12_swap(self, v)


    def begin(self) -> "std::vector< itkImageVF12_Pointer >::iterator":
        """begin(vectoritkImageVF12 self) -> std::vector< itkImageVF12_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF12_begin(self)


    def end(self) -> "std::vector< itkImageVF12_Pointer >::iterator":
        """end(vectoritkImageVF12 self) -> std::vector< itkImageVF12_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF12_end(self)


    def rbegin(self) -> "std::vector< itkImageVF12_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVF12 self) -> std::vector< itkImageVF12_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF12_rbegin(self)


    def rend(self) -> "std::vector< itkImageVF12_Pointer >::reverse_iterator":
        """rend(vectoritkImageVF12 self) -> std::vector< itkImageVF12_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF12_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVF12 self)"""
        return _itkImagePython.vectoritkImageVF12_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVF12_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVF12 self) -> std::vector< itkImageVF12_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF12_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVF12 self)"""
        return _itkImagePython.vectoritkImageVF12_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVF12_Pointer >::iterator":
        """
        erase(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::iterator pos) -> std::vector< itkImageVF12_Pointer >::iterator
        erase(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::iterator first, std::vector< itkImageVF12_Pointer >::iterator last) -> std::vector< itkImageVF12_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVF12_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVF12_Pointer)> self) -> vectoritkImageVF12
        __init__(std::vector<(itkImageVF12_Pointer)> self, vectoritkImageVF12 arg2) -> vectoritkImageVF12
        __init__(std::vector<(itkImageVF12_Pointer)> self, std::vector< itkImageVF12_Pointer >::size_type size) -> vectoritkImageVF12
        __init__(std::vector<(itkImageVF12_Pointer)> self, std::vector< itkImageVF12_Pointer >::size_type size, std::vector< itkImageVF12_Pointer >::value_type const & value) -> vectoritkImageVF12
        """
        _itkImagePython.vectoritkImageVF12_swiginit(self, _itkImagePython.new_vectoritkImageVF12(*args))

    def push_back(self, x: 'std::vector< itkImageVF12_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF12_push_back(self, x)


    def front(self) -> "std::vector< itkImageVF12_Pointer >::value_type const &":
        """front(vectoritkImageVF12 self) -> std::vector< itkImageVF12_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF12_front(self)


    def back(self) -> "std::vector< itkImageVF12_Pointer >::value_type const &":
        """back(vectoritkImageVF12 self) -> std::vector< itkImageVF12_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF12_back(self)


    def assign(self, n: 'std::vector< itkImageVF12_Pointer >::size_type', x: 'std::vector< itkImageVF12_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::size_type n, std::vector< itkImageVF12_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF12_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::size_type new_size)
        resize(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::size_type new_size, std::vector< itkImageVF12_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF12_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::iterator pos, std::vector< itkImageVF12_Pointer >::value_type const & x) -> std::vector< itkImageVF12_Pointer >::iterator
        insert(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::iterator pos, std::vector< itkImageVF12_Pointer >::size_type n, std::vector< itkImageVF12_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF12_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVF12_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVF12 self, std::vector< itkImageVF12_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVF12_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVF12_Pointer >::size_type":
        """capacity(vectoritkImageVF12 self) -> std::vector< itkImageVF12_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF12_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF12
vectoritkImageVF12.iterator = new_instancemethod(_itkImagePython.vectoritkImageVF12_iterator, None, vectoritkImageVF12)
vectoritkImageVF12.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVF12___nonzero__, None, vectoritkImageVF12)
vectoritkImageVF12.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVF12___bool__, None, vectoritkImageVF12)
vectoritkImageVF12.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVF12___len__, None, vectoritkImageVF12)
vectoritkImageVF12.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF12___getslice__, None, vectoritkImageVF12)
vectoritkImageVF12.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF12___setslice__, None, vectoritkImageVF12)
vectoritkImageVF12.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF12___delslice__, None, vectoritkImageVF12)
vectoritkImageVF12.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF12___delitem__, None, vectoritkImageVF12)
vectoritkImageVF12.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF12___getitem__, None, vectoritkImageVF12)
vectoritkImageVF12.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF12___setitem__, None, vectoritkImageVF12)
vectoritkImageVF12.pop = new_instancemethod(_itkImagePython.vectoritkImageVF12_pop, None, vectoritkImageVF12)
vectoritkImageVF12.append = new_instancemethod(_itkImagePython.vectoritkImageVF12_append, None, vectoritkImageVF12)
vectoritkImageVF12.empty = new_instancemethod(_itkImagePython.vectoritkImageVF12_empty, None, vectoritkImageVF12)
vectoritkImageVF12.size = new_instancemethod(_itkImagePython.vectoritkImageVF12_size, None, vectoritkImageVF12)
vectoritkImageVF12.swap = new_instancemethod(_itkImagePython.vectoritkImageVF12_swap, None, vectoritkImageVF12)
vectoritkImageVF12.begin = new_instancemethod(_itkImagePython.vectoritkImageVF12_begin, None, vectoritkImageVF12)
vectoritkImageVF12.end = new_instancemethod(_itkImagePython.vectoritkImageVF12_end, None, vectoritkImageVF12)
vectoritkImageVF12.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVF12_rbegin, None, vectoritkImageVF12)
vectoritkImageVF12.rend = new_instancemethod(_itkImagePython.vectoritkImageVF12_rend, None, vectoritkImageVF12)
vectoritkImageVF12.clear = new_instancemethod(_itkImagePython.vectoritkImageVF12_clear, None, vectoritkImageVF12)
vectoritkImageVF12.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVF12_get_allocator, None, vectoritkImageVF12)
vectoritkImageVF12.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVF12_pop_back, None, vectoritkImageVF12)
vectoritkImageVF12.erase = new_instancemethod(_itkImagePython.vectoritkImageVF12_erase, None, vectoritkImageVF12)
vectoritkImageVF12.push_back = new_instancemethod(_itkImagePython.vectoritkImageVF12_push_back, None, vectoritkImageVF12)
vectoritkImageVF12.front = new_instancemethod(_itkImagePython.vectoritkImageVF12_front, None, vectoritkImageVF12)
vectoritkImageVF12.back = new_instancemethod(_itkImagePython.vectoritkImageVF12_back, None, vectoritkImageVF12)
vectoritkImageVF12.assign = new_instancemethod(_itkImagePython.vectoritkImageVF12_assign, None, vectoritkImageVF12)
vectoritkImageVF12.resize = new_instancemethod(_itkImagePython.vectoritkImageVF12_resize, None, vectoritkImageVF12)
vectoritkImageVF12.insert = new_instancemethod(_itkImagePython.vectoritkImageVF12_insert, None, vectoritkImageVF12)
vectoritkImageVF12.reserve = new_instancemethod(_itkImagePython.vectoritkImageVF12_reserve, None, vectoritkImageVF12)
vectoritkImageVF12.capacity = new_instancemethod(_itkImagePython.vectoritkImageVF12_capacity, None, vectoritkImageVF12)
vectoritkImageVF12_swigregister = _itkImagePython.vectoritkImageVF12_swigregister
vectoritkImageVF12_swigregister(vectoritkImageVF12)

class vectoritkImageVD24(object):
    """Proxy of C++ std::vector<(itkImageVD24_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVD24 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD24_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVD24 self) -> bool"""
        return _itkImagePython.vectoritkImageVD24___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVD24 self) -> bool"""
        return _itkImagePython.vectoritkImageVD24___bool__(self)


    def __len__(self) -> "std::vector< itkImageVD24_Pointer >::size_type":
        """__len__(vectoritkImageVD24 self) -> std::vector< itkImageVD24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD24___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVD24_Pointer >::difference_type', j: 'std::vector< itkImageVD24_Pointer >::difference_type') -> "std::vector< itkImageVD24_Pointer,std::allocator< itkImageVD24_Pointer > > *":
        """__getslice__(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::difference_type i, std::vector< itkImageVD24_Pointer >::difference_type j) -> vectoritkImageVD24"""
        return _itkImagePython.vectoritkImageVD24___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::difference_type i, std::vector< itkImageVD24_Pointer >::difference_type j)
        __setslice__(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::difference_type i, std::vector< itkImageVD24_Pointer >::difference_type j, vectoritkImageVD24 v)
        """
        return _itkImagePython.vectoritkImageVD24___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVD24_Pointer >::difference_type', j: 'std::vector< itkImageVD24_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::difference_type i, std::vector< itkImageVD24_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVD24___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::difference_type i)
        __delitem__(vectoritkImageVD24 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVD24___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVD24_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVD24 self, PySliceObject * slice) -> vectoritkImageVD24
        __getitem__(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::difference_type i) -> std::vector< itkImageVD24_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVD24___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVD24 self, PySliceObject * slice, vectoritkImageVD24 v)
        __setitem__(vectoritkImageVD24 self, PySliceObject * slice)
        __setitem__(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::difference_type i, std::vector< itkImageVD24_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD24___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVD24_Pointer >::value_type":
        """pop(vectoritkImageVD24 self) -> std::vector< itkImageVD24_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD24_pop(self)


    def append(self, x: 'std::vector< itkImageVD24_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD24_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVD24 self) -> bool"""
        return _itkImagePython.vectoritkImageVD24_empty(self)


    def size(self) -> "std::vector< itkImageVD24_Pointer >::size_type":
        """size(vectoritkImageVD24 self) -> std::vector< itkImageVD24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD24_size(self)


    def swap(self, v: 'vectoritkImageVD24') -> "void":
        """swap(vectoritkImageVD24 self, vectoritkImageVD24 v)"""
        return _itkImagePython.vectoritkImageVD24_swap(self, v)


    def begin(self) -> "std::vector< itkImageVD24_Pointer >::iterator":
        """begin(vectoritkImageVD24 self) -> std::vector< itkImageVD24_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD24_begin(self)


    def end(self) -> "std::vector< itkImageVD24_Pointer >::iterator":
        """end(vectoritkImageVD24 self) -> std::vector< itkImageVD24_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD24_end(self)


    def rbegin(self) -> "std::vector< itkImageVD24_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVD24 self) -> std::vector< itkImageVD24_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD24_rbegin(self)


    def rend(self) -> "std::vector< itkImageVD24_Pointer >::reverse_iterator":
        """rend(vectoritkImageVD24 self) -> std::vector< itkImageVD24_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD24_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVD24 self)"""
        return _itkImagePython.vectoritkImageVD24_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVD24_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVD24 self) -> std::vector< itkImageVD24_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD24_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVD24 self)"""
        return _itkImagePython.vectoritkImageVD24_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVD24_Pointer >::iterator":
        """
        erase(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::iterator pos) -> std::vector< itkImageVD24_Pointer >::iterator
        erase(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::iterator first, std::vector< itkImageVD24_Pointer >::iterator last) -> std::vector< itkImageVD24_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVD24_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVD24_Pointer)> self) -> vectoritkImageVD24
        __init__(std::vector<(itkImageVD24_Pointer)> self, vectoritkImageVD24 arg2) -> vectoritkImageVD24
        __init__(std::vector<(itkImageVD24_Pointer)> self, std::vector< itkImageVD24_Pointer >::size_type size) -> vectoritkImageVD24
        __init__(std::vector<(itkImageVD24_Pointer)> self, std::vector< itkImageVD24_Pointer >::size_type size, std::vector< itkImageVD24_Pointer >::value_type const & value) -> vectoritkImageVD24
        """
        _itkImagePython.vectoritkImageVD24_swiginit(self, _itkImagePython.new_vectoritkImageVD24(*args))

    def push_back(self, x: 'std::vector< itkImageVD24_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD24_push_back(self, x)


    def front(self) -> "std::vector< itkImageVD24_Pointer >::value_type const &":
        """front(vectoritkImageVD24 self) -> std::vector< itkImageVD24_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD24_front(self)


    def back(self) -> "std::vector< itkImageVD24_Pointer >::value_type const &":
        """back(vectoritkImageVD24 self) -> std::vector< itkImageVD24_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD24_back(self)


    def assign(self, n: 'std::vector< itkImageVD24_Pointer >::size_type', x: 'std::vector< itkImageVD24_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::size_type n, std::vector< itkImageVD24_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD24_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::size_type new_size)
        resize(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::size_type new_size, std::vector< itkImageVD24_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD24_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::iterator pos, std::vector< itkImageVD24_Pointer >::value_type const & x) -> std::vector< itkImageVD24_Pointer >::iterator
        insert(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::iterator pos, std::vector< itkImageVD24_Pointer >::size_type n, std::vector< itkImageVD24_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD24_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVD24_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVD24 self, std::vector< itkImageVD24_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVD24_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVD24_Pointer >::size_type":
        """capacity(vectoritkImageVD24 self) -> std::vector< itkImageVD24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD24_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD24
vectoritkImageVD24.iterator = new_instancemethod(_itkImagePython.vectoritkImageVD24_iterator, None, vectoritkImageVD24)
vectoritkImageVD24.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVD24___nonzero__, None, vectoritkImageVD24)
vectoritkImageVD24.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVD24___bool__, None, vectoritkImageVD24)
vectoritkImageVD24.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVD24___len__, None, vectoritkImageVD24)
vectoritkImageVD24.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD24___getslice__, None, vectoritkImageVD24)
vectoritkImageVD24.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD24___setslice__, None, vectoritkImageVD24)
vectoritkImageVD24.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD24___delslice__, None, vectoritkImageVD24)
vectoritkImageVD24.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD24___delitem__, None, vectoritkImageVD24)
vectoritkImageVD24.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD24___getitem__, None, vectoritkImageVD24)
vectoritkImageVD24.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD24___setitem__, None, vectoritkImageVD24)
vectoritkImageVD24.pop = new_instancemethod(_itkImagePython.vectoritkImageVD24_pop, None, vectoritkImageVD24)
vectoritkImageVD24.append = new_instancemethod(_itkImagePython.vectoritkImageVD24_append, None, vectoritkImageVD24)
vectoritkImageVD24.empty = new_instancemethod(_itkImagePython.vectoritkImageVD24_empty, None, vectoritkImageVD24)
vectoritkImageVD24.size = new_instancemethod(_itkImagePython.vectoritkImageVD24_size, None, vectoritkImageVD24)
vectoritkImageVD24.swap = new_instancemethod(_itkImagePython.vectoritkImageVD24_swap, None, vectoritkImageVD24)
vectoritkImageVD24.begin = new_instancemethod(_itkImagePython.vectoritkImageVD24_begin, None, vectoritkImageVD24)
vectoritkImageVD24.end = new_instancemethod(_itkImagePython.vectoritkImageVD24_end, None, vectoritkImageVD24)
vectoritkImageVD24.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVD24_rbegin, None, vectoritkImageVD24)
vectoritkImageVD24.rend = new_instancemethod(_itkImagePython.vectoritkImageVD24_rend, None, vectoritkImageVD24)
vectoritkImageVD24.clear = new_instancemethod(_itkImagePython.vectoritkImageVD24_clear, None, vectoritkImageVD24)
vectoritkImageVD24.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVD24_get_allocator, None, vectoritkImageVD24)
vectoritkImageVD24.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVD24_pop_back, None, vectoritkImageVD24)
vectoritkImageVD24.erase = new_instancemethod(_itkImagePython.vectoritkImageVD24_erase, None, vectoritkImageVD24)
vectoritkImageVD24.push_back = new_instancemethod(_itkImagePython.vectoritkImageVD24_push_back, None, vectoritkImageVD24)
vectoritkImageVD24.front = new_instancemethod(_itkImagePython.vectoritkImageVD24_front, None, vectoritkImageVD24)
vectoritkImageVD24.back = new_instancemethod(_itkImagePython.vectoritkImageVD24_back, None, vectoritkImageVD24)
vectoritkImageVD24.assign = new_instancemethod(_itkImagePython.vectoritkImageVD24_assign, None, vectoritkImageVD24)
vectoritkImageVD24.resize = new_instancemethod(_itkImagePython.vectoritkImageVD24_resize, None, vectoritkImageVD24)
vectoritkImageVD24.insert = new_instancemethod(_itkImagePython.vectoritkImageVD24_insert, None, vectoritkImageVD24)
vectoritkImageVD24.reserve = new_instancemethod(_itkImagePython.vectoritkImageVD24_reserve, None, vectoritkImageVD24)
vectoritkImageVD24.capacity = new_instancemethod(_itkImagePython.vectoritkImageVD24_capacity, None, vectoritkImageVD24)
vectoritkImageVD24_swigregister = _itkImagePython.vectoritkImageVD24_swigregister
vectoritkImageVD24_swigregister(vectoritkImageVD24)

class vectoritkImageVD34(object):
    """Proxy of C++ std::vector<(itkImageVD34_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVD34 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD34_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVD34 self) -> bool"""
        return _itkImagePython.vectoritkImageVD34___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVD34 self) -> bool"""
        return _itkImagePython.vectoritkImageVD34___bool__(self)


    def __len__(self) -> "std::vector< itkImageVD34_Pointer >::size_type":
        """__len__(vectoritkImageVD34 self) -> std::vector< itkImageVD34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD34___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVD34_Pointer >::difference_type', j: 'std::vector< itkImageVD34_Pointer >::difference_type') -> "std::vector< itkImageVD34_Pointer,std::allocator< itkImageVD34_Pointer > > *":
        """__getslice__(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::difference_type i, std::vector< itkImageVD34_Pointer >::difference_type j) -> vectoritkImageVD34"""
        return _itkImagePython.vectoritkImageVD34___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::difference_type i, std::vector< itkImageVD34_Pointer >::difference_type j)
        __setslice__(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::difference_type i, std::vector< itkImageVD34_Pointer >::difference_type j, vectoritkImageVD34 v)
        """
        return _itkImagePython.vectoritkImageVD34___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVD34_Pointer >::difference_type', j: 'std::vector< itkImageVD34_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::difference_type i, std::vector< itkImageVD34_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVD34___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::difference_type i)
        __delitem__(vectoritkImageVD34 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVD34___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVD34_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVD34 self, PySliceObject * slice) -> vectoritkImageVD34
        __getitem__(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::difference_type i) -> std::vector< itkImageVD34_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVD34___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVD34 self, PySliceObject * slice, vectoritkImageVD34 v)
        __setitem__(vectoritkImageVD34 self, PySliceObject * slice)
        __setitem__(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::difference_type i, std::vector< itkImageVD34_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD34___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVD34_Pointer >::value_type":
        """pop(vectoritkImageVD34 self) -> std::vector< itkImageVD34_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD34_pop(self)


    def append(self, x: 'std::vector< itkImageVD34_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD34_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVD34 self) -> bool"""
        return _itkImagePython.vectoritkImageVD34_empty(self)


    def size(self) -> "std::vector< itkImageVD34_Pointer >::size_type":
        """size(vectoritkImageVD34 self) -> std::vector< itkImageVD34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD34_size(self)


    def swap(self, v: 'vectoritkImageVD34') -> "void":
        """swap(vectoritkImageVD34 self, vectoritkImageVD34 v)"""
        return _itkImagePython.vectoritkImageVD34_swap(self, v)


    def begin(self) -> "std::vector< itkImageVD34_Pointer >::iterator":
        """begin(vectoritkImageVD34 self) -> std::vector< itkImageVD34_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD34_begin(self)


    def end(self) -> "std::vector< itkImageVD34_Pointer >::iterator":
        """end(vectoritkImageVD34 self) -> std::vector< itkImageVD34_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD34_end(self)


    def rbegin(self) -> "std::vector< itkImageVD34_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVD34 self) -> std::vector< itkImageVD34_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD34_rbegin(self)


    def rend(self) -> "std::vector< itkImageVD34_Pointer >::reverse_iterator":
        """rend(vectoritkImageVD34 self) -> std::vector< itkImageVD34_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD34_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVD34 self)"""
        return _itkImagePython.vectoritkImageVD34_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVD34_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVD34 self) -> std::vector< itkImageVD34_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD34_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVD34 self)"""
        return _itkImagePython.vectoritkImageVD34_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVD34_Pointer >::iterator":
        """
        erase(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::iterator pos) -> std::vector< itkImageVD34_Pointer >::iterator
        erase(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::iterator first, std::vector< itkImageVD34_Pointer >::iterator last) -> std::vector< itkImageVD34_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVD34_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVD34_Pointer)> self) -> vectoritkImageVD34
        __init__(std::vector<(itkImageVD34_Pointer)> self, vectoritkImageVD34 arg2) -> vectoritkImageVD34
        __init__(std::vector<(itkImageVD34_Pointer)> self, std::vector< itkImageVD34_Pointer >::size_type size) -> vectoritkImageVD34
        __init__(std::vector<(itkImageVD34_Pointer)> self, std::vector< itkImageVD34_Pointer >::size_type size, std::vector< itkImageVD34_Pointer >::value_type const & value) -> vectoritkImageVD34
        """
        _itkImagePython.vectoritkImageVD34_swiginit(self, _itkImagePython.new_vectoritkImageVD34(*args))

    def push_back(self, x: 'std::vector< itkImageVD34_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD34_push_back(self, x)


    def front(self) -> "std::vector< itkImageVD34_Pointer >::value_type const &":
        """front(vectoritkImageVD34 self) -> std::vector< itkImageVD34_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD34_front(self)


    def back(self) -> "std::vector< itkImageVD34_Pointer >::value_type const &":
        """back(vectoritkImageVD34 self) -> std::vector< itkImageVD34_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD34_back(self)


    def assign(self, n: 'std::vector< itkImageVD34_Pointer >::size_type', x: 'std::vector< itkImageVD34_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::size_type n, std::vector< itkImageVD34_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD34_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::size_type new_size)
        resize(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::size_type new_size, std::vector< itkImageVD34_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD34_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::iterator pos, std::vector< itkImageVD34_Pointer >::value_type const & x) -> std::vector< itkImageVD34_Pointer >::iterator
        insert(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::iterator pos, std::vector< itkImageVD34_Pointer >::size_type n, std::vector< itkImageVD34_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD34_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVD34_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVD34 self, std::vector< itkImageVD34_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVD34_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVD34_Pointer >::size_type":
        """capacity(vectoritkImageVD34 self) -> std::vector< itkImageVD34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD34_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD34
vectoritkImageVD34.iterator = new_instancemethod(_itkImagePython.vectoritkImageVD34_iterator, None, vectoritkImageVD34)
vectoritkImageVD34.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVD34___nonzero__, None, vectoritkImageVD34)
vectoritkImageVD34.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVD34___bool__, None, vectoritkImageVD34)
vectoritkImageVD34.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVD34___len__, None, vectoritkImageVD34)
vectoritkImageVD34.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD34___getslice__, None, vectoritkImageVD34)
vectoritkImageVD34.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD34___setslice__, None, vectoritkImageVD34)
vectoritkImageVD34.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD34___delslice__, None, vectoritkImageVD34)
vectoritkImageVD34.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD34___delitem__, None, vectoritkImageVD34)
vectoritkImageVD34.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD34___getitem__, None, vectoritkImageVD34)
vectoritkImageVD34.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD34___setitem__, None, vectoritkImageVD34)
vectoritkImageVD34.pop = new_instancemethod(_itkImagePython.vectoritkImageVD34_pop, None, vectoritkImageVD34)
vectoritkImageVD34.append = new_instancemethod(_itkImagePython.vectoritkImageVD34_append, None, vectoritkImageVD34)
vectoritkImageVD34.empty = new_instancemethod(_itkImagePython.vectoritkImageVD34_empty, None, vectoritkImageVD34)
vectoritkImageVD34.size = new_instancemethod(_itkImagePython.vectoritkImageVD34_size, None, vectoritkImageVD34)
vectoritkImageVD34.swap = new_instancemethod(_itkImagePython.vectoritkImageVD34_swap, None, vectoritkImageVD34)
vectoritkImageVD34.begin = new_instancemethod(_itkImagePython.vectoritkImageVD34_begin, None, vectoritkImageVD34)
vectoritkImageVD34.end = new_instancemethod(_itkImagePython.vectoritkImageVD34_end, None, vectoritkImageVD34)
vectoritkImageVD34.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVD34_rbegin, None, vectoritkImageVD34)
vectoritkImageVD34.rend = new_instancemethod(_itkImagePython.vectoritkImageVD34_rend, None, vectoritkImageVD34)
vectoritkImageVD34.clear = new_instancemethod(_itkImagePython.vectoritkImageVD34_clear, None, vectoritkImageVD34)
vectoritkImageVD34.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVD34_get_allocator, None, vectoritkImageVD34)
vectoritkImageVD34.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVD34_pop_back, None, vectoritkImageVD34)
vectoritkImageVD34.erase = new_instancemethod(_itkImagePython.vectoritkImageVD34_erase, None, vectoritkImageVD34)
vectoritkImageVD34.push_back = new_instancemethod(_itkImagePython.vectoritkImageVD34_push_back, None, vectoritkImageVD34)
vectoritkImageVD34.front = new_instancemethod(_itkImagePython.vectoritkImageVD34_front, None, vectoritkImageVD34)
vectoritkImageVD34.back = new_instancemethod(_itkImagePython.vectoritkImageVD34_back, None, vectoritkImageVD34)
vectoritkImageVD34.assign = new_instancemethod(_itkImagePython.vectoritkImageVD34_assign, None, vectoritkImageVD34)
vectoritkImageVD34.resize = new_instancemethod(_itkImagePython.vectoritkImageVD34_resize, None, vectoritkImageVD34)
vectoritkImageVD34.insert = new_instancemethod(_itkImagePython.vectoritkImageVD34_insert, None, vectoritkImageVD34)
vectoritkImageVD34.reserve = new_instancemethod(_itkImagePython.vectoritkImageVD34_reserve, None, vectoritkImageVD34)
vectoritkImageVD34.capacity = new_instancemethod(_itkImagePython.vectoritkImageVD34_capacity, None, vectoritkImageVD34)
vectoritkImageVD34_swigregister = _itkImagePython.vectoritkImageVD34_swigregister
vectoritkImageVD34_swigregister(vectoritkImageVD34)

class vectoritkImageVD44(object):
    """Proxy of C++ std::vector<(itkImageVD44_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVD44 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD44_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVD44 self) -> bool"""
        return _itkImagePython.vectoritkImageVD44___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVD44 self) -> bool"""
        return _itkImagePython.vectoritkImageVD44___bool__(self)


    def __len__(self) -> "std::vector< itkImageVD44_Pointer >::size_type":
        """__len__(vectoritkImageVD44 self) -> std::vector< itkImageVD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD44___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVD44_Pointer >::difference_type', j: 'std::vector< itkImageVD44_Pointer >::difference_type') -> "std::vector< itkImageVD44_Pointer,std::allocator< itkImageVD44_Pointer > > *":
        """__getslice__(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::difference_type i, std::vector< itkImageVD44_Pointer >::difference_type j) -> vectoritkImageVD44"""
        return _itkImagePython.vectoritkImageVD44___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::difference_type i, std::vector< itkImageVD44_Pointer >::difference_type j)
        __setslice__(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::difference_type i, std::vector< itkImageVD44_Pointer >::difference_type j, vectoritkImageVD44 v)
        """
        return _itkImagePython.vectoritkImageVD44___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVD44_Pointer >::difference_type', j: 'std::vector< itkImageVD44_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::difference_type i, std::vector< itkImageVD44_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVD44___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::difference_type i)
        __delitem__(vectoritkImageVD44 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVD44___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVD44_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVD44 self, PySliceObject * slice) -> vectoritkImageVD44
        __getitem__(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::difference_type i) -> std::vector< itkImageVD44_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVD44___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVD44 self, PySliceObject * slice, vectoritkImageVD44 v)
        __setitem__(vectoritkImageVD44 self, PySliceObject * slice)
        __setitem__(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::difference_type i, std::vector< itkImageVD44_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD44___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVD44_Pointer >::value_type":
        """pop(vectoritkImageVD44 self) -> std::vector< itkImageVD44_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD44_pop(self)


    def append(self, x: 'std::vector< itkImageVD44_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD44_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVD44 self) -> bool"""
        return _itkImagePython.vectoritkImageVD44_empty(self)


    def size(self) -> "std::vector< itkImageVD44_Pointer >::size_type":
        """size(vectoritkImageVD44 self) -> std::vector< itkImageVD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD44_size(self)


    def swap(self, v: 'vectoritkImageVD44') -> "void":
        """swap(vectoritkImageVD44 self, vectoritkImageVD44 v)"""
        return _itkImagePython.vectoritkImageVD44_swap(self, v)


    def begin(self) -> "std::vector< itkImageVD44_Pointer >::iterator":
        """begin(vectoritkImageVD44 self) -> std::vector< itkImageVD44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD44_begin(self)


    def end(self) -> "std::vector< itkImageVD44_Pointer >::iterator":
        """end(vectoritkImageVD44 self) -> std::vector< itkImageVD44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD44_end(self)


    def rbegin(self) -> "std::vector< itkImageVD44_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVD44 self) -> std::vector< itkImageVD44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD44_rbegin(self)


    def rend(self) -> "std::vector< itkImageVD44_Pointer >::reverse_iterator":
        """rend(vectoritkImageVD44 self) -> std::vector< itkImageVD44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD44_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVD44 self)"""
        return _itkImagePython.vectoritkImageVD44_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVD44_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVD44 self) -> std::vector< itkImageVD44_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD44_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVD44 self)"""
        return _itkImagePython.vectoritkImageVD44_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVD44_Pointer >::iterator":
        """
        erase(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::iterator pos) -> std::vector< itkImageVD44_Pointer >::iterator
        erase(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::iterator first, std::vector< itkImageVD44_Pointer >::iterator last) -> std::vector< itkImageVD44_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVD44_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVD44_Pointer)> self) -> vectoritkImageVD44
        __init__(std::vector<(itkImageVD44_Pointer)> self, vectoritkImageVD44 arg2) -> vectoritkImageVD44
        __init__(std::vector<(itkImageVD44_Pointer)> self, std::vector< itkImageVD44_Pointer >::size_type size) -> vectoritkImageVD44
        __init__(std::vector<(itkImageVD44_Pointer)> self, std::vector< itkImageVD44_Pointer >::size_type size, std::vector< itkImageVD44_Pointer >::value_type const & value) -> vectoritkImageVD44
        """
        _itkImagePython.vectoritkImageVD44_swiginit(self, _itkImagePython.new_vectoritkImageVD44(*args))

    def push_back(self, x: 'std::vector< itkImageVD44_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD44_push_back(self, x)


    def front(self) -> "std::vector< itkImageVD44_Pointer >::value_type const &":
        """front(vectoritkImageVD44 self) -> std::vector< itkImageVD44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD44_front(self)


    def back(self) -> "std::vector< itkImageVD44_Pointer >::value_type const &":
        """back(vectoritkImageVD44 self) -> std::vector< itkImageVD44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD44_back(self)


    def assign(self, n: 'std::vector< itkImageVD44_Pointer >::size_type', x: 'std::vector< itkImageVD44_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::size_type n, std::vector< itkImageVD44_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVD44_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::size_type new_size)
        resize(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::size_type new_size, std::vector< itkImageVD44_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD44_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::iterator pos, std::vector< itkImageVD44_Pointer >::value_type const & x) -> std::vector< itkImageVD44_Pointer >::iterator
        insert(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::iterator pos, std::vector< itkImageVD44_Pointer >::size_type n, std::vector< itkImageVD44_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVD44_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVD44_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVD44 self, std::vector< itkImageVD44_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVD44_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVD44_Pointer >::size_type":
        """capacity(vectoritkImageVD44 self) -> std::vector< itkImageVD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD44_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD44
vectoritkImageVD44.iterator = new_instancemethod(_itkImagePython.vectoritkImageVD44_iterator, None, vectoritkImageVD44)
vectoritkImageVD44.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVD44___nonzero__, None, vectoritkImageVD44)
vectoritkImageVD44.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVD44___bool__, None, vectoritkImageVD44)
vectoritkImageVD44.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVD44___len__, None, vectoritkImageVD44)
vectoritkImageVD44.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD44___getslice__, None, vectoritkImageVD44)
vectoritkImageVD44.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD44___setslice__, None, vectoritkImageVD44)
vectoritkImageVD44.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVD44___delslice__, None, vectoritkImageVD44)
vectoritkImageVD44.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD44___delitem__, None, vectoritkImageVD44)
vectoritkImageVD44.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD44___getitem__, None, vectoritkImageVD44)
vectoritkImageVD44.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVD44___setitem__, None, vectoritkImageVD44)
vectoritkImageVD44.pop = new_instancemethod(_itkImagePython.vectoritkImageVD44_pop, None, vectoritkImageVD44)
vectoritkImageVD44.append = new_instancemethod(_itkImagePython.vectoritkImageVD44_append, None, vectoritkImageVD44)
vectoritkImageVD44.empty = new_instancemethod(_itkImagePython.vectoritkImageVD44_empty, None, vectoritkImageVD44)
vectoritkImageVD44.size = new_instancemethod(_itkImagePython.vectoritkImageVD44_size, None, vectoritkImageVD44)
vectoritkImageVD44.swap = new_instancemethod(_itkImagePython.vectoritkImageVD44_swap, None, vectoritkImageVD44)
vectoritkImageVD44.begin = new_instancemethod(_itkImagePython.vectoritkImageVD44_begin, None, vectoritkImageVD44)
vectoritkImageVD44.end = new_instancemethod(_itkImagePython.vectoritkImageVD44_end, None, vectoritkImageVD44)
vectoritkImageVD44.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVD44_rbegin, None, vectoritkImageVD44)
vectoritkImageVD44.rend = new_instancemethod(_itkImagePython.vectoritkImageVD44_rend, None, vectoritkImageVD44)
vectoritkImageVD44.clear = new_instancemethod(_itkImagePython.vectoritkImageVD44_clear, None, vectoritkImageVD44)
vectoritkImageVD44.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVD44_get_allocator, None, vectoritkImageVD44)
vectoritkImageVD44.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVD44_pop_back, None, vectoritkImageVD44)
vectoritkImageVD44.erase = new_instancemethod(_itkImagePython.vectoritkImageVD44_erase, None, vectoritkImageVD44)
vectoritkImageVD44.push_back = new_instancemethod(_itkImagePython.vectoritkImageVD44_push_back, None, vectoritkImageVD44)
vectoritkImageVD44.front = new_instancemethod(_itkImagePython.vectoritkImageVD44_front, None, vectoritkImageVD44)
vectoritkImageVD44.back = new_instancemethod(_itkImagePython.vectoritkImageVD44_back, None, vectoritkImageVD44)
vectoritkImageVD44.assign = new_instancemethod(_itkImagePython.vectoritkImageVD44_assign, None, vectoritkImageVD44)
vectoritkImageVD44.resize = new_instancemethod(_itkImagePython.vectoritkImageVD44_resize, None, vectoritkImageVD44)
vectoritkImageVD44.insert = new_instancemethod(_itkImagePython.vectoritkImageVD44_insert, None, vectoritkImageVD44)
vectoritkImageVD44.reserve = new_instancemethod(_itkImagePython.vectoritkImageVD44_reserve, None, vectoritkImageVD44)
vectoritkImageVD44.capacity = new_instancemethod(_itkImagePython.vectoritkImageVD44_capacity, None, vectoritkImageVD44)
vectoritkImageVD44_swigregister = _itkImagePython.vectoritkImageVD44_swigregister
vectoritkImageVD44_swigregister(vectoritkImageVD44)

class vectoritkImageVF13(object):
    """Proxy of C++ std::vector<(itkImageVF13_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageVF13 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF13_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageVF13 self) -> bool"""
        return _itkImagePython.vectoritkImageVF13___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageVF13 self) -> bool"""
        return _itkImagePython.vectoritkImageVF13___bool__(self)


    def __len__(self) -> "std::vector< itkImageVF13_Pointer >::size_type":
        """__len__(vectoritkImageVF13 self) -> std::vector< itkImageVF13_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF13___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageVF13_Pointer >::difference_type', j: 'std::vector< itkImageVF13_Pointer >::difference_type') -> "std::vector< itkImageVF13_Pointer,std::allocator< itkImageVF13_Pointer > > *":
        """__getslice__(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::difference_type i, std::vector< itkImageVF13_Pointer >::difference_type j) -> vectoritkImageVF13"""
        return _itkImagePython.vectoritkImageVF13___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::difference_type i, std::vector< itkImageVF13_Pointer >::difference_type j)
        __setslice__(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::difference_type i, std::vector< itkImageVF13_Pointer >::difference_type j, vectoritkImageVF13 v)
        """
        return _itkImagePython.vectoritkImageVF13___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageVF13_Pointer >::difference_type', j: 'std::vector< itkImageVF13_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::difference_type i, std::vector< itkImageVF13_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageVF13___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::difference_type i)
        __delitem__(vectoritkImageVF13 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageVF13___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageVF13_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageVF13 self, PySliceObject * slice) -> vectoritkImageVF13
        __getitem__(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::difference_type i) -> std::vector< itkImageVF13_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageVF13___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageVF13 self, PySliceObject * slice, vectoritkImageVF13 v)
        __setitem__(vectoritkImageVF13 self, PySliceObject * slice)
        __setitem__(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::difference_type i, std::vector< itkImageVF13_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF13___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageVF13_Pointer >::value_type":
        """pop(vectoritkImageVF13 self) -> std::vector< itkImageVF13_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF13_pop(self)


    def append(self, x: 'std::vector< itkImageVF13_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF13_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageVF13 self) -> bool"""
        return _itkImagePython.vectoritkImageVF13_empty(self)


    def size(self) -> "std::vector< itkImageVF13_Pointer >::size_type":
        """size(vectoritkImageVF13 self) -> std::vector< itkImageVF13_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF13_size(self)


    def swap(self, v: 'vectoritkImageVF13') -> "void":
        """swap(vectoritkImageVF13 self, vectoritkImageVF13 v)"""
        return _itkImagePython.vectoritkImageVF13_swap(self, v)


    def begin(self) -> "std::vector< itkImageVF13_Pointer >::iterator":
        """begin(vectoritkImageVF13 self) -> std::vector< itkImageVF13_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF13_begin(self)


    def end(self) -> "std::vector< itkImageVF13_Pointer >::iterator":
        """end(vectoritkImageVF13 self) -> std::vector< itkImageVF13_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF13_end(self)


    def rbegin(self) -> "std::vector< itkImageVF13_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageVF13 self) -> std::vector< itkImageVF13_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF13_rbegin(self)


    def rend(self) -> "std::vector< itkImageVF13_Pointer >::reverse_iterator":
        """rend(vectoritkImageVF13 self) -> std::vector< itkImageVF13_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF13_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageVF13 self)"""
        return _itkImagePython.vectoritkImageVF13_clear(self)


    def get_allocator(self) -> "std::vector< itkImageVF13_Pointer >::allocator_type":
        """get_allocator(vectoritkImageVF13 self) -> std::vector< itkImageVF13_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF13_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageVF13 self)"""
        return _itkImagePython.vectoritkImageVF13_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageVF13_Pointer >::iterator":
        """
        erase(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::iterator pos) -> std::vector< itkImageVF13_Pointer >::iterator
        erase(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::iterator first, std::vector< itkImageVF13_Pointer >::iterator last) -> std::vector< itkImageVF13_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageVF13_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVF13_Pointer)> self) -> vectoritkImageVF13
        __init__(std::vector<(itkImageVF13_Pointer)> self, vectoritkImageVF13 arg2) -> vectoritkImageVF13
        __init__(std::vector<(itkImageVF13_Pointer)> self, std::vector< itkImageVF13_Pointer >::size_type size) -> vectoritkImageVF13
        __init__(std::vector<(itkImageVF13_Pointer)> self, std::vector< itkImageVF13_Pointer >::size_type size, std::vector< itkImageVF13_Pointer >::value_type const & value) -> vectoritkImageVF13
        """
        _itkImagePython.vectoritkImageVF13_swiginit(self, _itkImagePython.new_vectoritkImageVF13(*args))

    def push_back(self, x: 'std::vector< itkImageVF13_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF13_push_back(self, x)


    def front(self) -> "std::vector< itkImageVF13_Pointer >::value_type const &":
        """front(vectoritkImageVF13 self) -> std::vector< itkImageVF13_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF13_front(self)


    def back(self) -> "std::vector< itkImageVF13_Pointer >::value_type const &":
        """back(vectoritkImageVF13 self) -> std::vector< itkImageVF13_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF13_back(self)


    def assign(self, n: 'std::vector< itkImageVF13_Pointer >::size_type', x: 'std::vector< itkImageVF13_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::size_type n, std::vector< itkImageVF13_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageVF13_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::size_type new_size)
        resize(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::size_type new_size, std::vector< itkImageVF13_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF13_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::iterator pos, std::vector< itkImageVF13_Pointer >::value_type const & x) -> std::vector< itkImageVF13_Pointer >::iterator
        insert(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::iterator pos, std::vector< itkImageVF13_Pointer >::size_type n, std::vector< itkImageVF13_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageVF13_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageVF13_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageVF13 self, std::vector< itkImageVF13_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageVF13_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageVF13_Pointer >::size_type":
        """capacity(vectoritkImageVF13 self) -> std::vector< itkImageVF13_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF13_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF13
vectoritkImageVF13.iterator = new_instancemethod(_itkImagePython.vectoritkImageVF13_iterator, None, vectoritkImageVF13)
vectoritkImageVF13.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageVF13___nonzero__, None, vectoritkImageVF13)
vectoritkImageVF13.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageVF13___bool__, None, vectoritkImageVF13)
vectoritkImageVF13.__len__ = new_instancemethod(_itkImagePython.vectoritkImageVF13___len__, None, vectoritkImageVF13)
vectoritkImageVF13.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF13___getslice__, None, vectoritkImageVF13)
vectoritkImageVF13.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF13___setslice__, None, vectoritkImageVF13)
vectoritkImageVF13.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageVF13___delslice__, None, vectoritkImageVF13)
vectoritkImageVF13.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF13___delitem__, None, vectoritkImageVF13)
vectoritkImageVF13.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF13___getitem__, None, vectoritkImageVF13)
vectoritkImageVF13.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageVF13___setitem__, None, vectoritkImageVF13)
vectoritkImageVF13.pop = new_instancemethod(_itkImagePython.vectoritkImageVF13_pop, None, vectoritkImageVF13)
vectoritkImageVF13.append = new_instancemethod(_itkImagePython.vectoritkImageVF13_append, None, vectoritkImageVF13)
vectoritkImageVF13.empty = new_instancemethod(_itkImagePython.vectoritkImageVF13_empty, None, vectoritkImageVF13)
vectoritkImageVF13.size = new_instancemethod(_itkImagePython.vectoritkImageVF13_size, None, vectoritkImageVF13)
vectoritkImageVF13.swap = new_instancemethod(_itkImagePython.vectoritkImageVF13_swap, None, vectoritkImageVF13)
vectoritkImageVF13.begin = new_instancemethod(_itkImagePython.vectoritkImageVF13_begin, None, vectoritkImageVF13)
vectoritkImageVF13.end = new_instancemethod(_itkImagePython.vectoritkImageVF13_end, None, vectoritkImageVF13)
vectoritkImageVF13.rbegin = new_instancemethod(_itkImagePython.vectoritkImageVF13_rbegin, None, vectoritkImageVF13)
vectoritkImageVF13.rend = new_instancemethod(_itkImagePython.vectoritkImageVF13_rend, None, vectoritkImageVF13)
vectoritkImageVF13.clear = new_instancemethod(_itkImagePython.vectoritkImageVF13_clear, None, vectoritkImageVF13)
vectoritkImageVF13.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageVF13_get_allocator, None, vectoritkImageVF13)
vectoritkImageVF13.pop_back = new_instancemethod(_itkImagePython.vectoritkImageVF13_pop_back, None, vectoritkImageVF13)
vectoritkImageVF13.erase = new_instancemethod(_itkImagePython.vectoritkImageVF13_erase, None, vectoritkImageVF13)
vectoritkImageVF13.push_back = new_instancemethod(_itkImagePython.vectoritkImageVF13_push_back, None, vectoritkImageVF13)
vectoritkImageVF13.front = new_instancemethod(_itkImagePython.vectoritkImageVF13_front, None, vectoritkImageVF13)
vectoritkImageVF13.back = new_instancemethod(_itkImagePython.vectoritkImageVF13_back, None, vectoritkImageVF13)
vectoritkImageVF13.assign = new_instancemethod(_itkImagePython.vectoritkImageVF13_assign, None, vectoritkImageVF13)
vectoritkImageVF13.resize = new_instancemethod(_itkImagePython.vectoritkImageVF13_resize, None, vectoritkImageVF13)
vectoritkImageVF13.insert = new_instancemethod(_itkImagePython.vectoritkImageVF13_insert, None, vectoritkImageVF13)
vectoritkImageVF13.reserve = new_instancemethod(_itkImagePython.vectoritkImageVF13_reserve, None, vectoritkImageVF13)
vectoritkImageVF13.capacity = new_instancemethod(_itkImagePython.vectoritkImageVF13_capacity, None, vectoritkImageVF13)
vectoritkImageVF13_swigregister = _itkImagePython.vectoritkImageVF13_swigregister
vectoritkImageVF13_swigregister(vectoritkImageVF13)

class vectoritkImageCVD22(object):
    """Proxy of C++ std::vector<(itkImageCVD22_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageCVD22 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD22_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageCVD22 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD22___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageCVD22 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD22___bool__(self)


    def __len__(self) -> "std::vector< itkImageCVD22_Pointer >::size_type":
        """__len__(vectoritkImageCVD22 self) -> std::vector< itkImageCVD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD22___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageCVD22_Pointer >::difference_type', j: 'std::vector< itkImageCVD22_Pointer >::difference_type') -> "std::vector< itkImageCVD22_Pointer,std::allocator< itkImageCVD22_Pointer > > *":
        """__getslice__(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::difference_type i, std::vector< itkImageCVD22_Pointer >::difference_type j) -> vectoritkImageCVD22"""
        return _itkImagePython.vectoritkImageCVD22___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::difference_type i, std::vector< itkImageCVD22_Pointer >::difference_type j)
        __setslice__(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::difference_type i, std::vector< itkImageCVD22_Pointer >::difference_type j, vectoritkImageCVD22 v)
        """
        return _itkImagePython.vectoritkImageCVD22___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageCVD22_Pointer >::difference_type', j: 'std::vector< itkImageCVD22_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::difference_type i, std::vector< itkImageCVD22_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageCVD22___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::difference_type i)
        __delitem__(vectoritkImageCVD22 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageCVD22___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageCVD22_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageCVD22 self, PySliceObject * slice) -> vectoritkImageCVD22
        __getitem__(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::difference_type i) -> std::vector< itkImageCVD22_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageCVD22___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageCVD22 self, PySliceObject * slice, vectoritkImageCVD22 v)
        __setitem__(vectoritkImageCVD22 self, PySliceObject * slice)
        __setitem__(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::difference_type i, std::vector< itkImageCVD22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD22___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageCVD22_Pointer >::value_type":
        """pop(vectoritkImageCVD22 self) -> std::vector< itkImageCVD22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD22_pop(self)


    def append(self, x: 'std::vector< itkImageCVD22_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD22_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageCVD22 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD22_empty(self)


    def size(self) -> "std::vector< itkImageCVD22_Pointer >::size_type":
        """size(vectoritkImageCVD22 self) -> std::vector< itkImageCVD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD22_size(self)


    def swap(self, v: 'vectoritkImageCVD22') -> "void":
        """swap(vectoritkImageCVD22 self, vectoritkImageCVD22 v)"""
        return _itkImagePython.vectoritkImageCVD22_swap(self, v)


    def begin(self) -> "std::vector< itkImageCVD22_Pointer >::iterator":
        """begin(vectoritkImageCVD22 self) -> std::vector< itkImageCVD22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD22_begin(self)


    def end(self) -> "std::vector< itkImageCVD22_Pointer >::iterator":
        """end(vectoritkImageCVD22 self) -> std::vector< itkImageCVD22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD22_end(self)


    def rbegin(self) -> "std::vector< itkImageCVD22_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageCVD22 self) -> std::vector< itkImageCVD22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD22_rbegin(self)


    def rend(self) -> "std::vector< itkImageCVD22_Pointer >::reverse_iterator":
        """rend(vectoritkImageCVD22 self) -> std::vector< itkImageCVD22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD22_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageCVD22 self)"""
        return _itkImagePython.vectoritkImageCVD22_clear(self)


    def get_allocator(self) -> "std::vector< itkImageCVD22_Pointer >::allocator_type":
        """get_allocator(vectoritkImageCVD22 self) -> std::vector< itkImageCVD22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD22_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageCVD22 self)"""
        return _itkImagePython.vectoritkImageCVD22_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageCVD22_Pointer >::iterator":
        """
        erase(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::iterator pos) -> std::vector< itkImageCVD22_Pointer >::iterator
        erase(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::iterator first, std::vector< itkImageCVD22_Pointer >::iterator last) -> std::vector< itkImageCVD22_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageCVD22_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageCVD22_Pointer)> self) -> vectoritkImageCVD22
        __init__(std::vector<(itkImageCVD22_Pointer)> self, vectoritkImageCVD22 arg2) -> vectoritkImageCVD22
        __init__(std::vector<(itkImageCVD22_Pointer)> self, std::vector< itkImageCVD22_Pointer >::size_type size) -> vectoritkImageCVD22
        __init__(std::vector<(itkImageCVD22_Pointer)> self, std::vector< itkImageCVD22_Pointer >::size_type size, std::vector< itkImageCVD22_Pointer >::value_type const & value) -> vectoritkImageCVD22
        """
        _itkImagePython.vectoritkImageCVD22_swiginit(self, _itkImagePython.new_vectoritkImageCVD22(*args))

    def push_back(self, x: 'std::vector< itkImageCVD22_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD22_push_back(self, x)


    def front(self) -> "std::vector< itkImageCVD22_Pointer >::value_type const &":
        """front(vectoritkImageCVD22 self) -> std::vector< itkImageCVD22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD22_front(self)


    def back(self) -> "std::vector< itkImageCVD22_Pointer >::value_type const &":
        """back(vectoritkImageCVD22 self) -> std::vector< itkImageCVD22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD22_back(self)


    def assign(self, n: 'std::vector< itkImageCVD22_Pointer >::size_type', x: 'std::vector< itkImageCVD22_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::size_type n, std::vector< itkImageCVD22_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD22_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::size_type new_size)
        resize(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::size_type new_size, std::vector< itkImageCVD22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD22_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::iterator pos, std::vector< itkImageCVD22_Pointer >::value_type const & x) -> std::vector< itkImageCVD22_Pointer >::iterator
        insert(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::iterator pos, std::vector< itkImageCVD22_Pointer >::size_type n, std::vector< itkImageCVD22_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD22_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageCVD22_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageCVD22 self, std::vector< itkImageCVD22_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageCVD22_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageCVD22_Pointer >::size_type":
        """capacity(vectoritkImageCVD22 self) -> std::vector< itkImageCVD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD22_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD22
vectoritkImageCVD22.iterator = new_instancemethod(_itkImagePython.vectoritkImageCVD22_iterator, None, vectoritkImageCVD22)
vectoritkImageCVD22.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageCVD22___nonzero__, None, vectoritkImageCVD22)
vectoritkImageCVD22.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageCVD22___bool__, None, vectoritkImageCVD22)
vectoritkImageCVD22.__len__ = new_instancemethod(_itkImagePython.vectoritkImageCVD22___len__, None, vectoritkImageCVD22)
vectoritkImageCVD22.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD22___getslice__, None, vectoritkImageCVD22)
vectoritkImageCVD22.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD22___setslice__, None, vectoritkImageCVD22)
vectoritkImageCVD22.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD22___delslice__, None, vectoritkImageCVD22)
vectoritkImageCVD22.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD22___delitem__, None, vectoritkImageCVD22)
vectoritkImageCVD22.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD22___getitem__, None, vectoritkImageCVD22)
vectoritkImageCVD22.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD22___setitem__, None, vectoritkImageCVD22)
vectoritkImageCVD22.pop = new_instancemethod(_itkImagePython.vectoritkImageCVD22_pop, None, vectoritkImageCVD22)
vectoritkImageCVD22.append = new_instancemethod(_itkImagePython.vectoritkImageCVD22_append, None, vectoritkImageCVD22)
vectoritkImageCVD22.empty = new_instancemethod(_itkImagePython.vectoritkImageCVD22_empty, None, vectoritkImageCVD22)
vectoritkImageCVD22.size = new_instancemethod(_itkImagePython.vectoritkImageCVD22_size, None, vectoritkImageCVD22)
vectoritkImageCVD22.swap = new_instancemethod(_itkImagePython.vectoritkImageCVD22_swap, None, vectoritkImageCVD22)
vectoritkImageCVD22.begin = new_instancemethod(_itkImagePython.vectoritkImageCVD22_begin, None, vectoritkImageCVD22)
vectoritkImageCVD22.end = new_instancemethod(_itkImagePython.vectoritkImageCVD22_end, None, vectoritkImageCVD22)
vectoritkImageCVD22.rbegin = new_instancemethod(_itkImagePython.vectoritkImageCVD22_rbegin, None, vectoritkImageCVD22)
vectoritkImageCVD22.rend = new_instancemethod(_itkImagePython.vectoritkImageCVD22_rend, None, vectoritkImageCVD22)
vectoritkImageCVD22.clear = new_instancemethod(_itkImagePython.vectoritkImageCVD22_clear, None, vectoritkImageCVD22)
vectoritkImageCVD22.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageCVD22_get_allocator, None, vectoritkImageCVD22)
vectoritkImageCVD22.pop_back = new_instancemethod(_itkImagePython.vectoritkImageCVD22_pop_back, None, vectoritkImageCVD22)
vectoritkImageCVD22.erase = new_instancemethod(_itkImagePython.vectoritkImageCVD22_erase, None, vectoritkImageCVD22)
vectoritkImageCVD22.push_back = new_instancemethod(_itkImagePython.vectoritkImageCVD22_push_back, None, vectoritkImageCVD22)
vectoritkImageCVD22.front = new_instancemethod(_itkImagePython.vectoritkImageCVD22_front, None, vectoritkImageCVD22)
vectoritkImageCVD22.back = new_instancemethod(_itkImagePython.vectoritkImageCVD22_back, None, vectoritkImageCVD22)
vectoritkImageCVD22.assign = new_instancemethod(_itkImagePython.vectoritkImageCVD22_assign, None, vectoritkImageCVD22)
vectoritkImageCVD22.resize = new_instancemethod(_itkImagePython.vectoritkImageCVD22_resize, None, vectoritkImageCVD22)
vectoritkImageCVD22.insert = new_instancemethod(_itkImagePython.vectoritkImageCVD22_insert, None, vectoritkImageCVD22)
vectoritkImageCVD22.reserve = new_instancemethod(_itkImagePython.vectoritkImageCVD22_reserve, None, vectoritkImageCVD22)
vectoritkImageCVD22.capacity = new_instancemethod(_itkImagePython.vectoritkImageCVD22_capacity, None, vectoritkImageCVD22)
vectoritkImageCVD22_swigregister = _itkImagePython.vectoritkImageCVD22_swigregister
vectoritkImageCVD22_swigregister(vectoritkImageCVD22)

class vectoritkImageCVD32(object):
    """Proxy of C++ std::vector<(itkImageCVD32_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageCVD32 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD32_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageCVD32 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD32___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageCVD32 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD32___bool__(self)


    def __len__(self) -> "std::vector< itkImageCVD32_Pointer >::size_type":
        """__len__(vectoritkImageCVD32 self) -> std::vector< itkImageCVD32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD32___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageCVD32_Pointer >::difference_type', j: 'std::vector< itkImageCVD32_Pointer >::difference_type') -> "std::vector< itkImageCVD32_Pointer,std::allocator< itkImageCVD32_Pointer > > *":
        """__getslice__(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::difference_type i, std::vector< itkImageCVD32_Pointer >::difference_type j) -> vectoritkImageCVD32"""
        return _itkImagePython.vectoritkImageCVD32___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::difference_type i, std::vector< itkImageCVD32_Pointer >::difference_type j)
        __setslice__(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::difference_type i, std::vector< itkImageCVD32_Pointer >::difference_type j, vectoritkImageCVD32 v)
        """
        return _itkImagePython.vectoritkImageCVD32___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageCVD32_Pointer >::difference_type', j: 'std::vector< itkImageCVD32_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::difference_type i, std::vector< itkImageCVD32_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageCVD32___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::difference_type i)
        __delitem__(vectoritkImageCVD32 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageCVD32___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageCVD32_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageCVD32 self, PySliceObject * slice) -> vectoritkImageCVD32
        __getitem__(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::difference_type i) -> std::vector< itkImageCVD32_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageCVD32___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageCVD32 self, PySliceObject * slice, vectoritkImageCVD32 v)
        __setitem__(vectoritkImageCVD32 self, PySliceObject * slice)
        __setitem__(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::difference_type i, std::vector< itkImageCVD32_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD32___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageCVD32_Pointer >::value_type":
        """pop(vectoritkImageCVD32 self) -> std::vector< itkImageCVD32_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD32_pop(self)


    def append(self, x: 'std::vector< itkImageCVD32_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD32_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageCVD32 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD32_empty(self)


    def size(self) -> "std::vector< itkImageCVD32_Pointer >::size_type":
        """size(vectoritkImageCVD32 self) -> std::vector< itkImageCVD32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD32_size(self)


    def swap(self, v: 'vectoritkImageCVD32') -> "void":
        """swap(vectoritkImageCVD32 self, vectoritkImageCVD32 v)"""
        return _itkImagePython.vectoritkImageCVD32_swap(self, v)


    def begin(self) -> "std::vector< itkImageCVD32_Pointer >::iterator":
        """begin(vectoritkImageCVD32 self) -> std::vector< itkImageCVD32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD32_begin(self)


    def end(self) -> "std::vector< itkImageCVD32_Pointer >::iterator":
        """end(vectoritkImageCVD32 self) -> std::vector< itkImageCVD32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD32_end(self)


    def rbegin(self) -> "std::vector< itkImageCVD32_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageCVD32 self) -> std::vector< itkImageCVD32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD32_rbegin(self)


    def rend(self) -> "std::vector< itkImageCVD32_Pointer >::reverse_iterator":
        """rend(vectoritkImageCVD32 self) -> std::vector< itkImageCVD32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD32_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageCVD32 self)"""
        return _itkImagePython.vectoritkImageCVD32_clear(self)


    def get_allocator(self) -> "std::vector< itkImageCVD32_Pointer >::allocator_type":
        """get_allocator(vectoritkImageCVD32 self) -> std::vector< itkImageCVD32_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD32_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageCVD32 self)"""
        return _itkImagePython.vectoritkImageCVD32_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageCVD32_Pointer >::iterator":
        """
        erase(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::iterator pos) -> std::vector< itkImageCVD32_Pointer >::iterator
        erase(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::iterator first, std::vector< itkImageCVD32_Pointer >::iterator last) -> std::vector< itkImageCVD32_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageCVD32_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageCVD32_Pointer)> self) -> vectoritkImageCVD32
        __init__(std::vector<(itkImageCVD32_Pointer)> self, vectoritkImageCVD32 arg2) -> vectoritkImageCVD32
        __init__(std::vector<(itkImageCVD32_Pointer)> self, std::vector< itkImageCVD32_Pointer >::size_type size) -> vectoritkImageCVD32
        __init__(std::vector<(itkImageCVD32_Pointer)> self, std::vector< itkImageCVD32_Pointer >::size_type size, std::vector< itkImageCVD32_Pointer >::value_type const & value) -> vectoritkImageCVD32
        """
        _itkImagePython.vectoritkImageCVD32_swiginit(self, _itkImagePython.new_vectoritkImageCVD32(*args))

    def push_back(self, x: 'std::vector< itkImageCVD32_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD32_push_back(self, x)


    def front(self) -> "std::vector< itkImageCVD32_Pointer >::value_type const &":
        """front(vectoritkImageCVD32 self) -> std::vector< itkImageCVD32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD32_front(self)


    def back(self) -> "std::vector< itkImageCVD32_Pointer >::value_type const &":
        """back(vectoritkImageCVD32 self) -> std::vector< itkImageCVD32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD32_back(self)


    def assign(self, n: 'std::vector< itkImageCVD32_Pointer >::size_type', x: 'std::vector< itkImageCVD32_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::size_type n, std::vector< itkImageCVD32_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD32_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::size_type new_size)
        resize(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::size_type new_size, std::vector< itkImageCVD32_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD32_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::iterator pos, std::vector< itkImageCVD32_Pointer >::value_type const & x) -> std::vector< itkImageCVD32_Pointer >::iterator
        insert(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::iterator pos, std::vector< itkImageCVD32_Pointer >::size_type n, std::vector< itkImageCVD32_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD32_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageCVD32_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageCVD32 self, std::vector< itkImageCVD32_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageCVD32_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageCVD32_Pointer >::size_type":
        """capacity(vectoritkImageCVD32 self) -> std::vector< itkImageCVD32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD32_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD32
vectoritkImageCVD32.iterator = new_instancemethod(_itkImagePython.vectoritkImageCVD32_iterator, None, vectoritkImageCVD32)
vectoritkImageCVD32.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageCVD32___nonzero__, None, vectoritkImageCVD32)
vectoritkImageCVD32.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageCVD32___bool__, None, vectoritkImageCVD32)
vectoritkImageCVD32.__len__ = new_instancemethod(_itkImagePython.vectoritkImageCVD32___len__, None, vectoritkImageCVD32)
vectoritkImageCVD32.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD32___getslice__, None, vectoritkImageCVD32)
vectoritkImageCVD32.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD32___setslice__, None, vectoritkImageCVD32)
vectoritkImageCVD32.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD32___delslice__, None, vectoritkImageCVD32)
vectoritkImageCVD32.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD32___delitem__, None, vectoritkImageCVD32)
vectoritkImageCVD32.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD32___getitem__, None, vectoritkImageCVD32)
vectoritkImageCVD32.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD32___setitem__, None, vectoritkImageCVD32)
vectoritkImageCVD32.pop = new_instancemethod(_itkImagePython.vectoritkImageCVD32_pop, None, vectoritkImageCVD32)
vectoritkImageCVD32.append = new_instancemethod(_itkImagePython.vectoritkImageCVD32_append, None, vectoritkImageCVD32)
vectoritkImageCVD32.empty = new_instancemethod(_itkImagePython.vectoritkImageCVD32_empty, None, vectoritkImageCVD32)
vectoritkImageCVD32.size = new_instancemethod(_itkImagePython.vectoritkImageCVD32_size, None, vectoritkImageCVD32)
vectoritkImageCVD32.swap = new_instancemethod(_itkImagePython.vectoritkImageCVD32_swap, None, vectoritkImageCVD32)
vectoritkImageCVD32.begin = new_instancemethod(_itkImagePython.vectoritkImageCVD32_begin, None, vectoritkImageCVD32)
vectoritkImageCVD32.end = new_instancemethod(_itkImagePython.vectoritkImageCVD32_end, None, vectoritkImageCVD32)
vectoritkImageCVD32.rbegin = new_instancemethod(_itkImagePython.vectoritkImageCVD32_rbegin, None, vectoritkImageCVD32)
vectoritkImageCVD32.rend = new_instancemethod(_itkImagePython.vectoritkImageCVD32_rend, None, vectoritkImageCVD32)
vectoritkImageCVD32.clear = new_instancemethod(_itkImagePython.vectoritkImageCVD32_clear, None, vectoritkImageCVD32)
vectoritkImageCVD32.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageCVD32_get_allocator, None, vectoritkImageCVD32)
vectoritkImageCVD32.pop_back = new_instancemethod(_itkImagePython.vectoritkImageCVD32_pop_back, None, vectoritkImageCVD32)
vectoritkImageCVD32.erase = new_instancemethod(_itkImagePython.vectoritkImageCVD32_erase, None, vectoritkImageCVD32)
vectoritkImageCVD32.push_back = new_instancemethod(_itkImagePython.vectoritkImageCVD32_push_back, None, vectoritkImageCVD32)
vectoritkImageCVD32.front = new_instancemethod(_itkImagePython.vectoritkImageCVD32_front, None, vectoritkImageCVD32)
vectoritkImageCVD32.back = new_instancemethod(_itkImagePython.vectoritkImageCVD32_back, None, vectoritkImageCVD32)
vectoritkImageCVD32.assign = new_instancemethod(_itkImagePython.vectoritkImageCVD32_assign, None, vectoritkImageCVD32)
vectoritkImageCVD32.resize = new_instancemethod(_itkImagePython.vectoritkImageCVD32_resize, None, vectoritkImageCVD32)
vectoritkImageCVD32.insert = new_instancemethod(_itkImagePython.vectoritkImageCVD32_insert, None, vectoritkImageCVD32)
vectoritkImageCVD32.reserve = new_instancemethod(_itkImagePython.vectoritkImageCVD32_reserve, None, vectoritkImageCVD32)
vectoritkImageCVD32.capacity = new_instancemethod(_itkImagePython.vectoritkImageCVD32_capacity, None, vectoritkImageCVD32)
vectoritkImageCVD32_swigregister = _itkImagePython.vectoritkImageCVD32_swigregister
vectoritkImageCVD32_swigregister(vectoritkImageCVD32)

class vectoritkImageCVD42(object):
    """Proxy of C++ std::vector<(itkImageCVD42_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageCVD42 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD42_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageCVD42 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD42___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageCVD42 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD42___bool__(self)


    def __len__(self) -> "std::vector< itkImageCVD42_Pointer >::size_type":
        """__len__(vectoritkImageCVD42 self) -> std::vector< itkImageCVD42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD42___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageCVD42_Pointer >::difference_type', j: 'std::vector< itkImageCVD42_Pointer >::difference_type') -> "std::vector< itkImageCVD42_Pointer,std::allocator< itkImageCVD42_Pointer > > *":
        """__getslice__(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::difference_type i, std::vector< itkImageCVD42_Pointer >::difference_type j) -> vectoritkImageCVD42"""
        return _itkImagePython.vectoritkImageCVD42___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::difference_type i, std::vector< itkImageCVD42_Pointer >::difference_type j)
        __setslice__(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::difference_type i, std::vector< itkImageCVD42_Pointer >::difference_type j, vectoritkImageCVD42 v)
        """
        return _itkImagePython.vectoritkImageCVD42___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageCVD42_Pointer >::difference_type', j: 'std::vector< itkImageCVD42_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::difference_type i, std::vector< itkImageCVD42_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageCVD42___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::difference_type i)
        __delitem__(vectoritkImageCVD42 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageCVD42___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageCVD42_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageCVD42 self, PySliceObject * slice) -> vectoritkImageCVD42
        __getitem__(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::difference_type i) -> std::vector< itkImageCVD42_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageCVD42___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageCVD42 self, PySliceObject * slice, vectoritkImageCVD42 v)
        __setitem__(vectoritkImageCVD42 self, PySliceObject * slice)
        __setitem__(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::difference_type i, std::vector< itkImageCVD42_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD42___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageCVD42_Pointer >::value_type":
        """pop(vectoritkImageCVD42 self) -> std::vector< itkImageCVD42_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD42_pop(self)


    def append(self, x: 'std::vector< itkImageCVD42_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD42_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageCVD42 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD42_empty(self)


    def size(self) -> "std::vector< itkImageCVD42_Pointer >::size_type":
        """size(vectoritkImageCVD42 self) -> std::vector< itkImageCVD42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD42_size(self)


    def swap(self, v: 'vectoritkImageCVD42') -> "void":
        """swap(vectoritkImageCVD42 self, vectoritkImageCVD42 v)"""
        return _itkImagePython.vectoritkImageCVD42_swap(self, v)


    def begin(self) -> "std::vector< itkImageCVD42_Pointer >::iterator":
        """begin(vectoritkImageCVD42 self) -> std::vector< itkImageCVD42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD42_begin(self)


    def end(self) -> "std::vector< itkImageCVD42_Pointer >::iterator":
        """end(vectoritkImageCVD42 self) -> std::vector< itkImageCVD42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD42_end(self)


    def rbegin(self) -> "std::vector< itkImageCVD42_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageCVD42 self) -> std::vector< itkImageCVD42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD42_rbegin(self)


    def rend(self) -> "std::vector< itkImageCVD42_Pointer >::reverse_iterator":
        """rend(vectoritkImageCVD42 self) -> std::vector< itkImageCVD42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD42_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageCVD42 self)"""
        return _itkImagePython.vectoritkImageCVD42_clear(self)


    def get_allocator(self) -> "std::vector< itkImageCVD42_Pointer >::allocator_type":
        """get_allocator(vectoritkImageCVD42 self) -> std::vector< itkImageCVD42_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD42_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageCVD42 self)"""
        return _itkImagePython.vectoritkImageCVD42_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageCVD42_Pointer >::iterator":
        """
        erase(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::iterator pos) -> std::vector< itkImageCVD42_Pointer >::iterator
        erase(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::iterator first, std::vector< itkImageCVD42_Pointer >::iterator last) -> std::vector< itkImageCVD42_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageCVD42_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageCVD42_Pointer)> self) -> vectoritkImageCVD42
        __init__(std::vector<(itkImageCVD42_Pointer)> self, vectoritkImageCVD42 arg2) -> vectoritkImageCVD42
        __init__(std::vector<(itkImageCVD42_Pointer)> self, std::vector< itkImageCVD42_Pointer >::size_type size) -> vectoritkImageCVD42
        __init__(std::vector<(itkImageCVD42_Pointer)> self, std::vector< itkImageCVD42_Pointer >::size_type size, std::vector< itkImageCVD42_Pointer >::value_type const & value) -> vectoritkImageCVD42
        """
        _itkImagePython.vectoritkImageCVD42_swiginit(self, _itkImagePython.new_vectoritkImageCVD42(*args))

    def push_back(self, x: 'std::vector< itkImageCVD42_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD42_push_back(self, x)


    def front(self) -> "std::vector< itkImageCVD42_Pointer >::value_type const &":
        """front(vectoritkImageCVD42 self) -> std::vector< itkImageCVD42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD42_front(self)


    def back(self) -> "std::vector< itkImageCVD42_Pointer >::value_type const &":
        """back(vectoritkImageCVD42 self) -> std::vector< itkImageCVD42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD42_back(self)


    def assign(self, n: 'std::vector< itkImageCVD42_Pointer >::size_type', x: 'std::vector< itkImageCVD42_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::size_type n, std::vector< itkImageCVD42_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD42_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::size_type new_size)
        resize(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::size_type new_size, std::vector< itkImageCVD42_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD42_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::iterator pos, std::vector< itkImageCVD42_Pointer >::value_type const & x) -> std::vector< itkImageCVD42_Pointer >::iterator
        insert(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::iterator pos, std::vector< itkImageCVD42_Pointer >::size_type n, std::vector< itkImageCVD42_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD42_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageCVD42_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageCVD42 self, std::vector< itkImageCVD42_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageCVD42_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageCVD42_Pointer >::size_type":
        """capacity(vectoritkImageCVD42 self) -> std::vector< itkImageCVD42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD42_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD42
vectoritkImageCVD42.iterator = new_instancemethod(_itkImagePython.vectoritkImageCVD42_iterator, None, vectoritkImageCVD42)
vectoritkImageCVD42.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageCVD42___nonzero__, None, vectoritkImageCVD42)
vectoritkImageCVD42.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageCVD42___bool__, None, vectoritkImageCVD42)
vectoritkImageCVD42.__len__ = new_instancemethod(_itkImagePython.vectoritkImageCVD42___len__, None, vectoritkImageCVD42)
vectoritkImageCVD42.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD42___getslice__, None, vectoritkImageCVD42)
vectoritkImageCVD42.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD42___setslice__, None, vectoritkImageCVD42)
vectoritkImageCVD42.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD42___delslice__, None, vectoritkImageCVD42)
vectoritkImageCVD42.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD42___delitem__, None, vectoritkImageCVD42)
vectoritkImageCVD42.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD42___getitem__, None, vectoritkImageCVD42)
vectoritkImageCVD42.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD42___setitem__, None, vectoritkImageCVD42)
vectoritkImageCVD42.pop = new_instancemethod(_itkImagePython.vectoritkImageCVD42_pop, None, vectoritkImageCVD42)
vectoritkImageCVD42.append = new_instancemethod(_itkImagePython.vectoritkImageCVD42_append, None, vectoritkImageCVD42)
vectoritkImageCVD42.empty = new_instancemethod(_itkImagePython.vectoritkImageCVD42_empty, None, vectoritkImageCVD42)
vectoritkImageCVD42.size = new_instancemethod(_itkImagePython.vectoritkImageCVD42_size, None, vectoritkImageCVD42)
vectoritkImageCVD42.swap = new_instancemethod(_itkImagePython.vectoritkImageCVD42_swap, None, vectoritkImageCVD42)
vectoritkImageCVD42.begin = new_instancemethod(_itkImagePython.vectoritkImageCVD42_begin, None, vectoritkImageCVD42)
vectoritkImageCVD42.end = new_instancemethod(_itkImagePython.vectoritkImageCVD42_end, None, vectoritkImageCVD42)
vectoritkImageCVD42.rbegin = new_instancemethod(_itkImagePython.vectoritkImageCVD42_rbegin, None, vectoritkImageCVD42)
vectoritkImageCVD42.rend = new_instancemethod(_itkImagePython.vectoritkImageCVD42_rend, None, vectoritkImageCVD42)
vectoritkImageCVD42.clear = new_instancemethod(_itkImagePython.vectoritkImageCVD42_clear, None, vectoritkImageCVD42)
vectoritkImageCVD42.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageCVD42_get_allocator, None, vectoritkImageCVD42)
vectoritkImageCVD42.pop_back = new_instancemethod(_itkImagePython.vectoritkImageCVD42_pop_back, None, vectoritkImageCVD42)
vectoritkImageCVD42.erase = new_instancemethod(_itkImagePython.vectoritkImageCVD42_erase, None, vectoritkImageCVD42)
vectoritkImageCVD42.push_back = new_instancemethod(_itkImagePython.vectoritkImageCVD42_push_back, None, vectoritkImageCVD42)
vectoritkImageCVD42.front = new_instancemethod(_itkImagePython.vectoritkImageCVD42_front, None, vectoritkImageCVD42)
vectoritkImageCVD42.back = new_instancemethod(_itkImagePython.vectoritkImageCVD42_back, None, vectoritkImageCVD42)
vectoritkImageCVD42.assign = new_instancemethod(_itkImagePython.vectoritkImageCVD42_assign, None, vectoritkImageCVD42)
vectoritkImageCVD42.resize = new_instancemethod(_itkImagePython.vectoritkImageCVD42_resize, None, vectoritkImageCVD42)
vectoritkImageCVD42.insert = new_instancemethod(_itkImagePython.vectoritkImageCVD42_insert, None, vectoritkImageCVD42)
vectoritkImageCVD42.reserve = new_instancemethod(_itkImagePython.vectoritkImageCVD42_reserve, None, vectoritkImageCVD42)
vectoritkImageCVD42.capacity = new_instancemethod(_itkImagePython.vectoritkImageCVD42_capacity, None, vectoritkImageCVD42)
vectoritkImageCVD42_swigregister = _itkImagePython.vectoritkImageCVD42_swigregister
vectoritkImageCVD42_swigregister(vectoritkImageCVD42)

class vectoritkImageCVD23(object):
    """Proxy of C++ std::vector<(itkImageCVD23_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageCVD23 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD23_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageCVD23 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD23___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageCVD23 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD23___bool__(self)


    def __len__(self) -> "std::vector< itkImageCVD23_Pointer >::size_type":
        """__len__(vectoritkImageCVD23 self) -> std::vector< itkImageCVD23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD23___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageCVD23_Pointer >::difference_type', j: 'std::vector< itkImageCVD23_Pointer >::difference_type') -> "std::vector< itkImageCVD23_Pointer,std::allocator< itkImageCVD23_Pointer > > *":
        """__getslice__(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::difference_type i, std::vector< itkImageCVD23_Pointer >::difference_type j) -> vectoritkImageCVD23"""
        return _itkImagePython.vectoritkImageCVD23___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::difference_type i, std::vector< itkImageCVD23_Pointer >::difference_type j)
        __setslice__(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::difference_type i, std::vector< itkImageCVD23_Pointer >::difference_type j, vectoritkImageCVD23 v)
        """
        return _itkImagePython.vectoritkImageCVD23___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageCVD23_Pointer >::difference_type', j: 'std::vector< itkImageCVD23_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::difference_type i, std::vector< itkImageCVD23_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageCVD23___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::difference_type i)
        __delitem__(vectoritkImageCVD23 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageCVD23___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageCVD23_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageCVD23 self, PySliceObject * slice) -> vectoritkImageCVD23
        __getitem__(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::difference_type i) -> std::vector< itkImageCVD23_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageCVD23___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageCVD23 self, PySliceObject * slice, vectoritkImageCVD23 v)
        __setitem__(vectoritkImageCVD23 self, PySliceObject * slice)
        __setitem__(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::difference_type i, std::vector< itkImageCVD23_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD23___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageCVD23_Pointer >::value_type":
        """pop(vectoritkImageCVD23 self) -> std::vector< itkImageCVD23_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD23_pop(self)


    def append(self, x: 'std::vector< itkImageCVD23_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD23_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageCVD23 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD23_empty(self)


    def size(self) -> "std::vector< itkImageCVD23_Pointer >::size_type":
        """size(vectoritkImageCVD23 self) -> std::vector< itkImageCVD23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD23_size(self)


    def swap(self, v: 'vectoritkImageCVD23') -> "void":
        """swap(vectoritkImageCVD23 self, vectoritkImageCVD23 v)"""
        return _itkImagePython.vectoritkImageCVD23_swap(self, v)


    def begin(self) -> "std::vector< itkImageCVD23_Pointer >::iterator":
        """begin(vectoritkImageCVD23 self) -> std::vector< itkImageCVD23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD23_begin(self)


    def end(self) -> "std::vector< itkImageCVD23_Pointer >::iterator":
        """end(vectoritkImageCVD23 self) -> std::vector< itkImageCVD23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD23_end(self)


    def rbegin(self) -> "std::vector< itkImageCVD23_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageCVD23 self) -> std::vector< itkImageCVD23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD23_rbegin(self)


    def rend(self) -> "std::vector< itkImageCVD23_Pointer >::reverse_iterator":
        """rend(vectoritkImageCVD23 self) -> std::vector< itkImageCVD23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD23_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageCVD23 self)"""
        return _itkImagePython.vectoritkImageCVD23_clear(self)


    def get_allocator(self) -> "std::vector< itkImageCVD23_Pointer >::allocator_type":
        """get_allocator(vectoritkImageCVD23 self) -> std::vector< itkImageCVD23_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD23_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageCVD23 self)"""
        return _itkImagePython.vectoritkImageCVD23_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageCVD23_Pointer >::iterator":
        """
        erase(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::iterator pos) -> std::vector< itkImageCVD23_Pointer >::iterator
        erase(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::iterator first, std::vector< itkImageCVD23_Pointer >::iterator last) -> std::vector< itkImageCVD23_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageCVD23_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageCVD23_Pointer)> self) -> vectoritkImageCVD23
        __init__(std::vector<(itkImageCVD23_Pointer)> self, vectoritkImageCVD23 arg2) -> vectoritkImageCVD23
        __init__(std::vector<(itkImageCVD23_Pointer)> self, std::vector< itkImageCVD23_Pointer >::size_type size) -> vectoritkImageCVD23
        __init__(std::vector<(itkImageCVD23_Pointer)> self, std::vector< itkImageCVD23_Pointer >::size_type size, std::vector< itkImageCVD23_Pointer >::value_type const & value) -> vectoritkImageCVD23
        """
        _itkImagePython.vectoritkImageCVD23_swiginit(self, _itkImagePython.new_vectoritkImageCVD23(*args))

    def push_back(self, x: 'std::vector< itkImageCVD23_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD23_push_back(self, x)


    def front(self) -> "std::vector< itkImageCVD23_Pointer >::value_type const &":
        """front(vectoritkImageCVD23 self) -> std::vector< itkImageCVD23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD23_front(self)


    def back(self) -> "std::vector< itkImageCVD23_Pointer >::value_type const &":
        """back(vectoritkImageCVD23 self) -> std::vector< itkImageCVD23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD23_back(self)


    def assign(self, n: 'std::vector< itkImageCVD23_Pointer >::size_type', x: 'std::vector< itkImageCVD23_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::size_type n, std::vector< itkImageCVD23_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD23_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::size_type new_size)
        resize(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::size_type new_size, std::vector< itkImageCVD23_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD23_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::iterator pos, std::vector< itkImageCVD23_Pointer >::value_type const & x) -> std::vector< itkImageCVD23_Pointer >::iterator
        insert(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::iterator pos, std::vector< itkImageCVD23_Pointer >::size_type n, std::vector< itkImageCVD23_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD23_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageCVD23_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageCVD23 self, std::vector< itkImageCVD23_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageCVD23_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageCVD23_Pointer >::size_type":
        """capacity(vectoritkImageCVD23 self) -> std::vector< itkImageCVD23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD23_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD23
vectoritkImageCVD23.iterator = new_instancemethod(_itkImagePython.vectoritkImageCVD23_iterator, None, vectoritkImageCVD23)
vectoritkImageCVD23.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageCVD23___nonzero__, None, vectoritkImageCVD23)
vectoritkImageCVD23.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageCVD23___bool__, None, vectoritkImageCVD23)
vectoritkImageCVD23.__len__ = new_instancemethod(_itkImagePython.vectoritkImageCVD23___len__, None, vectoritkImageCVD23)
vectoritkImageCVD23.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD23___getslice__, None, vectoritkImageCVD23)
vectoritkImageCVD23.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD23___setslice__, None, vectoritkImageCVD23)
vectoritkImageCVD23.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD23___delslice__, None, vectoritkImageCVD23)
vectoritkImageCVD23.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD23___delitem__, None, vectoritkImageCVD23)
vectoritkImageCVD23.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD23___getitem__, None, vectoritkImageCVD23)
vectoritkImageCVD23.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD23___setitem__, None, vectoritkImageCVD23)
vectoritkImageCVD23.pop = new_instancemethod(_itkImagePython.vectoritkImageCVD23_pop, None, vectoritkImageCVD23)
vectoritkImageCVD23.append = new_instancemethod(_itkImagePython.vectoritkImageCVD23_append, None, vectoritkImageCVD23)
vectoritkImageCVD23.empty = new_instancemethod(_itkImagePython.vectoritkImageCVD23_empty, None, vectoritkImageCVD23)
vectoritkImageCVD23.size = new_instancemethod(_itkImagePython.vectoritkImageCVD23_size, None, vectoritkImageCVD23)
vectoritkImageCVD23.swap = new_instancemethod(_itkImagePython.vectoritkImageCVD23_swap, None, vectoritkImageCVD23)
vectoritkImageCVD23.begin = new_instancemethod(_itkImagePython.vectoritkImageCVD23_begin, None, vectoritkImageCVD23)
vectoritkImageCVD23.end = new_instancemethod(_itkImagePython.vectoritkImageCVD23_end, None, vectoritkImageCVD23)
vectoritkImageCVD23.rbegin = new_instancemethod(_itkImagePython.vectoritkImageCVD23_rbegin, None, vectoritkImageCVD23)
vectoritkImageCVD23.rend = new_instancemethod(_itkImagePython.vectoritkImageCVD23_rend, None, vectoritkImageCVD23)
vectoritkImageCVD23.clear = new_instancemethod(_itkImagePython.vectoritkImageCVD23_clear, None, vectoritkImageCVD23)
vectoritkImageCVD23.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageCVD23_get_allocator, None, vectoritkImageCVD23)
vectoritkImageCVD23.pop_back = new_instancemethod(_itkImagePython.vectoritkImageCVD23_pop_back, None, vectoritkImageCVD23)
vectoritkImageCVD23.erase = new_instancemethod(_itkImagePython.vectoritkImageCVD23_erase, None, vectoritkImageCVD23)
vectoritkImageCVD23.push_back = new_instancemethod(_itkImagePython.vectoritkImageCVD23_push_back, None, vectoritkImageCVD23)
vectoritkImageCVD23.front = new_instancemethod(_itkImagePython.vectoritkImageCVD23_front, None, vectoritkImageCVD23)
vectoritkImageCVD23.back = new_instancemethod(_itkImagePython.vectoritkImageCVD23_back, None, vectoritkImageCVD23)
vectoritkImageCVD23.assign = new_instancemethod(_itkImagePython.vectoritkImageCVD23_assign, None, vectoritkImageCVD23)
vectoritkImageCVD23.resize = new_instancemethod(_itkImagePython.vectoritkImageCVD23_resize, None, vectoritkImageCVD23)
vectoritkImageCVD23.insert = new_instancemethod(_itkImagePython.vectoritkImageCVD23_insert, None, vectoritkImageCVD23)
vectoritkImageCVD23.reserve = new_instancemethod(_itkImagePython.vectoritkImageCVD23_reserve, None, vectoritkImageCVD23)
vectoritkImageCVD23.capacity = new_instancemethod(_itkImagePython.vectoritkImageCVD23_capacity, None, vectoritkImageCVD23)
vectoritkImageCVD23_swigregister = _itkImagePython.vectoritkImageCVD23_swigregister
vectoritkImageCVD23_swigregister(vectoritkImageCVD23)

class vectoritkImageCVD33(object):
    """Proxy of C++ std::vector<(itkImageCVD33_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageCVD33 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD33_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageCVD33 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD33___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageCVD33 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD33___bool__(self)


    def __len__(self) -> "std::vector< itkImageCVD33_Pointer >::size_type":
        """__len__(vectoritkImageCVD33 self) -> std::vector< itkImageCVD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD33___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageCVD33_Pointer >::difference_type', j: 'std::vector< itkImageCVD33_Pointer >::difference_type') -> "std::vector< itkImageCVD33_Pointer,std::allocator< itkImageCVD33_Pointer > > *":
        """__getslice__(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::difference_type i, std::vector< itkImageCVD33_Pointer >::difference_type j) -> vectoritkImageCVD33"""
        return _itkImagePython.vectoritkImageCVD33___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::difference_type i, std::vector< itkImageCVD33_Pointer >::difference_type j)
        __setslice__(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::difference_type i, std::vector< itkImageCVD33_Pointer >::difference_type j, vectoritkImageCVD33 v)
        """
        return _itkImagePython.vectoritkImageCVD33___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageCVD33_Pointer >::difference_type', j: 'std::vector< itkImageCVD33_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::difference_type i, std::vector< itkImageCVD33_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageCVD33___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::difference_type i)
        __delitem__(vectoritkImageCVD33 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageCVD33___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageCVD33_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageCVD33 self, PySliceObject * slice) -> vectoritkImageCVD33
        __getitem__(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::difference_type i) -> std::vector< itkImageCVD33_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageCVD33___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageCVD33 self, PySliceObject * slice, vectoritkImageCVD33 v)
        __setitem__(vectoritkImageCVD33 self, PySliceObject * slice)
        __setitem__(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::difference_type i, std::vector< itkImageCVD33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD33___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageCVD33_Pointer >::value_type":
        """pop(vectoritkImageCVD33 self) -> std::vector< itkImageCVD33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD33_pop(self)


    def append(self, x: 'std::vector< itkImageCVD33_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD33_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageCVD33 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD33_empty(self)


    def size(self) -> "std::vector< itkImageCVD33_Pointer >::size_type":
        """size(vectoritkImageCVD33 self) -> std::vector< itkImageCVD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD33_size(self)


    def swap(self, v: 'vectoritkImageCVD33') -> "void":
        """swap(vectoritkImageCVD33 self, vectoritkImageCVD33 v)"""
        return _itkImagePython.vectoritkImageCVD33_swap(self, v)


    def begin(self) -> "std::vector< itkImageCVD33_Pointer >::iterator":
        """begin(vectoritkImageCVD33 self) -> std::vector< itkImageCVD33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD33_begin(self)


    def end(self) -> "std::vector< itkImageCVD33_Pointer >::iterator":
        """end(vectoritkImageCVD33 self) -> std::vector< itkImageCVD33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD33_end(self)


    def rbegin(self) -> "std::vector< itkImageCVD33_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageCVD33 self) -> std::vector< itkImageCVD33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD33_rbegin(self)


    def rend(self) -> "std::vector< itkImageCVD33_Pointer >::reverse_iterator":
        """rend(vectoritkImageCVD33 self) -> std::vector< itkImageCVD33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD33_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageCVD33 self)"""
        return _itkImagePython.vectoritkImageCVD33_clear(self)


    def get_allocator(self) -> "std::vector< itkImageCVD33_Pointer >::allocator_type":
        """get_allocator(vectoritkImageCVD33 self) -> std::vector< itkImageCVD33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD33_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageCVD33 self)"""
        return _itkImagePython.vectoritkImageCVD33_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageCVD33_Pointer >::iterator":
        """
        erase(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::iterator pos) -> std::vector< itkImageCVD33_Pointer >::iterator
        erase(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::iterator first, std::vector< itkImageCVD33_Pointer >::iterator last) -> std::vector< itkImageCVD33_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageCVD33_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageCVD33_Pointer)> self) -> vectoritkImageCVD33
        __init__(std::vector<(itkImageCVD33_Pointer)> self, vectoritkImageCVD33 arg2) -> vectoritkImageCVD33
        __init__(std::vector<(itkImageCVD33_Pointer)> self, std::vector< itkImageCVD33_Pointer >::size_type size) -> vectoritkImageCVD33
        __init__(std::vector<(itkImageCVD33_Pointer)> self, std::vector< itkImageCVD33_Pointer >::size_type size, std::vector< itkImageCVD33_Pointer >::value_type const & value) -> vectoritkImageCVD33
        """
        _itkImagePython.vectoritkImageCVD33_swiginit(self, _itkImagePython.new_vectoritkImageCVD33(*args))

    def push_back(self, x: 'std::vector< itkImageCVD33_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD33_push_back(self, x)


    def front(self) -> "std::vector< itkImageCVD33_Pointer >::value_type const &":
        """front(vectoritkImageCVD33 self) -> std::vector< itkImageCVD33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD33_front(self)


    def back(self) -> "std::vector< itkImageCVD33_Pointer >::value_type const &":
        """back(vectoritkImageCVD33 self) -> std::vector< itkImageCVD33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD33_back(self)


    def assign(self, n: 'std::vector< itkImageCVD33_Pointer >::size_type', x: 'std::vector< itkImageCVD33_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::size_type n, std::vector< itkImageCVD33_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD33_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::size_type new_size)
        resize(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::size_type new_size, std::vector< itkImageCVD33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD33_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::iterator pos, std::vector< itkImageCVD33_Pointer >::value_type const & x) -> std::vector< itkImageCVD33_Pointer >::iterator
        insert(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::iterator pos, std::vector< itkImageCVD33_Pointer >::size_type n, std::vector< itkImageCVD33_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD33_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageCVD33_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageCVD33 self, std::vector< itkImageCVD33_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageCVD33_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageCVD33_Pointer >::size_type":
        """capacity(vectoritkImageCVD33 self) -> std::vector< itkImageCVD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD33_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD33
vectoritkImageCVD33.iterator = new_instancemethod(_itkImagePython.vectoritkImageCVD33_iterator, None, vectoritkImageCVD33)
vectoritkImageCVD33.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageCVD33___nonzero__, None, vectoritkImageCVD33)
vectoritkImageCVD33.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageCVD33___bool__, None, vectoritkImageCVD33)
vectoritkImageCVD33.__len__ = new_instancemethod(_itkImagePython.vectoritkImageCVD33___len__, None, vectoritkImageCVD33)
vectoritkImageCVD33.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD33___getslice__, None, vectoritkImageCVD33)
vectoritkImageCVD33.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD33___setslice__, None, vectoritkImageCVD33)
vectoritkImageCVD33.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD33___delslice__, None, vectoritkImageCVD33)
vectoritkImageCVD33.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD33___delitem__, None, vectoritkImageCVD33)
vectoritkImageCVD33.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD33___getitem__, None, vectoritkImageCVD33)
vectoritkImageCVD33.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD33___setitem__, None, vectoritkImageCVD33)
vectoritkImageCVD33.pop = new_instancemethod(_itkImagePython.vectoritkImageCVD33_pop, None, vectoritkImageCVD33)
vectoritkImageCVD33.append = new_instancemethod(_itkImagePython.vectoritkImageCVD33_append, None, vectoritkImageCVD33)
vectoritkImageCVD33.empty = new_instancemethod(_itkImagePython.vectoritkImageCVD33_empty, None, vectoritkImageCVD33)
vectoritkImageCVD33.size = new_instancemethod(_itkImagePython.vectoritkImageCVD33_size, None, vectoritkImageCVD33)
vectoritkImageCVD33.swap = new_instancemethod(_itkImagePython.vectoritkImageCVD33_swap, None, vectoritkImageCVD33)
vectoritkImageCVD33.begin = new_instancemethod(_itkImagePython.vectoritkImageCVD33_begin, None, vectoritkImageCVD33)
vectoritkImageCVD33.end = new_instancemethod(_itkImagePython.vectoritkImageCVD33_end, None, vectoritkImageCVD33)
vectoritkImageCVD33.rbegin = new_instancemethod(_itkImagePython.vectoritkImageCVD33_rbegin, None, vectoritkImageCVD33)
vectoritkImageCVD33.rend = new_instancemethod(_itkImagePython.vectoritkImageCVD33_rend, None, vectoritkImageCVD33)
vectoritkImageCVD33.clear = new_instancemethod(_itkImagePython.vectoritkImageCVD33_clear, None, vectoritkImageCVD33)
vectoritkImageCVD33.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageCVD33_get_allocator, None, vectoritkImageCVD33)
vectoritkImageCVD33.pop_back = new_instancemethod(_itkImagePython.vectoritkImageCVD33_pop_back, None, vectoritkImageCVD33)
vectoritkImageCVD33.erase = new_instancemethod(_itkImagePython.vectoritkImageCVD33_erase, None, vectoritkImageCVD33)
vectoritkImageCVD33.push_back = new_instancemethod(_itkImagePython.vectoritkImageCVD33_push_back, None, vectoritkImageCVD33)
vectoritkImageCVD33.front = new_instancemethod(_itkImagePython.vectoritkImageCVD33_front, None, vectoritkImageCVD33)
vectoritkImageCVD33.back = new_instancemethod(_itkImagePython.vectoritkImageCVD33_back, None, vectoritkImageCVD33)
vectoritkImageCVD33.assign = new_instancemethod(_itkImagePython.vectoritkImageCVD33_assign, None, vectoritkImageCVD33)
vectoritkImageCVD33.resize = new_instancemethod(_itkImagePython.vectoritkImageCVD33_resize, None, vectoritkImageCVD33)
vectoritkImageCVD33.insert = new_instancemethod(_itkImagePython.vectoritkImageCVD33_insert, None, vectoritkImageCVD33)
vectoritkImageCVD33.reserve = new_instancemethod(_itkImagePython.vectoritkImageCVD33_reserve, None, vectoritkImageCVD33)
vectoritkImageCVD33.capacity = new_instancemethod(_itkImagePython.vectoritkImageCVD33_capacity, None, vectoritkImageCVD33)
vectoritkImageCVD33_swigregister = _itkImagePython.vectoritkImageCVD33_swigregister
vectoritkImageCVD33_swigregister(vectoritkImageCVD33)

class vectoritkImageCVD43(object):
    """Proxy of C++ std::vector<(itkImageCVD43_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageCVD43 self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD43_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageCVD43 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD43___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageCVD43 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD43___bool__(self)


    def __len__(self) -> "std::vector< itkImageCVD43_Pointer >::size_type":
        """__len__(vectoritkImageCVD43 self) -> std::vector< itkImageCVD43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD43___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageCVD43_Pointer >::difference_type', j: 'std::vector< itkImageCVD43_Pointer >::difference_type') -> "std::vector< itkImageCVD43_Pointer,std::allocator< itkImageCVD43_Pointer > > *":
        """__getslice__(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::difference_type i, std::vector< itkImageCVD43_Pointer >::difference_type j) -> vectoritkImageCVD43"""
        return _itkImagePython.vectoritkImageCVD43___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::difference_type i, std::vector< itkImageCVD43_Pointer >::difference_type j)
        __setslice__(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::difference_type i, std::vector< itkImageCVD43_Pointer >::difference_type j, vectoritkImageCVD43 v)
        """
        return _itkImagePython.vectoritkImageCVD43___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageCVD43_Pointer >::difference_type', j: 'std::vector< itkImageCVD43_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::difference_type i, std::vector< itkImageCVD43_Pointer >::difference_type j)"""
        return _itkImagePython.vectoritkImageCVD43___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::difference_type i)
        __delitem__(vectoritkImageCVD43 self, PySliceObject * slice)
        """
        return _itkImagePython.vectoritkImageCVD43___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageCVD43_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageCVD43 self, PySliceObject * slice) -> vectoritkImageCVD43
        __getitem__(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::difference_type i) -> std::vector< itkImageCVD43_Pointer >::value_type const &
        """
        return _itkImagePython.vectoritkImageCVD43___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageCVD43 self, PySliceObject * slice, vectoritkImageCVD43 v)
        __setitem__(vectoritkImageCVD43 self, PySliceObject * slice)
        __setitem__(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::difference_type i, std::vector< itkImageCVD43_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD43___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageCVD43_Pointer >::value_type":
        """pop(vectoritkImageCVD43 self) -> std::vector< itkImageCVD43_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD43_pop(self)


    def append(self, x: 'std::vector< itkImageCVD43_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD43_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageCVD43 self) -> bool"""
        return _itkImagePython.vectoritkImageCVD43_empty(self)


    def size(self) -> "std::vector< itkImageCVD43_Pointer >::size_type":
        """size(vectoritkImageCVD43 self) -> std::vector< itkImageCVD43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD43_size(self)


    def swap(self, v: 'vectoritkImageCVD43') -> "void":
        """swap(vectoritkImageCVD43 self, vectoritkImageCVD43 v)"""
        return _itkImagePython.vectoritkImageCVD43_swap(self, v)


    def begin(self) -> "std::vector< itkImageCVD43_Pointer >::iterator":
        """begin(vectoritkImageCVD43 self) -> std::vector< itkImageCVD43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD43_begin(self)


    def end(self) -> "std::vector< itkImageCVD43_Pointer >::iterator":
        """end(vectoritkImageCVD43 self) -> std::vector< itkImageCVD43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD43_end(self)


    def rbegin(self) -> "std::vector< itkImageCVD43_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageCVD43 self) -> std::vector< itkImageCVD43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD43_rbegin(self)


    def rend(self) -> "std::vector< itkImageCVD43_Pointer >::reverse_iterator":
        """rend(vectoritkImageCVD43 self) -> std::vector< itkImageCVD43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD43_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageCVD43 self)"""
        return _itkImagePython.vectoritkImageCVD43_clear(self)


    def get_allocator(self) -> "std::vector< itkImageCVD43_Pointer >::allocator_type":
        """get_allocator(vectoritkImageCVD43 self) -> std::vector< itkImageCVD43_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD43_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageCVD43 self)"""
        return _itkImagePython.vectoritkImageCVD43_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageCVD43_Pointer >::iterator":
        """
        erase(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::iterator pos) -> std::vector< itkImageCVD43_Pointer >::iterator
        erase(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::iterator first, std::vector< itkImageCVD43_Pointer >::iterator last) -> std::vector< itkImageCVD43_Pointer >::iterator
        """
        return _itkImagePython.vectoritkImageCVD43_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageCVD43_Pointer)> self) -> vectoritkImageCVD43
        __init__(std::vector<(itkImageCVD43_Pointer)> self, vectoritkImageCVD43 arg2) -> vectoritkImageCVD43
        __init__(std::vector<(itkImageCVD43_Pointer)> self, std::vector< itkImageCVD43_Pointer >::size_type size) -> vectoritkImageCVD43
        __init__(std::vector<(itkImageCVD43_Pointer)> self, std::vector< itkImageCVD43_Pointer >::size_type size, std::vector< itkImageCVD43_Pointer >::value_type const & value) -> vectoritkImageCVD43
        """
        _itkImagePython.vectoritkImageCVD43_swiginit(self, _itkImagePython.new_vectoritkImageCVD43(*args))

    def push_back(self, x: 'std::vector< itkImageCVD43_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD43_push_back(self, x)


    def front(self) -> "std::vector< itkImageCVD43_Pointer >::value_type const &":
        """front(vectoritkImageCVD43 self) -> std::vector< itkImageCVD43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD43_front(self)


    def back(self) -> "std::vector< itkImageCVD43_Pointer >::value_type const &":
        """back(vectoritkImageCVD43 self) -> std::vector< itkImageCVD43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD43_back(self)


    def assign(self, n: 'std::vector< itkImageCVD43_Pointer >::size_type', x: 'std::vector< itkImageCVD43_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::size_type n, std::vector< itkImageCVD43_Pointer >::value_type const & x)"""
        return _itkImagePython.vectoritkImageCVD43_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::size_type new_size)
        resize(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::size_type new_size, std::vector< itkImageCVD43_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD43_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::iterator pos, std::vector< itkImageCVD43_Pointer >::value_type const & x) -> std::vector< itkImageCVD43_Pointer >::iterator
        insert(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::iterator pos, std::vector< itkImageCVD43_Pointer >::size_type n, std::vector< itkImageCVD43_Pointer >::value_type const & x)
        """
        return _itkImagePython.vectoritkImageCVD43_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageCVD43_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageCVD43 self, std::vector< itkImageCVD43_Pointer >::size_type n)"""
        return _itkImagePython.vectoritkImageCVD43_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageCVD43_Pointer >::size_type":
        """capacity(vectoritkImageCVD43 self) -> std::vector< itkImageCVD43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD43_capacity(self)

    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD43
vectoritkImageCVD43.iterator = new_instancemethod(_itkImagePython.vectoritkImageCVD43_iterator, None, vectoritkImageCVD43)
vectoritkImageCVD43.__nonzero__ = new_instancemethod(_itkImagePython.vectoritkImageCVD43___nonzero__, None, vectoritkImageCVD43)
vectoritkImageCVD43.__bool__ = new_instancemethod(_itkImagePython.vectoritkImageCVD43___bool__, None, vectoritkImageCVD43)
vectoritkImageCVD43.__len__ = new_instancemethod(_itkImagePython.vectoritkImageCVD43___len__, None, vectoritkImageCVD43)
vectoritkImageCVD43.__getslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD43___getslice__, None, vectoritkImageCVD43)
vectoritkImageCVD43.__setslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD43___setslice__, None, vectoritkImageCVD43)
vectoritkImageCVD43.__delslice__ = new_instancemethod(_itkImagePython.vectoritkImageCVD43___delslice__, None, vectoritkImageCVD43)
vectoritkImageCVD43.__delitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD43___delitem__, None, vectoritkImageCVD43)
vectoritkImageCVD43.__getitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD43___getitem__, None, vectoritkImageCVD43)
vectoritkImageCVD43.__setitem__ = new_instancemethod(_itkImagePython.vectoritkImageCVD43___setitem__, None, vectoritkImageCVD43)
vectoritkImageCVD43.pop = new_instancemethod(_itkImagePython.vectoritkImageCVD43_pop, None, vectoritkImageCVD43)
vectoritkImageCVD43.append = new_instancemethod(_itkImagePython.vectoritkImageCVD43_append, None, vectoritkImageCVD43)
vectoritkImageCVD43.empty = new_instancemethod(_itkImagePython.vectoritkImageCVD43_empty, None, vectoritkImageCVD43)
vectoritkImageCVD43.size = new_instancemethod(_itkImagePython.vectoritkImageCVD43_size, None, vectoritkImageCVD43)
vectoritkImageCVD43.swap = new_instancemethod(_itkImagePython.vectoritkImageCVD43_swap, None, vectoritkImageCVD43)
vectoritkImageCVD43.begin = new_instancemethod(_itkImagePython.vectoritkImageCVD43_begin, None, vectoritkImageCVD43)
vectoritkImageCVD43.end = new_instancemethod(_itkImagePython.vectoritkImageCVD43_end, None, vectoritkImageCVD43)
vectoritkImageCVD43.rbegin = new_instancemethod(_itkImagePython.vectoritkImageCVD43_rbegin, None, vectoritkImageCVD43)
vectoritkImageCVD43.rend = new_instancemethod(_itkImagePython.vectoritkImageCVD43_rend, None, vectoritkImageCVD43)
vectoritkImageCVD43.clear = new_instancemethod(_itkImagePython.vectoritkImageCVD43_clear, None, vectoritkImageCVD43)
vectoritkImageCVD43.get_allocator = new_instancemethod(_itkImagePython.vectoritkImageCVD43_get_allocator, None, vectoritkImageCVD43)
vectoritkImageCVD43.pop_back = new_instancemethod(_itkImagePython.vectoritkImageCVD43_pop_back, None, vectoritkImageCVD43)
vectoritkImageCVD43.erase = new_instancemethod(_itkImagePython.vectoritkImageCVD43_erase, None, vectoritkImageCVD43)
vectoritkImageCVD43.push_back = new_instancemethod(_itkImagePython.vectoritkImageCVD43_push_back, None, vectoritkImageCVD43)
vectoritkImageCVD43.front = new_instancemethod(_itkImagePython.vectoritkImageCVD43_front, None, vectoritkImageCVD43)
vectoritkImageCVD43.back = new_instancemethod(_itkImagePython.vectoritkImageCVD43_back, None, vectoritkImageCVD43)
vectoritkImageCVD43.assign = new_instancemethod(_itkImagePython.vectoritkImageCVD43_assign, None, vectoritkImageCVD43)
vectoritkImageCVD43.resize = new_instancemethod(_itkImagePython.vectoritkImageCVD43_resize, None, vectoritkImageCVD43)
vectoritkImageCVD43.insert = new_instancemethod(_itkImagePython.vectoritkImageCVD43_insert, None, vectoritkImageCVD43)
vectoritkImageCVD43.reserve = new_instancemethod(_itkImagePython.vectoritkImageCVD43_reserve, None, vectoritkImageCVD43)
vectoritkImageCVD43.capacity = new_instancemethod(_itkImagePython.vectoritkImageCVD43_capacity, None, vectoritkImageCVD43)
vectoritkImageCVD43_swigregister = _itkImagePython.vectoritkImageCVD43_swigregister
vectoritkImageCVD43_swigregister(vectoritkImageCVD43)

class itkImageBase2(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkImageBase2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageBase2_Pointer":
        """__New_orig__() -> itkImageBase2_Pointer"""
        return _itkImagePython.itkImageBase2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageBase2_Pointer":
        """Clone(itkImageBase2 self) -> itkImageBase2_Pointer"""
        return _itkImagePython.itkImageBase2_Clone(self)


    def GetImageDimension() -> "unsigned int":
        """GetImageDimension() -> unsigned int"""
        return _itkImagePython.itkImageBase2_GetImageDimension()

    GetImageDimension = staticmethod(GetImageDimension)

    def SetOrigin(self, *args) -> "void":
        """
        SetOrigin(itkImageBase2 self, itkPointD2 _arg)
        SetOrigin(itkImageBase2 self, double const * origin)
        SetOrigin(itkImageBase2 self, float const * origin)
        """
        return _itkImagePython.itkImageBase2_SetOrigin(self, *args)


    def SetDirection(self, direction: 'itkMatrixD22') -> "void":
        """SetDirection(itkImageBase2 self, itkMatrixD22 direction)"""
        return _itkImagePython.itkImageBase2_SetDirection(self, direction)


    def GetDirection(self) -> "itkMatrixD22 const &":
        """GetDirection(itkImageBase2 self) -> itkMatrixD22"""
        return _itkImagePython.itkImageBase2_GetDirection(self)


    def GetInverseDirection(self) -> "itkMatrixD22 const &":
        """GetInverseDirection(itkImageBase2 self) -> itkMatrixD22"""
        return _itkImagePython.itkImageBase2_GetInverseDirection(self)


    def GetSpacing(self) -> "itkVectorD2 const &":
        """GetSpacing(itkImageBase2 self) -> itkVectorD2"""
        return _itkImagePython.itkImageBase2_GetSpacing(self)


    def GetOrigin(self) -> "itkPointD2 const &":
        """GetOrigin(itkImageBase2 self) -> itkPointD2"""
        return _itkImagePython.itkImageBase2_GetOrigin(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkImageBase2 self, bool initialize=False)
        Allocate(itkImageBase2 self)
        """
        return _itkImagePython.itkImageBase2_Allocate(self, initialize)


    def SetLargestPossibleRegion(self, region: 'itkImageRegion2') -> "void":
        """SetLargestPossibleRegion(itkImageBase2 self, itkImageRegion2 region)"""
        return _itkImagePython.itkImageBase2_SetLargestPossibleRegion(self, region)


    def __GetLargestPossibleRegion_orig__(self) -> "itkImageRegion2 const &":
        """__GetLargestPossibleRegion_orig__(itkImageBase2 self) -> itkImageRegion2"""
        return _itkImagePython.itkImageBase2___GetLargestPossibleRegion_orig__(self)


    def SetBufferedRegion(self, region: 'itkImageRegion2') -> "void":
        """SetBufferedRegion(itkImageBase2 self, itkImageRegion2 region)"""
        return _itkImagePython.itkImageBase2_SetBufferedRegion(self, region)


    def __GetBufferedRegion_orig__(self) -> "itkImageRegion2 const &":
        """__GetBufferedRegion_orig__(itkImageBase2 self) -> itkImageRegion2"""
        return _itkImagePython.itkImageBase2___GetBufferedRegion_orig__(self)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkImageBase2 self, itkImageRegion2 region)
        SetRequestedRegion(itkImageBase2 self, itkDataObject data)
        """
        return _itkImagePython.itkImageBase2_SetRequestedRegion(self, *args)


    def __GetRequestedRegion_orig__(self) -> "itkImageRegion2 const &":
        """__GetRequestedRegion_orig__(itkImageBase2 self) -> itkImageRegion2"""
        return _itkImagePython.itkImageBase2___GetRequestedRegion_orig__(self)


    def SetRegions(self, *args) -> "void":
        """
        SetRegions(itkImageBase2 self, itkImageRegion2 region)
        SetRegions(itkImageBase2 self, itkSize2 size)
        """
        return _itkImagePython.itkImageBase2_SetRegions(self, *args)


    def GetOffsetTable(self) -> "long long const *":
        """GetOffsetTable(itkImageBase2 self) -> long long const *"""
        return _itkImagePython.itkImageBase2_GetOffsetTable(self)


    def ComputeOffset(self, ind: 'itkIndex2') -> "long long":
        """ComputeOffset(itkImageBase2 self, itkIndex2 ind) -> long long"""
        return _itkImagePython.itkImageBase2_ComputeOffset(self, ind)


    def ComputeIndex(self, offset: 'long long') -> "itkIndex2":
        """ComputeIndex(itkImageBase2 self, long long offset) -> itkIndex2"""
        return _itkImagePython.itkImageBase2_ComputeIndex(self, offset)


    def SetSpacing(self, *args) -> "void":
        """
        SetSpacing(itkImageBase2 self, itkVectorD2 spacing)
        SetSpacing(itkImageBase2 self, double const * spacing)
        SetSpacing(itkImageBase2 self, float const * spacing)
        """
        return _itkImagePython.itkImageBase2_SetSpacing(self, *args)


    def Graft(self, data: 'itkImageBase2') -> "void":
        """Graft(itkImageBase2 self, itkImageBase2 data)"""
        return _itkImagePython.itkImageBase2_Graft(self, data)


    def GetNumberOfComponentsPerPixel(self) -> "unsigned int":
        """GetNumberOfComponentsPerPixel(itkImageBase2 self) -> unsigned int"""
        return _itkImagePython.itkImageBase2_GetNumberOfComponentsPerPixel(self)


    def SetNumberOfComponentsPerPixel(self, arg0: 'unsigned int') -> "void":
        """SetNumberOfComponentsPerPixel(itkImageBase2 self, unsigned int arg0)"""
        return _itkImagePython.itkImageBase2_SetNumberOfComponentsPerPixel(self, arg0)

    __swig_destroy__ = _itkImagePython.delete_itkImageBase2

    def cast(obj: 'itkLightObject') -> "itkImageBase2 *":
        """cast(itkLightObject obj) -> itkImageBase2"""
        return _itkImagePython.itkImageBase2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageBase2

        Create a new object of the class itkImageBase2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageBase2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageBase2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def GetBufferedRegion(self):
        var = self.__GetBufferedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetLargestPossibleRegion(self):
        var = self.__GetLargestPossibleRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetRequestedRegion(self):
        var = self.__GetRequestedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def TransformPhysicalPointToIndex(self, point: 'itkPointD2') -> "itkIndex2":
        """TransformPhysicalPointToIndex(itkImageBase2 self, itkPointD2 point) -> itkIndex2"""
        return _itkImagePython.itkImageBase2_TransformPhysicalPointToIndex(self, point)


    def TransformPhysicalPointToContinuousIndex(self, point: 'itkPointD2') -> "itkContinuousIndexD2":
        """TransformPhysicalPointToContinuousIndex(itkImageBase2 self, itkPointD2 point) -> itkContinuousIndexD2"""
        return _itkImagePython.itkImageBase2_TransformPhysicalPointToContinuousIndex(self, point)


    def TransformContinuousIndexToPhysicalPoint(self, idx: 'itkContinuousIndexD2 &') -> "itkPointD2":
        """TransformContinuousIndexToPhysicalPoint(itkImageBase2 self, itkContinuousIndexD2 & idx) -> itkPointD2"""
        return _itkImagePython.itkImageBase2_TransformContinuousIndexToPhysicalPoint(self, idx)


    def TransformIndexToPhysicalPoint(self, idx: 'itkIndex2') -> "itkPointD2":
        """TransformIndexToPhysicalPoint(itkImageBase2 self, itkIndex2 idx) -> itkPointD2"""
        return _itkImagePython.itkImageBase2_TransformIndexToPhysicalPoint(self, idx)

itkImageBase2.Clone = new_instancemethod(_itkImagePython.itkImageBase2_Clone, None, itkImageBase2)
itkImageBase2.SetOrigin = new_instancemethod(_itkImagePython.itkImageBase2_SetOrigin, None, itkImageBase2)
itkImageBase2.SetDirection = new_instancemethod(_itkImagePython.itkImageBase2_SetDirection, None, itkImageBase2)
itkImageBase2.GetDirection = new_instancemethod(_itkImagePython.itkImageBase2_GetDirection, None, itkImageBase2)
itkImageBase2.GetInverseDirection = new_instancemethod(_itkImagePython.itkImageBase2_GetInverseDirection, None, itkImageBase2)
itkImageBase2.GetSpacing = new_instancemethod(_itkImagePython.itkImageBase2_GetSpacing, None, itkImageBase2)
itkImageBase2.GetOrigin = new_instancemethod(_itkImagePython.itkImageBase2_GetOrigin, None, itkImageBase2)
itkImageBase2.Allocate = new_instancemethod(_itkImagePython.itkImageBase2_Allocate, None, itkImageBase2)
itkImageBase2.SetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase2_SetLargestPossibleRegion, None, itkImageBase2)
itkImageBase2.__GetLargestPossibleRegion_orig__ = new_instancemethod(_itkImagePython.itkImageBase2___GetLargestPossibleRegion_orig__, None, itkImageBase2)
itkImageBase2.SetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase2_SetBufferedRegion, None, itkImageBase2)
itkImageBase2.__GetBufferedRegion_orig__ = new_instancemethod(_itkImagePython.itkImageBase2___GetBufferedRegion_orig__, None, itkImageBase2)
itkImageBase2.SetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase2_SetRequestedRegion, None, itkImageBase2)
itkImageBase2.__GetRequestedRegion_orig__ = new_instancemethod(_itkImagePython.itkImageBase2___GetRequestedRegion_orig__, None, itkImageBase2)
itkImageBase2.SetRegions = new_instancemethod(_itkImagePython.itkImageBase2_SetRegions, None, itkImageBase2)
itkImageBase2.GetOffsetTable = new_instancemethod(_itkImagePython.itkImageBase2_GetOffsetTable, None, itkImageBase2)
itkImageBase2.ComputeOffset = new_instancemethod(_itkImagePython.itkImageBase2_ComputeOffset, None, itkImageBase2)
itkImageBase2.ComputeIndex = new_instancemethod(_itkImagePython.itkImageBase2_ComputeIndex, None, itkImageBase2)
itkImageBase2.SetSpacing = new_instancemethod(_itkImagePython.itkImageBase2_SetSpacing, None, itkImageBase2)
itkImageBase2.Graft = new_instancemethod(_itkImagePython.itkImageBase2_Graft, None, itkImageBase2)
itkImageBase2.GetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase2_GetNumberOfComponentsPerPixel, None, itkImageBase2)
itkImageBase2.SetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase2_SetNumberOfComponentsPerPixel, None, itkImageBase2)
itkImageBase2.TransformPhysicalPointToIndex = new_instancemethod(_itkImagePython.itkImageBase2_TransformPhysicalPointToIndex, None, itkImageBase2)
itkImageBase2.TransformPhysicalPointToContinuousIndex = new_instancemethod(_itkImagePython.itkImageBase2_TransformPhysicalPointToContinuousIndex, None, itkImageBase2)
itkImageBase2.TransformContinuousIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase2_TransformContinuousIndexToPhysicalPoint, None, itkImageBase2)
itkImageBase2.TransformIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase2_TransformIndexToPhysicalPoint, None, itkImageBase2)
itkImageBase2_swigregister = _itkImagePython.itkImageBase2_swigregister
itkImageBase2_swigregister(itkImageBase2)

def itkImageBase2___New_orig__() -> "itkImageBase2_Pointer":
    """itkImageBase2___New_orig__() -> itkImageBase2_Pointer"""
    return _itkImagePython.itkImageBase2___New_orig__()

def itkImageBase2_GetImageDimension() -> "unsigned int":
    """itkImageBase2_GetImageDimension() -> unsigned int"""
    return _itkImagePython.itkImageBase2_GetImageDimension()

def itkImageBase2_cast(obj: 'itkLightObject') -> "itkImageBase2 *":
    """itkImageBase2_cast(itkLightObject obj) -> itkImageBase2"""
    return _itkImagePython.itkImageBase2_cast(obj)

class itkImageBase3(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkImageBase3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageBase3_Pointer":
        """__New_orig__() -> itkImageBase3_Pointer"""
        return _itkImagePython.itkImageBase3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageBase3_Pointer":
        """Clone(itkImageBase3 self) -> itkImageBase3_Pointer"""
        return _itkImagePython.itkImageBase3_Clone(self)


    def GetImageDimension() -> "unsigned int":
        """GetImageDimension() -> unsigned int"""
        return _itkImagePython.itkImageBase3_GetImageDimension()

    GetImageDimension = staticmethod(GetImageDimension)

    def SetOrigin(self, *args) -> "void":
        """
        SetOrigin(itkImageBase3 self, itkPointD3 _arg)
        SetOrigin(itkImageBase3 self, double const * origin)
        SetOrigin(itkImageBase3 self, float const * origin)
        """
        return _itkImagePython.itkImageBase3_SetOrigin(self, *args)


    def SetDirection(self, direction: 'itkMatrixD33') -> "void":
        """SetDirection(itkImageBase3 self, itkMatrixD33 direction)"""
        return _itkImagePython.itkImageBase3_SetDirection(self, direction)


    def GetDirection(self) -> "itkMatrixD33 const &":
        """GetDirection(itkImageBase3 self) -> itkMatrixD33"""
        return _itkImagePython.itkImageBase3_GetDirection(self)


    def GetInverseDirection(self) -> "itkMatrixD33 const &":
        """GetInverseDirection(itkImageBase3 self) -> itkMatrixD33"""
        return _itkImagePython.itkImageBase3_GetInverseDirection(self)


    def GetSpacing(self) -> "itkVectorD3 const &":
        """GetSpacing(itkImageBase3 self) -> itkVectorD3"""
        return _itkImagePython.itkImageBase3_GetSpacing(self)


    def GetOrigin(self) -> "itkPointD3 const &":
        """GetOrigin(itkImageBase3 self) -> itkPointD3"""
        return _itkImagePython.itkImageBase3_GetOrigin(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkImageBase3 self, bool initialize=False)
        Allocate(itkImageBase3 self)
        """
        return _itkImagePython.itkImageBase3_Allocate(self, initialize)


    def SetLargestPossibleRegion(self, region: 'itkImageRegion3') -> "void":
        """SetLargestPossibleRegion(itkImageBase3 self, itkImageRegion3 region)"""
        return _itkImagePython.itkImageBase3_SetLargestPossibleRegion(self, region)


    def __GetLargestPossibleRegion_orig__(self) -> "itkImageRegion3 const &":
        """__GetLargestPossibleRegion_orig__(itkImageBase3 self) -> itkImageRegion3"""
        return _itkImagePython.itkImageBase3___GetLargestPossibleRegion_orig__(self)


    def SetBufferedRegion(self, region: 'itkImageRegion3') -> "void":
        """SetBufferedRegion(itkImageBase3 self, itkImageRegion3 region)"""
        return _itkImagePython.itkImageBase3_SetBufferedRegion(self, region)


    def __GetBufferedRegion_orig__(self) -> "itkImageRegion3 const &":
        """__GetBufferedRegion_orig__(itkImageBase3 self) -> itkImageRegion3"""
        return _itkImagePython.itkImageBase3___GetBufferedRegion_orig__(self)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkImageBase3 self, itkImageRegion3 region)
        SetRequestedRegion(itkImageBase3 self, itkDataObject data)
        """
        return _itkImagePython.itkImageBase3_SetRequestedRegion(self, *args)


    def __GetRequestedRegion_orig__(self) -> "itkImageRegion3 const &":
        """__GetRequestedRegion_orig__(itkImageBase3 self) -> itkImageRegion3"""
        return _itkImagePython.itkImageBase3___GetRequestedRegion_orig__(self)


    def SetRegions(self, *args) -> "void":
        """
        SetRegions(itkImageBase3 self, itkImageRegion3 region)
        SetRegions(itkImageBase3 self, itkSize3 size)
        """
        return _itkImagePython.itkImageBase3_SetRegions(self, *args)


    def GetOffsetTable(self) -> "long long const *":
        """GetOffsetTable(itkImageBase3 self) -> long long const *"""
        return _itkImagePython.itkImageBase3_GetOffsetTable(self)


    def ComputeOffset(self, ind: 'itkIndex3') -> "long long":
        """ComputeOffset(itkImageBase3 self, itkIndex3 ind) -> long long"""
        return _itkImagePython.itkImageBase3_ComputeOffset(self, ind)


    def ComputeIndex(self, offset: 'long long') -> "itkIndex3":
        """ComputeIndex(itkImageBase3 self, long long offset) -> itkIndex3"""
        return _itkImagePython.itkImageBase3_ComputeIndex(self, offset)


    def SetSpacing(self, *args) -> "void":
        """
        SetSpacing(itkImageBase3 self, itkVectorD3 spacing)
        SetSpacing(itkImageBase3 self, double const * spacing)
        SetSpacing(itkImageBase3 self, float const * spacing)
        """
        return _itkImagePython.itkImageBase3_SetSpacing(self, *args)


    def Graft(self, data: 'itkImageBase3') -> "void":
        """Graft(itkImageBase3 self, itkImageBase3 data)"""
        return _itkImagePython.itkImageBase3_Graft(self, data)


    def GetNumberOfComponentsPerPixel(self) -> "unsigned int":
        """GetNumberOfComponentsPerPixel(itkImageBase3 self) -> unsigned int"""
        return _itkImagePython.itkImageBase3_GetNumberOfComponentsPerPixel(self)


    def SetNumberOfComponentsPerPixel(self, arg0: 'unsigned int') -> "void":
        """SetNumberOfComponentsPerPixel(itkImageBase3 self, unsigned int arg0)"""
        return _itkImagePython.itkImageBase3_SetNumberOfComponentsPerPixel(self, arg0)

    __swig_destroy__ = _itkImagePython.delete_itkImageBase3

    def cast(obj: 'itkLightObject') -> "itkImageBase3 *":
        """cast(itkLightObject obj) -> itkImageBase3"""
        return _itkImagePython.itkImageBase3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageBase3

        Create a new object of the class itkImageBase3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageBase3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageBase3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def GetBufferedRegion(self):
        var = self.__GetBufferedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetLargestPossibleRegion(self):
        var = self.__GetLargestPossibleRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetRequestedRegion(self):
        var = self.__GetRequestedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def TransformPhysicalPointToIndex(self, point: 'itkPointD3') -> "itkIndex3":
        """TransformPhysicalPointToIndex(itkImageBase3 self, itkPointD3 point) -> itkIndex3"""
        return _itkImagePython.itkImageBase3_TransformPhysicalPointToIndex(self, point)


    def TransformPhysicalPointToContinuousIndex(self, point: 'itkPointD3') -> "itkContinuousIndexD3":
        """TransformPhysicalPointToContinuousIndex(itkImageBase3 self, itkPointD3 point) -> itkContinuousIndexD3"""
        return _itkImagePython.itkImageBase3_TransformPhysicalPointToContinuousIndex(self, point)


    def TransformContinuousIndexToPhysicalPoint(self, idx: 'itkContinuousIndexD3 &') -> "itkPointD3":
        """TransformContinuousIndexToPhysicalPoint(itkImageBase3 self, itkContinuousIndexD3 & idx) -> itkPointD3"""
        return _itkImagePython.itkImageBase3_TransformContinuousIndexToPhysicalPoint(self, idx)


    def TransformIndexToPhysicalPoint(self, idx: 'itkIndex3') -> "itkPointD3":
        """TransformIndexToPhysicalPoint(itkImageBase3 self, itkIndex3 idx) -> itkPointD3"""
        return _itkImagePython.itkImageBase3_TransformIndexToPhysicalPoint(self, idx)

itkImageBase3.Clone = new_instancemethod(_itkImagePython.itkImageBase3_Clone, None, itkImageBase3)
itkImageBase3.SetOrigin = new_instancemethod(_itkImagePython.itkImageBase3_SetOrigin, None, itkImageBase3)
itkImageBase3.SetDirection = new_instancemethod(_itkImagePython.itkImageBase3_SetDirection, None, itkImageBase3)
itkImageBase3.GetDirection = new_instancemethod(_itkImagePython.itkImageBase3_GetDirection, None, itkImageBase3)
itkImageBase3.GetInverseDirection = new_instancemethod(_itkImagePython.itkImageBase3_GetInverseDirection, None, itkImageBase3)
itkImageBase3.GetSpacing = new_instancemethod(_itkImagePython.itkImageBase3_GetSpacing, None, itkImageBase3)
itkImageBase3.GetOrigin = new_instancemethod(_itkImagePython.itkImageBase3_GetOrigin, None, itkImageBase3)
itkImageBase3.Allocate = new_instancemethod(_itkImagePython.itkImageBase3_Allocate, None, itkImageBase3)
itkImageBase3.SetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase3_SetLargestPossibleRegion, None, itkImageBase3)
itkImageBase3.__GetLargestPossibleRegion_orig__ = new_instancemethod(_itkImagePython.itkImageBase3___GetLargestPossibleRegion_orig__, None, itkImageBase3)
itkImageBase3.SetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase3_SetBufferedRegion, None, itkImageBase3)
itkImageBase3.__GetBufferedRegion_orig__ = new_instancemethod(_itkImagePython.itkImageBase3___GetBufferedRegion_orig__, None, itkImageBase3)
itkImageBase3.SetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase3_SetRequestedRegion, None, itkImageBase3)
itkImageBase3.__GetRequestedRegion_orig__ = new_instancemethod(_itkImagePython.itkImageBase3___GetRequestedRegion_orig__, None, itkImageBase3)
itkImageBase3.SetRegions = new_instancemethod(_itkImagePython.itkImageBase3_SetRegions, None, itkImageBase3)
itkImageBase3.GetOffsetTable = new_instancemethod(_itkImagePython.itkImageBase3_GetOffsetTable, None, itkImageBase3)
itkImageBase3.ComputeOffset = new_instancemethod(_itkImagePython.itkImageBase3_ComputeOffset, None, itkImageBase3)
itkImageBase3.ComputeIndex = new_instancemethod(_itkImagePython.itkImageBase3_ComputeIndex, None, itkImageBase3)
itkImageBase3.SetSpacing = new_instancemethod(_itkImagePython.itkImageBase3_SetSpacing, None, itkImageBase3)
itkImageBase3.Graft = new_instancemethod(_itkImagePython.itkImageBase3_Graft, None, itkImageBase3)
itkImageBase3.GetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase3_GetNumberOfComponentsPerPixel, None, itkImageBase3)
itkImageBase3.SetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase3_SetNumberOfComponentsPerPixel, None, itkImageBase3)
itkImageBase3.TransformPhysicalPointToIndex = new_instancemethod(_itkImagePython.itkImageBase3_TransformPhysicalPointToIndex, None, itkImageBase3)
itkImageBase3.TransformPhysicalPointToContinuousIndex = new_instancemethod(_itkImagePython.itkImageBase3_TransformPhysicalPointToContinuousIndex, None, itkImageBase3)
itkImageBase3.TransformContinuousIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase3_TransformContinuousIndexToPhysicalPoint, None, itkImageBase3)
itkImageBase3.TransformIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase3_TransformIndexToPhysicalPoint, None, itkImageBase3)
itkImageBase3_swigregister = _itkImagePython.itkImageBase3_swigregister
itkImageBase3_swigregister(itkImageBase3)

def itkImageBase3___New_orig__() -> "itkImageBase3_Pointer":
    """itkImageBase3___New_orig__() -> itkImageBase3_Pointer"""
    return _itkImagePython.itkImageBase3___New_orig__()

def itkImageBase3_GetImageDimension() -> "unsigned int":
    """itkImageBase3_GetImageDimension() -> unsigned int"""
    return _itkImagePython.itkImageBase3_GetImageDimension()

def itkImageBase3_cast(obj: 'itkLightObject') -> "itkImageBase3 *":
    """itkImageBase3_cast(itkLightObject obj) -> itkImageBase3"""
    return _itkImagePython.itkImageBase3_cast(obj)

class itkImageBase4(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkImageBase4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageBase4_Pointer":
        """__New_orig__() -> itkImageBase4_Pointer"""
        return _itkImagePython.itkImageBase4___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageBase4_Pointer":
        """Clone(itkImageBase4 self) -> itkImageBase4_Pointer"""
        return _itkImagePython.itkImageBase4_Clone(self)


    def GetImageDimension() -> "unsigned int":
        """GetImageDimension() -> unsigned int"""
        return _itkImagePython.itkImageBase4_GetImageDimension()

    GetImageDimension = staticmethod(GetImageDimension)

    def SetOrigin(self, *args) -> "void":
        """
        SetOrigin(itkImageBase4 self, itkPointD4 _arg)
        SetOrigin(itkImageBase4 self, double const * origin)
        SetOrigin(itkImageBase4 self, float const * origin)
        """
        return _itkImagePython.itkImageBase4_SetOrigin(self, *args)


    def SetDirection(self, direction: 'itkMatrixD44') -> "void":
        """SetDirection(itkImageBase4 self, itkMatrixD44 direction)"""
        return _itkImagePython.itkImageBase4_SetDirection(self, direction)


    def GetDirection(self) -> "itkMatrixD44 const &":
        """GetDirection(itkImageBase4 self) -> itkMatrixD44"""
        return _itkImagePython.itkImageBase4_GetDirection(self)


    def GetInverseDirection(self) -> "itkMatrixD44 const &":
        """GetInverseDirection(itkImageBase4 self) -> itkMatrixD44"""
        return _itkImagePython.itkImageBase4_GetInverseDirection(self)


    def GetSpacing(self) -> "itkVectorD4 const &":
        """GetSpacing(itkImageBase4 self) -> itkVectorD4"""
        return _itkImagePython.itkImageBase4_GetSpacing(self)


    def GetOrigin(self) -> "itkPointD4 const &":
        """GetOrigin(itkImageBase4 self) -> itkPointD4"""
        return _itkImagePython.itkImageBase4_GetOrigin(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkImageBase4 self, bool initialize=False)
        Allocate(itkImageBase4 self)
        """
        return _itkImagePython.itkImageBase4_Allocate(self, initialize)


    def SetLargestPossibleRegion(self, region: 'itk::ImageRegion< 4 > const &') -> "void":
        """SetLargestPossibleRegion(itkImageBase4 self, itk::ImageRegion< 4 > const & region)"""
        return _itkImagePython.itkImageBase4_SetLargestPossibleRegion(self, region)


    def __GetLargestPossibleRegion_orig__(self) -> "itk::ImageRegion< 4 > const &":
        """__GetLargestPossibleRegion_orig__(itkImageBase4 self) -> itk::ImageRegion< 4 > const &"""
        return _itkImagePython.itkImageBase4___GetLargestPossibleRegion_orig__(self)


    def SetBufferedRegion(self, region: 'itk::ImageRegion< 4 > const &') -> "void":
        """SetBufferedRegion(itkImageBase4 self, itk::ImageRegion< 4 > const & region)"""
        return _itkImagePython.itkImageBase4_SetBufferedRegion(self, region)


    def __GetBufferedRegion_orig__(self) -> "itk::ImageRegion< 4 > const &":
        """__GetBufferedRegion_orig__(itkImageBase4 self) -> itk::ImageRegion< 4 > const &"""
        return _itkImagePython.itkImageBase4___GetBufferedRegion_orig__(self)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkImageBase4 self, itk::ImageRegion< 4 > const & region)
        SetRequestedRegion(itkImageBase4 self, itkDataObject data)
        """
        return _itkImagePython.itkImageBase4_SetRequestedRegion(self, *args)


    def __GetRequestedRegion_orig__(self) -> "itk::ImageRegion< 4 > const &":
        """__GetRequestedRegion_orig__(itkImageBase4 self) -> itk::ImageRegion< 4 > const &"""
        return _itkImagePython.itkImageBase4___GetRequestedRegion_orig__(self)


    def SetRegions(self, *args) -> "void":
        """
        SetRegions(itkImageBase4 self, itk::ImageRegion< 4 > const & region)
        SetRegions(itkImageBase4 self, itkSize4 size)
        """
        return _itkImagePython.itkImageBase4_SetRegions(self, *args)


    def GetOffsetTable(self) -> "long long const *":
        """GetOffsetTable(itkImageBase4 self) -> long long const *"""
        return _itkImagePython.itkImageBase4_GetOffsetTable(self)


    def ComputeOffset(self, ind: 'itkIndex4') -> "long long":
        """ComputeOffset(itkImageBase4 self, itkIndex4 ind) -> long long"""
        return _itkImagePython.itkImageBase4_ComputeOffset(self, ind)


    def ComputeIndex(self, offset: 'long long') -> "itkIndex4":
        """ComputeIndex(itkImageBase4 self, long long offset) -> itkIndex4"""
        return _itkImagePython.itkImageBase4_ComputeIndex(self, offset)


    def SetSpacing(self, *args) -> "void":
        """
        SetSpacing(itkImageBase4 self, itkVectorD4 spacing)
        SetSpacing(itkImageBase4 self, double const * spacing)
        SetSpacing(itkImageBase4 self, float const * spacing)
        """
        return _itkImagePython.itkImageBase4_SetSpacing(self, *args)


    def Graft(self, data: 'itkImageBase4') -> "void":
        """Graft(itkImageBase4 self, itkImageBase4 data)"""
        return _itkImagePython.itkImageBase4_Graft(self, data)


    def GetNumberOfComponentsPerPixel(self) -> "unsigned int":
        """GetNumberOfComponentsPerPixel(itkImageBase4 self) -> unsigned int"""
        return _itkImagePython.itkImageBase4_GetNumberOfComponentsPerPixel(self)


    def SetNumberOfComponentsPerPixel(self, arg0: 'unsigned int') -> "void":
        """SetNumberOfComponentsPerPixel(itkImageBase4 self, unsigned int arg0)"""
        return _itkImagePython.itkImageBase4_SetNumberOfComponentsPerPixel(self, arg0)

    __swig_destroy__ = _itkImagePython.delete_itkImageBase4

    def cast(obj: 'itkLightObject') -> "itkImageBase4 *":
        """cast(itkLightObject obj) -> itkImageBase4"""
        return _itkImagePython.itkImageBase4_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageBase4

        Create a new object of the class itkImageBase4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase4.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageBase4.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageBase4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def GetBufferedRegion(self):
        var = self.__GetBufferedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetLargestPossibleRegion(self):
        var = self.__GetLargestPossibleRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetRequestedRegion(self):
        var = self.__GetRequestedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def TransformPhysicalPointToIndex(self, point: 'itkPointD4') -> "itkIndex4":
        """TransformPhysicalPointToIndex(itkImageBase4 self, itkPointD4 point) -> itkIndex4"""
        return _itkImagePython.itkImageBase4_TransformPhysicalPointToIndex(self, point)


    def TransformPhysicalPointToContinuousIndex(self, point: 'itkPointD4') -> "itkContinuousIndexD4":
        """TransformPhysicalPointToContinuousIndex(itkImageBase4 self, itkPointD4 point) -> itkContinuousIndexD4"""
        return _itkImagePython.itkImageBase4_TransformPhysicalPointToContinuousIndex(self, point)


    def TransformContinuousIndexToPhysicalPoint(self, idx: 'itkContinuousIndexD4 &') -> "itkPointD4":
        """TransformContinuousIndexToPhysicalPoint(itkImageBase4 self, itkContinuousIndexD4 & idx) -> itkPointD4"""
        return _itkImagePython.itkImageBase4_TransformContinuousIndexToPhysicalPoint(self, idx)


    def TransformIndexToPhysicalPoint(self, idx: 'itkIndex4') -> "itkPointD4":
        """TransformIndexToPhysicalPoint(itkImageBase4 self, itkIndex4 idx) -> itkPointD4"""
        return _itkImagePython.itkImageBase4_TransformIndexToPhysicalPoint(self, idx)

itkImageBase4.Clone = new_instancemethod(_itkImagePython.itkImageBase4_Clone, None, itkImageBase4)
itkImageBase4.SetOrigin = new_instancemethod(_itkImagePython.itkImageBase4_SetOrigin, None, itkImageBase4)
itkImageBase4.SetDirection = new_instancemethod(_itkImagePython.itkImageBase4_SetDirection, None, itkImageBase4)
itkImageBase4.GetDirection = new_instancemethod(_itkImagePython.itkImageBase4_GetDirection, None, itkImageBase4)
itkImageBase4.GetInverseDirection = new_instancemethod(_itkImagePython.itkImageBase4_GetInverseDirection, None, itkImageBase4)
itkImageBase4.GetSpacing = new_instancemethod(_itkImagePython.itkImageBase4_GetSpacing, None, itkImageBase4)
itkImageBase4.GetOrigin = new_instancemethod(_itkImagePython.itkImageBase4_GetOrigin, None, itkImageBase4)
itkImageBase4.Allocate = new_instancemethod(_itkImagePython.itkImageBase4_Allocate, None, itkImageBase4)
itkImageBase4.SetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase4_SetLargestPossibleRegion, None, itkImageBase4)
itkImageBase4.__GetLargestPossibleRegion_orig__ = new_instancemethod(_itkImagePython.itkImageBase4___GetLargestPossibleRegion_orig__, None, itkImageBase4)
itkImageBase4.SetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase4_SetBufferedRegion, None, itkImageBase4)
itkImageBase4.__GetBufferedRegion_orig__ = new_instancemethod(_itkImagePython.itkImageBase4___GetBufferedRegion_orig__, None, itkImageBase4)
itkImageBase4.SetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase4_SetRequestedRegion, None, itkImageBase4)
itkImageBase4.__GetRequestedRegion_orig__ = new_instancemethod(_itkImagePython.itkImageBase4___GetRequestedRegion_orig__, None, itkImageBase4)
itkImageBase4.SetRegions = new_instancemethod(_itkImagePython.itkImageBase4_SetRegions, None, itkImageBase4)
itkImageBase4.GetOffsetTable = new_instancemethod(_itkImagePython.itkImageBase4_GetOffsetTable, None, itkImageBase4)
itkImageBase4.ComputeOffset = new_instancemethod(_itkImagePython.itkImageBase4_ComputeOffset, None, itkImageBase4)
itkImageBase4.ComputeIndex = new_instancemethod(_itkImagePython.itkImageBase4_ComputeIndex, None, itkImageBase4)
itkImageBase4.SetSpacing = new_instancemethod(_itkImagePython.itkImageBase4_SetSpacing, None, itkImageBase4)
itkImageBase4.Graft = new_instancemethod(_itkImagePython.itkImageBase4_Graft, None, itkImageBase4)
itkImageBase4.GetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase4_GetNumberOfComponentsPerPixel, None, itkImageBase4)
itkImageBase4.SetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase4_SetNumberOfComponentsPerPixel, None, itkImageBase4)
itkImageBase4.TransformPhysicalPointToIndex = new_instancemethod(_itkImagePython.itkImageBase4_TransformPhysicalPointToIndex, None, itkImageBase4)
itkImageBase4.TransformPhysicalPointToContinuousIndex = new_instancemethod(_itkImagePython.itkImageBase4_TransformPhysicalPointToContinuousIndex, None, itkImageBase4)
itkImageBase4.TransformContinuousIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase4_TransformContinuousIndexToPhysicalPoint, None, itkImageBase4)
itkImageBase4.TransformIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase4_TransformIndexToPhysicalPoint, None, itkImageBase4)
itkImageBase4_swigregister = _itkImagePython.itkImageBase4_swigregister
itkImageBase4_swigregister(itkImageBase4)

def itkImageBase4___New_orig__() -> "itkImageBase4_Pointer":
    """itkImageBase4___New_orig__() -> itkImageBase4_Pointer"""
    return _itkImagePython.itkImageBase4___New_orig__()

def itkImageBase4_GetImageDimension() -> "unsigned int":
    """itkImageBase4_GetImageDimension() -> unsigned int"""
    return _itkImagePython.itkImageBase4_GetImageDimension()

def itkImageBase4_cast(obj: 'itkLightObject') -> "itkImageBase4 *":
    """itkImageBase4_cast(itkLightObject obj) -> itkImageBase4"""
    return _itkImagePython.itkImageBase4_cast(obj)

class itkImageCF2(itkImageBase2):
    """Proxy of C++ itkImageCF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCF2_Pointer":
        """__New_orig__() -> itkImageCF2_Pointer"""
        return _itkImagePython.itkImageCF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCF2_Pointer":
        """Clone(itkImageCF2 self) -> itkImageCF2_Pointer"""
        return _itkImagePython.itkImageCF2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCF2 self, bool initializePixels=False)
        Allocate(itkImageCF2 self)
        """
        return _itkImagePython.itkImageCF2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'stdcomplexF') -> "void":
        """FillBuffer(itkImageCF2 self, stdcomplexF value)"""
        return _itkImagePython.itkImageCF2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'stdcomplexF') -> "void":
        """SetPixel(itkImageCF2 self, itkIndex2 index, stdcomplexF value)"""
        return _itkImagePython.itkImageCF2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "stdcomplexF &":
        """
        GetPixel(itkImageCF2 self, itkIndex2 index) -> stdcomplexF
        GetPixel(itkImageCF2 self, itkIndex2 index) -> stdcomplexF
        """
        return _itkImagePython.itkImageCF2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "stdcomplexF const *":
        """
        GetBufferPointer(itkImageCF2 self) -> stdcomplexF
        GetBufferPointer(itkImageCF2 self) -> stdcomplexF
        """
        return _itkImagePython.itkImageCF2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,std::complex< float > > const *":
        """
        GetPixelContainer(itkImageCF2 self) -> itk::ImportImageContainer< unsigned long long,std::complex< float > >
        GetPixelContainer(itkImageCF2 self) -> itk::ImportImageContainer< unsigned long long,std::complex< float > > const *
        """
        return _itkImagePython.itkImageCF2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,std::complex< float > > *') -> "void":
        """SetPixelContainer(itkImageCF2 self, itk::ImportImageContainer< unsigned long long,std::complex< float > > * container)"""
        return _itkImagePython.itkImageCF2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCF2') -> "void":
        """Graft(itkImageCF2 self, itkImageCF2 data)"""
        return _itkImagePython.itkImageCF2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< std::complex< float > > const":
        """
        GetPixelAccessor(itkImageCF2 self) -> itk::DefaultPixelAccessor< std::complex< float > >
        GetPixelAccessor(itkImageCF2 self) -> itk::DefaultPixelAccessor< std::complex< float > > const
        """
        return _itkImagePython.itkImageCF2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageCF2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,2 > >
        GetNeighborhoodAccessor(itkImageCF2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,2 > > const
        """
        return _itkImagePython.itkImageCF2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCF2

    def cast(obj: 'itkLightObject') -> "itkImageCF2 *":
        """cast(itkLightObject obj) -> itkImageCF2"""
        return _itkImagePython.itkImageCF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCF2

        Create a new object of the class itkImageCF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCF2.Clone = new_instancemethod(_itkImagePython.itkImageCF2_Clone, None, itkImageCF2)
itkImageCF2.Allocate = new_instancemethod(_itkImagePython.itkImageCF2_Allocate, None, itkImageCF2)
itkImageCF2.FillBuffer = new_instancemethod(_itkImagePython.itkImageCF2_FillBuffer, None, itkImageCF2)
itkImageCF2.SetPixel = new_instancemethod(_itkImagePython.itkImageCF2_SetPixel, None, itkImageCF2)
itkImageCF2.GetPixel = new_instancemethod(_itkImagePython.itkImageCF2_GetPixel, None, itkImageCF2)
itkImageCF2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCF2_GetBufferPointer, None, itkImageCF2)
itkImageCF2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCF2_GetPixelContainer, None, itkImageCF2)
itkImageCF2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCF2_SetPixelContainer, None, itkImageCF2)
itkImageCF2.Graft = new_instancemethod(_itkImagePython.itkImageCF2_Graft, None, itkImageCF2)
itkImageCF2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCF2_GetPixelAccessor, None, itkImageCF2)
itkImageCF2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCF2_GetNeighborhoodAccessor, None, itkImageCF2)
itkImageCF2_swigregister = _itkImagePython.itkImageCF2_swigregister
itkImageCF2_swigregister(itkImageCF2)

def itkImageCF2___New_orig__() -> "itkImageCF2_Pointer":
    """itkImageCF2___New_orig__() -> itkImageCF2_Pointer"""
    return _itkImagePython.itkImageCF2___New_orig__()

def itkImageCF2_cast(obj: 'itkLightObject') -> "itkImageCF2 *":
    """itkImageCF2_cast(itkLightObject obj) -> itkImageCF2"""
    return _itkImagePython.itkImageCF2_cast(obj)

class itkImageCF3(itkImageBase3):
    """Proxy of C++ itkImageCF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCF3_Pointer":
        """__New_orig__() -> itkImageCF3_Pointer"""
        return _itkImagePython.itkImageCF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCF3_Pointer":
        """Clone(itkImageCF3 self) -> itkImageCF3_Pointer"""
        return _itkImagePython.itkImageCF3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCF3 self, bool initializePixels=False)
        Allocate(itkImageCF3 self)
        """
        return _itkImagePython.itkImageCF3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'stdcomplexF') -> "void":
        """FillBuffer(itkImageCF3 self, stdcomplexF value)"""
        return _itkImagePython.itkImageCF3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'stdcomplexF') -> "void":
        """SetPixel(itkImageCF3 self, itkIndex3 index, stdcomplexF value)"""
        return _itkImagePython.itkImageCF3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "stdcomplexF &":
        """
        GetPixel(itkImageCF3 self, itkIndex3 index) -> stdcomplexF
        GetPixel(itkImageCF3 self, itkIndex3 index) -> stdcomplexF
        """
        return _itkImagePython.itkImageCF3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "stdcomplexF const *":
        """
        GetBufferPointer(itkImageCF3 self) -> stdcomplexF
        GetBufferPointer(itkImageCF3 self) -> stdcomplexF
        """
        return _itkImagePython.itkImageCF3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,std::complex< float > > const *":
        """
        GetPixelContainer(itkImageCF3 self) -> itk::ImportImageContainer< unsigned long long,std::complex< float > >
        GetPixelContainer(itkImageCF3 self) -> itk::ImportImageContainer< unsigned long long,std::complex< float > > const *
        """
        return _itkImagePython.itkImageCF3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,std::complex< float > > *') -> "void":
        """SetPixelContainer(itkImageCF3 self, itk::ImportImageContainer< unsigned long long,std::complex< float > > * container)"""
        return _itkImagePython.itkImageCF3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCF3') -> "void":
        """Graft(itkImageCF3 self, itkImageCF3 data)"""
        return _itkImagePython.itkImageCF3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< std::complex< float > > const":
        """
        GetPixelAccessor(itkImageCF3 self) -> itk::DefaultPixelAccessor< std::complex< float > >
        GetPixelAccessor(itkImageCF3 self) -> itk::DefaultPixelAccessor< std::complex< float > > const
        """
        return _itkImagePython.itkImageCF3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageCF3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,3 > >
        GetNeighborhoodAccessor(itkImageCF3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,3 > > const
        """
        return _itkImagePython.itkImageCF3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCF3

    def cast(obj: 'itkLightObject') -> "itkImageCF3 *":
        """cast(itkLightObject obj) -> itkImageCF3"""
        return _itkImagePython.itkImageCF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCF3

        Create a new object of the class itkImageCF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCF3.Clone = new_instancemethod(_itkImagePython.itkImageCF3_Clone, None, itkImageCF3)
itkImageCF3.Allocate = new_instancemethod(_itkImagePython.itkImageCF3_Allocate, None, itkImageCF3)
itkImageCF3.FillBuffer = new_instancemethod(_itkImagePython.itkImageCF3_FillBuffer, None, itkImageCF3)
itkImageCF3.SetPixel = new_instancemethod(_itkImagePython.itkImageCF3_SetPixel, None, itkImageCF3)
itkImageCF3.GetPixel = new_instancemethod(_itkImagePython.itkImageCF3_GetPixel, None, itkImageCF3)
itkImageCF3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCF3_GetBufferPointer, None, itkImageCF3)
itkImageCF3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCF3_GetPixelContainer, None, itkImageCF3)
itkImageCF3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCF3_SetPixelContainer, None, itkImageCF3)
itkImageCF3.Graft = new_instancemethod(_itkImagePython.itkImageCF3_Graft, None, itkImageCF3)
itkImageCF3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCF3_GetPixelAccessor, None, itkImageCF3)
itkImageCF3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCF3_GetNeighborhoodAccessor, None, itkImageCF3)
itkImageCF3_swigregister = _itkImagePython.itkImageCF3_swigregister
itkImageCF3_swigregister(itkImageCF3)

def itkImageCF3___New_orig__() -> "itkImageCF3_Pointer":
    """itkImageCF3___New_orig__() -> itkImageCF3_Pointer"""
    return _itkImagePython.itkImageCF3___New_orig__()

def itkImageCF3_cast(obj: 'itkLightObject') -> "itkImageCF3 *":
    """itkImageCF3_cast(itkLightObject obj) -> itkImageCF3"""
    return _itkImagePython.itkImageCF3_cast(obj)

class itkImageCVD22(itkImageBase2):
    """Proxy of C++ itkImageCVD22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVD22_Pointer":
        """__New_orig__() -> itkImageCVD22_Pointer"""
        return _itkImagePython.itkImageCVD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVD22_Pointer":
        """Clone(itkImageCVD22 self) -> itkImageCVD22_Pointer"""
        return _itkImagePython.itkImageCVD22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVD22 self, bool initializePixels=False)
        Allocate(itkImageCVD22 self)
        """
        return _itkImagePython.itkImageCVD22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorD2') -> "void":
        """FillBuffer(itkImageCVD22 self, itkCovariantVectorD2 value)"""
        return _itkImagePython.itkImageCVD22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkCovariantVectorD2') -> "void":
        """SetPixel(itkImageCVD22 self, itkIndex2 index, itkCovariantVectorD2 value)"""
        return _itkImagePython.itkImageCVD22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorD2 &":
        """
        GetPixel(itkImageCVD22 self, itkIndex2 index) -> itkCovariantVectorD2
        GetPixel(itkImageCVD22 self, itkIndex2 index) -> itkCovariantVectorD2
        """
        return _itkImagePython.itkImageCVD22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorD2 const *":
        """
        GetBufferPointer(itkImageCVD22 self) -> itkCovariantVectorD2
        GetBufferPointer(itkImageCVD22 self) -> itkCovariantVectorD2
        """
        return _itkImagePython.itkImageCVD22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > const *":
        """
        GetPixelContainer(itkImageCVD22 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > >
        GetPixelContainer(itkImageCVD22 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > const *
        """
        return _itkImagePython.itkImageCVD22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > *') -> "void":
        """SetPixelContainer(itkImageCVD22 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > * container)"""
        return _itkImagePython.itkImageCVD22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVD22') -> "void":
        """Graft(itkImageCVD22 self, itkImageCVD22 data)"""
        return _itkImagePython.itkImageCVD22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > > const":
        """
        GetPixelAccessor(itkImageCVD22 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > >
        GetPixelAccessor(itkImageCVD22 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > > const
        """
        return _itkImagePython.itkImageCVD22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,2 > >
        GetNeighborhoodAccessor(itkImageCVD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,2 > > const
        """
        return _itkImagePython.itkImageCVD22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD22

    def cast(obj: 'itkLightObject') -> "itkImageCVD22 *":
        """cast(itkLightObject obj) -> itkImageCVD22"""
        return _itkImagePython.itkImageCVD22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCVD22

        Create a new object of the class itkImageCVD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD22.Clone = new_instancemethod(_itkImagePython.itkImageCVD22_Clone, None, itkImageCVD22)
itkImageCVD22.Allocate = new_instancemethod(_itkImagePython.itkImageCVD22_Allocate, None, itkImageCVD22)
itkImageCVD22.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD22_FillBuffer, None, itkImageCVD22)
itkImageCVD22.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD22_SetPixel, None, itkImageCVD22)
itkImageCVD22.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD22_GetPixel, None, itkImageCVD22)
itkImageCVD22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD22_GetBufferPointer, None, itkImageCVD22)
itkImageCVD22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD22_GetPixelContainer, None, itkImageCVD22)
itkImageCVD22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD22_SetPixelContainer, None, itkImageCVD22)
itkImageCVD22.Graft = new_instancemethod(_itkImagePython.itkImageCVD22_Graft, None, itkImageCVD22)
itkImageCVD22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD22_GetPixelAccessor, None, itkImageCVD22)
itkImageCVD22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD22_GetNeighborhoodAccessor, None, itkImageCVD22)
itkImageCVD22_swigregister = _itkImagePython.itkImageCVD22_swigregister
itkImageCVD22_swigregister(itkImageCVD22)

def itkImageCVD22___New_orig__() -> "itkImageCVD22_Pointer":
    """itkImageCVD22___New_orig__() -> itkImageCVD22_Pointer"""
    return _itkImagePython.itkImageCVD22___New_orig__()

def itkImageCVD22_cast(obj: 'itkLightObject') -> "itkImageCVD22 *":
    """itkImageCVD22_cast(itkLightObject obj) -> itkImageCVD22"""
    return _itkImagePython.itkImageCVD22_cast(obj)

class itkImageCVD23(itkImageBase3):
    """Proxy of C++ itkImageCVD23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVD23_Pointer":
        """__New_orig__() -> itkImageCVD23_Pointer"""
        return _itkImagePython.itkImageCVD23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVD23_Pointer":
        """Clone(itkImageCVD23 self) -> itkImageCVD23_Pointer"""
        return _itkImagePython.itkImageCVD23_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVD23 self, bool initializePixels=False)
        Allocate(itkImageCVD23 self)
        """
        return _itkImagePython.itkImageCVD23_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorD2') -> "void":
        """FillBuffer(itkImageCVD23 self, itkCovariantVectorD2 value)"""
        return _itkImagePython.itkImageCVD23_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkCovariantVectorD2') -> "void":
        """SetPixel(itkImageCVD23 self, itkIndex3 index, itkCovariantVectorD2 value)"""
        return _itkImagePython.itkImageCVD23_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorD2 &":
        """
        GetPixel(itkImageCVD23 self, itkIndex3 index) -> itkCovariantVectorD2
        GetPixel(itkImageCVD23 self, itkIndex3 index) -> itkCovariantVectorD2
        """
        return _itkImagePython.itkImageCVD23_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorD2 const *":
        """
        GetBufferPointer(itkImageCVD23 self) -> itkCovariantVectorD2
        GetBufferPointer(itkImageCVD23 self) -> itkCovariantVectorD2
        """
        return _itkImagePython.itkImageCVD23_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > const *":
        """
        GetPixelContainer(itkImageCVD23 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > >
        GetPixelContainer(itkImageCVD23 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > const *
        """
        return _itkImagePython.itkImageCVD23_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > *') -> "void":
        """SetPixelContainer(itkImageCVD23 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > * container)"""
        return _itkImagePython.itkImageCVD23_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVD23') -> "void":
        """Graft(itkImageCVD23 self, itkImageCVD23 data)"""
        return _itkImagePython.itkImageCVD23_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > > const":
        """
        GetPixelAccessor(itkImageCVD23 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > >
        GetPixelAccessor(itkImageCVD23 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > > const
        """
        return _itkImagePython.itkImageCVD23_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVD23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,3 > >
        GetNeighborhoodAccessor(itkImageCVD23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,3 > > const
        """
        return _itkImagePython.itkImageCVD23_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD23

    def cast(obj: 'itkLightObject') -> "itkImageCVD23 *":
        """cast(itkLightObject obj) -> itkImageCVD23"""
        return _itkImagePython.itkImageCVD23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCVD23

        Create a new object of the class itkImageCVD23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD23.Clone = new_instancemethod(_itkImagePython.itkImageCVD23_Clone, None, itkImageCVD23)
itkImageCVD23.Allocate = new_instancemethod(_itkImagePython.itkImageCVD23_Allocate, None, itkImageCVD23)
itkImageCVD23.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD23_FillBuffer, None, itkImageCVD23)
itkImageCVD23.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD23_SetPixel, None, itkImageCVD23)
itkImageCVD23.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD23_GetPixel, None, itkImageCVD23)
itkImageCVD23.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD23_GetBufferPointer, None, itkImageCVD23)
itkImageCVD23.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD23_GetPixelContainer, None, itkImageCVD23)
itkImageCVD23.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD23_SetPixelContainer, None, itkImageCVD23)
itkImageCVD23.Graft = new_instancemethod(_itkImagePython.itkImageCVD23_Graft, None, itkImageCVD23)
itkImageCVD23.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD23_GetPixelAccessor, None, itkImageCVD23)
itkImageCVD23.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD23_GetNeighborhoodAccessor, None, itkImageCVD23)
itkImageCVD23_swigregister = _itkImagePython.itkImageCVD23_swigregister
itkImageCVD23_swigregister(itkImageCVD23)

def itkImageCVD23___New_orig__() -> "itkImageCVD23_Pointer":
    """itkImageCVD23___New_orig__() -> itkImageCVD23_Pointer"""
    return _itkImagePython.itkImageCVD23___New_orig__()

def itkImageCVD23_cast(obj: 'itkLightObject') -> "itkImageCVD23 *":
    """itkImageCVD23_cast(itkLightObject obj) -> itkImageCVD23"""
    return _itkImagePython.itkImageCVD23_cast(obj)

class itkImageCVD32(itkImageBase2):
    """Proxy of C++ itkImageCVD32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVD32_Pointer":
        """__New_orig__() -> itkImageCVD32_Pointer"""
        return _itkImagePython.itkImageCVD32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVD32_Pointer":
        """Clone(itkImageCVD32 self) -> itkImageCVD32_Pointer"""
        return _itkImagePython.itkImageCVD32_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVD32 self, bool initializePixels=False)
        Allocate(itkImageCVD32 self)
        """
        return _itkImagePython.itkImageCVD32_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorD3') -> "void":
        """FillBuffer(itkImageCVD32 self, itkCovariantVectorD3 value)"""
        return _itkImagePython.itkImageCVD32_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkCovariantVectorD3') -> "void":
        """SetPixel(itkImageCVD32 self, itkIndex2 index, itkCovariantVectorD3 value)"""
        return _itkImagePython.itkImageCVD32_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorD3 &":
        """
        GetPixel(itkImageCVD32 self, itkIndex2 index) -> itkCovariantVectorD3
        GetPixel(itkImageCVD32 self, itkIndex2 index) -> itkCovariantVectorD3
        """
        return _itkImagePython.itkImageCVD32_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorD3 const *":
        """
        GetBufferPointer(itkImageCVD32 self) -> itkCovariantVectorD3
        GetBufferPointer(itkImageCVD32 self) -> itkCovariantVectorD3
        """
        return _itkImagePython.itkImageCVD32_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > > const *":
        """
        GetPixelContainer(itkImageCVD32 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > >
        GetPixelContainer(itkImageCVD32 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > > const *
        """
        return _itkImagePython.itkImageCVD32_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > > *') -> "void":
        """SetPixelContainer(itkImageCVD32 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > > * container)"""
        return _itkImagePython.itkImageCVD32_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVD32') -> "void":
        """Graft(itkImageCVD32 self, itkImageCVD32 data)"""
        return _itkImagePython.itkImageCVD32_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > > const":
        """
        GetPixelAccessor(itkImageCVD32 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > >
        GetPixelAccessor(itkImageCVD32 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > > const
        """
        return _itkImagePython.itkImageCVD32_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVD32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,2 > >
        GetNeighborhoodAccessor(itkImageCVD32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,2 > > const
        """
        return _itkImagePython.itkImageCVD32_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD32

    def cast(obj: 'itkLightObject') -> "itkImageCVD32 *":
        """cast(itkLightObject obj) -> itkImageCVD32"""
        return _itkImagePython.itkImageCVD32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCVD32

        Create a new object of the class itkImageCVD32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD32.Clone = new_instancemethod(_itkImagePython.itkImageCVD32_Clone, None, itkImageCVD32)
itkImageCVD32.Allocate = new_instancemethod(_itkImagePython.itkImageCVD32_Allocate, None, itkImageCVD32)
itkImageCVD32.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD32_FillBuffer, None, itkImageCVD32)
itkImageCVD32.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD32_SetPixel, None, itkImageCVD32)
itkImageCVD32.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD32_GetPixel, None, itkImageCVD32)
itkImageCVD32.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD32_GetBufferPointer, None, itkImageCVD32)
itkImageCVD32.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD32_GetPixelContainer, None, itkImageCVD32)
itkImageCVD32.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD32_SetPixelContainer, None, itkImageCVD32)
itkImageCVD32.Graft = new_instancemethod(_itkImagePython.itkImageCVD32_Graft, None, itkImageCVD32)
itkImageCVD32.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD32_GetPixelAccessor, None, itkImageCVD32)
itkImageCVD32.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD32_GetNeighborhoodAccessor, None, itkImageCVD32)
itkImageCVD32_swigregister = _itkImagePython.itkImageCVD32_swigregister
itkImageCVD32_swigregister(itkImageCVD32)

def itkImageCVD32___New_orig__() -> "itkImageCVD32_Pointer":
    """itkImageCVD32___New_orig__() -> itkImageCVD32_Pointer"""
    return _itkImagePython.itkImageCVD32___New_orig__()

def itkImageCVD32_cast(obj: 'itkLightObject') -> "itkImageCVD32 *":
    """itkImageCVD32_cast(itkLightObject obj) -> itkImageCVD32"""
    return _itkImagePython.itkImageCVD32_cast(obj)

class itkImageCVD33(itkImageBase3):
    """Proxy of C++ itkImageCVD33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVD33_Pointer":
        """__New_orig__() -> itkImageCVD33_Pointer"""
        return _itkImagePython.itkImageCVD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVD33_Pointer":
        """Clone(itkImageCVD33 self) -> itkImageCVD33_Pointer"""
        return _itkImagePython.itkImageCVD33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVD33 self, bool initializePixels=False)
        Allocate(itkImageCVD33 self)
        """
        return _itkImagePython.itkImageCVD33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorD3') -> "void":
        """FillBuffer(itkImageCVD33 self, itkCovariantVectorD3 value)"""
        return _itkImagePython.itkImageCVD33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkCovariantVectorD3') -> "void":
        """SetPixel(itkImageCVD33 self, itkIndex3 index, itkCovariantVectorD3 value)"""
        return _itkImagePython.itkImageCVD33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorD3 &":
        """
        GetPixel(itkImageCVD33 self, itkIndex3 index) -> itkCovariantVectorD3
        GetPixel(itkImageCVD33 self, itkIndex3 index) -> itkCovariantVectorD3
        """
        return _itkImagePython.itkImageCVD33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorD3 const *":
        """
        GetBufferPointer(itkImageCVD33 self) -> itkCovariantVectorD3
        GetBufferPointer(itkImageCVD33 self) -> itkCovariantVectorD3
        """
        return _itkImagePython.itkImageCVD33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > > const *":
        """
        GetPixelContainer(itkImageCVD33 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > >
        GetPixelContainer(itkImageCVD33 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > > const *
        """
        return _itkImagePython.itkImageCVD33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > > *') -> "void":
        """SetPixelContainer(itkImageCVD33 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > > * container)"""
        return _itkImagePython.itkImageCVD33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVD33') -> "void":
        """Graft(itkImageCVD33 self, itkImageCVD33 data)"""
        return _itkImagePython.itkImageCVD33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > > const":
        """
        GetPixelAccessor(itkImageCVD33 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > >
        GetPixelAccessor(itkImageCVD33 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > > const
        """
        return _itkImagePython.itkImageCVD33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,3 > >
        GetNeighborhoodAccessor(itkImageCVD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,3 > > const
        """
        return _itkImagePython.itkImageCVD33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD33

    def cast(obj: 'itkLightObject') -> "itkImageCVD33 *":
        """cast(itkLightObject obj) -> itkImageCVD33"""
        return _itkImagePython.itkImageCVD33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCVD33

        Create a new object of the class itkImageCVD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD33.Clone = new_instancemethod(_itkImagePython.itkImageCVD33_Clone, None, itkImageCVD33)
itkImageCVD33.Allocate = new_instancemethod(_itkImagePython.itkImageCVD33_Allocate, None, itkImageCVD33)
itkImageCVD33.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD33_FillBuffer, None, itkImageCVD33)
itkImageCVD33.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD33_SetPixel, None, itkImageCVD33)
itkImageCVD33.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD33_GetPixel, None, itkImageCVD33)
itkImageCVD33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD33_GetBufferPointer, None, itkImageCVD33)
itkImageCVD33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD33_GetPixelContainer, None, itkImageCVD33)
itkImageCVD33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD33_SetPixelContainer, None, itkImageCVD33)
itkImageCVD33.Graft = new_instancemethod(_itkImagePython.itkImageCVD33_Graft, None, itkImageCVD33)
itkImageCVD33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD33_GetPixelAccessor, None, itkImageCVD33)
itkImageCVD33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD33_GetNeighborhoodAccessor, None, itkImageCVD33)
itkImageCVD33_swigregister = _itkImagePython.itkImageCVD33_swigregister
itkImageCVD33_swigregister(itkImageCVD33)

def itkImageCVD33___New_orig__() -> "itkImageCVD33_Pointer":
    """itkImageCVD33___New_orig__() -> itkImageCVD33_Pointer"""
    return _itkImagePython.itkImageCVD33___New_orig__()

def itkImageCVD33_cast(obj: 'itkLightObject') -> "itkImageCVD33 *":
    """itkImageCVD33_cast(itkLightObject obj) -> itkImageCVD33"""
    return _itkImagePython.itkImageCVD33_cast(obj)

class itkImageCVD42(itkImageBase2):
    """Proxy of C++ itkImageCVD42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVD42_Pointer":
        """__New_orig__() -> itkImageCVD42_Pointer"""
        return _itkImagePython.itkImageCVD42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVD42_Pointer":
        """Clone(itkImageCVD42 self) -> itkImageCVD42_Pointer"""
        return _itkImagePython.itkImageCVD42_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVD42 self, bool initializePixels=False)
        Allocate(itkImageCVD42 self)
        """
        return _itkImagePython.itkImageCVD42_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorD4') -> "void":
        """FillBuffer(itkImageCVD42 self, itkCovariantVectorD4 value)"""
        return _itkImagePython.itkImageCVD42_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkCovariantVectorD4') -> "void":
        """SetPixel(itkImageCVD42 self, itkIndex2 index, itkCovariantVectorD4 value)"""
        return _itkImagePython.itkImageCVD42_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorD4 &":
        """
        GetPixel(itkImageCVD42 self, itkIndex2 index) -> itkCovariantVectorD4
        GetPixel(itkImageCVD42 self, itkIndex2 index) -> itkCovariantVectorD4
        """
        return _itkImagePython.itkImageCVD42_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorD4 const *":
        """
        GetBufferPointer(itkImageCVD42 self) -> itkCovariantVectorD4
        GetBufferPointer(itkImageCVD42 self) -> itkCovariantVectorD4
        """
        return _itkImagePython.itkImageCVD42_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > const *":
        """
        GetPixelContainer(itkImageCVD42 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > >
        GetPixelContainer(itkImageCVD42 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > const *
        """
        return _itkImagePython.itkImageCVD42_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > *') -> "void":
        """SetPixelContainer(itkImageCVD42 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > * container)"""
        return _itkImagePython.itkImageCVD42_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVD42') -> "void":
        """Graft(itkImageCVD42 self, itkImageCVD42 data)"""
        return _itkImagePython.itkImageCVD42_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > > const":
        """
        GetPixelAccessor(itkImageCVD42 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > >
        GetPixelAccessor(itkImageCVD42 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > > const
        """
        return _itkImagePython.itkImageCVD42_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVD42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,2 > >
        GetNeighborhoodAccessor(itkImageCVD42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,2 > > const
        """
        return _itkImagePython.itkImageCVD42_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD42

    def cast(obj: 'itkLightObject') -> "itkImageCVD42 *":
        """cast(itkLightObject obj) -> itkImageCVD42"""
        return _itkImagePython.itkImageCVD42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCVD42

        Create a new object of the class itkImageCVD42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD42.Clone = new_instancemethod(_itkImagePython.itkImageCVD42_Clone, None, itkImageCVD42)
itkImageCVD42.Allocate = new_instancemethod(_itkImagePython.itkImageCVD42_Allocate, None, itkImageCVD42)
itkImageCVD42.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD42_FillBuffer, None, itkImageCVD42)
itkImageCVD42.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD42_SetPixel, None, itkImageCVD42)
itkImageCVD42.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD42_GetPixel, None, itkImageCVD42)
itkImageCVD42.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD42_GetBufferPointer, None, itkImageCVD42)
itkImageCVD42.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD42_GetPixelContainer, None, itkImageCVD42)
itkImageCVD42.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD42_SetPixelContainer, None, itkImageCVD42)
itkImageCVD42.Graft = new_instancemethod(_itkImagePython.itkImageCVD42_Graft, None, itkImageCVD42)
itkImageCVD42.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD42_GetPixelAccessor, None, itkImageCVD42)
itkImageCVD42.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD42_GetNeighborhoodAccessor, None, itkImageCVD42)
itkImageCVD42_swigregister = _itkImagePython.itkImageCVD42_swigregister
itkImageCVD42_swigregister(itkImageCVD42)

def itkImageCVD42___New_orig__() -> "itkImageCVD42_Pointer":
    """itkImageCVD42___New_orig__() -> itkImageCVD42_Pointer"""
    return _itkImagePython.itkImageCVD42___New_orig__()

def itkImageCVD42_cast(obj: 'itkLightObject') -> "itkImageCVD42 *":
    """itkImageCVD42_cast(itkLightObject obj) -> itkImageCVD42"""
    return _itkImagePython.itkImageCVD42_cast(obj)

class itkImageCVD43(itkImageBase3):
    """Proxy of C++ itkImageCVD43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVD43_Pointer":
        """__New_orig__() -> itkImageCVD43_Pointer"""
        return _itkImagePython.itkImageCVD43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVD43_Pointer":
        """Clone(itkImageCVD43 self) -> itkImageCVD43_Pointer"""
        return _itkImagePython.itkImageCVD43_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVD43 self, bool initializePixels=False)
        Allocate(itkImageCVD43 self)
        """
        return _itkImagePython.itkImageCVD43_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorD4') -> "void":
        """FillBuffer(itkImageCVD43 self, itkCovariantVectorD4 value)"""
        return _itkImagePython.itkImageCVD43_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkCovariantVectorD4') -> "void":
        """SetPixel(itkImageCVD43 self, itkIndex3 index, itkCovariantVectorD4 value)"""
        return _itkImagePython.itkImageCVD43_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorD4 &":
        """
        GetPixel(itkImageCVD43 self, itkIndex3 index) -> itkCovariantVectorD4
        GetPixel(itkImageCVD43 self, itkIndex3 index) -> itkCovariantVectorD4
        """
        return _itkImagePython.itkImageCVD43_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorD4 const *":
        """
        GetBufferPointer(itkImageCVD43 self) -> itkCovariantVectorD4
        GetBufferPointer(itkImageCVD43 self) -> itkCovariantVectorD4
        """
        return _itkImagePython.itkImageCVD43_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > const *":
        """
        GetPixelContainer(itkImageCVD43 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > >
        GetPixelContainer(itkImageCVD43 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > const *
        """
        return _itkImagePython.itkImageCVD43_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > *') -> "void":
        """SetPixelContainer(itkImageCVD43 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > * container)"""
        return _itkImagePython.itkImageCVD43_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVD43') -> "void":
        """Graft(itkImageCVD43 self, itkImageCVD43 data)"""
        return _itkImagePython.itkImageCVD43_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > > const":
        """
        GetPixelAccessor(itkImageCVD43 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > >
        GetPixelAccessor(itkImageCVD43 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > > const
        """
        return _itkImagePython.itkImageCVD43_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVD43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,3 > >
        GetNeighborhoodAccessor(itkImageCVD43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,3 > > const
        """
        return _itkImagePython.itkImageCVD43_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD43

    def cast(obj: 'itkLightObject') -> "itkImageCVD43 *":
        """cast(itkLightObject obj) -> itkImageCVD43"""
        return _itkImagePython.itkImageCVD43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCVD43

        Create a new object of the class itkImageCVD43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD43.Clone = new_instancemethod(_itkImagePython.itkImageCVD43_Clone, None, itkImageCVD43)
itkImageCVD43.Allocate = new_instancemethod(_itkImagePython.itkImageCVD43_Allocate, None, itkImageCVD43)
itkImageCVD43.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD43_FillBuffer, None, itkImageCVD43)
itkImageCVD43.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD43_SetPixel, None, itkImageCVD43)
itkImageCVD43.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD43_GetPixel, None, itkImageCVD43)
itkImageCVD43.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD43_GetBufferPointer, None, itkImageCVD43)
itkImageCVD43.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD43_GetPixelContainer, None, itkImageCVD43)
itkImageCVD43.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD43_SetPixelContainer, None, itkImageCVD43)
itkImageCVD43.Graft = new_instancemethod(_itkImagePython.itkImageCVD43_Graft, None, itkImageCVD43)
itkImageCVD43.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD43_GetPixelAccessor, None, itkImageCVD43)
itkImageCVD43.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD43_GetNeighborhoodAccessor, None, itkImageCVD43)
itkImageCVD43_swigregister = _itkImagePython.itkImageCVD43_swigregister
itkImageCVD43_swigregister(itkImageCVD43)

def itkImageCVD43___New_orig__() -> "itkImageCVD43_Pointer":
    """itkImageCVD43___New_orig__() -> itkImageCVD43_Pointer"""
    return _itkImagePython.itkImageCVD43___New_orig__()

def itkImageCVD43_cast(obj: 'itkLightObject') -> "itkImageCVD43 *":
    """itkImageCVD43_cast(itkLightObject obj) -> itkImageCVD43"""
    return _itkImagePython.itkImageCVD43_cast(obj)

class itkImageCVF22(itkImageBase2):
    """Proxy of C++ itkImageCVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVF22_Pointer":
        """__New_orig__() -> itkImageCVF22_Pointer"""
        return _itkImagePython.itkImageCVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVF22_Pointer":
        """Clone(itkImageCVF22 self) -> itkImageCVF22_Pointer"""
        return _itkImagePython.itkImageCVF22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVF22 self, bool initializePixels=False)
        Allocate(itkImageCVF22 self)
        """
        return _itkImagePython.itkImageCVF22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorF2') -> "void":
        """FillBuffer(itkImageCVF22 self, itkCovariantVectorF2 value)"""
        return _itkImagePython.itkImageCVF22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkCovariantVectorF2') -> "void":
        """SetPixel(itkImageCVF22 self, itkIndex2 index, itkCovariantVectorF2 value)"""
        return _itkImagePython.itkImageCVF22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF2 &":
        """
        GetPixel(itkImageCVF22 self, itkIndex2 index) -> itkCovariantVectorF2
        GetPixel(itkImageCVF22 self, itkIndex2 index) -> itkCovariantVectorF2
        """
        return _itkImagePython.itkImageCVF22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF2 const *":
        """
        GetBufferPointer(itkImageCVF22 self) -> itkCovariantVectorF2
        GetBufferPointer(itkImageCVF22 self) -> itkCovariantVectorF2
        """
        return _itkImagePython.itkImageCVF22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > const *":
        """
        GetPixelContainer(itkImageCVF22 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > >
        GetPixelContainer(itkImageCVF22 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > const *
        """
        return _itkImagePython.itkImageCVF22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > *') -> "void":
        """SetPixelContainer(itkImageCVF22 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > * container)"""
        return _itkImagePython.itkImageCVF22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVF22') -> "void":
        """Graft(itkImageCVF22 self, itkImageCVF22 data)"""
        return _itkImagePython.itkImageCVF22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const":
        """
        GetPixelAccessor(itkImageCVF22 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(itkImageCVF22 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const
        """
        return _itkImagePython.itkImageCVF22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,2 > >
        GetNeighborhoodAccessor(itkImageCVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,2 > > const
        """
        return _itkImagePython.itkImageCVF22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF22

    def cast(obj: 'itkLightObject') -> "itkImageCVF22 *":
        """cast(itkLightObject obj) -> itkImageCVF22"""
        return _itkImagePython.itkImageCVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCVF22

        Create a new object of the class itkImageCVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF22.Clone = new_instancemethod(_itkImagePython.itkImageCVF22_Clone, None, itkImageCVF22)
itkImageCVF22.Allocate = new_instancemethod(_itkImagePython.itkImageCVF22_Allocate, None, itkImageCVF22)
itkImageCVF22.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF22_FillBuffer, None, itkImageCVF22)
itkImageCVF22.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF22_SetPixel, None, itkImageCVF22)
itkImageCVF22.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF22_GetPixel, None, itkImageCVF22)
itkImageCVF22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF22_GetBufferPointer, None, itkImageCVF22)
itkImageCVF22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF22_GetPixelContainer, None, itkImageCVF22)
itkImageCVF22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF22_SetPixelContainer, None, itkImageCVF22)
itkImageCVF22.Graft = new_instancemethod(_itkImagePython.itkImageCVF22_Graft, None, itkImageCVF22)
itkImageCVF22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF22_GetPixelAccessor, None, itkImageCVF22)
itkImageCVF22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF22_GetNeighborhoodAccessor, None, itkImageCVF22)
itkImageCVF22_swigregister = _itkImagePython.itkImageCVF22_swigregister
itkImageCVF22_swigregister(itkImageCVF22)

def itkImageCVF22___New_orig__() -> "itkImageCVF22_Pointer":
    """itkImageCVF22___New_orig__() -> itkImageCVF22_Pointer"""
    return _itkImagePython.itkImageCVF22___New_orig__()

def itkImageCVF22_cast(obj: 'itkLightObject') -> "itkImageCVF22 *":
    """itkImageCVF22_cast(itkLightObject obj) -> itkImageCVF22"""
    return _itkImagePython.itkImageCVF22_cast(obj)

class itkImageCVF23(itkImageBase3):
    """Proxy of C++ itkImageCVF23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVF23_Pointer":
        """__New_orig__() -> itkImageCVF23_Pointer"""
        return _itkImagePython.itkImageCVF23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVF23_Pointer":
        """Clone(itkImageCVF23 self) -> itkImageCVF23_Pointer"""
        return _itkImagePython.itkImageCVF23_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVF23 self, bool initializePixels=False)
        Allocate(itkImageCVF23 self)
        """
        return _itkImagePython.itkImageCVF23_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorF2') -> "void":
        """FillBuffer(itkImageCVF23 self, itkCovariantVectorF2 value)"""
        return _itkImagePython.itkImageCVF23_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkCovariantVectorF2') -> "void":
        """SetPixel(itkImageCVF23 self, itkIndex3 index, itkCovariantVectorF2 value)"""
        return _itkImagePython.itkImageCVF23_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF2 &":
        """
        GetPixel(itkImageCVF23 self, itkIndex3 index) -> itkCovariantVectorF2
        GetPixel(itkImageCVF23 self, itkIndex3 index) -> itkCovariantVectorF2
        """
        return _itkImagePython.itkImageCVF23_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF2 const *":
        """
        GetBufferPointer(itkImageCVF23 self) -> itkCovariantVectorF2
        GetBufferPointer(itkImageCVF23 self) -> itkCovariantVectorF2
        """
        return _itkImagePython.itkImageCVF23_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > const *":
        """
        GetPixelContainer(itkImageCVF23 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > >
        GetPixelContainer(itkImageCVF23 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > const *
        """
        return _itkImagePython.itkImageCVF23_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > *') -> "void":
        """SetPixelContainer(itkImageCVF23 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > * container)"""
        return _itkImagePython.itkImageCVF23_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVF23') -> "void":
        """Graft(itkImageCVF23 self, itkImageCVF23 data)"""
        return _itkImagePython.itkImageCVF23_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const":
        """
        GetPixelAccessor(itkImageCVF23 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(itkImageCVF23 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const
        """
        return _itkImagePython.itkImageCVF23_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVF23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,3 > >
        GetNeighborhoodAccessor(itkImageCVF23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,3 > > const
        """
        return _itkImagePython.itkImageCVF23_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF23

    def cast(obj: 'itkLightObject') -> "itkImageCVF23 *":
        """cast(itkLightObject obj) -> itkImageCVF23"""
        return _itkImagePython.itkImageCVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCVF23

        Create a new object of the class itkImageCVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF23.Clone = new_instancemethod(_itkImagePython.itkImageCVF23_Clone, None, itkImageCVF23)
itkImageCVF23.Allocate = new_instancemethod(_itkImagePython.itkImageCVF23_Allocate, None, itkImageCVF23)
itkImageCVF23.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF23_FillBuffer, None, itkImageCVF23)
itkImageCVF23.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF23_SetPixel, None, itkImageCVF23)
itkImageCVF23.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF23_GetPixel, None, itkImageCVF23)
itkImageCVF23.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF23_GetBufferPointer, None, itkImageCVF23)
itkImageCVF23.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF23_GetPixelContainer, None, itkImageCVF23)
itkImageCVF23.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF23_SetPixelContainer, None, itkImageCVF23)
itkImageCVF23.Graft = new_instancemethod(_itkImagePython.itkImageCVF23_Graft, None, itkImageCVF23)
itkImageCVF23.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF23_GetPixelAccessor, None, itkImageCVF23)
itkImageCVF23.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF23_GetNeighborhoodAccessor, None, itkImageCVF23)
itkImageCVF23_swigregister = _itkImagePython.itkImageCVF23_swigregister
itkImageCVF23_swigregister(itkImageCVF23)

def itkImageCVF23___New_orig__() -> "itkImageCVF23_Pointer":
    """itkImageCVF23___New_orig__() -> itkImageCVF23_Pointer"""
    return _itkImagePython.itkImageCVF23___New_orig__()

def itkImageCVF23_cast(obj: 'itkLightObject') -> "itkImageCVF23 *":
    """itkImageCVF23_cast(itkLightObject obj) -> itkImageCVF23"""
    return _itkImagePython.itkImageCVF23_cast(obj)

class itkImageCVF32(itkImageBase2):
    """Proxy of C++ itkImageCVF32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVF32_Pointer":
        """__New_orig__() -> itkImageCVF32_Pointer"""
        return _itkImagePython.itkImageCVF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVF32_Pointer":
        """Clone(itkImageCVF32 self) -> itkImageCVF32_Pointer"""
        return _itkImagePython.itkImageCVF32_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVF32 self, bool initializePixels=False)
        Allocate(itkImageCVF32 self)
        """
        return _itkImagePython.itkImageCVF32_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorF3') -> "void":
        """FillBuffer(itkImageCVF32 self, itkCovariantVectorF3 value)"""
        return _itkImagePython.itkImageCVF32_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkCovariantVectorF3') -> "void":
        """SetPixel(itkImageCVF32 self, itkIndex2 index, itkCovariantVectorF3 value)"""
        return _itkImagePython.itkImageCVF32_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF3 &":
        """
        GetPixel(itkImageCVF32 self, itkIndex2 index) -> itkCovariantVectorF3
        GetPixel(itkImageCVF32 self, itkIndex2 index) -> itkCovariantVectorF3
        """
        return _itkImagePython.itkImageCVF32_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF3 const *":
        """
        GetBufferPointer(itkImageCVF32 self) -> itkCovariantVectorF3
        GetBufferPointer(itkImageCVF32 self) -> itkCovariantVectorF3
        """
        return _itkImagePython.itkImageCVF32_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > > const *":
        """
        GetPixelContainer(itkImageCVF32 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > >
        GetPixelContainer(itkImageCVF32 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > > const *
        """
        return _itkImagePython.itkImageCVF32_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > > *') -> "void":
        """SetPixelContainer(itkImageCVF32 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > > * container)"""
        return _itkImagePython.itkImageCVF32_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVF32') -> "void":
        """Graft(itkImageCVF32 self, itkImageCVF32 data)"""
        return _itkImagePython.itkImageCVF32_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const":
        """
        GetPixelAccessor(itkImageCVF32 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > >
        GetPixelAccessor(itkImageCVF32 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const
        """
        return _itkImagePython.itkImageCVF32_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVF32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,2 > >
        GetNeighborhoodAccessor(itkImageCVF32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,2 > > const
        """
        return _itkImagePython.itkImageCVF32_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF32

    def cast(obj: 'itkLightObject') -> "itkImageCVF32 *":
        """cast(itkLightObject obj) -> itkImageCVF32"""
        return _itkImagePython.itkImageCVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCVF32

        Create a new object of the class itkImageCVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF32.Clone = new_instancemethod(_itkImagePython.itkImageCVF32_Clone, None, itkImageCVF32)
itkImageCVF32.Allocate = new_instancemethod(_itkImagePython.itkImageCVF32_Allocate, None, itkImageCVF32)
itkImageCVF32.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF32_FillBuffer, None, itkImageCVF32)
itkImageCVF32.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF32_SetPixel, None, itkImageCVF32)
itkImageCVF32.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF32_GetPixel, None, itkImageCVF32)
itkImageCVF32.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF32_GetBufferPointer, None, itkImageCVF32)
itkImageCVF32.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF32_GetPixelContainer, None, itkImageCVF32)
itkImageCVF32.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF32_SetPixelContainer, None, itkImageCVF32)
itkImageCVF32.Graft = new_instancemethod(_itkImagePython.itkImageCVF32_Graft, None, itkImageCVF32)
itkImageCVF32.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF32_GetPixelAccessor, None, itkImageCVF32)
itkImageCVF32.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF32_GetNeighborhoodAccessor, None, itkImageCVF32)
itkImageCVF32_swigregister = _itkImagePython.itkImageCVF32_swigregister
itkImageCVF32_swigregister(itkImageCVF32)

def itkImageCVF32___New_orig__() -> "itkImageCVF32_Pointer":
    """itkImageCVF32___New_orig__() -> itkImageCVF32_Pointer"""
    return _itkImagePython.itkImageCVF32___New_orig__()

def itkImageCVF32_cast(obj: 'itkLightObject') -> "itkImageCVF32 *":
    """itkImageCVF32_cast(itkLightObject obj) -> itkImageCVF32"""
    return _itkImagePython.itkImageCVF32_cast(obj)

class itkImageCVF33(itkImageBase3):
    """Proxy of C++ itkImageCVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVF33_Pointer":
        """__New_orig__() -> itkImageCVF33_Pointer"""
        return _itkImagePython.itkImageCVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVF33_Pointer":
        """Clone(itkImageCVF33 self) -> itkImageCVF33_Pointer"""
        return _itkImagePython.itkImageCVF33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVF33 self, bool initializePixels=False)
        Allocate(itkImageCVF33 self)
        """
        return _itkImagePython.itkImageCVF33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorF3') -> "void":
        """FillBuffer(itkImageCVF33 self, itkCovariantVectorF3 value)"""
        return _itkImagePython.itkImageCVF33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkCovariantVectorF3') -> "void":
        """SetPixel(itkImageCVF33 self, itkIndex3 index, itkCovariantVectorF3 value)"""
        return _itkImagePython.itkImageCVF33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF3 &":
        """
        GetPixel(itkImageCVF33 self, itkIndex3 index) -> itkCovariantVectorF3
        GetPixel(itkImageCVF33 self, itkIndex3 index) -> itkCovariantVectorF3
        """
        return _itkImagePython.itkImageCVF33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF3 const *":
        """
        GetBufferPointer(itkImageCVF33 self) -> itkCovariantVectorF3
        GetBufferPointer(itkImageCVF33 self) -> itkCovariantVectorF3
        """
        return _itkImagePython.itkImageCVF33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > > const *":
        """
        GetPixelContainer(itkImageCVF33 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > >
        GetPixelContainer(itkImageCVF33 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > > const *
        """
        return _itkImagePython.itkImageCVF33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > > *') -> "void":
        """SetPixelContainer(itkImageCVF33 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > > * container)"""
        return _itkImagePython.itkImageCVF33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVF33') -> "void":
        """Graft(itkImageCVF33 self, itkImageCVF33 data)"""
        return _itkImagePython.itkImageCVF33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const":
        """
        GetPixelAccessor(itkImageCVF33 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > >
        GetPixelAccessor(itkImageCVF33 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const
        """
        return _itkImagePython.itkImageCVF33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,3 > >
        GetNeighborhoodAccessor(itkImageCVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,3 > > const
        """
        return _itkImagePython.itkImageCVF33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF33

    def cast(obj: 'itkLightObject') -> "itkImageCVF33 *":
        """cast(itkLightObject obj) -> itkImageCVF33"""
        return _itkImagePython.itkImageCVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCVF33

        Create a new object of the class itkImageCVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF33.Clone = new_instancemethod(_itkImagePython.itkImageCVF33_Clone, None, itkImageCVF33)
itkImageCVF33.Allocate = new_instancemethod(_itkImagePython.itkImageCVF33_Allocate, None, itkImageCVF33)
itkImageCVF33.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF33_FillBuffer, None, itkImageCVF33)
itkImageCVF33.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF33_SetPixel, None, itkImageCVF33)
itkImageCVF33.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF33_GetPixel, None, itkImageCVF33)
itkImageCVF33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF33_GetBufferPointer, None, itkImageCVF33)
itkImageCVF33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF33_GetPixelContainer, None, itkImageCVF33)
itkImageCVF33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF33_SetPixelContainer, None, itkImageCVF33)
itkImageCVF33.Graft = new_instancemethod(_itkImagePython.itkImageCVF33_Graft, None, itkImageCVF33)
itkImageCVF33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF33_GetPixelAccessor, None, itkImageCVF33)
itkImageCVF33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF33_GetNeighborhoodAccessor, None, itkImageCVF33)
itkImageCVF33_swigregister = _itkImagePython.itkImageCVF33_swigregister
itkImageCVF33_swigregister(itkImageCVF33)

def itkImageCVF33___New_orig__() -> "itkImageCVF33_Pointer":
    """itkImageCVF33___New_orig__() -> itkImageCVF33_Pointer"""
    return _itkImagePython.itkImageCVF33___New_orig__()

def itkImageCVF33_cast(obj: 'itkLightObject') -> "itkImageCVF33 *":
    """itkImageCVF33_cast(itkLightObject obj) -> itkImageCVF33"""
    return _itkImagePython.itkImageCVF33_cast(obj)

class itkImageCVF42(itkImageBase2):
    """Proxy of C++ itkImageCVF42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVF42_Pointer":
        """__New_orig__() -> itkImageCVF42_Pointer"""
        return _itkImagePython.itkImageCVF42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVF42_Pointer":
        """Clone(itkImageCVF42 self) -> itkImageCVF42_Pointer"""
        return _itkImagePython.itkImageCVF42_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVF42 self, bool initializePixels=False)
        Allocate(itkImageCVF42 self)
        """
        return _itkImagePython.itkImageCVF42_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorF4') -> "void":
        """FillBuffer(itkImageCVF42 self, itkCovariantVectorF4 value)"""
        return _itkImagePython.itkImageCVF42_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkCovariantVectorF4') -> "void":
        """SetPixel(itkImageCVF42 self, itkIndex2 index, itkCovariantVectorF4 value)"""
        return _itkImagePython.itkImageCVF42_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF4 &":
        """
        GetPixel(itkImageCVF42 self, itkIndex2 index) -> itkCovariantVectorF4
        GetPixel(itkImageCVF42 self, itkIndex2 index) -> itkCovariantVectorF4
        """
        return _itkImagePython.itkImageCVF42_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF4 const *":
        """
        GetBufferPointer(itkImageCVF42 self) -> itkCovariantVectorF4
        GetBufferPointer(itkImageCVF42 self) -> itkCovariantVectorF4
        """
        return _itkImagePython.itkImageCVF42_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > const *":
        """
        GetPixelContainer(itkImageCVF42 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > >
        GetPixelContainer(itkImageCVF42 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > const *
        """
        return _itkImagePython.itkImageCVF42_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > *') -> "void":
        """SetPixelContainer(itkImageCVF42 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > * container)"""
        return _itkImagePython.itkImageCVF42_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVF42') -> "void":
        """Graft(itkImageCVF42 self, itkImageCVF42 data)"""
        return _itkImagePython.itkImageCVF42_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const":
        """
        GetPixelAccessor(itkImageCVF42 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(itkImageCVF42 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const
        """
        return _itkImagePython.itkImageCVF42_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVF42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,2 > >
        GetNeighborhoodAccessor(itkImageCVF42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,2 > > const
        """
        return _itkImagePython.itkImageCVF42_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF42

    def cast(obj: 'itkLightObject') -> "itkImageCVF42 *":
        """cast(itkLightObject obj) -> itkImageCVF42"""
        return _itkImagePython.itkImageCVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCVF42

        Create a new object of the class itkImageCVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF42.Clone = new_instancemethod(_itkImagePython.itkImageCVF42_Clone, None, itkImageCVF42)
itkImageCVF42.Allocate = new_instancemethod(_itkImagePython.itkImageCVF42_Allocate, None, itkImageCVF42)
itkImageCVF42.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF42_FillBuffer, None, itkImageCVF42)
itkImageCVF42.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF42_SetPixel, None, itkImageCVF42)
itkImageCVF42.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF42_GetPixel, None, itkImageCVF42)
itkImageCVF42.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF42_GetBufferPointer, None, itkImageCVF42)
itkImageCVF42.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF42_GetPixelContainer, None, itkImageCVF42)
itkImageCVF42.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF42_SetPixelContainer, None, itkImageCVF42)
itkImageCVF42.Graft = new_instancemethod(_itkImagePython.itkImageCVF42_Graft, None, itkImageCVF42)
itkImageCVF42.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF42_GetPixelAccessor, None, itkImageCVF42)
itkImageCVF42.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF42_GetNeighborhoodAccessor, None, itkImageCVF42)
itkImageCVF42_swigregister = _itkImagePython.itkImageCVF42_swigregister
itkImageCVF42_swigregister(itkImageCVF42)

def itkImageCVF42___New_orig__() -> "itkImageCVF42_Pointer":
    """itkImageCVF42___New_orig__() -> itkImageCVF42_Pointer"""
    return _itkImagePython.itkImageCVF42___New_orig__()

def itkImageCVF42_cast(obj: 'itkLightObject') -> "itkImageCVF42 *":
    """itkImageCVF42_cast(itkLightObject obj) -> itkImageCVF42"""
    return _itkImagePython.itkImageCVF42_cast(obj)

class itkImageCVF43(itkImageBase3):
    """Proxy of C++ itkImageCVF43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVF43_Pointer":
        """__New_orig__() -> itkImageCVF43_Pointer"""
        return _itkImagePython.itkImageCVF43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVF43_Pointer":
        """Clone(itkImageCVF43 self) -> itkImageCVF43_Pointer"""
        return _itkImagePython.itkImageCVF43_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVF43 self, bool initializePixels=False)
        Allocate(itkImageCVF43 self)
        """
        return _itkImagePython.itkImageCVF43_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorF4') -> "void":
        """FillBuffer(itkImageCVF43 self, itkCovariantVectorF4 value)"""
        return _itkImagePython.itkImageCVF43_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkCovariantVectorF4') -> "void":
        """SetPixel(itkImageCVF43 self, itkIndex3 index, itkCovariantVectorF4 value)"""
        return _itkImagePython.itkImageCVF43_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF4 &":
        """
        GetPixel(itkImageCVF43 self, itkIndex3 index) -> itkCovariantVectorF4
        GetPixel(itkImageCVF43 self, itkIndex3 index) -> itkCovariantVectorF4
        """
        return _itkImagePython.itkImageCVF43_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF4 const *":
        """
        GetBufferPointer(itkImageCVF43 self) -> itkCovariantVectorF4
        GetBufferPointer(itkImageCVF43 self) -> itkCovariantVectorF4
        """
        return _itkImagePython.itkImageCVF43_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > const *":
        """
        GetPixelContainer(itkImageCVF43 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > >
        GetPixelContainer(itkImageCVF43 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > const *
        """
        return _itkImagePython.itkImageCVF43_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > *') -> "void":
        """SetPixelContainer(itkImageCVF43 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > * container)"""
        return _itkImagePython.itkImageCVF43_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVF43') -> "void":
        """Graft(itkImageCVF43 self, itkImageCVF43 data)"""
        return _itkImagePython.itkImageCVF43_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const":
        """
        GetPixelAccessor(itkImageCVF43 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(itkImageCVF43 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const
        """
        return _itkImagePython.itkImageCVF43_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVF43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,3 > >
        GetNeighborhoodAccessor(itkImageCVF43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,3 > > const
        """
        return _itkImagePython.itkImageCVF43_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF43

    def cast(obj: 'itkLightObject') -> "itkImageCVF43 *":
        """cast(itkLightObject obj) -> itkImageCVF43"""
        return _itkImagePython.itkImageCVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCVF43

        Create a new object of the class itkImageCVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF43.Clone = new_instancemethod(_itkImagePython.itkImageCVF43_Clone, None, itkImageCVF43)
itkImageCVF43.Allocate = new_instancemethod(_itkImagePython.itkImageCVF43_Allocate, None, itkImageCVF43)
itkImageCVF43.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF43_FillBuffer, None, itkImageCVF43)
itkImageCVF43.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF43_SetPixel, None, itkImageCVF43)
itkImageCVF43.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF43_GetPixel, None, itkImageCVF43)
itkImageCVF43.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF43_GetBufferPointer, None, itkImageCVF43)
itkImageCVF43.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF43_GetPixelContainer, None, itkImageCVF43)
itkImageCVF43.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF43_SetPixelContainer, None, itkImageCVF43)
itkImageCVF43.Graft = new_instancemethod(_itkImagePython.itkImageCVF43_Graft, None, itkImageCVF43)
itkImageCVF43.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF43_GetPixelAccessor, None, itkImageCVF43)
itkImageCVF43.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF43_GetNeighborhoodAccessor, None, itkImageCVF43)
itkImageCVF43_swigregister = _itkImagePython.itkImageCVF43_swigregister
itkImageCVF43_swigregister(itkImageCVF43)

def itkImageCVF43___New_orig__() -> "itkImageCVF43_Pointer":
    """itkImageCVF43___New_orig__() -> itkImageCVF43_Pointer"""
    return _itkImagePython.itkImageCVF43___New_orig__()

def itkImageCVF43_cast(obj: 'itkLightObject') -> "itkImageCVF43 *":
    """itkImageCVF43_cast(itkLightObject obj) -> itkImageCVF43"""
    return _itkImagePython.itkImageCVF43_cast(obj)

class itkImageD2(itkImageBase2):
    """Proxy of C++ itkImageD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageD2_Pointer":
        """__New_orig__() -> itkImageD2_Pointer"""
        return _itkImagePython.itkImageD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageD2_Pointer":
        """Clone(itkImageD2 self) -> itkImageD2_Pointer"""
        return _itkImagePython.itkImageD2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageD2 self, bool initializePixels=False)
        Allocate(itkImageD2 self)
        """
        return _itkImagePython.itkImageD2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'double const &') -> "void":
        """FillBuffer(itkImageD2 self, double const & value)"""
        return _itkImagePython.itkImageD2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'double const &') -> "void":
        """SetPixel(itkImageD2 self, itkIndex2 index, double const & value)"""
        return _itkImagePython.itkImageD2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "double &":
        """
        GetPixel(itkImageD2 self, itkIndex2 index) -> double const
        GetPixel(itkImageD2 self, itkIndex2 index) -> double &
        """
        return _itkImagePython.itkImageD2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "double const *":
        """
        GetBufferPointer(itkImageD2 self) -> double
        GetBufferPointer(itkImageD2 self) -> double const *
        """
        return _itkImagePython.itkImageD2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,double > const *":
        """
        GetPixelContainer(itkImageD2 self) -> itk::ImportImageContainer< unsigned long long,double >
        GetPixelContainer(itkImageD2 self) -> itk::ImportImageContainer< unsigned long long,double > const *
        """
        return _itkImagePython.itkImageD2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,double > *') -> "void":
        """SetPixelContainer(itkImageD2 self, itk::ImportImageContainer< unsigned long long,double > * container)"""
        return _itkImagePython.itkImageD2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageD2') -> "void":
        """Graft(itkImageD2 self, itkImageD2 data)"""
        return _itkImagePython.itkImageD2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< double > const":
        """
        GetPixelAccessor(itkImageD2 self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(itkImageD2 self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkImagePython.itkImageD2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< double,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageD2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,2 > >
        GetNeighborhoodAccessor(itkImageD2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,2 > > const
        """
        return _itkImagePython.itkImageD2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageD2

    def cast(obj: 'itkLightObject') -> "itkImageD2 *":
        """cast(itkLightObject obj) -> itkImageD2"""
        return _itkImagePython.itkImageD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageD2

        Create a new object of the class itkImageD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageD2.Clone = new_instancemethod(_itkImagePython.itkImageD2_Clone, None, itkImageD2)
itkImageD2.Allocate = new_instancemethod(_itkImagePython.itkImageD2_Allocate, None, itkImageD2)
itkImageD2.FillBuffer = new_instancemethod(_itkImagePython.itkImageD2_FillBuffer, None, itkImageD2)
itkImageD2.SetPixel = new_instancemethod(_itkImagePython.itkImageD2_SetPixel, None, itkImageD2)
itkImageD2.GetPixel = new_instancemethod(_itkImagePython.itkImageD2_GetPixel, None, itkImageD2)
itkImageD2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageD2_GetBufferPointer, None, itkImageD2)
itkImageD2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageD2_GetPixelContainer, None, itkImageD2)
itkImageD2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageD2_SetPixelContainer, None, itkImageD2)
itkImageD2.Graft = new_instancemethod(_itkImagePython.itkImageD2_Graft, None, itkImageD2)
itkImageD2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageD2_GetPixelAccessor, None, itkImageD2)
itkImageD2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageD2_GetNeighborhoodAccessor, None, itkImageD2)
itkImageD2_swigregister = _itkImagePython.itkImageD2_swigregister
itkImageD2_swigregister(itkImageD2)

def itkImageD2___New_orig__() -> "itkImageD2_Pointer":
    """itkImageD2___New_orig__() -> itkImageD2_Pointer"""
    return _itkImagePython.itkImageD2___New_orig__()

def itkImageD2_cast(obj: 'itkLightObject') -> "itkImageD2 *":
    """itkImageD2_cast(itkLightObject obj) -> itkImageD2"""
    return _itkImagePython.itkImageD2_cast(obj)

class itkImageD3(itkImageBase3):
    """Proxy of C++ itkImageD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageD3_Pointer":
        """__New_orig__() -> itkImageD3_Pointer"""
        return _itkImagePython.itkImageD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageD3_Pointer":
        """Clone(itkImageD3 self) -> itkImageD3_Pointer"""
        return _itkImagePython.itkImageD3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageD3 self, bool initializePixels=False)
        Allocate(itkImageD3 self)
        """
        return _itkImagePython.itkImageD3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'double const &') -> "void":
        """FillBuffer(itkImageD3 self, double const & value)"""
        return _itkImagePython.itkImageD3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'double const &') -> "void":
        """SetPixel(itkImageD3 self, itkIndex3 index, double const & value)"""
        return _itkImagePython.itkImageD3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "double &":
        """
        GetPixel(itkImageD3 self, itkIndex3 index) -> double const
        GetPixel(itkImageD3 self, itkIndex3 index) -> double &
        """
        return _itkImagePython.itkImageD3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "double const *":
        """
        GetBufferPointer(itkImageD3 self) -> double
        GetBufferPointer(itkImageD3 self) -> double const *
        """
        return _itkImagePython.itkImageD3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,double > const *":
        """
        GetPixelContainer(itkImageD3 self) -> itk::ImportImageContainer< unsigned long long,double >
        GetPixelContainer(itkImageD3 self) -> itk::ImportImageContainer< unsigned long long,double > const *
        """
        return _itkImagePython.itkImageD3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,double > *') -> "void":
        """SetPixelContainer(itkImageD3 self, itk::ImportImageContainer< unsigned long long,double > * container)"""
        return _itkImagePython.itkImageD3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageD3') -> "void":
        """Graft(itkImageD3 self, itkImageD3 data)"""
        return _itkImagePython.itkImageD3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< double > const":
        """
        GetPixelAccessor(itkImageD3 self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(itkImageD3 self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkImagePython.itkImageD3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< double,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageD3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,3 > >
        GetNeighborhoodAccessor(itkImageD3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,3 > > const
        """
        return _itkImagePython.itkImageD3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageD3

    def cast(obj: 'itkLightObject') -> "itkImageD3 *":
        """cast(itkLightObject obj) -> itkImageD3"""
        return _itkImagePython.itkImageD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageD3

        Create a new object of the class itkImageD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageD3.Clone = new_instancemethod(_itkImagePython.itkImageD3_Clone, None, itkImageD3)
itkImageD3.Allocate = new_instancemethod(_itkImagePython.itkImageD3_Allocate, None, itkImageD3)
itkImageD3.FillBuffer = new_instancemethod(_itkImagePython.itkImageD3_FillBuffer, None, itkImageD3)
itkImageD3.SetPixel = new_instancemethod(_itkImagePython.itkImageD3_SetPixel, None, itkImageD3)
itkImageD3.GetPixel = new_instancemethod(_itkImagePython.itkImageD3_GetPixel, None, itkImageD3)
itkImageD3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageD3_GetBufferPointer, None, itkImageD3)
itkImageD3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageD3_GetPixelContainer, None, itkImageD3)
itkImageD3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageD3_SetPixelContainer, None, itkImageD3)
itkImageD3.Graft = new_instancemethod(_itkImagePython.itkImageD3_Graft, None, itkImageD3)
itkImageD3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageD3_GetPixelAccessor, None, itkImageD3)
itkImageD3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageD3_GetNeighborhoodAccessor, None, itkImageD3)
itkImageD3_swigregister = _itkImagePython.itkImageD3_swigregister
itkImageD3_swigregister(itkImageD3)

def itkImageD3___New_orig__() -> "itkImageD3_Pointer":
    """itkImageD3___New_orig__() -> itkImageD3_Pointer"""
    return _itkImagePython.itkImageD3___New_orig__()

def itkImageD3_cast(obj: 'itkLightObject') -> "itkImageD3 *":
    """itkImageD3_cast(itkLightObject obj) -> itkImageD3"""
    return _itkImagePython.itkImageD3_cast(obj)

class itkImageF2(itkImageBase2):
    """Proxy of C++ itkImageF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageF2_Pointer":
        """__New_orig__() -> itkImageF2_Pointer"""
        return _itkImagePython.itkImageF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageF2_Pointer":
        """Clone(itkImageF2 self) -> itkImageF2_Pointer"""
        return _itkImagePython.itkImageF2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageF2 self, bool initializePixels=False)
        Allocate(itkImageF2 self)
        """
        return _itkImagePython.itkImageF2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'float const &') -> "void":
        """FillBuffer(itkImageF2 self, float const & value)"""
        return _itkImagePython.itkImageF2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'float const &') -> "void":
        """SetPixel(itkImageF2 self, itkIndex2 index, float const & value)"""
        return _itkImagePython.itkImageF2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "float &":
        """
        GetPixel(itkImageF2 self, itkIndex2 index) -> float const
        GetPixel(itkImageF2 self, itkIndex2 index) -> float &
        """
        return _itkImagePython.itkImageF2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "float const *":
        """
        GetBufferPointer(itkImageF2 self) -> float
        GetBufferPointer(itkImageF2 self) -> float const *
        """
        return _itkImagePython.itkImageF2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,float > const *":
        """
        GetPixelContainer(itkImageF2 self) -> itk::ImportImageContainer< unsigned long long,float >
        GetPixelContainer(itkImageF2 self) -> itk::ImportImageContainer< unsigned long long,float > const *
        """
        return _itkImagePython.itkImageF2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,float > *') -> "void":
        """SetPixelContainer(itkImageF2 self, itk::ImportImageContainer< unsigned long long,float > * container)"""
        return _itkImagePython.itkImageF2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageF2') -> "void":
        """Graft(itkImageF2 self, itkImageF2 data)"""
        return _itkImagePython.itkImageF2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< float > const":
        """
        GetPixelAccessor(itkImageF2 self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(itkImageF2 self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkImagePython.itkImageF2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< float,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageF2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,2 > >
        GetNeighborhoodAccessor(itkImageF2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,2 > > const
        """
        return _itkImagePython.itkImageF2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageF2

    def cast(obj: 'itkLightObject') -> "itkImageF2 *":
        """cast(itkLightObject obj) -> itkImageF2"""
        return _itkImagePython.itkImageF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageF2

        Create a new object of the class itkImageF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageF2.Clone = new_instancemethod(_itkImagePython.itkImageF2_Clone, None, itkImageF2)
itkImageF2.Allocate = new_instancemethod(_itkImagePython.itkImageF2_Allocate, None, itkImageF2)
itkImageF2.FillBuffer = new_instancemethod(_itkImagePython.itkImageF2_FillBuffer, None, itkImageF2)
itkImageF2.SetPixel = new_instancemethod(_itkImagePython.itkImageF2_SetPixel, None, itkImageF2)
itkImageF2.GetPixel = new_instancemethod(_itkImagePython.itkImageF2_GetPixel, None, itkImageF2)
itkImageF2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageF2_GetBufferPointer, None, itkImageF2)
itkImageF2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageF2_GetPixelContainer, None, itkImageF2)
itkImageF2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageF2_SetPixelContainer, None, itkImageF2)
itkImageF2.Graft = new_instancemethod(_itkImagePython.itkImageF2_Graft, None, itkImageF2)
itkImageF2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageF2_GetPixelAccessor, None, itkImageF2)
itkImageF2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageF2_GetNeighborhoodAccessor, None, itkImageF2)
itkImageF2_swigregister = _itkImagePython.itkImageF2_swigregister
itkImageF2_swigregister(itkImageF2)

def itkImageF2___New_orig__() -> "itkImageF2_Pointer":
    """itkImageF2___New_orig__() -> itkImageF2_Pointer"""
    return _itkImagePython.itkImageF2___New_orig__()

def itkImageF2_cast(obj: 'itkLightObject') -> "itkImageF2 *":
    """itkImageF2_cast(itkLightObject obj) -> itkImageF2"""
    return _itkImagePython.itkImageF2_cast(obj)

class itkImageF3(itkImageBase3):
    """Proxy of C++ itkImageF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageF3_Pointer":
        """__New_orig__() -> itkImageF3_Pointer"""
        return _itkImagePython.itkImageF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageF3_Pointer":
        """Clone(itkImageF3 self) -> itkImageF3_Pointer"""
        return _itkImagePython.itkImageF3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageF3 self, bool initializePixels=False)
        Allocate(itkImageF3 self)
        """
        return _itkImagePython.itkImageF3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'float const &') -> "void":
        """FillBuffer(itkImageF3 self, float const & value)"""
        return _itkImagePython.itkImageF3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'float const &') -> "void":
        """SetPixel(itkImageF3 self, itkIndex3 index, float const & value)"""
        return _itkImagePython.itkImageF3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "float &":
        """
        GetPixel(itkImageF3 self, itkIndex3 index) -> float const
        GetPixel(itkImageF3 self, itkIndex3 index) -> float &
        """
        return _itkImagePython.itkImageF3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "float const *":
        """
        GetBufferPointer(itkImageF3 self) -> float
        GetBufferPointer(itkImageF3 self) -> float const *
        """
        return _itkImagePython.itkImageF3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,float > const *":
        """
        GetPixelContainer(itkImageF3 self) -> itk::ImportImageContainer< unsigned long long,float >
        GetPixelContainer(itkImageF3 self) -> itk::ImportImageContainer< unsigned long long,float > const *
        """
        return _itkImagePython.itkImageF3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,float > *') -> "void":
        """SetPixelContainer(itkImageF3 self, itk::ImportImageContainer< unsigned long long,float > * container)"""
        return _itkImagePython.itkImageF3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageF3') -> "void":
        """Graft(itkImageF3 self, itkImageF3 data)"""
        return _itkImagePython.itkImageF3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< float > const":
        """
        GetPixelAccessor(itkImageF3 self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(itkImageF3 self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkImagePython.itkImageF3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageF3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > >
        GetNeighborhoodAccessor(itkImageF3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > > const
        """
        return _itkImagePython.itkImageF3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageF3

    def cast(obj: 'itkLightObject') -> "itkImageF3 *":
        """cast(itkLightObject obj) -> itkImageF3"""
        return _itkImagePython.itkImageF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageF3

        Create a new object of the class itkImageF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageF3.Clone = new_instancemethod(_itkImagePython.itkImageF3_Clone, None, itkImageF3)
itkImageF3.Allocate = new_instancemethod(_itkImagePython.itkImageF3_Allocate, None, itkImageF3)
itkImageF3.FillBuffer = new_instancemethod(_itkImagePython.itkImageF3_FillBuffer, None, itkImageF3)
itkImageF3.SetPixel = new_instancemethod(_itkImagePython.itkImageF3_SetPixel, None, itkImageF3)
itkImageF3.GetPixel = new_instancemethod(_itkImagePython.itkImageF3_GetPixel, None, itkImageF3)
itkImageF3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageF3_GetBufferPointer, None, itkImageF3)
itkImageF3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageF3_GetPixelContainer, None, itkImageF3)
itkImageF3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageF3_SetPixelContainer, None, itkImageF3)
itkImageF3.Graft = new_instancemethod(_itkImagePython.itkImageF3_Graft, None, itkImageF3)
itkImageF3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageF3_GetPixelAccessor, None, itkImageF3)
itkImageF3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageF3_GetNeighborhoodAccessor, None, itkImageF3)
itkImageF3_swigregister = _itkImagePython.itkImageF3_swigregister
itkImageF3_swigregister(itkImageF3)

def itkImageF3___New_orig__() -> "itkImageF3_Pointer":
    """itkImageF3___New_orig__() -> itkImageF3_Pointer"""
    return _itkImagePython.itkImageF3___New_orig__()

def itkImageF3_cast(obj: 'itkLightObject') -> "itkImageF3 *":
    """itkImageF3_cast(itkLightObject obj) -> itkImageF3"""
    return _itkImagePython.itkImageF3_cast(obj)

class itkImageFAF22(itkImageBase2):
    """Proxy of C++ itkImageFAF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageFAF22_Pointer":
        """__New_orig__() -> itkImageFAF22_Pointer"""
        return _itkImagePython.itkImageFAF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageFAF22_Pointer":
        """Clone(itkImageFAF22 self) -> itkImageFAF22_Pointer"""
        return _itkImagePython.itkImageFAF22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageFAF22 self, bool initializePixels=False)
        Allocate(itkImageFAF22 self)
        """
        return _itkImagePython.itkImageFAF22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkFixedArrayF2') -> "void":
        """FillBuffer(itkImageFAF22 self, itkFixedArrayF2 value)"""
        return _itkImagePython.itkImageFAF22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkFixedArrayF2') -> "void":
        """SetPixel(itkImageFAF22 self, itkIndex2 index, itkFixedArrayF2 value)"""
        return _itkImagePython.itkImageFAF22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkFixedArrayF2 &":
        """
        GetPixel(itkImageFAF22 self, itkIndex2 index) -> itkFixedArrayF2
        GetPixel(itkImageFAF22 self, itkIndex2 index) -> itkFixedArrayF2
        """
        return _itkImagePython.itkImageFAF22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkFixedArrayF2 const *":
        """
        GetBufferPointer(itkImageFAF22 self) -> itkFixedArrayF2
        GetBufferPointer(itkImageFAF22 self) -> itkFixedArrayF2
        """
        return _itkImagePython.itkImageFAF22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,2 > > const *":
        """
        GetPixelContainer(itkImageFAF22 self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,2 > >
        GetPixelContainer(itkImageFAF22 self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,2 > > const *
        """
        return _itkImagePython.itkImageFAF22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,2 > > *') -> "void":
        """SetPixelContainer(itkImageFAF22 self, itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,2 > > * container)"""
        return _itkImagePython.itkImageFAF22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageFAF22') -> "void":
        """Graft(itkImageFAF22 self, itkImageFAF22 data)"""
        return _itkImagePython.itkImageFAF22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::FixedArray< float,2 > > const":
        """
        GetPixelAccessor(itkImageFAF22 self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,2 > >
        GetPixelAccessor(itkImageFAF22 self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,2 > > const
        """
        return _itkImagePython.itkImageFAF22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageFAF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,2 >,2 > >
        GetNeighborhoodAccessor(itkImageFAF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,2 >,2 > > const
        """
        return _itkImagePython.itkImageFAF22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageFAF22

    def cast(obj: 'itkLightObject') -> "itkImageFAF22 *":
        """cast(itkLightObject obj) -> itkImageFAF22"""
        return _itkImagePython.itkImageFAF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFAF22

        Create a new object of the class itkImageFAF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFAF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFAF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFAF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFAF22.Clone = new_instancemethod(_itkImagePython.itkImageFAF22_Clone, None, itkImageFAF22)
itkImageFAF22.Allocate = new_instancemethod(_itkImagePython.itkImageFAF22_Allocate, None, itkImageFAF22)
itkImageFAF22.FillBuffer = new_instancemethod(_itkImagePython.itkImageFAF22_FillBuffer, None, itkImageFAF22)
itkImageFAF22.SetPixel = new_instancemethod(_itkImagePython.itkImageFAF22_SetPixel, None, itkImageFAF22)
itkImageFAF22.GetPixel = new_instancemethod(_itkImagePython.itkImageFAF22_GetPixel, None, itkImageFAF22)
itkImageFAF22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageFAF22_GetBufferPointer, None, itkImageFAF22)
itkImageFAF22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageFAF22_GetPixelContainer, None, itkImageFAF22)
itkImageFAF22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageFAF22_SetPixelContainer, None, itkImageFAF22)
itkImageFAF22.Graft = new_instancemethod(_itkImagePython.itkImageFAF22_Graft, None, itkImageFAF22)
itkImageFAF22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageFAF22_GetPixelAccessor, None, itkImageFAF22)
itkImageFAF22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageFAF22_GetNeighborhoodAccessor, None, itkImageFAF22)
itkImageFAF22_swigregister = _itkImagePython.itkImageFAF22_swigregister
itkImageFAF22_swigregister(itkImageFAF22)

def itkImageFAF22___New_orig__() -> "itkImageFAF22_Pointer":
    """itkImageFAF22___New_orig__() -> itkImageFAF22_Pointer"""
    return _itkImagePython.itkImageFAF22___New_orig__()

def itkImageFAF22_cast(obj: 'itkLightObject') -> "itkImageFAF22 *":
    """itkImageFAF22_cast(itkLightObject obj) -> itkImageFAF22"""
    return _itkImagePython.itkImageFAF22_cast(obj)

class itkImageFAF33(itkImageBase3):
    """Proxy of C++ itkImageFAF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageFAF33_Pointer":
        """__New_orig__() -> itkImageFAF33_Pointer"""
        return _itkImagePython.itkImageFAF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageFAF33_Pointer":
        """Clone(itkImageFAF33 self) -> itkImageFAF33_Pointer"""
        return _itkImagePython.itkImageFAF33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageFAF33 self, bool initializePixels=False)
        Allocate(itkImageFAF33 self)
        """
        return _itkImagePython.itkImageFAF33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkFixedArrayF3') -> "void":
        """FillBuffer(itkImageFAF33 self, itkFixedArrayF3 value)"""
        return _itkImagePython.itkImageFAF33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkFixedArrayF3') -> "void":
        """SetPixel(itkImageFAF33 self, itkIndex3 index, itkFixedArrayF3 value)"""
        return _itkImagePython.itkImageFAF33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkFixedArrayF3 &":
        """
        GetPixel(itkImageFAF33 self, itkIndex3 index) -> itkFixedArrayF3
        GetPixel(itkImageFAF33 self, itkIndex3 index) -> itkFixedArrayF3
        """
        return _itkImagePython.itkImageFAF33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkFixedArrayF3 const *":
        """
        GetBufferPointer(itkImageFAF33 self) -> itkFixedArrayF3
        GetBufferPointer(itkImageFAF33 self) -> itkFixedArrayF3
        """
        return _itkImagePython.itkImageFAF33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,3 > > const *":
        """
        GetPixelContainer(itkImageFAF33 self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,3 > >
        GetPixelContainer(itkImageFAF33 self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,3 > > const *
        """
        return _itkImagePython.itkImageFAF33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,3 > > *') -> "void":
        """SetPixelContainer(itkImageFAF33 self, itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,3 > > * container)"""
        return _itkImagePython.itkImageFAF33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageFAF33') -> "void":
        """Graft(itkImageFAF33 self, itkImageFAF33 data)"""
        return _itkImagePython.itkImageFAF33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::FixedArray< float,3 > > const":
        """
        GetPixelAccessor(itkImageFAF33 self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,3 > >
        GetPixelAccessor(itkImageFAF33 self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,3 > > const
        """
        return _itkImagePython.itkImageFAF33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageFAF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,3 >,3 > >
        GetNeighborhoodAccessor(itkImageFAF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,3 >,3 > > const
        """
        return _itkImagePython.itkImageFAF33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageFAF33

    def cast(obj: 'itkLightObject') -> "itkImageFAF33 *":
        """cast(itkLightObject obj) -> itkImageFAF33"""
        return _itkImagePython.itkImageFAF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFAF33

        Create a new object of the class itkImageFAF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFAF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFAF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFAF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFAF33.Clone = new_instancemethod(_itkImagePython.itkImageFAF33_Clone, None, itkImageFAF33)
itkImageFAF33.Allocate = new_instancemethod(_itkImagePython.itkImageFAF33_Allocate, None, itkImageFAF33)
itkImageFAF33.FillBuffer = new_instancemethod(_itkImagePython.itkImageFAF33_FillBuffer, None, itkImageFAF33)
itkImageFAF33.SetPixel = new_instancemethod(_itkImagePython.itkImageFAF33_SetPixel, None, itkImageFAF33)
itkImageFAF33.GetPixel = new_instancemethod(_itkImagePython.itkImageFAF33_GetPixel, None, itkImageFAF33)
itkImageFAF33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageFAF33_GetBufferPointer, None, itkImageFAF33)
itkImageFAF33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageFAF33_GetPixelContainer, None, itkImageFAF33)
itkImageFAF33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageFAF33_SetPixelContainer, None, itkImageFAF33)
itkImageFAF33.Graft = new_instancemethod(_itkImagePython.itkImageFAF33_Graft, None, itkImageFAF33)
itkImageFAF33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageFAF33_GetPixelAccessor, None, itkImageFAF33)
itkImageFAF33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageFAF33_GetNeighborhoodAccessor, None, itkImageFAF33)
itkImageFAF33_swigregister = _itkImagePython.itkImageFAF33_swigregister
itkImageFAF33_swigregister(itkImageFAF33)

def itkImageFAF33___New_orig__() -> "itkImageFAF33_Pointer":
    """itkImageFAF33___New_orig__() -> itkImageFAF33_Pointer"""
    return _itkImagePython.itkImageFAF33___New_orig__()

def itkImageFAF33_cast(obj: 'itkLightObject') -> "itkImageFAF33 *":
    """itkImageFAF33_cast(itkLightObject obj) -> itkImageFAF33"""
    return _itkImagePython.itkImageFAF33_cast(obj)

class itkImageO22(itkImageBase2):
    """Proxy of C++ itkImageO22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageO22_Pointer":
        """__New_orig__() -> itkImageO22_Pointer"""
        return _itkImagePython.itkImageO22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageO22_Pointer":
        """Clone(itkImageO22 self) -> itkImageO22_Pointer"""
        return _itkImagePython.itkImageO22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageO22 self, bool initializePixels=False)
        Allocate(itkImageO22 self)
        """
        return _itkImagePython.itkImageO22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkOffset2') -> "void":
        """FillBuffer(itkImageO22 self, itkOffset2 value)"""
        return _itkImagePython.itkImageO22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkOffset2') -> "void":
        """SetPixel(itkImageO22 self, itkIndex2 index, itkOffset2 value)"""
        return _itkImagePython.itkImageO22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkOffset2 &":
        """
        GetPixel(itkImageO22 self, itkIndex2 index) -> itkOffset2
        GetPixel(itkImageO22 self, itkIndex2 index) -> itkOffset2
        """
        return _itkImagePython.itkImageO22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkOffset2 const *":
        """
        GetBufferPointer(itkImageO22 self) -> itkOffset2
        GetBufferPointer(itkImageO22 self) -> itkOffset2
        """
        return _itkImagePython.itkImageO22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Offset< 2 > > const *":
        """
        GetPixelContainer(itkImageO22 self) -> itk::ImportImageContainer< unsigned long long,itk::Offset< 2 > >
        GetPixelContainer(itkImageO22 self) -> itk::ImportImageContainer< unsigned long long,itk::Offset< 2 > > const *
        """
        return _itkImagePython.itkImageO22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Offset< 2 > > *') -> "void":
        """SetPixelContainer(itkImageO22 self, itk::ImportImageContainer< unsigned long long,itk::Offset< 2 > > * container)"""
        return _itkImagePython.itkImageO22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageO22') -> "void":
        """Graft(itkImageO22 self, itkImageO22 data)"""
        return _itkImagePython.itkImageO22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Offset< 2 > > const":
        """
        GetPixelAccessor(itkImageO22 self) -> itk::DefaultPixelAccessor< itk::Offset< 2 > >
        GetPixelAccessor(itkImageO22 self) -> itk::DefaultPixelAccessor< itk::Offset< 2 > > const
        """
        return _itkImagePython.itkImageO22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageO22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 2 >,2 > >
        GetNeighborhoodAccessor(itkImageO22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 2 >,2 > > const
        """
        return _itkImagePython.itkImageO22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageO22

    def cast(obj: 'itkLightObject') -> "itkImageO22 *":
        """cast(itkLightObject obj) -> itkImageO22"""
        return _itkImagePython.itkImageO22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageO22

        Create a new object of the class itkImageO22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageO22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageO22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageO22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageO22.Clone = new_instancemethod(_itkImagePython.itkImageO22_Clone, None, itkImageO22)
itkImageO22.Allocate = new_instancemethod(_itkImagePython.itkImageO22_Allocate, None, itkImageO22)
itkImageO22.FillBuffer = new_instancemethod(_itkImagePython.itkImageO22_FillBuffer, None, itkImageO22)
itkImageO22.SetPixel = new_instancemethod(_itkImagePython.itkImageO22_SetPixel, None, itkImageO22)
itkImageO22.GetPixel = new_instancemethod(_itkImagePython.itkImageO22_GetPixel, None, itkImageO22)
itkImageO22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageO22_GetBufferPointer, None, itkImageO22)
itkImageO22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageO22_GetPixelContainer, None, itkImageO22)
itkImageO22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageO22_SetPixelContainer, None, itkImageO22)
itkImageO22.Graft = new_instancemethod(_itkImagePython.itkImageO22_Graft, None, itkImageO22)
itkImageO22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageO22_GetPixelAccessor, None, itkImageO22)
itkImageO22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageO22_GetNeighborhoodAccessor, None, itkImageO22)
itkImageO22_swigregister = _itkImagePython.itkImageO22_swigregister
itkImageO22_swigregister(itkImageO22)

def itkImageO22___New_orig__() -> "itkImageO22_Pointer":
    """itkImageO22___New_orig__() -> itkImageO22_Pointer"""
    return _itkImagePython.itkImageO22___New_orig__()

def itkImageO22_cast(obj: 'itkLightObject') -> "itkImageO22 *":
    """itkImageO22_cast(itkLightObject obj) -> itkImageO22"""
    return _itkImagePython.itkImageO22_cast(obj)

class itkImageO33(itkImageBase3):
    """Proxy of C++ itkImageO33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageO33_Pointer":
        """__New_orig__() -> itkImageO33_Pointer"""
        return _itkImagePython.itkImageO33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageO33_Pointer":
        """Clone(itkImageO33 self) -> itkImageO33_Pointer"""
        return _itkImagePython.itkImageO33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageO33 self, bool initializePixels=False)
        Allocate(itkImageO33 self)
        """
        return _itkImagePython.itkImageO33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkOffset3') -> "void":
        """FillBuffer(itkImageO33 self, itkOffset3 value)"""
        return _itkImagePython.itkImageO33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkOffset3') -> "void":
        """SetPixel(itkImageO33 self, itkIndex3 index, itkOffset3 value)"""
        return _itkImagePython.itkImageO33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkOffset3 &":
        """
        GetPixel(itkImageO33 self, itkIndex3 index) -> itkOffset3
        GetPixel(itkImageO33 self, itkIndex3 index) -> itkOffset3
        """
        return _itkImagePython.itkImageO33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkOffset3 const *":
        """
        GetBufferPointer(itkImageO33 self) -> itkOffset3
        GetBufferPointer(itkImageO33 self) -> itkOffset3
        """
        return _itkImagePython.itkImageO33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Offset< 3 > > const *":
        """
        GetPixelContainer(itkImageO33 self) -> itk::ImportImageContainer< unsigned long long,itk::Offset< 3 > >
        GetPixelContainer(itkImageO33 self) -> itk::ImportImageContainer< unsigned long long,itk::Offset< 3 > > const *
        """
        return _itkImagePython.itkImageO33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Offset< 3 > > *') -> "void":
        """SetPixelContainer(itkImageO33 self, itk::ImportImageContainer< unsigned long long,itk::Offset< 3 > > * container)"""
        return _itkImagePython.itkImageO33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageO33') -> "void":
        """Graft(itkImageO33 self, itkImageO33 data)"""
        return _itkImagePython.itkImageO33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Offset< 3 > > const":
        """
        GetPixelAccessor(itkImageO33 self) -> itk::DefaultPixelAccessor< itk::Offset< 3 > >
        GetPixelAccessor(itkImageO33 self) -> itk::DefaultPixelAccessor< itk::Offset< 3 > > const
        """
        return _itkImagePython.itkImageO33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageO33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 3 >,3 > >
        GetNeighborhoodAccessor(itkImageO33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 3 >,3 > > const
        """
        return _itkImagePython.itkImageO33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageO33

    def cast(obj: 'itkLightObject') -> "itkImageO33 *":
        """cast(itkLightObject obj) -> itkImageO33"""
        return _itkImagePython.itkImageO33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageO33

        Create a new object of the class itkImageO33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageO33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageO33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageO33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageO33.Clone = new_instancemethod(_itkImagePython.itkImageO33_Clone, None, itkImageO33)
itkImageO33.Allocate = new_instancemethod(_itkImagePython.itkImageO33_Allocate, None, itkImageO33)
itkImageO33.FillBuffer = new_instancemethod(_itkImagePython.itkImageO33_FillBuffer, None, itkImageO33)
itkImageO33.SetPixel = new_instancemethod(_itkImagePython.itkImageO33_SetPixel, None, itkImageO33)
itkImageO33.GetPixel = new_instancemethod(_itkImagePython.itkImageO33_GetPixel, None, itkImageO33)
itkImageO33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageO33_GetBufferPointer, None, itkImageO33)
itkImageO33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageO33_GetPixelContainer, None, itkImageO33)
itkImageO33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageO33_SetPixelContainer, None, itkImageO33)
itkImageO33.Graft = new_instancemethod(_itkImagePython.itkImageO33_Graft, None, itkImageO33)
itkImageO33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageO33_GetPixelAccessor, None, itkImageO33)
itkImageO33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageO33_GetNeighborhoodAccessor, None, itkImageO33)
itkImageO33_swigregister = _itkImagePython.itkImageO33_swigregister
itkImageO33_swigregister(itkImageO33)

def itkImageO33___New_orig__() -> "itkImageO33_Pointer":
    """itkImageO33___New_orig__() -> itkImageO33_Pointer"""
    return _itkImagePython.itkImageO33___New_orig__()

def itkImageO33_cast(obj: 'itkLightObject') -> "itkImageO33 *":
    """itkImageO33_cast(itkLightObject obj) -> itkImageO33"""
    return _itkImagePython.itkImageO33_cast(obj)

class itkImageRGBAUC2(itkImageBase2):
    """Proxy of C++ itkImageRGBAUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRGBAUC2_Pointer":
        """__New_orig__() -> itkImageRGBAUC2_Pointer"""
        return _itkImagePython.itkImageRGBAUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRGBAUC2_Pointer":
        """Clone(itkImageRGBAUC2 self) -> itkImageRGBAUC2_Pointer"""
        return _itkImagePython.itkImageRGBAUC2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageRGBAUC2 self, bool initializePixels=False)
        Allocate(itkImageRGBAUC2 self)
        """
        return _itkImagePython.itkImageRGBAUC2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkRGBAPixelUC') -> "void":
        """FillBuffer(itkImageRGBAUC2 self, itkRGBAPixelUC value)"""
        return _itkImagePython.itkImageRGBAUC2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkRGBAPixelUC') -> "void":
        """SetPixel(itkImageRGBAUC2 self, itkIndex2 index, itkRGBAPixelUC value)"""
        return _itkImagePython.itkImageRGBAUC2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkRGBAPixelUC &":
        """
        GetPixel(itkImageRGBAUC2 self, itkIndex2 index) -> itkRGBAPixelUC
        GetPixel(itkImageRGBAUC2 self, itkIndex2 index) -> itkRGBAPixelUC
        """
        return _itkImagePython.itkImageRGBAUC2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkRGBAPixelUC const *":
        """
        GetBufferPointer(itkImageRGBAUC2 self) -> itkRGBAPixelUC
        GetBufferPointer(itkImageRGBAUC2 self) -> itkRGBAPixelUC
        """
        return _itkImagePython.itkImageRGBAUC2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > const *":
        """
        GetPixelContainer(itkImageRGBAUC2 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > >
        GetPixelContainer(itkImageRGBAUC2 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > const *
        """
        return _itkImagePython.itkImageRGBAUC2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > *') -> "void":
        """SetPixelContainer(itkImageRGBAUC2 self, itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > * container)"""
        return _itkImagePython.itkImageRGBAUC2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageRGBAUC2') -> "void":
        """Graft(itkImageRGBAUC2 self, itkImageRGBAUC2 data)"""
        return _itkImagePython.itkImageRGBAUC2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const":
        """
        GetPixelAccessor(itkImageRGBAUC2 self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > >
        GetPixelAccessor(itkImageRGBAUC2 self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const
        """
        return _itkImagePython.itkImageRGBAUC2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageRGBAUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,2 > >
        GetNeighborhoodAccessor(itkImageRGBAUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,2 > > const
        """
        return _itkImagePython.itkImageRGBAUC2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageRGBAUC2

    def cast(obj: 'itkLightObject') -> "itkImageRGBAUC2 *":
        """cast(itkLightObject obj) -> itkImageRGBAUC2"""
        return _itkImagePython.itkImageRGBAUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRGBAUC2

        Create a new object of the class itkImageRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRGBAUC2.Clone = new_instancemethod(_itkImagePython.itkImageRGBAUC2_Clone, None, itkImageRGBAUC2)
itkImageRGBAUC2.Allocate = new_instancemethod(_itkImagePython.itkImageRGBAUC2_Allocate, None, itkImageRGBAUC2)
itkImageRGBAUC2.FillBuffer = new_instancemethod(_itkImagePython.itkImageRGBAUC2_FillBuffer, None, itkImageRGBAUC2)
itkImageRGBAUC2.SetPixel = new_instancemethod(_itkImagePython.itkImageRGBAUC2_SetPixel, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetPixel = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetPixel, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetBufferPointer, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetPixelContainer, None, itkImageRGBAUC2)
itkImageRGBAUC2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBAUC2_SetPixelContainer, None, itkImageRGBAUC2)
itkImageRGBAUC2.Graft = new_instancemethod(_itkImagePython.itkImageRGBAUC2_Graft, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetPixelAccessor, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetNeighborhoodAccessor, None, itkImageRGBAUC2)
itkImageRGBAUC2_swigregister = _itkImagePython.itkImageRGBAUC2_swigregister
itkImageRGBAUC2_swigregister(itkImageRGBAUC2)

def itkImageRGBAUC2___New_orig__() -> "itkImageRGBAUC2_Pointer":
    """itkImageRGBAUC2___New_orig__() -> itkImageRGBAUC2_Pointer"""
    return _itkImagePython.itkImageRGBAUC2___New_orig__()

def itkImageRGBAUC2_cast(obj: 'itkLightObject') -> "itkImageRGBAUC2 *":
    """itkImageRGBAUC2_cast(itkLightObject obj) -> itkImageRGBAUC2"""
    return _itkImagePython.itkImageRGBAUC2_cast(obj)

class itkImageRGBAUC3(itkImageBase3):
    """Proxy of C++ itkImageRGBAUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRGBAUC3_Pointer":
        """__New_orig__() -> itkImageRGBAUC3_Pointer"""
        return _itkImagePython.itkImageRGBAUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRGBAUC3_Pointer":
        """Clone(itkImageRGBAUC3 self) -> itkImageRGBAUC3_Pointer"""
        return _itkImagePython.itkImageRGBAUC3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageRGBAUC3 self, bool initializePixels=False)
        Allocate(itkImageRGBAUC3 self)
        """
        return _itkImagePython.itkImageRGBAUC3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkRGBAPixelUC') -> "void":
        """FillBuffer(itkImageRGBAUC3 self, itkRGBAPixelUC value)"""
        return _itkImagePython.itkImageRGBAUC3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkRGBAPixelUC') -> "void":
        """SetPixel(itkImageRGBAUC3 self, itkIndex3 index, itkRGBAPixelUC value)"""
        return _itkImagePython.itkImageRGBAUC3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkRGBAPixelUC &":
        """
        GetPixel(itkImageRGBAUC3 self, itkIndex3 index) -> itkRGBAPixelUC
        GetPixel(itkImageRGBAUC3 self, itkIndex3 index) -> itkRGBAPixelUC
        """
        return _itkImagePython.itkImageRGBAUC3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkRGBAPixelUC const *":
        """
        GetBufferPointer(itkImageRGBAUC3 self) -> itkRGBAPixelUC
        GetBufferPointer(itkImageRGBAUC3 self) -> itkRGBAPixelUC
        """
        return _itkImagePython.itkImageRGBAUC3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > const *":
        """
        GetPixelContainer(itkImageRGBAUC3 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > >
        GetPixelContainer(itkImageRGBAUC3 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > const *
        """
        return _itkImagePython.itkImageRGBAUC3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > *') -> "void":
        """SetPixelContainer(itkImageRGBAUC3 self, itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > * container)"""
        return _itkImagePython.itkImageRGBAUC3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageRGBAUC3') -> "void":
        """Graft(itkImageRGBAUC3 self, itkImageRGBAUC3 data)"""
        return _itkImagePython.itkImageRGBAUC3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const":
        """
        GetPixelAccessor(itkImageRGBAUC3 self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > >
        GetPixelAccessor(itkImageRGBAUC3 self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const
        """
        return _itkImagePython.itkImageRGBAUC3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageRGBAUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,3 > >
        GetNeighborhoodAccessor(itkImageRGBAUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,3 > > const
        """
        return _itkImagePython.itkImageRGBAUC3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageRGBAUC3

    def cast(obj: 'itkLightObject') -> "itkImageRGBAUC3 *":
        """cast(itkLightObject obj) -> itkImageRGBAUC3"""
        return _itkImagePython.itkImageRGBAUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRGBAUC3

        Create a new object of the class itkImageRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRGBAUC3.Clone = new_instancemethod(_itkImagePython.itkImageRGBAUC3_Clone, None, itkImageRGBAUC3)
itkImageRGBAUC3.Allocate = new_instancemethod(_itkImagePython.itkImageRGBAUC3_Allocate, None, itkImageRGBAUC3)
itkImageRGBAUC3.FillBuffer = new_instancemethod(_itkImagePython.itkImageRGBAUC3_FillBuffer, None, itkImageRGBAUC3)
itkImageRGBAUC3.SetPixel = new_instancemethod(_itkImagePython.itkImageRGBAUC3_SetPixel, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetPixel = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetPixel, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetBufferPointer, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetPixelContainer, None, itkImageRGBAUC3)
itkImageRGBAUC3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBAUC3_SetPixelContainer, None, itkImageRGBAUC3)
itkImageRGBAUC3.Graft = new_instancemethod(_itkImagePython.itkImageRGBAUC3_Graft, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetPixelAccessor, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetNeighborhoodAccessor, None, itkImageRGBAUC3)
itkImageRGBAUC3_swigregister = _itkImagePython.itkImageRGBAUC3_swigregister
itkImageRGBAUC3_swigregister(itkImageRGBAUC3)

def itkImageRGBAUC3___New_orig__() -> "itkImageRGBAUC3_Pointer":
    """itkImageRGBAUC3___New_orig__() -> itkImageRGBAUC3_Pointer"""
    return _itkImagePython.itkImageRGBAUC3___New_orig__()

def itkImageRGBAUC3_cast(obj: 'itkLightObject') -> "itkImageRGBAUC3 *":
    """itkImageRGBAUC3_cast(itkLightObject obj) -> itkImageRGBAUC3"""
    return _itkImagePython.itkImageRGBAUC3_cast(obj)

class itkImageRGBUC2(itkImageBase2):
    """Proxy of C++ itkImageRGBUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRGBUC2_Pointer":
        """__New_orig__() -> itkImageRGBUC2_Pointer"""
        return _itkImagePython.itkImageRGBUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRGBUC2_Pointer":
        """Clone(itkImageRGBUC2 self) -> itkImageRGBUC2_Pointer"""
        return _itkImagePython.itkImageRGBUC2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageRGBUC2 self, bool initializePixels=False)
        Allocate(itkImageRGBUC2 self)
        """
        return _itkImagePython.itkImageRGBUC2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkRGBPixelUC') -> "void":
        """FillBuffer(itkImageRGBUC2 self, itkRGBPixelUC value)"""
        return _itkImagePython.itkImageRGBUC2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkRGBPixelUC') -> "void":
        """SetPixel(itkImageRGBUC2 self, itkIndex2 index, itkRGBPixelUC value)"""
        return _itkImagePython.itkImageRGBUC2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkRGBPixelUC &":
        """
        GetPixel(itkImageRGBUC2 self, itkIndex2 index) -> itkRGBPixelUC
        GetPixel(itkImageRGBUC2 self, itkIndex2 index) -> itkRGBPixelUC
        """
        return _itkImagePython.itkImageRGBUC2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkRGBPixelUC const *":
        """
        GetBufferPointer(itkImageRGBUC2 self) -> itkRGBPixelUC
        GetBufferPointer(itkImageRGBUC2 self) -> itkRGBPixelUC
        """
        return _itkImagePython.itkImageRGBUC2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > const *":
        """
        GetPixelContainer(itkImageRGBUC2 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > >
        GetPixelContainer(itkImageRGBUC2 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > const *
        """
        return _itkImagePython.itkImageRGBUC2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > *') -> "void":
        """SetPixelContainer(itkImageRGBUC2 self, itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > * container)"""
        return _itkImagePython.itkImageRGBUC2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageRGBUC2') -> "void":
        """Graft(itkImageRGBUC2 self, itkImageRGBUC2 data)"""
        return _itkImagePython.itkImageRGBUC2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const":
        """
        GetPixelAccessor(itkImageRGBUC2 self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > >
        GetPixelAccessor(itkImageRGBUC2 self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const
        """
        return _itkImagePython.itkImageRGBUC2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageRGBUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,2 > >
        GetNeighborhoodAccessor(itkImageRGBUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,2 > > const
        """
        return _itkImagePython.itkImageRGBUC2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageRGBUC2

    def cast(obj: 'itkLightObject') -> "itkImageRGBUC2 *":
        """cast(itkLightObject obj) -> itkImageRGBUC2"""
        return _itkImagePython.itkImageRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRGBUC2

        Create a new object of the class itkImageRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRGBUC2.Clone = new_instancemethod(_itkImagePython.itkImageRGBUC2_Clone, None, itkImageRGBUC2)
itkImageRGBUC2.Allocate = new_instancemethod(_itkImagePython.itkImageRGBUC2_Allocate, None, itkImageRGBUC2)
itkImageRGBUC2.FillBuffer = new_instancemethod(_itkImagePython.itkImageRGBUC2_FillBuffer, None, itkImageRGBUC2)
itkImageRGBUC2.SetPixel = new_instancemethod(_itkImagePython.itkImageRGBUC2_SetPixel, None, itkImageRGBUC2)
itkImageRGBUC2.GetPixel = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetPixel, None, itkImageRGBUC2)
itkImageRGBUC2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetBufferPointer, None, itkImageRGBUC2)
itkImageRGBUC2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetPixelContainer, None, itkImageRGBUC2)
itkImageRGBUC2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBUC2_SetPixelContainer, None, itkImageRGBUC2)
itkImageRGBUC2.Graft = new_instancemethod(_itkImagePython.itkImageRGBUC2_Graft, None, itkImageRGBUC2)
itkImageRGBUC2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetPixelAccessor, None, itkImageRGBUC2)
itkImageRGBUC2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetNeighborhoodAccessor, None, itkImageRGBUC2)
itkImageRGBUC2_swigregister = _itkImagePython.itkImageRGBUC2_swigregister
itkImageRGBUC2_swigregister(itkImageRGBUC2)

def itkImageRGBUC2___New_orig__() -> "itkImageRGBUC2_Pointer":
    """itkImageRGBUC2___New_orig__() -> itkImageRGBUC2_Pointer"""
    return _itkImagePython.itkImageRGBUC2___New_orig__()

def itkImageRGBUC2_cast(obj: 'itkLightObject') -> "itkImageRGBUC2 *":
    """itkImageRGBUC2_cast(itkLightObject obj) -> itkImageRGBUC2"""
    return _itkImagePython.itkImageRGBUC2_cast(obj)

class itkImageRGBUC3(itkImageBase3):
    """Proxy of C++ itkImageRGBUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRGBUC3_Pointer":
        """__New_orig__() -> itkImageRGBUC3_Pointer"""
        return _itkImagePython.itkImageRGBUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRGBUC3_Pointer":
        """Clone(itkImageRGBUC3 self) -> itkImageRGBUC3_Pointer"""
        return _itkImagePython.itkImageRGBUC3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageRGBUC3 self, bool initializePixels=False)
        Allocate(itkImageRGBUC3 self)
        """
        return _itkImagePython.itkImageRGBUC3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkRGBPixelUC') -> "void":
        """FillBuffer(itkImageRGBUC3 self, itkRGBPixelUC value)"""
        return _itkImagePython.itkImageRGBUC3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkRGBPixelUC') -> "void":
        """SetPixel(itkImageRGBUC3 self, itkIndex3 index, itkRGBPixelUC value)"""
        return _itkImagePython.itkImageRGBUC3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkRGBPixelUC &":
        """
        GetPixel(itkImageRGBUC3 self, itkIndex3 index) -> itkRGBPixelUC
        GetPixel(itkImageRGBUC3 self, itkIndex3 index) -> itkRGBPixelUC
        """
        return _itkImagePython.itkImageRGBUC3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkRGBPixelUC const *":
        """
        GetBufferPointer(itkImageRGBUC3 self) -> itkRGBPixelUC
        GetBufferPointer(itkImageRGBUC3 self) -> itkRGBPixelUC
        """
        return _itkImagePython.itkImageRGBUC3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > const *":
        """
        GetPixelContainer(itkImageRGBUC3 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > >
        GetPixelContainer(itkImageRGBUC3 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > const *
        """
        return _itkImagePython.itkImageRGBUC3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > *') -> "void":
        """SetPixelContainer(itkImageRGBUC3 self, itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > * container)"""
        return _itkImagePython.itkImageRGBUC3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageRGBUC3') -> "void":
        """Graft(itkImageRGBUC3 self, itkImageRGBUC3 data)"""
        return _itkImagePython.itkImageRGBUC3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const":
        """
        GetPixelAccessor(itkImageRGBUC3 self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > >
        GetPixelAccessor(itkImageRGBUC3 self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const
        """
        return _itkImagePython.itkImageRGBUC3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageRGBUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,3 > >
        GetNeighborhoodAccessor(itkImageRGBUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,3 > > const
        """
        return _itkImagePython.itkImageRGBUC3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageRGBUC3

    def cast(obj: 'itkLightObject') -> "itkImageRGBUC3 *":
        """cast(itkLightObject obj) -> itkImageRGBUC3"""
        return _itkImagePython.itkImageRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRGBUC3

        Create a new object of the class itkImageRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRGBUC3.Clone = new_instancemethod(_itkImagePython.itkImageRGBUC3_Clone, None, itkImageRGBUC3)
itkImageRGBUC3.Allocate = new_instancemethod(_itkImagePython.itkImageRGBUC3_Allocate, None, itkImageRGBUC3)
itkImageRGBUC3.FillBuffer = new_instancemethod(_itkImagePython.itkImageRGBUC3_FillBuffer, None, itkImageRGBUC3)
itkImageRGBUC3.SetPixel = new_instancemethod(_itkImagePython.itkImageRGBUC3_SetPixel, None, itkImageRGBUC3)
itkImageRGBUC3.GetPixel = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetPixel, None, itkImageRGBUC3)
itkImageRGBUC3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetBufferPointer, None, itkImageRGBUC3)
itkImageRGBUC3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetPixelContainer, None, itkImageRGBUC3)
itkImageRGBUC3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBUC3_SetPixelContainer, None, itkImageRGBUC3)
itkImageRGBUC3.Graft = new_instancemethod(_itkImagePython.itkImageRGBUC3_Graft, None, itkImageRGBUC3)
itkImageRGBUC3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetPixelAccessor, None, itkImageRGBUC3)
itkImageRGBUC3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetNeighborhoodAccessor, None, itkImageRGBUC3)
itkImageRGBUC3_swigregister = _itkImagePython.itkImageRGBUC3_swigregister
itkImageRGBUC3_swigregister(itkImageRGBUC3)

def itkImageRGBUC3___New_orig__() -> "itkImageRGBUC3_Pointer":
    """itkImageRGBUC3___New_orig__() -> itkImageRGBUC3_Pointer"""
    return _itkImagePython.itkImageRGBUC3___New_orig__()

def itkImageRGBUC3_cast(obj: 'itkLightObject') -> "itkImageRGBUC3 *":
    """itkImageRGBUC3_cast(itkLightObject obj) -> itkImageRGBUC3"""
    return _itkImagePython.itkImageRGBUC3_cast(obj)

class itkImageSS2(itkImageBase2):
    """Proxy of C++ itkImageSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageSS2_Pointer":
        """__New_orig__() -> itkImageSS2_Pointer"""
        return _itkImagePython.itkImageSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageSS2_Pointer":
        """Clone(itkImageSS2 self) -> itkImageSS2_Pointer"""
        return _itkImagePython.itkImageSS2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageSS2 self, bool initializePixels=False)
        Allocate(itkImageSS2 self)
        """
        return _itkImagePython.itkImageSS2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'short const &') -> "void":
        """FillBuffer(itkImageSS2 self, short const & value)"""
        return _itkImagePython.itkImageSS2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'short const &') -> "void":
        """SetPixel(itkImageSS2 self, itkIndex2 index, short const & value)"""
        return _itkImagePython.itkImageSS2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "short &":
        """
        GetPixel(itkImageSS2 self, itkIndex2 index) -> short const
        GetPixel(itkImageSS2 self, itkIndex2 index) -> short &
        """
        return _itkImagePython.itkImageSS2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "short const *":
        """
        GetBufferPointer(itkImageSS2 self) -> short
        GetBufferPointer(itkImageSS2 self) -> short const *
        """
        return _itkImagePython.itkImageSS2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,short > const *":
        """
        GetPixelContainer(itkImageSS2 self) -> itk::ImportImageContainer< unsigned long long,short >
        GetPixelContainer(itkImageSS2 self) -> itk::ImportImageContainer< unsigned long long,short > const *
        """
        return _itkImagePython.itkImageSS2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,short > *') -> "void":
        """SetPixelContainer(itkImageSS2 self, itk::ImportImageContainer< unsigned long long,short > * container)"""
        return _itkImagePython.itkImageSS2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageSS2') -> "void":
        """Graft(itkImageSS2 self, itkImageSS2 data)"""
        return _itkImagePython.itkImageSS2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< short > const":
        """
        GetPixelAccessor(itkImageSS2 self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(itkImageSS2 self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkImagePython.itkImageSS2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< short,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageSS2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,2 > >
        GetNeighborhoodAccessor(itkImageSS2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,2 > > const
        """
        return _itkImagePython.itkImageSS2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageSS2

    def cast(obj: 'itkLightObject') -> "itkImageSS2 *":
        """cast(itkLightObject obj) -> itkImageSS2"""
        return _itkImagePython.itkImageSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSS2

        Create a new object of the class itkImageSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSS2.Clone = new_instancemethod(_itkImagePython.itkImageSS2_Clone, None, itkImageSS2)
itkImageSS2.Allocate = new_instancemethod(_itkImagePython.itkImageSS2_Allocate, None, itkImageSS2)
itkImageSS2.FillBuffer = new_instancemethod(_itkImagePython.itkImageSS2_FillBuffer, None, itkImageSS2)
itkImageSS2.SetPixel = new_instancemethod(_itkImagePython.itkImageSS2_SetPixel, None, itkImageSS2)
itkImageSS2.GetPixel = new_instancemethod(_itkImagePython.itkImageSS2_GetPixel, None, itkImageSS2)
itkImageSS2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageSS2_GetBufferPointer, None, itkImageSS2)
itkImageSS2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageSS2_GetPixelContainer, None, itkImageSS2)
itkImageSS2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageSS2_SetPixelContainer, None, itkImageSS2)
itkImageSS2.Graft = new_instancemethod(_itkImagePython.itkImageSS2_Graft, None, itkImageSS2)
itkImageSS2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageSS2_GetPixelAccessor, None, itkImageSS2)
itkImageSS2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageSS2_GetNeighborhoodAccessor, None, itkImageSS2)
itkImageSS2_swigregister = _itkImagePython.itkImageSS2_swigregister
itkImageSS2_swigregister(itkImageSS2)

def itkImageSS2___New_orig__() -> "itkImageSS2_Pointer":
    """itkImageSS2___New_orig__() -> itkImageSS2_Pointer"""
    return _itkImagePython.itkImageSS2___New_orig__()

def itkImageSS2_cast(obj: 'itkLightObject') -> "itkImageSS2 *":
    """itkImageSS2_cast(itkLightObject obj) -> itkImageSS2"""
    return _itkImagePython.itkImageSS2_cast(obj)

class itkImageSS3(itkImageBase3):
    """Proxy of C++ itkImageSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageSS3_Pointer":
        """__New_orig__() -> itkImageSS3_Pointer"""
        return _itkImagePython.itkImageSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageSS3_Pointer":
        """Clone(itkImageSS3 self) -> itkImageSS3_Pointer"""
        return _itkImagePython.itkImageSS3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageSS3 self, bool initializePixels=False)
        Allocate(itkImageSS3 self)
        """
        return _itkImagePython.itkImageSS3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'short const &') -> "void":
        """FillBuffer(itkImageSS3 self, short const & value)"""
        return _itkImagePython.itkImageSS3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'short const &') -> "void":
        """SetPixel(itkImageSS3 self, itkIndex3 index, short const & value)"""
        return _itkImagePython.itkImageSS3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "short &":
        """
        GetPixel(itkImageSS3 self, itkIndex3 index) -> short const
        GetPixel(itkImageSS3 self, itkIndex3 index) -> short &
        """
        return _itkImagePython.itkImageSS3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "short const *":
        """
        GetBufferPointer(itkImageSS3 self) -> short
        GetBufferPointer(itkImageSS3 self) -> short const *
        """
        return _itkImagePython.itkImageSS3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,short > const *":
        """
        GetPixelContainer(itkImageSS3 self) -> itk::ImportImageContainer< unsigned long long,short >
        GetPixelContainer(itkImageSS3 self) -> itk::ImportImageContainer< unsigned long long,short > const *
        """
        return _itkImagePython.itkImageSS3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,short > *') -> "void":
        """SetPixelContainer(itkImageSS3 self, itk::ImportImageContainer< unsigned long long,short > * container)"""
        return _itkImagePython.itkImageSS3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageSS3') -> "void":
        """Graft(itkImageSS3 self, itkImageSS3 data)"""
        return _itkImagePython.itkImageSS3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< short > const":
        """
        GetPixelAccessor(itkImageSS3 self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(itkImageSS3 self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkImagePython.itkImageSS3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< short,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageSS3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,3 > >
        GetNeighborhoodAccessor(itkImageSS3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,3 > > const
        """
        return _itkImagePython.itkImageSS3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageSS3

    def cast(obj: 'itkLightObject') -> "itkImageSS3 *":
        """cast(itkLightObject obj) -> itkImageSS3"""
        return _itkImagePython.itkImageSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSS3

        Create a new object of the class itkImageSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSS3.Clone = new_instancemethod(_itkImagePython.itkImageSS3_Clone, None, itkImageSS3)
itkImageSS3.Allocate = new_instancemethod(_itkImagePython.itkImageSS3_Allocate, None, itkImageSS3)
itkImageSS3.FillBuffer = new_instancemethod(_itkImagePython.itkImageSS3_FillBuffer, None, itkImageSS3)
itkImageSS3.SetPixel = new_instancemethod(_itkImagePython.itkImageSS3_SetPixel, None, itkImageSS3)
itkImageSS3.GetPixel = new_instancemethod(_itkImagePython.itkImageSS3_GetPixel, None, itkImageSS3)
itkImageSS3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageSS3_GetBufferPointer, None, itkImageSS3)
itkImageSS3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageSS3_GetPixelContainer, None, itkImageSS3)
itkImageSS3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageSS3_SetPixelContainer, None, itkImageSS3)
itkImageSS3.Graft = new_instancemethod(_itkImagePython.itkImageSS3_Graft, None, itkImageSS3)
itkImageSS3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageSS3_GetPixelAccessor, None, itkImageSS3)
itkImageSS3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageSS3_GetNeighborhoodAccessor, None, itkImageSS3)
itkImageSS3_swigregister = _itkImagePython.itkImageSS3_swigregister
itkImageSS3_swigregister(itkImageSS3)

def itkImageSS3___New_orig__() -> "itkImageSS3_Pointer":
    """itkImageSS3___New_orig__() -> itkImageSS3_Pointer"""
    return _itkImagePython.itkImageSS3___New_orig__()

def itkImageSS3_cast(obj: 'itkLightObject') -> "itkImageSS3 *":
    """itkImageSS3_cast(itkLightObject obj) -> itkImageSS3"""
    return _itkImagePython.itkImageSS3_cast(obj)

class itkImageSSRTD22(itkImageBase2):
    """Proxy of C++ itkImageSSRTD22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageSSRTD22_Pointer":
        """__New_orig__() -> itkImageSSRTD22_Pointer"""
        return _itkImagePython.itkImageSSRTD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageSSRTD22_Pointer":
        """Clone(itkImageSSRTD22 self) -> itkImageSSRTD22_Pointer"""
        return _itkImagePython.itkImageSSRTD22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageSSRTD22 self, bool initializePixels=False)
        Allocate(itkImageSSRTD22 self)
        """
        return _itkImagePython.itkImageSSRTD22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkSymmetricSecondRankTensorD2') -> "void":
        """FillBuffer(itkImageSSRTD22 self, itkSymmetricSecondRankTensorD2 value)"""
        return _itkImagePython.itkImageSSRTD22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkSymmetricSecondRankTensorD2') -> "void":
        """SetPixel(itkImageSSRTD22 self, itkIndex2 index, itkSymmetricSecondRankTensorD2 value)"""
        return _itkImagePython.itkImageSSRTD22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkSymmetricSecondRankTensorD2 &":
        """
        GetPixel(itkImageSSRTD22 self, itkIndex2 index) -> itkSymmetricSecondRankTensorD2
        GetPixel(itkImageSSRTD22 self, itkIndex2 index) -> itkSymmetricSecondRankTensorD2
        """
        return _itkImagePython.itkImageSSRTD22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkSymmetricSecondRankTensorD2 const *":
        """
        GetBufferPointer(itkImageSSRTD22 self) -> itkSymmetricSecondRankTensorD2
        GetBufferPointer(itkImageSSRTD22 self) -> itkSymmetricSecondRankTensorD2
        """
        return _itkImagePython.itkImageSSRTD22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,2 > > const *":
        """
        GetPixelContainer(itkImageSSRTD22 self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,2 > >
        GetPixelContainer(itkImageSSRTD22 self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,2 > > const *
        """
        return _itkImagePython.itkImageSSRTD22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,2 > > *') -> "void":
        """SetPixelContainer(itkImageSSRTD22 self, itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,2 > > * container)"""
        return _itkImagePython.itkImageSSRTD22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageSSRTD22') -> "void":
        """Graft(itkImageSSRTD22 self, itkImageSSRTD22 data)"""
        return _itkImagePython.itkImageSSRTD22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,2 > > const":
        """
        GetPixelAccessor(itkImageSSRTD22 self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,2 > >
        GetPixelAccessor(itkImageSSRTD22 self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,2 > > const
        """
        return _itkImagePython.itkImageSSRTD22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageSSRTD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,2 >,2 > >
        GetNeighborhoodAccessor(itkImageSSRTD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,2 >,2 > > const
        """
        return _itkImagePython.itkImageSSRTD22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageSSRTD22

    def cast(obj: 'itkLightObject') -> "itkImageSSRTD22 *":
        """cast(itkLightObject obj) -> itkImageSSRTD22"""
        return _itkImagePython.itkImageSSRTD22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSSRTD22

        Create a new object of the class itkImageSSRTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSSRTD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSSRTD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSSRTD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSSRTD22.Clone = new_instancemethod(_itkImagePython.itkImageSSRTD22_Clone, None, itkImageSSRTD22)
itkImageSSRTD22.Allocate = new_instancemethod(_itkImagePython.itkImageSSRTD22_Allocate, None, itkImageSSRTD22)
itkImageSSRTD22.FillBuffer = new_instancemethod(_itkImagePython.itkImageSSRTD22_FillBuffer, None, itkImageSSRTD22)
itkImageSSRTD22.SetPixel = new_instancemethod(_itkImagePython.itkImageSSRTD22_SetPixel, None, itkImageSSRTD22)
itkImageSSRTD22.GetPixel = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetPixel, None, itkImageSSRTD22)
itkImageSSRTD22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetBufferPointer, None, itkImageSSRTD22)
itkImageSSRTD22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetPixelContainer, None, itkImageSSRTD22)
itkImageSSRTD22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageSSRTD22_SetPixelContainer, None, itkImageSSRTD22)
itkImageSSRTD22.Graft = new_instancemethod(_itkImagePython.itkImageSSRTD22_Graft, None, itkImageSSRTD22)
itkImageSSRTD22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetPixelAccessor, None, itkImageSSRTD22)
itkImageSSRTD22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetNeighborhoodAccessor, None, itkImageSSRTD22)
itkImageSSRTD22_swigregister = _itkImagePython.itkImageSSRTD22_swigregister
itkImageSSRTD22_swigregister(itkImageSSRTD22)

def itkImageSSRTD22___New_orig__() -> "itkImageSSRTD22_Pointer":
    """itkImageSSRTD22___New_orig__() -> itkImageSSRTD22_Pointer"""
    return _itkImagePython.itkImageSSRTD22___New_orig__()

def itkImageSSRTD22_cast(obj: 'itkLightObject') -> "itkImageSSRTD22 *":
    """itkImageSSRTD22_cast(itkLightObject obj) -> itkImageSSRTD22"""
    return _itkImagePython.itkImageSSRTD22_cast(obj)

class itkImageSSRTD33(itkImageBase3):
    """Proxy of C++ itkImageSSRTD33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageSSRTD33_Pointer":
        """__New_orig__() -> itkImageSSRTD33_Pointer"""
        return _itkImagePython.itkImageSSRTD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageSSRTD33_Pointer":
        """Clone(itkImageSSRTD33 self) -> itkImageSSRTD33_Pointer"""
        return _itkImagePython.itkImageSSRTD33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageSSRTD33 self, bool initializePixels=False)
        Allocate(itkImageSSRTD33 self)
        """
        return _itkImagePython.itkImageSSRTD33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkSymmetricSecondRankTensorD3') -> "void":
        """FillBuffer(itkImageSSRTD33 self, itkSymmetricSecondRankTensorD3 value)"""
        return _itkImagePython.itkImageSSRTD33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkSymmetricSecondRankTensorD3') -> "void":
        """SetPixel(itkImageSSRTD33 self, itkIndex3 index, itkSymmetricSecondRankTensorD3 value)"""
        return _itkImagePython.itkImageSSRTD33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkSymmetricSecondRankTensorD3 &":
        """
        GetPixel(itkImageSSRTD33 self, itkIndex3 index) -> itkSymmetricSecondRankTensorD3
        GetPixel(itkImageSSRTD33 self, itkIndex3 index) -> itkSymmetricSecondRankTensorD3
        """
        return _itkImagePython.itkImageSSRTD33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkSymmetricSecondRankTensorD3 const *":
        """
        GetBufferPointer(itkImageSSRTD33 self) -> itkSymmetricSecondRankTensorD3
        GetBufferPointer(itkImageSSRTD33 self) -> itkSymmetricSecondRankTensorD3
        """
        return _itkImagePython.itkImageSSRTD33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,3 > > const *":
        """
        GetPixelContainer(itkImageSSRTD33 self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,3 > >
        GetPixelContainer(itkImageSSRTD33 self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,3 > > const *
        """
        return _itkImagePython.itkImageSSRTD33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,3 > > *') -> "void":
        """SetPixelContainer(itkImageSSRTD33 self, itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,3 > > * container)"""
        return _itkImagePython.itkImageSSRTD33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageSSRTD33') -> "void":
        """Graft(itkImageSSRTD33 self, itkImageSSRTD33 data)"""
        return _itkImagePython.itkImageSSRTD33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,3 > > const":
        """
        GetPixelAccessor(itkImageSSRTD33 self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,3 > >
        GetPixelAccessor(itkImageSSRTD33 self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,3 > > const
        """
        return _itkImagePython.itkImageSSRTD33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageSSRTD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,3 >,3 > >
        GetNeighborhoodAccessor(itkImageSSRTD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,3 >,3 > > const
        """
        return _itkImagePython.itkImageSSRTD33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageSSRTD33

    def cast(obj: 'itkLightObject') -> "itkImageSSRTD33 *":
        """cast(itkLightObject obj) -> itkImageSSRTD33"""
        return _itkImagePython.itkImageSSRTD33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSSRTD33

        Create a new object of the class itkImageSSRTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSSRTD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSSRTD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSSRTD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSSRTD33.Clone = new_instancemethod(_itkImagePython.itkImageSSRTD33_Clone, None, itkImageSSRTD33)
itkImageSSRTD33.Allocate = new_instancemethod(_itkImagePython.itkImageSSRTD33_Allocate, None, itkImageSSRTD33)
itkImageSSRTD33.FillBuffer = new_instancemethod(_itkImagePython.itkImageSSRTD33_FillBuffer, None, itkImageSSRTD33)
itkImageSSRTD33.SetPixel = new_instancemethod(_itkImagePython.itkImageSSRTD33_SetPixel, None, itkImageSSRTD33)
itkImageSSRTD33.GetPixel = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetPixel, None, itkImageSSRTD33)
itkImageSSRTD33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetBufferPointer, None, itkImageSSRTD33)
itkImageSSRTD33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetPixelContainer, None, itkImageSSRTD33)
itkImageSSRTD33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageSSRTD33_SetPixelContainer, None, itkImageSSRTD33)
itkImageSSRTD33.Graft = new_instancemethod(_itkImagePython.itkImageSSRTD33_Graft, None, itkImageSSRTD33)
itkImageSSRTD33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetPixelAccessor, None, itkImageSSRTD33)
itkImageSSRTD33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetNeighborhoodAccessor, None, itkImageSSRTD33)
itkImageSSRTD33_swigregister = _itkImagePython.itkImageSSRTD33_swigregister
itkImageSSRTD33_swigregister(itkImageSSRTD33)

def itkImageSSRTD33___New_orig__() -> "itkImageSSRTD33_Pointer":
    """itkImageSSRTD33___New_orig__() -> itkImageSSRTD33_Pointer"""
    return _itkImagePython.itkImageSSRTD33___New_orig__()

def itkImageSSRTD33_cast(obj: 'itkLightObject') -> "itkImageSSRTD33 *":
    """itkImageSSRTD33_cast(itkLightObject obj) -> itkImageSSRTD33"""
    return _itkImagePython.itkImageSSRTD33_cast(obj)

class itkImageUC2(itkImageBase2):
    """Proxy of C++ itkImageUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageUC2_Pointer":
        """__New_orig__() -> itkImageUC2_Pointer"""
        return _itkImagePython.itkImageUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageUC2_Pointer":
        """Clone(itkImageUC2 self) -> itkImageUC2_Pointer"""
        return _itkImagePython.itkImageUC2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageUC2 self, bool initializePixels=False)
        Allocate(itkImageUC2 self)
        """
        return _itkImagePython.itkImageUC2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned char const &') -> "void":
        """FillBuffer(itkImageUC2 self, unsigned char const & value)"""
        return _itkImagePython.itkImageUC2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'unsigned char const &') -> "void":
        """SetPixel(itkImageUC2 self, itkIndex2 index, unsigned char const & value)"""
        return _itkImagePython.itkImageUC2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned char &":
        """
        GetPixel(itkImageUC2 self, itkIndex2 index) -> unsigned char const
        GetPixel(itkImageUC2 self, itkIndex2 index) -> unsigned char &
        """
        return _itkImagePython.itkImageUC2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned char const *":
        """
        GetBufferPointer(itkImageUC2 self) -> unsigned char
        GetBufferPointer(itkImageUC2 self) -> unsigned char const *
        """
        return _itkImagePython.itkImageUC2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,unsigned char > const *":
        """
        GetPixelContainer(itkImageUC2 self) -> itk::ImportImageContainer< unsigned long long,unsigned char >
        GetPixelContainer(itkImageUC2 self) -> itk::ImportImageContainer< unsigned long long,unsigned char > const *
        """
        return _itkImagePython.itkImageUC2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,unsigned char > *') -> "void":
        """SetPixelContainer(itkImageUC2 self, itk::ImportImageContainer< unsigned long long,unsigned char > * container)"""
        return _itkImagePython.itkImageUC2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageUC2') -> "void":
        """Graft(itkImageUC2 self, itkImageUC2 data)"""
        return _itkImagePython.itkImageUC2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned char > const":
        """
        GetPixelAccessor(itkImageUC2 self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(itkImageUC2 self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkImagePython.itkImageUC2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,2 > >
        GetNeighborhoodAccessor(itkImageUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,2 > > const
        """
        return _itkImagePython.itkImageUC2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUC2

    def cast(obj: 'itkLightObject') -> "itkImageUC2 *":
        """cast(itkLightObject obj) -> itkImageUC2"""
        return _itkImagePython.itkImageUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageUC2

        Create a new object of the class itkImageUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUC2.Clone = new_instancemethod(_itkImagePython.itkImageUC2_Clone, None, itkImageUC2)
itkImageUC2.Allocate = new_instancemethod(_itkImagePython.itkImageUC2_Allocate, None, itkImageUC2)
itkImageUC2.FillBuffer = new_instancemethod(_itkImagePython.itkImageUC2_FillBuffer, None, itkImageUC2)
itkImageUC2.SetPixel = new_instancemethod(_itkImagePython.itkImageUC2_SetPixel, None, itkImageUC2)
itkImageUC2.GetPixel = new_instancemethod(_itkImagePython.itkImageUC2_GetPixel, None, itkImageUC2)
itkImageUC2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUC2_GetBufferPointer, None, itkImageUC2)
itkImageUC2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUC2_GetPixelContainer, None, itkImageUC2)
itkImageUC2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUC2_SetPixelContainer, None, itkImageUC2)
itkImageUC2.Graft = new_instancemethod(_itkImagePython.itkImageUC2_Graft, None, itkImageUC2)
itkImageUC2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUC2_GetPixelAccessor, None, itkImageUC2)
itkImageUC2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUC2_GetNeighborhoodAccessor, None, itkImageUC2)
itkImageUC2_swigregister = _itkImagePython.itkImageUC2_swigregister
itkImageUC2_swigregister(itkImageUC2)

def itkImageUC2___New_orig__() -> "itkImageUC2_Pointer":
    """itkImageUC2___New_orig__() -> itkImageUC2_Pointer"""
    return _itkImagePython.itkImageUC2___New_orig__()

def itkImageUC2_cast(obj: 'itkLightObject') -> "itkImageUC2 *":
    """itkImageUC2_cast(itkLightObject obj) -> itkImageUC2"""
    return _itkImagePython.itkImageUC2_cast(obj)

class itkImageUC3(itkImageBase3):
    """Proxy of C++ itkImageUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageUC3_Pointer":
        """__New_orig__() -> itkImageUC3_Pointer"""
        return _itkImagePython.itkImageUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageUC3_Pointer":
        """Clone(itkImageUC3 self) -> itkImageUC3_Pointer"""
        return _itkImagePython.itkImageUC3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageUC3 self, bool initializePixels=False)
        Allocate(itkImageUC3 self)
        """
        return _itkImagePython.itkImageUC3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned char const &') -> "void":
        """FillBuffer(itkImageUC3 self, unsigned char const & value)"""
        return _itkImagePython.itkImageUC3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'unsigned char const &') -> "void":
        """SetPixel(itkImageUC3 self, itkIndex3 index, unsigned char const & value)"""
        return _itkImagePython.itkImageUC3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned char &":
        """
        GetPixel(itkImageUC3 self, itkIndex3 index) -> unsigned char const
        GetPixel(itkImageUC3 self, itkIndex3 index) -> unsigned char &
        """
        return _itkImagePython.itkImageUC3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned char const *":
        """
        GetBufferPointer(itkImageUC3 self) -> unsigned char
        GetBufferPointer(itkImageUC3 self) -> unsigned char const *
        """
        return _itkImagePython.itkImageUC3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,unsigned char > const *":
        """
        GetPixelContainer(itkImageUC3 self) -> itk::ImportImageContainer< unsigned long long,unsigned char >
        GetPixelContainer(itkImageUC3 self) -> itk::ImportImageContainer< unsigned long long,unsigned char > const *
        """
        return _itkImagePython.itkImageUC3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,unsigned char > *') -> "void":
        """SetPixelContainer(itkImageUC3 self, itk::ImportImageContainer< unsigned long long,unsigned char > * container)"""
        return _itkImagePython.itkImageUC3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageUC3') -> "void":
        """Graft(itkImageUC3 self, itkImageUC3 data)"""
        return _itkImagePython.itkImageUC3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned char > const":
        """
        GetPixelAccessor(itkImageUC3 self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(itkImageUC3 self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkImagePython.itkImageUC3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,3 > >
        GetNeighborhoodAccessor(itkImageUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,3 > > const
        """
        return _itkImagePython.itkImageUC3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUC3

    def cast(obj: 'itkLightObject') -> "itkImageUC3 *":
        """cast(itkLightObject obj) -> itkImageUC3"""
        return _itkImagePython.itkImageUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageUC3

        Create a new object of the class itkImageUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUC3.Clone = new_instancemethod(_itkImagePython.itkImageUC3_Clone, None, itkImageUC3)
itkImageUC3.Allocate = new_instancemethod(_itkImagePython.itkImageUC3_Allocate, None, itkImageUC3)
itkImageUC3.FillBuffer = new_instancemethod(_itkImagePython.itkImageUC3_FillBuffer, None, itkImageUC3)
itkImageUC3.SetPixel = new_instancemethod(_itkImagePython.itkImageUC3_SetPixel, None, itkImageUC3)
itkImageUC3.GetPixel = new_instancemethod(_itkImagePython.itkImageUC3_GetPixel, None, itkImageUC3)
itkImageUC3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUC3_GetBufferPointer, None, itkImageUC3)
itkImageUC3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUC3_GetPixelContainer, None, itkImageUC3)
itkImageUC3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUC3_SetPixelContainer, None, itkImageUC3)
itkImageUC3.Graft = new_instancemethod(_itkImagePython.itkImageUC3_Graft, None, itkImageUC3)
itkImageUC3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUC3_GetPixelAccessor, None, itkImageUC3)
itkImageUC3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUC3_GetNeighborhoodAccessor, None, itkImageUC3)
itkImageUC3_swigregister = _itkImagePython.itkImageUC3_swigregister
itkImageUC3_swigregister(itkImageUC3)

def itkImageUC3___New_orig__() -> "itkImageUC3_Pointer":
    """itkImageUC3___New_orig__() -> itkImageUC3_Pointer"""
    return _itkImagePython.itkImageUC3___New_orig__()

def itkImageUC3_cast(obj: 'itkLightObject') -> "itkImageUC3 *":
    """itkImageUC3_cast(itkLightObject obj) -> itkImageUC3"""
    return _itkImagePython.itkImageUC3_cast(obj)

class itkImageUL2(itkImageBase2):
    """Proxy of C++ itkImageUL2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageUL2_Pointer":
        """__New_orig__() -> itkImageUL2_Pointer"""
        return _itkImagePython.itkImageUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageUL2_Pointer":
        """Clone(itkImageUL2 self) -> itkImageUL2_Pointer"""
        return _itkImagePython.itkImageUL2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageUL2 self, bool initializePixels=False)
        Allocate(itkImageUL2 self)
        """
        return _itkImagePython.itkImageUL2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned long const &') -> "void":
        """FillBuffer(itkImageUL2 self, unsigned long const & value)"""
        return _itkImagePython.itkImageUL2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'unsigned long const &') -> "void":
        """SetPixel(itkImageUL2 self, itkIndex2 index, unsigned long const & value)"""
        return _itkImagePython.itkImageUL2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned long &":
        """
        GetPixel(itkImageUL2 self, itkIndex2 index) -> unsigned long const
        GetPixel(itkImageUL2 self, itkIndex2 index) -> unsigned long &
        """
        return _itkImagePython.itkImageUL2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned long const *":
        """
        GetBufferPointer(itkImageUL2 self) -> unsigned long
        GetBufferPointer(itkImageUL2 self) -> unsigned long const *
        """
        return _itkImagePython.itkImageUL2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,unsigned long > const *":
        """
        GetPixelContainer(itkImageUL2 self) -> itk::ImportImageContainer< unsigned long long,unsigned long >
        GetPixelContainer(itkImageUL2 self) -> itk::ImportImageContainer< unsigned long long,unsigned long > const *
        """
        return _itkImagePython.itkImageUL2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,unsigned long > *') -> "void":
        """SetPixelContainer(itkImageUL2 self, itk::ImportImageContainer< unsigned long long,unsigned long > * container)"""
        return _itkImagePython.itkImageUL2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageUL2') -> "void":
        """Graft(itkImageUL2 self, itkImageUL2 data)"""
        return _itkImagePython.itkImageUL2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned long > const":
        """
        GetPixelAccessor(itkImageUL2 self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(itkImageUL2 self) -> itk::DefaultPixelAccessor< unsigned long > const
        """
        return _itkImagePython.itkImageUL2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageUL2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,2 > >
        GetNeighborhoodAccessor(itkImageUL2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,2 > > const
        """
        return _itkImagePython.itkImageUL2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUL2

    def cast(obj: 'itkLightObject') -> "itkImageUL2 *":
        """cast(itkLightObject obj) -> itkImageUL2"""
        return _itkImagePython.itkImageUL2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageUL2

        Create a new object of the class itkImageUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUL2.Clone = new_instancemethod(_itkImagePython.itkImageUL2_Clone, None, itkImageUL2)
itkImageUL2.Allocate = new_instancemethod(_itkImagePython.itkImageUL2_Allocate, None, itkImageUL2)
itkImageUL2.FillBuffer = new_instancemethod(_itkImagePython.itkImageUL2_FillBuffer, None, itkImageUL2)
itkImageUL2.SetPixel = new_instancemethod(_itkImagePython.itkImageUL2_SetPixel, None, itkImageUL2)
itkImageUL2.GetPixel = new_instancemethod(_itkImagePython.itkImageUL2_GetPixel, None, itkImageUL2)
itkImageUL2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUL2_GetBufferPointer, None, itkImageUL2)
itkImageUL2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUL2_GetPixelContainer, None, itkImageUL2)
itkImageUL2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUL2_SetPixelContainer, None, itkImageUL2)
itkImageUL2.Graft = new_instancemethod(_itkImagePython.itkImageUL2_Graft, None, itkImageUL2)
itkImageUL2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUL2_GetPixelAccessor, None, itkImageUL2)
itkImageUL2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUL2_GetNeighborhoodAccessor, None, itkImageUL2)
itkImageUL2_swigregister = _itkImagePython.itkImageUL2_swigregister
itkImageUL2_swigregister(itkImageUL2)

def itkImageUL2___New_orig__() -> "itkImageUL2_Pointer":
    """itkImageUL2___New_orig__() -> itkImageUL2_Pointer"""
    return _itkImagePython.itkImageUL2___New_orig__()

def itkImageUL2_cast(obj: 'itkLightObject') -> "itkImageUL2 *":
    """itkImageUL2_cast(itkLightObject obj) -> itkImageUL2"""
    return _itkImagePython.itkImageUL2_cast(obj)

class itkImageUL3(itkImageBase3):
    """Proxy of C++ itkImageUL3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageUL3_Pointer":
        """__New_orig__() -> itkImageUL3_Pointer"""
        return _itkImagePython.itkImageUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageUL3_Pointer":
        """Clone(itkImageUL3 self) -> itkImageUL3_Pointer"""
        return _itkImagePython.itkImageUL3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageUL3 self, bool initializePixels=False)
        Allocate(itkImageUL3 self)
        """
        return _itkImagePython.itkImageUL3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned long const &') -> "void":
        """FillBuffer(itkImageUL3 self, unsigned long const & value)"""
        return _itkImagePython.itkImageUL3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'unsigned long const &') -> "void":
        """SetPixel(itkImageUL3 self, itkIndex3 index, unsigned long const & value)"""
        return _itkImagePython.itkImageUL3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned long &":
        """
        GetPixel(itkImageUL3 self, itkIndex3 index) -> unsigned long const
        GetPixel(itkImageUL3 self, itkIndex3 index) -> unsigned long &
        """
        return _itkImagePython.itkImageUL3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned long const *":
        """
        GetBufferPointer(itkImageUL3 self) -> unsigned long
        GetBufferPointer(itkImageUL3 self) -> unsigned long const *
        """
        return _itkImagePython.itkImageUL3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,unsigned long > const *":
        """
        GetPixelContainer(itkImageUL3 self) -> itk::ImportImageContainer< unsigned long long,unsigned long >
        GetPixelContainer(itkImageUL3 self) -> itk::ImportImageContainer< unsigned long long,unsigned long > const *
        """
        return _itkImagePython.itkImageUL3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,unsigned long > *') -> "void":
        """SetPixelContainer(itkImageUL3 self, itk::ImportImageContainer< unsigned long long,unsigned long > * container)"""
        return _itkImagePython.itkImageUL3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageUL3') -> "void":
        """Graft(itkImageUL3 self, itkImageUL3 data)"""
        return _itkImagePython.itkImageUL3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned long > const":
        """
        GetPixelAccessor(itkImageUL3 self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(itkImageUL3 self) -> itk::DefaultPixelAccessor< unsigned long > const
        """
        return _itkImagePython.itkImageUL3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageUL3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,3 > >
        GetNeighborhoodAccessor(itkImageUL3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,3 > > const
        """
        return _itkImagePython.itkImageUL3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUL3

    def cast(obj: 'itkLightObject') -> "itkImageUL3 *":
        """cast(itkLightObject obj) -> itkImageUL3"""
        return _itkImagePython.itkImageUL3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageUL3

        Create a new object of the class itkImageUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUL3.Clone = new_instancemethod(_itkImagePython.itkImageUL3_Clone, None, itkImageUL3)
itkImageUL3.Allocate = new_instancemethod(_itkImagePython.itkImageUL3_Allocate, None, itkImageUL3)
itkImageUL3.FillBuffer = new_instancemethod(_itkImagePython.itkImageUL3_FillBuffer, None, itkImageUL3)
itkImageUL3.SetPixel = new_instancemethod(_itkImagePython.itkImageUL3_SetPixel, None, itkImageUL3)
itkImageUL3.GetPixel = new_instancemethod(_itkImagePython.itkImageUL3_GetPixel, None, itkImageUL3)
itkImageUL3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUL3_GetBufferPointer, None, itkImageUL3)
itkImageUL3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUL3_GetPixelContainer, None, itkImageUL3)
itkImageUL3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUL3_SetPixelContainer, None, itkImageUL3)
itkImageUL3.Graft = new_instancemethod(_itkImagePython.itkImageUL3_Graft, None, itkImageUL3)
itkImageUL3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUL3_GetPixelAccessor, None, itkImageUL3)
itkImageUL3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUL3_GetNeighborhoodAccessor, None, itkImageUL3)
itkImageUL3_swigregister = _itkImagePython.itkImageUL3_swigregister
itkImageUL3_swigregister(itkImageUL3)

def itkImageUL3___New_orig__() -> "itkImageUL3_Pointer":
    """itkImageUL3___New_orig__() -> itkImageUL3_Pointer"""
    return _itkImagePython.itkImageUL3___New_orig__()

def itkImageUL3_cast(obj: 'itkLightObject') -> "itkImageUL3 *":
    """itkImageUL3_cast(itkLightObject obj) -> itkImageUL3"""
    return _itkImagePython.itkImageUL3_cast(obj)

class itkImageULL2(itkImageBase2):
    """Proxy of C++ itkImageULL2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageULL2_Pointer":
        """__New_orig__() -> itkImageULL2_Pointer"""
        return _itkImagePython.itkImageULL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageULL2_Pointer":
        """Clone(itkImageULL2 self) -> itkImageULL2_Pointer"""
        return _itkImagePython.itkImageULL2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageULL2 self, bool initializePixels=False)
        Allocate(itkImageULL2 self)
        """
        return _itkImagePython.itkImageULL2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned long long const &') -> "void":
        """FillBuffer(itkImageULL2 self, unsigned long long const & value)"""
        return _itkImagePython.itkImageULL2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'unsigned long long const &') -> "void":
        """SetPixel(itkImageULL2 self, itkIndex2 index, unsigned long long const & value)"""
        return _itkImagePython.itkImageULL2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned long long &":
        """
        GetPixel(itkImageULL2 self, itkIndex2 index) -> unsigned long long const
        GetPixel(itkImageULL2 self, itkIndex2 index) -> unsigned long long &
        """
        return _itkImagePython.itkImageULL2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned long long const *":
        """
        GetBufferPointer(itkImageULL2 self) -> unsigned long long
        GetBufferPointer(itkImageULL2 self) -> unsigned long long const *
        """
        return _itkImagePython.itkImageULL2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,unsigned long long > const *":
        """
        GetPixelContainer(itkImageULL2 self) -> itk::ImportImageContainer< unsigned long long,unsigned long long >
        GetPixelContainer(itkImageULL2 self) -> itk::ImportImageContainer< unsigned long long,unsigned long long > const *
        """
        return _itkImagePython.itkImageULL2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,unsigned long long > *') -> "void":
        """SetPixelContainer(itkImageULL2 self, itk::ImportImageContainer< unsigned long long,unsigned long long > * container)"""
        return _itkImagePython.itkImageULL2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageULL2') -> "void":
        """Graft(itkImageULL2 self, itkImageULL2 data)"""
        return _itkImagePython.itkImageULL2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned long long > const":
        """
        GetPixelAccessor(itkImageULL2 self) -> itk::DefaultPixelAccessor< unsigned long long >
        GetPixelAccessor(itkImageULL2 self) -> itk::DefaultPixelAccessor< unsigned long long > const
        """
        return _itkImagePython.itkImageULL2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageULL2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,2 > >
        GetNeighborhoodAccessor(itkImageULL2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,2 > > const
        """
        return _itkImagePython.itkImageULL2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageULL2

    def cast(obj: 'itkLightObject') -> "itkImageULL2 *":
        """cast(itkLightObject obj) -> itkImageULL2"""
        return _itkImagePython.itkImageULL2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageULL2

        Create a new object of the class itkImageULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageULL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageULL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageULL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageULL2.Clone = new_instancemethod(_itkImagePython.itkImageULL2_Clone, None, itkImageULL2)
itkImageULL2.Allocate = new_instancemethod(_itkImagePython.itkImageULL2_Allocate, None, itkImageULL2)
itkImageULL2.FillBuffer = new_instancemethod(_itkImagePython.itkImageULL2_FillBuffer, None, itkImageULL2)
itkImageULL2.SetPixel = new_instancemethod(_itkImagePython.itkImageULL2_SetPixel, None, itkImageULL2)
itkImageULL2.GetPixel = new_instancemethod(_itkImagePython.itkImageULL2_GetPixel, None, itkImageULL2)
itkImageULL2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageULL2_GetBufferPointer, None, itkImageULL2)
itkImageULL2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageULL2_GetPixelContainer, None, itkImageULL2)
itkImageULL2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageULL2_SetPixelContainer, None, itkImageULL2)
itkImageULL2.Graft = new_instancemethod(_itkImagePython.itkImageULL2_Graft, None, itkImageULL2)
itkImageULL2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageULL2_GetPixelAccessor, None, itkImageULL2)
itkImageULL2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageULL2_GetNeighborhoodAccessor, None, itkImageULL2)
itkImageULL2_swigregister = _itkImagePython.itkImageULL2_swigregister
itkImageULL2_swigregister(itkImageULL2)

def itkImageULL2___New_orig__() -> "itkImageULL2_Pointer":
    """itkImageULL2___New_orig__() -> itkImageULL2_Pointer"""
    return _itkImagePython.itkImageULL2___New_orig__()

def itkImageULL2_cast(obj: 'itkLightObject') -> "itkImageULL2 *":
    """itkImageULL2_cast(itkLightObject obj) -> itkImageULL2"""
    return _itkImagePython.itkImageULL2_cast(obj)

class itkImageULL3(itkImageBase3):
    """Proxy of C++ itkImageULL3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageULL3_Pointer":
        """__New_orig__() -> itkImageULL3_Pointer"""
        return _itkImagePython.itkImageULL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageULL3_Pointer":
        """Clone(itkImageULL3 self) -> itkImageULL3_Pointer"""
        return _itkImagePython.itkImageULL3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageULL3 self, bool initializePixels=False)
        Allocate(itkImageULL3 self)
        """
        return _itkImagePython.itkImageULL3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned long long const &') -> "void":
        """FillBuffer(itkImageULL3 self, unsigned long long const & value)"""
        return _itkImagePython.itkImageULL3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'unsigned long long const &') -> "void":
        """SetPixel(itkImageULL3 self, itkIndex3 index, unsigned long long const & value)"""
        return _itkImagePython.itkImageULL3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned long long &":
        """
        GetPixel(itkImageULL3 self, itkIndex3 index) -> unsigned long long const
        GetPixel(itkImageULL3 self, itkIndex3 index) -> unsigned long long &
        """
        return _itkImagePython.itkImageULL3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned long long const *":
        """
        GetBufferPointer(itkImageULL3 self) -> unsigned long long
        GetBufferPointer(itkImageULL3 self) -> unsigned long long const *
        """
        return _itkImagePython.itkImageULL3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,unsigned long long > const *":
        """
        GetPixelContainer(itkImageULL3 self) -> itk::ImportImageContainer< unsigned long long,unsigned long long >
        GetPixelContainer(itkImageULL3 self) -> itk::ImportImageContainer< unsigned long long,unsigned long long > const *
        """
        return _itkImagePython.itkImageULL3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,unsigned long long > *') -> "void":
        """SetPixelContainer(itkImageULL3 self, itk::ImportImageContainer< unsigned long long,unsigned long long > * container)"""
        return _itkImagePython.itkImageULL3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageULL3') -> "void":
        """Graft(itkImageULL3 self, itkImageULL3 data)"""
        return _itkImagePython.itkImageULL3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned long long > const":
        """
        GetPixelAccessor(itkImageULL3 self) -> itk::DefaultPixelAccessor< unsigned long long >
        GetPixelAccessor(itkImageULL3 self) -> itk::DefaultPixelAccessor< unsigned long long > const
        """
        return _itkImagePython.itkImageULL3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageULL3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,3 > >
        GetNeighborhoodAccessor(itkImageULL3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,3 > > const
        """
        return _itkImagePython.itkImageULL3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageULL3

    def cast(obj: 'itkLightObject') -> "itkImageULL3 *":
        """cast(itkLightObject obj) -> itkImageULL3"""
        return _itkImagePython.itkImageULL3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageULL3

        Create a new object of the class itkImageULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageULL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageULL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageULL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageULL3.Clone = new_instancemethod(_itkImagePython.itkImageULL3_Clone, None, itkImageULL3)
itkImageULL3.Allocate = new_instancemethod(_itkImagePython.itkImageULL3_Allocate, None, itkImageULL3)
itkImageULL3.FillBuffer = new_instancemethod(_itkImagePython.itkImageULL3_FillBuffer, None, itkImageULL3)
itkImageULL3.SetPixel = new_instancemethod(_itkImagePython.itkImageULL3_SetPixel, None, itkImageULL3)
itkImageULL3.GetPixel = new_instancemethod(_itkImagePython.itkImageULL3_GetPixel, None, itkImageULL3)
itkImageULL3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageULL3_GetBufferPointer, None, itkImageULL3)
itkImageULL3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageULL3_GetPixelContainer, None, itkImageULL3)
itkImageULL3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageULL3_SetPixelContainer, None, itkImageULL3)
itkImageULL3.Graft = new_instancemethod(_itkImagePython.itkImageULL3_Graft, None, itkImageULL3)
itkImageULL3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageULL3_GetPixelAccessor, None, itkImageULL3)
itkImageULL3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageULL3_GetNeighborhoodAccessor, None, itkImageULL3)
itkImageULL3_swigregister = _itkImagePython.itkImageULL3_swigregister
itkImageULL3_swigregister(itkImageULL3)

def itkImageULL3___New_orig__() -> "itkImageULL3_Pointer":
    """itkImageULL3___New_orig__() -> itkImageULL3_Pointer"""
    return _itkImagePython.itkImageULL3___New_orig__()

def itkImageULL3_cast(obj: 'itkLightObject') -> "itkImageULL3 *":
    """itkImageULL3_cast(itkLightObject obj) -> itkImageULL3"""
    return _itkImagePython.itkImageULL3_cast(obj)

class itkImageUS2(itkImageBase2):
    """Proxy of C++ itkImageUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageUS2_Pointer":
        """__New_orig__() -> itkImageUS2_Pointer"""
        return _itkImagePython.itkImageUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageUS2_Pointer":
        """Clone(itkImageUS2 self) -> itkImageUS2_Pointer"""
        return _itkImagePython.itkImageUS2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageUS2 self, bool initializePixels=False)
        Allocate(itkImageUS2 self)
        """
        return _itkImagePython.itkImageUS2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned short const &') -> "void":
        """FillBuffer(itkImageUS2 self, unsigned short const & value)"""
        return _itkImagePython.itkImageUS2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'unsigned short const &') -> "void":
        """SetPixel(itkImageUS2 self, itkIndex2 index, unsigned short const & value)"""
        return _itkImagePython.itkImageUS2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned short &":
        """
        GetPixel(itkImageUS2 self, itkIndex2 index) -> unsigned short const
        GetPixel(itkImageUS2 self, itkIndex2 index) -> unsigned short &
        """
        return _itkImagePython.itkImageUS2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned short const *":
        """
        GetBufferPointer(itkImageUS2 self) -> unsigned short
        GetBufferPointer(itkImageUS2 self) -> unsigned short const *
        """
        return _itkImagePython.itkImageUS2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,unsigned short > const *":
        """
        GetPixelContainer(itkImageUS2 self) -> itk::ImportImageContainer< unsigned long long,unsigned short >
        GetPixelContainer(itkImageUS2 self) -> itk::ImportImageContainer< unsigned long long,unsigned short > const *
        """
        return _itkImagePython.itkImageUS2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,unsigned short > *') -> "void":
        """SetPixelContainer(itkImageUS2 self, itk::ImportImageContainer< unsigned long long,unsigned short > * container)"""
        return _itkImagePython.itkImageUS2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageUS2') -> "void":
        """Graft(itkImageUS2 self, itkImageUS2 data)"""
        return _itkImagePython.itkImageUS2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned short > const":
        """
        GetPixelAccessor(itkImageUS2 self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(itkImageUS2 self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkImagePython.itkImageUS2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageUS2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,2 > >
        GetNeighborhoodAccessor(itkImageUS2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,2 > > const
        """
        return _itkImagePython.itkImageUS2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUS2

    def cast(obj: 'itkLightObject') -> "itkImageUS2 *":
        """cast(itkLightObject obj) -> itkImageUS2"""
        return _itkImagePython.itkImageUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageUS2

        Create a new object of the class itkImageUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUS2.Clone = new_instancemethod(_itkImagePython.itkImageUS2_Clone, None, itkImageUS2)
itkImageUS2.Allocate = new_instancemethod(_itkImagePython.itkImageUS2_Allocate, None, itkImageUS2)
itkImageUS2.FillBuffer = new_instancemethod(_itkImagePython.itkImageUS2_FillBuffer, None, itkImageUS2)
itkImageUS2.SetPixel = new_instancemethod(_itkImagePython.itkImageUS2_SetPixel, None, itkImageUS2)
itkImageUS2.GetPixel = new_instancemethod(_itkImagePython.itkImageUS2_GetPixel, None, itkImageUS2)
itkImageUS2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUS2_GetBufferPointer, None, itkImageUS2)
itkImageUS2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUS2_GetPixelContainer, None, itkImageUS2)
itkImageUS2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUS2_SetPixelContainer, None, itkImageUS2)
itkImageUS2.Graft = new_instancemethod(_itkImagePython.itkImageUS2_Graft, None, itkImageUS2)
itkImageUS2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUS2_GetPixelAccessor, None, itkImageUS2)
itkImageUS2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUS2_GetNeighborhoodAccessor, None, itkImageUS2)
itkImageUS2_swigregister = _itkImagePython.itkImageUS2_swigregister
itkImageUS2_swigregister(itkImageUS2)

def itkImageUS2___New_orig__() -> "itkImageUS2_Pointer":
    """itkImageUS2___New_orig__() -> itkImageUS2_Pointer"""
    return _itkImagePython.itkImageUS2___New_orig__()

def itkImageUS2_cast(obj: 'itkLightObject') -> "itkImageUS2 *":
    """itkImageUS2_cast(itkLightObject obj) -> itkImageUS2"""
    return _itkImagePython.itkImageUS2_cast(obj)

class itkImageUS3(itkImageBase3):
    """Proxy of C++ itkImageUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageUS3_Pointer":
        """__New_orig__() -> itkImageUS3_Pointer"""
        return _itkImagePython.itkImageUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageUS3_Pointer":
        """Clone(itkImageUS3 self) -> itkImageUS3_Pointer"""
        return _itkImagePython.itkImageUS3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageUS3 self, bool initializePixels=False)
        Allocate(itkImageUS3 self)
        """
        return _itkImagePython.itkImageUS3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned short const &') -> "void":
        """FillBuffer(itkImageUS3 self, unsigned short const & value)"""
        return _itkImagePython.itkImageUS3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'unsigned short const &') -> "void":
        """SetPixel(itkImageUS3 self, itkIndex3 index, unsigned short const & value)"""
        return _itkImagePython.itkImageUS3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned short &":
        """
        GetPixel(itkImageUS3 self, itkIndex3 index) -> unsigned short const
        GetPixel(itkImageUS3 self, itkIndex3 index) -> unsigned short &
        """
        return _itkImagePython.itkImageUS3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned short const *":
        """
        GetBufferPointer(itkImageUS3 self) -> unsigned short
        GetBufferPointer(itkImageUS3 self) -> unsigned short const *
        """
        return _itkImagePython.itkImageUS3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,unsigned short > const *":
        """
        GetPixelContainer(itkImageUS3 self) -> itk::ImportImageContainer< unsigned long long,unsigned short >
        GetPixelContainer(itkImageUS3 self) -> itk::ImportImageContainer< unsigned long long,unsigned short > const *
        """
        return _itkImagePython.itkImageUS3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,unsigned short > *') -> "void":
        """SetPixelContainer(itkImageUS3 self, itk::ImportImageContainer< unsigned long long,unsigned short > * container)"""
        return _itkImagePython.itkImageUS3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageUS3') -> "void":
        """Graft(itkImageUS3 self, itkImageUS3 data)"""
        return _itkImagePython.itkImageUS3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned short > const":
        """
        GetPixelAccessor(itkImageUS3 self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(itkImageUS3 self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkImagePython.itkImageUS3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageUS3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,3 > >
        GetNeighborhoodAccessor(itkImageUS3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,3 > > const
        """
        return _itkImagePython.itkImageUS3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUS3

    def cast(obj: 'itkLightObject') -> "itkImageUS3 *":
        """cast(itkLightObject obj) -> itkImageUS3"""
        return _itkImagePython.itkImageUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageUS3

        Create a new object of the class itkImageUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUS3.Clone = new_instancemethod(_itkImagePython.itkImageUS3_Clone, None, itkImageUS3)
itkImageUS3.Allocate = new_instancemethod(_itkImagePython.itkImageUS3_Allocate, None, itkImageUS3)
itkImageUS3.FillBuffer = new_instancemethod(_itkImagePython.itkImageUS3_FillBuffer, None, itkImageUS3)
itkImageUS3.SetPixel = new_instancemethod(_itkImagePython.itkImageUS3_SetPixel, None, itkImageUS3)
itkImageUS3.GetPixel = new_instancemethod(_itkImagePython.itkImageUS3_GetPixel, None, itkImageUS3)
itkImageUS3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUS3_GetBufferPointer, None, itkImageUS3)
itkImageUS3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUS3_GetPixelContainer, None, itkImageUS3)
itkImageUS3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUS3_SetPixelContainer, None, itkImageUS3)
itkImageUS3.Graft = new_instancemethod(_itkImagePython.itkImageUS3_Graft, None, itkImageUS3)
itkImageUS3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUS3_GetPixelAccessor, None, itkImageUS3)
itkImageUS3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUS3_GetNeighborhoodAccessor, None, itkImageUS3)
itkImageUS3_swigregister = _itkImagePython.itkImageUS3_swigregister
itkImageUS3_swigregister(itkImageUS3)

def itkImageUS3___New_orig__() -> "itkImageUS3_Pointer":
    """itkImageUS3___New_orig__() -> itkImageUS3_Pointer"""
    return _itkImagePython.itkImageUS3___New_orig__()

def itkImageUS3_cast(obj: 'itkLightObject') -> "itkImageUS3 *":
    """itkImageUS3_cast(itkLightObject obj) -> itkImageUS3"""
    return _itkImagePython.itkImageUS3_cast(obj)

class itkImageVD22(itkImageBase2):
    """Proxy of C++ itkImageVD22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD22_Pointer":
        """__New_orig__() -> itkImageVD22_Pointer"""
        return _itkImagePython.itkImageVD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD22_Pointer":
        """Clone(itkImageVD22 self) -> itkImageVD22_Pointer"""
        return _itkImagePython.itkImageVD22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD22 self, bool initializePixels=False)
        Allocate(itkImageVD22 self)
        """
        return _itkImagePython.itkImageVD22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD2') -> "void":
        """FillBuffer(itkImageVD22 self, itkVectorD2 value)"""
        return _itkImagePython.itkImageVD22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorD2') -> "void":
        """SetPixel(itkImageVD22 self, itkIndex2 index, itkVectorD2 value)"""
        return _itkImagePython.itkImageVD22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD2 &":
        """
        GetPixel(itkImageVD22 self, itkIndex2 index) -> itkVectorD2
        GetPixel(itkImageVD22 self, itkIndex2 index) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD2 const *":
        """
        GetBufferPointer(itkImageVD22 self) -> itkVectorD2
        GetBufferPointer(itkImageVD22 self) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > const *":
        """
        GetPixelContainer(itkImageVD22 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > >
        GetPixelContainer(itkImageVD22 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > const *
        """
        return _itkImagePython.itkImageVD22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > *') -> "void":
        """SetPixelContainer(itkImageVD22 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > * container)"""
        return _itkImagePython.itkImageVD22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD22') -> "void":
        """Graft(itkImageVD22 self, itkImageVD22 data)"""
        return _itkImagePython.itkImageVD22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,2 > > const":
        """
        GetPixelAccessor(itkImageVD22 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > >
        GetPixelAccessor(itkImageVD22 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > > const
        """
        return _itkImagePython.itkImageVD22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,2 > >
        GetNeighborhoodAccessor(itkImageVD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,2 > > const
        """
        return _itkImagePython.itkImageVD22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD22

    def cast(obj: 'itkLightObject') -> "itkImageVD22 *":
        """cast(itkLightObject obj) -> itkImageVD22"""
        return _itkImagePython.itkImageVD22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVD22

        Create a new object of the class itkImageVD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD22.Clone = new_instancemethod(_itkImagePython.itkImageVD22_Clone, None, itkImageVD22)
itkImageVD22.Allocate = new_instancemethod(_itkImagePython.itkImageVD22_Allocate, None, itkImageVD22)
itkImageVD22.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD22_FillBuffer, None, itkImageVD22)
itkImageVD22.SetPixel = new_instancemethod(_itkImagePython.itkImageVD22_SetPixel, None, itkImageVD22)
itkImageVD22.GetPixel = new_instancemethod(_itkImagePython.itkImageVD22_GetPixel, None, itkImageVD22)
itkImageVD22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD22_GetBufferPointer, None, itkImageVD22)
itkImageVD22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD22_GetPixelContainer, None, itkImageVD22)
itkImageVD22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD22_SetPixelContainer, None, itkImageVD22)
itkImageVD22.Graft = new_instancemethod(_itkImagePython.itkImageVD22_Graft, None, itkImageVD22)
itkImageVD22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD22_GetPixelAccessor, None, itkImageVD22)
itkImageVD22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD22_GetNeighborhoodAccessor, None, itkImageVD22)
itkImageVD22_swigregister = _itkImagePython.itkImageVD22_swigregister
itkImageVD22_swigregister(itkImageVD22)

def itkImageVD22___New_orig__() -> "itkImageVD22_Pointer":
    """itkImageVD22___New_orig__() -> itkImageVD22_Pointer"""
    return _itkImagePython.itkImageVD22___New_orig__()

def itkImageVD22_cast(obj: 'itkLightObject') -> "itkImageVD22 *":
    """itkImageVD22_cast(itkLightObject obj) -> itkImageVD22"""
    return _itkImagePython.itkImageVD22_cast(obj)

class itkImageVD23(itkImageBase3):
    """Proxy of C++ itkImageVD23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD23_Pointer":
        """__New_orig__() -> itkImageVD23_Pointer"""
        return _itkImagePython.itkImageVD23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD23_Pointer":
        """Clone(itkImageVD23 self) -> itkImageVD23_Pointer"""
        return _itkImagePython.itkImageVD23_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD23 self, bool initializePixels=False)
        Allocate(itkImageVD23 self)
        """
        return _itkImagePython.itkImageVD23_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD2') -> "void":
        """FillBuffer(itkImageVD23 self, itkVectorD2 value)"""
        return _itkImagePython.itkImageVD23_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorD2') -> "void":
        """SetPixel(itkImageVD23 self, itkIndex3 index, itkVectorD2 value)"""
        return _itkImagePython.itkImageVD23_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD2 &":
        """
        GetPixel(itkImageVD23 self, itkIndex3 index) -> itkVectorD2
        GetPixel(itkImageVD23 self, itkIndex3 index) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD23_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD2 const *":
        """
        GetBufferPointer(itkImageVD23 self) -> itkVectorD2
        GetBufferPointer(itkImageVD23 self) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD23_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > const *":
        """
        GetPixelContainer(itkImageVD23 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > >
        GetPixelContainer(itkImageVD23 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > const *
        """
        return _itkImagePython.itkImageVD23_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > *') -> "void":
        """SetPixelContainer(itkImageVD23 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > * container)"""
        return _itkImagePython.itkImageVD23_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD23') -> "void":
        """Graft(itkImageVD23 self, itkImageVD23 data)"""
        return _itkImagePython.itkImageVD23_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,2 > > const":
        """
        GetPixelAccessor(itkImageVD23 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > >
        GetPixelAccessor(itkImageVD23 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > > const
        """
        return _itkImagePython.itkImageVD23_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,3 > >
        GetNeighborhoodAccessor(itkImageVD23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,3 > > const
        """
        return _itkImagePython.itkImageVD23_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD23

    def cast(obj: 'itkLightObject') -> "itkImageVD23 *":
        """cast(itkLightObject obj) -> itkImageVD23"""
        return _itkImagePython.itkImageVD23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVD23

        Create a new object of the class itkImageVD23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD23.Clone = new_instancemethod(_itkImagePython.itkImageVD23_Clone, None, itkImageVD23)
itkImageVD23.Allocate = new_instancemethod(_itkImagePython.itkImageVD23_Allocate, None, itkImageVD23)
itkImageVD23.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD23_FillBuffer, None, itkImageVD23)
itkImageVD23.SetPixel = new_instancemethod(_itkImagePython.itkImageVD23_SetPixel, None, itkImageVD23)
itkImageVD23.GetPixel = new_instancemethod(_itkImagePython.itkImageVD23_GetPixel, None, itkImageVD23)
itkImageVD23.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD23_GetBufferPointer, None, itkImageVD23)
itkImageVD23.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD23_GetPixelContainer, None, itkImageVD23)
itkImageVD23.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD23_SetPixelContainer, None, itkImageVD23)
itkImageVD23.Graft = new_instancemethod(_itkImagePython.itkImageVD23_Graft, None, itkImageVD23)
itkImageVD23.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD23_GetPixelAccessor, None, itkImageVD23)
itkImageVD23.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD23_GetNeighborhoodAccessor, None, itkImageVD23)
itkImageVD23_swigregister = _itkImagePython.itkImageVD23_swigregister
itkImageVD23_swigregister(itkImageVD23)

def itkImageVD23___New_orig__() -> "itkImageVD23_Pointer":
    """itkImageVD23___New_orig__() -> itkImageVD23_Pointer"""
    return _itkImagePython.itkImageVD23___New_orig__()

def itkImageVD23_cast(obj: 'itkLightObject') -> "itkImageVD23 *":
    """itkImageVD23_cast(itkLightObject obj) -> itkImageVD23"""
    return _itkImagePython.itkImageVD23_cast(obj)

class itkImageVD24(itkImageBase4):
    """Proxy of C++ itkImageVD24 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD24_Pointer":
        """__New_orig__() -> itkImageVD24_Pointer"""
        return _itkImagePython.itkImageVD24___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD24_Pointer":
        """Clone(itkImageVD24 self) -> itkImageVD24_Pointer"""
        return _itkImagePython.itkImageVD24_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD24 self, bool initializePixels=False)
        Allocate(itkImageVD24 self)
        """
        return _itkImagePython.itkImageVD24_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD2') -> "void":
        """FillBuffer(itkImageVD24 self, itkVectorD2 value)"""
        return _itkImagePython.itkImageVD24_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex4', value: 'itkVectorD2') -> "void":
        """SetPixel(itkImageVD24 self, itkIndex4 index, itkVectorD2 value)"""
        return _itkImagePython.itkImageVD24_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD2 &":
        """
        GetPixel(itkImageVD24 self, itkIndex4 index) -> itkVectorD2
        GetPixel(itkImageVD24 self, itkIndex4 index) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD24_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD2 const *":
        """
        GetBufferPointer(itkImageVD24 self) -> itkVectorD2
        GetBufferPointer(itkImageVD24 self) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD24_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > const *":
        """
        GetPixelContainer(itkImageVD24 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > >
        GetPixelContainer(itkImageVD24 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > const *
        """
        return _itkImagePython.itkImageVD24_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > *') -> "void":
        """SetPixelContainer(itkImageVD24 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > * container)"""
        return _itkImagePython.itkImageVD24_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD24') -> "void":
        """Graft(itkImageVD24 self, itkImageVD24 data)"""
        return _itkImagePython.itkImageVD24_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,2 > > const":
        """
        GetPixelAccessor(itkImageVD24 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > >
        GetPixelAccessor(itkImageVD24 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > > const
        """
        return _itkImagePython.itkImageVD24_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,4 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD24 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,4 > >
        GetNeighborhoodAccessor(itkImageVD24 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,4 > > const
        """
        return _itkImagePython.itkImageVD24_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD24

    def cast(obj: 'itkLightObject') -> "itkImageVD24 *":
        """cast(itkLightObject obj) -> itkImageVD24"""
        return _itkImagePython.itkImageVD24_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVD24

        Create a new object of the class itkImageVD24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD24.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD24.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD24.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD24.Clone = new_instancemethod(_itkImagePython.itkImageVD24_Clone, None, itkImageVD24)
itkImageVD24.Allocate = new_instancemethod(_itkImagePython.itkImageVD24_Allocate, None, itkImageVD24)
itkImageVD24.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD24_FillBuffer, None, itkImageVD24)
itkImageVD24.SetPixel = new_instancemethod(_itkImagePython.itkImageVD24_SetPixel, None, itkImageVD24)
itkImageVD24.GetPixel = new_instancemethod(_itkImagePython.itkImageVD24_GetPixel, None, itkImageVD24)
itkImageVD24.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD24_GetBufferPointer, None, itkImageVD24)
itkImageVD24.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD24_GetPixelContainer, None, itkImageVD24)
itkImageVD24.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD24_SetPixelContainer, None, itkImageVD24)
itkImageVD24.Graft = new_instancemethod(_itkImagePython.itkImageVD24_Graft, None, itkImageVD24)
itkImageVD24.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD24_GetPixelAccessor, None, itkImageVD24)
itkImageVD24.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD24_GetNeighborhoodAccessor, None, itkImageVD24)
itkImageVD24_swigregister = _itkImagePython.itkImageVD24_swigregister
itkImageVD24_swigregister(itkImageVD24)

def itkImageVD24___New_orig__() -> "itkImageVD24_Pointer":
    """itkImageVD24___New_orig__() -> itkImageVD24_Pointer"""
    return _itkImagePython.itkImageVD24___New_orig__()

def itkImageVD24_cast(obj: 'itkLightObject') -> "itkImageVD24 *":
    """itkImageVD24_cast(itkLightObject obj) -> itkImageVD24"""
    return _itkImagePython.itkImageVD24_cast(obj)

class itkImageVD32(itkImageBase2):
    """Proxy of C++ itkImageVD32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD32_Pointer":
        """__New_orig__() -> itkImageVD32_Pointer"""
        return _itkImagePython.itkImageVD32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD32_Pointer":
        """Clone(itkImageVD32 self) -> itkImageVD32_Pointer"""
        return _itkImagePython.itkImageVD32_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD32 self, bool initializePixels=False)
        Allocate(itkImageVD32 self)
        """
        return _itkImagePython.itkImageVD32_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD3') -> "void":
        """FillBuffer(itkImageVD32 self, itkVectorD3 value)"""
        return _itkImagePython.itkImageVD32_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorD3') -> "void":
        """SetPixel(itkImageVD32 self, itkIndex2 index, itkVectorD3 value)"""
        return _itkImagePython.itkImageVD32_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD3 &":
        """
        GetPixel(itkImageVD32 self, itkIndex2 index) -> itkVectorD3
        GetPixel(itkImageVD32 self, itkIndex2 index) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD32_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD3 const *":
        """
        GetBufferPointer(itkImageVD32 self) -> itkVectorD3
        GetBufferPointer(itkImageVD32 self) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD32_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > const *":
        """
        GetPixelContainer(itkImageVD32 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > >
        GetPixelContainer(itkImageVD32 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > const *
        """
        return _itkImagePython.itkImageVD32_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > *') -> "void":
        """SetPixelContainer(itkImageVD32 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > * container)"""
        return _itkImagePython.itkImageVD32_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD32') -> "void":
        """Graft(itkImageVD32 self, itkImageVD32 data)"""
        return _itkImagePython.itkImageVD32_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,3 > > const":
        """
        GetPixelAccessor(itkImageVD32 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > >
        GetPixelAccessor(itkImageVD32 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > > const
        """
        return _itkImagePython.itkImageVD32_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,2 > >
        GetNeighborhoodAccessor(itkImageVD32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,2 > > const
        """
        return _itkImagePython.itkImageVD32_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD32

    def cast(obj: 'itkLightObject') -> "itkImageVD32 *":
        """cast(itkLightObject obj) -> itkImageVD32"""
        return _itkImagePython.itkImageVD32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVD32

        Create a new object of the class itkImageVD32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD32.Clone = new_instancemethod(_itkImagePython.itkImageVD32_Clone, None, itkImageVD32)
itkImageVD32.Allocate = new_instancemethod(_itkImagePython.itkImageVD32_Allocate, None, itkImageVD32)
itkImageVD32.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD32_FillBuffer, None, itkImageVD32)
itkImageVD32.SetPixel = new_instancemethod(_itkImagePython.itkImageVD32_SetPixel, None, itkImageVD32)
itkImageVD32.GetPixel = new_instancemethod(_itkImagePython.itkImageVD32_GetPixel, None, itkImageVD32)
itkImageVD32.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD32_GetBufferPointer, None, itkImageVD32)
itkImageVD32.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD32_GetPixelContainer, None, itkImageVD32)
itkImageVD32.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD32_SetPixelContainer, None, itkImageVD32)
itkImageVD32.Graft = new_instancemethod(_itkImagePython.itkImageVD32_Graft, None, itkImageVD32)
itkImageVD32.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD32_GetPixelAccessor, None, itkImageVD32)
itkImageVD32.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD32_GetNeighborhoodAccessor, None, itkImageVD32)
itkImageVD32_swigregister = _itkImagePython.itkImageVD32_swigregister
itkImageVD32_swigregister(itkImageVD32)

def itkImageVD32___New_orig__() -> "itkImageVD32_Pointer":
    """itkImageVD32___New_orig__() -> itkImageVD32_Pointer"""
    return _itkImagePython.itkImageVD32___New_orig__()

def itkImageVD32_cast(obj: 'itkLightObject') -> "itkImageVD32 *":
    """itkImageVD32_cast(itkLightObject obj) -> itkImageVD32"""
    return _itkImagePython.itkImageVD32_cast(obj)

class itkImageVD33(itkImageBase3):
    """Proxy of C++ itkImageVD33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD33_Pointer":
        """__New_orig__() -> itkImageVD33_Pointer"""
        return _itkImagePython.itkImageVD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD33_Pointer":
        """Clone(itkImageVD33 self) -> itkImageVD33_Pointer"""
        return _itkImagePython.itkImageVD33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD33 self, bool initializePixels=False)
        Allocate(itkImageVD33 self)
        """
        return _itkImagePython.itkImageVD33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD3') -> "void":
        """FillBuffer(itkImageVD33 self, itkVectorD3 value)"""
        return _itkImagePython.itkImageVD33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorD3') -> "void":
        """SetPixel(itkImageVD33 self, itkIndex3 index, itkVectorD3 value)"""
        return _itkImagePython.itkImageVD33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD3 &":
        """
        GetPixel(itkImageVD33 self, itkIndex3 index) -> itkVectorD3
        GetPixel(itkImageVD33 self, itkIndex3 index) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD3 const *":
        """
        GetBufferPointer(itkImageVD33 self) -> itkVectorD3
        GetBufferPointer(itkImageVD33 self) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > const *":
        """
        GetPixelContainer(itkImageVD33 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > >
        GetPixelContainer(itkImageVD33 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > const *
        """
        return _itkImagePython.itkImageVD33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > *') -> "void":
        """SetPixelContainer(itkImageVD33 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > * container)"""
        return _itkImagePython.itkImageVD33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD33') -> "void":
        """Graft(itkImageVD33 self, itkImageVD33 data)"""
        return _itkImagePython.itkImageVD33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,3 > > const":
        """
        GetPixelAccessor(itkImageVD33 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > >
        GetPixelAccessor(itkImageVD33 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > > const
        """
        return _itkImagePython.itkImageVD33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,3 > >
        GetNeighborhoodAccessor(itkImageVD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,3 > > const
        """
        return _itkImagePython.itkImageVD33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD33

    def cast(obj: 'itkLightObject') -> "itkImageVD33 *":
        """cast(itkLightObject obj) -> itkImageVD33"""
        return _itkImagePython.itkImageVD33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVD33

        Create a new object of the class itkImageVD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD33.Clone = new_instancemethod(_itkImagePython.itkImageVD33_Clone, None, itkImageVD33)
itkImageVD33.Allocate = new_instancemethod(_itkImagePython.itkImageVD33_Allocate, None, itkImageVD33)
itkImageVD33.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD33_FillBuffer, None, itkImageVD33)
itkImageVD33.SetPixel = new_instancemethod(_itkImagePython.itkImageVD33_SetPixel, None, itkImageVD33)
itkImageVD33.GetPixel = new_instancemethod(_itkImagePython.itkImageVD33_GetPixel, None, itkImageVD33)
itkImageVD33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD33_GetBufferPointer, None, itkImageVD33)
itkImageVD33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD33_GetPixelContainer, None, itkImageVD33)
itkImageVD33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD33_SetPixelContainer, None, itkImageVD33)
itkImageVD33.Graft = new_instancemethod(_itkImagePython.itkImageVD33_Graft, None, itkImageVD33)
itkImageVD33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD33_GetPixelAccessor, None, itkImageVD33)
itkImageVD33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD33_GetNeighborhoodAccessor, None, itkImageVD33)
itkImageVD33_swigregister = _itkImagePython.itkImageVD33_swigregister
itkImageVD33_swigregister(itkImageVD33)

def itkImageVD33___New_orig__() -> "itkImageVD33_Pointer":
    """itkImageVD33___New_orig__() -> itkImageVD33_Pointer"""
    return _itkImagePython.itkImageVD33___New_orig__()

def itkImageVD33_cast(obj: 'itkLightObject') -> "itkImageVD33 *":
    """itkImageVD33_cast(itkLightObject obj) -> itkImageVD33"""
    return _itkImagePython.itkImageVD33_cast(obj)

class itkImageVD34(itkImageBase4):
    """Proxy of C++ itkImageVD34 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD34_Pointer":
        """__New_orig__() -> itkImageVD34_Pointer"""
        return _itkImagePython.itkImageVD34___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD34_Pointer":
        """Clone(itkImageVD34 self) -> itkImageVD34_Pointer"""
        return _itkImagePython.itkImageVD34_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD34 self, bool initializePixels=False)
        Allocate(itkImageVD34 self)
        """
        return _itkImagePython.itkImageVD34_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD3') -> "void":
        """FillBuffer(itkImageVD34 self, itkVectorD3 value)"""
        return _itkImagePython.itkImageVD34_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex4', value: 'itkVectorD3') -> "void":
        """SetPixel(itkImageVD34 self, itkIndex4 index, itkVectorD3 value)"""
        return _itkImagePython.itkImageVD34_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD3 &":
        """
        GetPixel(itkImageVD34 self, itkIndex4 index) -> itkVectorD3
        GetPixel(itkImageVD34 self, itkIndex4 index) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD34_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD3 const *":
        """
        GetBufferPointer(itkImageVD34 self) -> itkVectorD3
        GetBufferPointer(itkImageVD34 self) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD34_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > const *":
        """
        GetPixelContainer(itkImageVD34 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > >
        GetPixelContainer(itkImageVD34 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > const *
        """
        return _itkImagePython.itkImageVD34_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > *') -> "void":
        """SetPixelContainer(itkImageVD34 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > * container)"""
        return _itkImagePython.itkImageVD34_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD34') -> "void":
        """Graft(itkImageVD34 self, itkImageVD34 data)"""
        return _itkImagePython.itkImageVD34_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,3 > > const":
        """
        GetPixelAccessor(itkImageVD34 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > >
        GetPixelAccessor(itkImageVD34 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > > const
        """
        return _itkImagePython.itkImageVD34_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,4 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD34 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,4 > >
        GetNeighborhoodAccessor(itkImageVD34 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,4 > > const
        """
        return _itkImagePython.itkImageVD34_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD34

    def cast(obj: 'itkLightObject') -> "itkImageVD34 *":
        """cast(itkLightObject obj) -> itkImageVD34"""
        return _itkImagePython.itkImageVD34_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVD34

        Create a new object of the class itkImageVD34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD34.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD34.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD34.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD34.Clone = new_instancemethod(_itkImagePython.itkImageVD34_Clone, None, itkImageVD34)
itkImageVD34.Allocate = new_instancemethod(_itkImagePython.itkImageVD34_Allocate, None, itkImageVD34)
itkImageVD34.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD34_FillBuffer, None, itkImageVD34)
itkImageVD34.SetPixel = new_instancemethod(_itkImagePython.itkImageVD34_SetPixel, None, itkImageVD34)
itkImageVD34.GetPixel = new_instancemethod(_itkImagePython.itkImageVD34_GetPixel, None, itkImageVD34)
itkImageVD34.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD34_GetBufferPointer, None, itkImageVD34)
itkImageVD34.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD34_GetPixelContainer, None, itkImageVD34)
itkImageVD34.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD34_SetPixelContainer, None, itkImageVD34)
itkImageVD34.Graft = new_instancemethod(_itkImagePython.itkImageVD34_Graft, None, itkImageVD34)
itkImageVD34.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD34_GetPixelAccessor, None, itkImageVD34)
itkImageVD34.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD34_GetNeighborhoodAccessor, None, itkImageVD34)
itkImageVD34_swigregister = _itkImagePython.itkImageVD34_swigregister
itkImageVD34_swigregister(itkImageVD34)

def itkImageVD34___New_orig__() -> "itkImageVD34_Pointer":
    """itkImageVD34___New_orig__() -> itkImageVD34_Pointer"""
    return _itkImagePython.itkImageVD34___New_orig__()

def itkImageVD34_cast(obj: 'itkLightObject') -> "itkImageVD34 *":
    """itkImageVD34_cast(itkLightObject obj) -> itkImageVD34"""
    return _itkImagePython.itkImageVD34_cast(obj)

class itkImageVD42(itkImageBase2):
    """Proxy of C++ itkImageVD42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD42_Pointer":
        """__New_orig__() -> itkImageVD42_Pointer"""
        return _itkImagePython.itkImageVD42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD42_Pointer":
        """Clone(itkImageVD42 self) -> itkImageVD42_Pointer"""
        return _itkImagePython.itkImageVD42_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD42 self, bool initializePixels=False)
        Allocate(itkImageVD42 self)
        """
        return _itkImagePython.itkImageVD42_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD4') -> "void":
        """FillBuffer(itkImageVD42 self, itkVectorD4 value)"""
        return _itkImagePython.itkImageVD42_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorD4') -> "void":
        """SetPixel(itkImageVD42 self, itkIndex2 index, itkVectorD4 value)"""
        return _itkImagePython.itkImageVD42_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD4 &":
        """
        GetPixel(itkImageVD42 self, itkIndex2 index) -> itkVectorD4
        GetPixel(itkImageVD42 self, itkIndex2 index) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD42_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD4 const *":
        """
        GetBufferPointer(itkImageVD42 self) -> itkVectorD4
        GetBufferPointer(itkImageVD42 self) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD42_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > const *":
        """
        GetPixelContainer(itkImageVD42 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > >
        GetPixelContainer(itkImageVD42 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > const *
        """
        return _itkImagePython.itkImageVD42_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > *') -> "void":
        """SetPixelContainer(itkImageVD42 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > * container)"""
        return _itkImagePython.itkImageVD42_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD42') -> "void":
        """Graft(itkImageVD42 self, itkImageVD42 data)"""
        return _itkImagePython.itkImageVD42_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,4 > > const":
        """
        GetPixelAccessor(itkImageVD42 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > >
        GetPixelAccessor(itkImageVD42 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > > const
        """
        return _itkImagePython.itkImageVD42_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,2 > >
        GetNeighborhoodAccessor(itkImageVD42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,2 > > const
        """
        return _itkImagePython.itkImageVD42_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD42

    def cast(obj: 'itkLightObject') -> "itkImageVD42 *":
        """cast(itkLightObject obj) -> itkImageVD42"""
        return _itkImagePython.itkImageVD42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVD42

        Create a new object of the class itkImageVD42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD42.Clone = new_instancemethod(_itkImagePython.itkImageVD42_Clone, None, itkImageVD42)
itkImageVD42.Allocate = new_instancemethod(_itkImagePython.itkImageVD42_Allocate, None, itkImageVD42)
itkImageVD42.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD42_FillBuffer, None, itkImageVD42)
itkImageVD42.SetPixel = new_instancemethod(_itkImagePython.itkImageVD42_SetPixel, None, itkImageVD42)
itkImageVD42.GetPixel = new_instancemethod(_itkImagePython.itkImageVD42_GetPixel, None, itkImageVD42)
itkImageVD42.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD42_GetBufferPointer, None, itkImageVD42)
itkImageVD42.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD42_GetPixelContainer, None, itkImageVD42)
itkImageVD42.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD42_SetPixelContainer, None, itkImageVD42)
itkImageVD42.Graft = new_instancemethod(_itkImagePython.itkImageVD42_Graft, None, itkImageVD42)
itkImageVD42.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD42_GetPixelAccessor, None, itkImageVD42)
itkImageVD42.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD42_GetNeighborhoodAccessor, None, itkImageVD42)
itkImageVD42_swigregister = _itkImagePython.itkImageVD42_swigregister
itkImageVD42_swigregister(itkImageVD42)

def itkImageVD42___New_orig__() -> "itkImageVD42_Pointer":
    """itkImageVD42___New_orig__() -> itkImageVD42_Pointer"""
    return _itkImagePython.itkImageVD42___New_orig__()

def itkImageVD42_cast(obj: 'itkLightObject') -> "itkImageVD42 *":
    """itkImageVD42_cast(itkLightObject obj) -> itkImageVD42"""
    return _itkImagePython.itkImageVD42_cast(obj)

class itkImageVD43(itkImageBase3):
    """Proxy of C++ itkImageVD43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD43_Pointer":
        """__New_orig__() -> itkImageVD43_Pointer"""
        return _itkImagePython.itkImageVD43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD43_Pointer":
        """Clone(itkImageVD43 self) -> itkImageVD43_Pointer"""
        return _itkImagePython.itkImageVD43_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD43 self, bool initializePixels=False)
        Allocate(itkImageVD43 self)
        """
        return _itkImagePython.itkImageVD43_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD4') -> "void":
        """FillBuffer(itkImageVD43 self, itkVectorD4 value)"""
        return _itkImagePython.itkImageVD43_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorD4') -> "void":
        """SetPixel(itkImageVD43 self, itkIndex3 index, itkVectorD4 value)"""
        return _itkImagePython.itkImageVD43_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD4 &":
        """
        GetPixel(itkImageVD43 self, itkIndex3 index) -> itkVectorD4
        GetPixel(itkImageVD43 self, itkIndex3 index) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD43_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD4 const *":
        """
        GetBufferPointer(itkImageVD43 self) -> itkVectorD4
        GetBufferPointer(itkImageVD43 self) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD43_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > const *":
        """
        GetPixelContainer(itkImageVD43 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > >
        GetPixelContainer(itkImageVD43 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > const *
        """
        return _itkImagePython.itkImageVD43_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > *') -> "void":
        """SetPixelContainer(itkImageVD43 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > * container)"""
        return _itkImagePython.itkImageVD43_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD43') -> "void":
        """Graft(itkImageVD43 self, itkImageVD43 data)"""
        return _itkImagePython.itkImageVD43_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,4 > > const":
        """
        GetPixelAccessor(itkImageVD43 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > >
        GetPixelAccessor(itkImageVD43 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > > const
        """
        return _itkImagePython.itkImageVD43_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,3 > >
        GetNeighborhoodAccessor(itkImageVD43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,3 > > const
        """
        return _itkImagePython.itkImageVD43_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD43

    def cast(obj: 'itkLightObject') -> "itkImageVD43 *":
        """cast(itkLightObject obj) -> itkImageVD43"""
        return _itkImagePython.itkImageVD43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVD43

        Create a new object of the class itkImageVD43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD43.Clone = new_instancemethod(_itkImagePython.itkImageVD43_Clone, None, itkImageVD43)
itkImageVD43.Allocate = new_instancemethod(_itkImagePython.itkImageVD43_Allocate, None, itkImageVD43)
itkImageVD43.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD43_FillBuffer, None, itkImageVD43)
itkImageVD43.SetPixel = new_instancemethod(_itkImagePython.itkImageVD43_SetPixel, None, itkImageVD43)
itkImageVD43.GetPixel = new_instancemethod(_itkImagePython.itkImageVD43_GetPixel, None, itkImageVD43)
itkImageVD43.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD43_GetBufferPointer, None, itkImageVD43)
itkImageVD43.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD43_GetPixelContainer, None, itkImageVD43)
itkImageVD43.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD43_SetPixelContainer, None, itkImageVD43)
itkImageVD43.Graft = new_instancemethod(_itkImagePython.itkImageVD43_Graft, None, itkImageVD43)
itkImageVD43.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD43_GetPixelAccessor, None, itkImageVD43)
itkImageVD43.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD43_GetNeighborhoodAccessor, None, itkImageVD43)
itkImageVD43_swigregister = _itkImagePython.itkImageVD43_swigregister
itkImageVD43_swigregister(itkImageVD43)

def itkImageVD43___New_orig__() -> "itkImageVD43_Pointer":
    """itkImageVD43___New_orig__() -> itkImageVD43_Pointer"""
    return _itkImagePython.itkImageVD43___New_orig__()

def itkImageVD43_cast(obj: 'itkLightObject') -> "itkImageVD43 *":
    """itkImageVD43_cast(itkLightObject obj) -> itkImageVD43"""
    return _itkImagePython.itkImageVD43_cast(obj)

class itkImageVD44(itkImageBase4):
    """Proxy of C++ itkImageVD44 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD44_Pointer":
        """__New_orig__() -> itkImageVD44_Pointer"""
        return _itkImagePython.itkImageVD44___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD44_Pointer":
        """Clone(itkImageVD44 self) -> itkImageVD44_Pointer"""
        return _itkImagePython.itkImageVD44_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD44 self, bool initializePixels=False)
        Allocate(itkImageVD44 self)
        """
        return _itkImagePython.itkImageVD44_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD4') -> "void":
        """FillBuffer(itkImageVD44 self, itkVectorD4 value)"""
        return _itkImagePython.itkImageVD44_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex4', value: 'itkVectorD4') -> "void":
        """SetPixel(itkImageVD44 self, itkIndex4 index, itkVectorD4 value)"""
        return _itkImagePython.itkImageVD44_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD4 &":
        """
        GetPixel(itkImageVD44 self, itkIndex4 index) -> itkVectorD4
        GetPixel(itkImageVD44 self, itkIndex4 index) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD44_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD4 const *":
        """
        GetBufferPointer(itkImageVD44 self) -> itkVectorD4
        GetBufferPointer(itkImageVD44 self) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD44_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > const *":
        """
        GetPixelContainer(itkImageVD44 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > >
        GetPixelContainer(itkImageVD44 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > const *
        """
        return _itkImagePython.itkImageVD44_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > *') -> "void":
        """SetPixelContainer(itkImageVD44 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > * container)"""
        return _itkImagePython.itkImageVD44_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD44') -> "void":
        """Graft(itkImageVD44 self, itkImageVD44 data)"""
        return _itkImagePython.itkImageVD44_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,4 > > const":
        """
        GetPixelAccessor(itkImageVD44 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > >
        GetPixelAccessor(itkImageVD44 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > > const
        """
        return _itkImagePython.itkImageVD44_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,4 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD44 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,4 > >
        GetNeighborhoodAccessor(itkImageVD44 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,4 > > const
        """
        return _itkImagePython.itkImageVD44_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD44

    def cast(obj: 'itkLightObject') -> "itkImageVD44 *":
        """cast(itkLightObject obj) -> itkImageVD44"""
        return _itkImagePython.itkImageVD44_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVD44

        Create a new object of the class itkImageVD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD44.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD44.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD44.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD44.Clone = new_instancemethod(_itkImagePython.itkImageVD44_Clone, None, itkImageVD44)
itkImageVD44.Allocate = new_instancemethod(_itkImagePython.itkImageVD44_Allocate, None, itkImageVD44)
itkImageVD44.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD44_FillBuffer, None, itkImageVD44)
itkImageVD44.SetPixel = new_instancemethod(_itkImagePython.itkImageVD44_SetPixel, None, itkImageVD44)
itkImageVD44.GetPixel = new_instancemethod(_itkImagePython.itkImageVD44_GetPixel, None, itkImageVD44)
itkImageVD44.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD44_GetBufferPointer, None, itkImageVD44)
itkImageVD44.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD44_GetPixelContainer, None, itkImageVD44)
itkImageVD44.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD44_SetPixelContainer, None, itkImageVD44)
itkImageVD44.Graft = new_instancemethod(_itkImagePython.itkImageVD44_Graft, None, itkImageVD44)
itkImageVD44.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD44_GetPixelAccessor, None, itkImageVD44)
itkImageVD44.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD44_GetNeighborhoodAccessor, None, itkImageVD44)
itkImageVD44_swigregister = _itkImagePython.itkImageVD44_swigregister
itkImageVD44_swigregister(itkImageVD44)

def itkImageVD44___New_orig__() -> "itkImageVD44_Pointer":
    """itkImageVD44___New_orig__() -> itkImageVD44_Pointer"""
    return _itkImagePython.itkImageVD44___New_orig__()

def itkImageVD44_cast(obj: 'itkLightObject') -> "itkImageVD44 *":
    """itkImageVD44_cast(itkLightObject obj) -> itkImageVD44"""
    return _itkImagePython.itkImageVD44_cast(obj)

class itkImageVF12(itkImageBase2):
    """Proxy of C++ itkImageVF12 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF12_Pointer":
        """__New_orig__() -> itkImageVF12_Pointer"""
        return _itkImagePython.itkImageVF12___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF12_Pointer":
        """Clone(itkImageVF12 self) -> itkImageVF12_Pointer"""
        return _itkImagePython.itkImageVF12_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF12 self, bool initializePixels=False)
        Allocate(itkImageVF12 self)
        """
        return _itkImagePython.itkImageVF12_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF1') -> "void":
        """FillBuffer(itkImageVF12 self, itkVectorF1 value)"""
        return _itkImagePython.itkImageVF12_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorF1') -> "void":
        """SetPixel(itkImageVF12 self, itkIndex2 index, itkVectorF1 value)"""
        return _itkImagePython.itkImageVF12_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF1 &":
        """
        GetPixel(itkImageVF12 self, itkIndex2 index) -> itkVectorF1
        GetPixel(itkImageVF12 self, itkIndex2 index) -> itkVectorF1
        """
        return _itkImagePython.itkImageVF12_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF1 const *":
        """
        GetBufferPointer(itkImageVF12 self) -> itkVectorF1
        GetBufferPointer(itkImageVF12 self) -> itkVectorF1
        """
        return _itkImagePython.itkImageVF12_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > const *":
        """
        GetPixelContainer(itkImageVF12 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > >
        GetPixelContainer(itkImageVF12 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > const *
        """
        return _itkImagePython.itkImageVF12_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > *') -> "void":
        """SetPixelContainer(itkImageVF12 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > * container)"""
        return _itkImagePython.itkImageVF12_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF12') -> "void":
        """Graft(itkImageVF12 self, itkImageVF12 data)"""
        return _itkImagePython.itkImageVF12_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,1 > > const":
        """
        GetPixelAccessor(itkImageVF12 self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > >
        GetPixelAccessor(itkImageVF12 self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > > const
        """
        return _itkImagePython.itkImageVF12_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF12 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,2 > >
        GetNeighborhoodAccessor(itkImageVF12 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,2 > > const
        """
        return _itkImagePython.itkImageVF12_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF12

    def cast(obj: 'itkLightObject') -> "itkImageVF12 *":
        """cast(itkLightObject obj) -> itkImageVF12"""
        return _itkImagePython.itkImageVF12_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVF12

        Create a new object of the class itkImageVF12 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF12.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF12.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF12.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF12.Clone = new_instancemethod(_itkImagePython.itkImageVF12_Clone, None, itkImageVF12)
itkImageVF12.Allocate = new_instancemethod(_itkImagePython.itkImageVF12_Allocate, None, itkImageVF12)
itkImageVF12.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF12_FillBuffer, None, itkImageVF12)
itkImageVF12.SetPixel = new_instancemethod(_itkImagePython.itkImageVF12_SetPixel, None, itkImageVF12)
itkImageVF12.GetPixel = new_instancemethod(_itkImagePython.itkImageVF12_GetPixel, None, itkImageVF12)
itkImageVF12.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF12_GetBufferPointer, None, itkImageVF12)
itkImageVF12.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF12_GetPixelContainer, None, itkImageVF12)
itkImageVF12.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF12_SetPixelContainer, None, itkImageVF12)
itkImageVF12.Graft = new_instancemethod(_itkImagePython.itkImageVF12_Graft, None, itkImageVF12)
itkImageVF12.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF12_GetPixelAccessor, None, itkImageVF12)
itkImageVF12.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF12_GetNeighborhoodAccessor, None, itkImageVF12)
itkImageVF12_swigregister = _itkImagePython.itkImageVF12_swigregister
itkImageVF12_swigregister(itkImageVF12)

def itkImageVF12___New_orig__() -> "itkImageVF12_Pointer":
    """itkImageVF12___New_orig__() -> itkImageVF12_Pointer"""
    return _itkImagePython.itkImageVF12___New_orig__()

def itkImageVF12_cast(obj: 'itkLightObject') -> "itkImageVF12 *":
    """itkImageVF12_cast(itkLightObject obj) -> itkImageVF12"""
    return _itkImagePython.itkImageVF12_cast(obj)

class itkImageVF13(itkImageBase3):
    """Proxy of C++ itkImageVF13 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF13_Pointer":
        """__New_orig__() -> itkImageVF13_Pointer"""
        return _itkImagePython.itkImageVF13___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF13_Pointer":
        """Clone(itkImageVF13 self) -> itkImageVF13_Pointer"""
        return _itkImagePython.itkImageVF13_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF13 self, bool initializePixels=False)
        Allocate(itkImageVF13 self)
        """
        return _itkImagePython.itkImageVF13_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF1') -> "void":
        """FillBuffer(itkImageVF13 self, itkVectorF1 value)"""
        return _itkImagePython.itkImageVF13_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorF1') -> "void":
        """SetPixel(itkImageVF13 self, itkIndex3 index, itkVectorF1 value)"""
        return _itkImagePython.itkImageVF13_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF1 &":
        """
        GetPixel(itkImageVF13 self, itkIndex3 index) -> itkVectorF1
        GetPixel(itkImageVF13 self, itkIndex3 index) -> itkVectorF1
        """
        return _itkImagePython.itkImageVF13_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF1 const *":
        """
        GetBufferPointer(itkImageVF13 self) -> itkVectorF1
        GetBufferPointer(itkImageVF13 self) -> itkVectorF1
        """
        return _itkImagePython.itkImageVF13_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > const *":
        """
        GetPixelContainer(itkImageVF13 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > >
        GetPixelContainer(itkImageVF13 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > const *
        """
        return _itkImagePython.itkImageVF13_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > *') -> "void":
        """SetPixelContainer(itkImageVF13 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > * container)"""
        return _itkImagePython.itkImageVF13_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF13') -> "void":
        """Graft(itkImageVF13 self, itkImageVF13 data)"""
        return _itkImagePython.itkImageVF13_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,1 > > const":
        """
        GetPixelAccessor(itkImageVF13 self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > >
        GetPixelAccessor(itkImageVF13 self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > > const
        """
        return _itkImagePython.itkImageVF13_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF13 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,3 > >
        GetNeighborhoodAccessor(itkImageVF13 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,3 > > const
        """
        return _itkImagePython.itkImageVF13_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF13

    def cast(obj: 'itkLightObject') -> "itkImageVF13 *":
        """cast(itkLightObject obj) -> itkImageVF13"""
        return _itkImagePython.itkImageVF13_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVF13

        Create a new object of the class itkImageVF13 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF13.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF13.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF13.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF13.Clone = new_instancemethod(_itkImagePython.itkImageVF13_Clone, None, itkImageVF13)
itkImageVF13.Allocate = new_instancemethod(_itkImagePython.itkImageVF13_Allocate, None, itkImageVF13)
itkImageVF13.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF13_FillBuffer, None, itkImageVF13)
itkImageVF13.SetPixel = new_instancemethod(_itkImagePython.itkImageVF13_SetPixel, None, itkImageVF13)
itkImageVF13.GetPixel = new_instancemethod(_itkImagePython.itkImageVF13_GetPixel, None, itkImageVF13)
itkImageVF13.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF13_GetBufferPointer, None, itkImageVF13)
itkImageVF13.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF13_GetPixelContainer, None, itkImageVF13)
itkImageVF13.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF13_SetPixelContainer, None, itkImageVF13)
itkImageVF13.Graft = new_instancemethod(_itkImagePython.itkImageVF13_Graft, None, itkImageVF13)
itkImageVF13.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF13_GetPixelAccessor, None, itkImageVF13)
itkImageVF13.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF13_GetNeighborhoodAccessor, None, itkImageVF13)
itkImageVF13_swigregister = _itkImagePython.itkImageVF13_swigregister
itkImageVF13_swigregister(itkImageVF13)

def itkImageVF13___New_orig__() -> "itkImageVF13_Pointer":
    """itkImageVF13___New_orig__() -> itkImageVF13_Pointer"""
    return _itkImagePython.itkImageVF13___New_orig__()

def itkImageVF13_cast(obj: 'itkLightObject') -> "itkImageVF13 *":
    """itkImageVF13_cast(itkLightObject obj) -> itkImageVF13"""
    return _itkImagePython.itkImageVF13_cast(obj)

class itkImageVF22(itkImageBase2):
    """Proxy of C++ itkImageVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF22_Pointer":
        """__New_orig__() -> itkImageVF22_Pointer"""
        return _itkImagePython.itkImageVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF22_Pointer":
        """Clone(itkImageVF22 self) -> itkImageVF22_Pointer"""
        return _itkImagePython.itkImageVF22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF22 self, bool initializePixels=False)
        Allocate(itkImageVF22 self)
        """
        return _itkImagePython.itkImageVF22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF2') -> "void":
        """FillBuffer(itkImageVF22 self, itkVectorF2 value)"""
        return _itkImagePython.itkImageVF22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorF2') -> "void":
        """SetPixel(itkImageVF22 self, itkIndex2 index, itkVectorF2 value)"""
        return _itkImagePython.itkImageVF22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF2 &":
        """
        GetPixel(itkImageVF22 self, itkIndex2 index) -> itkVectorF2
        GetPixel(itkImageVF22 self, itkIndex2 index) -> itkVectorF2
        """
        return _itkImagePython.itkImageVF22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF2 const *":
        """
        GetBufferPointer(itkImageVF22 self) -> itkVectorF2
        GetBufferPointer(itkImageVF22 self) -> itkVectorF2
        """
        return _itkImagePython.itkImageVF22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > const *":
        """
        GetPixelContainer(itkImageVF22 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > >
        GetPixelContainer(itkImageVF22 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > const *
        """
        return _itkImagePython.itkImageVF22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > *') -> "void":
        """SetPixelContainer(itkImageVF22 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > * container)"""
        return _itkImagePython.itkImageVF22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF22') -> "void":
        """Graft(itkImageVF22 self, itkImageVF22 data)"""
        return _itkImagePython.itkImageVF22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,2 > > const":
        """
        GetPixelAccessor(itkImageVF22 self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(itkImageVF22 self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const
        """
        return _itkImagePython.itkImageVF22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,2 > >
        GetNeighborhoodAccessor(itkImageVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,2 > > const
        """
        return _itkImagePython.itkImageVF22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF22

    def cast(obj: 'itkLightObject') -> "itkImageVF22 *":
        """cast(itkLightObject obj) -> itkImageVF22"""
        return _itkImagePython.itkImageVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVF22

        Create a new object of the class itkImageVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF22.Clone = new_instancemethod(_itkImagePython.itkImageVF22_Clone, None, itkImageVF22)
itkImageVF22.Allocate = new_instancemethod(_itkImagePython.itkImageVF22_Allocate, None, itkImageVF22)
itkImageVF22.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF22_FillBuffer, None, itkImageVF22)
itkImageVF22.SetPixel = new_instancemethod(_itkImagePython.itkImageVF22_SetPixel, None, itkImageVF22)
itkImageVF22.GetPixel = new_instancemethod(_itkImagePython.itkImageVF22_GetPixel, None, itkImageVF22)
itkImageVF22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF22_GetBufferPointer, None, itkImageVF22)
itkImageVF22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF22_GetPixelContainer, None, itkImageVF22)
itkImageVF22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF22_SetPixelContainer, None, itkImageVF22)
itkImageVF22.Graft = new_instancemethod(_itkImagePython.itkImageVF22_Graft, None, itkImageVF22)
itkImageVF22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF22_GetPixelAccessor, None, itkImageVF22)
itkImageVF22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF22_GetNeighborhoodAccessor, None, itkImageVF22)
itkImageVF22_swigregister = _itkImagePython.itkImageVF22_swigregister
itkImageVF22_swigregister(itkImageVF22)

def itkImageVF22___New_orig__() -> "itkImageVF22_Pointer":
    """itkImageVF22___New_orig__() -> itkImageVF22_Pointer"""
    return _itkImagePython.itkImageVF22___New_orig__()

def itkImageVF22_cast(obj: 'itkLightObject') -> "itkImageVF22 *":
    """itkImageVF22_cast(itkLightObject obj) -> itkImageVF22"""
    return _itkImagePython.itkImageVF22_cast(obj)

class itkImageVF23(itkImageBase3):
    """Proxy of C++ itkImageVF23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF23_Pointer":
        """__New_orig__() -> itkImageVF23_Pointer"""
        return _itkImagePython.itkImageVF23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF23_Pointer":
        """Clone(itkImageVF23 self) -> itkImageVF23_Pointer"""
        return _itkImagePython.itkImageVF23_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF23 self, bool initializePixels=False)
        Allocate(itkImageVF23 self)
        """
        return _itkImagePython.itkImageVF23_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF2') -> "void":
        """FillBuffer(itkImageVF23 self, itkVectorF2 value)"""
        return _itkImagePython.itkImageVF23_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorF2') -> "void":
        """SetPixel(itkImageVF23 self, itkIndex3 index, itkVectorF2 value)"""
        return _itkImagePython.itkImageVF23_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF2 &":
        """
        GetPixel(itkImageVF23 self, itkIndex3 index) -> itkVectorF2
        GetPixel(itkImageVF23 self, itkIndex3 index) -> itkVectorF2
        """
        return _itkImagePython.itkImageVF23_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF2 const *":
        """
        GetBufferPointer(itkImageVF23 self) -> itkVectorF2
        GetBufferPointer(itkImageVF23 self) -> itkVectorF2
        """
        return _itkImagePython.itkImageVF23_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > const *":
        """
        GetPixelContainer(itkImageVF23 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > >
        GetPixelContainer(itkImageVF23 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > const *
        """
        return _itkImagePython.itkImageVF23_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > *') -> "void":
        """SetPixelContainer(itkImageVF23 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > * container)"""
        return _itkImagePython.itkImageVF23_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF23') -> "void":
        """Graft(itkImageVF23 self, itkImageVF23 data)"""
        return _itkImagePython.itkImageVF23_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,2 > > const":
        """
        GetPixelAccessor(itkImageVF23 self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(itkImageVF23 self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const
        """
        return _itkImagePython.itkImageVF23_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,3 > >
        GetNeighborhoodAccessor(itkImageVF23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,3 > > const
        """
        return _itkImagePython.itkImageVF23_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF23

    def cast(obj: 'itkLightObject') -> "itkImageVF23 *":
        """cast(itkLightObject obj) -> itkImageVF23"""
        return _itkImagePython.itkImageVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVF23

        Create a new object of the class itkImageVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF23.Clone = new_instancemethod(_itkImagePython.itkImageVF23_Clone, None, itkImageVF23)
itkImageVF23.Allocate = new_instancemethod(_itkImagePython.itkImageVF23_Allocate, None, itkImageVF23)
itkImageVF23.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF23_FillBuffer, None, itkImageVF23)
itkImageVF23.SetPixel = new_instancemethod(_itkImagePython.itkImageVF23_SetPixel, None, itkImageVF23)
itkImageVF23.GetPixel = new_instancemethod(_itkImagePython.itkImageVF23_GetPixel, None, itkImageVF23)
itkImageVF23.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF23_GetBufferPointer, None, itkImageVF23)
itkImageVF23.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF23_GetPixelContainer, None, itkImageVF23)
itkImageVF23.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF23_SetPixelContainer, None, itkImageVF23)
itkImageVF23.Graft = new_instancemethod(_itkImagePython.itkImageVF23_Graft, None, itkImageVF23)
itkImageVF23.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF23_GetPixelAccessor, None, itkImageVF23)
itkImageVF23.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF23_GetNeighborhoodAccessor, None, itkImageVF23)
itkImageVF23_swigregister = _itkImagePython.itkImageVF23_swigregister
itkImageVF23_swigregister(itkImageVF23)

def itkImageVF23___New_orig__() -> "itkImageVF23_Pointer":
    """itkImageVF23___New_orig__() -> itkImageVF23_Pointer"""
    return _itkImagePython.itkImageVF23___New_orig__()

def itkImageVF23_cast(obj: 'itkLightObject') -> "itkImageVF23 *":
    """itkImageVF23_cast(itkLightObject obj) -> itkImageVF23"""
    return _itkImagePython.itkImageVF23_cast(obj)

class itkImageVF32(itkImageBase2):
    """Proxy of C++ itkImageVF32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF32_Pointer":
        """__New_orig__() -> itkImageVF32_Pointer"""
        return _itkImagePython.itkImageVF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF32_Pointer":
        """Clone(itkImageVF32 self) -> itkImageVF32_Pointer"""
        return _itkImagePython.itkImageVF32_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF32 self, bool initializePixels=False)
        Allocate(itkImageVF32 self)
        """
        return _itkImagePython.itkImageVF32_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF3') -> "void":
        """FillBuffer(itkImageVF32 self, itkVectorF3 value)"""
        return _itkImagePython.itkImageVF32_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorF3') -> "void":
        """SetPixel(itkImageVF32 self, itkIndex2 index, itkVectorF3 value)"""
        return _itkImagePython.itkImageVF32_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF3 &":
        """
        GetPixel(itkImageVF32 self, itkIndex2 index) -> itkVectorF3
        GetPixel(itkImageVF32 self, itkIndex2 index) -> itkVectorF3
        """
        return _itkImagePython.itkImageVF32_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF3 const *":
        """
        GetBufferPointer(itkImageVF32 self) -> itkVectorF3
        GetBufferPointer(itkImageVF32 self) -> itkVectorF3
        """
        return _itkImagePython.itkImageVF32_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > > const *":
        """
        GetPixelContainer(itkImageVF32 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > >
        GetPixelContainer(itkImageVF32 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > > const *
        """
        return _itkImagePython.itkImageVF32_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > > *') -> "void":
        """SetPixelContainer(itkImageVF32 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > > * container)"""
        return _itkImagePython.itkImageVF32_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF32') -> "void":
        """Graft(itkImageVF32 self, itkImageVF32 data)"""
        return _itkImagePython.itkImageVF32_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,3 > > const":
        """
        GetPixelAccessor(itkImageVF32 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > >
        GetPixelAccessor(itkImageVF32 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > > const
        """
        return _itkImagePython.itkImageVF32_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,2 > >
        GetNeighborhoodAccessor(itkImageVF32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,2 > > const
        """
        return _itkImagePython.itkImageVF32_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF32

    def cast(obj: 'itkLightObject') -> "itkImageVF32 *":
        """cast(itkLightObject obj) -> itkImageVF32"""
        return _itkImagePython.itkImageVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVF32

        Create a new object of the class itkImageVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF32.Clone = new_instancemethod(_itkImagePython.itkImageVF32_Clone, None, itkImageVF32)
itkImageVF32.Allocate = new_instancemethod(_itkImagePython.itkImageVF32_Allocate, None, itkImageVF32)
itkImageVF32.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF32_FillBuffer, None, itkImageVF32)
itkImageVF32.SetPixel = new_instancemethod(_itkImagePython.itkImageVF32_SetPixel, None, itkImageVF32)
itkImageVF32.GetPixel = new_instancemethod(_itkImagePython.itkImageVF32_GetPixel, None, itkImageVF32)
itkImageVF32.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF32_GetBufferPointer, None, itkImageVF32)
itkImageVF32.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF32_GetPixelContainer, None, itkImageVF32)
itkImageVF32.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF32_SetPixelContainer, None, itkImageVF32)
itkImageVF32.Graft = new_instancemethod(_itkImagePython.itkImageVF32_Graft, None, itkImageVF32)
itkImageVF32.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF32_GetPixelAccessor, None, itkImageVF32)
itkImageVF32.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF32_GetNeighborhoodAccessor, None, itkImageVF32)
itkImageVF32_swigregister = _itkImagePython.itkImageVF32_swigregister
itkImageVF32_swigregister(itkImageVF32)

def itkImageVF32___New_orig__() -> "itkImageVF32_Pointer":
    """itkImageVF32___New_orig__() -> itkImageVF32_Pointer"""
    return _itkImagePython.itkImageVF32___New_orig__()

def itkImageVF32_cast(obj: 'itkLightObject') -> "itkImageVF32 *":
    """itkImageVF32_cast(itkLightObject obj) -> itkImageVF32"""
    return _itkImagePython.itkImageVF32_cast(obj)

class itkImageVF33(itkImageBase3):
    """Proxy of C++ itkImageVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF33_Pointer":
        """__New_orig__() -> itkImageVF33_Pointer"""
        return _itkImagePython.itkImageVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF33_Pointer":
        """Clone(itkImageVF33 self) -> itkImageVF33_Pointer"""
        return _itkImagePython.itkImageVF33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF33 self, bool initializePixels=False)
        Allocate(itkImageVF33 self)
        """
        return _itkImagePython.itkImageVF33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF3') -> "void":
        """FillBuffer(itkImageVF33 self, itkVectorF3 value)"""
        return _itkImagePython.itkImageVF33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorF3') -> "void":
        """SetPixel(itkImageVF33 self, itkIndex3 index, itkVectorF3 value)"""
        return _itkImagePython.itkImageVF33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF3 &":
        """
        GetPixel(itkImageVF33 self, itkIndex3 index) -> itkVectorF3
        GetPixel(itkImageVF33 self, itkIndex3 index) -> itkVectorF3
        """
        return _itkImagePython.itkImageVF33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF3 const *":
        """
        GetBufferPointer(itkImageVF33 self) -> itkVectorF3
        GetBufferPointer(itkImageVF33 self) -> itkVectorF3
        """
        return _itkImagePython.itkImageVF33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > > const *":
        """
        GetPixelContainer(itkImageVF33 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > >
        GetPixelContainer(itkImageVF33 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > > const *
        """
        return _itkImagePython.itkImageVF33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > > *') -> "void":
        """SetPixelContainer(itkImageVF33 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > > * container)"""
        return _itkImagePython.itkImageVF33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF33') -> "void":
        """Graft(itkImageVF33 self, itkImageVF33 data)"""
        return _itkImagePython.itkImageVF33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,3 > > const":
        """
        GetPixelAccessor(itkImageVF33 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > >
        GetPixelAccessor(itkImageVF33 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > > const
        """
        return _itkImagePython.itkImageVF33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,3 > >
        GetNeighborhoodAccessor(itkImageVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,3 > > const
        """
        return _itkImagePython.itkImageVF33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF33

    def cast(obj: 'itkLightObject') -> "itkImageVF33 *":
        """cast(itkLightObject obj) -> itkImageVF33"""
        return _itkImagePython.itkImageVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVF33

        Create a new object of the class itkImageVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF33.Clone = new_instancemethod(_itkImagePython.itkImageVF33_Clone, None, itkImageVF33)
itkImageVF33.Allocate = new_instancemethod(_itkImagePython.itkImageVF33_Allocate, None, itkImageVF33)
itkImageVF33.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF33_FillBuffer, None, itkImageVF33)
itkImageVF33.SetPixel = new_instancemethod(_itkImagePython.itkImageVF33_SetPixel, None, itkImageVF33)
itkImageVF33.GetPixel = new_instancemethod(_itkImagePython.itkImageVF33_GetPixel, None, itkImageVF33)
itkImageVF33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF33_GetBufferPointer, None, itkImageVF33)
itkImageVF33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF33_GetPixelContainer, None, itkImageVF33)
itkImageVF33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF33_SetPixelContainer, None, itkImageVF33)
itkImageVF33.Graft = new_instancemethod(_itkImagePython.itkImageVF33_Graft, None, itkImageVF33)
itkImageVF33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF33_GetPixelAccessor, None, itkImageVF33)
itkImageVF33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF33_GetNeighborhoodAccessor, None, itkImageVF33)
itkImageVF33_swigregister = _itkImagePython.itkImageVF33_swigregister
itkImageVF33_swigregister(itkImageVF33)

def itkImageVF33___New_orig__() -> "itkImageVF33_Pointer":
    """itkImageVF33___New_orig__() -> itkImageVF33_Pointer"""
    return _itkImagePython.itkImageVF33___New_orig__()

def itkImageVF33_cast(obj: 'itkLightObject') -> "itkImageVF33 *":
    """itkImageVF33_cast(itkLightObject obj) -> itkImageVF33"""
    return _itkImagePython.itkImageVF33_cast(obj)

class itkImageVF42(itkImageBase2):
    """Proxy of C++ itkImageVF42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF42_Pointer":
        """__New_orig__() -> itkImageVF42_Pointer"""
        return _itkImagePython.itkImageVF42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF42_Pointer":
        """Clone(itkImageVF42 self) -> itkImageVF42_Pointer"""
        return _itkImagePython.itkImageVF42_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF42 self, bool initializePixels=False)
        Allocate(itkImageVF42 self)
        """
        return _itkImagePython.itkImageVF42_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF4') -> "void":
        """FillBuffer(itkImageVF42 self, itkVectorF4 value)"""
        return _itkImagePython.itkImageVF42_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorF4') -> "void":
        """SetPixel(itkImageVF42 self, itkIndex2 index, itkVectorF4 value)"""
        return _itkImagePython.itkImageVF42_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF4 &":
        """
        GetPixel(itkImageVF42 self, itkIndex2 index) -> itkVectorF4
        GetPixel(itkImageVF42 self, itkIndex2 index) -> itkVectorF4
        """
        return _itkImagePython.itkImageVF42_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF4 const *":
        """
        GetBufferPointer(itkImageVF42 self) -> itkVectorF4
        GetBufferPointer(itkImageVF42 self) -> itkVectorF4
        """
        return _itkImagePython.itkImageVF42_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > const *":
        """
        GetPixelContainer(itkImageVF42 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > >
        GetPixelContainer(itkImageVF42 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > const *
        """
        return _itkImagePython.itkImageVF42_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > *') -> "void":
        """SetPixelContainer(itkImageVF42 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > * container)"""
        return _itkImagePython.itkImageVF42_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF42') -> "void":
        """Graft(itkImageVF42 self, itkImageVF42 data)"""
        return _itkImagePython.itkImageVF42_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,4 > > const":
        """
        GetPixelAccessor(itkImageVF42 self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(itkImageVF42 self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const
        """
        return _itkImagePython.itkImageVF42_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,2 > >
        GetNeighborhoodAccessor(itkImageVF42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,2 > > const
        """
        return _itkImagePython.itkImageVF42_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF42

    def cast(obj: 'itkLightObject') -> "itkImageVF42 *":
        """cast(itkLightObject obj) -> itkImageVF42"""
        return _itkImagePython.itkImageVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVF42

        Create a new object of the class itkImageVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF42.Clone = new_instancemethod(_itkImagePython.itkImageVF42_Clone, None, itkImageVF42)
itkImageVF42.Allocate = new_instancemethod(_itkImagePython.itkImageVF42_Allocate, None, itkImageVF42)
itkImageVF42.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF42_FillBuffer, None, itkImageVF42)
itkImageVF42.SetPixel = new_instancemethod(_itkImagePython.itkImageVF42_SetPixel, None, itkImageVF42)
itkImageVF42.GetPixel = new_instancemethod(_itkImagePython.itkImageVF42_GetPixel, None, itkImageVF42)
itkImageVF42.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF42_GetBufferPointer, None, itkImageVF42)
itkImageVF42.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF42_GetPixelContainer, None, itkImageVF42)
itkImageVF42.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF42_SetPixelContainer, None, itkImageVF42)
itkImageVF42.Graft = new_instancemethod(_itkImagePython.itkImageVF42_Graft, None, itkImageVF42)
itkImageVF42.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF42_GetPixelAccessor, None, itkImageVF42)
itkImageVF42.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF42_GetNeighborhoodAccessor, None, itkImageVF42)
itkImageVF42_swigregister = _itkImagePython.itkImageVF42_swigregister
itkImageVF42_swigregister(itkImageVF42)

def itkImageVF42___New_orig__() -> "itkImageVF42_Pointer":
    """itkImageVF42___New_orig__() -> itkImageVF42_Pointer"""
    return _itkImagePython.itkImageVF42___New_orig__()

def itkImageVF42_cast(obj: 'itkLightObject') -> "itkImageVF42 *":
    """itkImageVF42_cast(itkLightObject obj) -> itkImageVF42"""
    return _itkImagePython.itkImageVF42_cast(obj)

class itkImageVF43(itkImageBase3):
    """Proxy of C++ itkImageVF43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF43_Pointer":
        """__New_orig__() -> itkImageVF43_Pointer"""
        return _itkImagePython.itkImageVF43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF43_Pointer":
        """Clone(itkImageVF43 self) -> itkImageVF43_Pointer"""
        return _itkImagePython.itkImageVF43_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF43 self, bool initializePixels=False)
        Allocate(itkImageVF43 self)
        """
        return _itkImagePython.itkImageVF43_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF4') -> "void":
        """FillBuffer(itkImageVF43 self, itkVectorF4 value)"""
        return _itkImagePython.itkImageVF43_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorF4') -> "void":
        """SetPixel(itkImageVF43 self, itkIndex3 index, itkVectorF4 value)"""
        return _itkImagePython.itkImageVF43_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF4 &":
        """
        GetPixel(itkImageVF43 self, itkIndex3 index) -> itkVectorF4
        GetPixel(itkImageVF43 self, itkIndex3 index) -> itkVectorF4
        """
        return _itkImagePython.itkImageVF43_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF4 const *":
        """
        GetBufferPointer(itkImageVF43 self) -> itkVectorF4
        GetBufferPointer(itkImageVF43 self) -> itkVectorF4
        """
        return _itkImagePython.itkImageVF43_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > const *":
        """
        GetPixelContainer(itkImageVF43 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > >
        GetPixelContainer(itkImageVF43 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > const *
        """
        return _itkImagePython.itkImageVF43_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > *') -> "void":
        """SetPixelContainer(itkImageVF43 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > * container)"""
        return _itkImagePython.itkImageVF43_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF43') -> "void":
        """Graft(itkImageVF43 self, itkImageVF43 data)"""
        return _itkImagePython.itkImageVF43_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,4 > > const":
        """
        GetPixelAccessor(itkImageVF43 self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(itkImageVF43 self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const
        """
        return _itkImagePython.itkImageVF43_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,3 > >
        GetNeighborhoodAccessor(itkImageVF43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,3 > > const
        """
        return _itkImagePython.itkImageVF43_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF43

    def cast(obj: 'itkLightObject') -> "itkImageVF43 *":
        """cast(itkLightObject obj) -> itkImageVF43"""
        return _itkImagePython.itkImageVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVF43

        Create a new object of the class itkImageVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF43.Clone = new_instancemethod(_itkImagePython.itkImageVF43_Clone, None, itkImageVF43)
itkImageVF43.Allocate = new_instancemethod(_itkImagePython.itkImageVF43_Allocate, None, itkImageVF43)
itkImageVF43.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF43_FillBuffer, None, itkImageVF43)
itkImageVF43.SetPixel = new_instancemethod(_itkImagePython.itkImageVF43_SetPixel, None, itkImageVF43)
itkImageVF43.GetPixel = new_instancemethod(_itkImagePython.itkImageVF43_GetPixel, None, itkImageVF43)
itkImageVF43.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF43_GetBufferPointer, None, itkImageVF43)
itkImageVF43.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF43_GetPixelContainer, None, itkImageVF43)
itkImageVF43.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF43_SetPixelContainer, None, itkImageVF43)
itkImageVF43.Graft = new_instancemethod(_itkImagePython.itkImageVF43_Graft, None, itkImageVF43)
itkImageVF43.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF43_GetPixelAccessor, None, itkImageVF43)
itkImageVF43.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF43_GetNeighborhoodAccessor, None, itkImageVF43)
itkImageVF43_swigregister = _itkImagePython.itkImageVF43_swigregister
itkImageVF43_swigregister(itkImageVF43)

def itkImageVF43___New_orig__() -> "itkImageVF43_Pointer":
    """itkImageVF43___New_orig__() -> itkImageVF43_Pointer"""
    return _itkImagePython.itkImageVF43___New_orig__()

def itkImageVF43_cast(obj: 'itkLightObject') -> "itkImageVF43 *":
    """itkImageVF43_cast(itkLightObject obj) -> itkImageVF43"""
    return _itkImagePython.itkImageVF43_cast(obj)

class itkImageB2(itkImageBase2):
    """Proxy of C++ itkImageB2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageB2_Pointer":
        """__New_orig__() -> itkImageB2_Pointer"""
        return _itkImagePython.itkImageB2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageB2_Pointer":
        """Clone(itkImageB2 self) -> itkImageB2_Pointer"""
        return _itkImagePython.itkImageB2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageB2 self, bool initializePixels=False)
        Allocate(itkImageB2 self)
        """
        return _itkImagePython.itkImageB2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'bool const &') -> "void":
        """FillBuffer(itkImageB2 self, bool const & value)"""
        return _itkImagePython.itkImageB2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'bool const &') -> "void":
        """SetPixel(itkImageB2 self, itkIndex2 index, bool const & value)"""
        return _itkImagePython.itkImageB2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "bool &":
        """
        GetPixel(itkImageB2 self, itkIndex2 index) -> bool const
        GetPixel(itkImageB2 self, itkIndex2 index) -> bool &
        """
        return _itkImagePython.itkImageB2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "bool const *":
        """
        GetBufferPointer(itkImageB2 self) -> bool
        GetBufferPointer(itkImageB2 self) -> bool const *
        """
        return _itkImagePython.itkImageB2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,bool > const *":
        """
        GetPixelContainer(itkImageB2 self) -> itk::ImportImageContainer< unsigned long long,bool >
        GetPixelContainer(itkImageB2 self) -> itk::ImportImageContainer< unsigned long long,bool > const *
        """
        return _itkImagePython.itkImageB2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,bool > *') -> "void":
        """SetPixelContainer(itkImageB2 self, itk::ImportImageContainer< unsigned long long,bool > * container)"""
        return _itkImagePython.itkImageB2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageB2') -> "void":
        """Graft(itkImageB2 self, itkImageB2 data)"""
        return _itkImagePython.itkImageB2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< bool > const":
        """
        GetPixelAccessor(itkImageB2 self) -> itk::DefaultPixelAccessor< bool >
        GetPixelAccessor(itkImageB2 self) -> itk::DefaultPixelAccessor< bool > const
        """
        return _itkImagePython.itkImageB2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< bool,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageB2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,2 > >
        GetNeighborhoodAccessor(itkImageB2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,2 > > const
        """
        return _itkImagePython.itkImageB2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageB2

    def cast(obj: 'itkLightObject') -> "itkImageB2 *":
        """cast(itkLightObject obj) -> itkImageB2"""
        return _itkImagePython.itkImageB2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageB2

        Create a new object of the class itkImageB2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageB2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageB2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageB2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageB2.Clone = new_instancemethod(_itkImagePython.itkImageB2_Clone, None, itkImageB2)
itkImageB2.Allocate = new_instancemethod(_itkImagePython.itkImageB2_Allocate, None, itkImageB2)
itkImageB2.FillBuffer = new_instancemethod(_itkImagePython.itkImageB2_FillBuffer, None, itkImageB2)
itkImageB2.SetPixel = new_instancemethod(_itkImagePython.itkImageB2_SetPixel, None, itkImageB2)
itkImageB2.GetPixel = new_instancemethod(_itkImagePython.itkImageB2_GetPixel, None, itkImageB2)
itkImageB2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageB2_GetBufferPointer, None, itkImageB2)
itkImageB2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageB2_GetPixelContainer, None, itkImageB2)
itkImageB2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageB2_SetPixelContainer, None, itkImageB2)
itkImageB2.Graft = new_instancemethod(_itkImagePython.itkImageB2_Graft, None, itkImageB2)
itkImageB2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageB2_GetPixelAccessor, None, itkImageB2)
itkImageB2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageB2_GetNeighborhoodAccessor, None, itkImageB2)
itkImageB2_swigregister = _itkImagePython.itkImageB2_swigregister
itkImageB2_swigregister(itkImageB2)

def itkImageB2___New_orig__() -> "itkImageB2_Pointer":
    """itkImageB2___New_orig__() -> itkImageB2_Pointer"""
    return _itkImagePython.itkImageB2___New_orig__()

def itkImageB2_cast(obj: 'itkLightObject') -> "itkImageB2 *":
    """itkImageB2_cast(itkLightObject obj) -> itkImageB2"""
    return _itkImagePython.itkImageB2_cast(obj)

class itkImageB3(itkImageBase3):
    """Proxy of C++ itkImageB3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageB3_Pointer":
        """__New_orig__() -> itkImageB3_Pointer"""
        return _itkImagePython.itkImageB3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageB3_Pointer":
        """Clone(itkImageB3 self) -> itkImageB3_Pointer"""
        return _itkImagePython.itkImageB3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageB3 self, bool initializePixels=False)
        Allocate(itkImageB3 self)
        """
        return _itkImagePython.itkImageB3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'bool const &') -> "void":
        """FillBuffer(itkImageB3 self, bool const & value)"""
        return _itkImagePython.itkImageB3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'bool const &') -> "void":
        """SetPixel(itkImageB3 self, itkIndex3 index, bool const & value)"""
        return _itkImagePython.itkImageB3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "bool &":
        """
        GetPixel(itkImageB3 self, itkIndex3 index) -> bool const
        GetPixel(itkImageB3 self, itkIndex3 index) -> bool &
        """
        return _itkImagePython.itkImageB3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "bool const *":
        """
        GetBufferPointer(itkImageB3 self) -> bool
        GetBufferPointer(itkImageB3 self) -> bool const *
        """
        return _itkImagePython.itkImageB3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long long,bool > const *":
        """
        GetPixelContainer(itkImageB3 self) -> itk::ImportImageContainer< unsigned long long,bool >
        GetPixelContainer(itkImageB3 self) -> itk::ImportImageContainer< unsigned long long,bool > const *
        """
        return _itkImagePython.itkImageB3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long long,bool > *') -> "void":
        """SetPixelContainer(itkImageB3 self, itk::ImportImageContainer< unsigned long long,bool > * container)"""
        return _itkImagePython.itkImageB3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageB3') -> "void":
        """Graft(itkImageB3 self, itkImageB3 data)"""
        return _itkImagePython.itkImageB3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< bool > const":
        """
        GetPixelAccessor(itkImageB3 self) -> itk::DefaultPixelAccessor< bool >
        GetPixelAccessor(itkImageB3 self) -> itk::DefaultPixelAccessor< bool > const
        """
        return _itkImagePython.itkImageB3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< bool,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageB3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,3 > >
        GetNeighborhoodAccessor(itkImageB3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,3 > > const
        """
        return _itkImagePython.itkImageB3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageB3

    def cast(obj: 'itkLightObject') -> "itkImageB3 *":
        """cast(itkLightObject obj) -> itkImageB3"""
        return _itkImagePython.itkImageB3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageB3

        Create a new object of the class itkImageB3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageB3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageB3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageB3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageB3.Clone = new_instancemethod(_itkImagePython.itkImageB3_Clone, None, itkImageB3)
itkImageB3.Allocate = new_instancemethod(_itkImagePython.itkImageB3_Allocate, None, itkImageB3)
itkImageB3.FillBuffer = new_instancemethod(_itkImagePython.itkImageB3_FillBuffer, None, itkImageB3)
itkImageB3.SetPixel = new_instancemethod(_itkImagePython.itkImageB3_SetPixel, None, itkImageB3)
itkImageB3.GetPixel = new_instancemethod(_itkImagePython.itkImageB3_GetPixel, None, itkImageB3)
itkImageB3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageB3_GetBufferPointer, None, itkImageB3)
itkImageB3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageB3_GetPixelContainer, None, itkImageB3)
itkImageB3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageB3_SetPixelContainer, None, itkImageB3)
itkImageB3.Graft = new_instancemethod(_itkImagePython.itkImageB3_Graft, None, itkImageB3)
itkImageB3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageB3_GetPixelAccessor, None, itkImageB3)
itkImageB3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageB3_GetNeighborhoodAccessor, None, itkImageB3)
itkImageB3_swigregister = _itkImagePython.itkImageB3_swigregister
itkImageB3_swigregister(itkImageB3)

def itkImageB3___New_orig__() -> "itkImageB3_Pointer":
    """itkImageB3___New_orig__() -> itkImageB3_Pointer"""
    return _itkImagePython.itkImageB3___New_orig__()

def itkImageB3_cast(obj: 'itkLightObject') -> "itkImageB3 *":
    """itkImageB3_cast(itkLightObject obj) -> itkImageB3"""
    return _itkImagePython.itkImageB3_cast(obj)



