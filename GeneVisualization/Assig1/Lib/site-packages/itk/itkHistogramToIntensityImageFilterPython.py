# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkHistogramToIntensityImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkHistogramToIntensityImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkHistogramToIntensityImageFilterPython
            return _itkHistogramToIntensityImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkHistogramToIntensityImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkHistogramToIntensityImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkHistogramToIntensityImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageSourcePython
import itkImageSourceCommonPython
import ITKCommonBasePython
import pyBasePython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkHistogramPython
import itkSamplePython
import itkArrayPython

def itkHistogramToIntensityImageFilterHDIF3_New():
  return itkHistogramToIntensityImageFilterHDIF3.New()


def itkHistogramToIntensityImageFilterHDIF3_Superclass_New():
  return itkHistogramToIntensityImageFilterHDIF3_Superclass.New()


def itkHistogramToIntensityImageFilterHFIF3_New():
  return itkHistogramToIntensityImageFilterHFIF3.New()


def itkHistogramToIntensityImageFilterHFIF3_Superclass_New():
  return itkHistogramToIntensityImageFilterHFIF3_Superclass.New()


def itkHistogramToIntensityImageFilterHDIF2_New():
  return itkHistogramToIntensityImageFilterHDIF2.New()


def itkHistogramToIntensityImageFilterHDIF2_Superclass_New():
  return itkHistogramToIntensityImageFilterHDIF2_Superclass.New()


def itkHistogramToIntensityImageFilterHFIF2_New():
  return itkHistogramToIntensityImageFilterHFIF2.New()


def itkHistogramToIntensityImageFilterHFIF2_Superclass_New():
  return itkHistogramToIntensityImageFilterHFIF2_Superclass.New()

class itkHistogramToIntensityImageFilterHDIF2_Superclass(itkImageSourcePython.itkImageSourceIF2):
    """Proxy of C++ itkHistogramToIntensityImageFilterHDIF2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToIntensityImageFilterHDIF2_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToIntensityImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToIntensityImageFilterHDIF2_Superclass_Pointer":
        """Clone(itkHistogramToIntensityImageFilterHDIF2_Superclass self) -> itkHistogramToIntensityImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramD') -> "void":
        """SetInput(itkHistogramToIntensityImageFilterHDIF2_Superclass self, itkHistogramD histogram)"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramD const *":
        """GetInput(itkHistogramToIntensityImageFilterHDIF2_Superclass self) -> itkHistogramD"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramIntensityFunction< unsigned long long,float > const &') -> "void":
        """SetFunctor(itkHistogramToIntensityImageFilterHDIF2_Superclass self, itk::Function::HistogramIntensityFunction< unsigned long long,float > const & functor)"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramIntensityFunction< unsigned long long,float > const &":
        """
        GetFunctor(itkHistogramToIntensityImageFilterHDIF2_Superclass self) -> itk::Function::HistogramIntensityFunction< unsigned long long,float >
        GetFunctor(itkHistogramToIntensityImageFilterHDIF2_Superclass self) -> itk::Function::HistogramIntensityFunction< unsigned long long,float > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long long') -> "void":
        """SetTotalFrequency(itkHistogramToIntensityImageFilterHDIF2_Superclass self, unsigned long long n)"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDIF2_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHDIF2_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHDIF2_Superclass"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDIF2_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHDIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDIF2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDIF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToIntensityImageFilterHDIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToIntensityImageFilterHDIF2_Superclass.Clone = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_Clone, None, itkHistogramToIntensityImageFilterHDIF2_Superclass)
itkHistogramToIntensityImageFilterHDIF2_Superclass.SetInput = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_SetInput, None, itkHistogramToIntensityImageFilterHDIF2_Superclass)
itkHistogramToIntensityImageFilterHDIF2_Superclass.GetInput = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_GetInput, None, itkHistogramToIntensityImageFilterHDIF2_Superclass)
itkHistogramToIntensityImageFilterHDIF2_Superclass.SetFunctor = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_SetFunctor, None, itkHistogramToIntensityImageFilterHDIF2_Superclass)
itkHistogramToIntensityImageFilterHDIF2_Superclass.GetFunctor = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_GetFunctor, None, itkHistogramToIntensityImageFilterHDIF2_Superclass)
itkHistogramToIntensityImageFilterHDIF2_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_SetTotalFrequency, None, itkHistogramToIntensityImageFilterHDIF2_Superclass)
itkHistogramToIntensityImageFilterHDIF2_Superclass_swigregister = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_swigregister
itkHistogramToIntensityImageFilterHDIF2_Superclass_swigregister(itkHistogramToIntensityImageFilterHDIF2_Superclass)

def itkHistogramToIntensityImageFilterHDIF2_Superclass___New_orig__() -> "itkHistogramToIntensityImageFilterHDIF2_Superclass_Pointer":
    """itkHistogramToIntensityImageFilterHDIF2_Superclass___New_orig__() -> itkHistogramToIntensityImageFilterHDIF2_Superclass_Pointer"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass___New_orig__()

def itkHistogramToIntensityImageFilterHDIF2_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHDIF2_Superclass *":
    """itkHistogramToIntensityImageFilterHDIF2_Superclass_cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHDIF2_Superclass"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_cast(obj)

class itkHistogramToIntensityImageFilterHDIF3_Superclass(itkImageSourcePython.itkImageSourceIF3):
    """Proxy of C++ itkHistogramToIntensityImageFilterHDIF3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToIntensityImageFilterHDIF3_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToIntensityImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToIntensityImageFilterHDIF3_Superclass_Pointer":
        """Clone(itkHistogramToIntensityImageFilterHDIF3_Superclass self) -> itkHistogramToIntensityImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramD') -> "void":
        """SetInput(itkHistogramToIntensityImageFilterHDIF3_Superclass self, itkHistogramD histogram)"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramD const *":
        """GetInput(itkHistogramToIntensityImageFilterHDIF3_Superclass self) -> itkHistogramD"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramIntensityFunction< unsigned long long,float > const &') -> "void":
        """SetFunctor(itkHistogramToIntensityImageFilterHDIF3_Superclass self, itk::Function::HistogramIntensityFunction< unsigned long long,float > const & functor)"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramIntensityFunction< unsigned long long,float > const &":
        """
        GetFunctor(itkHistogramToIntensityImageFilterHDIF3_Superclass self) -> itk::Function::HistogramIntensityFunction< unsigned long long,float >
        GetFunctor(itkHistogramToIntensityImageFilterHDIF3_Superclass self) -> itk::Function::HistogramIntensityFunction< unsigned long long,float > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long long') -> "void":
        """SetTotalFrequency(itkHistogramToIntensityImageFilterHDIF3_Superclass self, unsigned long long n)"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDIF3_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHDIF3_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHDIF3_Superclass"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDIF3_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHDIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDIF3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDIF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToIntensityImageFilterHDIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToIntensityImageFilterHDIF3_Superclass.Clone = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_Clone, None, itkHistogramToIntensityImageFilterHDIF3_Superclass)
itkHistogramToIntensityImageFilterHDIF3_Superclass.SetInput = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_SetInput, None, itkHistogramToIntensityImageFilterHDIF3_Superclass)
itkHistogramToIntensityImageFilterHDIF3_Superclass.GetInput = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_GetInput, None, itkHistogramToIntensityImageFilterHDIF3_Superclass)
itkHistogramToIntensityImageFilterHDIF3_Superclass.SetFunctor = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_SetFunctor, None, itkHistogramToIntensityImageFilterHDIF3_Superclass)
itkHistogramToIntensityImageFilterHDIF3_Superclass.GetFunctor = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_GetFunctor, None, itkHistogramToIntensityImageFilterHDIF3_Superclass)
itkHistogramToIntensityImageFilterHDIF3_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_SetTotalFrequency, None, itkHistogramToIntensityImageFilterHDIF3_Superclass)
itkHistogramToIntensityImageFilterHDIF3_Superclass_swigregister = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_swigregister
itkHistogramToIntensityImageFilterHDIF3_Superclass_swigregister(itkHistogramToIntensityImageFilterHDIF3_Superclass)

def itkHistogramToIntensityImageFilterHDIF3_Superclass___New_orig__() -> "itkHistogramToIntensityImageFilterHDIF3_Superclass_Pointer":
    """itkHistogramToIntensityImageFilterHDIF3_Superclass___New_orig__() -> itkHistogramToIntensityImageFilterHDIF3_Superclass_Pointer"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass___New_orig__()

def itkHistogramToIntensityImageFilterHDIF3_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHDIF3_Superclass *":
    """itkHistogramToIntensityImageFilterHDIF3_Superclass_cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHDIF3_Superclass"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_cast(obj)

class itkHistogramToIntensityImageFilterHFIF2_Superclass(itkImageSourcePython.itkImageSourceIF2):
    """Proxy of C++ itkHistogramToIntensityImageFilterHFIF2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToIntensityImageFilterHFIF2_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToIntensityImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToIntensityImageFilterHFIF2_Superclass_Pointer":
        """Clone(itkHistogramToIntensityImageFilterHFIF2_Superclass self) -> itkHistogramToIntensityImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramF') -> "void":
        """SetInput(itkHistogramToIntensityImageFilterHFIF2_Superclass self, itkHistogramF histogram)"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramF const *":
        """GetInput(itkHistogramToIntensityImageFilterHFIF2_Superclass self) -> itkHistogramF"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramIntensityFunction< unsigned long long,float > const &') -> "void":
        """SetFunctor(itkHistogramToIntensityImageFilterHFIF2_Superclass self, itk::Function::HistogramIntensityFunction< unsigned long long,float > const & functor)"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramIntensityFunction< unsigned long long,float > const &":
        """
        GetFunctor(itkHistogramToIntensityImageFilterHFIF2_Superclass self) -> itk::Function::HistogramIntensityFunction< unsigned long long,float >
        GetFunctor(itkHistogramToIntensityImageFilterHFIF2_Superclass self) -> itk::Function::HistogramIntensityFunction< unsigned long long,float > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long long') -> "void":
        """SetTotalFrequency(itkHistogramToIntensityImageFilterHFIF2_Superclass self, unsigned long long n)"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFIF2_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHFIF2_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHFIF2_Superclass"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFIF2_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHFIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFIF2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFIF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToIntensityImageFilterHFIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToIntensityImageFilterHFIF2_Superclass.Clone = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_Clone, None, itkHistogramToIntensityImageFilterHFIF2_Superclass)
itkHistogramToIntensityImageFilterHFIF2_Superclass.SetInput = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_SetInput, None, itkHistogramToIntensityImageFilterHFIF2_Superclass)
itkHistogramToIntensityImageFilterHFIF2_Superclass.GetInput = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_GetInput, None, itkHistogramToIntensityImageFilterHFIF2_Superclass)
itkHistogramToIntensityImageFilterHFIF2_Superclass.SetFunctor = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_SetFunctor, None, itkHistogramToIntensityImageFilterHFIF2_Superclass)
itkHistogramToIntensityImageFilterHFIF2_Superclass.GetFunctor = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_GetFunctor, None, itkHistogramToIntensityImageFilterHFIF2_Superclass)
itkHistogramToIntensityImageFilterHFIF2_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_SetTotalFrequency, None, itkHistogramToIntensityImageFilterHFIF2_Superclass)
itkHistogramToIntensityImageFilterHFIF2_Superclass_swigregister = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_swigregister
itkHistogramToIntensityImageFilterHFIF2_Superclass_swigregister(itkHistogramToIntensityImageFilterHFIF2_Superclass)

def itkHistogramToIntensityImageFilterHFIF2_Superclass___New_orig__() -> "itkHistogramToIntensityImageFilterHFIF2_Superclass_Pointer":
    """itkHistogramToIntensityImageFilterHFIF2_Superclass___New_orig__() -> itkHistogramToIntensityImageFilterHFIF2_Superclass_Pointer"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass___New_orig__()

def itkHistogramToIntensityImageFilterHFIF2_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHFIF2_Superclass *":
    """itkHistogramToIntensityImageFilterHFIF2_Superclass_cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHFIF2_Superclass"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_cast(obj)

class itkHistogramToIntensityImageFilterHFIF3_Superclass(itkImageSourcePython.itkImageSourceIF3):
    """Proxy of C++ itkHistogramToIntensityImageFilterHFIF3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToIntensityImageFilterHFIF3_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToIntensityImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToIntensityImageFilterHFIF3_Superclass_Pointer":
        """Clone(itkHistogramToIntensityImageFilterHFIF3_Superclass self) -> itkHistogramToIntensityImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramF') -> "void":
        """SetInput(itkHistogramToIntensityImageFilterHFIF3_Superclass self, itkHistogramF histogram)"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramF const *":
        """GetInput(itkHistogramToIntensityImageFilterHFIF3_Superclass self) -> itkHistogramF"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramIntensityFunction< unsigned long long,float > const &') -> "void":
        """SetFunctor(itkHistogramToIntensityImageFilterHFIF3_Superclass self, itk::Function::HistogramIntensityFunction< unsigned long long,float > const & functor)"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramIntensityFunction< unsigned long long,float > const &":
        """
        GetFunctor(itkHistogramToIntensityImageFilterHFIF3_Superclass self) -> itk::Function::HistogramIntensityFunction< unsigned long long,float >
        GetFunctor(itkHistogramToIntensityImageFilterHFIF3_Superclass self) -> itk::Function::HistogramIntensityFunction< unsigned long long,float > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long long') -> "void":
        """SetTotalFrequency(itkHistogramToIntensityImageFilterHFIF3_Superclass self, unsigned long long n)"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFIF3_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHFIF3_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHFIF3_Superclass"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFIF3_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHFIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFIF3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFIF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToIntensityImageFilterHFIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToIntensityImageFilterHFIF3_Superclass.Clone = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_Clone, None, itkHistogramToIntensityImageFilterHFIF3_Superclass)
itkHistogramToIntensityImageFilterHFIF3_Superclass.SetInput = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_SetInput, None, itkHistogramToIntensityImageFilterHFIF3_Superclass)
itkHistogramToIntensityImageFilterHFIF3_Superclass.GetInput = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_GetInput, None, itkHistogramToIntensityImageFilterHFIF3_Superclass)
itkHistogramToIntensityImageFilterHFIF3_Superclass.SetFunctor = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_SetFunctor, None, itkHistogramToIntensityImageFilterHFIF3_Superclass)
itkHistogramToIntensityImageFilterHFIF3_Superclass.GetFunctor = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_GetFunctor, None, itkHistogramToIntensityImageFilterHFIF3_Superclass)
itkHistogramToIntensityImageFilterHFIF3_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_SetTotalFrequency, None, itkHistogramToIntensityImageFilterHFIF3_Superclass)
itkHistogramToIntensityImageFilterHFIF3_Superclass_swigregister = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_swigregister
itkHistogramToIntensityImageFilterHFIF3_Superclass_swigregister(itkHistogramToIntensityImageFilterHFIF3_Superclass)

def itkHistogramToIntensityImageFilterHFIF3_Superclass___New_orig__() -> "itkHistogramToIntensityImageFilterHFIF3_Superclass_Pointer":
    """itkHistogramToIntensityImageFilterHFIF3_Superclass___New_orig__() -> itkHistogramToIntensityImageFilterHFIF3_Superclass_Pointer"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass___New_orig__()

def itkHistogramToIntensityImageFilterHFIF3_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHFIF3_Superclass *":
    """itkHistogramToIntensityImageFilterHFIF3_Superclass_cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHFIF3_Superclass"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_cast(obj)

class itkHistogramToIntensityImageFilterHDIF2(itkHistogramToIntensityImageFilterHDIF2_Superclass):
    """Proxy of C++ itkHistogramToIntensityImageFilterHDIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToIntensityImageFilterHDIF2_Pointer":
        """__New_orig__() -> itkHistogramToIntensityImageFilterHDIF2_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToIntensityImageFilterHDIF2_Pointer":
        """Clone(itkHistogramToIntensityImageFilterHDIF2 self) -> itkHistogramToIntensityImageFilterHDIF2_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Clone(self)

    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDIF2

    def cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHDIF2 *":
        """cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHDIF2"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDIF2

        Create a new object of the class itkHistogramToIntensityImageFilterHDIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToIntensityImageFilterHDIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToIntensityImageFilterHDIF2.Clone = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Clone, None, itkHistogramToIntensityImageFilterHDIF2)
itkHistogramToIntensityImageFilterHDIF2_swigregister = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_swigregister
itkHistogramToIntensityImageFilterHDIF2_swigregister(itkHistogramToIntensityImageFilterHDIF2)

def itkHistogramToIntensityImageFilterHDIF2___New_orig__() -> "itkHistogramToIntensityImageFilterHDIF2_Pointer":
    """itkHistogramToIntensityImageFilterHDIF2___New_orig__() -> itkHistogramToIntensityImageFilterHDIF2_Pointer"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2___New_orig__()

def itkHistogramToIntensityImageFilterHDIF2_cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHDIF2 *":
    """itkHistogramToIntensityImageFilterHDIF2_cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHDIF2"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_cast(obj)

class itkHistogramToIntensityImageFilterHDIF3(itkHistogramToIntensityImageFilterHDIF3_Superclass):
    """Proxy of C++ itkHistogramToIntensityImageFilterHDIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToIntensityImageFilterHDIF3_Pointer":
        """__New_orig__() -> itkHistogramToIntensityImageFilterHDIF3_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToIntensityImageFilterHDIF3_Pointer":
        """Clone(itkHistogramToIntensityImageFilterHDIF3 self) -> itkHistogramToIntensityImageFilterHDIF3_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Clone(self)

    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDIF3

    def cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHDIF3 *":
        """cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHDIF3"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDIF3

        Create a new object of the class itkHistogramToIntensityImageFilterHDIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToIntensityImageFilterHDIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToIntensityImageFilterHDIF3.Clone = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Clone, None, itkHistogramToIntensityImageFilterHDIF3)
itkHistogramToIntensityImageFilterHDIF3_swigregister = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_swigregister
itkHistogramToIntensityImageFilterHDIF3_swigregister(itkHistogramToIntensityImageFilterHDIF3)

def itkHistogramToIntensityImageFilterHDIF3___New_orig__() -> "itkHistogramToIntensityImageFilterHDIF3_Pointer":
    """itkHistogramToIntensityImageFilterHDIF3___New_orig__() -> itkHistogramToIntensityImageFilterHDIF3_Pointer"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3___New_orig__()

def itkHistogramToIntensityImageFilterHDIF3_cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHDIF3 *":
    """itkHistogramToIntensityImageFilterHDIF3_cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHDIF3"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_cast(obj)

class itkHistogramToIntensityImageFilterHFIF2(itkHistogramToIntensityImageFilterHFIF2_Superclass):
    """Proxy of C++ itkHistogramToIntensityImageFilterHFIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToIntensityImageFilterHFIF2_Pointer":
        """__New_orig__() -> itkHistogramToIntensityImageFilterHFIF2_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToIntensityImageFilterHFIF2_Pointer":
        """Clone(itkHistogramToIntensityImageFilterHFIF2 self) -> itkHistogramToIntensityImageFilterHFIF2_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Clone(self)

    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFIF2

    def cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHFIF2 *":
        """cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHFIF2"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFIF2

        Create a new object of the class itkHistogramToIntensityImageFilterHFIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToIntensityImageFilterHFIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToIntensityImageFilterHFIF2.Clone = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Clone, None, itkHistogramToIntensityImageFilterHFIF2)
itkHistogramToIntensityImageFilterHFIF2_swigregister = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_swigregister
itkHistogramToIntensityImageFilterHFIF2_swigregister(itkHistogramToIntensityImageFilterHFIF2)

def itkHistogramToIntensityImageFilterHFIF2___New_orig__() -> "itkHistogramToIntensityImageFilterHFIF2_Pointer":
    """itkHistogramToIntensityImageFilterHFIF2___New_orig__() -> itkHistogramToIntensityImageFilterHFIF2_Pointer"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2___New_orig__()

def itkHistogramToIntensityImageFilterHFIF2_cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHFIF2 *":
    """itkHistogramToIntensityImageFilterHFIF2_cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHFIF2"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_cast(obj)

class itkHistogramToIntensityImageFilterHFIF3(itkHistogramToIntensityImageFilterHFIF3_Superclass):
    """Proxy of C++ itkHistogramToIntensityImageFilterHFIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToIntensityImageFilterHFIF3_Pointer":
        """__New_orig__() -> itkHistogramToIntensityImageFilterHFIF3_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToIntensityImageFilterHFIF3_Pointer":
        """Clone(itkHistogramToIntensityImageFilterHFIF3 self) -> itkHistogramToIntensityImageFilterHFIF3_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Clone(self)

    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFIF3

    def cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHFIF3 *":
        """cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHFIF3"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFIF3

        Create a new object of the class itkHistogramToIntensityImageFilterHFIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToIntensityImageFilterHFIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToIntensityImageFilterHFIF3.Clone = new_instancemethod(_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Clone, None, itkHistogramToIntensityImageFilterHFIF3)
itkHistogramToIntensityImageFilterHFIF3_swigregister = _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_swigregister
itkHistogramToIntensityImageFilterHFIF3_swigregister(itkHistogramToIntensityImageFilterHFIF3)

def itkHistogramToIntensityImageFilterHFIF3___New_orig__() -> "itkHistogramToIntensityImageFilterHFIF3_Pointer":
    """itkHistogramToIntensityImageFilterHFIF3___New_orig__() -> itkHistogramToIntensityImageFilterHFIF3_Pointer"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3___New_orig__()

def itkHistogramToIntensityImageFilterHFIF3_cast(obj: 'itkLightObject') -> "itkHistogramToIntensityImageFilterHFIF3 *":
    """itkHistogramToIntensityImageFilterHFIF3_cast(itkLightObject obj) -> itkHistogramToIntensityImageFilterHFIF3"""
    return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_cast(obj)


def histogram_to_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToImageFilter"""
    import itk
    instance = itk.HistogramToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.HistogramToImageFilter, itkTemplate.itkTemplate):
        histogram_to_image_filter.__doc__ = itk.HistogramToImageFilter.values()[0].__doc__
    else:
        histogram_to_image_filter.__doc__ = itk.HistogramToImageFilter.__doc__

def histogram_to_intensity_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToIntensityImageFilter"""
    import itk
    instance = itk.HistogramToIntensityImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_intensity_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.HistogramToIntensityImageFilter, itkTemplate.itkTemplate):
        histogram_to_intensity_image_filter.__doc__ = itk.HistogramToIntensityImageFilter.values()[0].__doc__
    else:
        histogram_to_intensity_image_filter.__doc__ = itk.HistogramToIntensityImageFilter.__doc__




