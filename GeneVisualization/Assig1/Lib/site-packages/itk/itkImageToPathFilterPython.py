# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImageToPathFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImageToPathFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkImageToPathFilterPython
            return _itkImageToPathFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImageToPathFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImageToPathFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImageToPathFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPathSourcePython
import itkPolyLineParametricPathPython
import itkParametricPathPython
import itkIndexPython
import itkSizePython
import pyBasePython
import itkOffsetPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import ITKCommonBasePython
import itkPathBasePython
import itkContinuousIndexPython
import itkPointPython
import itkVectorContainerPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkRGBPixelPython
import itkRGBAPixelPython

def itkImageToPathFilterIF3PLPP3_New():
  return itkImageToPathFilterIF3PLPP3.New()


def itkImageToPathFilterIUS3PLPP3_New():
  return itkImageToPathFilterIUS3PLPP3.New()


def itkImageToPathFilterIUC3PLPP3_New():
  return itkImageToPathFilterIUC3PLPP3.New()


def itkImageToPathFilterISS3PLPP3_New():
  return itkImageToPathFilterISS3PLPP3.New()


def itkImageToPathFilterIF2PLPP2_New():
  return itkImageToPathFilterIF2PLPP2.New()


def itkImageToPathFilterIUS2PLPP2_New():
  return itkImageToPathFilterIUS2PLPP2.New()


def itkImageToPathFilterIUC2PLPP2_New():
  return itkImageToPathFilterIUC2PLPP2.New()


def itkImageToPathFilterISS2PLPP2_New():
  return itkImageToPathFilterISS2PLPP2.New()

class itkImageToPathFilterIF2PLPP2(itkPathSourcePython.itkPathSourcePLPP2):
    """Proxy of C++ itkImageToPathFilterIF2PLPP2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToPathFilterIF2PLPP2 self, itkImageF2 image)
        SetInput(itkImageToPathFilterIF2PLPP2 self, unsigned int arg0, itkImageF2 image)
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageF2 const *":
        """
        GetInput(itkImageToPathFilterIF2PLPP2 self) -> itkImageF2
        GetInput(itkImageToPathFilterIF2PLPP2 self, unsigned int idx) -> itkImageF2
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2_GetInput(self, *args)

    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterIF2PLPP2

    def cast(obj: 'itkLightObject') -> "itkImageToPathFilterIF2PLPP2 *":
        """cast(itkLightObject obj) -> itkImageToPathFilterIF2PLPP2"""
        return _itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToPathFilterIF2PLPP2

        Create a new object of the class itkImageToPathFilterIF2PLPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToPathFilterIF2PLPP2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToPathFilterIF2PLPP2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToPathFilterIF2PLPP2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToPathFilterIF2PLPP2.SetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2_SetInput, None, itkImageToPathFilterIF2PLPP2)
itkImageToPathFilterIF2PLPP2.GetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2_GetInput, None, itkImageToPathFilterIF2PLPP2)
itkImageToPathFilterIF2PLPP2_swigregister = _itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2_swigregister
itkImageToPathFilterIF2PLPP2_swigregister(itkImageToPathFilterIF2PLPP2)

def itkImageToPathFilterIF2PLPP2_cast(obj: 'itkLightObject') -> "itkImageToPathFilterIF2PLPP2 *":
    """itkImageToPathFilterIF2PLPP2_cast(itkLightObject obj) -> itkImageToPathFilterIF2PLPP2"""
    return _itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2_cast(obj)

class itkImageToPathFilterIF3PLPP3(itkPathSourcePython.itkPathSourcePLPP3):
    """Proxy of C++ itkImageToPathFilterIF3PLPP3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToPathFilterIF3PLPP3 self, itkImageF3 image)
        SetInput(itkImageToPathFilterIF3PLPP3 self, unsigned int arg0, itkImageF3 image)
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterIF3PLPP3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageF3 const *":
        """
        GetInput(itkImageToPathFilterIF3PLPP3 self) -> itkImageF3
        GetInput(itkImageToPathFilterIF3PLPP3 self, unsigned int idx) -> itkImageF3
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterIF3PLPP3_GetInput(self, *args)

    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterIF3PLPP3

    def cast(obj: 'itkLightObject') -> "itkImageToPathFilterIF3PLPP3 *":
        """cast(itkLightObject obj) -> itkImageToPathFilterIF3PLPP3"""
        return _itkImageToPathFilterPython.itkImageToPathFilterIF3PLPP3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToPathFilterIF3PLPP3

        Create a new object of the class itkImageToPathFilterIF3PLPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToPathFilterIF3PLPP3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToPathFilterIF3PLPP3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToPathFilterIF3PLPP3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToPathFilterIF3PLPP3.SetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterIF3PLPP3_SetInput, None, itkImageToPathFilterIF3PLPP3)
itkImageToPathFilterIF3PLPP3.GetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterIF3PLPP3_GetInput, None, itkImageToPathFilterIF3PLPP3)
itkImageToPathFilterIF3PLPP3_swigregister = _itkImageToPathFilterPython.itkImageToPathFilterIF3PLPP3_swigregister
itkImageToPathFilterIF3PLPP3_swigregister(itkImageToPathFilterIF3PLPP3)

def itkImageToPathFilterIF3PLPP3_cast(obj: 'itkLightObject') -> "itkImageToPathFilterIF3PLPP3 *":
    """itkImageToPathFilterIF3PLPP3_cast(itkLightObject obj) -> itkImageToPathFilterIF3PLPP3"""
    return _itkImageToPathFilterPython.itkImageToPathFilterIF3PLPP3_cast(obj)

class itkImageToPathFilterISS2PLPP2(itkPathSourcePython.itkPathSourcePLPP2):
    """Proxy of C++ itkImageToPathFilterISS2PLPP2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToPathFilterISS2PLPP2 self, itkImageSS2 image)
        SetInput(itkImageToPathFilterISS2PLPP2 self, unsigned int arg0, itkImageSS2 image)
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageSS2 const *":
        """
        GetInput(itkImageToPathFilterISS2PLPP2 self) -> itkImageSS2
        GetInput(itkImageToPathFilterISS2PLPP2 self, unsigned int idx) -> itkImageSS2
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2_GetInput(self, *args)

    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterISS2PLPP2

    def cast(obj: 'itkLightObject') -> "itkImageToPathFilterISS2PLPP2 *":
        """cast(itkLightObject obj) -> itkImageToPathFilterISS2PLPP2"""
        return _itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToPathFilterISS2PLPP2

        Create a new object of the class itkImageToPathFilterISS2PLPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToPathFilterISS2PLPP2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToPathFilterISS2PLPP2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToPathFilterISS2PLPP2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToPathFilterISS2PLPP2.SetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2_SetInput, None, itkImageToPathFilterISS2PLPP2)
itkImageToPathFilterISS2PLPP2.GetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2_GetInput, None, itkImageToPathFilterISS2PLPP2)
itkImageToPathFilterISS2PLPP2_swigregister = _itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2_swigregister
itkImageToPathFilterISS2PLPP2_swigregister(itkImageToPathFilterISS2PLPP2)

def itkImageToPathFilterISS2PLPP2_cast(obj: 'itkLightObject') -> "itkImageToPathFilterISS2PLPP2 *":
    """itkImageToPathFilterISS2PLPP2_cast(itkLightObject obj) -> itkImageToPathFilterISS2PLPP2"""
    return _itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2_cast(obj)

class itkImageToPathFilterISS3PLPP3(itkPathSourcePython.itkPathSourcePLPP3):
    """Proxy of C++ itkImageToPathFilterISS3PLPP3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToPathFilterISS3PLPP3 self, itkImageSS3 image)
        SetInput(itkImageToPathFilterISS3PLPP3 self, unsigned int arg0, itkImageSS3 image)
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterISS3PLPP3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageSS3 const *":
        """
        GetInput(itkImageToPathFilterISS3PLPP3 self) -> itkImageSS3
        GetInput(itkImageToPathFilterISS3PLPP3 self, unsigned int idx) -> itkImageSS3
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterISS3PLPP3_GetInput(self, *args)

    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterISS3PLPP3

    def cast(obj: 'itkLightObject') -> "itkImageToPathFilterISS3PLPP3 *":
        """cast(itkLightObject obj) -> itkImageToPathFilterISS3PLPP3"""
        return _itkImageToPathFilterPython.itkImageToPathFilterISS3PLPP3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToPathFilterISS3PLPP3

        Create a new object of the class itkImageToPathFilterISS3PLPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToPathFilterISS3PLPP3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToPathFilterISS3PLPP3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToPathFilterISS3PLPP3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToPathFilterISS3PLPP3.SetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterISS3PLPP3_SetInput, None, itkImageToPathFilterISS3PLPP3)
itkImageToPathFilterISS3PLPP3.GetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterISS3PLPP3_GetInput, None, itkImageToPathFilterISS3PLPP3)
itkImageToPathFilterISS3PLPP3_swigregister = _itkImageToPathFilterPython.itkImageToPathFilterISS3PLPP3_swigregister
itkImageToPathFilterISS3PLPP3_swigregister(itkImageToPathFilterISS3PLPP3)

def itkImageToPathFilterISS3PLPP3_cast(obj: 'itkLightObject') -> "itkImageToPathFilterISS3PLPP3 *":
    """itkImageToPathFilterISS3PLPP3_cast(itkLightObject obj) -> itkImageToPathFilterISS3PLPP3"""
    return _itkImageToPathFilterPython.itkImageToPathFilterISS3PLPP3_cast(obj)

class itkImageToPathFilterIUC2PLPP2(itkPathSourcePython.itkPathSourcePLPP2):
    """Proxy of C++ itkImageToPathFilterIUC2PLPP2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToPathFilterIUC2PLPP2 self, itkImageUC2 image)
        SetInput(itkImageToPathFilterIUC2PLPP2 self, unsigned int arg0, itkImageUC2 image)
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageUC2 const *":
        """
        GetInput(itkImageToPathFilterIUC2PLPP2 self) -> itkImageUC2
        GetInput(itkImageToPathFilterIUC2PLPP2 self, unsigned int idx) -> itkImageUC2
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2_GetInput(self, *args)

    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterIUC2PLPP2

    def cast(obj: 'itkLightObject') -> "itkImageToPathFilterIUC2PLPP2 *":
        """cast(itkLightObject obj) -> itkImageToPathFilterIUC2PLPP2"""
        return _itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToPathFilterIUC2PLPP2

        Create a new object of the class itkImageToPathFilterIUC2PLPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToPathFilterIUC2PLPP2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToPathFilterIUC2PLPP2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToPathFilterIUC2PLPP2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToPathFilterIUC2PLPP2.SetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2_SetInput, None, itkImageToPathFilterIUC2PLPP2)
itkImageToPathFilterIUC2PLPP2.GetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2_GetInput, None, itkImageToPathFilterIUC2PLPP2)
itkImageToPathFilterIUC2PLPP2_swigregister = _itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2_swigregister
itkImageToPathFilterIUC2PLPP2_swigregister(itkImageToPathFilterIUC2PLPP2)

def itkImageToPathFilterIUC2PLPP2_cast(obj: 'itkLightObject') -> "itkImageToPathFilterIUC2PLPP2 *":
    """itkImageToPathFilterIUC2PLPP2_cast(itkLightObject obj) -> itkImageToPathFilterIUC2PLPP2"""
    return _itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2_cast(obj)

class itkImageToPathFilterIUC3PLPP3(itkPathSourcePython.itkPathSourcePLPP3):
    """Proxy of C++ itkImageToPathFilterIUC3PLPP3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToPathFilterIUC3PLPP3 self, itkImageUC3 image)
        SetInput(itkImageToPathFilterIUC3PLPP3 self, unsigned int arg0, itkImageUC3 image)
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterIUC3PLPP3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageUC3 const *":
        """
        GetInput(itkImageToPathFilterIUC3PLPP3 self) -> itkImageUC3
        GetInput(itkImageToPathFilterIUC3PLPP3 self, unsigned int idx) -> itkImageUC3
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterIUC3PLPP3_GetInput(self, *args)

    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterIUC3PLPP3

    def cast(obj: 'itkLightObject') -> "itkImageToPathFilterIUC3PLPP3 *":
        """cast(itkLightObject obj) -> itkImageToPathFilterIUC3PLPP3"""
        return _itkImageToPathFilterPython.itkImageToPathFilterIUC3PLPP3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToPathFilterIUC3PLPP3

        Create a new object of the class itkImageToPathFilterIUC3PLPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToPathFilterIUC3PLPP3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToPathFilterIUC3PLPP3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToPathFilterIUC3PLPP3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToPathFilterIUC3PLPP3.SetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterIUC3PLPP3_SetInput, None, itkImageToPathFilterIUC3PLPP3)
itkImageToPathFilterIUC3PLPP3.GetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterIUC3PLPP3_GetInput, None, itkImageToPathFilterIUC3PLPP3)
itkImageToPathFilterIUC3PLPP3_swigregister = _itkImageToPathFilterPython.itkImageToPathFilterIUC3PLPP3_swigregister
itkImageToPathFilterIUC3PLPP3_swigregister(itkImageToPathFilterIUC3PLPP3)

def itkImageToPathFilterIUC3PLPP3_cast(obj: 'itkLightObject') -> "itkImageToPathFilterIUC3PLPP3 *":
    """itkImageToPathFilterIUC3PLPP3_cast(itkLightObject obj) -> itkImageToPathFilterIUC3PLPP3"""
    return _itkImageToPathFilterPython.itkImageToPathFilterIUC3PLPP3_cast(obj)

class itkImageToPathFilterIUS2PLPP2(itkPathSourcePython.itkPathSourcePLPP2):
    """Proxy of C++ itkImageToPathFilterIUS2PLPP2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToPathFilterIUS2PLPP2 self, itkImageUS2 image)
        SetInput(itkImageToPathFilterIUS2PLPP2 self, unsigned int arg0, itkImageUS2 image)
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageUS2 const *":
        """
        GetInput(itkImageToPathFilterIUS2PLPP2 self) -> itkImageUS2
        GetInput(itkImageToPathFilterIUS2PLPP2 self, unsigned int idx) -> itkImageUS2
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2_GetInput(self, *args)

    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterIUS2PLPP2

    def cast(obj: 'itkLightObject') -> "itkImageToPathFilterIUS2PLPP2 *":
        """cast(itkLightObject obj) -> itkImageToPathFilterIUS2PLPP2"""
        return _itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToPathFilterIUS2PLPP2

        Create a new object of the class itkImageToPathFilterIUS2PLPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToPathFilterIUS2PLPP2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToPathFilterIUS2PLPP2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToPathFilterIUS2PLPP2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToPathFilterIUS2PLPP2.SetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2_SetInput, None, itkImageToPathFilterIUS2PLPP2)
itkImageToPathFilterIUS2PLPP2.GetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2_GetInput, None, itkImageToPathFilterIUS2PLPP2)
itkImageToPathFilterIUS2PLPP2_swigregister = _itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2_swigregister
itkImageToPathFilterIUS2PLPP2_swigregister(itkImageToPathFilterIUS2PLPP2)

def itkImageToPathFilterIUS2PLPP2_cast(obj: 'itkLightObject') -> "itkImageToPathFilterIUS2PLPP2 *":
    """itkImageToPathFilterIUS2PLPP2_cast(itkLightObject obj) -> itkImageToPathFilterIUS2PLPP2"""
    return _itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2_cast(obj)

class itkImageToPathFilterIUS3PLPP3(itkPathSourcePython.itkPathSourcePLPP3):
    """Proxy of C++ itkImageToPathFilterIUS3PLPP3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToPathFilterIUS3PLPP3 self, itkImageUS3 image)
        SetInput(itkImageToPathFilterIUS3PLPP3 self, unsigned int arg0, itkImageUS3 image)
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterIUS3PLPP3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageUS3 const *":
        """
        GetInput(itkImageToPathFilterIUS3PLPP3 self) -> itkImageUS3
        GetInput(itkImageToPathFilterIUS3PLPP3 self, unsigned int idx) -> itkImageUS3
        """
        return _itkImageToPathFilterPython.itkImageToPathFilterIUS3PLPP3_GetInput(self, *args)

    __swig_destroy__ = _itkImageToPathFilterPython.delete_itkImageToPathFilterIUS3PLPP3

    def cast(obj: 'itkLightObject') -> "itkImageToPathFilterIUS3PLPP3 *":
        """cast(itkLightObject obj) -> itkImageToPathFilterIUS3PLPP3"""
        return _itkImageToPathFilterPython.itkImageToPathFilterIUS3PLPP3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToPathFilterIUS3PLPP3

        Create a new object of the class itkImageToPathFilterIUS3PLPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToPathFilterIUS3PLPP3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToPathFilterIUS3PLPP3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToPathFilterIUS3PLPP3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToPathFilterIUS3PLPP3.SetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterIUS3PLPP3_SetInput, None, itkImageToPathFilterIUS3PLPP3)
itkImageToPathFilterIUS3PLPP3.GetInput = new_instancemethod(_itkImageToPathFilterPython.itkImageToPathFilterIUS3PLPP3_GetInput, None, itkImageToPathFilterIUS3PLPP3)
itkImageToPathFilterIUS3PLPP3_swigregister = _itkImageToPathFilterPython.itkImageToPathFilterIUS3PLPP3_swigregister
itkImageToPathFilterIUS3PLPP3_swigregister(itkImageToPathFilterIUS3PLPP3)

def itkImageToPathFilterIUS3PLPP3_cast(obj: 'itkLightObject') -> "itkImageToPathFilterIUS3PLPP3 *":
    """itkImageToPathFilterIUS3PLPP3_cast(itkLightObject obj) -> itkImageToPathFilterIUS3PLPP3"""
    return _itkImageToPathFilterPython.itkImageToPathFilterIUS3PLPP3_cast(obj)


def image_to_path_filter(*args, **kwargs):
    """Procedural interface for ImageToPathFilter"""
    import itk
    instance = itk.ImageToPathFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_path_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ImageToPathFilter, itkTemplate.itkTemplate):
        image_to_path_filter.__doc__ = itk.ImageToPathFilter.values()[0].__doc__
    else:
        image_to_path_filter.__doc__ = itk.ImageToPathFilter.__doc__




