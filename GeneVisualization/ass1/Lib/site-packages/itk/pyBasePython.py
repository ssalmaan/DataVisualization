# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _pyBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyBasePython', [dirname(__file__)])
        except ImportError:
            import _pyBasePython
            return _pyBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_pyBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _pyBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyBasePython.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        """value(SwigPyIterator self) -> PyObject *"""
        return _pyBasePython.SwigPyIterator_value(self)


    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _pyBasePython.SwigPyIterator_incr(self, n)


    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _pyBasePython.SwigPyIterator_decr(self, n)


    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _pyBasePython.SwigPyIterator_distance(self, x)


    def equal(self, x: 'SwigPyIterator') -> "bool":
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _pyBasePython.SwigPyIterator_equal(self, x)


    def copy(self) -> "swig::SwigPyIterator *":
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _pyBasePython.SwigPyIterator_copy(self)


    def next(self) -> "PyObject *":
        """next(SwigPyIterator self) -> PyObject *"""
        return _pyBasePython.SwigPyIterator_next(self)


    def __next__(self) -> "PyObject *":
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _pyBasePython.SwigPyIterator___next__(self)


    def previous(self) -> "PyObject *":
        """previous(SwigPyIterator self) -> PyObject *"""
        return _pyBasePython.SwigPyIterator_previous(self)


    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _pyBasePython.SwigPyIterator_advance(self, n)


    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _pyBasePython.SwigPyIterator___eq__(self, x)


    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _pyBasePython.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _pyBasePython.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _pyBasePython.SwigPyIterator___isub__(self, n)


    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _pyBasePython.SwigPyIterator___add__(self, n)


    def __sub__(self, *args) -> "ptrdiff_t":
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _pyBasePython.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_pyBasePython.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_pyBasePython.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_pyBasePython.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_pyBasePython.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_pyBasePython.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_pyBasePython.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_pyBasePython.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_pyBasePython.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_pyBasePython.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_pyBasePython.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_pyBasePython.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_pyBasePython.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_pyBasePython.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_pyBasePython.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_pyBasePython.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_pyBasePython.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _pyBasePython.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    """Proxy of C++ std::ios_base class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _pyBasePython.ios_base_erase_event
    imbue_event = _pyBasePython.ios_base_imbue_event
    copyfmt_event = _pyBasePython.ios_base_copyfmt_event

    def register_callback(self, __fn: 'std::ios_base::event_callback', __index: 'int') -> "void":
        """register_callback(ios_base self, std::ios_base::event_callback __fn, int __index)"""
        return _pyBasePython.ios_base_register_callback(self, __fn, __index)


    def flags(self, *args) -> "std::ios_base::fmtflags":
        """
        flags(ios_base self) -> std::ios_base::fmtflags
        flags(ios_base self, std::ios_base::fmtflags __fmtfl) -> std::ios_base::fmtflags
        """
        return _pyBasePython.ios_base_flags(self, *args)


    def setf(self, *args) -> "std::ios_base::fmtflags":
        """
        setf(ios_base self, std::ios_base::fmtflags __fmtfl) -> std::ios_base::fmtflags
        setf(ios_base self, std::ios_base::fmtflags __fmtfl, std::ios_base::fmtflags __mask) -> std::ios_base::fmtflags
        """
        return _pyBasePython.ios_base_setf(self, *args)


    def unsetf(self, __mask: 'std::ios_base::fmtflags') -> "void":
        """unsetf(ios_base self, std::ios_base::fmtflags __mask)"""
        return _pyBasePython.ios_base_unsetf(self, __mask)


    def precision(self, *args) -> "std::streamsize":
        """
        precision(ios_base self) -> std::streamsize
        precision(ios_base self, std::streamsize __prec) -> std::streamsize
        """
        return _pyBasePython.ios_base_precision(self, *args)


    def width(self, *args) -> "std::streamsize":
        """
        width(ios_base self) -> std::streamsize
        width(ios_base self, std::streamsize __wide) -> std::streamsize
        """
        return _pyBasePython.ios_base_width(self, *args)


    def sync_with_stdio(__sync: 'bool'=True) -> "bool":
        """
        sync_with_stdio(bool __sync=True) -> bool
        sync_with_stdio() -> bool
        """
        return _pyBasePython.ios_base_sync_with_stdio(__sync)

    sync_with_stdio = staticmethod(sync_with_stdio)

    def imbue(self, __loc: 'std::locale const &') -> "std::locale":
        """imbue(ios_base self, std::locale const & __loc) -> std::locale"""
        return _pyBasePython.ios_base_imbue(self, __loc)


    def getloc(self) -> "std::locale":
        """getloc(ios_base self) -> std::locale"""
        return _pyBasePython.ios_base_getloc(self)


    def xalloc() -> "int":
        """xalloc() -> int"""
        return _pyBasePython.ios_base_xalloc()

    xalloc = staticmethod(xalloc)

    def iword(self, __ix: 'int') -> "long &":
        """iword(ios_base self, int __ix) -> long &"""
        return _pyBasePython.ios_base_iword(self, __ix)


    def pword(self, __ix: 'int') -> "void *&":
        """pword(ios_base self, int __ix) -> void *&"""
        return _pyBasePython.ios_base_pword(self, __ix)

    __swig_destroy__ = _pyBasePython.delete_ios_base
ios_base.register_callback = new_instancemethod(_pyBasePython.ios_base_register_callback, None, ios_base)
ios_base.flags = new_instancemethod(_pyBasePython.ios_base_flags, None, ios_base)
ios_base.setf = new_instancemethod(_pyBasePython.ios_base_setf, None, ios_base)
ios_base.unsetf = new_instancemethod(_pyBasePython.ios_base_unsetf, None, ios_base)
ios_base.precision = new_instancemethod(_pyBasePython.ios_base_precision, None, ios_base)
ios_base.width = new_instancemethod(_pyBasePython.ios_base_width, None, ios_base)
ios_base.imbue = new_instancemethod(_pyBasePython.ios_base_imbue, None, ios_base)
ios_base.getloc = new_instancemethod(_pyBasePython.ios_base_getloc, None, ios_base)
ios_base.iword = new_instancemethod(_pyBasePython.ios_base_iword, None, ios_base)
ios_base.pword = new_instancemethod(_pyBasePython.ios_base_pword, None, ios_base)
ios_base_swigregister = _pyBasePython.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _pyBasePython.cvar
ios_base.boolalpha = _pyBasePython.cvar.ios_base_boolalpha
ios_base.dec = _pyBasePython.cvar.ios_base_dec
ios_base.fixed = _pyBasePython.cvar.ios_base_fixed
ios_base.hex = _pyBasePython.cvar.ios_base_hex
ios_base.internal = _pyBasePython.cvar.ios_base_internal
ios_base.left = _pyBasePython.cvar.ios_base_left
ios_base.oct = _pyBasePython.cvar.ios_base_oct
ios_base.right = _pyBasePython.cvar.ios_base_right
ios_base.scientific = _pyBasePython.cvar.ios_base_scientific
ios_base.showbase = _pyBasePython.cvar.ios_base_showbase
ios_base.showpoint = _pyBasePython.cvar.ios_base_showpoint
ios_base.showpos = _pyBasePython.cvar.ios_base_showpos
ios_base.skipws = _pyBasePython.cvar.ios_base_skipws
ios_base.unitbuf = _pyBasePython.cvar.ios_base_unitbuf
ios_base.uppercase = _pyBasePython.cvar.ios_base_uppercase
ios_base.adjustfield = _pyBasePython.cvar.ios_base_adjustfield
ios_base.basefield = _pyBasePython.cvar.ios_base_basefield
ios_base.floatfield = _pyBasePython.cvar.ios_base_floatfield
ios_base.badbit = _pyBasePython.cvar.ios_base_badbit
ios_base.eofbit = _pyBasePython.cvar.ios_base_eofbit
ios_base.failbit = _pyBasePython.cvar.ios_base_failbit
ios_base.goodbit = _pyBasePython.cvar.ios_base_goodbit
ios_base.app = _pyBasePython.cvar.ios_base_app
ios_base.ate = _pyBasePython.cvar.ios_base_ate
ios_base.binary = _pyBasePython.cvar.ios_base_binary
ios_base.ios_base_in = _pyBasePython.cvar.ios_base_ios_base_in
ios_base.out = _pyBasePython.cvar.ios_base_out
ios_base.trunc = _pyBasePython.cvar.ios_base_trunc
ios_base.beg = _pyBasePython.cvar.ios_base_beg
ios_base.cur = _pyBasePython.cvar.ios_base_cur
ios_base.end = _pyBasePython.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync: 'bool'=True) -> "bool":
    """
    sync_with_stdio(bool __sync=True) -> bool
    ios_base_sync_with_stdio() -> bool
    """
    return _pyBasePython.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc() -> "int":
    """ios_base_xalloc() -> int"""
    return _pyBasePython.ios_base_xalloc()

class ios(ios_base):
    """Proxy of C++ std::basic_ios<(char)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def rdstate(self) -> "std::ios_base::iostate":
        """rdstate(ios self) -> std::ios_base::iostate"""
        return _pyBasePython.ios_rdstate(self)


    def clear(self, *args) -> "void":
        """
        clear(ios self, std::ios_base::iostate __state)
        clear(ios self)
        """
        return _pyBasePython.ios_clear(self, *args)


    def setstate(self, __state: 'std::ios_base::iostate') -> "void":
        """setstate(ios self, std::ios_base::iostate __state)"""
        return _pyBasePython.ios_setstate(self, __state)


    def good(self) -> "bool":
        """good(ios self) -> bool"""
        return _pyBasePython.ios_good(self)


    def eof(self) -> "bool":
        """eof(ios self) -> bool"""
        return _pyBasePython.ios_eof(self)


    def fail(self) -> "bool":
        """fail(ios self) -> bool"""
        return _pyBasePython.ios_fail(self)


    def bad(self) -> "bool":
        """bad(ios self) -> bool"""
        return _pyBasePython.ios_bad(self)


    def exceptions(self, *args) -> "void":
        """
        exceptions(ios self) -> std::ios_base::iostate
        exceptions(ios self, std::ios_base::iostate __except)
        """
        return _pyBasePython.ios_exceptions(self, *args)


    def __init__(self, __sb: 'std::basic_streambuf< char,std::char_traits< char > > *'):
        """__init__(std::basic_ios<(char)> self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> ios"""
        _pyBasePython.ios_swiginit(self, _pyBasePython.new_ios(__sb))
    __swig_destroy__ = _pyBasePython.delete_ios

    def tie(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > *":
        """
        tie(ios self) -> ostream
        tie(ios self, ostream __tiestr) -> ostream
        """
        return _pyBasePython.ios_tie(self, *args)


    def rdbuf(self, *args) -> "std::basic_streambuf< char,std::char_traits< char > > *":
        """
        rdbuf(ios self) -> std::basic_streambuf< char,std::char_traits< char > >
        rdbuf(ios self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> std::basic_streambuf< char,std::char_traits< char > > *
        """
        return _pyBasePython.ios_rdbuf(self, *args)


    def copyfmt(self, __rhs: 'ios') -> "std::basic_ios< char > &":
        """copyfmt(ios self, ios __rhs) -> ios"""
        return _pyBasePython.ios_copyfmt(self, __rhs)


    def fill(self, *args) -> "std::basic_ios< char >::char_type":
        """
        fill(ios self) -> std::basic_ios< char >::char_type
        fill(ios self, std::basic_ios< char >::char_type __ch) -> std::basic_ios< char >::char_type
        """
        return _pyBasePython.ios_fill(self, *args)


    def imbue(self, __loc: 'std::locale const &') -> "std::locale":
        """imbue(ios self, std::locale const & __loc) -> std::locale"""
        return _pyBasePython.ios_imbue(self, __loc)


    def narrow(self, __c: 'std::basic_ios< char >::char_type', __dfault: 'char') -> "char":
        """narrow(ios self, std::basic_ios< char >::char_type __c, char __dfault) -> char"""
        return _pyBasePython.ios_narrow(self, __c, __dfault)


    def widen(self, __c: 'char') -> "std::basic_ios< char >::char_type":
        """widen(ios self, char __c) -> std::basic_ios< char >::char_type"""
        return _pyBasePython.ios_widen(self, __c)

ios.rdstate = new_instancemethod(_pyBasePython.ios_rdstate, None, ios)
ios.clear = new_instancemethod(_pyBasePython.ios_clear, None, ios)
ios.setstate = new_instancemethod(_pyBasePython.ios_setstate, None, ios)
ios.good = new_instancemethod(_pyBasePython.ios_good, None, ios)
ios.eof = new_instancemethod(_pyBasePython.ios_eof, None, ios)
ios.fail = new_instancemethod(_pyBasePython.ios_fail, None, ios)
ios.bad = new_instancemethod(_pyBasePython.ios_bad, None, ios)
ios.exceptions = new_instancemethod(_pyBasePython.ios_exceptions, None, ios)
ios.tie = new_instancemethod(_pyBasePython.ios_tie, None, ios)
ios.rdbuf = new_instancemethod(_pyBasePython.ios_rdbuf, None, ios)
ios.copyfmt = new_instancemethod(_pyBasePython.ios_copyfmt, None, ios)
ios.fill = new_instancemethod(_pyBasePython.ios_fill, None, ios)
ios.imbue = new_instancemethod(_pyBasePython.ios_imbue, None, ios)
ios.narrow = new_instancemethod(_pyBasePython.ios_narrow, None, ios)
ios.widen = new_instancemethod(_pyBasePython.ios_widen, None, ios)
ios_swigregister = _pyBasePython.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    """Proxy of C++ std::basic_ostream<(char)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, __sb: 'std::basic_streambuf< char,std::char_traits< char > > *'):
        """__init__(std::basic_ostream<(char)> self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> ostream"""
        _pyBasePython.ostream_swiginit(self, _pyBasePython.new_ostream(__sb))
    __swig_destroy__ = _pyBasePython.delete_ostream

    def __lshift__(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > &":
        """
        __lshift__(ostream self, std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &) __pf) -> ostream
        __lshift__(ostream self, std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &) __pf) -> ostream
        __lshift__(ostream self, std::ios_base &(*)(std::ios_base &) __pf) -> ostream
        __lshift__(ostream self, long __n) -> ostream
        __lshift__(ostream self, unsigned long __n) -> ostream
        __lshift__(ostream self, bool __n) -> ostream
        __lshift__(ostream self, short __n) -> ostream
        __lshift__(ostream self, unsigned short __n) -> ostream
        __lshift__(ostream self, int __n) -> ostream
        __lshift__(ostream self, unsigned int __n) -> ostream
        __lshift__(ostream self, long long __n) -> ostream
        __lshift__(ostream self, unsigned long long __n) -> ostream
        __lshift__(ostream self, double __f) -> ostream
        __lshift__(ostream self, float __f) -> ostream
        __lshift__(ostream self, long double __f) -> ostream
        __lshift__(ostream self, void const * __p) -> ostream
        __lshift__(ostream self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> ostream
        __lshift__(ostream self, std::basic_string< char,std::char_traits< char >,std::allocator< char > > const & s) -> ostream
        """
        return _pyBasePython.ostream___lshift__(self, *args)


    def put(self, __c: 'std::basic_ostream< char >::char_type') -> "std::basic_ostream< char,std::char_traits< char > > &":
        """put(ostream self, std::basic_ostream< char >::char_type __c) -> ostream"""
        return _pyBasePython.ostream_put(self, __c)


    def write(self, __s: 'std::basic_ostream< char >::char_type const *', __n: 'std::streamsize') -> "std::basic_ostream< char,std::char_traits< char > > &":
        """write(ostream self, std::basic_ostream< char >::char_type const * __s, std::streamsize __n) -> ostream"""
        return _pyBasePython.ostream_write(self, __s, __n)


    def flush(self) -> "std::basic_ostream< char,std::char_traits< char > > &":
        """flush(ostream self) -> ostream"""
        return _pyBasePython.ostream_flush(self)


    def tellp(self) -> "std::basic_ostream< char >::pos_type":
        """tellp(ostream self) -> std::basic_ostream< char >::pos_type"""
        return _pyBasePython.ostream_tellp(self)


    def seekp(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > &":
        """
        seekp(ostream self, std::basic_ostream< char >::pos_type arg2) -> ostream
        seekp(ostream self, std::basic_ostream< char >::off_type arg2, std::ios_base::seekdir arg3) -> ostream
        """
        return _pyBasePython.ostream_seekp(self, *args)

ostream.__lshift__ = new_instancemethod(_pyBasePython.ostream___lshift__, None, ostream)
ostream.put = new_instancemethod(_pyBasePython.ostream_put, None, ostream)
ostream.write = new_instancemethod(_pyBasePython.ostream_write, None, ostream)
ostream.flush = new_instancemethod(_pyBasePython.ostream_flush, None, ostream)
ostream.tellp = new_instancemethod(_pyBasePython.ostream_tellp, None, ostream)
ostream.seekp = new_instancemethod(_pyBasePython.ostream_seekp, None, ostream)
ostream_swigregister = _pyBasePython.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    """Proxy of C++ std::basic_istream<(char)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, __sb: 'std::basic_streambuf< char,std::char_traits< char > > *'):
        """__init__(std::basic_istream<(char)> self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> istream"""
        _pyBasePython.istream_swiginit(self, _pyBasePython.new_istream(__sb))
    __swig_destroy__ = _pyBasePython.delete_istream

    def __rshift__(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        """
        __rshift__(istream self, std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &) __pf) -> istream
        __rshift__(istream self, std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &) __pf) -> istream
        __rshift__(istream self, std::ios_base &(*)(std::ios_base &) __pf) -> istream
        __rshift__(istream self, bool & __n) -> istream
        __rshift__(istream self, short & __n) -> istream
        __rshift__(istream self, unsigned short & __n) -> istream
        __rshift__(istream self, int & __n) -> istream
        __rshift__(istream self, unsigned int & __n) -> istream
        __rshift__(istream self, long & __n) -> istream
        __rshift__(istream self, unsigned long & __n) -> istream
        __rshift__(istream self, long long & __n) -> istream
        __rshift__(istream self, unsigned long long & __n) -> istream
        __rshift__(istream self, float & __f) -> istream
        __rshift__(istream self, double & __f) -> istream
        __rshift__(istream self, long double & __f) -> istream
        __rshift__(istream self, void *& __p) -> istream
        __rshift__(istream self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> istream
        """
        return _pyBasePython.istream___rshift__(self, *args)


    def gcount(self) -> "std::streamsize":
        """gcount(istream self) -> std::streamsize"""
        return _pyBasePython.istream_gcount(self)


    def get(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        """
        get(istream self) -> std::basic_istream< char >::int_type
        get(istream self, std::basic_istream< char >::char_type & __c) -> istream
        get(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n, std::basic_istream< char >::char_type __delim) -> istream
        get(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n) -> istream
        get(istream self, std::basic_streambuf< char,std::char_traits< char > > & __sb, std::basic_istream< char >::char_type __delim) -> istream
        get(istream self, std::basic_streambuf< char,std::char_traits< char > > & __sb) -> istream
        """
        return _pyBasePython.istream_get(self, *args)


    def getline(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        """
        getline(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n, std::basic_istream< char >::char_type __delim) -> istream
        getline(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n) -> istream
        """
        return _pyBasePython.istream_getline(self, *args)


    def ignore(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        """
        ignore(istream self, std::streamsize __n=1, std::basic_istream< char >::int_type __delim) -> istream
        ignore(istream self, std::streamsize __n=1) -> istream
        ignore(istream self) -> istream
        """
        return _pyBasePython.istream_ignore(self, *args)


    def peek(self) -> "std::basic_istream< char >::int_type":
        """peek(istream self) -> std::basic_istream< char >::int_type"""
        return _pyBasePython.istream_peek(self)


    def read(self, __s: 'std::basic_istream< char >::char_type *', __n: 'std::streamsize') -> "std::basic_istream< char,std::char_traits< char > > &":
        """read(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n) -> istream"""
        return _pyBasePython.istream_read(self, __s, __n)


    def readsome(self, __s: 'std::basic_istream< char >::char_type *', __n: 'std::streamsize') -> "std::streamsize":
        """readsome(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n) -> std::streamsize"""
        return _pyBasePython.istream_readsome(self, __s, __n)


    def putback(self, __c: 'std::basic_istream< char >::char_type') -> "std::basic_istream< char,std::char_traits< char > > &":
        """putback(istream self, std::basic_istream< char >::char_type __c) -> istream"""
        return _pyBasePython.istream_putback(self, __c)


    def unget(self) -> "std::basic_istream< char,std::char_traits< char > > &":
        """unget(istream self) -> istream"""
        return _pyBasePython.istream_unget(self)


    def sync(self) -> "int":
        """sync(istream self) -> int"""
        return _pyBasePython.istream_sync(self)


    def tellg(self) -> "std::basic_istream< char >::pos_type":
        """tellg(istream self) -> std::basic_istream< char >::pos_type"""
        return _pyBasePython.istream_tellg(self)


    def seekg(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        """
        seekg(istream self, std::basic_istream< char >::pos_type arg2) -> istream
        seekg(istream self, std::basic_istream< char >::off_type arg2, std::ios_base::seekdir arg3) -> istream
        """
        return _pyBasePython.istream_seekg(self, *args)

istream.__rshift__ = new_instancemethod(_pyBasePython.istream___rshift__, None, istream)
istream.gcount = new_instancemethod(_pyBasePython.istream_gcount, None, istream)
istream.get = new_instancemethod(_pyBasePython.istream_get, None, istream)
istream.getline = new_instancemethod(_pyBasePython.istream_getline, None, istream)
istream.ignore = new_instancemethod(_pyBasePython.istream_ignore, None, istream)
istream.peek = new_instancemethod(_pyBasePython.istream_peek, None, istream)
istream.read = new_instancemethod(_pyBasePython.istream_read, None, istream)
istream.readsome = new_instancemethod(_pyBasePython.istream_readsome, None, istream)
istream.putback = new_instancemethod(_pyBasePython.istream_putback, None, istream)
istream.unget = new_instancemethod(_pyBasePython.istream_unget, None, istream)
istream.sync = new_instancemethod(_pyBasePython.istream_sync, None, istream)
istream.tellg = new_instancemethod(_pyBasePython.istream_tellg, None, istream)
istream.seekg = new_instancemethod(_pyBasePython.istream_seekg, None, istream)
istream_swigregister = _pyBasePython.istream_swigregister
istream_swigregister(istream)

class iostream(istream, ostream):
    """Proxy of C++ std::basic_iostream<(char)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, __sb: 'std::basic_streambuf< char,std::char_traits< char > > *'):
        """__init__(std::basic_iostream<(char)> self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> iostream"""
        _pyBasePython.iostream_swiginit(self, _pyBasePython.new_iostream(__sb))
    __swig_destroy__ = _pyBasePython.delete_iostream
iostream_swigregister = _pyBasePython.iostream_swigregister
iostream_swigregister(iostream)


_pyBasePython.endl_cb_ptr_swigconstant(_pyBasePython)
endl_cb_ptr = _pyBasePython.endl_cb_ptr

def endl(arg1: 'ostream') -> "std::basic_ostream< char,std::char_traits< char > > &":
    """endl(ostream arg1) -> ostream"""
    return _pyBasePython.endl(arg1)

_pyBasePython.ends_cb_ptr_swigconstant(_pyBasePython)
ends_cb_ptr = _pyBasePython.ends_cb_ptr

def ends(arg1: 'ostream') -> "std::basic_ostream< char,std::char_traits< char > > &":
    """ends(ostream arg1) -> ostream"""
    return _pyBasePython.ends(arg1)

_pyBasePython.flush_cb_ptr_swigconstant(_pyBasePython)
flush_cb_ptr = _pyBasePython.flush_cb_ptr

def flush(arg1: 'ostream') -> "std::basic_ostream< char,std::char_traits< char > > &":
    """flush(ostream arg1) -> ostream"""
    return _pyBasePython.flush(arg1)

str = str

class mapULD(object):
    """Proxy of C++ std::map<(unsigned long,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(mapULD self) -> SwigPyIterator"""
        return _pyBasePython.mapULD_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(mapULD self) -> bool"""
        return _pyBasePython.mapULD___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(mapULD self) -> bool"""
        return _pyBasePython.mapULD___bool__(self)


    def __len__(self) -> "std::map< unsigned long,double >::size_type":
        """__len__(mapULD self) -> std::map< unsigned long,double >::size_type"""
        return _pyBasePython.mapULD___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< unsigned long,double >::key_type const &') -> "std::map< unsigned long,double >::mapped_type const &":
        """__getitem__(mapULD self, std::map< unsigned long,double >::key_type const & key) -> std::map< unsigned long,double >::mapped_type const &"""
        return _pyBasePython.mapULD___getitem__(self, key)


    def __delitem__(self, key: 'std::map< unsigned long,double >::key_type const &') -> "void":
        """__delitem__(mapULD self, std::map< unsigned long,double >::key_type const & key)"""
        return _pyBasePython.mapULD___delitem__(self, key)


    def has_key(self, key: 'std::map< unsigned long,double >::key_type const &') -> "bool":
        """has_key(mapULD self, std::map< unsigned long,double >::key_type const & key) -> bool"""
        return _pyBasePython.mapULD_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(mapULD self) -> PyObject *"""
        return _pyBasePython.mapULD_keys(self)


    def values(self) -> "PyObject *":
        """values(mapULD self) -> PyObject *"""
        return _pyBasePython.mapULD_values(self)


    def items(self) -> "PyObject *":
        """items(mapULD self) -> PyObject *"""
        return _pyBasePython.mapULD_items(self)


    def __contains__(self, key: 'std::map< unsigned long,double >::key_type const &') -> "bool":
        """__contains__(mapULD self, std::map< unsigned long,double >::key_type const & key) -> bool"""
        return _pyBasePython.mapULD___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(mapULD self) -> SwigPyIterator"""
        return _pyBasePython.mapULD_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(mapULD self) -> SwigPyIterator"""
        return _pyBasePython.mapULD_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(mapULD self, std::map< unsigned long,double >::key_type const & key)
        __setitem__(mapULD self, std::map< unsigned long,double >::key_type const & key, std::map< unsigned long,double >::mapped_type const & x)
        """
        return _pyBasePython.mapULD___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(mapULD self) -> PyObject *"""
        return _pyBasePython.mapULD_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(unsigned long,double)> self, std::less< unsigned long > const & arg2) -> mapULD
        __init__(std::map<(unsigned long,double)> self) -> mapULD
        __init__(std::map<(unsigned long,double)> self, mapULD arg2) -> mapULD
        """
        _pyBasePython.mapULD_swiginit(self, _pyBasePython.new_mapULD(*args))

    def empty(self) -> "bool":
        """empty(mapULD self) -> bool"""
        return _pyBasePython.mapULD_empty(self)


    def size(self) -> "std::map< unsigned long,double >::size_type":
        """size(mapULD self) -> std::map< unsigned long,double >::size_type"""
        return _pyBasePython.mapULD_size(self)


    def swap(self, v: 'mapULD') -> "void":
        """swap(mapULD self, mapULD v)"""
        return _pyBasePython.mapULD_swap(self, v)


    def begin(self) -> "std::map< unsigned long,double >::iterator":
        """begin(mapULD self) -> std::map< unsigned long,double >::iterator"""
        return _pyBasePython.mapULD_begin(self)


    def end(self) -> "std::map< unsigned long,double >::iterator":
        """end(mapULD self) -> std::map< unsigned long,double >::iterator"""
        return _pyBasePython.mapULD_end(self)


    def rbegin(self) -> "std::map< unsigned long,double >::reverse_iterator":
        """rbegin(mapULD self) -> std::map< unsigned long,double >::reverse_iterator"""
        return _pyBasePython.mapULD_rbegin(self)


    def rend(self) -> "std::map< unsigned long,double >::reverse_iterator":
        """rend(mapULD self) -> std::map< unsigned long,double >::reverse_iterator"""
        return _pyBasePython.mapULD_rend(self)


    def clear(self) -> "void":
        """clear(mapULD self)"""
        return _pyBasePython.mapULD_clear(self)


    def get_allocator(self) -> "std::map< unsigned long,double >::allocator_type":
        """get_allocator(mapULD self) -> std::map< unsigned long,double >::allocator_type"""
        return _pyBasePython.mapULD_get_allocator(self)


    def count(self, x: 'std::map< unsigned long,double >::key_type const &') -> "std::map< unsigned long,double >::size_type":
        """count(mapULD self, std::map< unsigned long,double >::key_type const & x) -> std::map< unsigned long,double >::size_type"""
        return _pyBasePython.mapULD_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(mapULD self, std::map< unsigned long,double >::key_type const & x) -> std::map< unsigned long,double >::size_type
        erase(mapULD self, std::map< unsigned long,double >::iterator position)
        erase(mapULD self, std::map< unsigned long,double >::iterator first, std::map< unsigned long,double >::iterator last)
        """
        return _pyBasePython.mapULD_erase(self, *args)


    def find(self, x: 'std::map< unsigned long,double >::key_type const &') -> "std::map< unsigned long,double >::iterator":
        """find(mapULD self, std::map< unsigned long,double >::key_type const & x) -> std::map< unsigned long,double >::iterator"""
        return _pyBasePython.mapULD_find(self, x)


    def lower_bound(self, x: 'std::map< unsigned long,double >::key_type const &') -> "std::map< unsigned long,double >::iterator":
        """lower_bound(mapULD self, std::map< unsigned long,double >::key_type const & x) -> std::map< unsigned long,double >::iterator"""
        return _pyBasePython.mapULD_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< unsigned long,double >::key_type const &') -> "std::map< unsigned long,double >::iterator":
        """upper_bound(mapULD self, std::map< unsigned long,double >::key_type const & x) -> std::map< unsigned long,double >::iterator"""
        return _pyBasePython.mapULD_upper_bound(self, x)

    __swig_destroy__ = _pyBasePython.delete_mapULD
mapULD.iterator = new_instancemethod(_pyBasePython.mapULD_iterator, None, mapULD)
mapULD.__nonzero__ = new_instancemethod(_pyBasePython.mapULD___nonzero__, None, mapULD)
mapULD.__bool__ = new_instancemethod(_pyBasePython.mapULD___bool__, None, mapULD)
mapULD.__len__ = new_instancemethod(_pyBasePython.mapULD___len__, None, mapULD)
mapULD.__getitem__ = new_instancemethod(_pyBasePython.mapULD___getitem__, None, mapULD)
mapULD.__delitem__ = new_instancemethod(_pyBasePython.mapULD___delitem__, None, mapULD)
mapULD.has_key = new_instancemethod(_pyBasePython.mapULD_has_key, None, mapULD)
mapULD.keys = new_instancemethod(_pyBasePython.mapULD_keys, None, mapULD)
mapULD.values = new_instancemethod(_pyBasePython.mapULD_values, None, mapULD)
mapULD.items = new_instancemethod(_pyBasePython.mapULD_items, None, mapULD)
mapULD.__contains__ = new_instancemethod(_pyBasePython.mapULD___contains__, None, mapULD)
mapULD.key_iterator = new_instancemethod(_pyBasePython.mapULD_key_iterator, None, mapULD)
mapULD.value_iterator = new_instancemethod(_pyBasePython.mapULD_value_iterator, None, mapULD)
mapULD.__setitem__ = new_instancemethod(_pyBasePython.mapULD___setitem__, None, mapULD)
mapULD.asdict = new_instancemethod(_pyBasePython.mapULD_asdict, None, mapULD)
mapULD.empty = new_instancemethod(_pyBasePython.mapULD_empty, None, mapULD)
mapULD.size = new_instancemethod(_pyBasePython.mapULD_size, None, mapULD)
mapULD.swap = new_instancemethod(_pyBasePython.mapULD_swap, None, mapULD)
mapULD.begin = new_instancemethod(_pyBasePython.mapULD_begin, None, mapULD)
mapULD.end = new_instancemethod(_pyBasePython.mapULD_end, None, mapULD)
mapULD.rbegin = new_instancemethod(_pyBasePython.mapULD_rbegin, None, mapULD)
mapULD.rend = new_instancemethod(_pyBasePython.mapULD_rend, None, mapULD)
mapULD.clear = new_instancemethod(_pyBasePython.mapULD_clear, None, mapULD)
mapULD.get_allocator = new_instancemethod(_pyBasePython.mapULD_get_allocator, None, mapULD)
mapULD.count = new_instancemethod(_pyBasePython.mapULD_count, None, mapULD)
mapULD.erase = new_instancemethod(_pyBasePython.mapULD_erase, None, mapULD)
mapULD.find = new_instancemethod(_pyBasePython.mapULD_find, None, mapULD)
mapULD.lower_bound = new_instancemethod(_pyBasePython.mapULD_lower_bound, None, mapULD)
mapULD.upper_bound = new_instancemethod(_pyBasePython.mapULD_upper_bound, None, mapULD)
mapULD_swigregister = _pyBasePython.mapULD_swigregister
mapULD_swigregister(mapULD)

class mapBB(object):
    """Proxy of C++ std::map<(bool,bool)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(mapBB self) -> SwigPyIterator"""
        return _pyBasePython.mapBB_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(mapBB self) -> bool"""
        return _pyBasePython.mapBB___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(mapBB self) -> bool"""
        return _pyBasePython.mapBB___bool__(self)


    def __len__(self) -> "std::map< bool,bool >::size_type":
        """__len__(mapBB self) -> std::map< bool,bool >::size_type"""
        return _pyBasePython.mapBB___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< bool,bool >::key_type const &') -> "std::map< bool,bool >::mapped_type const &":
        """__getitem__(mapBB self, std::map< bool,bool >::key_type const & key) -> std::map< bool,bool >::mapped_type const &"""
        return _pyBasePython.mapBB___getitem__(self, key)


    def __delitem__(self, key: 'std::map< bool,bool >::key_type const &') -> "void":
        """__delitem__(mapBB self, std::map< bool,bool >::key_type const & key)"""
        return _pyBasePython.mapBB___delitem__(self, key)


    def has_key(self, key: 'std::map< bool,bool >::key_type const &') -> "bool":
        """has_key(mapBB self, std::map< bool,bool >::key_type const & key) -> bool"""
        return _pyBasePython.mapBB_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(mapBB self) -> PyObject *"""
        return _pyBasePython.mapBB_keys(self)


    def values(self) -> "PyObject *":
        """values(mapBB self) -> PyObject *"""
        return _pyBasePython.mapBB_values(self)


    def items(self) -> "PyObject *":
        """items(mapBB self) -> PyObject *"""
        return _pyBasePython.mapBB_items(self)


    def __contains__(self, key: 'std::map< bool,bool >::key_type const &') -> "bool":
        """__contains__(mapBB self, std::map< bool,bool >::key_type const & key) -> bool"""
        return _pyBasePython.mapBB___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(mapBB self) -> SwigPyIterator"""
        return _pyBasePython.mapBB_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(mapBB self) -> SwigPyIterator"""
        return _pyBasePython.mapBB_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(mapBB self, std::map< bool,bool >::key_type const & key)
        __setitem__(mapBB self, std::map< bool,bool >::key_type const & key, std::map< bool,bool >::mapped_type const & x)
        """
        return _pyBasePython.mapBB___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(mapBB self) -> PyObject *"""
        return _pyBasePython.mapBB_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(bool,bool)> self, std::less< bool > const & arg2) -> mapBB
        __init__(std::map<(bool,bool)> self) -> mapBB
        __init__(std::map<(bool,bool)> self, mapBB arg2) -> mapBB
        """
        _pyBasePython.mapBB_swiginit(self, _pyBasePython.new_mapBB(*args))

    def empty(self) -> "bool":
        """empty(mapBB self) -> bool"""
        return _pyBasePython.mapBB_empty(self)


    def size(self) -> "std::map< bool,bool >::size_type":
        """size(mapBB self) -> std::map< bool,bool >::size_type"""
        return _pyBasePython.mapBB_size(self)


    def swap(self, v: 'mapBB') -> "void":
        """swap(mapBB self, mapBB v)"""
        return _pyBasePython.mapBB_swap(self, v)


    def begin(self) -> "std::map< bool,bool >::iterator":
        """begin(mapBB self) -> std::map< bool,bool >::iterator"""
        return _pyBasePython.mapBB_begin(self)


    def end(self) -> "std::map< bool,bool >::iterator":
        """end(mapBB self) -> std::map< bool,bool >::iterator"""
        return _pyBasePython.mapBB_end(self)


    def rbegin(self) -> "std::map< bool,bool >::reverse_iterator":
        """rbegin(mapBB self) -> std::map< bool,bool >::reverse_iterator"""
        return _pyBasePython.mapBB_rbegin(self)


    def rend(self) -> "std::map< bool,bool >::reverse_iterator":
        """rend(mapBB self) -> std::map< bool,bool >::reverse_iterator"""
        return _pyBasePython.mapBB_rend(self)


    def clear(self) -> "void":
        """clear(mapBB self)"""
        return _pyBasePython.mapBB_clear(self)


    def get_allocator(self) -> "std::map< bool,bool >::allocator_type":
        """get_allocator(mapBB self) -> std::map< bool,bool >::allocator_type"""
        return _pyBasePython.mapBB_get_allocator(self)


    def count(self, x: 'std::map< bool,bool >::key_type const &') -> "std::map< bool,bool >::size_type":
        """count(mapBB self, std::map< bool,bool >::key_type const & x) -> std::map< bool,bool >::size_type"""
        return _pyBasePython.mapBB_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(mapBB self, std::map< bool,bool >::key_type const & x) -> std::map< bool,bool >::size_type
        erase(mapBB self, std::map< bool,bool >::iterator position)
        erase(mapBB self, std::map< bool,bool >::iterator first, std::map< bool,bool >::iterator last)
        """
        return _pyBasePython.mapBB_erase(self, *args)


    def find(self, x: 'std::map< bool,bool >::key_type const &') -> "std::map< bool,bool >::iterator":
        """find(mapBB self, std::map< bool,bool >::key_type const & x) -> std::map< bool,bool >::iterator"""
        return _pyBasePython.mapBB_find(self, x)


    def lower_bound(self, x: 'std::map< bool,bool >::key_type const &') -> "std::map< bool,bool >::iterator":
        """lower_bound(mapBB self, std::map< bool,bool >::key_type const & x) -> std::map< bool,bool >::iterator"""
        return _pyBasePython.mapBB_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< bool,bool >::key_type const &') -> "std::map< bool,bool >::iterator":
        """upper_bound(mapBB self, std::map< bool,bool >::key_type const & x) -> std::map< bool,bool >::iterator"""
        return _pyBasePython.mapBB_upper_bound(self, x)

    __swig_destroy__ = _pyBasePython.delete_mapBB
mapBB.iterator = new_instancemethod(_pyBasePython.mapBB_iterator, None, mapBB)
mapBB.__nonzero__ = new_instancemethod(_pyBasePython.mapBB___nonzero__, None, mapBB)
mapBB.__bool__ = new_instancemethod(_pyBasePython.mapBB___bool__, None, mapBB)
mapBB.__len__ = new_instancemethod(_pyBasePython.mapBB___len__, None, mapBB)
mapBB.__getitem__ = new_instancemethod(_pyBasePython.mapBB___getitem__, None, mapBB)
mapBB.__delitem__ = new_instancemethod(_pyBasePython.mapBB___delitem__, None, mapBB)
mapBB.has_key = new_instancemethod(_pyBasePython.mapBB_has_key, None, mapBB)
mapBB.keys = new_instancemethod(_pyBasePython.mapBB_keys, None, mapBB)
mapBB.values = new_instancemethod(_pyBasePython.mapBB_values, None, mapBB)
mapBB.items = new_instancemethod(_pyBasePython.mapBB_items, None, mapBB)
mapBB.__contains__ = new_instancemethod(_pyBasePython.mapBB___contains__, None, mapBB)
mapBB.key_iterator = new_instancemethod(_pyBasePython.mapBB_key_iterator, None, mapBB)
mapBB.value_iterator = new_instancemethod(_pyBasePython.mapBB_value_iterator, None, mapBB)
mapBB.__setitem__ = new_instancemethod(_pyBasePython.mapBB___setitem__, None, mapBB)
mapBB.asdict = new_instancemethod(_pyBasePython.mapBB_asdict, None, mapBB)
mapBB.empty = new_instancemethod(_pyBasePython.mapBB_empty, None, mapBB)
mapBB.size = new_instancemethod(_pyBasePython.mapBB_size, None, mapBB)
mapBB.swap = new_instancemethod(_pyBasePython.mapBB_swap, None, mapBB)
mapBB.begin = new_instancemethod(_pyBasePython.mapBB_begin, None, mapBB)
mapBB.end = new_instancemethod(_pyBasePython.mapBB_end, None, mapBB)
mapBB.rbegin = new_instancemethod(_pyBasePython.mapBB_rbegin, None, mapBB)
mapBB.rend = new_instancemethod(_pyBasePython.mapBB_rend, None, mapBB)
mapBB.clear = new_instancemethod(_pyBasePython.mapBB_clear, None, mapBB)
mapBB.get_allocator = new_instancemethod(_pyBasePython.mapBB_get_allocator, None, mapBB)
mapBB.count = new_instancemethod(_pyBasePython.mapBB_count, None, mapBB)
mapBB.erase = new_instancemethod(_pyBasePython.mapBB_erase, None, mapBB)
mapBB.find = new_instancemethod(_pyBasePython.mapBB_find, None, mapBB)
mapBB.lower_bound = new_instancemethod(_pyBasePython.mapBB_lower_bound, None, mapBB)
mapBB.upper_bound = new_instancemethod(_pyBasePython.mapBB_upper_bound, None, mapBB)
mapBB_swigregister = _pyBasePython.mapBB_swigregister
mapBB_swigregister(mapBB)

class mapII(object):
    """Proxy of C++ std::map<(int,int)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(mapII self) -> SwigPyIterator"""
        return _pyBasePython.mapII_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(mapII self) -> bool"""
        return _pyBasePython.mapII___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(mapII self) -> bool"""
        return _pyBasePython.mapII___bool__(self)


    def __len__(self) -> "std::map< int,int >::size_type":
        """__len__(mapII self) -> std::map< int,int >::size_type"""
        return _pyBasePython.mapII___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< int,int >::key_type const &') -> "std::map< int,int >::mapped_type const &":
        """__getitem__(mapII self, std::map< int,int >::key_type const & key) -> std::map< int,int >::mapped_type const &"""
        return _pyBasePython.mapII___getitem__(self, key)


    def __delitem__(self, key: 'std::map< int,int >::key_type const &') -> "void":
        """__delitem__(mapII self, std::map< int,int >::key_type const & key)"""
        return _pyBasePython.mapII___delitem__(self, key)


    def has_key(self, key: 'std::map< int,int >::key_type const &') -> "bool":
        """has_key(mapII self, std::map< int,int >::key_type const & key) -> bool"""
        return _pyBasePython.mapII_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(mapII self) -> PyObject *"""
        return _pyBasePython.mapII_keys(self)


    def values(self) -> "PyObject *":
        """values(mapII self) -> PyObject *"""
        return _pyBasePython.mapII_values(self)


    def items(self) -> "PyObject *":
        """items(mapII self) -> PyObject *"""
        return _pyBasePython.mapII_items(self)


    def __contains__(self, key: 'std::map< int,int >::key_type const &') -> "bool":
        """__contains__(mapII self, std::map< int,int >::key_type const & key) -> bool"""
        return _pyBasePython.mapII___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(mapII self) -> SwigPyIterator"""
        return _pyBasePython.mapII_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(mapII self) -> SwigPyIterator"""
        return _pyBasePython.mapII_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(mapII self, std::map< int,int >::key_type const & key)
        __setitem__(mapII self, std::map< int,int >::key_type const & key, std::map< int,int >::mapped_type const & x)
        """
        return _pyBasePython.mapII___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(mapII self) -> PyObject *"""
        return _pyBasePython.mapII_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(int,int)> self, std::less< int > const & arg2) -> mapII
        __init__(std::map<(int,int)> self) -> mapII
        __init__(std::map<(int,int)> self, mapII arg2) -> mapII
        """
        _pyBasePython.mapII_swiginit(self, _pyBasePython.new_mapII(*args))

    def empty(self) -> "bool":
        """empty(mapII self) -> bool"""
        return _pyBasePython.mapII_empty(self)


    def size(self) -> "std::map< int,int >::size_type":
        """size(mapII self) -> std::map< int,int >::size_type"""
        return _pyBasePython.mapII_size(self)


    def swap(self, v: 'mapII') -> "void":
        """swap(mapII self, mapII v)"""
        return _pyBasePython.mapII_swap(self, v)


    def begin(self) -> "std::map< int,int >::iterator":
        """begin(mapII self) -> std::map< int,int >::iterator"""
        return _pyBasePython.mapII_begin(self)


    def end(self) -> "std::map< int,int >::iterator":
        """end(mapII self) -> std::map< int,int >::iterator"""
        return _pyBasePython.mapII_end(self)


    def rbegin(self) -> "std::map< int,int >::reverse_iterator":
        """rbegin(mapII self) -> std::map< int,int >::reverse_iterator"""
        return _pyBasePython.mapII_rbegin(self)


    def rend(self) -> "std::map< int,int >::reverse_iterator":
        """rend(mapII self) -> std::map< int,int >::reverse_iterator"""
        return _pyBasePython.mapII_rend(self)


    def clear(self) -> "void":
        """clear(mapII self)"""
        return _pyBasePython.mapII_clear(self)


    def get_allocator(self) -> "std::map< int,int >::allocator_type":
        """get_allocator(mapII self) -> std::map< int,int >::allocator_type"""
        return _pyBasePython.mapII_get_allocator(self)


    def count(self, x: 'std::map< int,int >::key_type const &') -> "std::map< int,int >::size_type":
        """count(mapII self, std::map< int,int >::key_type const & x) -> std::map< int,int >::size_type"""
        return _pyBasePython.mapII_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(mapII self, std::map< int,int >::key_type const & x) -> std::map< int,int >::size_type
        erase(mapII self, std::map< int,int >::iterator position)
        erase(mapII self, std::map< int,int >::iterator first, std::map< int,int >::iterator last)
        """
        return _pyBasePython.mapII_erase(self, *args)


    def find(self, x: 'std::map< int,int >::key_type const &') -> "std::map< int,int >::iterator":
        """find(mapII self, std::map< int,int >::key_type const & x) -> std::map< int,int >::iterator"""
        return _pyBasePython.mapII_find(self, x)


    def lower_bound(self, x: 'std::map< int,int >::key_type const &') -> "std::map< int,int >::iterator":
        """lower_bound(mapII self, std::map< int,int >::key_type const & x) -> std::map< int,int >::iterator"""
        return _pyBasePython.mapII_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< int,int >::key_type const &') -> "std::map< int,int >::iterator":
        """upper_bound(mapII self, std::map< int,int >::key_type const & x) -> std::map< int,int >::iterator"""
        return _pyBasePython.mapII_upper_bound(self, x)

    __swig_destroy__ = _pyBasePython.delete_mapII
mapII.iterator = new_instancemethod(_pyBasePython.mapII_iterator, None, mapII)
mapII.__nonzero__ = new_instancemethod(_pyBasePython.mapII___nonzero__, None, mapII)
mapII.__bool__ = new_instancemethod(_pyBasePython.mapII___bool__, None, mapII)
mapII.__len__ = new_instancemethod(_pyBasePython.mapII___len__, None, mapII)
mapII.__getitem__ = new_instancemethod(_pyBasePython.mapII___getitem__, None, mapII)
mapII.__delitem__ = new_instancemethod(_pyBasePython.mapII___delitem__, None, mapII)
mapII.has_key = new_instancemethod(_pyBasePython.mapII_has_key, None, mapII)
mapII.keys = new_instancemethod(_pyBasePython.mapII_keys, None, mapII)
mapII.values = new_instancemethod(_pyBasePython.mapII_values, None, mapII)
mapII.items = new_instancemethod(_pyBasePython.mapII_items, None, mapII)
mapII.__contains__ = new_instancemethod(_pyBasePython.mapII___contains__, None, mapII)
mapII.key_iterator = new_instancemethod(_pyBasePython.mapII_key_iterator, None, mapII)
mapII.value_iterator = new_instancemethod(_pyBasePython.mapII_value_iterator, None, mapII)
mapII.__setitem__ = new_instancemethod(_pyBasePython.mapII___setitem__, None, mapII)
mapII.asdict = new_instancemethod(_pyBasePython.mapII_asdict, None, mapII)
mapII.empty = new_instancemethod(_pyBasePython.mapII_empty, None, mapII)
mapII.size = new_instancemethod(_pyBasePython.mapII_size, None, mapII)
mapII.swap = new_instancemethod(_pyBasePython.mapII_swap, None, mapII)
mapII.begin = new_instancemethod(_pyBasePython.mapII_begin, None, mapII)
mapII.end = new_instancemethod(_pyBasePython.mapII_end, None, mapII)
mapII.rbegin = new_instancemethod(_pyBasePython.mapII_rbegin, None, mapII)
mapII.rend = new_instancemethod(_pyBasePython.mapII_rend, None, mapII)
mapII.clear = new_instancemethod(_pyBasePython.mapII_clear, None, mapII)
mapII.get_allocator = new_instancemethod(_pyBasePython.mapII_get_allocator, None, mapII)
mapII.count = new_instancemethod(_pyBasePython.mapII_count, None, mapII)
mapII.erase = new_instancemethod(_pyBasePython.mapII_erase, None, mapII)
mapII.find = new_instancemethod(_pyBasePython.mapII_find, None, mapII)
mapII.lower_bound = new_instancemethod(_pyBasePython.mapII_lower_bound, None, mapII)
mapII.upper_bound = new_instancemethod(_pyBasePython.mapII_upper_bound, None, mapII)
mapII_swigregister = _pyBasePython.mapII_swigregister
mapII_swigregister(mapII)

class mapUCUC(object):
    """Proxy of C++ std::map<(unsigned char,unsigned char)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(mapUCUC self) -> SwigPyIterator"""
        return _pyBasePython.mapUCUC_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(mapUCUC self) -> bool"""
        return _pyBasePython.mapUCUC___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(mapUCUC self) -> bool"""
        return _pyBasePython.mapUCUC___bool__(self)


    def __len__(self) -> "std::map< unsigned char,unsigned char >::size_type":
        """__len__(mapUCUC self) -> std::map< unsigned char,unsigned char >::size_type"""
        return _pyBasePython.mapUCUC___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< unsigned char,unsigned char >::key_type const &') -> "std::map< unsigned char,unsigned char >::mapped_type const &":
        """__getitem__(mapUCUC self, std::map< unsigned char,unsigned char >::key_type const & key) -> std::map< unsigned char,unsigned char >::mapped_type const &"""
        return _pyBasePython.mapUCUC___getitem__(self, key)


    def __delitem__(self, key: 'std::map< unsigned char,unsigned char >::key_type const &') -> "void":
        """__delitem__(mapUCUC self, std::map< unsigned char,unsigned char >::key_type const & key)"""
        return _pyBasePython.mapUCUC___delitem__(self, key)


    def has_key(self, key: 'std::map< unsigned char,unsigned char >::key_type const &') -> "bool":
        """has_key(mapUCUC self, std::map< unsigned char,unsigned char >::key_type const & key) -> bool"""
        return _pyBasePython.mapUCUC_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(mapUCUC self) -> PyObject *"""
        return _pyBasePython.mapUCUC_keys(self)


    def values(self) -> "PyObject *":
        """values(mapUCUC self) -> PyObject *"""
        return _pyBasePython.mapUCUC_values(self)


    def items(self) -> "PyObject *":
        """items(mapUCUC self) -> PyObject *"""
        return _pyBasePython.mapUCUC_items(self)


    def __contains__(self, key: 'std::map< unsigned char,unsigned char >::key_type const &') -> "bool":
        """__contains__(mapUCUC self, std::map< unsigned char,unsigned char >::key_type const & key) -> bool"""
        return _pyBasePython.mapUCUC___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(mapUCUC self) -> SwigPyIterator"""
        return _pyBasePython.mapUCUC_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(mapUCUC self) -> SwigPyIterator"""
        return _pyBasePython.mapUCUC_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(mapUCUC self, std::map< unsigned char,unsigned char >::key_type const & key)
        __setitem__(mapUCUC self, std::map< unsigned char,unsigned char >::key_type const & key, std::map< unsigned char,unsigned char >::mapped_type const & x)
        """
        return _pyBasePython.mapUCUC___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(mapUCUC self) -> PyObject *"""
        return _pyBasePython.mapUCUC_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(unsigned char,unsigned char)> self, std::less< unsigned char > const & arg2) -> mapUCUC
        __init__(std::map<(unsigned char,unsigned char)> self) -> mapUCUC
        __init__(std::map<(unsigned char,unsigned char)> self, mapUCUC arg2) -> mapUCUC
        """
        _pyBasePython.mapUCUC_swiginit(self, _pyBasePython.new_mapUCUC(*args))

    def empty(self) -> "bool":
        """empty(mapUCUC self) -> bool"""
        return _pyBasePython.mapUCUC_empty(self)


    def size(self) -> "std::map< unsigned char,unsigned char >::size_type":
        """size(mapUCUC self) -> std::map< unsigned char,unsigned char >::size_type"""
        return _pyBasePython.mapUCUC_size(self)


    def swap(self, v: 'mapUCUC') -> "void":
        """swap(mapUCUC self, mapUCUC v)"""
        return _pyBasePython.mapUCUC_swap(self, v)


    def begin(self) -> "std::map< unsigned char,unsigned char >::iterator":
        """begin(mapUCUC self) -> std::map< unsigned char,unsigned char >::iterator"""
        return _pyBasePython.mapUCUC_begin(self)


    def end(self) -> "std::map< unsigned char,unsigned char >::iterator":
        """end(mapUCUC self) -> std::map< unsigned char,unsigned char >::iterator"""
        return _pyBasePython.mapUCUC_end(self)


    def rbegin(self) -> "std::map< unsigned char,unsigned char >::reverse_iterator":
        """rbegin(mapUCUC self) -> std::map< unsigned char,unsigned char >::reverse_iterator"""
        return _pyBasePython.mapUCUC_rbegin(self)


    def rend(self) -> "std::map< unsigned char,unsigned char >::reverse_iterator":
        """rend(mapUCUC self) -> std::map< unsigned char,unsigned char >::reverse_iterator"""
        return _pyBasePython.mapUCUC_rend(self)


    def clear(self) -> "void":
        """clear(mapUCUC self)"""
        return _pyBasePython.mapUCUC_clear(self)


    def get_allocator(self) -> "std::map< unsigned char,unsigned char >::allocator_type":
        """get_allocator(mapUCUC self) -> std::map< unsigned char,unsigned char >::allocator_type"""
        return _pyBasePython.mapUCUC_get_allocator(self)


    def count(self, x: 'std::map< unsigned char,unsigned char >::key_type const &') -> "std::map< unsigned char,unsigned char >::size_type":
        """count(mapUCUC self, std::map< unsigned char,unsigned char >::key_type const & x) -> std::map< unsigned char,unsigned char >::size_type"""
        return _pyBasePython.mapUCUC_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(mapUCUC self, std::map< unsigned char,unsigned char >::key_type const & x) -> std::map< unsigned char,unsigned char >::size_type
        erase(mapUCUC self, std::map< unsigned char,unsigned char >::iterator position)
        erase(mapUCUC self, std::map< unsigned char,unsigned char >::iterator first, std::map< unsigned char,unsigned char >::iterator last)
        """
        return _pyBasePython.mapUCUC_erase(self, *args)


    def find(self, x: 'std::map< unsigned char,unsigned char >::key_type const &') -> "std::map< unsigned char,unsigned char >::iterator":
        """find(mapUCUC self, std::map< unsigned char,unsigned char >::key_type const & x) -> std::map< unsigned char,unsigned char >::iterator"""
        return _pyBasePython.mapUCUC_find(self, x)


    def lower_bound(self, x: 'std::map< unsigned char,unsigned char >::key_type const &') -> "std::map< unsigned char,unsigned char >::iterator":
        """lower_bound(mapUCUC self, std::map< unsigned char,unsigned char >::key_type const & x) -> std::map< unsigned char,unsigned char >::iterator"""
        return _pyBasePython.mapUCUC_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< unsigned char,unsigned char >::key_type const &') -> "std::map< unsigned char,unsigned char >::iterator":
        """upper_bound(mapUCUC self, std::map< unsigned char,unsigned char >::key_type const & x) -> std::map< unsigned char,unsigned char >::iterator"""
        return _pyBasePython.mapUCUC_upper_bound(self, x)

    __swig_destroy__ = _pyBasePython.delete_mapUCUC
mapUCUC.iterator = new_instancemethod(_pyBasePython.mapUCUC_iterator, None, mapUCUC)
mapUCUC.__nonzero__ = new_instancemethod(_pyBasePython.mapUCUC___nonzero__, None, mapUCUC)
mapUCUC.__bool__ = new_instancemethod(_pyBasePython.mapUCUC___bool__, None, mapUCUC)
mapUCUC.__len__ = new_instancemethod(_pyBasePython.mapUCUC___len__, None, mapUCUC)
mapUCUC.__getitem__ = new_instancemethod(_pyBasePython.mapUCUC___getitem__, None, mapUCUC)
mapUCUC.__delitem__ = new_instancemethod(_pyBasePython.mapUCUC___delitem__, None, mapUCUC)
mapUCUC.has_key = new_instancemethod(_pyBasePython.mapUCUC_has_key, None, mapUCUC)
mapUCUC.keys = new_instancemethod(_pyBasePython.mapUCUC_keys, None, mapUCUC)
mapUCUC.values = new_instancemethod(_pyBasePython.mapUCUC_values, None, mapUCUC)
mapUCUC.items = new_instancemethod(_pyBasePython.mapUCUC_items, None, mapUCUC)
mapUCUC.__contains__ = new_instancemethod(_pyBasePython.mapUCUC___contains__, None, mapUCUC)
mapUCUC.key_iterator = new_instancemethod(_pyBasePython.mapUCUC_key_iterator, None, mapUCUC)
mapUCUC.value_iterator = new_instancemethod(_pyBasePython.mapUCUC_value_iterator, None, mapUCUC)
mapUCUC.__setitem__ = new_instancemethod(_pyBasePython.mapUCUC___setitem__, None, mapUCUC)
mapUCUC.asdict = new_instancemethod(_pyBasePython.mapUCUC_asdict, None, mapUCUC)
mapUCUC.empty = new_instancemethod(_pyBasePython.mapUCUC_empty, None, mapUCUC)
mapUCUC.size = new_instancemethod(_pyBasePython.mapUCUC_size, None, mapUCUC)
mapUCUC.swap = new_instancemethod(_pyBasePython.mapUCUC_swap, None, mapUCUC)
mapUCUC.begin = new_instancemethod(_pyBasePython.mapUCUC_begin, None, mapUCUC)
mapUCUC.end = new_instancemethod(_pyBasePython.mapUCUC_end, None, mapUCUC)
mapUCUC.rbegin = new_instancemethod(_pyBasePython.mapUCUC_rbegin, None, mapUCUC)
mapUCUC.rend = new_instancemethod(_pyBasePython.mapUCUC_rend, None, mapUCUC)
mapUCUC.clear = new_instancemethod(_pyBasePython.mapUCUC_clear, None, mapUCUC)
mapUCUC.get_allocator = new_instancemethod(_pyBasePython.mapUCUC_get_allocator, None, mapUCUC)
mapUCUC.count = new_instancemethod(_pyBasePython.mapUCUC_count, None, mapUCUC)
mapUCUC.erase = new_instancemethod(_pyBasePython.mapUCUC_erase, None, mapUCUC)
mapUCUC.find = new_instancemethod(_pyBasePython.mapUCUC_find, None, mapUCUC)
mapUCUC.lower_bound = new_instancemethod(_pyBasePython.mapUCUC_lower_bound, None, mapUCUC)
mapUCUC.upper_bound = new_instancemethod(_pyBasePython.mapUCUC_upper_bound, None, mapUCUC)
mapUCUC_swigregister = _pyBasePython.mapUCUC_swigregister
mapUCUC_swigregister(mapUCUC)

class mapUIUI(object):
    """Proxy of C++ std::map<(unsigned int,unsigned int)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(mapUIUI self) -> SwigPyIterator"""
        return _pyBasePython.mapUIUI_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(mapUIUI self) -> bool"""
        return _pyBasePython.mapUIUI___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(mapUIUI self) -> bool"""
        return _pyBasePython.mapUIUI___bool__(self)


    def __len__(self) -> "std::map< unsigned int,unsigned int >::size_type":
        """__len__(mapUIUI self) -> std::map< unsigned int,unsigned int >::size_type"""
        return _pyBasePython.mapUIUI___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< unsigned int,unsigned int >::key_type const &') -> "std::map< unsigned int,unsigned int >::mapped_type const &":
        """__getitem__(mapUIUI self, std::map< unsigned int,unsigned int >::key_type const & key) -> std::map< unsigned int,unsigned int >::mapped_type const &"""
        return _pyBasePython.mapUIUI___getitem__(self, key)


    def __delitem__(self, key: 'std::map< unsigned int,unsigned int >::key_type const &') -> "void":
        """__delitem__(mapUIUI self, std::map< unsigned int,unsigned int >::key_type const & key)"""
        return _pyBasePython.mapUIUI___delitem__(self, key)


    def has_key(self, key: 'std::map< unsigned int,unsigned int >::key_type const &') -> "bool":
        """has_key(mapUIUI self, std::map< unsigned int,unsigned int >::key_type const & key) -> bool"""
        return _pyBasePython.mapUIUI_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(mapUIUI self) -> PyObject *"""
        return _pyBasePython.mapUIUI_keys(self)


    def values(self) -> "PyObject *":
        """values(mapUIUI self) -> PyObject *"""
        return _pyBasePython.mapUIUI_values(self)


    def items(self) -> "PyObject *":
        """items(mapUIUI self) -> PyObject *"""
        return _pyBasePython.mapUIUI_items(self)


    def __contains__(self, key: 'std::map< unsigned int,unsigned int >::key_type const &') -> "bool":
        """__contains__(mapUIUI self, std::map< unsigned int,unsigned int >::key_type const & key) -> bool"""
        return _pyBasePython.mapUIUI___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(mapUIUI self) -> SwigPyIterator"""
        return _pyBasePython.mapUIUI_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(mapUIUI self) -> SwigPyIterator"""
        return _pyBasePython.mapUIUI_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(mapUIUI self, std::map< unsigned int,unsigned int >::key_type const & key)
        __setitem__(mapUIUI self, std::map< unsigned int,unsigned int >::key_type const & key, std::map< unsigned int,unsigned int >::mapped_type const & x)
        """
        return _pyBasePython.mapUIUI___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(mapUIUI self) -> PyObject *"""
        return _pyBasePython.mapUIUI_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(unsigned int,unsigned int)> self, std::less< unsigned int > const & arg2) -> mapUIUI
        __init__(std::map<(unsigned int,unsigned int)> self) -> mapUIUI
        __init__(std::map<(unsigned int,unsigned int)> self, mapUIUI arg2) -> mapUIUI
        """
        _pyBasePython.mapUIUI_swiginit(self, _pyBasePython.new_mapUIUI(*args))

    def empty(self) -> "bool":
        """empty(mapUIUI self) -> bool"""
        return _pyBasePython.mapUIUI_empty(self)


    def size(self) -> "std::map< unsigned int,unsigned int >::size_type":
        """size(mapUIUI self) -> std::map< unsigned int,unsigned int >::size_type"""
        return _pyBasePython.mapUIUI_size(self)


    def swap(self, v: 'mapUIUI') -> "void":
        """swap(mapUIUI self, mapUIUI v)"""
        return _pyBasePython.mapUIUI_swap(self, v)


    def begin(self) -> "std::map< unsigned int,unsigned int >::iterator":
        """begin(mapUIUI self) -> std::map< unsigned int,unsigned int >::iterator"""
        return _pyBasePython.mapUIUI_begin(self)


    def end(self) -> "std::map< unsigned int,unsigned int >::iterator":
        """end(mapUIUI self) -> std::map< unsigned int,unsigned int >::iterator"""
        return _pyBasePython.mapUIUI_end(self)


    def rbegin(self) -> "std::map< unsigned int,unsigned int >::reverse_iterator":
        """rbegin(mapUIUI self) -> std::map< unsigned int,unsigned int >::reverse_iterator"""
        return _pyBasePython.mapUIUI_rbegin(self)


    def rend(self) -> "std::map< unsigned int,unsigned int >::reverse_iterator":
        """rend(mapUIUI self) -> std::map< unsigned int,unsigned int >::reverse_iterator"""
        return _pyBasePython.mapUIUI_rend(self)


    def clear(self) -> "void":
        """clear(mapUIUI self)"""
        return _pyBasePython.mapUIUI_clear(self)


    def get_allocator(self) -> "std::map< unsigned int,unsigned int >::allocator_type":
        """get_allocator(mapUIUI self) -> std::map< unsigned int,unsigned int >::allocator_type"""
        return _pyBasePython.mapUIUI_get_allocator(self)


    def count(self, x: 'std::map< unsigned int,unsigned int >::key_type const &') -> "std::map< unsigned int,unsigned int >::size_type":
        """count(mapUIUI self, std::map< unsigned int,unsigned int >::key_type const & x) -> std::map< unsigned int,unsigned int >::size_type"""
        return _pyBasePython.mapUIUI_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(mapUIUI self, std::map< unsigned int,unsigned int >::key_type const & x) -> std::map< unsigned int,unsigned int >::size_type
        erase(mapUIUI self, std::map< unsigned int,unsigned int >::iterator position)
        erase(mapUIUI self, std::map< unsigned int,unsigned int >::iterator first, std::map< unsigned int,unsigned int >::iterator last)
        """
        return _pyBasePython.mapUIUI_erase(self, *args)


    def find(self, x: 'std::map< unsigned int,unsigned int >::key_type const &') -> "std::map< unsigned int,unsigned int >::iterator":
        """find(mapUIUI self, std::map< unsigned int,unsigned int >::key_type const & x) -> std::map< unsigned int,unsigned int >::iterator"""
        return _pyBasePython.mapUIUI_find(self, x)


    def lower_bound(self, x: 'std::map< unsigned int,unsigned int >::key_type const &') -> "std::map< unsigned int,unsigned int >::iterator":
        """lower_bound(mapUIUI self, std::map< unsigned int,unsigned int >::key_type const & x) -> std::map< unsigned int,unsigned int >::iterator"""
        return _pyBasePython.mapUIUI_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< unsigned int,unsigned int >::key_type const &') -> "std::map< unsigned int,unsigned int >::iterator":
        """upper_bound(mapUIUI self, std::map< unsigned int,unsigned int >::key_type const & x) -> std::map< unsigned int,unsigned int >::iterator"""
        return _pyBasePython.mapUIUI_upper_bound(self, x)

    __swig_destroy__ = _pyBasePython.delete_mapUIUI
mapUIUI.iterator = new_instancemethod(_pyBasePython.mapUIUI_iterator, None, mapUIUI)
mapUIUI.__nonzero__ = new_instancemethod(_pyBasePython.mapUIUI___nonzero__, None, mapUIUI)
mapUIUI.__bool__ = new_instancemethod(_pyBasePython.mapUIUI___bool__, None, mapUIUI)
mapUIUI.__len__ = new_instancemethod(_pyBasePython.mapUIUI___len__, None, mapUIUI)
mapUIUI.__getitem__ = new_instancemethod(_pyBasePython.mapUIUI___getitem__, None, mapUIUI)
mapUIUI.__delitem__ = new_instancemethod(_pyBasePython.mapUIUI___delitem__, None, mapUIUI)
mapUIUI.has_key = new_instancemethod(_pyBasePython.mapUIUI_has_key, None, mapUIUI)
mapUIUI.keys = new_instancemethod(_pyBasePython.mapUIUI_keys, None, mapUIUI)
mapUIUI.values = new_instancemethod(_pyBasePython.mapUIUI_values, None, mapUIUI)
mapUIUI.items = new_instancemethod(_pyBasePython.mapUIUI_items, None, mapUIUI)
mapUIUI.__contains__ = new_instancemethod(_pyBasePython.mapUIUI___contains__, None, mapUIUI)
mapUIUI.key_iterator = new_instancemethod(_pyBasePython.mapUIUI_key_iterator, None, mapUIUI)
mapUIUI.value_iterator = new_instancemethod(_pyBasePython.mapUIUI_value_iterator, None, mapUIUI)
mapUIUI.__setitem__ = new_instancemethod(_pyBasePython.mapUIUI___setitem__, None, mapUIUI)
mapUIUI.asdict = new_instancemethod(_pyBasePython.mapUIUI_asdict, None, mapUIUI)
mapUIUI.empty = new_instancemethod(_pyBasePython.mapUIUI_empty, None, mapUIUI)
mapUIUI.size = new_instancemethod(_pyBasePython.mapUIUI_size, None, mapUIUI)
mapUIUI.swap = new_instancemethod(_pyBasePython.mapUIUI_swap, None, mapUIUI)
mapUIUI.begin = new_instancemethod(_pyBasePython.mapUIUI_begin, None, mapUIUI)
mapUIUI.end = new_instancemethod(_pyBasePython.mapUIUI_end, None, mapUIUI)
mapUIUI.rbegin = new_instancemethod(_pyBasePython.mapUIUI_rbegin, None, mapUIUI)
mapUIUI.rend = new_instancemethod(_pyBasePython.mapUIUI_rend, None, mapUIUI)
mapUIUI.clear = new_instancemethod(_pyBasePython.mapUIUI_clear, None, mapUIUI)
mapUIUI.get_allocator = new_instancemethod(_pyBasePython.mapUIUI_get_allocator, None, mapUIUI)
mapUIUI.count = new_instancemethod(_pyBasePython.mapUIUI_count, None, mapUIUI)
mapUIUI.erase = new_instancemethod(_pyBasePython.mapUIUI_erase, None, mapUIUI)
mapUIUI.find = new_instancemethod(_pyBasePython.mapUIUI_find, None, mapUIUI)
mapUIUI.lower_bound = new_instancemethod(_pyBasePython.mapUIUI_lower_bound, None, mapUIUI)
mapUIUI.upper_bound = new_instancemethod(_pyBasePython.mapUIUI_upper_bound, None, mapUIUI)
mapUIUI_swigregister = _pyBasePython.mapUIUI_swigregister
mapUIUI_swigregister(mapUIUI)

class mapUSUS(object):
    """Proxy of C++ std::map<(unsigned short,unsigned short)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(mapUSUS self) -> SwigPyIterator"""
        return _pyBasePython.mapUSUS_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(mapUSUS self) -> bool"""
        return _pyBasePython.mapUSUS___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(mapUSUS self) -> bool"""
        return _pyBasePython.mapUSUS___bool__(self)


    def __len__(self) -> "std::map< unsigned short,unsigned short >::size_type":
        """__len__(mapUSUS self) -> std::map< unsigned short,unsigned short >::size_type"""
        return _pyBasePython.mapUSUS___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< unsigned short,unsigned short >::key_type const &') -> "std::map< unsigned short,unsigned short >::mapped_type const &":
        """__getitem__(mapUSUS self, std::map< unsigned short,unsigned short >::key_type const & key) -> std::map< unsigned short,unsigned short >::mapped_type const &"""
        return _pyBasePython.mapUSUS___getitem__(self, key)


    def __delitem__(self, key: 'std::map< unsigned short,unsigned short >::key_type const &') -> "void":
        """__delitem__(mapUSUS self, std::map< unsigned short,unsigned short >::key_type const & key)"""
        return _pyBasePython.mapUSUS___delitem__(self, key)


    def has_key(self, key: 'std::map< unsigned short,unsigned short >::key_type const &') -> "bool":
        """has_key(mapUSUS self, std::map< unsigned short,unsigned short >::key_type const & key) -> bool"""
        return _pyBasePython.mapUSUS_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(mapUSUS self) -> PyObject *"""
        return _pyBasePython.mapUSUS_keys(self)


    def values(self) -> "PyObject *":
        """values(mapUSUS self) -> PyObject *"""
        return _pyBasePython.mapUSUS_values(self)


    def items(self) -> "PyObject *":
        """items(mapUSUS self) -> PyObject *"""
        return _pyBasePython.mapUSUS_items(self)


    def __contains__(self, key: 'std::map< unsigned short,unsigned short >::key_type const &') -> "bool":
        """__contains__(mapUSUS self, std::map< unsigned short,unsigned short >::key_type const & key) -> bool"""
        return _pyBasePython.mapUSUS___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(mapUSUS self) -> SwigPyIterator"""
        return _pyBasePython.mapUSUS_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(mapUSUS self) -> SwigPyIterator"""
        return _pyBasePython.mapUSUS_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(mapUSUS self, std::map< unsigned short,unsigned short >::key_type const & key)
        __setitem__(mapUSUS self, std::map< unsigned short,unsigned short >::key_type const & key, std::map< unsigned short,unsigned short >::mapped_type const & x)
        """
        return _pyBasePython.mapUSUS___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(mapUSUS self) -> PyObject *"""
        return _pyBasePython.mapUSUS_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(unsigned short,unsigned short)> self, std::less< unsigned short > const & arg2) -> mapUSUS
        __init__(std::map<(unsigned short,unsigned short)> self) -> mapUSUS
        __init__(std::map<(unsigned short,unsigned short)> self, mapUSUS arg2) -> mapUSUS
        """
        _pyBasePython.mapUSUS_swiginit(self, _pyBasePython.new_mapUSUS(*args))

    def empty(self) -> "bool":
        """empty(mapUSUS self) -> bool"""
        return _pyBasePython.mapUSUS_empty(self)


    def size(self) -> "std::map< unsigned short,unsigned short >::size_type":
        """size(mapUSUS self) -> std::map< unsigned short,unsigned short >::size_type"""
        return _pyBasePython.mapUSUS_size(self)


    def swap(self, v: 'mapUSUS') -> "void":
        """swap(mapUSUS self, mapUSUS v)"""
        return _pyBasePython.mapUSUS_swap(self, v)


    def begin(self) -> "std::map< unsigned short,unsigned short >::iterator":
        """begin(mapUSUS self) -> std::map< unsigned short,unsigned short >::iterator"""
        return _pyBasePython.mapUSUS_begin(self)


    def end(self) -> "std::map< unsigned short,unsigned short >::iterator":
        """end(mapUSUS self) -> std::map< unsigned short,unsigned short >::iterator"""
        return _pyBasePython.mapUSUS_end(self)


    def rbegin(self) -> "std::map< unsigned short,unsigned short >::reverse_iterator":
        """rbegin(mapUSUS self) -> std::map< unsigned short,unsigned short >::reverse_iterator"""
        return _pyBasePython.mapUSUS_rbegin(self)


    def rend(self) -> "std::map< unsigned short,unsigned short >::reverse_iterator":
        """rend(mapUSUS self) -> std::map< unsigned short,unsigned short >::reverse_iterator"""
        return _pyBasePython.mapUSUS_rend(self)


    def clear(self) -> "void":
        """clear(mapUSUS self)"""
        return _pyBasePython.mapUSUS_clear(self)


    def get_allocator(self) -> "std::map< unsigned short,unsigned short >::allocator_type":
        """get_allocator(mapUSUS self) -> std::map< unsigned short,unsigned short >::allocator_type"""
        return _pyBasePython.mapUSUS_get_allocator(self)


    def count(self, x: 'std::map< unsigned short,unsigned short >::key_type const &') -> "std::map< unsigned short,unsigned short >::size_type":
        """count(mapUSUS self, std::map< unsigned short,unsigned short >::key_type const & x) -> std::map< unsigned short,unsigned short >::size_type"""
        return _pyBasePython.mapUSUS_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(mapUSUS self, std::map< unsigned short,unsigned short >::key_type const & x) -> std::map< unsigned short,unsigned short >::size_type
        erase(mapUSUS self, std::map< unsigned short,unsigned short >::iterator position)
        erase(mapUSUS self, std::map< unsigned short,unsigned short >::iterator first, std::map< unsigned short,unsigned short >::iterator last)
        """
        return _pyBasePython.mapUSUS_erase(self, *args)


    def find(self, x: 'std::map< unsigned short,unsigned short >::key_type const &') -> "std::map< unsigned short,unsigned short >::iterator":
        """find(mapUSUS self, std::map< unsigned short,unsigned short >::key_type const & x) -> std::map< unsigned short,unsigned short >::iterator"""
        return _pyBasePython.mapUSUS_find(self, x)


    def lower_bound(self, x: 'std::map< unsigned short,unsigned short >::key_type const &') -> "std::map< unsigned short,unsigned short >::iterator":
        """lower_bound(mapUSUS self, std::map< unsigned short,unsigned short >::key_type const & x) -> std::map< unsigned short,unsigned short >::iterator"""
        return _pyBasePython.mapUSUS_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< unsigned short,unsigned short >::key_type const &') -> "std::map< unsigned short,unsigned short >::iterator":
        """upper_bound(mapUSUS self, std::map< unsigned short,unsigned short >::key_type const & x) -> std::map< unsigned short,unsigned short >::iterator"""
        return _pyBasePython.mapUSUS_upper_bound(self, x)

    __swig_destroy__ = _pyBasePython.delete_mapUSUS
mapUSUS.iterator = new_instancemethod(_pyBasePython.mapUSUS_iterator, None, mapUSUS)
mapUSUS.__nonzero__ = new_instancemethod(_pyBasePython.mapUSUS___nonzero__, None, mapUSUS)
mapUSUS.__bool__ = new_instancemethod(_pyBasePython.mapUSUS___bool__, None, mapUSUS)
mapUSUS.__len__ = new_instancemethod(_pyBasePython.mapUSUS___len__, None, mapUSUS)
mapUSUS.__getitem__ = new_instancemethod(_pyBasePython.mapUSUS___getitem__, None, mapUSUS)
mapUSUS.__delitem__ = new_instancemethod(_pyBasePython.mapUSUS___delitem__, None, mapUSUS)
mapUSUS.has_key = new_instancemethod(_pyBasePython.mapUSUS_has_key, None, mapUSUS)
mapUSUS.keys = new_instancemethod(_pyBasePython.mapUSUS_keys, None, mapUSUS)
mapUSUS.values = new_instancemethod(_pyBasePython.mapUSUS_values, None, mapUSUS)
mapUSUS.items = new_instancemethod(_pyBasePython.mapUSUS_items, None, mapUSUS)
mapUSUS.__contains__ = new_instancemethod(_pyBasePython.mapUSUS___contains__, None, mapUSUS)
mapUSUS.key_iterator = new_instancemethod(_pyBasePython.mapUSUS_key_iterator, None, mapUSUS)
mapUSUS.value_iterator = new_instancemethod(_pyBasePython.mapUSUS_value_iterator, None, mapUSUS)
mapUSUS.__setitem__ = new_instancemethod(_pyBasePython.mapUSUS___setitem__, None, mapUSUS)
mapUSUS.asdict = new_instancemethod(_pyBasePython.mapUSUS_asdict, None, mapUSUS)
mapUSUS.empty = new_instancemethod(_pyBasePython.mapUSUS_empty, None, mapUSUS)
mapUSUS.size = new_instancemethod(_pyBasePython.mapUSUS_size, None, mapUSUS)
mapUSUS.swap = new_instancemethod(_pyBasePython.mapUSUS_swap, None, mapUSUS)
mapUSUS.begin = new_instancemethod(_pyBasePython.mapUSUS_begin, None, mapUSUS)
mapUSUS.end = new_instancemethod(_pyBasePython.mapUSUS_end, None, mapUSUS)
mapUSUS.rbegin = new_instancemethod(_pyBasePython.mapUSUS_rbegin, None, mapUSUS)
mapUSUS.rend = new_instancemethod(_pyBasePython.mapUSUS_rend, None, mapUSUS)
mapUSUS.clear = new_instancemethod(_pyBasePython.mapUSUS_clear, None, mapUSUS)
mapUSUS.get_allocator = new_instancemethod(_pyBasePython.mapUSUS_get_allocator, None, mapUSUS)
mapUSUS.count = new_instancemethod(_pyBasePython.mapUSUS_count, None, mapUSUS)
mapUSUS.erase = new_instancemethod(_pyBasePython.mapUSUS_erase, None, mapUSUS)
mapUSUS.find = new_instancemethod(_pyBasePython.mapUSUS_find, None, mapUSUS)
mapUSUS.lower_bound = new_instancemethod(_pyBasePython.mapUSUS_lower_bound, None, mapUSUS)
mapUSUS.upper_bound = new_instancemethod(_pyBasePython.mapUSUS_upper_bound, None, mapUSUS)
mapUSUS_swigregister = _pyBasePython.mapUSUS_swigregister
mapUSUS_swigregister(mapUSUS)

class mapULUL(object):
    """Proxy of C++ std::map<(unsigned long,unsigned long)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(mapULUL self) -> SwigPyIterator"""
        return _pyBasePython.mapULUL_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(mapULUL self) -> bool"""
        return _pyBasePython.mapULUL___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(mapULUL self) -> bool"""
        return _pyBasePython.mapULUL___bool__(self)


    def __len__(self) -> "std::map< unsigned long,unsigned long >::size_type":
        """__len__(mapULUL self) -> std::map< unsigned long,unsigned long >::size_type"""
        return _pyBasePython.mapULUL___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< unsigned long,unsigned long >::key_type const &') -> "std::map< unsigned long,unsigned long >::mapped_type const &":
        """__getitem__(mapULUL self, std::map< unsigned long,unsigned long >::key_type const & key) -> std::map< unsigned long,unsigned long >::mapped_type const &"""
        return _pyBasePython.mapULUL___getitem__(self, key)


    def __delitem__(self, key: 'std::map< unsigned long,unsigned long >::key_type const &') -> "void":
        """__delitem__(mapULUL self, std::map< unsigned long,unsigned long >::key_type const & key)"""
        return _pyBasePython.mapULUL___delitem__(self, key)


    def has_key(self, key: 'std::map< unsigned long,unsigned long >::key_type const &') -> "bool":
        """has_key(mapULUL self, std::map< unsigned long,unsigned long >::key_type const & key) -> bool"""
        return _pyBasePython.mapULUL_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(mapULUL self) -> PyObject *"""
        return _pyBasePython.mapULUL_keys(self)


    def values(self) -> "PyObject *":
        """values(mapULUL self) -> PyObject *"""
        return _pyBasePython.mapULUL_values(self)


    def items(self) -> "PyObject *":
        """items(mapULUL self) -> PyObject *"""
        return _pyBasePython.mapULUL_items(self)


    def __contains__(self, key: 'std::map< unsigned long,unsigned long >::key_type const &') -> "bool":
        """__contains__(mapULUL self, std::map< unsigned long,unsigned long >::key_type const & key) -> bool"""
        return _pyBasePython.mapULUL___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(mapULUL self) -> SwigPyIterator"""
        return _pyBasePython.mapULUL_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(mapULUL self) -> SwigPyIterator"""
        return _pyBasePython.mapULUL_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(mapULUL self, std::map< unsigned long,unsigned long >::key_type const & key)
        __setitem__(mapULUL self, std::map< unsigned long,unsigned long >::key_type const & key, std::map< unsigned long,unsigned long >::mapped_type const & x)
        """
        return _pyBasePython.mapULUL___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(mapULUL self) -> PyObject *"""
        return _pyBasePython.mapULUL_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(unsigned long,unsigned long)> self, std::less< unsigned long > const & arg2) -> mapULUL
        __init__(std::map<(unsigned long,unsigned long)> self) -> mapULUL
        __init__(std::map<(unsigned long,unsigned long)> self, mapULUL arg2) -> mapULUL
        """
        _pyBasePython.mapULUL_swiginit(self, _pyBasePython.new_mapULUL(*args))

    def empty(self) -> "bool":
        """empty(mapULUL self) -> bool"""
        return _pyBasePython.mapULUL_empty(self)


    def size(self) -> "std::map< unsigned long,unsigned long >::size_type":
        """size(mapULUL self) -> std::map< unsigned long,unsigned long >::size_type"""
        return _pyBasePython.mapULUL_size(self)


    def swap(self, v: 'mapULUL') -> "void":
        """swap(mapULUL self, mapULUL v)"""
        return _pyBasePython.mapULUL_swap(self, v)


    def begin(self) -> "std::map< unsigned long,unsigned long >::iterator":
        """begin(mapULUL self) -> std::map< unsigned long,unsigned long >::iterator"""
        return _pyBasePython.mapULUL_begin(self)


    def end(self) -> "std::map< unsigned long,unsigned long >::iterator":
        """end(mapULUL self) -> std::map< unsigned long,unsigned long >::iterator"""
        return _pyBasePython.mapULUL_end(self)


    def rbegin(self) -> "std::map< unsigned long,unsigned long >::reverse_iterator":
        """rbegin(mapULUL self) -> std::map< unsigned long,unsigned long >::reverse_iterator"""
        return _pyBasePython.mapULUL_rbegin(self)


    def rend(self) -> "std::map< unsigned long,unsigned long >::reverse_iterator":
        """rend(mapULUL self) -> std::map< unsigned long,unsigned long >::reverse_iterator"""
        return _pyBasePython.mapULUL_rend(self)


    def clear(self) -> "void":
        """clear(mapULUL self)"""
        return _pyBasePython.mapULUL_clear(self)


    def get_allocator(self) -> "std::map< unsigned long,unsigned long >::allocator_type":
        """get_allocator(mapULUL self) -> std::map< unsigned long,unsigned long >::allocator_type"""
        return _pyBasePython.mapULUL_get_allocator(self)


    def count(self, x: 'std::map< unsigned long,unsigned long >::key_type const &') -> "std::map< unsigned long,unsigned long >::size_type":
        """count(mapULUL self, std::map< unsigned long,unsigned long >::key_type const & x) -> std::map< unsigned long,unsigned long >::size_type"""
        return _pyBasePython.mapULUL_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(mapULUL self, std::map< unsigned long,unsigned long >::key_type const & x) -> std::map< unsigned long,unsigned long >::size_type
        erase(mapULUL self, std::map< unsigned long,unsigned long >::iterator position)
        erase(mapULUL self, std::map< unsigned long,unsigned long >::iterator first, std::map< unsigned long,unsigned long >::iterator last)
        """
        return _pyBasePython.mapULUL_erase(self, *args)


    def find(self, x: 'std::map< unsigned long,unsigned long >::key_type const &') -> "std::map< unsigned long,unsigned long >::iterator":
        """find(mapULUL self, std::map< unsigned long,unsigned long >::key_type const & x) -> std::map< unsigned long,unsigned long >::iterator"""
        return _pyBasePython.mapULUL_find(self, x)


    def lower_bound(self, x: 'std::map< unsigned long,unsigned long >::key_type const &') -> "std::map< unsigned long,unsigned long >::iterator":
        """lower_bound(mapULUL self, std::map< unsigned long,unsigned long >::key_type const & x) -> std::map< unsigned long,unsigned long >::iterator"""
        return _pyBasePython.mapULUL_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< unsigned long,unsigned long >::key_type const &') -> "std::map< unsigned long,unsigned long >::iterator":
        """upper_bound(mapULUL self, std::map< unsigned long,unsigned long >::key_type const & x) -> std::map< unsigned long,unsigned long >::iterator"""
        return _pyBasePython.mapULUL_upper_bound(self, x)

    __swig_destroy__ = _pyBasePython.delete_mapULUL
mapULUL.iterator = new_instancemethod(_pyBasePython.mapULUL_iterator, None, mapULUL)
mapULUL.__nonzero__ = new_instancemethod(_pyBasePython.mapULUL___nonzero__, None, mapULUL)
mapULUL.__bool__ = new_instancemethod(_pyBasePython.mapULUL___bool__, None, mapULUL)
mapULUL.__len__ = new_instancemethod(_pyBasePython.mapULUL___len__, None, mapULUL)
mapULUL.__getitem__ = new_instancemethod(_pyBasePython.mapULUL___getitem__, None, mapULUL)
mapULUL.__delitem__ = new_instancemethod(_pyBasePython.mapULUL___delitem__, None, mapULUL)
mapULUL.has_key = new_instancemethod(_pyBasePython.mapULUL_has_key, None, mapULUL)
mapULUL.keys = new_instancemethod(_pyBasePython.mapULUL_keys, None, mapULUL)
mapULUL.values = new_instancemethod(_pyBasePython.mapULUL_values, None, mapULUL)
mapULUL.items = new_instancemethod(_pyBasePython.mapULUL_items, None, mapULUL)
mapULUL.__contains__ = new_instancemethod(_pyBasePython.mapULUL___contains__, None, mapULUL)
mapULUL.key_iterator = new_instancemethod(_pyBasePython.mapULUL_key_iterator, None, mapULUL)
mapULUL.value_iterator = new_instancemethod(_pyBasePython.mapULUL_value_iterator, None, mapULUL)
mapULUL.__setitem__ = new_instancemethod(_pyBasePython.mapULUL___setitem__, None, mapULUL)
mapULUL.asdict = new_instancemethod(_pyBasePython.mapULUL_asdict, None, mapULUL)
mapULUL.empty = new_instancemethod(_pyBasePython.mapULUL_empty, None, mapULUL)
mapULUL.size = new_instancemethod(_pyBasePython.mapULUL_size, None, mapULUL)
mapULUL.swap = new_instancemethod(_pyBasePython.mapULUL_swap, None, mapULUL)
mapULUL.begin = new_instancemethod(_pyBasePython.mapULUL_begin, None, mapULUL)
mapULUL.end = new_instancemethod(_pyBasePython.mapULUL_end, None, mapULUL)
mapULUL.rbegin = new_instancemethod(_pyBasePython.mapULUL_rbegin, None, mapULUL)
mapULUL.rend = new_instancemethod(_pyBasePython.mapULUL_rend, None, mapULUL)
mapULUL.clear = new_instancemethod(_pyBasePython.mapULUL_clear, None, mapULUL)
mapULUL.get_allocator = new_instancemethod(_pyBasePython.mapULUL_get_allocator, None, mapULUL)
mapULUL.count = new_instancemethod(_pyBasePython.mapULUL_count, None, mapULUL)
mapULUL.erase = new_instancemethod(_pyBasePython.mapULUL_erase, None, mapULUL)
mapULUL.find = new_instancemethod(_pyBasePython.mapULUL_find, None, mapULUL)
mapULUL.lower_bound = new_instancemethod(_pyBasePython.mapULUL_lower_bound, None, mapULUL)
mapULUL.upper_bound = new_instancemethod(_pyBasePython.mapULUL_upper_bound, None, mapULUL)
mapULUL_swigregister = _pyBasePython.mapULUL_swigregister
mapULUL_swigregister(mapULUL)

class mapSCSC(object):
    """Proxy of C++ std::map<(signed char,signed char)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(mapSCSC self) -> SwigPyIterator"""
        return _pyBasePython.mapSCSC_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(mapSCSC self) -> bool"""
        return _pyBasePython.mapSCSC___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(mapSCSC self) -> bool"""
        return _pyBasePython.mapSCSC___bool__(self)


    def __len__(self) -> "std::map< signed char,signed char >::size_type":
        """__len__(mapSCSC self) -> std::map< signed char,signed char >::size_type"""
        return _pyBasePython.mapSCSC___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< signed char,signed char >::key_type const &') -> "std::map< signed char,signed char >::mapped_type const &":
        """__getitem__(mapSCSC self, std::map< signed char,signed char >::key_type const & key) -> std::map< signed char,signed char >::mapped_type const &"""
        return _pyBasePython.mapSCSC___getitem__(self, key)


    def __delitem__(self, key: 'std::map< signed char,signed char >::key_type const &') -> "void":
        """__delitem__(mapSCSC self, std::map< signed char,signed char >::key_type const & key)"""
        return _pyBasePython.mapSCSC___delitem__(self, key)


    def has_key(self, key: 'std::map< signed char,signed char >::key_type const &') -> "bool":
        """has_key(mapSCSC self, std::map< signed char,signed char >::key_type const & key) -> bool"""
        return _pyBasePython.mapSCSC_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(mapSCSC self) -> PyObject *"""
        return _pyBasePython.mapSCSC_keys(self)


    def values(self) -> "PyObject *":
        """values(mapSCSC self) -> PyObject *"""
        return _pyBasePython.mapSCSC_values(self)


    def items(self) -> "PyObject *":
        """items(mapSCSC self) -> PyObject *"""
        return _pyBasePython.mapSCSC_items(self)


    def __contains__(self, key: 'std::map< signed char,signed char >::key_type const &') -> "bool":
        """__contains__(mapSCSC self, std::map< signed char,signed char >::key_type const & key) -> bool"""
        return _pyBasePython.mapSCSC___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(mapSCSC self) -> SwigPyIterator"""
        return _pyBasePython.mapSCSC_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(mapSCSC self) -> SwigPyIterator"""
        return _pyBasePython.mapSCSC_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(mapSCSC self, std::map< signed char,signed char >::key_type const & key)
        __setitem__(mapSCSC self, std::map< signed char,signed char >::key_type const & key, std::map< signed char,signed char >::mapped_type const & x)
        """
        return _pyBasePython.mapSCSC___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(mapSCSC self) -> PyObject *"""
        return _pyBasePython.mapSCSC_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(signed char,signed char)> self, std::less< signed char > const & arg2) -> mapSCSC
        __init__(std::map<(signed char,signed char)> self) -> mapSCSC
        __init__(std::map<(signed char,signed char)> self, mapSCSC arg2) -> mapSCSC
        """
        _pyBasePython.mapSCSC_swiginit(self, _pyBasePython.new_mapSCSC(*args))

    def empty(self) -> "bool":
        """empty(mapSCSC self) -> bool"""
        return _pyBasePython.mapSCSC_empty(self)


    def size(self) -> "std::map< signed char,signed char >::size_type":
        """size(mapSCSC self) -> std::map< signed char,signed char >::size_type"""
        return _pyBasePython.mapSCSC_size(self)


    def swap(self, v: 'mapSCSC') -> "void":
        """swap(mapSCSC self, mapSCSC v)"""
        return _pyBasePython.mapSCSC_swap(self, v)


    def begin(self) -> "std::map< signed char,signed char >::iterator":
        """begin(mapSCSC self) -> std::map< signed char,signed char >::iterator"""
        return _pyBasePython.mapSCSC_begin(self)


    def end(self) -> "std::map< signed char,signed char >::iterator":
        """end(mapSCSC self) -> std::map< signed char,signed char >::iterator"""
        return _pyBasePython.mapSCSC_end(self)


    def rbegin(self) -> "std::map< signed char,signed char >::reverse_iterator":
        """rbegin(mapSCSC self) -> std::map< signed char,signed char >::reverse_iterator"""
        return _pyBasePython.mapSCSC_rbegin(self)


    def rend(self) -> "std::map< signed char,signed char >::reverse_iterator":
        """rend(mapSCSC self) -> std::map< signed char,signed char >::reverse_iterator"""
        return _pyBasePython.mapSCSC_rend(self)


    def clear(self) -> "void":
        """clear(mapSCSC self)"""
        return _pyBasePython.mapSCSC_clear(self)


    def get_allocator(self) -> "std::map< signed char,signed char >::allocator_type":
        """get_allocator(mapSCSC self) -> std::map< signed char,signed char >::allocator_type"""
        return _pyBasePython.mapSCSC_get_allocator(self)


    def count(self, x: 'std::map< signed char,signed char >::key_type const &') -> "std::map< signed char,signed char >::size_type":
        """count(mapSCSC self, std::map< signed char,signed char >::key_type const & x) -> std::map< signed char,signed char >::size_type"""
        return _pyBasePython.mapSCSC_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(mapSCSC self, std::map< signed char,signed char >::key_type const & x) -> std::map< signed char,signed char >::size_type
        erase(mapSCSC self, std::map< signed char,signed char >::iterator position)
        erase(mapSCSC self, std::map< signed char,signed char >::iterator first, std::map< signed char,signed char >::iterator last)
        """
        return _pyBasePython.mapSCSC_erase(self, *args)


    def find(self, x: 'std::map< signed char,signed char >::key_type const &') -> "std::map< signed char,signed char >::iterator":
        """find(mapSCSC self, std::map< signed char,signed char >::key_type const & x) -> std::map< signed char,signed char >::iterator"""
        return _pyBasePython.mapSCSC_find(self, x)


    def lower_bound(self, x: 'std::map< signed char,signed char >::key_type const &') -> "std::map< signed char,signed char >::iterator":
        """lower_bound(mapSCSC self, std::map< signed char,signed char >::key_type const & x) -> std::map< signed char,signed char >::iterator"""
        return _pyBasePython.mapSCSC_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< signed char,signed char >::key_type const &') -> "std::map< signed char,signed char >::iterator":
        """upper_bound(mapSCSC self, std::map< signed char,signed char >::key_type const & x) -> std::map< signed char,signed char >::iterator"""
        return _pyBasePython.mapSCSC_upper_bound(self, x)

    __swig_destroy__ = _pyBasePython.delete_mapSCSC
mapSCSC.iterator = new_instancemethod(_pyBasePython.mapSCSC_iterator, None, mapSCSC)
mapSCSC.__nonzero__ = new_instancemethod(_pyBasePython.mapSCSC___nonzero__, None, mapSCSC)
mapSCSC.__bool__ = new_instancemethod(_pyBasePython.mapSCSC___bool__, None, mapSCSC)
mapSCSC.__len__ = new_instancemethod(_pyBasePython.mapSCSC___len__, None, mapSCSC)
mapSCSC.__getitem__ = new_instancemethod(_pyBasePython.mapSCSC___getitem__, None, mapSCSC)
mapSCSC.__delitem__ = new_instancemethod(_pyBasePython.mapSCSC___delitem__, None, mapSCSC)
mapSCSC.has_key = new_instancemethod(_pyBasePython.mapSCSC_has_key, None, mapSCSC)
mapSCSC.keys = new_instancemethod(_pyBasePython.mapSCSC_keys, None, mapSCSC)
mapSCSC.values = new_instancemethod(_pyBasePython.mapSCSC_values, None, mapSCSC)
mapSCSC.items = new_instancemethod(_pyBasePython.mapSCSC_items, None, mapSCSC)
mapSCSC.__contains__ = new_instancemethod(_pyBasePython.mapSCSC___contains__, None, mapSCSC)
mapSCSC.key_iterator = new_instancemethod(_pyBasePython.mapSCSC_key_iterator, None, mapSCSC)
mapSCSC.value_iterator = new_instancemethod(_pyBasePython.mapSCSC_value_iterator, None, mapSCSC)
mapSCSC.__setitem__ = new_instancemethod(_pyBasePython.mapSCSC___setitem__, None, mapSCSC)
mapSCSC.asdict = new_instancemethod(_pyBasePython.mapSCSC_asdict, None, mapSCSC)
mapSCSC.empty = new_instancemethod(_pyBasePython.mapSCSC_empty, None, mapSCSC)
mapSCSC.size = new_instancemethod(_pyBasePython.mapSCSC_size, None, mapSCSC)
mapSCSC.swap = new_instancemethod(_pyBasePython.mapSCSC_swap, None, mapSCSC)
mapSCSC.begin = new_instancemethod(_pyBasePython.mapSCSC_begin, None, mapSCSC)
mapSCSC.end = new_instancemethod(_pyBasePython.mapSCSC_end, None, mapSCSC)
mapSCSC.rbegin = new_instancemethod(_pyBasePython.mapSCSC_rbegin, None, mapSCSC)
mapSCSC.rend = new_instancemethod(_pyBasePython.mapSCSC_rend, None, mapSCSC)
mapSCSC.clear = new_instancemethod(_pyBasePython.mapSCSC_clear, None, mapSCSC)
mapSCSC.get_allocator = new_instancemethod(_pyBasePython.mapSCSC_get_allocator, None, mapSCSC)
mapSCSC.count = new_instancemethod(_pyBasePython.mapSCSC_count, None, mapSCSC)
mapSCSC.erase = new_instancemethod(_pyBasePython.mapSCSC_erase, None, mapSCSC)
mapSCSC.find = new_instancemethod(_pyBasePython.mapSCSC_find, None, mapSCSC)
mapSCSC.lower_bound = new_instancemethod(_pyBasePython.mapSCSC_lower_bound, None, mapSCSC)
mapSCSC.upper_bound = new_instancemethod(_pyBasePython.mapSCSC_upper_bound, None, mapSCSC)
mapSCSC_swigregister = _pyBasePython.mapSCSC_swigregister
mapSCSC_swigregister(mapSCSC)

class mapSSSS(object):
    """Proxy of C++ std::map<(short,short)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(mapSSSS self) -> SwigPyIterator"""
        return _pyBasePython.mapSSSS_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(mapSSSS self) -> bool"""
        return _pyBasePython.mapSSSS___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(mapSSSS self) -> bool"""
        return _pyBasePython.mapSSSS___bool__(self)


    def __len__(self) -> "std::map< short,short >::size_type":
        """__len__(mapSSSS self) -> std::map< short,short >::size_type"""
        return _pyBasePython.mapSSSS___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< short,short >::key_type const &') -> "std::map< short,short >::mapped_type const &":
        """__getitem__(mapSSSS self, std::map< short,short >::key_type const & key) -> std::map< short,short >::mapped_type const &"""
        return _pyBasePython.mapSSSS___getitem__(self, key)


    def __delitem__(self, key: 'std::map< short,short >::key_type const &') -> "void":
        """__delitem__(mapSSSS self, std::map< short,short >::key_type const & key)"""
        return _pyBasePython.mapSSSS___delitem__(self, key)


    def has_key(self, key: 'std::map< short,short >::key_type const &') -> "bool":
        """has_key(mapSSSS self, std::map< short,short >::key_type const & key) -> bool"""
        return _pyBasePython.mapSSSS_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(mapSSSS self) -> PyObject *"""
        return _pyBasePython.mapSSSS_keys(self)


    def values(self) -> "PyObject *":
        """values(mapSSSS self) -> PyObject *"""
        return _pyBasePython.mapSSSS_values(self)


    def items(self) -> "PyObject *":
        """items(mapSSSS self) -> PyObject *"""
        return _pyBasePython.mapSSSS_items(self)


    def __contains__(self, key: 'std::map< short,short >::key_type const &') -> "bool":
        """__contains__(mapSSSS self, std::map< short,short >::key_type const & key) -> bool"""
        return _pyBasePython.mapSSSS___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(mapSSSS self) -> SwigPyIterator"""
        return _pyBasePython.mapSSSS_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(mapSSSS self) -> SwigPyIterator"""
        return _pyBasePython.mapSSSS_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(mapSSSS self, std::map< short,short >::key_type const & key)
        __setitem__(mapSSSS self, std::map< short,short >::key_type const & key, std::map< short,short >::mapped_type const & x)
        """
        return _pyBasePython.mapSSSS___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(mapSSSS self) -> PyObject *"""
        return _pyBasePython.mapSSSS_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(short,short)> self, std::less< short > const & arg2) -> mapSSSS
        __init__(std::map<(short,short)> self) -> mapSSSS
        __init__(std::map<(short,short)> self, mapSSSS arg2) -> mapSSSS
        """
        _pyBasePython.mapSSSS_swiginit(self, _pyBasePython.new_mapSSSS(*args))

    def empty(self) -> "bool":
        """empty(mapSSSS self) -> bool"""
        return _pyBasePython.mapSSSS_empty(self)


    def size(self) -> "std::map< short,short >::size_type":
        """size(mapSSSS self) -> std::map< short,short >::size_type"""
        return _pyBasePython.mapSSSS_size(self)


    def swap(self, v: 'mapSSSS') -> "void":
        """swap(mapSSSS self, mapSSSS v)"""
        return _pyBasePython.mapSSSS_swap(self, v)


    def begin(self) -> "std::map< short,short >::iterator":
        """begin(mapSSSS self) -> std::map< short,short >::iterator"""
        return _pyBasePython.mapSSSS_begin(self)


    def end(self) -> "std::map< short,short >::iterator":
        """end(mapSSSS self) -> std::map< short,short >::iterator"""
        return _pyBasePython.mapSSSS_end(self)


    def rbegin(self) -> "std::map< short,short >::reverse_iterator":
        """rbegin(mapSSSS self) -> std::map< short,short >::reverse_iterator"""
        return _pyBasePython.mapSSSS_rbegin(self)


    def rend(self) -> "std::map< short,short >::reverse_iterator":
        """rend(mapSSSS self) -> std::map< short,short >::reverse_iterator"""
        return _pyBasePython.mapSSSS_rend(self)


    def clear(self) -> "void":
        """clear(mapSSSS self)"""
        return _pyBasePython.mapSSSS_clear(self)


    def get_allocator(self) -> "std::map< short,short >::allocator_type":
        """get_allocator(mapSSSS self) -> std::map< short,short >::allocator_type"""
        return _pyBasePython.mapSSSS_get_allocator(self)


    def count(self, x: 'std::map< short,short >::key_type const &') -> "std::map< short,short >::size_type":
        """count(mapSSSS self, std::map< short,short >::key_type const & x) -> std::map< short,short >::size_type"""
        return _pyBasePython.mapSSSS_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(mapSSSS self, std::map< short,short >::key_type const & x) -> std::map< short,short >::size_type
        erase(mapSSSS self, std::map< short,short >::iterator position)
        erase(mapSSSS self, std::map< short,short >::iterator first, std::map< short,short >::iterator last)
        """
        return _pyBasePython.mapSSSS_erase(self, *args)


    def find(self, x: 'std::map< short,short >::key_type const &') -> "std::map< short,short >::iterator":
        """find(mapSSSS self, std::map< short,short >::key_type const & x) -> std::map< short,short >::iterator"""
        return _pyBasePython.mapSSSS_find(self, x)


    def lower_bound(self, x: 'std::map< short,short >::key_type const &') -> "std::map< short,short >::iterator":
        """lower_bound(mapSSSS self, std::map< short,short >::key_type const & x) -> std::map< short,short >::iterator"""
        return _pyBasePython.mapSSSS_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< short,short >::key_type const &') -> "std::map< short,short >::iterator":
        """upper_bound(mapSSSS self, std::map< short,short >::key_type const & x) -> std::map< short,short >::iterator"""
        return _pyBasePython.mapSSSS_upper_bound(self, x)

    __swig_destroy__ = _pyBasePython.delete_mapSSSS
mapSSSS.iterator = new_instancemethod(_pyBasePython.mapSSSS_iterator, None, mapSSSS)
mapSSSS.__nonzero__ = new_instancemethod(_pyBasePython.mapSSSS___nonzero__, None, mapSSSS)
mapSSSS.__bool__ = new_instancemethod(_pyBasePython.mapSSSS___bool__, None, mapSSSS)
mapSSSS.__len__ = new_instancemethod(_pyBasePython.mapSSSS___len__, None, mapSSSS)
mapSSSS.__getitem__ = new_instancemethod(_pyBasePython.mapSSSS___getitem__, None, mapSSSS)
mapSSSS.__delitem__ = new_instancemethod(_pyBasePython.mapSSSS___delitem__, None, mapSSSS)
mapSSSS.has_key = new_instancemethod(_pyBasePython.mapSSSS_has_key, None, mapSSSS)
mapSSSS.keys = new_instancemethod(_pyBasePython.mapSSSS_keys, None, mapSSSS)
mapSSSS.values = new_instancemethod(_pyBasePython.mapSSSS_values, None, mapSSSS)
mapSSSS.items = new_instancemethod(_pyBasePython.mapSSSS_items, None, mapSSSS)
mapSSSS.__contains__ = new_instancemethod(_pyBasePython.mapSSSS___contains__, None, mapSSSS)
mapSSSS.key_iterator = new_instancemethod(_pyBasePython.mapSSSS_key_iterator, None, mapSSSS)
mapSSSS.value_iterator = new_instancemethod(_pyBasePython.mapSSSS_value_iterator, None, mapSSSS)
mapSSSS.__setitem__ = new_instancemethod(_pyBasePython.mapSSSS___setitem__, None, mapSSSS)
mapSSSS.asdict = new_instancemethod(_pyBasePython.mapSSSS_asdict, None, mapSSSS)
mapSSSS.empty = new_instancemethod(_pyBasePython.mapSSSS_empty, None, mapSSSS)
mapSSSS.size = new_instancemethod(_pyBasePython.mapSSSS_size, None, mapSSSS)
mapSSSS.swap = new_instancemethod(_pyBasePython.mapSSSS_swap, None, mapSSSS)
mapSSSS.begin = new_instancemethod(_pyBasePython.mapSSSS_begin, None, mapSSSS)
mapSSSS.end = new_instancemethod(_pyBasePython.mapSSSS_end, None, mapSSSS)
mapSSSS.rbegin = new_instancemethod(_pyBasePython.mapSSSS_rbegin, None, mapSSSS)
mapSSSS.rend = new_instancemethod(_pyBasePython.mapSSSS_rend, None, mapSSSS)
mapSSSS.clear = new_instancemethod(_pyBasePython.mapSSSS_clear, None, mapSSSS)
mapSSSS.get_allocator = new_instancemethod(_pyBasePython.mapSSSS_get_allocator, None, mapSSSS)
mapSSSS.count = new_instancemethod(_pyBasePython.mapSSSS_count, None, mapSSSS)
mapSSSS.erase = new_instancemethod(_pyBasePython.mapSSSS_erase, None, mapSSSS)
mapSSSS.find = new_instancemethod(_pyBasePython.mapSSSS_find, None, mapSSSS)
mapSSSS.lower_bound = new_instancemethod(_pyBasePython.mapSSSS_lower_bound, None, mapSSSS)
mapSSSS.upper_bound = new_instancemethod(_pyBasePython.mapSSSS_upper_bound, None, mapSSSS)
mapSSSS_swigregister = _pyBasePython.mapSSSS_swigregister
mapSSSS_swigregister(mapSSSS)

class mapSLSL(object):
    """Proxy of C++ std::map<(long,long)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(mapSLSL self) -> SwigPyIterator"""
        return _pyBasePython.mapSLSL_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(mapSLSL self) -> bool"""
        return _pyBasePython.mapSLSL___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(mapSLSL self) -> bool"""
        return _pyBasePython.mapSLSL___bool__(self)


    def __len__(self) -> "std::map< long,long >::size_type":
        """__len__(mapSLSL self) -> std::map< long,long >::size_type"""
        return _pyBasePython.mapSLSL___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< long,long >::key_type const &') -> "std::map< long,long >::mapped_type const &":
        """__getitem__(mapSLSL self, std::map< long,long >::key_type const & key) -> std::map< long,long >::mapped_type const &"""
        return _pyBasePython.mapSLSL___getitem__(self, key)


    def __delitem__(self, key: 'std::map< long,long >::key_type const &') -> "void":
        """__delitem__(mapSLSL self, std::map< long,long >::key_type const & key)"""
        return _pyBasePython.mapSLSL___delitem__(self, key)


    def has_key(self, key: 'std::map< long,long >::key_type const &') -> "bool":
        """has_key(mapSLSL self, std::map< long,long >::key_type const & key) -> bool"""
        return _pyBasePython.mapSLSL_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(mapSLSL self) -> PyObject *"""
        return _pyBasePython.mapSLSL_keys(self)


    def values(self) -> "PyObject *":
        """values(mapSLSL self) -> PyObject *"""
        return _pyBasePython.mapSLSL_values(self)


    def items(self) -> "PyObject *":
        """items(mapSLSL self) -> PyObject *"""
        return _pyBasePython.mapSLSL_items(self)


    def __contains__(self, key: 'std::map< long,long >::key_type const &') -> "bool":
        """__contains__(mapSLSL self, std::map< long,long >::key_type const & key) -> bool"""
        return _pyBasePython.mapSLSL___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(mapSLSL self) -> SwigPyIterator"""
        return _pyBasePython.mapSLSL_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(mapSLSL self) -> SwigPyIterator"""
        return _pyBasePython.mapSLSL_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(mapSLSL self, std::map< long,long >::key_type const & key)
        __setitem__(mapSLSL self, std::map< long,long >::key_type const & key, std::map< long,long >::mapped_type const & x)
        """
        return _pyBasePython.mapSLSL___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(mapSLSL self) -> PyObject *"""
        return _pyBasePython.mapSLSL_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(long,long)> self, std::less< long > const & arg2) -> mapSLSL
        __init__(std::map<(long,long)> self) -> mapSLSL
        __init__(std::map<(long,long)> self, mapSLSL arg2) -> mapSLSL
        """
        _pyBasePython.mapSLSL_swiginit(self, _pyBasePython.new_mapSLSL(*args))

    def empty(self) -> "bool":
        """empty(mapSLSL self) -> bool"""
        return _pyBasePython.mapSLSL_empty(self)


    def size(self) -> "std::map< long,long >::size_type":
        """size(mapSLSL self) -> std::map< long,long >::size_type"""
        return _pyBasePython.mapSLSL_size(self)


    def swap(self, v: 'mapSLSL') -> "void":
        """swap(mapSLSL self, mapSLSL v)"""
        return _pyBasePython.mapSLSL_swap(self, v)


    def begin(self) -> "std::map< long,long >::iterator":
        """begin(mapSLSL self) -> std::map< long,long >::iterator"""
        return _pyBasePython.mapSLSL_begin(self)


    def end(self) -> "std::map< long,long >::iterator":
        """end(mapSLSL self) -> std::map< long,long >::iterator"""
        return _pyBasePython.mapSLSL_end(self)


    def rbegin(self) -> "std::map< long,long >::reverse_iterator":
        """rbegin(mapSLSL self) -> std::map< long,long >::reverse_iterator"""
        return _pyBasePython.mapSLSL_rbegin(self)


    def rend(self) -> "std::map< long,long >::reverse_iterator":
        """rend(mapSLSL self) -> std::map< long,long >::reverse_iterator"""
        return _pyBasePython.mapSLSL_rend(self)


    def clear(self) -> "void":
        """clear(mapSLSL self)"""
        return _pyBasePython.mapSLSL_clear(self)


    def get_allocator(self) -> "std::map< long,long >::allocator_type":
        """get_allocator(mapSLSL self) -> std::map< long,long >::allocator_type"""
        return _pyBasePython.mapSLSL_get_allocator(self)


    def count(self, x: 'std::map< long,long >::key_type const &') -> "std::map< long,long >::size_type":
        """count(mapSLSL self, std::map< long,long >::key_type const & x) -> std::map< long,long >::size_type"""
        return _pyBasePython.mapSLSL_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(mapSLSL self, std::map< long,long >::key_type const & x) -> std::map< long,long >::size_type
        erase(mapSLSL self, std::map< long,long >::iterator position)
        erase(mapSLSL self, std::map< long,long >::iterator first, std::map< long,long >::iterator last)
        """
        return _pyBasePython.mapSLSL_erase(self, *args)


    def find(self, x: 'std::map< long,long >::key_type const &') -> "std::map< long,long >::iterator":
        """find(mapSLSL self, std::map< long,long >::key_type const & x) -> std::map< long,long >::iterator"""
        return _pyBasePython.mapSLSL_find(self, x)


    def lower_bound(self, x: 'std::map< long,long >::key_type const &') -> "std::map< long,long >::iterator":
        """lower_bound(mapSLSL self, std::map< long,long >::key_type const & x) -> std::map< long,long >::iterator"""
        return _pyBasePython.mapSLSL_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< long,long >::key_type const &') -> "std::map< long,long >::iterator":
        """upper_bound(mapSLSL self, std::map< long,long >::key_type const & x) -> std::map< long,long >::iterator"""
        return _pyBasePython.mapSLSL_upper_bound(self, x)

    __swig_destroy__ = _pyBasePython.delete_mapSLSL
mapSLSL.iterator = new_instancemethod(_pyBasePython.mapSLSL_iterator, None, mapSLSL)
mapSLSL.__nonzero__ = new_instancemethod(_pyBasePython.mapSLSL___nonzero__, None, mapSLSL)
mapSLSL.__bool__ = new_instancemethod(_pyBasePython.mapSLSL___bool__, None, mapSLSL)
mapSLSL.__len__ = new_instancemethod(_pyBasePython.mapSLSL___len__, None, mapSLSL)
mapSLSL.__getitem__ = new_instancemethod(_pyBasePython.mapSLSL___getitem__, None, mapSLSL)
mapSLSL.__delitem__ = new_instancemethod(_pyBasePython.mapSLSL___delitem__, None, mapSLSL)
mapSLSL.has_key = new_instancemethod(_pyBasePython.mapSLSL_has_key, None, mapSLSL)
mapSLSL.keys = new_instancemethod(_pyBasePython.mapSLSL_keys, None, mapSLSL)
mapSLSL.values = new_instancemethod(_pyBasePython.mapSLSL_values, None, mapSLSL)
mapSLSL.items = new_instancemethod(_pyBasePython.mapSLSL_items, None, mapSLSL)
mapSLSL.__contains__ = new_instancemethod(_pyBasePython.mapSLSL___contains__, None, mapSLSL)
mapSLSL.key_iterator = new_instancemethod(_pyBasePython.mapSLSL_key_iterator, None, mapSLSL)
mapSLSL.value_iterator = new_instancemethod(_pyBasePython.mapSLSL_value_iterator, None, mapSLSL)
mapSLSL.__setitem__ = new_instancemethod(_pyBasePython.mapSLSL___setitem__, None, mapSLSL)
mapSLSL.asdict = new_instancemethod(_pyBasePython.mapSLSL_asdict, None, mapSLSL)
mapSLSL.empty = new_instancemethod(_pyBasePython.mapSLSL_empty, None, mapSLSL)
mapSLSL.size = new_instancemethod(_pyBasePython.mapSLSL_size, None, mapSLSL)
mapSLSL.swap = new_instancemethod(_pyBasePython.mapSLSL_swap, None, mapSLSL)
mapSLSL.begin = new_instancemethod(_pyBasePython.mapSLSL_begin, None, mapSLSL)
mapSLSL.end = new_instancemethod(_pyBasePython.mapSLSL_end, None, mapSLSL)
mapSLSL.rbegin = new_instancemethod(_pyBasePython.mapSLSL_rbegin, None, mapSLSL)
mapSLSL.rend = new_instancemethod(_pyBasePython.mapSLSL_rend, None, mapSLSL)
mapSLSL.clear = new_instancemethod(_pyBasePython.mapSLSL_clear, None, mapSLSL)
mapSLSL.get_allocator = new_instancemethod(_pyBasePython.mapSLSL_get_allocator, None, mapSLSL)
mapSLSL.count = new_instancemethod(_pyBasePython.mapSLSL_count, None, mapSLSL)
mapSLSL.erase = new_instancemethod(_pyBasePython.mapSLSL_erase, None, mapSLSL)
mapSLSL.find = new_instancemethod(_pyBasePython.mapSLSL_find, None, mapSLSL)
mapSLSL.lower_bound = new_instancemethod(_pyBasePython.mapSLSL_lower_bound, None, mapSLSL)
mapSLSL.upper_bound = new_instancemethod(_pyBasePython.mapSLSL_upper_bound, None, mapSLSL)
mapSLSL_swigregister = _pyBasePython.mapSLSL_swigregister
mapSLSL_swigregister(mapSLSL)

class mapFF(object):
    """Proxy of C++ std::map<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(mapFF self) -> SwigPyIterator"""
        return _pyBasePython.mapFF_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(mapFF self) -> bool"""
        return _pyBasePython.mapFF___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(mapFF self) -> bool"""
        return _pyBasePython.mapFF___bool__(self)


    def __len__(self) -> "std::map< float,float >::size_type":
        """__len__(mapFF self) -> std::map< float,float >::size_type"""
        return _pyBasePython.mapFF___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< float,float >::key_type const &') -> "std::map< float,float >::mapped_type const &":
        """__getitem__(mapFF self, std::map< float,float >::key_type const & key) -> std::map< float,float >::mapped_type const &"""
        return _pyBasePython.mapFF___getitem__(self, key)


    def __delitem__(self, key: 'std::map< float,float >::key_type const &') -> "void":
        """__delitem__(mapFF self, std::map< float,float >::key_type const & key)"""
        return _pyBasePython.mapFF___delitem__(self, key)


    def has_key(self, key: 'std::map< float,float >::key_type const &') -> "bool":
        """has_key(mapFF self, std::map< float,float >::key_type const & key) -> bool"""
        return _pyBasePython.mapFF_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(mapFF self) -> PyObject *"""
        return _pyBasePython.mapFF_keys(self)


    def values(self) -> "PyObject *":
        """values(mapFF self) -> PyObject *"""
        return _pyBasePython.mapFF_values(self)


    def items(self) -> "PyObject *":
        """items(mapFF self) -> PyObject *"""
        return _pyBasePython.mapFF_items(self)


    def __contains__(self, key: 'std::map< float,float >::key_type const &') -> "bool":
        """__contains__(mapFF self, std::map< float,float >::key_type const & key) -> bool"""
        return _pyBasePython.mapFF___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(mapFF self) -> SwigPyIterator"""
        return _pyBasePython.mapFF_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(mapFF self) -> SwigPyIterator"""
        return _pyBasePython.mapFF_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(mapFF self, std::map< float,float >::key_type const & key)
        __setitem__(mapFF self, std::map< float,float >::key_type const & key, std::map< float,float >::mapped_type const & x)
        """
        return _pyBasePython.mapFF___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(mapFF self) -> PyObject *"""
        return _pyBasePython.mapFF_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(float,float)> self, std::less< float > const & arg2) -> mapFF
        __init__(std::map<(float,float)> self) -> mapFF
        __init__(std::map<(float,float)> self, mapFF arg2) -> mapFF
        """
        _pyBasePython.mapFF_swiginit(self, _pyBasePython.new_mapFF(*args))

    def empty(self) -> "bool":
        """empty(mapFF self) -> bool"""
        return _pyBasePython.mapFF_empty(self)


    def size(self) -> "std::map< float,float >::size_type":
        """size(mapFF self) -> std::map< float,float >::size_type"""
        return _pyBasePython.mapFF_size(self)


    def swap(self, v: 'mapFF') -> "void":
        """swap(mapFF self, mapFF v)"""
        return _pyBasePython.mapFF_swap(self, v)


    def begin(self) -> "std::map< float,float >::iterator":
        """begin(mapFF self) -> std::map< float,float >::iterator"""
        return _pyBasePython.mapFF_begin(self)


    def end(self) -> "std::map< float,float >::iterator":
        """end(mapFF self) -> std::map< float,float >::iterator"""
        return _pyBasePython.mapFF_end(self)


    def rbegin(self) -> "std::map< float,float >::reverse_iterator":
        """rbegin(mapFF self) -> std::map< float,float >::reverse_iterator"""
        return _pyBasePython.mapFF_rbegin(self)


    def rend(self) -> "std::map< float,float >::reverse_iterator":
        """rend(mapFF self) -> std::map< float,float >::reverse_iterator"""
        return _pyBasePython.mapFF_rend(self)


    def clear(self) -> "void":
        """clear(mapFF self)"""
        return _pyBasePython.mapFF_clear(self)


    def get_allocator(self) -> "std::map< float,float >::allocator_type":
        """get_allocator(mapFF self) -> std::map< float,float >::allocator_type"""
        return _pyBasePython.mapFF_get_allocator(self)


    def count(self, x: 'std::map< float,float >::key_type const &') -> "std::map< float,float >::size_type":
        """count(mapFF self, std::map< float,float >::key_type const & x) -> std::map< float,float >::size_type"""
        return _pyBasePython.mapFF_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(mapFF self, std::map< float,float >::key_type const & x) -> std::map< float,float >::size_type
        erase(mapFF self, std::map< float,float >::iterator position)
        erase(mapFF self, std::map< float,float >::iterator first, std::map< float,float >::iterator last)
        """
        return _pyBasePython.mapFF_erase(self, *args)


    def find(self, x: 'std::map< float,float >::key_type const &') -> "std::map< float,float >::iterator":
        """find(mapFF self, std::map< float,float >::key_type const & x) -> std::map< float,float >::iterator"""
        return _pyBasePython.mapFF_find(self, x)


    def lower_bound(self, x: 'std::map< float,float >::key_type const &') -> "std::map< float,float >::iterator":
        """lower_bound(mapFF self, std::map< float,float >::key_type const & x) -> std::map< float,float >::iterator"""
        return _pyBasePython.mapFF_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< float,float >::key_type const &') -> "std::map< float,float >::iterator":
        """upper_bound(mapFF self, std::map< float,float >::key_type const & x) -> std::map< float,float >::iterator"""
        return _pyBasePython.mapFF_upper_bound(self, x)

    __swig_destroy__ = _pyBasePython.delete_mapFF
mapFF.iterator = new_instancemethod(_pyBasePython.mapFF_iterator, None, mapFF)
mapFF.__nonzero__ = new_instancemethod(_pyBasePython.mapFF___nonzero__, None, mapFF)
mapFF.__bool__ = new_instancemethod(_pyBasePython.mapFF___bool__, None, mapFF)
mapFF.__len__ = new_instancemethod(_pyBasePython.mapFF___len__, None, mapFF)
mapFF.__getitem__ = new_instancemethod(_pyBasePython.mapFF___getitem__, None, mapFF)
mapFF.__delitem__ = new_instancemethod(_pyBasePython.mapFF___delitem__, None, mapFF)
mapFF.has_key = new_instancemethod(_pyBasePython.mapFF_has_key, None, mapFF)
mapFF.keys = new_instancemethod(_pyBasePython.mapFF_keys, None, mapFF)
mapFF.values = new_instancemethod(_pyBasePython.mapFF_values, None, mapFF)
mapFF.items = new_instancemethod(_pyBasePython.mapFF_items, None, mapFF)
mapFF.__contains__ = new_instancemethod(_pyBasePython.mapFF___contains__, None, mapFF)
mapFF.key_iterator = new_instancemethod(_pyBasePython.mapFF_key_iterator, None, mapFF)
mapFF.value_iterator = new_instancemethod(_pyBasePython.mapFF_value_iterator, None, mapFF)
mapFF.__setitem__ = new_instancemethod(_pyBasePython.mapFF___setitem__, None, mapFF)
mapFF.asdict = new_instancemethod(_pyBasePython.mapFF_asdict, None, mapFF)
mapFF.empty = new_instancemethod(_pyBasePython.mapFF_empty, None, mapFF)
mapFF.size = new_instancemethod(_pyBasePython.mapFF_size, None, mapFF)
mapFF.swap = new_instancemethod(_pyBasePython.mapFF_swap, None, mapFF)
mapFF.begin = new_instancemethod(_pyBasePython.mapFF_begin, None, mapFF)
mapFF.end = new_instancemethod(_pyBasePython.mapFF_end, None, mapFF)
mapFF.rbegin = new_instancemethod(_pyBasePython.mapFF_rbegin, None, mapFF)
mapFF.rend = new_instancemethod(_pyBasePython.mapFF_rend, None, mapFF)
mapFF.clear = new_instancemethod(_pyBasePython.mapFF_clear, None, mapFF)
mapFF.get_allocator = new_instancemethod(_pyBasePython.mapFF_get_allocator, None, mapFF)
mapFF.count = new_instancemethod(_pyBasePython.mapFF_count, None, mapFF)
mapFF.erase = new_instancemethod(_pyBasePython.mapFF_erase, None, mapFF)
mapFF.find = new_instancemethod(_pyBasePython.mapFF_find, None, mapFF)
mapFF.lower_bound = new_instancemethod(_pyBasePython.mapFF_lower_bound, None, mapFF)
mapFF.upper_bound = new_instancemethod(_pyBasePython.mapFF_upper_bound, None, mapFF)
mapFF_swigregister = _pyBasePython.mapFF_swigregister
mapFF_swigregister(mapFF)

class mapDD(object):
    """Proxy of C++ std::map<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(mapDD self) -> SwigPyIterator"""
        return _pyBasePython.mapDD_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(mapDD self) -> bool"""
        return _pyBasePython.mapDD___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(mapDD self) -> bool"""
        return _pyBasePython.mapDD___bool__(self)


    def __len__(self) -> "std::map< double,double >::size_type":
        """__len__(mapDD self) -> std::map< double,double >::size_type"""
        return _pyBasePython.mapDD___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< double,double >::key_type const &') -> "std::map< double,double >::mapped_type const &":
        """__getitem__(mapDD self, std::map< double,double >::key_type const & key) -> std::map< double,double >::mapped_type const &"""
        return _pyBasePython.mapDD___getitem__(self, key)


    def __delitem__(self, key: 'std::map< double,double >::key_type const &') -> "void":
        """__delitem__(mapDD self, std::map< double,double >::key_type const & key)"""
        return _pyBasePython.mapDD___delitem__(self, key)


    def has_key(self, key: 'std::map< double,double >::key_type const &') -> "bool":
        """has_key(mapDD self, std::map< double,double >::key_type const & key) -> bool"""
        return _pyBasePython.mapDD_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(mapDD self) -> PyObject *"""
        return _pyBasePython.mapDD_keys(self)


    def values(self) -> "PyObject *":
        """values(mapDD self) -> PyObject *"""
        return _pyBasePython.mapDD_values(self)


    def items(self) -> "PyObject *":
        """items(mapDD self) -> PyObject *"""
        return _pyBasePython.mapDD_items(self)


    def __contains__(self, key: 'std::map< double,double >::key_type const &') -> "bool":
        """__contains__(mapDD self, std::map< double,double >::key_type const & key) -> bool"""
        return _pyBasePython.mapDD___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(mapDD self) -> SwigPyIterator"""
        return _pyBasePython.mapDD_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(mapDD self) -> SwigPyIterator"""
        return _pyBasePython.mapDD_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(mapDD self, std::map< double,double >::key_type const & key)
        __setitem__(mapDD self, std::map< double,double >::key_type const & key, std::map< double,double >::mapped_type const & x)
        """
        return _pyBasePython.mapDD___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(mapDD self) -> PyObject *"""
        return _pyBasePython.mapDD_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(double,double)> self, std::less< double > const & arg2) -> mapDD
        __init__(std::map<(double,double)> self) -> mapDD
        __init__(std::map<(double,double)> self, mapDD arg2) -> mapDD
        """
        _pyBasePython.mapDD_swiginit(self, _pyBasePython.new_mapDD(*args))

    def empty(self) -> "bool":
        """empty(mapDD self) -> bool"""
        return _pyBasePython.mapDD_empty(self)


    def size(self) -> "std::map< double,double >::size_type":
        """size(mapDD self) -> std::map< double,double >::size_type"""
        return _pyBasePython.mapDD_size(self)


    def swap(self, v: 'mapDD') -> "void":
        """swap(mapDD self, mapDD v)"""
        return _pyBasePython.mapDD_swap(self, v)


    def begin(self) -> "std::map< double,double >::iterator":
        """begin(mapDD self) -> std::map< double,double >::iterator"""
        return _pyBasePython.mapDD_begin(self)


    def end(self) -> "std::map< double,double >::iterator":
        """end(mapDD self) -> std::map< double,double >::iterator"""
        return _pyBasePython.mapDD_end(self)


    def rbegin(self) -> "std::map< double,double >::reverse_iterator":
        """rbegin(mapDD self) -> std::map< double,double >::reverse_iterator"""
        return _pyBasePython.mapDD_rbegin(self)


    def rend(self) -> "std::map< double,double >::reverse_iterator":
        """rend(mapDD self) -> std::map< double,double >::reverse_iterator"""
        return _pyBasePython.mapDD_rend(self)


    def clear(self) -> "void":
        """clear(mapDD self)"""
        return _pyBasePython.mapDD_clear(self)


    def get_allocator(self) -> "std::map< double,double >::allocator_type":
        """get_allocator(mapDD self) -> std::map< double,double >::allocator_type"""
        return _pyBasePython.mapDD_get_allocator(self)


    def count(self, x: 'std::map< double,double >::key_type const &') -> "std::map< double,double >::size_type":
        """count(mapDD self, std::map< double,double >::key_type const & x) -> std::map< double,double >::size_type"""
        return _pyBasePython.mapDD_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(mapDD self, std::map< double,double >::key_type const & x) -> std::map< double,double >::size_type
        erase(mapDD self, std::map< double,double >::iterator position)
        erase(mapDD self, std::map< double,double >::iterator first, std::map< double,double >::iterator last)
        """
        return _pyBasePython.mapDD_erase(self, *args)


    def find(self, x: 'std::map< double,double >::key_type const &') -> "std::map< double,double >::iterator":
        """find(mapDD self, std::map< double,double >::key_type const & x) -> std::map< double,double >::iterator"""
        return _pyBasePython.mapDD_find(self, x)


    def lower_bound(self, x: 'std::map< double,double >::key_type const &') -> "std::map< double,double >::iterator":
        """lower_bound(mapDD self, std::map< double,double >::key_type const & x) -> std::map< double,double >::iterator"""
        return _pyBasePython.mapDD_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< double,double >::key_type const &') -> "std::map< double,double >::iterator":
        """upper_bound(mapDD self, std::map< double,double >::key_type const & x) -> std::map< double,double >::iterator"""
        return _pyBasePython.mapDD_upper_bound(self, x)

    __swig_destroy__ = _pyBasePython.delete_mapDD
mapDD.iterator = new_instancemethod(_pyBasePython.mapDD_iterator, None, mapDD)
mapDD.__nonzero__ = new_instancemethod(_pyBasePython.mapDD___nonzero__, None, mapDD)
mapDD.__bool__ = new_instancemethod(_pyBasePython.mapDD___bool__, None, mapDD)
mapDD.__len__ = new_instancemethod(_pyBasePython.mapDD___len__, None, mapDD)
mapDD.__getitem__ = new_instancemethod(_pyBasePython.mapDD___getitem__, None, mapDD)
mapDD.__delitem__ = new_instancemethod(_pyBasePython.mapDD___delitem__, None, mapDD)
mapDD.has_key = new_instancemethod(_pyBasePython.mapDD_has_key, None, mapDD)
mapDD.keys = new_instancemethod(_pyBasePython.mapDD_keys, None, mapDD)
mapDD.values = new_instancemethod(_pyBasePython.mapDD_values, None, mapDD)
mapDD.items = new_instancemethod(_pyBasePython.mapDD_items, None, mapDD)
mapDD.__contains__ = new_instancemethod(_pyBasePython.mapDD___contains__, None, mapDD)
mapDD.key_iterator = new_instancemethod(_pyBasePython.mapDD_key_iterator, None, mapDD)
mapDD.value_iterator = new_instancemethod(_pyBasePython.mapDD_value_iterator, None, mapDD)
mapDD.__setitem__ = new_instancemethod(_pyBasePython.mapDD___setitem__, None, mapDD)
mapDD.asdict = new_instancemethod(_pyBasePython.mapDD_asdict, None, mapDD)
mapDD.empty = new_instancemethod(_pyBasePython.mapDD_empty, None, mapDD)
mapDD.size = new_instancemethod(_pyBasePython.mapDD_size, None, mapDD)
mapDD.swap = new_instancemethod(_pyBasePython.mapDD_swap, None, mapDD)
mapDD.begin = new_instancemethod(_pyBasePython.mapDD_begin, None, mapDD)
mapDD.end = new_instancemethod(_pyBasePython.mapDD_end, None, mapDD)
mapDD.rbegin = new_instancemethod(_pyBasePython.mapDD_rbegin, None, mapDD)
mapDD.rend = new_instancemethod(_pyBasePython.mapDD_rend, None, mapDD)
mapDD.clear = new_instancemethod(_pyBasePython.mapDD_clear, None, mapDD)
mapDD.get_allocator = new_instancemethod(_pyBasePython.mapDD_get_allocator, None, mapDD)
mapDD.count = new_instancemethod(_pyBasePython.mapDD_count, None, mapDD)
mapDD.erase = new_instancemethod(_pyBasePython.mapDD_erase, None, mapDD)
mapDD.find = new_instancemethod(_pyBasePython.mapDD_find, None, mapDD)
mapDD.lower_bound = new_instancemethod(_pyBasePython.mapDD_lower_bound, None, mapDD)
mapDD.upper_bound = new_instancemethod(_pyBasePython.mapDD_upper_bound, None, mapDD)
mapDD_swigregister = _pyBasePython.mapDD_swigregister
mapDD_swigregister(mapDD)

class pairI(object):
    """Proxy of C++ std::pair<(int,int)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(std::pair<(int,int)> self) -> pairI
        __init__(std::pair<(int,int)> self, int first, int second) -> pairI
        __init__(std::pair<(int,int)> self, pairI p) -> pairI
        """
        _pyBasePython.pairI_swiginit(self, _pyBasePython.new_pairI(*args))
    first = _swig_property(_pyBasePython.pairI_first_get, _pyBasePython.pairI_first_set)
    second = _swig_property(_pyBasePython.pairI_second_get, _pyBasePython.pairI_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pyBasePython.delete_pairI
pairI_swigregister = _pyBasePython.pairI_swigregister
pairI_swigregister(pairI)

class pairUI(object):
    """Proxy of C++ std::pair<(unsigned int,unsigned int)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(std::pair<(unsigned int,unsigned int)> self) -> pairUI
        __init__(std::pair<(unsigned int,unsigned int)> self, unsigned int first, unsigned int second) -> pairUI
        __init__(std::pair<(unsigned int,unsigned int)> self, pairUI p) -> pairUI
        """
        _pyBasePython.pairUI_swiginit(self, _pyBasePython.new_pairUI(*args))
    first = _swig_property(_pyBasePython.pairUI_first_get, _pyBasePython.pairUI_first_set)
    second = _swig_property(_pyBasePython.pairUI_second_get, _pyBasePython.pairUI_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pyBasePython.delete_pairUI
pairUI_swigregister = _pyBasePython.pairUI_swigregister
pairUI_swigregister(pairUI)

class vectorB(object):
    """Proxy of C++ std::vector<(bool)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorB self) -> SwigPyIterator"""
        return _pyBasePython.vectorB_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorB self) -> bool"""
        return _pyBasePython.vectorB___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorB self) -> bool"""
        return _pyBasePython.vectorB___bool__(self)


    def __len__(self) -> "std::vector< bool >::size_type":
        """__len__(vectorB self) -> std::vector< bool >::size_type"""
        return _pyBasePython.vectorB___len__(self)


    def __getslice__(self, i: 'std::vector< bool >::difference_type', j: 'std::vector< bool >::difference_type') -> "std::vector< bool,std::allocator< bool > > *":
        """__getslice__(vectorB self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j) -> vectorB"""
        return _pyBasePython.vectorB___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorB self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)
        __setslice__(vectorB self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j, vectorB v)
        """
        return _pyBasePython.vectorB___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< bool >::difference_type', j: 'std::vector< bool >::difference_type') -> "void":
        """__delslice__(vectorB self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)"""
        return _pyBasePython.vectorB___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorB self, std::vector< bool >::difference_type i)
        __delitem__(vectorB self, PySliceObject * slice)
        """
        return _pyBasePython.vectorB___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< bool >::value_type":
        """
        __getitem__(vectorB self, PySliceObject * slice) -> vectorB
        __getitem__(vectorB self, std::vector< bool >::difference_type i) -> std::vector< bool >::value_type
        """
        return _pyBasePython.vectorB___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorB self, PySliceObject * slice, vectorB v)
        __setitem__(vectorB self, PySliceObject * slice)
        __setitem__(vectorB self, std::vector< bool >::difference_type i, std::vector< bool >::value_type x)
        """
        return _pyBasePython.vectorB___setitem__(self, *args)


    def pop(self) -> "std::vector< bool >::value_type":
        """pop(vectorB self) -> std::vector< bool >::value_type"""
        return _pyBasePython.vectorB_pop(self)


    def append(self, x: 'std::vector< bool >::value_type') -> "void":
        """append(vectorB self, std::vector< bool >::value_type x)"""
        return _pyBasePython.vectorB_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorB self) -> bool"""
        return _pyBasePython.vectorB_empty(self)


    def size(self) -> "std::vector< bool >::size_type":
        """size(vectorB self) -> std::vector< bool >::size_type"""
        return _pyBasePython.vectorB_size(self)


    def swap(self, v: 'vectorB') -> "void":
        """swap(vectorB self, vectorB v)"""
        return _pyBasePython.vectorB_swap(self, v)


    def begin(self) -> "std::vector< bool >::iterator":
        """begin(vectorB self) -> std::vector< bool >::iterator"""
        return _pyBasePython.vectorB_begin(self)


    def end(self) -> "std::vector< bool >::iterator":
        """end(vectorB self) -> std::vector< bool >::iterator"""
        return _pyBasePython.vectorB_end(self)


    def rbegin(self) -> "std::vector< bool >::reverse_iterator":
        """rbegin(vectorB self) -> std::vector< bool >::reverse_iterator"""
        return _pyBasePython.vectorB_rbegin(self)


    def rend(self) -> "std::vector< bool >::reverse_iterator":
        """rend(vectorB self) -> std::vector< bool >::reverse_iterator"""
        return _pyBasePython.vectorB_rend(self)


    def clear(self) -> "void":
        """clear(vectorB self)"""
        return _pyBasePython.vectorB_clear(self)


    def get_allocator(self) -> "std::vector< bool >::allocator_type":
        """get_allocator(vectorB self) -> std::vector< bool >::allocator_type"""
        return _pyBasePython.vectorB_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorB self)"""
        return _pyBasePython.vectorB_pop_back(self)


    def erase(self, *args) -> "std::vector< bool >::iterator":
        """
        erase(vectorB self, std::vector< bool >::iterator pos) -> std::vector< bool >::iterator
        erase(vectorB self, std::vector< bool >::iterator first, std::vector< bool >::iterator last) -> std::vector< bool >::iterator
        """
        return _pyBasePython.vectorB_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(bool)> self) -> vectorB
        __init__(std::vector<(bool)> self, vectorB arg2) -> vectorB
        __init__(std::vector<(bool)> self, std::vector< bool >::size_type size) -> vectorB
        __init__(std::vector<(bool)> self, std::vector< bool >::size_type size, std::vector< bool >::value_type value) -> vectorB
        """
        _pyBasePython.vectorB_swiginit(self, _pyBasePython.new_vectorB(*args))

    def push_back(self, x: 'std::vector< bool >::value_type') -> "void":
        """push_back(vectorB self, std::vector< bool >::value_type x)"""
        return _pyBasePython.vectorB_push_back(self, x)


    def front(self) -> "std::vector< bool >::value_type":
        """front(vectorB self) -> std::vector< bool >::value_type"""
        return _pyBasePython.vectorB_front(self)


    def back(self) -> "std::vector< bool >::value_type":
        """back(vectorB self) -> std::vector< bool >::value_type"""
        return _pyBasePython.vectorB_back(self)


    def assign(self, n: 'std::vector< bool >::size_type', x: 'std::vector< bool >::value_type') -> "void":
        """assign(vectorB self, std::vector< bool >::size_type n, std::vector< bool >::value_type x)"""
        return _pyBasePython.vectorB_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorB self, std::vector< bool >::size_type new_size)
        resize(vectorB self, std::vector< bool >::size_type new_size, std::vector< bool >::value_type x)
        """
        return _pyBasePython.vectorB_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorB self, std::vector< bool >::iterator pos, std::vector< bool >::value_type x) -> std::vector< bool >::iterator
        insert(vectorB self, std::vector< bool >::iterator pos, std::vector< bool >::size_type n, std::vector< bool >::value_type x)
        """
        return _pyBasePython.vectorB_insert(self, *args)


    def reserve(self, n: 'std::vector< bool >::size_type') -> "void":
        """reserve(vectorB self, std::vector< bool >::size_type n)"""
        return _pyBasePython.vectorB_reserve(self, n)


    def capacity(self) -> "std::vector< bool >::size_type":
        """capacity(vectorB self) -> std::vector< bool >::size_type"""
        return _pyBasePython.vectorB_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorB
vectorB.iterator = new_instancemethod(_pyBasePython.vectorB_iterator, None, vectorB)
vectorB.__nonzero__ = new_instancemethod(_pyBasePython.vectorB___nonzero__, None, vectorB)
vectorB.__bool__ = new_instancemethod(_pyBasePython.vectorB___bool__, None, vectorB)
vectorB.__len__ = new_instancemethod(_pyBasePython.vectorB___len__, None, vectorB)
vectorB.__getslice__ = new_instancemethod(_pyBasePython.vectorB___getslice__, None, vectorB)
vectorB.__setslice__ = new_instancemethod(_pyBasePython.vectorB___setslice__, None, vectorB)
vectorB.__delslice__ = new_instancemethod(_pyBasePython.vectorB___delslice__, None, vectorB)
vectorB.__delitem__ = new_instancemethod(_pyBasePython.vectorB___delitem__, None, vectorB)
vectorB.__getitem__ = new_instancemethod(_pyBasePython.vectorB___getitem__, None, vectorB)
vectorB.__setitem__ = new_instancemethod(_pyBasePython.vectorB___setitem__, None, vectorB)
vectorB.pop = new_instancemethod(_pyBasePython.vectorB_pop, None, vectorB)
vectorB.append = new_instancemethod(_pyBasePython.vectorB_append, None, vectorB)
vectorB.empty = new_instancemethod(_pyBasePython.vectorB_empty, None, vectorB)
vectorB.size = new_instancemethod(_pyBasePython.vectorB_size, None, vectorB)
vectorB.swap = new_instancemethod(_pyBasePython.vectorB_swap, None, vectorB)
vectorB.begin = new_instancemethod(_pyBasePython.vectorB_begin, None, vectorB)
vectorB.end = new_instancemethod(_pyBasePython.vectorB_end, None, vectorB)
vectorB.rbegin = new_instancemethod(_pyBasePython.vectorB_rbegin, None, vectorB)
vectorB.rend = new_instancemethod(_pyBasePython.vectorB_rend, None, vectorB)
vectorB.clear = new_instancemethod(_pyBasePython.vectorB_clear, None, vectorB)
vectorB.get_allocator = new_instancemethod(_pyBasePython.vectorB_get_allocator, None, vectorB)
vectorB.pop_back = new_instancemethod(_pyBasePython.vectorB_pop_back, None, vectorB)
vectorB.erase = new_instancemethod(_pyBasePython.vectorB_erase, None, vectorB)
vectorB.push_back = new_instancemethod(_pyBasePython.vectorB_push_back, None, vectorB)
vectorB.front = new_instancemethod(_pyBasePython.vectorB_front, None, vectorB)
vectorB.back = new_instancemethod(_pyBasePython.vectorB_back, None, vectorB)
vectorB.assign = new_instancemethod(_pyBasePython.vectorB_assign, None, vectorB)
vectorB.resize = new_instancemethod(_pyBasePython.vectorB_resize, None, vectorB)
vectorB.insert = new_instancemethod(_pyBasePython.vectorB_insert, None, vectorB)
vectorB.reserve = new_instancemethod(_pyBasePython.vectorB_reserve, None, vectorB)
vectorB.capacity = new_instancemethod(_pyBasePython.vectorB_capacity, None, vectorB)
vectorB_swigregister = _pyBasePython.vectorB_swigregister
vectorB_swigregister(vectorB)

class vectorvectorB(object):
    """Proxy of C++ std::vector<(std::vector<(bool)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorvectorB self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorB_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorvectorB self) -> bool"""
        return _pyBasePython.vectorvectorB___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorvectorB self) -> bool"""
        return _pyBasePython.vectorvectorB___bool__(self)


    def __len__(self) -> "std::vector< std::vector< bool > >::size_type":
        """__len__(vectorvectorB self) -> std::vector< std::vector< bool > >::size_type"""
        return _pyBasePython.vectorvectorB___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< bool > >::difference_type', j: 'std::vector< std::vector< bool > >::difference_type') -> "std::vector< std::vector< bool,std::allocator< bool > >,std::allocator< std::vector< bool,std::allocator< bool > > > > *":
        """__getslice__(vectorvectorB self, std::vector< std::vector< bool > >::difference_type i, std::vector< std::vector< bool > >::difference_type j) -> vectorvectorB"""
        return _pyBasePython.vectorvectorB___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorvectorB self, std::vector< std::vector< bool > >::difference_type i, std::vector< std::vector< bool > >::difference_type j)
        __setslice__(vectorvectorB self, std::vector< std::vector< bool > >::difference_type i, std::vector< std::vector< bool > >::difference_type j, vectorvectorB v)
        """
        return _pyBasePython.vectorvectorB___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< bool > >::difference_type', j: 'std::vector< std::vector< bool > >::difference_type') -> "void":
        """__delslice__(vectorvectorB self, std::vector< std::vector< bool > >::difference_type i, std::vector< std::vector< bool > >::difference_type j)"""
        return _pyBasePython.vectorvectorB___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorvectorB self, std::vector< std::vector< bool > >::difference_type i)
        __delitem__(vectorvectorB self, PySliceObject * slice)
        """
        return _pyBasePython.vectorvectorB___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< bool > >::value_type const &":
        """
        __getitem__(vectorvectorB self, PySliceObject * slice) -> vectorvectorB
        __getitem__(vectorvectorB self, std::vector< std::vector< bool > >::difference_type i) -> vectorB
        """
        return _pyBasePython.vectorvectorB___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorvectorB self, PySliceObject * slice, vectorvectorB v)
        __setitem__(vectorvectorB self, PySliceObject * slice)
        __setitem__(vectorvectorB self, std::vector< std::vector< bool > >::difference_type i, vectorB x)
        """
        return _pyBasePython.vectorvectorB___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< bool > >::value_type":
        """pop(vectorvectorB self) -> vectorB"""
        return _pyBasePython.vectorvectorB_pop(self)


    def append(self, x: 'vectorB') -> "void":
        """append(vectorvectorB self, vectorB x)"""
        return _pyBasePython.vectorvectorB_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorvectorB self) -> bool"""
        return _pyBasePython.vectorvectorB_empty(self)


    def size(self) -> "std::vector< std::vector< bool > >::size_type":
        """size(vectorvectorB self) -> std::vector< std::vector< bool > >::size_type"""
        return _pyBasePython.vectorvectorB_size(self)


    def swap(self, v: 'vectorvectorB') -> "void":
        """swap(vectorvectorB self, vectorvectorB v)"""
        return _pyBasePython.vectorvectorB_swap(self, v)


    def begin(self) -> "std::vector< std::vector< bool > >::iterator":
        """begin(vectorvectorB self) -> std::vector< std::vector< bool > >::iterator"""
        return _pyBasePython.vectorvectorB_begin(self)


    def end(self) -> "std::vector< std::vector< bool > >::iterator":
        """end(vectorvectorB self) -> std::vector< std::vector< bool > >::iterator"""
        return _pyBasePython.vectorvectorB_end(self)


    def rbegin(self) -> "std::vector< std::vector< bool > >::reverse_iterator":
        """rbegin(vectorvectorB self) -> std::vector< std::vector< bool > >::reverse_iterator"""
        return _pyBasePython.vectorvectorB_rbegin(self)


    def rend(self) -> "std::vector< std::vector< bool > >::reverse_iterator":
        """rend(vectorvectorB self) -> std::vector< std::vector< bool > >::reverse_iterator"""
        return _pyBasePython.vectorvectorB_rend(self)


    def clear(self) -> "void":
        """clear(vectorvectorB self)"""
        return _pyBasePython.vectorvectorB_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< bool > >::allocator_type":
        """get_allocator(vectorvectorB self) -> std::vector< std::vector< bool > >::allocator_type"""
        return _pyBasePython.vectorvectorB_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorvectorB self)"""
        return _pyBasePython.vectorvectorB_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< bool > >::iterator":
        """
        erase(vectorvectorB self, std::vector< std::vector< bool > >::iterator pos) -> std::vector< std::vector< bool > >::iterator
        erase(vectorvectorB self, std::vector< std::vector< bool > >::iterator first, std::vector< std::vector< bool > >::iterator last) -> std::vector< std::vector< bool > >::iterator
        """
        return _pyBasePython.vectorvectorB_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(bool)>)> self) -> vectorvectorB
        __init__(std::vector<(std::vector<(bool)>)> self, vectorvectorB arg2) -> vectorvectorB
        __init__(std::vector<(std::vector<(bool)>)> self, std::vector< std::vector< bool > >::size_type size) -> vectorvectorB
        __init__(std::vector<(std::vector<(bool)>)> self, std::vector< std::vector< bool > >::size_type size, vectorB value) -> vectorvectorB
        """
        _pyBasePython.vectorvectorB_swiginit(self, _pyBasePython.new_vectorvectorB(*args))

    def push_back(self, x: 'vectorB') -> "void":
        """push_back(vectorvectorB self, vectorB x)"""
        return _pyBasePython.vectorvectorB_push_back(self, x)


    def front(self) -> "std::vector< std::vector< bool > >::value_type const &":
        """front(vectorvectorB self) -> vectorB"""
        return _pyBasePython.vectorvectorB_front(self)


    def back(self) -> "std::vector< std::vector< bool > >::value_type const &":
        """back(vectorvectorB self) -> vectorB"""
        return _pyBasePython.vectorvectorB_back(self)


    def assign(self, n: 'std::vector< std::vector< bool > >::size_type', x: 'vectorB') -> "void":
        """assign(vectorvectorB self, std::vector< std::vector< bool > >::size_type n, vectorB x)"""
        return _pyBasePython.vectorvectorB_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorvectorB self, std::vector< std::vector< bool > >::size_type new_size)
        resize(vectorvectorB self, std::vector< std::vector< bool > >::size_type new_size, vectorB x)
        """
        return _pyBasePython.vectorvectorB_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorvectorB self, std::vector< std::vector< bool > >::iterator pos, vectorB x) -> std::vector< std::vector< bool > >::iterator
        insert(vectorvectorB self, std::vector< std::vector< bool > >::iterator pos, std::vector< std::vector< bool > >::size_type n, vectorB x)
        """
        return _pyBasePython.vectorvectorB_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< bool > >::size_type') -> "void":
        """reserve(vectorvectorB self, std::vector< std::vector< bool > >::size_type n)"""
        return _pyBasePython.vectorvectorB_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< bool > >::size_type":
        """capacity(vectorvectorB self) -> std::vector< std::vector< bool > >::size_type"""
        return _pyBasePython.vectorvectorB_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorB
vectorvectorB.iterator = new_instancemethod(_pyBasePython.vectorvectorB_iterator, None, vectorvectorB)
vectorvectorB.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorB___nonzero__, None, vectorvectorB)
vectorvectorB.__bool__ = new_instancemethod(_pyBasePython.vectorvectorB___bool__, None, vectorvectorB)
vectorvectorB.__len__ = new_instancemethod(_pyBasePython.vectorvectorB___len__, None, vectorvectorB)
vectorvectorB.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorB___getslice__, None, vectorvectorB)
vectorvectorB.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorB___setslice__, None, vectorvectorB)
vectorvectorB.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorB___delslice__, None, vectorvectorB)
vectorvectorB.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorB___delitem__, None, vectorvectorB)
vectorvectorB.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorB___getitem__, None, vectorvectorB)
vectorvectorB.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorB___setitem__, None, vectorvectorB)
vectorvectorB.pop = new_instancemethod(_pyBasePython.vectorvectorB_pop, None, vectorvectorB)
vectorvectorB.append = new_instancemethod(_pyBasePython.vectorvectorB_append, None, vectorvectorB)
vectorvectorB.empty = new_instancemethod(_pyBasePython.vectorvectorB_empty, None, vectorvectorB)
vectorvectorB.size = new_instancemethod(_pyBasePython.vectorvectorB_size, None, vectorvectorB)
vectorvectorB.swap = new_instancemethod(_pyBasePython.vectorvectorB_swap, None, vectorvectorB)
vectorvectorB.begin = new_instancemethod(_pyBasePython.vectorvectorB_begin, None, vectorvectorB)
vectorvectorB.end = new_instancemethod(_pyBasePython.vectorvectorB_end, None, vectorvectorB)
vectorvectorB.rbegin = new_instancemethod(_pyBasePython.vectorvectorB_rbegin, None, vectorvectorB)
vectorvectorB.rend = new_instancemethod(_pyBasePython.vectorvectorB_rend, None, vectorvectorB)
vectorvectorB.clear = new_instancemethod(_pyBasePython.vectorvectorB_clear, None, vectorvectorB)
vectorvectorB.get_allocator = new_instancemethod(_pyBasePython.vectorvectorB_get_allocator, None, vectorvectorB)
vectorvectorB.pop_back = new_instancemethod(_pyBasePython.vectorvectorB_pop_back, None, vectorvectorB)
vectorvectorB.erase = new_instancemethod(_pyBasePython.vectorvectorB_erase, None, vectorvectorB)
vectorvectorB.push_back = new_instancemethod(_pyBasePython.vectorvectorB_push_back, None, vectorvectorB)
vectorvectorB.front = new_instancemethod(_pyBasePython.vectorvectorB_front, None, vectorvectorB)
vectorvectorB.back = new_instancemethod(_pyBasePython.vectorvectorB_back, None, vectorvectorB)
vectorvectorB.assign = new_instancemethod(_pyBasePython.vectorvectorB_assign, None, vectorvectorB)
vectorvectorB.resize = new_instancemethod(_pyBasePython.vectorvectorB_resize, None, vectorvectorB)
vectorvectorB.insert = new_instancemethod(_pyBasePython.vectorvectorB_insert, None, vectorvectorB)
vectorvectorB.reserve = new_instancemethod(_pyBasePython.vectorvectorB_reserve, None, vectorvectorB)
vectorvectorB.capacity = new_instancemethod(_pyBasePython.vectorvectorB_capacity, None, vectorvectorB)
vectorvectorB_swigregister = _pyBasePython.vectorvectorB_swigregister
vectorvectorB_swigregister(vectorvectorB)

class vectorI(object):
    """Proxy of C++ std::vector<(int)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorI self) -> SwigPyIterator"""
        return _pyBasePython.vectorI_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorI self) -> bool"""
        return _pyBasePython.vectorI___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorI self) -> bool"""
        return _pyBasePython.vectorI___bool__(self)


    def __len__(self) -> "std::vector< int >::size_type":
        """__len__(vectorI self) -> std::vector< int >::size_type"""
        return _pyBasePython.vectorI___len__(self)


    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        """__getslice__(vectorI self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vectorI"""
        return _pyBasePython.vectorI___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorI self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(vectorI self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vectorI v)
        """
        return _pyBasePython.vectorI___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        """__delslice__(vectorI self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _pyBasePython.vectorI___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorI self, std::vector< int >::difference_type i)
        __delitem__(vectorI self, PySliceObject * slice)
        """
        return _pyBasePython.vectorI___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        """
        __getitem__(vectorI self, PySliceObject * slice) -> vectorI
        __getitem__(vectorI self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _pyBasePython.vectorI___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorI self, PySliceObject * slice, vectorI v)
        __setitem__(vectorI self, PySliceObject * slice)
        __setitem__(vectorI self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _pyBasePython.vectorI___setitem__(self, *args)


    def pop(self) -> "std::vector< int >::value_type":
        """pop(vectorI self) -> std::vector< int >::value_type"""
        return _pyBasePython.vectorI_pop(self)


    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        """append(vectorI self, std::vector< int >::value_type const & x)"""
        return _pyBasePython.vectorI_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorI self) -> bool"""
        return _pyBasePython.vectorI_empty(self)


    def size(self) -> "std::vector< int >::size_type":
        """size(vectorI self) -> std::vector< int >::size_type"""
        return _pyBasePython.vectorI_size(self)


    def swap(self, v: 'vectorI') -> "void":
        """swap(vectorI self, vectorI v)"""
        return _pyBasePython.vectorI_swap(self, v)


    def begin(self) -> "std::vector< int >::iterator":
        """begin(vectorI self) -> std::vector< int >::iterator"""
        return _pyBasePython.vectorI_begin(self)


    def end(self) -> "std::vector< int >::iterator":
        """end(vectorI self) -> std::vector< int >::iterator"""
        return _pyBasePython.vectorI_end(self)


    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        """rbegin(vectorI self) -> std::vector< int >::reverse_iterator"""
        return _pyBasePython.vectorI_rbegin(self)


    def rend(self) -> "std::vector< int >::reverse_iterator":
        """rend(vectorI self) -> std::vector< int >::reverse_iterator"""
        return _pyBasePython.vectorI_rend(self)


    def clear(self) -> "void":
        """clear(vectorI self)"""
        return _pyBasePython.vectorI_clear(self)


    def get_allocator(self) -> "std::vector< int >::allocator_type":
        """get_allocator(vectorI self) -> std::vector< int >::allocator_type"""
        return _pyBasePython.vectorI_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorI self)"""
        return _pyBasePython.vectorI_pop_back(self)


    def erase(self, *args) -> "std::vector< int >::iterator":
        """
        erase(vectorI self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vectorI self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _pyBasePython.vectorI_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> vectorI
        __init__(std::vector<(int)> self, vectorI arg2) -> vectorI
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> vectorI
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vectorI
        """
        _pyBasePython.vectorI_swiginit(self, _pyBasePython.new_vectorI(*args))

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        """push_back(vectorI self, std::vector< int >::value_type const & x)"""
        return _pyBasePython.vectorI_push_back(self, x)


    def front(self) -> "std::vector< int >::value_type const &":
        """front(vectorI self) -> std::vector< int >::value_type const &"""
        return _pyBasePython.vectorI_front(self)


    def back(self) -> "std::vector< int >::value_type const &":
        """back(vectorI self) -> std::vector< int >::value_type const &"""
        return _pyBasePython.vectorI_back(self)


    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        """assign(vectorI self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _pyBasePython.vectorI_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorI self, std::vector< int >::size_type new_size)
        resize(vectorI self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _pyBasePython.vectorI_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorI self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vectorI self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _pyBasePython.vectorI_insert(self, *args)


    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        """reserve(vectorI self, std::vector< int >::size_type n)"""
        return _pyBasePython.vectorI_reserve(self, n)


    def capacity(self) -> "std::vector< int >::size_type":
        """capacity(vectorI self) -> std::vector< int >::size_type"""
        return _pyBasePython.vectorI_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorI
vectorI.iterator = new_instancemethod(_pyBasePython.vectorI_iterator, None, vectorI)
vectorI.__nonzero__ = new_instancemethod(_pyBasePython.vectorI___nonzero__, None, vectorI)
vectorI.__bool__ = new_instancemethod(_pyBasePython.vectorI___bool__, None, vectorI)
vectorI.__len__ = new_instancemethod(_pyBasePython.vectorI___len__, None, vectorI)
vectorI.__getslice__ = new_instancemethod(_pyBasePython.vectorI___getslice__, None, vectorI)
vectorI.__setslice__ = new_instancemethod(_pyBasePython.vectorI___setslice__, None, vectorI)
vectorI.__delslice__ = new_instancemethod(_pyBasePython.vectorI___delslice__, None, vectorI)
vectorI.__delitem__ = new_instancemethod(_pyBasePython.vectorI___delitem__, None, vectorI)
vectorI.__getitem__ = new_instancemethod(_pyBasePython.vectorI___getitem__, None, vectorI)
vectorI.__setitem__ = new_instancemethod(_pyBasePython.vectorI___setitem__, None, vectorI)
vectorI.pop = new_instancemethod(_pyBasePython.vectorI_pop, None, vectorI)
vectorI.append = new_instancemethod(_pyBasePython.vectorI_append, None, vectorI)
vectorI.empty = new_instancemethod(_pyBasePython.vectorI_empty, None, vectorI)
vectorI.size = new_instancemethod(_pyBasePython.vectorI_size, None, vectorI)
vectorI.swap = new_instancemethod(_pyBasePython.vectorI_swap, None, vectorI)
vectorI.begin = new_instancemethod(_pyBasePython.vectorI_begin, None, vectorI)
vectorI.end = new_instancemethod(_pyBasePython.vectorI_end, None, vectorI)
vectorI.rbegin = new_instancemethod(_pyBasePython.vectorI_rbegin, None, vectorI)
vectorI.rend = new_instancemethod(_pyBasePython.vectorI_rend, None, vectorI)
vectorI.clear = new_instancemethod(_pyBasePython.vectorI_clear, None, vectorI)
vectorI.get_allocator = new_instancemethod(_pyBasePython.vectorI_get_allocator, None, vectorI)
vectorI.pop_back = new_instancemethod(_pyBasePython.vectorI_pop_back, None, vectorI)
vectorI.erase = new_instancemethod(_pyBasePython.vectorI_erase, None, vectorI)
vectorI.push_back = new_instancemethod(_pyBasePython.vectorI_push_back, None, vectorI)
vectorI.front = new_instancemethod(_pyBasePython.vectorI_front, None, vectorI)
vectorI.back = new_instancemethod(_pyBasePython.vectorI_back, None, vectorI)
vectorI.assign = new_instancemethod(_pyBasePython.vectorI_assign, None, vectorI)
vectorI.resize = new_instancemethod(_pyBasePython.vectorI_resize, None, vectorI)
vectorI.insert = new_instancemethod(_pyBasePython.vectorI_insert, None, vectorI)
vectorI.reserve = new_instancemethod(_pyBasePython.vectorI_reserve, None, vectorI)
vectorI.capacity = new_instancemethod(_pyBasePython.vectorI_capacity, None, vectorI)
vectorI_swigregister = _pyBasePython.vectorI_swigregister
vectorI_swigregister(vectorI)

class vectorvectorI(object):
    """Proxy of C++ std::vector<(std::vector<(int)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorvectorI self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorI_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorvectorI self) -> bool"""
        return _pyBasePython.vectorvectorI___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorvectorI self) -> bool"""
        return _pyBasePython.vectorvectorI___bool__(self)


    def __len__(self) -> "std::vector< std::vector< int > >::size_type":
        """__len__(vectorvectorI self) -> std::vector< std::vector< int > >::size_type"""
        return _pyBasePython.vectorvectorI___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< int > >::difference_type', j: 'std::vector< std::vector< int > >::difference_type') -> "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *":
        """__getslice__(vectorvectorI self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j) -> vectorvectorI"""
        return _pyBasePython.vectorvectorI___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorvectorI self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)
        __setslice__(vectorvectorI self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j, vectorvectorI v)
        """
        return _pyBasePython.vectorvectorI___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< int > >::difference_type', j: 'std::vector< std::vector< int > >::difference_type') -> "void":
        """__delslice__(vectorvectorI self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)"""
        return _pyBasePython.vectorvectorI___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorvectorI self, std::vector< std::vector< int > >::difference_type i)
        __delitem__(vectorvectorI self, PySliceObject * slice)
        """
        return _pyBasePython.vectorvectorI___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< int > >::value_type const &":
        """
        __getitem__(vectorvectorI self, PySliceObject * slice) -> vectorvectorI
        __getitem__(vectorvectorI self, std::vector< std::vector< int > >::difference_type i) -> vectorI
        """
        return _pyBasePython.vectorvectorI___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorvectorI self, PySliceObject * slice, vectorvectorI v)
        __setitem__(vectorvectorI self, PySliceObject * slice)
        __setitem__(vectorvectorI self, std::vector< std::vector< int > >::difference_type i, vectorI x)
        """
        return _pyBasePython.vectorvectorI___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< int > >::value_type":
        """pop(vectorvectorI self) -> vectorI"""
        return _pyBasePython.vectorvectorI_pop(self)


    def append(self, x: 'vectorI') -> "void":
        """append(vectorvectorI self, vectorI x)"""
        return _pyBasePython.vectorvectorI_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorvectorI self) -> bool"""
        return _pyBasePython.vectorvectorI_empty(self)


    def size(self) -> "std::vector< std::vector< int > >::size_type":
        """size(vectorvectorI self) -> std::vector< std::vector< int > >::size_type"""
        return _pyBasePython.vectorvectorI_size(self)


    def swap(self, v: 'vectorvectorI') -> "void":
        """swap(vectorvectorI self, vectorvectorI v)"""
        return _pyBasePython.vectorvectorI_swap(self, v)


    def begin(self) -> "std::vector< std::vector< int > >::iterator":
        """begin(vectorvectorI self) -> std::vector< std::vector< int > >::iterator"""
        return _pyBasePython.vectorvectorI_begin(self)


    def end(self) -> "std::vector< std::vector< int > >::iterator":
        """end(vectorvectorI self) -> std::vector< std::vector< int > >::iterator"""
        return _pyBasePython.vectorvectorI_end(self)


    def rbegin(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        """rbegin(vectorvectorI self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _pyBasePython.vectorvectorI_rbegin(self)


    def rend(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        """rend(vectorvectorI self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _pyBasePython.vectorvectorI_rend(self)


    def clear(self) -> "void":
        """clear(vectorvectorI self)"""
        return _pyBasePython.vectorvectorI_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< int > >::allocator_type":
        """get_allocator(vectorvectorI self) -> std::vector< std::vector< int > >::allocator_type"""
        return _pyBasePython.vectorvectorI_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorvectorI self)"""
        return _pyBasePython.vectorvectorI_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< int > >::iterator":
        """
        erase(vectorvectorI self, std::vector< std::vector< int > >::iterator pos) -> std::vector< std::vector< int > >::iterator
        erase(vectorvectorI self, std::vector< std::vector< int > >::iterator first, std::vector< std::vector< int > >::iterator last) -> std::vector< std::vector< int > >::iterator
        """
        return _pyBasePython.vectorvectorI_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(int)>)> self) -> vectorvectorI
        __init__(std::vector<(std::vector<(int)>)> self, vectorvectorI arg2) -> vectorvectorI
        __init__(std::vector<(std::vector<(int)>)> self, std::vector< std::vector< int > >::size_type size) -> vectorvectorI
        __init__(std::vector<(std::vector<(int)>)> self, std::vector< std::vector< int > >::size_type size, vectorI value) -> vectorvectorI
        """
        _pyBasePython.vectorvectorI_swiginit(self, _pyBasePython.new_vectorvectorI(*args))

    def push_back(self, x: 'vectorI') -> "void":
        """push_back(vectorvectorI self, vectorI x)"""
        return _pyBasePython.vectorvectorI_push_back(self, x)


    def front(self) -> "std::vector< std::vector< int > >::value_type const &":
        """front(vectorvectorI self) -> vectorI"""
        return _pyBasePython.vectorvectorI_front(self)


    def back(self) -> "std::vector< std::vector< int > >::value_type const &":
        """back(vectorvectorI self) -> vectorI"""
        return _pyBasePython.vectorvectorI_back(self)


    def assign(self, n: 'std::vector< std::vector< int > >::size_type', x: 'vectorI') -> "void":
        """assign(vectorvectorI self, std::vector< std::vector< int > >::size_type n, vectorI x)"""
        return _pyBasePython.vectorvectorI_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorvectorI self, std::vector< std::vector< int > >::size_type new_size)
        resize(vectorvectorI self, std::vector< std::vector< int > >::size_type new_size, vectorI x)
        """
        return _pyBasePython.vectorvectorI_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorvectorI self, std::vector< std::vector< int > >::iterator pos, vectorI x) -> std::vector< std::vector< int > >::iterator
        insert(vectorvectorI self, std::vector< std::vector< int > >::iterator pos, std::vector< std::vector< int > >::size_type n, vectorI x)
        """
        return _pyBasePython.vectorvectorI_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< int > >::size_type') -> "void":
        """reserve(vectorvectorI self, std::vector< std::vector< int > >::size_type n)"""
        return _pyBasePython.vectorvectorI_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< int > >::size_type":
        """capacity(vectorvectorI self) -> std::vector< std::vector< int > >::size_type"""
        return _pyBasePython.vectorvectorI_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorI
vectorvectorI.iterator = new_instancemethod(_pyBasePython.vectorvectorI_iterator, None, vectorvectorI)
vectorvectorI.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorI___nonzero__, None, vectorvectorI)
vectorvectorI.__bool__ = new_instancemethod(_pyBasePython.vectorvectorI___bool__, None, vectorvectorI)
vectorvectorI.__len__ = new_instancemethod(_pyBasePython.vectorvectorI___len__, None, vectorvectorI)
vectorvectorI.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorI___getslice__, None, vectorvectorI)
vectorvectorI.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorI___setslice__, None, vectorvectorI)
vectorvectorI.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorI___delslice__, None, vectorvectorI)
vectorvectorI.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorI___delitem__, None, vectorvectorI)
vectorvectorI.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorI___getitem__, None, vectorvectorI)
vectorvectorI.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorI___setitem__, None, vectorvectorI)
vectorvectorI.pop = new_instancemethod(_pyBasePython.vectorvectorI_pop, None, vectorvectorI)
vectorvectorI.append = new_instancemethod(_pyBasePython.vectorvectorI_append, None, vectorvectorI)
vectorvectorI.empty = new_instancemethod(_pyBasePython.vectorvectorI_empty, None, vectorvectorI)
vectorvectorI.size = new_instancemethod(_pyBasePython.vectorvectorI_size, None, vectorvectorI)
vectorvectorI.swap = new_instancemethod(_pyBasePython.vectorvectorI_swap, None, vectorvectorI)
vectorvectorI.begin = new_instancemethod(_pyBasePython.vectorvectorI_begin, None, vectorvectorI)
vectorvectorI.end = new_instancemethod(_pyBasePython.vectorvectorI_end, None, vectorvectorI)
vectorvectorI.rbegin = new_instancemethod(_pyBasePython.vectorvectorI_rbegin, None, vectorvectorI)
vectorvectorI.rend = new_instancemethod(_pyBasePython.vectorvectorI_rend, None, vectorvectorI)
vectorvectorI.clear = new_instancemethod(_pyBasePython.vectorvectorI_clear, None, vectorvectorI)
vectorvectorI.get_allocator = new_instancemethod(_pyBasePython.vectorvectorI_get_allocator, None, vectorvectorI)
vectorvectorI.pop_back = new_instancemethod(_pyBasePython.vectorvectorI_pop_back, None, vectorvectorI)
vectorvectorI.erase = new_instancemethod(_pyBasePython.vectorvectorI_erase, None, vectorvectorI)
vectorvectorI.push_back = new_instancemethod(_pyBasePython.vectorvectorI_push_back, None, vectorvectorI)
vectorvectorI.front = new_instancemethod(_pyBasePython.vectorvectorI_front, None, vectorvectorI)
vectorvectorI.back = new_instancemethod(_pyBasePython.vectorvectorI_back, None, vectorvectorI)
vectorvectorI.assign = new_instancemethod(_pyBasePython.vectorvectorI_assign, None, vectorvectorI)
vectorvectorI.resize = new_instancemethod(_pyBasePython.vectorvectorI_resize, None, vectorvectorI)
vectorvectorI.insert = new_instancemethod(_pyBasePython.vectorvectorI_insert, None, vectorvectorI)
vectorvectorI.reserve = new_instancemethod(_pyBasePython.vectorvectorI_reserve, None, vectorvectorI)
vectorvectorI.capacity = new_instancemethod(_pyBasePython.vectorvectorI_capacity, None, vectorvectorI)
vectorvectorI_swigregister = _pyBasePython.vectorvectorI_swigregister
vectorvectorI_swigregister(vectorvectorI)

class vectorUC(object):
    """Proxy of C++ std::vector<(unsigned char)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorUC self) -> SwigPyIterator"""
        return _pyBasePython.vectorUC_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorUC self) -> bool"""
        return _pyBasePython.vectorUC___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorUC self) -> bool"""
        return _pyBasePython.vectorUC___bool__(self)


    def __len__(self) -> "std::vector< unsigned char >::size_type":
        """__len__(vectorUC self) -> std::vector< unsigned char >::size_type"""
        return _pyBasePython.vectorUC___len__(self)


    def __getslice__(self, i: 'std::vector< unsigned char >::difference_type', j: 'std::vector< unsigned char >::difference_type') -> "std::vector< unsigned char,std::allocator< unsigned char > > *":
        """__getslice__(vectorUC self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j) -> vectorUC"""
        return _pyBasePython.vectorUC___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorUC self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)
        __setslice__(vectorUC self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j, vectorUC v)
        """
        return _pyBasePython.vectorUC___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< unsigned char >::difference_type', j: 'std::vector< unsigned char >::difference_type') -> "void":
        """__delslice__(vectorUC self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)"""
        return _pyBasePython.vectorUC___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorUC self, std::vector< unsigned char >::difference_type i)
        __delitem__(vectorUC self, PySliceObject * slice)
        """
        return _pyBasePython.vectorUC___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< unsigned char >::value_type const &":
        """
        __getitem__(vectorUC self, PySliceObject * slice) -> vectorUC
        __getitem__(vectorUC self, std::vector< unsigned char >::difference_type i) -> std::vector< unsigned char >::value_type const &
        """
        return _pyBasePython.vectorUC___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorUC self, PySliceObject * slice, vectorUC v)
        __setitem__(vectorUC self, PySliceObject * slice)
        __setitem__(vectorUC self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::value_type const & x)
        """
        return _pyBasePython.vectorUC___setitem__(self, *args)


    def pop(self) -> "std::vector< unsigned char >::value_type":
        """pop(vectorUC self) -> std::vector< unsigned char >::value_type"""
        return _pyBasePython.vectorUC_pop(self)


    def append(self, x: 'std::vector< unsigned char >::value_type const &') -> "void":
        """append(vectorUC self, std::vector< unsigned char >::value_type const & x)"""
        return _pyBasePython.vectorUC_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorUC self) -> bool"""
        return _pyBasePython.vectorUC_empty(self)


    def size(self) -> "std::vector< unsigned char >::size_type":
        """size(vectorUC self) -> std::vector< unsigned char >::size_type"""
        return _pyBasePython.vectorUC_size(self)


    def swap(self, v: 'vectorUC') -> "void":
        """swap(vectorUC self, vectorUC v)"""
        return _pyBasePython.vectorUC_swap(self, v)


    def begin(self) -> "std::vector< unsigned char >::iterator":
        """begin(vectorUC self) -> std::vector< unsigned char >::iterator"""
        return _pyBasePython.vectorUC_begin(self)


    def end(self) -> "std::vector< unsigned char >::iterator":
        """end(vectorUC self) -> std::vector< unsigned char >::iterator"""
        return _pyBasePython.vectorUC_end(self)


    def rbegin(self) -> "std::vector< unsigned char >::reverse_iterator":
        """rbegin(vectorUC self) -> std::vector< unsigned char >::reverse_iterator"""
        return _pyBasePython.vectorUC_rbegin(self)


    def rend(self) -> "std::vector< unsigned char >::reverse_iterator":
        """rend(vectorUC self) -> std::vector< unsigned char >::reverse_iterator"""
        return _pyBasePython.vectorUC_rend(self)


    def clear(self) -> "void":
        """clear(vectorUC self)"""
        return _pyBasePython.vectorUC_clear(self)


    def get_allocator(self) -> "std::vector< unsigned char >::allocator_type":
        """get_allocator(vectorUC self) -> std::vector< unsigned char >::allocator_type"""
        return _pyBasePython.vectorUC_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorUC self)"""
        return _pyBasePython.vectorUC_pop_back(self)


    def erase(self, *args) -> "std::vector< unsigned char >::iterator":
        """
        erase(vectorUC self, std::vector< unsigned char >::iterator pos) -> std::vector< unsigned char >::iterator
        erase(vectorUC self, std::vector< unsigned char >::iterator first, std::vector< unsigned char >::iterator last) -> std::vector< unsigned char >::iterator
        """
        return _pyBasePython.vectorUC_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(unsigned char)> self) -> vectorUC
        __init__(std::vector<(unsigned char)> self, vectorUC arg2) -> vectorUC
        __init__(std::vector<(unsigned char)> self, std::vector< unsigned char >::size_type size) -> vectorUC
        __init__(std::vector<(unsigned char)> self, std::vector< unsigned char >::size_type size, std::vector< unsigned char >::value_type const & value) -> vectorUC
        """
        _pyBasePython.vectorUC_swiginit(self, _pyBasePython.new_vectorUC(*args))

    def push_back(self, x: 'std::vector< unsigned char >::value_type const &') -> "void":
        """push_back(vectorUC self, std::vector< unsigned char >::value_type const & x)"""
        return _pyBasePython.vectorUC_push_back(self, x)


    def front(self) -> "std::vector< unsigned char >::value_type const &":
        """front(vectorUC self) -> std::vector< unsigned char >::value_type const &"""
        return _pyBasePython.vectorUC_front(self)


    def back(self) -> "std::vector< unsigned char >::value_type const &":
        """back(vectorUC self) -> std::vector< unsigned char >::value_type const &"""
        return _pyBasePython.vectorUC_back(self)


    def assign(self, n: 'std::vector< unsigned char >::size_type', x: 'std::vector< unsigned char >::value_type const &') -> "void":
        """assign(vectorUC self, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)"""
        return _pyBasePython.vectorUC_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorUC self, std::vector< unsigned char >::size_type new_size)
        resize(vectorUC self, std::vector< unsigned char >::size_type new_size, std::vector< unsigned char >::value_type const & x)
        """
        return _pyBasePython.vectorUC_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorUC self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::value_type const & x) -> std::vector< unsigned char >::iterator
        insert(vectorUC self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)
        """
        return _pyBasePython.vectorUC_insert(self, *args)


    def reserve(self, n: 'std::vector< unsigned char >::size_type') -> "void":
        """reserve(vectorUC self, std::vector< unsigned char >::size_type n)"""
        return _pyBasePython.vectorUC_reserve(self, n)


    def capacity(self) -> "std::vector< unsigned char >::size_type":
        """capacity(vectorUC self) -> std::vector< unsigned char >::size_type"""
        return _pyBasePython.vectorUC_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorUC
vectorUC.iterator = new_instancemethod(_pyBasePython.vectorUC_iterator, None, vectorUC)
vectorUC.__nonzero__ = new_instancemethod(_pyBasePython.vectorUC___nonzero__, None, vectorUC)
vectorUC.__bool__ = new_instancemethod(_pyBasePython.vectorUC___bool__, None, vectorUC)
vectorUC.__len__ = new_instancemethod(_pyBasePython.vectorUC___len__, None, vectorUC)
vectorUC.__getslice__ = new_instancemethod(_pyBasePython.vectorUC___getslice__, None, vectorUC)
vectorUC.__setslice__ = new_instancemethod(_pyBasePython.vectorUC___setslice__, None, vectorUC)
vectorUC.__delslice__ = new_instancemethod(_pyBasePython.vectorUC___delslice__, None, vectorUC)
vectorUC.__delitem__ = new_instancemethod(_pyBasePython.vectorUC___delitem__, None, vectorUC)
vectorUC.__getitem__ = new_instancemethod(_pyBasePython.vectorUC___getitem__, None, vectorUC)
vectorUC.__setitem__ = new_instancemethod(_pyBasePython.vectorUC___setitem__, None, vectorUC)
vectorUC.pop = new_instancemethod(_pyBasePython.vectorUC_pop, None, vectorUC)
vectorUC.append = new_instancemethod(_pyBasePython.vectorUC_append, None, vectorUC)
vectorUC.empty = new_instancemethod(_pyBasePython.vectorUC_empty, None, vectorUC)
vectorUC.size = new_instancemethod(_pyBasePython.vectorUC_size, None, vectorUC)
vectorUC.swap = new_instancemethod(_pyBasePython.vectorUC_swap, None, vectorUC)
vectorUC.begin = new_instancemethod(_pyBasePython.vectorUC_begin, None, vectorUC)
vectorUC.end = new_instancemethod(_pyBasePython.vectorUC_end, None, vectorUC)
vectorUC.rbegin = new_instancemethod(_pyBasePython.vectorUC_rbegin, None, vectorUC)
vectorUC.rend = new_instancemethod(_pyBasePython.vectorUC_rend, None, vectorUC)
vectorUC.clear = new_instancemethod(_pyBasePython.vectorUC_clear, None, vectorUC)
vectorUC.get_allocator = new_instancemethod(_pyBasePython.vectorUC_get_allocator, None, vectorUC)
vectorUC.pop_back = new_instancemethod(_pyBasePython.vectorUC_pop_back, None, vectorUC)
vectorUC.erase = new_instancemethod(_pyBasePython.vectorUC_erase, None, vectorUC)
vectorUC.push_back = new_instancemethod(_pyBasePython.vectorUC_push_back, None, vectorUC)
vectorUC.front = new_instancemethod(_pyBasePython.vectorUC_front, None, vectorUC)
vectorUC.back = new_instancemethod(_pyBasePython.vectorUC_back, None, vectorUC)
vectorUC.assign = new_instancemethod(_pyBasePython.vectorUC_assign, None, vectorUC)
vectorUC.resize = new_instancemethod(_pyBasePython.vectorUC_resize, None, vectorUC)
vectorUC.insert = new_instancemethod(_pyBasePython.vectorUC_insert, None, vectorUC)
vectorUC.reserve = new_instancemethod(_pyBasePython.vectorUC_reserve, None, vectorUC)
vectorUC.capacity = new_instancemethod(_pyBasePython.vectorUC_capacity, None, vectorUC)
vectorUC_swigregister = _pyBasePython.vectorUC_swigregister
vectorUC_swigregister(vectorUC)

class vectorvectorUC(object):
    """Proxy of C++ std::vector<(std::vector<(unsigned char)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorvectorUC self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorUC_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorvectorUC self) -> bool"""
        return _pyBasePython.vectorvectorUC___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorvectorUC self) -> bool"""
        return _pyBasePython.vectorvectorUC___bool__(self)


    def __len__(self) -> "std::vector< std::vector< unsigned char > >::size_type":
        """__len__(vectorvectorUC self) -> std::vector< std::vector< unsigned char > >::size_type"""
        return _pyBasePython.vectorvectorUC___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< unsigned char > >::difference_type', j: 'std::vector< std::vector< unsigned char > >::difference_type') -> "std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > *":
        """__getslice__(vectorvectorUC self, std::vector< std::vector< unsigned char > >::difference_type i, std::vector< std::vector< unsigned char > >::difference_type j) -> vectorvectorUC"""
        return _pyBasePython.vectorvectorUC___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorvectorUC self, std::vector< std::vector< unsigned char > >::difference_type i, std::vector< std::vector< unsigned char > >::difference_type j)
        __setslice__(vectorvectorUC self, std::vector< std::vector< unsigned char > >::difference_type i, std::vector< std::vector< unsigned char > >::difference_type j, vectorvectorUC v)
        """
        return _pyBasePython.vectorvectorUC___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< unsigned char > >::difference_type', j: 'std::vector< std::vector< unsigned char > >::difference_type') -> "void":
        """__delslice__(vectorvectorUC self, std::vector< std::vector< unsigned char > >::difference_type i, std::vector< std::vector< unsigned char > >::difference_type j)"""
        return _pyBasePython.vectorvectorUC___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorvectorUC self, std::vector< std::vector< unsigned char > >::difference_type i)
        __delitem__(vectorvectorUC self, PySliceObject * slice)
        """
        return _pyBasePython.vectorvectorUC___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< unsigned char > >::value_type const &":
        """
        __getitem__(vectorvectorUC self, PySliceObject * slice) -> vectorvectorUC
        __getitem__(vectorvectorUC self, std::vector< std::vector< unsigned char > >::difference_type i) -> vectorUC
        """
        return _pyBasePython.vectorvectorUC___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorvectorUC self, PySliceObject * slice, vectorvectorUC v)
        __setitem__(vectorvectorUC self, PySliceObject * slice)
        __setitem__(vectorvectorUC self, std::vector< std::vector< unsigned char > >::difference_type i, vectorUC x)
        """
        return _pyBasePython.vectorvectorUC___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< unsigned char > >::value_type":
        """pop(vectorvectorUC self) -> vectorUC"""
        return _pyBasePython.vectorvectorUC_pop(self)


    def append(self, x: 'vectorUC') -> "void":
        """append(vectorvectorUC self, vectorUC x)"""
        return _pyBasePython.vectorvectorUC_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorvectorUC self) -> bool"""
        return _pyBasePython.vectorvectorUC_empty(self)


    def size(self) -> "std::vector< std::vector< unsigned char > >::size_type":
        """size(vectorvectorUC self) -> std::vector< std::vector< unsigned char > >::size_type"""
        return _pyBasePython.vectorvectorUC_size(self)


    def swap(self, v: 'vectorvectorUC') -> "void":
        """swap(vectorvectorUC self, vectorvectorUC v)"""
        return _pyBasePython.vectorvectorUC_swap(self, v)


    def begin(self) -> "std::vector< std::vector< unsigned char > >::iterator":
        """begin(vectorvectorUC self) -> std::vector< std::vector< unsigned char > >::iterator"""
        return _pyBasePython.vectorvectorUC_begin(self)


    def end(self) -> "std::vector< std::vector< unsigned char > >::iterator":
        """end(vectorvectorUC self) -> std::vector< std::vector< unsigned char > >::iterator"""
        return _pyBasePython.vectorvectorUC_end(self)


    def rbegin(self) -> "std::vector< std::vector< unsigned char > >::reverse_iterator":
        """rbegin(vectorvectorUC self) -> std::vector< std::vector< unsigned char > >::reverse_iterator"""
        return _pyBasePython.vectorvectorUC_rbegin(self)


    def rend(self) -> "std::vector< std::vector< unsigned char > >::reverse_iterator":
        """rend(vectorvectorUC self) -> std::vector< std::vector< unsigned char > >::reverse_iterator"""
        return _pyBasePython.vectorvectorUC_rend(self)


    def clear(self) -> "void":
        """clear(vectorvectorUC self)"""
        return _pyBasePython.vectorvectorUC_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< unsigned char > >::allocator_type":
        """get_allocator(vectorvectorUC self) -> std::vector< std::vector< unsigned char > >::allocator_type"""
        return _pyBasePython.vectorvectorUC_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorvectorUC self)"""
        return _pyBasePython.vectorvectorUC_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< unsigned char > >::iterator":
        """
        erase(vectorvectorUC self, std::vector< std::vector< unsigned char > >::iterator pos) -> std::vector< std::vector< unsigned char > >::iterator
        erase(vectorvectorUC self, std::vector< std::vector< unsigned char > >::iterator first, std::vector< std::vector< unsigned char > >::iterator last) -> std::vector< std::vector< unsigned char > >::iterator
        """
        return _pyBasePython.vectorvectorUC_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(unsigned char)>)> self) -> vectorvectorUC
        __init__(std::vector<(std::vector<(unsigned char)>)> self, vectorvectorUC arg2) -> vectorvectorUC
        __init__(std::vector<(std::vector<(unsigned char)>)> self, std::vector< std::vector< unsigned char > >::size_type size) -> vectorvectorUC
        __init__(std::vector<(std::vector<(unsigned char)>)> self, std::vector< std::vector< unsigned char > >::size_type size, vectorUC value) -> vectorvectorUC
        """
        _pyBasePython.vectorvectorUC_swiginit(self, _pyBasePython.new_vectorvectorUC(*args))

    def push_back(self, x: 'vectorUC') -> "void":
        """push_back(vectorvectorUC self, vectorUC x)"""
        return _pyBasePython.vectorvectorUC_push_back(self, x)


    def front(self) -> "std::vector< std::vector< unsigned char > >::value_type const &":
        """front(vectorvectorUC self) -> vectorUC"""
        return _pyBasePython.vectorvectorUC_front(self)


    def back(self) -> "std::vector< std::vector< unsigned char > >::value_type const &":
        """back(vectorvectorUC self) -> vectorUC"""
        return _pyBasePython.vectorvectorUC_back(self)


    def assign(self, n: 'std::vector< std::vector< unsigned char > >::size_type', x: 'vectorUC') -> "void":
        """assign(vectorvectorUC self, std::vector< std::vector< unsigned char > >::size_type n, vectorUC x)"""
        return _pyBasePython.vectorvectorUC_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorvectorUC self, std::vector< std::vector< unsigned char > >::size_type new_size)
        resize(vectorvectorUC self, std::vector< std::vector< unsigned char > >::size_type new_size, vectorUC x)
        """
        return _pyBasePython.vectorvectorUC_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorvectorUC self, std::vector< std::vector< unsigned char > >::iterator pos, vectorUC x) -> std::vector< std::vector< unsigned char > >::iterator
        insert(vectorvectorUC self, std::vector< std::vector< unsigned char > >::iterator pos, std::vector< std::vector< unsigned char > >::size_type n, vectorUC x)
        """
        return _pyBasePython.vectorvectorUC_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< unsigned char > >::size_type') -> "void":
        """reserve(vectorvectorUC self, std::vector< std::vector< unsigned char > >::size_type n)"""
        return _pyBasePython.vectorvectorUC_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< unsigned char > >::size_type":
        """capacity(vectorvectorUC self) -> std::vector< std::vector< unsigned char > >::size_type"""
        return _pyBasePython.vectorvectorUC_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorUC
vectorvectorUC.iterator = new_instancemethod(_pyBasePython.vectorvectorUC_iterator, None, vectorvectorUC)
vectorvectorUC.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorUC___nonzero__, None, vectorvectorUC)
vectorvectorUC.__bool__ = new_instancemethod(_pyBasePython.vectorvectorUC___bool__, None, vectorvectorUC)
vectorvectorUC.__len__ = new_instancemethod(_pyBasePython.vectorvectorUC___len__, None, vectorvectorUC)
vectorvectorUC.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorUC___getslice__, None, vectorvectorUC)
vectorvectorUC.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorUC___setslice__, None, vectorvectorUC)
vectorvectorUC.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorUC___delslice__, None, vectorvectorUC)
vectorvectorUC.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorUC___delitem__, None, vectorvectorUC)
vectorvectorUC.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorUC___getitem__, None, vectorvectorUC)
vectorvectorUC.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorUC___setitem__, None, vectorvectorUC)
vectorvectorUC.pop = new_instancemethod(_pyBasePython.vectorvectorUC_pop, None, vectorvectorUC)
vectorvectorUC.append = new_instancemethod(_pyBasePython.vectorvectorUC_append, None, vectorvectorUC)
vectorvectorUC.empty = new_instancemethod(_pyBasePython.vectorvectorUC_empty, None, vectorvectorUC)
vectorvectorUC.size = new_instancemethod(_pyBasePython.vectorvectorUC_size, None, vectorvectorUC)
vectorvectorUC.swap = new_instancemethod(_pyBasePython.vectorvectorUC_swap, None, vectorvectorUC)
vectorvectorUC.begin = new_instancemethod(_pyBasePython.vectorvectorUC_begin, None, vectorvectorUC)
vectorvectorUC.end = new_instancemethod(_pyBasePython.vectorvectorUC_end, None, vectorvectorUC)
vectorvectorUC.rbegin = new_instancemethod(_pyBasePython.vectorvectorUC_rbegin, None, vectorvectorUC)
vectorvectorUC.rend = new_instancemethod(_pyBasePython.vectorvectorUC_rend, None, vectorvectorUC)
vectorvectorUC.clear = new_instancemethod(_pyBasePython.vectorvectorUC_clear, None, vectorvectorUC)
vectorvectorUC.get_allocator = new_instancemethod(_pyBasePython.vectorvectorUC_get_allocator, None, vectorvectorUC)
vectorvectorUC.pop_back = new_instancemethod(_pyBasePython.vectorvectorUC_pop_back, None, vectorvectorUC)
vectorvectorUC.erase = new_instancemethod(_pyBasePython.vectorvectorUC_erase, None, vectorvectorUC)
vectorvectorUC.push_back = new_instancemethod(_pyBasePython.vectorvectorUC_push_back, None, vectorvectorUC)
vectorvectorUC.front = new_instancemethod(_pyBasePython.vectorvectorUC_front, None, vectorvectorUC)
vectorvectorUC.back = new_instancemethod(_pyBasePython.vectorvectorUC_back, None, vectorvectorUC)
vectorvectorUC.assign = new_instancemethod(_pyBasePython.vectorvectorUC_assign, None, vectorvectorUC)
vectorvectorUC.resize = new_instancemethod(_pyBasePython.vectorvectorUC_resize, None, vectorvectorUC)
vectorvectorUC.insert = new_instancemethod(_pyBasePython.vectorvectorUC_insert, None, vectorvectorUC)
vectorvectorUC.reserve = new_instancemethod(_pyBasePython.vectorvectorUC_reserve, None, vectorvectorUC)
vectorvectorUC.capacity = new_instancemethod(_pyBasePython.vectorvectorUC_capacity, None, vectorvectorUC)
vectorvectorUC_swigregister = _pyBasePython.vectorvectorUC_swigregister
vectorvectorUC_swigregister(vectorvectorUC)

class vectorUS(object):
    """Proxy of C++ std::vector<(unsigned short)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorUS self) -> SwigPyIterator"""
        return _pyBasePython.vectorUS_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorUS self) -> bool"""
        return _pyBasePython.vectorUS___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorUS self) -> bool"""
        return _pyBasePython.vectorUS___bool__(self)


    def __len__(self) -> "std::vector< unsigned short >::size_type":
        """__len__(vectorUS self) -> std::vector< unsigned short >::size_type"""
        return _pyBasePython.vectorUS___len__(self)


    def __getslice__(self, i: 'std::vector< unsigned short >::difference_type', j: 'std::vector< unsigned short >::difference_type') -> "std::vector< unsigned short,std::allocator< unsigned short > > *":
        """__getslice__(vectorUS self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j) -> vectorUS"""
        return _pyBasePython.vectorUS___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorUS self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j)
        __setslice__(vectorUS self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j, vectorUS v)
        """
        return _pyBasePython.vectorUS___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< unsigned short >::difference_type', j: 'std::vector< unsigned short >::difference_type') -> "void":
        """__delslice__(vectorUS self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j)"""
        return _pyBasePython.vectorUS___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorUS self, std::vector< unsigned short >::difference_type i)
        __delitem__(vectorUS self, PySliceObject * slice)
        """
        return _pyBasePython.vectorUS___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< unsigned short >::value_type const &":
        """
        __getitem__(vectorUS self, PySliceObject * slice) -> vectorUS
        __getitem__(vectorUS self, std::vector< unsigned short >::difference_type i) -> std::vector< unsigned short >::value_type const &
        """
        return _pyBasePython.vectorUS___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorUS self, PySliceObject * slice, vectorUS v)
        __setitem__(vectorUS self, PySliceObject * slice)
        __setitem__(vectorUS self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::value_type const & x)
        """
        return _pyBasePython.vectorUS___setitem__(self, *args)


    def pop(self) -> "std::vector< unsigned short >::value_type":
        """pop(vectorUS self) -> std::vector< unsigned short >::value_type"""
        return _pyBasePython.vectorUS_pop(self)


    def append(self, x: 'std::vector< unsigned short >::value_type const &') -> "void":
        """append(vectorUS self, std::vector< unsigned short >::value_type const & x)"""
        return _pyBasePython.vectorUS_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorUS self) -> bool"""
        return _pyBasePython.vectorUS_empty(self)


    def size(self) -> "std::vector< unsigned short >::size_type":
        """size(vectorUS self) -> std::vector< unsigned short >::size_type"""
        return _pyBasePython.vectorUS_size(self)


    def swap(self, v: 'vectorUS') -> "void":
        """swap(vectorUS self, vectorUS v)"""
        return _pyBasePython.vectorUS_swap(self, v)


    def begin(self) -> "std::vector< unsigned short >::iterator":
        """begin(vectorUS self) -> std::vector< unsigned short >::iterator"""
        return _pyBasePython.vectorUS_begin(self)


    def end(self) -> "std::vector< unsigned short >::iterator":
        """end(vectorUS self) -> std::vector< unsigned short >::iterator"""
        return _pyBasePython.vectorUS_end(self)


    def rbegin(self) -> "std::vector< unsigned short >::reverse_iterator":
        """rbegin(vectorUS self) -> std::vector< unsigned short >::reverse_iterator"""
        return _pyBasePython.vectorUS_rbegin(self)


    def rend(self) -> "std::vector< unsigned short >::reverse_iterator":
        """rend(vectorUS self) -> std::vector< unsigned short >::reverse_iterator"""
        return _pyBasePython.vectorUS_rend(self)


    def clear(self) -> "void":
        """clear(vectorUS self)"""
        return _pyBasePython.vectorUS_clear(self)


    def get_allocator(self) -> "std::vector< unsigned short >::allocator_type":
        """get_allocator(vectorUS self) -> std::vector< unsigned short >::allocator_type"""
        return _pyBasePython.vectorUS_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorUS self)"""
        return _pyBasePython.vectorUS_pop_back(self)


    def erase(self, *args) -> "std::vector< unsigned short >::iterator":
        """
        erase(vectorUS self, std::vector< unsigned short >::iterator pos) -> std::vector< unsigned short >::iterator
        erase(vectorUS self, std::vector< unsigned short >::iterator first, std::vector< unsigned short >::iterator last) -> std::vector< unsigned short >::iterator
        """
        return _pyBasePython.vectorUS_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(unsigned short)> self) -> vectorUS
        __init__(std::vector<(unsigned short)> self, vectorUS arg2) -> vectorUS
        __init__(std::vector<(unsigned short)> self, std::vector< unsigned short >::size_type size) -> vectorUS
        __init__(std::vector<(unsigned short)> self, std::vector< unsigned short >::size_type size, std::vector< unsigned short >::value_type const & value) -> vectorUS
        """
        _pyBasePython.vectorUS_swiginit(self, _pyBasePython.new_vectorUS(*args))

    def push_back(self, x: 'std::vector< unsigned short >::value_type const &') -> "void":
        """push_back(vectorUS self, std::vector< unsigned short >::value_type const & x)"""
        return _pyBasePython.vectorUS_push_back(self, x)


    def front(self) -> "std::vector< unsigned short >::value_type const &":
        """front(vectorUS self) -> std::vector< unsigned short >::value_type const &"""
        return _pyBasePython.vectorUS_front(self)


    def back(self) -> "std::vector< unsigned short >::value_type const &":
        """back(vectorUS self) -> std::vector< unsigned short >::value_type const &"""
        return _pyBasePython.vectorUS_back(self)


    def assign(self, n: 'std::vector< unsigned short >::size_type', x: 'std::vector< unsigned short >::value_type const &') -> "void":
        """assign(vectorUS self, std::vector< unsigned short >::size_type n, std::vector< unsigned short >::value_type const & x)"""
        return _pyBasePython.vectorUS_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorUS self, std::vector< unsigned short >::size_type new_size)
        resize(vectorUS self, std::vector< unsigned short >::size_type new_size, std::vector< unsigned short >::value_type const & x)
        """
        return _pyBasePython.vectorUS_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorUS self, std::vector< unsigned short >::iterator pos, std::vector< unsigned short >::value_type const & x) -> std::vector< unsigned short >::iterator
        insert(vectorUS self, std::vector< unsigned short >::iterator pos, std::vector< unsigned short >::size_type n, std::vector< unsigned short >::value_type const & x)
        """
        return _pyBasePython.vectorUS_insert(self, *args)


    def reserve(self, n: 'std::vector< unsigned short >::size_type') -> "void":
        """reserve(vectorUS self, std::vector< unsigned short >::size_type n)"""
        return _pyBasePython.vectorUS_reserve(self, n)


    def capacity(self) -> "std::vector< unsigned short >::size_type":
        """capacity(vectorUS self) -> std::vector< unsigned short >::size_type"""
        return _pyBasePython.vectorUS_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorUS
vectorUS.iterator = new_instancemethod(_pyBasePython.vectorUS_iterator, None, vectorUS)
vectorUS.__nonzero__ = new_instancemethod(_pyBasePython.vectorUS___nonzero__, None, vectorUS)
vectorUS.__bool__ = new_instancemethod(_pyBasePython.vectorUS___bool__, None, vectorUS)
vectorUS.__len__ = new_instancemethod(_pyBasePython.vectorUS___len__, None, vectorUS)
vectorUS.__getslice__ = new_instancemethod(_pyBasePython.vectorUS___getslice__, None, vectorUS)
vectorUS.__setslice__ = new_instancemethod(_pyBasePython.vectorUS___setslice__, None, vectorUS)
vectorUS.__delslice__ = new_instancemethod(_pyBasePython.vectorUS___delslice__, None, vectorUS)
vectorUS.__delitem__ = new_instancemethod(_pyBasePython.vectorUS___delitem__, None, vectorUS)
vectorUS.__getitem__ = new_instancemethod(_pyBasePython.vectorUS___getitem__, None, vectorUS)
vectorUS.__setitem__ = new_instancemethod(_pyBasePython.vectorUS___setitem__, None, vectorUS)
vectorUS.pop = new_instancemethod(_pyBasePython.vectorUS_pop, None, vectorUS)
vectorUS.append = new_instancemethod(_pyBasePython.vectorUS_append, None, vectorUS)
vectorUS.empty = new_instancemethod(_pyBasePython.vectorUS_empty, None, vectorUS)
vectorUS.size = new_instancemethod(_pyBasePython.vectorUS_size, None, vectorUS)
vectorUS.swap = new_instancemethod(_pyBasePython.vectorUS_swap, None, vectorUS)
vectorUS.begin = new_instancemethod(_pyBasePython.vectorUS_begin, None, vectorUS)
vectorUS.end = new_instancemethod(_pyBasePython.vectorUS_end, None, vectorUS)
vectorUS.rbegin = new_instancemethod(_pyBasePython.vectorUS_rbegin, None, vectorUS)
vectorUS.rend = new_instancemethod(_pyBasePython.vectorUS_rend, None, vectorUS)
vectorUS.clear = new_instancemethod(_pyBasePython.vectorUS_clear, None, vectorUS)
vectorUS.get_allocator = new_instancemethod(_pyBasePython.vectorUS_get_allocator, None, vectorUS)
vectorUS.pop_back = new_instancemethod(_pyBasePython.vectorUS_pop_back, None, vectorUS)
vectorUS.erase = new_instancemethod(_pyBasePython.vectorUS_erase, None, vectorUS)
vectorUS.push_back = new_instancemethod(_pyBasePython.vectorUS_push_back, None, vectorUS)
vectorUS.front = new_instancemethod(_pyBasePython.vectorUS_front, None, vectorUS)
vectorUS.back = new_instancemethod(_pyBasePython.vectorUS_back, None, vectorUS)
vectorUS.assign = new_instancemethod(_pyBasePython.vectorUS_assign, None, vectorUS)
vectorUS.resize = new_instancemethod(_pyBasePython.vectorUS_resize, None, vectorUS)
vectorUS.insert = new_instancemethod(_pyBasePython.vectorUS_insert, None, vectorUS)
vectorUS.reserve = new_instancemethod(_pyBasePython.vectorUS_reserve, None, vectorUS)
vectorUS.capacity = new_instancemethod(_pyBasePython.vectorUS_capacity, None, vectorUS)
vectorUS_swigregister = _pyBasePython.vectorUS_swigregister
vectorUS_swigregister(vectorUS)

class vectorvectorUS(object):
    """Proxy of C++ std::vector<(std::vector<(unsigned short)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorvectorUS self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorUS_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorvectorUS self) -> bool"""
        return _pyBasePython.vectorvectorUS___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorvectorUS self) -> bool"""
        return _pyBasePython.vectorvectorUS___bool__(self)


    def __len__(self) -> "std::vector< std::vector< unsigned short > >::size_type":
        """__len__(vectorvectorUS self) -> std::vector< std::vector< unsigned short > >::size_type"""
        return _pyBasePython.vectorvectorUS___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< unsigned short > >::difference_type', j: 'std::vector< std::vector< unsigned short > >::difference_type') -> "std::vector< std::vector< unsigned short,std::allocator< unsigned short > >,std::allocator< std::vector< unsigned short,std::allocator< unsigned short > > > > *":
        """__getslice__(vectorvectorUS self, std::vector< std::vector< unsigned short > >::difference_type i, std::vector< std::vector< unsigned short > >::difference_type j) -> vectorvectorUS"""
        return _pyBasePython.vectorvectorUS___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorvectorUS self, std::vector< std::vector< unsigned short > >::difference_type i, std::vector< std::vector< unsigned short > >::difference_type j)
        __setslice__(vectorvectorUS self, std::vector< std::vector< unsigned short > >::difference_type i, std::vector< std::vector< unsigned short > >::difference_type j, vectorvectorUS v)
        """
        return _pyBasePython.vectorvectorUS___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< unsigned short > >::difference_type', j: 'std::vector< std::vector< unsigned short > >::difference_type') -> "void":
        """__delslice__(vectorvectorUS self, std::vector< std::vector< unsigned short > >::difference_type i, std::vector< std::vector< unsigned short > >::difference_type j)"""
        return _pyBasePython.vectorvectorUS___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorvectorUS self, std::vector< std::vector< unsigned short > >::difference_type i)
        __delitem__(vectorvectorUS self, PySliceObject * slice)
        """
        return _pyBasePython.vectorvectorUS___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< unsigned short > >::value_type const &":
        """
        __getitem__(vectorvectorUS self, PySliceObject * slice) -> vectorvectorUS
        __getitem__(vectorvectorUS self, std::vector< std::vector< unsigned short > >::difference_type i) -> vectorUS
        """
        return _pyBasePython.vectorvectorUS___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorvectorUS self, PySliceObject * slice, vectorvectorUS v)
        __setitem__(vectorvectorUS self, PySliceObject * slice)
        __setitem__(vectorvectorUS self, std::vector< std::vector< unsigned short > >::difference_type i, vectorUS x)
        """
        return _pyBasePython.vectorvectorUS___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< unsigned short > >::value_type":
        """pop(vectorvectorUS self) -> vectorUS"""
        return _pyBasePython.vectorvectorUS_pop(self)


    def append(self, x: 'vectorUS') -> "void":
        """append(vectorvectorUS self, vectorUS x)"""
        return _pyBasePython.vectorvectorUS_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorvectorUS self) -> bool"""
        return _pyBasePython.vectorvectorUS_empty(self)


    def size(self) -> "std::vector< std::vector< unsigned short > >::size_type":
        """size(vectorvectorUS self) -> std::vector< std::vector< unsigned short > >::size_type"""
        return _pyBasePython.vectorvectorUS_size(self)


    def swap(self, v: 'vectorvectorUS') -> "void":
        """swap(vectorvectorUS self, vectorvectorUS v)"""
        return _pyBasePython.vectorvectorUS_swap(self, v)


    def begin(self) -> "std::vector< std::vector< unsigned short > >::iterator":
        """begin(vectorvectorUS self) -> std::vector< std::vector< unsigned short > >::iterator"""
        return _pyBasePython.vectorvectorUS_begin(self)


    def end(self) -> "std::vector< std::vector< unsigned short > >::iterator":
        """end(vectorvectorUS self) -> std::vector< std::vector< unsigned short > >::iterator"""
        return _pyBasePython.vectorvectorUS_end(self)


    def rbegin(self) -> "std::vector< std::vector< unsigned short > >::reverse_iterator":
        """rbegin(vectorvectorUS self) -> std::vector< std::vector< unsigned short > >::reverse_iterator"""
        return _pyBasePython.vectorvectorUS_rbegin(self)


    def rend(self) -> "std::vector< std::vector< unsigned short > >::reverse_iterator":
        """rend(vectorvectorUS self) -> std::vector< std::vector< unsigned short > >::reverse_iterator"""
        return _pyBasePython.vectorvectorUS_rend(self)


    def clear(self) -> "void":
        """clear(vectorvectorUS self)"""
        return _pyBasePython.vectorvectorUS_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< unsigned short > >::allocator_type":
        """get_allocator(vectorvectorUS self) -> std::vector< std::vector< unsigned short > >::allocator_type"""
        return _pyBasePython.vectorvectorUS_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorvectorUS self)"""
        return _pyBasePython.vectorvectorUS_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< unsigned short > >::iterator":
        """
        erase(vectorvectorUS self, std::vector< std::vector< unsigned short > >::iterator pos) -> std::vector< std::vector< unsigned short > >::iterator
        erase(vectorvectorUS self, std::vector< std::vector< unsigned short > >::iterator first, std::vector< std::vector< unsigned short > >::iterator last) -> std::vector< std::vector< unsigned short > >::iterator
        """
        return _pyBasePython.vectorvectorUS_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(unsigned short)>)> self) -> vectorvectorUS
        __init__(std::vector<(std::vector<(unsigned short)>)> self, vectorvectorUS arg2) -> vectorvectorUS
        __init__(std::vector<(std::vector<(unsigned short)>)> self, std::vector< std::vector< unsigned short > >::size_type size) -> vectorvectorUS
        __init__(std::vector<(std::vector<(unsigned short)>)> self, std::vector< std::vector< unsigned short > >::size_type size, vectorUS value) -> vectorvectorUS
        """
        _pyBasePython.vectorvectorUS_swiginit(self, _pyBasePython.new_vectorvectorUS(*args))

    def push_back(self, x: 'vectorUS') -> "void":
        """push_back(vectorvectorUS self, vectorUS x)"""
        return _pyBasePython.vectorvectorUS_push_back(self, x)


    def front(self) -> "std::vector< std::vector< unsigned short > >::value_type const &":
        """front(vectorvectorUS self) -> vectorUS"""
        return _pyBasePython.vectorvectorUS_front(self)


    def back(self) -> "std::vector< std::vector< unsigned short > >::value_type const &":
        """back(vectorvectorUS self) -> vectorUS"""
        return _pyBasePython.vectorvectorUS_back(self)


    def assign(self, n: 'std::vector< std::vector< unsigned short > >::size_type', x: 'vectorUS') -> "void":
        """assign(vectorvectorUS self, std::vector< std::vector< unsigned short > >::size_type n, vectorUS x)"""
        return _pyBasePython.vectorvectorUS_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorvectorUS self, std::vector< std::vector< unsigned short > >::size_type new_size)
        resize(vectorvectorUS self, std::vector< std::vector< unsigned short > >::size_type new_size, vectorUS x)
        """
        return _pyBasePython.vectorvectorUS_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorvectorUS self, std::vector< std::vector< unsigned short > >::iterator pos, vectorUS x) -> std::vector< std::vector< unsigned short > >::iterator
        insert(vectorvectorUS self, std::vector< std::vector< unsigned short > >::iterator pos, std::vector< std::vector< unsigned short > >::size_type n, vectorUS x)
        """
        return _pyBasePython.vectorvectorUS_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< unsigned short > >::size_type') -> "void":
        """reserve(vectorvectorUS self, std::vector< std::vector< unsigned short > >::size_type n)"""
        return _pyBasePython.vectorvectorUS_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< unsigned short > >::size_type":
        """capacity(vectorvectorUS self) -> std::vector< std::vector< unsigned short > >::size_type"""
        return _pyBasePython.vectorvectorUS_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorUS
vectorvectorUS.iterator = new_instancemethod(_pyBasePython.vectorvectorUS_iterator, None, vectorvectorUS)
vectorvectorUS.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorUS___nonzero__, None, vectorvectorUS)
vectorvectorUS.__bool__ = new_instancemethod(_pyBasePython.vectorvectorUS___bool__, None, vectorvectorUS)
vectorvectorUS.__len__ = new_instancemethod(_pyBasePython.vectorvectorUS___len__, None, vectorvectorUS)
vectorvectorUS.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorUS___getslice__, None, vectorvectorUS)
vectorvectorUS.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorUS___setslice__, None, vectorvectorUS)
vectorvectorUS.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorUS___delslice__, None, vectorvectorUS)
vectorvectorUS.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorUS___delitem__, None, vectorvectorUS)
vectorvectorUS.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorUS___getitem__, None, vectorvectorUS)
vectorvectorUS.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorUS___setitem__, None, vectorvectorUS)
vectorvectorUS.pop = new_instancemethod(_pyBasePython.vectorvectorUS_pop, None, vectorvectorUS)
vectorvectorUS.append = new_instancemethod(_pyBasePython.vectorvectorUS_append, None, vectorvectorUS)
vectorvectorUS.empty = new_instancemethod(_pyBasePython.vectorvectorUS_empty, None, vectorvectorUS)
vectorvectorUS.size = new_instancemethod(_pyBasePython.vectorvectorUS_size, None, vectorvectorUS)
vectorvectorUS.swap = new_instancemethod(_pyBasePython.vectorvectorUS_swap, None, vectorvectorUS)
vectorvectorUS.begin = new_instancemethod(_pyBasePython.vectorvectorUS_begin, None, vectorvectorUS)
vectorvectorUS.end = new_instancemethod(_pyBasePython.vectorvectorUS_end, None, vectorvectorUS)
vectorvectorUS.rbegin = new_instancemethod(_pyBasePython.vectorvectorUS_rbegin, None, vectorvectorUS)
vectorvectorUS.rend = new_instancemethod(_pyBasePython.vectorvectorUS_rend, None, vectorvectorUS)
vectorvectorUS.clear = new_instancemethod(_pyBasePython.vectorvectorUS_clear, None, vectorvectorUS)
vectorvectorUS.get_allocator = new_instancemethod(_pyBasePython.vectorvectorUS_get_allocator, None, vectorvectorUS)
vectorvectorUS.pop_back = new_instancemethod(_pyBasePython.vectorvectorUS_pop_back, None, vectorvectorUS)
vectorvectorUS.erase = new_instancemethod(_pyBasePython.vectorvectorUS_erase, None, vectorvectorUS)
vectorvectorUS.push_back = new_instancemethod(_pyBasePython.vectorvectorUS_push_back, None, vectorvectorUS)
vectorvectorUS.front = new_instancemethod(_pyBasePython.vectorvectorUS_front, None, vectorvectorUS)
vectorvectorUS.back = new_instancemethod(_pyBasePython.vectorvectorUS_back, None, vectorvectorUS)
vectorvectorUS.assign = new_instancemethod(_pyBasePython.vectorvectorUS_assign, None, vectorvectorUS)
vectorvectorUS.resize = new_instancemethod(_pyBasePython.vectorvectorUS_resize, None, vectorvectorUS)
vectorvectorUS.insert = new_instancemethod(_pyBasePython.vectorvectorUS_insert, None, vectorvectorUS)
vectorvectorUS.reserve = new_instancemethod(_pyBasePython.vectorvectorUS_reserve, None, vectorvectorUS)
vectorvectorUS.capacity = new_instancemethod(_pyBasePython.vectorvectorUS_capacity, None, vectorvectorUS)
vectorvectorUS_swigregister = _pyBasePython.vectorvectorUS_swigregister
vectorvectorUS_swigregister(vectorvectorUS)

class vectorUI(object):
    """Proxy of C++ std::vector<(unsigned int)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorUI self) -> SwigPyIterator"""
        return _pyBasePython.vectorUI_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorUI self) -> bool"""
        return _pyBasePython.vectorUI___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorUI self) -> bool"""
        return _pyBasePython.vectorUI___bool__(self)


    def __len__(self) -> "std::vector< unsigned int >::size_type":
        """__len__(vectorUI self) -> std::vector< unsigned int >::size_type"""
        return _pyBasePython.vectorUI___len__(self)


    def __getslice__(self, i: 'std::vector< unsigned int >::difference_type', j: 'std::vector< unsigned int >::difference_type') -> "std::vector< unsigned int,std::allocator< unsigned int > > *":
        """__getslice__(vectorUI self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> vectorUI"""
        return _pyBasePython.vectorUI___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorUI self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)
        __setslice__(vectorUI self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, vectorUI v)
        """
        return _pyBasePython.vectorUI___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< unsigned int >::difference_type', j: 'std::vector< unsigned int >::difference_type') -> "void":
        """__delslice__(vectorUI self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)"""
        return _pyBasePython.vectorUI___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorUI self, std::vector< unsigned int >::difference_type i)
        __delitem__(vectorUI self, PySliceObject * slice)
        """
        return _pyBasePython.vectorUI___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< unsigned int >::value_type const &":
        """
        __getitem__(vectorUI self, PySliceObject * slice) -> vectorUI
        __getitem__(vectorUI self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &
        """
        return _pyBasePython.vectorUI___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorUI self, PySliceObject * slice, vectorUI v)
        __setitem__(vectorUI self, PySliceObject * slice)
        __setitem__(vectorUI self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)
        """
        return _pyBasePython.vectorUI___setitem__(self, *args)


    def pop(self) -> "std::vector< unsigned int >::value_type":
        """pop(vectorUI self) -> std::vector< unsigned int >::value_type"""
        return _pyBasePython.vectorUI_pop(self)


    def append(self, x: 'std::vector< unsigned int >::value_type const &') -> "void":
        """append(vectorUI self, std::vector< unsigned int >::value_type const & x)"""
        return _pyBasePython.vectorUI_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorUI self) -> bool"""
        return _pyBasePython.vectorUI_empty(self)


    def size(self) -> "std::vector< unsigned int >::size_type":
        """size(vectorUI self) -> std::vector< unsigned int >::size_type"""
        return _pyBasePython.vectorUI_size(self)


    def swap(self, v: 'vectorUI') -> "void":
        """swap(vectorUI self, vectorUI v)"""
        return _pyBasePython.vectorUI_swap(self, v)


    def begin(self) -> "std::vector< unsigned int >::iterator":
        """begin(vectorUI self) -> std::vector< unsigned int >::iterator"""
        return _pyBasePython.vectorUI_begin(self)


    def end(self) -> "std::vector< unsigned int >::iterator":
        """end(vectorUI self) -> std::vector< unsigned int >::iterator"""
        return _pyBasePython.vectorUI_end(self)


    def rbegin(self) -> "std::vector< unsigned int >::reverse_iterator":
        """rbegin(vectorUI self) -> std::vector< unsigned int >::reverse_iterator"""
        return _pyBasePython.vectorUI_rbegin(self)


    def rend(self) -> "std::vector< unsigned int >::reverse_iterator":
        """rend(vectorUI self) -> std::vector< unsigned int >::reverse_iterator"""
        return _pyBasePython.vectorUI_rend(self)


    def clear(self) -> "void":
        """clear(vectorUI self)"""
        return _pyBasePython.vectorUI_clear(self)


    def get_allocator(self) -> "std::vector< unsigned int >::allocator_type":
        """get_allocator(vectorUI self) -> std::vector< unsigned int >::allocator_type"""
        return _pyBasePython.vectorUI_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorUI self)"""
        return _pyBasePython.vectorUI_pop_back(self)


    def erase(self, *args) -> "std::vector< unsigned int >::iterator":
        """
        erase(vectorUI self, std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator
        erase(vectorUI self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator
        """
        return _pyBasePython.vectorUI_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(unsigned int)> self) -> vectorUI
        __init__(std::vector<(unsigned int)> self, vectorUI arg2) -> vectorUI
        __init__(std::vector<(unsigned int)> self, std::vector< unsigned int >::size_type size) -> vectorUI
        __init__(std::vector<(unsigned int)> self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> vectorUI
        """
        _pyBasePython.vectorUI_swiginit(self, _pyBasePython.new_vectorUI(*args))

    def push_back(self, x: 'std::vector< unsigned int >::value_type const &') -> "void":
        """push_back(vectorUI self, std::vector< unsigned int >::value_type const & x)"""
        return _pyBasePython.vectorUI_push_back(self, x)


    def front(self) -> "std::vector< unsigned int >::value_type const &":
        """front(vectorUI self) -> std::vector< unsigned int >::value_type const &"""
        return _pyBasePython.vectorUI_front(self)


    def back(self) -> "std::vector< unsigned int >::value_type const &":
        """back(vectorUI self) -> std::vector< unsigned int >::value_type const &"""
        return _pyBasePython.vectorUI_back(self)


    def assign(self, n: 'std::vector< unsigned int >::size_type', x: 'std::vector< unsigned int >::value_type const &') -> "void":
        """assign(vectorUI self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)"""
        return _pyBasePython.vectorUI_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorUI self, std::vector< unsigned int >::size_type new_size)
        resize(vectorUI self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)
        """
        return _pyBasePython.vectorUI_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorUI self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator
        insert(vectorUI self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)
        """
        return _pyBasePython.vectorUI_insert(self, *args)


    def reserve(self, n: 'std::vector< unsigned int >::size_type') -> "void":
        """reserve(vectorUI self, std::vector< unsigned int >::size_type n)"""
        return _pyBasePython.vectorUI_reserve(self, n)


    def capacity(self) -> "std::vector< unsigned int >::size_type":
        """capacity(vectorUI self) -> std::vector< unsigned int >::size_type"""
        return _pyBasePython.vectorUI_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorUI
vectorUI.iterator = new_instancemethod(_pyBasePython.vectorUI_iterator, None, vectorUI)
vectorUI.__nonzero__ = new_instancemethod(_pyBasePython.vectorUI___nonzero__, None, vectorUI)
vectorUI.__bool__ = new_instancemethod(_pyBasePython.vectorUI___bool__, None, vectorUI)
vectorUI.__len__ = new_instancemethod(_pyBasePython.vectorUI___len__, None, vectorUI)
vectorUI.__getslice__ = new_instancemethod(_pyBasePython.vectorUI___getslice__, None, vectorUI)
vectorUI.__setslice__ = new_instancemethod(_pyBasePython.vectorUI___setslice__, None, vectorUI)
vectorUI.__delslice__ = new_instancemethod(_pyBasePython.vectorUI___delslice__, None, vectorUI)
vectorUI.__delitem__ = new_instancemethod(_pyBasePython.vectorUI___delitem__, None, vectorUI)
vectorUI.__getitem__ = new_instancemethod(_pyBasePython.vectorUI___getitem__, None, vectorUI)
vectorUI.__setitem__ = new_instancemethod(_pyBasePython.vectorUI___setitem__, None, vectorUI)
vectorUI.pop = new_instancemethod(_pyBasePython.vectorUI_pop, None, vectorUI)
vectorUI.append = new_instancemethod(_pyBasePython.vectorUI_append, None, vectorUI)
vectorUI.empty = new_instancemethod(_pyBasePython.vectorUI_empty, None, vectorUI)
vectorUI.size = new_instancemethod(_pyBasePython.vectorUI_size, None, vectorUI)
vectorUI.swap = new_instancemethod(_pyBasePython.vectorUI_swap, None, vectorUI)
vectorUI.begin = new_instancemethod(_pyBasePython.vectorUI_begin, None, vectorUI)
vectorUI.end = new_instancemethod(_pyBasePython.vectorUI_end, None, vectorUI)
vectorUI.rbegin = new_instancemethod(_pyBasePython.vectorUI_rbegin, None, vectorUI)
vectorUI.rend = new_instancemethod(_pyBasePython.vectorUI_rend, None, vectorUI)
vectorUI.clear = new_instancemethod(_pyBasePython.vectorUI_clear, None, vectorUI)
vectorUI.get_allocator = new_instancemethod(_pyBasePython.vectorUI_get_allocator, None, vectorUI)
vectorUI.pop_back = new_instancemethod(_pyBasePython.vectorUI_pop_back, None, vectorUI)
vectorUI.erase = new_instancemethod(_pyBasePython.vectorUI_erase, None, vectorUI)
vectorUI.push_back = new_instancemethod(_pyBasePython.vectorUI_push_back, None, vectorUI)
vectorUI.front = new_instancemethod(_pyBasePython.vectorUI_front, None, vectorUI)
vectorUI.back = new_instancemethod(_pyBasePython.vectorUI_back, None, vectorUI)
vectorUI.assign = new_instancemethod(_pyBasePython.vectorUI_assign, None, vectorUI)
vectorUI.resize = new_instancemethod(_pyBasePython.vectorUI_resize, None, vectorUI)
vectorUI.insert = new_instancemethod(_pyBasePython.vectorUI_insert, None, vectorUI)
vectorUI.reserve = new_instancemethod(_pyBasePython.vectorUI_reserve, None, vectorUI)
vectorUI.capacity = new_instancemethod(_pyBasePython.vectorUI_capacity, None, vectorUI)
vectorUI_swigregister = _pyBasePython.vectorUI_swigregister
vectorUI_swigregister(vectorUI)

class vectorvectorUI(object):
    """Proxy of C++ std::vector<(std::vector<(unsigned int)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorvectorUI self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorUI_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorvectorUI self) -> bool"""
        return _pyBasePython.vectorvectorUI___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorvectorUI self) -> bool"""
        return _pyBasePython.vectorvectorUI___bool__(self)


    def __len__(self) -> "std::vector< std::vector< unsigned int > >::size_type":
        """__len__(vectorvectorUI self) -> std::vector< std::vector< unsigned int > >::size_type"""
        return _pyBasePython.vectorvectorUI___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< unsigned int > >::difference_type', j: 'std::vector< std::vector< unsigned int > >::difference_type') -> "std::vector< std::vector< unsigned int,std::allocator< unsigned int > >,std::allocator< std::vector< unsigned int,std::allocator< unsigned int > > > > *":
        """__getslice__(vectorvectorUI self, std::vector< std::vector< unsigned int > >::difference_type i, std::vector< std::vector< unsigned int > >::difference_type j) -> vectorvectorUI"""
        return _pyBasePython.vectorvectorUI___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorvectorUI self, std::vector< std::vector< unsigned int > >::difference_type i, std::vector< std::vector< unsigned int > >::difference_type j)
        __setslice__(vectorvectorUI self, std::vector< std::vector< unsigned int > >::difference_type i, std::vector< std::vector< unsigned int > >::difference_type j, vectorvectorUI v)
        """
        return _pyBasePython.vectorvectorUI___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< unsigned int > >::difference_type', j: 'std::vector< std::vector< unsigned int > >::difference_type') -> "void":
        """__delslice__(vectorvectorUI self, std::vector< std::vector< unsigned int > >::difference_type i, std::vector< std::vector< unsigned int > >::difference_type j)"""
        return _pyBasePython.vectorvectorUI___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorvectorUI self, std::vector< std::vector< unsigned int > >::difference_type i)
        __delitem__(vectorvectorUI self, PySliceObject * slice)
        """
        return _pyBasePython.vectorvectorUI___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< unsigned int > >::value_type const &":
        """
        __getitem__(vectorvectorUI self, PySliceObject * slice) -> vectorvectorUI
        __getitem__(vectorvectorUI self, std::vector< std::vector< unsigned int > >::difference_type i) -> vectorUI
        """
        return _pyBasePython.vectorvectorUI___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorvectorUI self, PySliceObject * slice, vectorvectorUI v)
        __setitem__(vectorvectorUI self, PySliceObject * slice)
        __setitem__(vectorvectorUI self, std::vector< std::vector< unsigned int > >::difference_type i, vectorUI x)
        """
        return _pyBasePython.vectorvectorUI___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< unsigned int > >::value_type":
        """pop(vectorvectorUI self) -> vectorUI"""
        return _pyBasePython.vectorvectorUI_pop(self)


    def append(self, x: 'vectorUI') -> "void":
        """append(vectorvectorUI self, vectorUI x)"""
        return _pyBasePython.vectorvectorUI_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorvectorUI self) -> bool"""
        return _pyBasePython.vectorvectorUI_empty(self)


    def size(self) -> "std::vector< std::vector< unsigned int > >::size_type":
        """size(vectorvectorUI self) -> std::vector< std::vector< unsigned int > >::size_type"""
        return _pyBasePython.vectorvectorUI_size(self)


    def swap(self, v: 'vectorvectorUI') -> "void":
        """swap(vectorvectorUI self, vectorvectorUI v)"""
        return _pyBasePython.vectorvectorUI_swap(self, v)


    def begin(self) -> "std::vector< std::vector< unsigned int > >::iterator":
        """begin(vectorvectorUI self) -> std::vector< std::vector< unsigned int > >::iterator"""
        return _pyBasePython.vectorvectorUI_begin(self)


    def end(self) -> "std::vector< std::vector< unsigned int > >::iterator":
        """end(vectorvectorUI self) -> std::vector< std::vector< unsigned int > >::iterator"""
        return _pyBasePython.vectorvectorUI_end(self)


    def rbegin(self) -> "std::vector< std::vector< unsigned int > >::reverse_iterator":
        """rbegin(vectorvectorUI self) -> std::vector< std::vector< unsigned int > >::reverse_iterator"""
        return _pyBasePython.vectorvectorUI_rbegin(self)


    def rend(self) -> "std::vector< std::vector< unsigned int > >::reverse_iterator":
        """rend(vectorvectorUI self) -> std::vector< std::vector< unsigned int > >::reverse_iterator"""
        return _pyBasePython.vectorvectorUI_rend(self)


    def clear(self) -> "void":
        """clear(vectorvectorUI self)"""
        return _pyBasePython.vectorvectorUI_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< unsigned int > >::allocator_type":
        """get_allocator(vectorvectorUI self) -> std::vector< std::vector< unsigned int > >::allocator_type"""
        return _pyBasePython.vectorvectorUI_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorvectorUI self)"""
        return _pyBasePython.vectorvectorUI_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< unsigned int > >::iterator":
        """
        erase(vectorvectorUI self, std::vector< std::vector< unsigned int > >::iterator pos) -> std::vector< std::vector< unsigned int > >::iterator
        erase(vectorvectorUI self, std::vector< std::vector< unsigned int > >::iterator first, std::vector< std::vector< unsigned int > >::iterator last) -> std::vector< std::vector< unsigned int > >::iterator
        """
        return _pyBasePython.vectorvectorUI_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(unsigned int)>)> self) -> vectorvectorUI
        __init__(std::vector<(std::vector<(unsigned int)>)> self, vectorvectorUI arg2) -> vectorvectorUI
        __init__(std::vector<(std::vector<(unsigned int)>)> self, std::vector< std::vector< unsigned int > >::size_type size) -> vectorvectorUI
        __init__(std::vector<(std::vector<(unsigned int)>)> self, std::vector< std::vector< unsigned int > >::size_type size, vectorUI value) -> vectorvectorUI
        """
        _pyBasePython.vectorvectorUI_swiginit(self, _pyBasePython.new_vectorvectorUI(*args))

    def push_back(self, x: 'vectorUI') -> "void":
        """push_back(vectorvectorUI self, vectorUI x)"""
        return _pyBasePython.vectorvectorUI_push_back(self, x)


    def front(self) -> "std::vector< std::vector< unsigned int > >::value_type const &":
        """front(vectorvectorUI self) -> vectorUI"""
        return _pyBasePython.vectorvectorUI_front(self)


    def back(self) -> "std::vector< std::vector< unsigned int > >::value_type const &":
        """back(vectorvectorUI self) -> vectorUI"""
        return _pyBasePython.vectorvectorUI_back(self)


    def assign(self, n: 'std::vector< std::vector< unsigned int > >::size_type', x: 'vectorUI') -> "void":
        """assign(vectorvectorUI self, std::vector< std::vector< unsigned int > >::size_type n, vectorUI x)"""
        return _pyBasePython.vectorvectorUI_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorvectorUI self, std::vector< std::vector< unsigned int > >::size_type new_size)
        resize(vectorvectorUI self, std::vector< std::vector< unsigned int > >::size_type new_size, vectorUI x)
        """
        return _pyBasePython.vectorvectorUI_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorvectorUI self, std::vector< std::vector< unsigned int > >::iterator pos, vectorUI x) -> std::vector< std::vector< unsigned int > >::iterator
        insert(vectorvectorUI self, std::vector< std::vector< unsigned int > >::iterator pos, std::vector< std::vector< unsigned int > >::size_type n, vectorUI x)
        """
        return _pyBasePython.vectorvectorUI_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< unsigned int > >::size_type') -> "void":
        """reserve(vectorvectorUI self, std::vector< std::vector< unsigned int > >::size_type n)"""
        return _pyBasePython.vectorvectorUI_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< unsigned int > >::size_type":
        """capacity(vectorvectorUI self) -> std::vector< std::vector< unsigned int > >::size_type"""
        return _pyBasePython.vectorvectorUI_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorUI
vectorvectorUI.iterator = new_instancemethod(_pyBasePython.vectorvectorUI_iterator, None, vectorvectorUI)
vectorvectorUI.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorUI___nonzero__, None, vectorvectorUI)
vectorvectorUI.__bool__ = new_instancemethod(_pyBasePython.vectorvectorUI___bool__, None, vectorvectorUI)
vectorvectorUI.__len__ = new_instancemethod(_pyBasePython.vectorvectorUI___len__, None, vectorvectorUI)
vectorvectorUI.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorUI___getslice__, None, vectorvectorUI)
vectorvectorUI.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorUI___setslice__, None, vectorvectorUI)
vectorvectorUI.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorUI___delslice__, None, vectorvectorUI)
vectorvectorUI.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorUI___delitem__, None, vectorvectorUI)
vectorvectorUI.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorUI___getitem__, None, vectorvectorUI)
vectorvectorUI.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorUI___setitem__, None, vectorvectorUI)
vectorvectorUI.pop = new_instancemethod(_pyBasePython.vectorvectorUI_pop, None, vectorvectorUI)
vectorvectorUI.append = new_instancemethod(_pyBasePython.vectorvectorUI_append, None, vectorvectorUI)
vectorvectorUI.empty = new_instancemethod(_pyBasePython.vectorvectorUI_empty, None, vectorvectorUI)
vectorvectorUI.size = new_instancemethod(_pyBasePython.vectorvectorUI_size, None, vectorvectorUI)
vectorvectorUI.swap = new_instancemethod(_pyBasePython.vectorvectorUI_swap, None, vectorvectorUI)
vectorvectorUI.begin = new_instancemethod(_pyBasePython.vectorvectorUI_begin, None, vectorvectorUI)
vectorvectorUI.end = new_instancemethod(_pyBasePython.vectorvectorUI_end, None, vectorvectorUI)
vectorvectorUI.rbegin = new_instancemethod(_pyBasePython.vectorvectorUI_rbegin, None, vectorvectorUI)
vectorvectorUI.rend = new_instancemethod(_pyBasePython.vectorvectorUI_rend, None, vectorvectorUI)
vectorvectorUI.clear = new_instancemethod(_pyBasePython.vectorvectorUI_clear, None, vectorvectorUI)
vectorvectorUI.get_allocator = new_instancemethod(_pyBasePython.vectorvectorUI_get_allocator, None, vectorvectorUI)
vectorvectorUI.pop_back = new_instancemethod(_pyBasePython.vectorvectorUI_pop_back, None, vectorvectorUI)
vectorvectorUI.erase = new_instancemethod(_pyBasePython.vectorvectorUI_erase, None, vectorvectorUI)
vectorvectorUI.push_back = new_instancemethod(_pyBasePython.vectorvectorUI_push_back, None, vectorvectorUI)
vectorvectorUI.front = new_instancemethod(_pyBasePython.vectorvectorUI_front, None, vectorvectorUI)
vectorvectorUI.back = new_instancemethod(_pyBasePython.vectorvectorUI_back, None, vectorvectorUI)
vectorvectorUI.assign = new_instancemethod(_pyBasePython.vectorvectorUI_assign, None, vectorvectorUI)
vectorvectorUI.resize = new_instancemethod(_pyBasePython.vectorvectorUI_resize, None, vectorvectorUI)
vectorvectorUI.insert = new_instancemethod(_pyBasePython.vectorvectorUI_insert, None, vectorvectorUI)
vectorvectorUI.reserve = new_instancemethod(_pyBasePython.vectorvectorUI_reserve, None, vectorvectorUI)
vectorvectorUI.capacity = new_instancemethod(_pyBasePython.vectorvectorUI_capacity, None, vectorvectorUI)
vectorvectorUI_swigregister = _pyBasePython.vectorvectorUI_swigregister
vectorvectorUI_swigregister(vectorvectorUI)

class vectorUL(object):
    """Proxy of C++ std::vector<(unsigned long)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorUL self) -> SwigPyIterator"""
        return _pyBasePython.vectorUL_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorUL self) -> bool"""
        return _pyBasePython.vectorUL___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorUL self) -> bool"""
        return _pyBasePython.vectorUL___bool__(self)


    def __len__(self) -> "std::vector< unsigned long >::size_type":
        """__len__(vectorUL self) -> std::vector< unsigned long >::size_type"""
        return _pyBasePython.vectorUL___len__(self)


    def __getslice__(self, i: 'std::vector< unsigned long >::difference_type', j: 'std::vector< unsigned long >::difference_type') -> "std::vector< unsigned long,std::allocator< unsigned long > > *":
        """__getslice__(vectorUL self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j) -> vectorUL"""
        return _pyBasePython.vectorUL___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorUL self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j)
        __setslice__(vectorUL self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j, vectorUL v)
        """
        return _pyBasePython.vectorUL___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< unsigned long >::difference_type', j: 'std::vector< unsigned long >::difference_type') -> "void":
        """__delslice__(vectorUL self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j)"""
        return _pyBasePython.vectorUL___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorUL self, std::vector< unsigned long >::difference_type i)
        __delitem__(vectorUL self, PySliceObject * slice)
        """
        return _pyBasePython.vectorUL___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< unsigned long >::value_type const &":
        """
        __getitem__(vectorUL self, PySliceObject * slice) -> vectorUL
        __getitem__(vectorUL self, std::vector< unsigned long >::difference_type i) -> std::vector< unsigned long >::value_type const &
        """
        return _pyBasePython.vectorUL___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorUL self, PySliceObject * slice, vectorUL v)
        __setitem__(vectorUL self, PySliceObject * slice)
        __setitem__(vectorUL self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::value_type const & x)
        """
        return _pyBasePython.vectorUL___setitem__(self, *args)


    def pop(self) -> "std::vector< unsigned long >::value_type":
        """pop(vectorUL self) -> std::vector< unsigned long >::value_type"""
        return _pyBasePython.vectorUL_pop(self)


    def append(self, x: 'std::vector< unsigned long >::value_type const &') -> "void":
        """append(vectorUL self, std::vector< unsigned long >::value_type const & x)"""
        return _pyBasePython.vectorUL_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorUL self) -> bool"""
        return _pyBasePython.vectorUL_empty(self)


    def size(self) -> "std::vector< unsigned long >::size_type":
        """size(vectorUL self) -> std::vector< unsigned long >::size_type"""
        return _pyBasePython.vectorUL_size(self)


    def swap(self, v: 'vectorUL') -> "void":
        """swap(vectorUL self, vectorUL v)"""
        return _pyBasePython.vectorUL_swap(self, v)


    def begin(self) -> "std::vector< unsigned long >::iterator":
        """begin(vectorUL self) -> std::vector< unsigned long >::iterator"""
        return _pyBasePython.vectorUL_begin(self)


    def end(self) -> "std::vector< unsigned long >::iterator":
        """end(vectorUL self) -> std::vector< unsigned long >::iterator"""
        return _pyBasePython.vectorUL_end(self)


    def rbegin(self) -> "std::vector< unsigned long >::reverse_iterator":
        """rbegin(vectorUL self) -> std::vector< unsigned long >::reverse_iterator"""
        return _pyBasePython.vectorUL_rbegin(self)


    def rend(self) -> "std::vector< unsigned long >::reverse_iterator":
        """rend(vectorUL self) -> std::vector< unsigned long >::reverse_iterator"""
        return _pyBasePython.vectorUL_rend(self)


    def clear(self) -> "void":
        """clear(vectorUL self)"""
        return _pyBasePython.vectorUL_clear(self)


    def get_allocator(self) -> "std::vector< unsigned long >::allocator_type":
        """get_allocator(vectorUL self) -> std::vector< unsigned long >::allocator_type"""
        return _pyBasePython.vectorUL_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorUL self)"""
        return _pyBasePython.vectorUL_pop_back(self)


    def erase(self, *args) -> "std::vector< unsigned long >::iterator":
        """
        erase(vectorUL self, std::vector< unsigned long >::iterator pos) -> std::vector< unsigned long >::iterator
        erase(vectorUL self, std::vector< unsigned long >::iterator first, std::vector< unsigned long >::iterator last) -> std::vector< unsigned long >::iterator
        """
        return _pyBasePython.vectorUL_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(unsigned long)> self) -> vectorUL
        __init__(std::vector<(unsigned long)> self, vectorUL arg2) -> vectorUL
        __init__(std::vector<(unsigned long)> self, std::vector< unsigned long >::size_type size) -> vectorUL
        __init__(std::vector<(unsigned long)> self, std::vector< unsigned long >::size_type size, std::vector< unsigned long >::value_type const & value) -> vectorUL
        """
        _pyBasePython.vectorUL_swiginit(self, _pyBasePython.new_vectorUL(*args))

    def push_back(self, x: 'std::vector< unsigned long >::value_type const &') -> "void":
        """push_back(vectorUL self, std::vector< unsigned long >::value_type const & x)"""
        return _pyBasePython.vectorUL_push_back(self, x)


    def front(self) -> "std::vector< unsigned long >::value_type const &":
        """front(vectorUL self) -> std::vector< unsigned long >::value_type const &"""
        return _pyBasePython.vectorUL_front(self)


    def back(self) -> "std::vector< unsigned long >::value_type const &":
        """back(vectorUL self) -> std::vector< unsigned long >::value_type const &"""
        return _pyBasePython.vectorUL_back(self)


    def assign(self, n: 'std::vector< unsigned long >::size_type', x: 'std::vector< unsigned long >::value_type const &') -> "void":
        """assign(vectorUL self, std::vector< unsigned long >::size_type n, std::vector< unsigned long >::value_type const & x)"""
        return _pyBasePython.vectorUL_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorUL self, std::vector< unsigned long >::size_type new_size)
        resize(vectorUL self, std::vector< unsigned long >::size_type new_size, std::vector< unsigned long >::value_type const & x)
        """
        return _pyBasePython.vectorUL_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorUL self, std::vector< unsigned long >::iterator pos, std::vector< unsigned long >::value_type const & x) -> std::vector< unsigned long >::iterator
        insert(vectorUL self, std::vector< unsigned long >::iterator pos, std::vector< unsigned long >::size_type n, std::vector< unsigned long >::value_type const & x)
        """
        return _pyBasePython.vectorUL_insert(self, *args)


    def reserve(self, n: 'std::vector< unsigned long >::size_type') -> "void":
        """reserve(vectorUL self, std::vector< unsigned long >::size_type n)"""
        return _pyBasePython.vectorUL_reserve(self, n)


    def capacity(self) -> "std::vector< unsigned long >::size_type":
        """capacity(vectorUL self) -> std::vector< unsigned long >::size_type"""
        return _pyBasePython.vectorUL_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorUL
vectorUL.iterator = new_instancemethod(_pyBasePython.vectorUL_iterator, None, vectorUL)
vectorUL.__nonzero__ = new_instancemethod(_pyBasePython.vectorUL___nonzero__, None, vectorUL)
vectorUL.__bool__ = new_instancemethod(_pyBasePython.vectorUL___bool__, None, vectorUL)
vectorUL.__len__ = new_instancemethod(_pyBasePython.vectorUL___len__, None, vectorUL)
vectorUL.__getslice__ = new_instancemethod(_pyBasePython.vectorUL___getslice__, None, vectorUL)
vectorUL.__setslice__ = new_instancemethod(_pyBasePython.vectorUL___setslice__, None, vectorUL)
vectorUL.__delslice__ = new_instancemethod(_pyBasePython.vectorUL___delslice__, None, vectorUL)
vectorUL.__delitem__ = new_instancemethod(_pyBasePython.vectorUL___delitem__, None, vectorUL)
vectorUL.__getitem__ = new_instancemethod(_pyBasePython.vectorUL___getitem__, None, vectorUL)
vectorUL.__setitem__ = new_instancemethod(_pyBasePython.vectorUL___setitem__, None, vectorUL)
vectorUL.pop = new_instancemethod(_pyBasePython.vectorUL_pop, None, vectorUL)
vectorUL.append = new_instancemethod(_pyBasePython.vectorUL_append, None, vectorUL)
vectorUL.empty = new_instancemethod(_pyBasePython.vectorUL_empty, None, vectorUL)
vectorUL.size = new_instancemethod(_pyBasePython.vectorUL_size, None, vectorUL)
vectorUL.swap = new_instancemethod(_pyBasePython.vectorUL_swap, None, vectorUL)
vectorUL.begin = new_instancemethod(_pyBasePython.vectorUL_begin, None, vectorUL)
vectorUL.end = new_instancemethod(_pyBasePython.vectorUL_end, None, vectorUL)
vectorUL.rbegin = new_instancemethod(_pyBasePython.vectorUL_rbegin, None, vectorUL)
vectorUL.rend = new_instancemethod(_pyBasePython.vectorUL_rend, None, vectorUL)
vectorUL.clear = new_instancemethod(_pyBasePython.vectorUL_clear, None, vectorUL)
vectorUL.get_allocator = new_instancemethod(_pyBasePython.vectorUL_get_allocator, None, vectorUL)
vectorUL.pop_back = new_instancemethod(_pyBasePython.vectorUL_pop_back, None, vectorUL)
vectorUL.erase = new_instancemethod(_pyBasePython.vectorUL_erase, None, vectorUL)
vectorUL.push_back = new_instancemethod(_pyBasePython.vectorUL_push_back, None, vectorUL)
vectorUL.front = new_instancemethod(_pyBasePython.vectorUL_front, None, vectorUL)
vectorUL.back = new_instancemethod(_pyBasePython.vectorUL_back, None, vectorUL)
vectorUL.assign = new_instancemethod(_pyBasePython.vectorUL_assign, None, vectorUL)
vectorUL.resize = new_instancemethod(_pyBasePython.vectorUL_resize, None, vectorUL)
vectorUL.insert = new_instancemethod(_pyBasePython.vectorUL_insert, None, vectorUL)
vectorUL.reserve = new_instancemethod(_pyBasePython.vectorUL_reserve, None, vectorUL)
vectorUL.capacity = new_instancemethod(_pyBasePython.vectorUL_capacity, None, vectorUL)
vectorUL_swigregister = _pyBasePython.vectorUL_swigregister
vectorUL_swigregister(vectorUL)

class vectorvectorUL(object):
    """Proxy of C++ std::vector<(std::vector<(unsigned long)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorvectorUL self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorUL_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorvectorUL self) -> bool"""
        return _pyBasePython.vectorvectorUL___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorvectorUL self) -> bool"""
        return _pyBasePython.vectorvectorUL___bool__(self)


    def __len__(self) -> "std::vector< std::vector< unsigned long > >::size_type":
        """__len__(vectorvectorUL self) -> std::vector< std::vector< unsigned long > >::size_type"""
        return _pyBasePython.vectorvectorUL___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< unsigned long > >::difference_type', j: 'std::vector< std::vector< unsigned long > >::difference_type') -> "std::vector< std::vector< unsigned long,std::allocator< unsigned long > >,std::allocator< std::vector< unsigned long,std::allocator< unsigned long > > > > *":
        """__getslice__(vectorvectorUL self, std::vector< std::vector< unsigned long > >::difference_type i, std::vector< std::vector< unsigned long > >::difference_type j) -> vectorvectorUL"""
        return _pyBasePython.vectorvectorUL___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorvectorUL self, std::vector< std::vector< unsigned long > >::difference_type i, std::vector< std::vector< unsigned long > >::difference_type j)
        __setslice__(vectorvectorUL self, std::vector< std::vector< unsigned long > >::difference_type i, std::vector< std::vector< unsigned long > >::difference_type j, vectorvectorUL v)
        """
        return _pyBasePython.vectorvectorUL___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< unsigned long > >::difference_type', j: 'std::vector< std::vector< unsigned long > >::difference_type') -> "void":
        """__delslice__(vectorvectorUL self, std::vector< std::vector< unsigned long > >::difference_type i, std::vector< std::vector< unsigned long > >::difference_type j)"""
        return _pyBasePython.vectorvectorUL___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorvectorUL self, std::vector< std::vector< unsigned long > >::difference_type i)
        __delitem__(vectorvectorUL self, PySliceObject * slice)
        """
        return _pyBasePython.vectorvectorUL___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< unsigned long > >::value_type const &":
        """
        __getitem__(vectorvectorUL self, PySliceObject * slice) -> vectorvectorUL
        __getitem__(vectorvectorUL self, std::vector< std::vector< unsigned long > >::difference_type i) -> vectorUL
        """
        return _pyBasePython.vectorvectorUL___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorvectorUL self, PySliceObject * slice, vectorvectorUL v)
        __setitem__(vectorvectorUL self, PySliceObject * slice)
        __setitem__(vectorvectorUL self, std::vector< std::vector< unsigned long > >::difference_type i, vectorUL x)
        """
        return _pyBasePython.vectorvectorUL___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< unsigned long > >::value_type":
        """pop(vectorvectorUL self) -> vectorUL"""
        return _pyBasePython.vectorvectorUL_pop(self)


    def append(self, x: 'vectorUL') -> "void":
        """append(vectorvectorUL self, vectorUL x)"""
        return _pyBasePython.vectorvectorUL_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorvectorUL self) -> bool"""
        return _pyBasePython.vectorvectorUL_empty(self)


    def size(self) -> "std::vector< std::vector< unsigned long > >::size_type":
        """size(vectorvectorUL self) -> std::vector< std::vector< unsigned long > >::size_type"""
        return _pyBasePython.vectorvectorUL_size(self)


    def swap(self, v: 'vectorvectorUL') -> "void":
        """swap(vectorvectorUL self, vectorvectorUL v)"""
        return _pyBasePython.vectorvectorUL_swap(self, v)


    def begin(self) -> "std::vector< std::vector< unsigned long > >::iterator":
        """begin(vectorvectorUL self) -> std::vector< std::vector< unsigned long > >::iterator"""
        return _pyBasePython.vectorvectorUL_begin(self)


    def end(self) -> "std::vector< std::vector< unsigned long > >::iterator":
        """end(vectorvectorUL self) -> std::vector< std::vector< unsigned long > >::iterator"""
        return _pyBasePython.vectorvectorUL_end(self)


    def rbegin(self) -> "std::vector< std::vector< unsigned long > >::reverse_iterator":
        """rbegin(vectorvectorUL self) -> std::vector< std::vector< unsigned long > >::reverse_iterator"""
        return _pyBasePython.vectorvectorUL_rbegin(self)


    def rend(self) -> "std::vector< std::vector< unsigned long > >::reverse_iterator":
        """rend(vectorvectorUL self) -> std::vector< std::vector< unsigned long > >::reverse_iterator"""
        return _pyBasePython.vectorvectorUL_rend(self)


    def clear(self) -> "void":
        """clear(vectorvectorUL self)"""
        return _pyBasePython.vectorvectorUL_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< unsigned long > >::allocator_type":
        """get_allocator(vectorvectorUL self) -> std::vector< std::vector< unsigned long > >::allocator_type"""
        return _pyBasePython.vectorvectorUL_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorvectorUL self)"""
        return _pyBasePython.vectorvectorUL_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< unsigned long > >::iterator":
        """
        erase(vectorvectorUL self, std::vector< std::vector< unsigned long > >::iterator pos) -> std::vector< std::vector< unsigned long > >::iterator
        erase(vectorvectorUL self, std::vector< std::vector< unsigned long > >::iterator first, std::vector< std::vector< unsigned long > >::iterator last) -> std::vector< std::vector< unsigned long > >::iterator
        """
        return _pyBasePython.vectorvectorUL_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(unsigned long)>)> self) -> vectorvectorUL
        __init__(std::vector<(std::vector<(unsigned long)>)> self, vectorvectorUL arg2) -> vectorvectorUL
        __init__(std::vector<(std::vector<(unsigned long)>)> self, std::vector< std::vector< unsigned long > >::size_type size) -> vectorvectorUL
        __init__(std::vector<(std::vector<(unsigned long)>)> self, std::vector< std::vector< unsigned long > >::size_type size, vectorUL value) -> vectorvectorUL
        """
        _pyBasePython.vectorvectorUL_swiginit(self, _pyBasePython.new_vectorvectorUL(*args))

    def push_back(self, x: 'vectorUL') -> "void":
        """push_back(vectorvectorUL self, vectorUL x)"""
        return _pyBasePython.vectorvectorUL_push_back(self, x)


    def front(self) -> "std::vector< std::vector< unsigned long > >::value_type const &":
        """front(vectorvectorUL self) -> vectorUL"""
        return _pyBasePython.vectorvectorUL_front(self)


    def back(self) -> "std::vector< std::vector< unsigned long > >::value_type const &":
        """back(vectorvectorUL self) -> vectorUL"""
        return _pyBasePython.vectorvectorUL_back(self)


    def assign(self, n: 'std::vector< std::vector< unsigned long > >::size_type', x: 'vectorUL') -> "void":
        """assign(vectorvectorUL self, std::vector< std::vector< unsigned long > >::size_type n, vectorUL x)"""
        return _pyBasePython.vectorvectorUL_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorvectorUL self, std::vector< std::vector< unsigned long > >::size_type new_size)
        resize(vectorvectorUL self, std::vector< std::vector< unsigned long > >::size_type new_size, vectorUL x)
        """
        return _pyBasePython.vectorvectorUL_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorvectorUL self, std::vector< std::vector< unsigned long > >::iterator pos, vectorUL x) -> std::vector< std::vector< unsigned long > >::iterator
        insert(vectorvectorUL self, std::vector< std::vector< unsigned long > >::iterator pos, std::vector< std::vector< unsigned long > >::size_type n, vectorUL x)
        """
        return _pyBasePython.vectorvectorUL_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< unsigned long > >::size_type') -> "void":
        """reserve(vectorvectorUL self, std::vector< std::vector< unsigned long > >::size_type n)"""
        return _pyBasePython.vectorvectorUL_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< unsigned long > >::size_type":
        """capacity(vectorvectorUL self) -> std::vector< std::vector< unsigned long > >::size_type"""
        return _pyBasePython.vectorvectorUL_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorUL
vectorvectorUL.iterator = new_instancemethod(_pyBasePython.vectorvectorUL_iterator, None, vectorvectorUL)
vectorvectorUL.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorUL___nonzero__, None, vectorvectorUL)
vectorvectorUL.__bool__ = new_instancemethod(_pyBasePython.vectorvectorUL___bool__, None, vectorvectorUL)
vectorvectorUL.__len__ = new_instancemethod(_pyBasePython.vectorvectorUL___len__, None, vectorvectorUL)
vectorvectorUL.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorUL___getslice__, None, vectorvectorUL)
vectorvectorUL.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorUL___setslice__, None, vectorvectorUL)
vectorvectorUL.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorUL___delslice__, None, vectorvectorUL)
vectorvectorUL.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorUL___delitem__, None, vectorvectorUL)
vectorvectorUL.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorUL___getitem__, None, vectorvectorUL)
vectorvectorUL.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorUL___setitem__, None, vectorvectorUL)
vectorvectorUL.pop = new_instancemethod(_pyBasePython.vectorvectorUL_pop, None, vectorvectorUL)
vectorvectorUL.append = new_instancemethod(_pyBasePython.vectorvectorUL_append, None, vectorvectorUL)
vectorvectorUL.empty = new_instancemethod(_pyBasePython.vectorvectorUL_empty, None, vectorvectorUL)
vectorvectorUL.size = new_instancemethod(_pyBasePython.vectorvectorUL_size, None, vectorvectorUL)
vectorvectorUL.swap = new_instancemethod(_pyBasePython.vectorvectorUL_swap, None, vectorvectorUL)
vectorvectorUL.begin = new_instancemethod(_pyBasePython.vectorvectorUL_begin, None, vectorvectorUL)
vectorvectorUL.end = new_instancemethod(_pyBasePython.vectorvectorUL_end, None, vectorvectorUL)
vectorvectorUL.rbegin = new_instancemethod(_pyBasePython.vectorvectorUL_rbegin, None, vectorvectorUL)
vectorvectorUL.rend = new_instancemethod(_pyBasePython.vectorvectorUL_rend, None, vectorvectorUL)
vectorvectorUL.clear = new_instancemethod(_pyBasePython.vectorvectorUL_clear, None, vectorvectorUL)
vectorvectorUL.get_allocator = new_instancemethod(_pyBasePython.vectorvectorUL_get_allocator, None, vectorvectorUL)
vectorvectorUL.pop_back = new_instancemethod(_pyBasePython.vectorvectorUL_pop_back, None, vectorvectorUL)
vectorvectorUL.erase = new_instancemethod(_pyBasePython.vectorvectorUL_erase, None, vectorvectorUL)
vectorvectorUL.push_back = new_instancemethod(_pyBasePython.vectorvectorUL_push_back, None, vectorvectorUL)
vectorvectorUL.front = new_instancemethod(_pyBasePython.vectorvectorUL_front, None, vectorvectorUL)
vectorvectorUL.back = new_instancemethod(_pyBasePython.vectorvectorUL_back, None, vectorvectorUL)
vectorvectorUL.assign = new_instancemethod(_pyBasePython.vectorvectorUL_assign, None, vectorvectorUL)
vectorvectorUL.resize = new_instancemethod(_pyBasePython.vectorvectorUL_resize, None, vectorvectorUL)
vectorvectorUL.insert = new_instancemethod(_pyBasePython.vectorvectorUL_insert, None, vectorvectorUL)
vectorvectorUL.reserve = new_instancemethod(_pyBasePython.vectorvectorUL_reserve, None, vectorvectorUL)
vectorvectorUL.capacity = new_instancemethod(_pyBasePython.vectorvectorUL_capacity, None, vectorvectorUL)
vectorvectorUL_swigregister = _pyBasePython.vectorvectorUL_swigregister
vectorvectorUL_swigregister(vectorvectorUL)

class vectorSC(object):
    """Proxy of C++ std::vector<(signed char)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorSC self) -> SwigPyIterator"""
        return _pyBasePython.vectorSC_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorSC self) -> bool"""
        return _pyBasePython.vectorSC___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorSC self) -> bool"""
        return _pyBasePython.vectorSC___bool__(self)


    def __len__(self) -> "std::vector< signed char >::size_type":
        """__len__(vectorSC self) -> std::vector< signed char >::size_type"""
        return _pyBasePython.vectorSC___len__(self)


    def __getslice__(self, i: 'std::vector< signed char >::difference_type', j: 'std::vector< signed char >::difference_type') -> "std::vector< signed char,std::allocator< signed char > > *":
        """__getslice__(vectorSC self, std::vector< signed char >::difference_type i, std::vector< signed char >::difference_type j) -> vectorSC"""
        return _pyBasePython.vectorSC___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorSC self, std::vector< signed char >::difference_type i, std::vector< signed char >::difference_type j)
        __setslice__(vectorSC self, std::vector< signed char >::difference_type i, std::vector< signed char >::difference_type j, vectorSC v)
        """
        return _pyBasePython.vectorSC___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< signed char >::difference_type', j: 'std::vector< signed char >::difference_type') -> "void":
        """__delslice__(vectorSC self, std::vector< signed char >::difference_type i, std::vector< signed char >::difference_type j)"""
        return _pyBasePython.vectorSC___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorSC self, std::vector< signed char >::difference_type i)
        __delitem__(vectorSC self, PySliceObject * slice)
        """
        return _pyBasePython.vectorSC___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< signed char >::value_type const &":
        """
        __getitem__(vectorSC self, PySliceObject * slice) -> vectorSC
        __getitem__(vectorSC self, std::vector< signed char >::difference_type i) -> std::vector< signed char >::value_type const &
        """
        return _pyBasePython.vectorSC___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorSC self, PySliceObject * slice, vectorSC v)
        __setitem__(vectorSC self, PySliceObject * slice)
        __setitem__(vectorSC self, std::vector< signed char >::difference_type i, std::vector< signed char >::value_type const & x)
        """
        return _pyBasePython.vectorSC___setitem__(self, *args)


    def pop(self) -> "std::vector< signed char >::value_type":
        """pop(vectorSC self) -> std::vector< signed char >::value_type"""
        return _pyBasePython.vectorSC_pop(self)


    def append(self, x: 'std::vector< signed char >::value_type const &') -> "void":
        """append(vectorSC self, std::vector< signed char >::value_type const & x)"""
        return _pyBasePython.vectorSC_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorSC self) -> bool"""
        return _pyBasePython.vectorSC_empty(self)


    def size(self) -> "std::vector< signed char >::size_type":
        """size(vectorSC self) -> std::vector< signed char >::size_type"""
        return _pyBasePython.vectorSC_size(self)


    def swap(self, v: 'vectorSC') -> "void":
        """swap(vectorSC self, vectorSC v)"""
        return _pyBasePython.vectorSC_swap(self, v)


    def begin(self) -> "std::vector< signed char >::iterator":
        """begin(vectorSC self) -> std::vector< signed char >::iterator"""
        return _pyBasePython.vectorSC_begin(self)


    def end(self) -> "std::vector< signed char >::iterator":
        """end(vectorSC self) -> std::vector< signed char >::iterator"""
        return _pyBasePython.vectorSC_end(self)


    def rbegin(self) -> "std::vector< signed char >::reverse_iterator":
        """rbegin(vectorSC self) -> std::vector< signed char >::reverse_iterator"""
        return _pyBasePython.vectorSC_rbegin(self)


    def rend(self) -> "std::vector< signed char >::reverse_iterator":
        """rend(vectorSC self) -> std::vector< signed char >::reverse_iterator"""
        return _pyBasePython.vectorSC_rend(self)


    def clear(self) -> "void":
        """clear(vectorSC self)"""
        return _pyBasePython.vectorSC_clear(self)


    def get_allocator(self) -> "std::vector< signed char >::allocator_type":
        """get_allocator(vectorSC self) -> std::vector< signed char >::allocator_type"""
        return _pyBasePython.vectorSC_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorSC self)"""
        return _pyBasePython.vectorSC_pop_back(self)


    def erase(self, *args) -> "std::vector< signed char >::iterator":
        """
        erase(vectorSC self, std::vector< signed char >::iterator pos) -> std::vector< signed char >::iterator
        erase(vectorSC self, std::vector< signed char >::iterator first, std::vector< signed char >::iterator last) -> std::vector< signed char >::iterator
        """
        return _pyBasePython.vectorSC_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(signed char)> self) -> vectorSC
        __init__(std::vector<(signed char)> self, vectorSC arg2) -> vectorSC
        __init__(std::vector<(signed char)> self, std::vector< signed char >::size_type size) -> vectorSC
        __init__(std::vector<(signed char)> self, std::vector< signed char >::size_type size, std::vector< signed char >::value_type const & value) -> vectorSC
        """
        _pyBasePython.vectorSC_swiginit(self, _pyBasePython.new_vectorSC(*args))

    def push_back(self, x: 'std::vector< signed char >::value_type const &') -> "void":
        """push_back(vectorSC self, std::vector< signed char >::value_type const & x)"""
        return _pyBasePython.vectorSC_push_back(self, x)


    def front(self) -> "std::vector< signed char >::value_type const &":
        """front(vectorSC self) -> std::vector< signed char >::value_type const &"""
        return _pyBasePython.vectorSC_front(self)


    def back(self) -> "std::vector< signed char >::value_type const &":
        """back(vectorSC self) -> std::vector< signed char >::value_type const &"""
        return _pyBasePython.vectorSC_back(self)


    def assign(self, n: 'std::vector< signed char >::size_type', x: 'std::vector< signed char >::value_type const &') -> "void":
        """assign(vectorSC self, std::vector< signed char >::size_type n, std::vector< signed char >::value_type const & x)"""
        return _pyBasePython.vectorSC_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorSC self, std::vector< signed char >::size_type new_size)
        resize(vectorSC self, std::vector< signed char >::size_type new_size, std::vector< signed char >::value_type const & x)
        """
        return _pyBasePython.vectorSC_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorSC self, std::vector< signed char >::iterator pos, std::vector< signed char >::value_type const & x) -> std::vector< signed char >::iterator
        insert(vectorSC self, std::vector< signed char >::iterator pos, std::vector< signed char >::size_type n, std::vector< signed char >::value_type const & x)
        """
        return _pyBasePython.vectorSC_insert(self, *args)


    def reserve(self, n: 'std::vector< signed char >::size_type') -> "void":
        """reserve(vectorSC self, std::vector< signed char >::size_type n)"""
        return _pyBasePython.vectorSC_reserve(self, n)


    def capacity(self) -> "std::vector< signed char >::size_type":
        """capacity(vectorSC self) -> std::vector< signed char >::size_type"""
        return _pyBasePython.vectorSC_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorSC
vectorSC.iterator = new_instancemethod(_pyBasePython.vectorSC_iterator, None, vectorSC)
vectorSC.__nonzero__ = new_instancemethod(_pyBasePython.vectorSC___nonzero__, None, vectorSC)
vectorSC.__bool__ = new_instancemethod(_pyBasePython.vectorSC___bool__, None, vectorSC)
vectorSC.__len__ = new_instancemethod(_pyBasePython.vectorSC___len__, None, vectorSC)
vectorSC.__getslice__ = new_instancemethod(_pyBasePython.vectorSC___getslice__, None, vectorSC)
vectorSC.__setslice__ = new_instancemethod(_pyBasePython.vectorSC___setslice__, None, vectorSC)
vectorSC.__delslice__ = new_instancemethod(_pyBasePython.vectorSC___delslice__, None, vectorSC)
vectorSC.__delitem__ = new_instancemethod(_pyBasePython.vectorSC___delitem__, None, vectorSC)
vectorSC.__getitem__ = new_instancemethod(_pyBasePython.vectorSC___getitem__, None, vectorSC)
vectorSC.__setitem__ = new_instancemethod(_pyBasePython.vectorSC___setitem__, None, vectorSC)
vectorSC.pop = new_instancemethod(_pyBasePython.vectorSC_pop, None, vectorSC)
vectorSC.append = new_instancemethod(_pyBasePython.vectorSC_append, None, vectorSC)
vectorSC.empty = new_instancemethod(_pyBasePython.vectorSC_empty, None, vectorSC)
vectorSC.size = new_instancemethod(_pyBasePython.vectorSC_size, None, vectorSC)
vectorSC.swap = new_instancemethod(_pyBasePython.vectorSC_swap, None, vectorSC)
vectorSC.begin = new_instancemethod(_pyBasePython.vectorSC_begin, None, vectorSC)
vectorSC.end = new_instancemethod(_pyBasePython.vectorSC_end, None, vectorSC)
vectorSC.rbegin = new_instancemethod(_pyBasePython.vectorSC_rbegin, None, vectorSC)
vectorSC.rend = new_instancemethod(_pyBasePython.vectorSC_rend, None, vectorSC)
vectorSC.clear = new_instancemethod(_pyBasePython.vectorSC_clear, None, vectorSC)
vectorSC.get_allocator = new_instancemethod(_pyBasePython.vectorSC_get_allocator, None, vectorSC)
vectorSC.pop_back = new_instancemethod(_pyBasePython.vectorSC_pop_back, None, vectorSC)
vectorSC.erase = new_instancemethod(_pyBasePython.vectorSC_erase, None, vectorSC)
vectorSC.push_back = new_instancemethod(_pyBasePython.vectorSC_push_back, None, vectorSC)
vectorSC.front = new_instancemethod(_pyBasePython.vectorSC_front, None, vectorSC)
vectorSC.back = new_instancemethod(_pyBasePython.vectorSC_back, None, vectorSC)
vectorSC.assign = new_instancemethod(_pyBasePython.vectorSC_assign, None, vectorSC)
vectorSC.resize = new_instancemethod(_pyBasePython.vectorSC_resize, None, vectorSC)
vectorSC.insert = new_instancemethod(_pyBasePython.vectorSC_insert, None, vectorSC)
vectorSC.reserve = new_instancemethod(_pyBasePython.vectorSC_reserve, None, vectorSC)
vectorSC.capacity = new_instancemethod(_pyBasePython.vectorSC_capacity, None, vectorSC)
vectorSC_swigregister = _pyBasePython.vectorSC_swigregister
vectorSC_swigregister(vectorSC)

class vectorvectorSC(object):
    """Proxy of C++ std::vector<(std::vector<(signed char)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorvectorSC self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorSC_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorvectorSC self) -> bool"""
        return _pyBasePython.vectorvectorSC___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorvectorSC self) -> bool"""
        return _pyBasePython.vectorvectorSC___bool__(self)


    def __len__(self) -> "std::vector< std::vector< signed char > >::size_type":
        """__len__(vectorvectorSC self) -> std::vector< std::vector< signed char > >::size_type"""
        return _pyBasePython.vectorvectorSC___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< signed char > >::difference_type', j: 'std::vector< std::vector< signed char > >::difference_type') -> "std::vector< std::vector< signed char,std::allocator< signed char > >,std::allocator< std::vector< signed char,std::allocator< signed char > > > > *":
        """__getslice__(vectorvectorSC self, std::vector< std::vector< signed char > >::difference_type i, std::vector< std::vector< signed char > >::difference_type j) -> vectorvectorSC"""
        return _pyBasePython.vectorvectorSC___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorvectorSC self, std::vector< std::vector< signed char > >::difference_type i, std::vector< std::vector< signed char > >::difference_type j)
        __setslice__(vectorvectorSC self, std::vector< std::vector< signed char > >::difference_type i, std::vector< std::vector< signed char > >::difference_type j, vectorvectorSC v)
        """
        return _pyBasePython.vectorvectorSC___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< signed char > >::difference_type', j: 'std::vector< std::vector< signed char > >::difference_type') -> "void":
        """__delslice__(vectorvectorSC self, std::vector< std::vector< signed char > >::difference_type i, std::vector< std::vector< signed char > >::difference_type j)"""
        return _pyBasePython.vectorvectorSC___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorvectorSC self, std::vector< std::vector< signed char > >::difference_type i)
        __delitem__(vectorvectorSC self, PySliceObject * slice)
        """
        return _pyBasePython.vectorvectorSC___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< signed char > >::value_type const &":
        """
        __getitem__(vectorvectorSC self, PySliceObject * slice) -> vectorvectorSC
        __getitem__(vectorvectorSC self, std::vector< std::vector< signed char > >::difference_type i) -> vectorSC
        """
        return _pyBasePython.vectorvectorSC___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorvectorSC self, PySliceObject * slice, vectorvectorSC v)
        __setitem__(vectorvectorSC self, PySliceObject * slice)
        __setitem__(vectorvectorSC self, std::vector< std::vector< signed char > >::difference_type i, vectorSC x)
        """
        return _pyBasePython.vectorvectorSC___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< signed char > >::value_type":
        """pop(vectorvectorSC self) -> vectorSC"""
        return _pyBasePython.vectorvectorSC_pop(self)


    def append(self, x: 'vectorSC') -> "void":
        """append(vectorvectorSC self, vectorSC x)"""
        return _pyBasePython.vectorvectorSC_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorvectorSC self) -> bool"""
        return _pyBasePython.vectorvectorSC_empty(self)


    def size(self) -> "std::vector< std::vector< signed char > >::size_type":
        """size(vectorvectorSC self) -> std::vector< std::vector< signed char > >::size_type"""
        return _pyBasePython.vectorvectorSC_size(self)


    def swap(self, v: 'vectorvectorSC') -> "void":
        """swap(vectorvectorSC self, vectorvectorSC v)"""
        return _pyBasePython.vectorvectorSC_swap(self, v)


    def begin(self) -> "std::vector< std::vector< signed char > >::iterator":
        """begin(vectorvectorSC self) -> std::vector< std::vector< signed char > >::iterator"""
        return _pyBasePython.vectorvectorSC_begin(self)


    def end(self) -> "std::vector< std::vector< signed char > >::iterator":
        """end(vectorvectorSC self) -> std::vector< std::vector< signed char > >::iterator"""
        return _pyBasePython.vectorvectorSC_end(self)


    def rbegin(self) -> "std::vector< std::vector< signed char > >::reverse_iterator":
        """rbegin(vectorvectorSC self) -> std::vector< std::vector< signed char > >::reverse_iterator"""
        return _pyBasePython.vectorvectorSC_rbegin(self)


    def rend(self) -> "std::vector< std::vector< signed char > >::reverse_iterator":
        """rend(vectorvectorSC self) -> std::vector< std::vector< signed char > >::reverse_iterator"""
        return _pyBasePython.vectorvectorSC_rend(self)


    def clear(self) -> "void":
        """clear(vectorvectorSC self)"""
        return _pyBasePython.vectorvectorSC_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< signed char > >::allocator_type":
        """get_allocator(vectorvectorSC self) -> std::vector< std::vector< signed char > >::allocator_type"""
        return _pyBasePython.vectorvectorSC_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorvectorSC self)"""
        return _pyBasePython.vectorvectorSC_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< signed char > >::iterator":
        """
        erase(vectorvectorSC self, std::vector< std::vector< signed char > >::iterator pos) -> std::vector< std::vector< signed char > >::iterator
        erase(vectorvectorSC self, std::vector< std::vector< signed char > >::iterator first, std::vector< std::vector< signed char > >::iterator last) -> std::vector< std::vector< signed char > >::iterator
        """
        return _pyBasePython.vectorvectorSC_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(signed char)>)> self) -> vectorvectorSC
        __init__(std::vector<(std::vector<(signed char)>)> self, vectorvectorSC arg2) -> vectorvectorSC
        __init__(std::vector<(std::vector<(signed char)>)> self, std::vector< std::vector< signed char > >::size_type size) -> vectorvectorSC
        __init__(std::vector<(std::vector<(signed char)>)> self, std::vector< std::vector< signed char > >::size_type size, vectorSC value) -> vectorvectorSC
        """
        _pyBasePython.vectorvectorSC_swiginit(self, _pyBasePython.new_vectorvectorSC(*args))

    def push_back(self, x: 'vectorSC') -> "void":
        """push_back(vectorvectorSC self, vectorSC x)"""
        return _pyBasePython.vectorvectorSC_push_back(self, x)


    def front(self) -> "std::vector< std::vector< signed char > >::value_type const &":
        """front(vectorvectorSC self) -> vectorSC"""
        return _pyBasePython.vectorvectorSC_front(self)


    def back(self) -> "std::vector< std::vector< signed char > >::value_type const &":
        """back(vectorvectorSC self) -> vectorSC"""
        return _pyBasePython.vectorvectorSC_back(self)


    def assign(self, n: 'std::vector< std::vector< signed char > >::size_type', x: 'vectorSC') -> "void":
        """assign(vectorvectorSC self, std::vector< std::vector< signed char > >::size_type n, vectorSC x)"""
        return _pyBasePython.vectorvectorSC_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorvectorSC self, std::vector< std::vector< signed char > >::size_type new_size)
        resize(vectorvectorSC self, std::vector< std::vector< signed char > >::size_type new_size, vectorSC x)
        """
        return _pyBasePython.vectorvectorSC_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorvectorSC self, std::vector< std::vector< signed char > >::iterator pos, vectorSC x) -> std::vector< std::vector< signed char > >::iterator
        insert(vectorvectorSC self, std::vector< std::vector< signed char > >::iterator pos, std::vector< std::vector< signed char > >::size_type n, vectorSC x)
        """
        return _pyBasePython.vectorvectorSC_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< signed char > >::size_type') -> "void":
        """reserve(vectorvectorSC self, std::vector< std::vector< signed char > >::size_type n)"""
        return _pyBasePython.vectorvectorSC_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< signed char > >::size_type":
        """capacity(vectorvectorSC self) -> std::vector< std::vector< signed char > >::size_type"""
        return _pyBasePython.vectorvectorSC_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorSC
vectorvectorSC.iterator = new_instancemethod(_pyBasePython.vectorvectorSC_iterator, None, vectorvectorSC)
vectorvectorSC.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorSC___nonzero__, None, vectorvectorSC)
vectorvectorSC.__bool__ = new_instancemethod(_pyBasePython.vectorvectorSC___bool__, None, vectorvectorSC)
vectorvectorSC.__len__ = new_instancemethod(_pyBasePython.vectorvectorSC___len__, None, vectorvectorSC)
vectorvectorSC.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorSC___getslice__, None, vectorvectorSC)
vectorvectorSC.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorSC___setslice__, None, vectorvectorSC)
vectorvectorSC.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorSC___delslice__, None, vectorvectorSC)
vectorvectorSC.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorSC___delitem__, None, vectorvectorSC)
vectorvectorSC.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorSC___getitem__, None, vectorvectorSC)
vectorvectorSC.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorSC___setitem__, None, vectorvectorSC)
vectorvectorSC.pop = new_instancemethod(_pyBasePython.vectorvectorSC_pop, None, vectorvectorSC)
vectorvectorSC.append = new_instancemethod(_pyBasePython.vectorvectorSC_append, None, vectorvectorSC)
vectorvectorSC.empty = new_instancemethod(_pyBasePython.vectorvectorSC_empty, None, vectorvectorSC)
vectorvectorSC.size = new_instancemethod(_pyBasePython.vectorvectorSC_size, None, vectorvectorSC)
vectorvectorSC.swap = new_instancemethod(_pyBasePython.vectorvectorSC_swap, None, vectorvectorSC)
vectorvectorSC.begin = new_instancemethod(_pyBasePython.vectorvectorSC_begin, None, vectorvectorSC)
vectorvectorSC.end = new_instancemethod(_pyBasePython.vectorvectorSC_end, None, vectorvectorSC)
vectorvectorSC.rbegin = new_instancemethod(_pyBasePython.vectorvectorSC_rbegin, None, vectorvectorSC)
vectorvectorSC.rend = new_instancemethod(_pyBasePython.vectorvectorSC_rend, None, vectorvectorSC)
vectorvectorSC.clear = new_instancemethod(_pyBasePython.vectorvectorSC_clear, None, vectorvectorSC)
vectorvectorSC.get_allocator = new_instancemethod(_pyBasePython.vectorvectorSC_get_allocator, None, vectorvectorSC)
vectorvectorSC.pop_back = new_instancemethod(_pyBasePython.vectorvectorSC_pop_back, None, vectorvectorSC)
vectorvectorSC.erase = new_instancemethod(_pyBasePython.vectorvectorSC_erase, None, vectorvectorSC)
vectorvectorSC.push_back = new_instancemethod(_pyBasePython.vectorvectorSC_push_back, None, vectorvectorSC)
vectorvectorSC.front = new_instancemethod(_pyBasePython.vectorvectorSC_front, None, vectorvectorSC)
vectorvectorSC.back = new_instancemethod(_pyBasePython.vectorvectorSC_back, None, vectorvectorSC)
vectorvectorSC.assign = new_instancemethod(_pyBasePython.vectorvectorSC_assign, None, vectorvectorSC)
vectorvectorSC.resize = new_instancemethod(_pyBasePython.vectorvectorSC_resize, None, vectorvectorSC)
vectorvectorSC.insert = new_instancemethod(_pyBasePython.vectorvectorSC_insert, None, vectorvectorSC)
vectorvectorSC.reserve = new_instancemethod(_pyBasePython.vectorvectorSC_reserve, None, vectorvectorSC)
vectorvectorSC.capacity = new_instancemethod(_pyBasePython.vectorvectorSC_capacity, None, vectorvectorSC)
vectorvectorSC_swigregister = _pyBasePython.vectorvectorSC_swigregister
vectorvectorSC_swigregister(vectorvectorSC)

class vectorSS(object):
    """Proxy of C++ std::vector<(short)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorSS self) -> SwigPyIterator"""
        return _pyBasePython.vectorSS_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorSS self) -> bool"""
        return _pyBasePython.vectorSS___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorSS self) -> bool"""
        return _pyBasePython.vectorSS___bool__(self)


    def __len__(self) -> "std::vector< short >::size_type":
        """__len__(vectorSS self) -> std::vector< short >::size_type"""
        return _pyBasePython.vectorSS___len__(self)


    def __getslice__(self, i: 'std::vector< short >::difference_type', j: 'std::vector< short >::difference_type') -> "std::vector< short,std::allocator< short > > *":
        """__getslice__(vectorSS self, std::vector< short >::difference_type i, std::vector< short >::difference_type j) -> vectorSS"""
        return _pyBasePython.vectorSS___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorSS self, std::vector< short >::difference_type i, std::vector< short >::difference_type j)
        __setslice__(vectorSS self, std::vector< short >::difference_type i, std::vector< short >::difference_type j, vectorSS v)
        """
        return _pyBasePython.vectorSS___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< short >::difference_type', j: 'std::vector< short >::difference_type') -> "void":
        """__delslice__(vectorSS self, std::vector< short >::difference_type i, std::vector< short >::difference_type j)"""
        return _pyBasePython.vectorSS___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorSS self, std::vector< short >::difference_type i)
        __delitem__(vectorSS self, PySliceObject * slice)
        """
        return _pyBasePython.vectorSS___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< short >::value_type const &":
        """
        __getitem__(vectorSS self, PySliceObject * slice) -> vectorSS
        __getitem__(vectorSS self, std::vector< short >::difference_type i) -> std::vector< short >::value_type const &
        """
        return _pyBasePython.vectorSS___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorSS self, PySliceObject * slice, vectorSS v)
        __setitem__(vectorSS self, PySliceObject * slice)
        __setitem__(vectorSS self, std::vector< short >::difference_type i, std::vector< short >::value_type const & x)
        """
        return _pyBasePython.vectorSS___setitem__(self, *args)


    def pop(self) -> "std::vector< short >::value_type":
        """pop(vectorSS self) -> std::vector< short >::value_type"""
        return _pyBasePython.vectorSS_pop(self)


    def append(self, x: 'std::vector< short >::value_type const &') -> "void":
        """append(vectorSS self, std::vector< short >::value_type const & x)"""
        return _pyBasePython.vectorSS_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorSS self) -> bool"""
        return _pyBasePython.vectorSS_empty(self)


    def size(self) -> "std::vector< short >::size_type":
        """size(vectorSS self) -> std::vector< short >::size_type"""
        return _pyBasePython.vectorSS_size(self)


    def swap(self, v: 'vectorSS') -> "void":
        """swap(vectorSS self, vectorSS v)"""
        return _pyBasePython.vectorSS_swap(self, v)


    def begin(self) -> "std::vector< short >::iterator":
        """begin(vectorSS self) -> std::vector< short >::iterator"""
        return _pyBasePython.vectorSS_begin(self)


    def end(self) -> "std::vector< short >::iterator":
        """end(vectorSS self) -> std::vector< short >::iterator"""
        return _pyBasePython.vectorSS_end(self)


    def rbegin(self) -> "std::vector< short >::reverse_iterator":
        """rbegin(vectorSS self) -> std::vector< short >::reverse_iterator"""
        return _pyBasePython.vectorSS_rbegin(self)


    def rend(self) -> "std::vector< short >::reverse_iterator":
        """rend(vectorSS self) -> std::vector< short >::reverse_iterator"""
        return _pyBasePython.vectorSS_rend(self)


    def clear(self) -> "void":
        """clear(vectorSS self)"""
        return _pyBasePython.vectorSS_clear(self)


    def get_allocator(self) -> "std::vector< short >::allocator_type":
        """get_allocator(vectorSS self) -> std::vector< short >::allocator_type"""
        return _pyBasePython.vectorSS_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorSS self)"""
        return _pyBasePython.vectorSS_pop_back(self)


    def erase(self, *args) -> "std::vector< short >::iterator":
        """
        erase(vectorSS self, std::vector< short >::iterator pos) -> std::vector< short >::iterator
        erase(vectorSS self, std::vector< short >::iterator first, std::vector< short >::iterator last) -> std::vector< short >::iterator
        """
        return _pyBasePython.vectorSS_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(short)> self) -> vectorSS
        __init__(std::vector<(short)> self, vectorSS arg2) -> vectorSS
        __init__(std::vector<(short)> self, std::vector< short >::size_type size) -> vectorSS
        __init__(std::vector<(short)> self, std::vector< short >::size_type size, std::vector< short >::value_type const & value) -> vectorSS
        """
        _pyBasePython.vectorSS_swiginit(self, _pyBasePython.new_vectorSS(*args))

    def push_back(self, x: 'std::vector< short >::value_type const &') -> "void":
        """push_back(vectorSS self, std::vector< short >::value_type const & x)"""
        return _pyBasePython.vectorSS_push_back(self, x)


    def front(self) -> "std::vector< short >::value_type const &":
        """front(vectorSS self) -> std::vector< short >::value_type const &"""
        return _pyBasePython.vectorSS_front(self)


    def back(self) -> "std::vector< short >::value_type const &":
        """back(vectorSS self) -> std::vector< short >::value_type const &"""
        return _pyBasePython.vectorSS_back(self)


    def assign(self, n: 'std::vector< short >::size_type', x: 'std::vector< short >::value_type const &') -> "void":
        """assign(vectorSS self, std::vector< short >::size_type n, std::vector< short >::value_type const & x)"""
        return _pyBasePython.vectorSS_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorSS self, std::vector< short >::size_type new_size)
        resize(vectorSS self, std::vector< short >::size_type new_size, std::vector< short >::value_type const & x)
        """
        return _pyBasePython.vectorSS_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorSS self, std::vector< short >::iterator pos, std::vector< short >::value_type const & x) -> std::vector< short >::iterator
        insert(vectorSS self, std::vector< short >::iterator pos, std::vector< short >::size_type n, std::vector< short >::value_type const & x)
        """
        return _pyBasePython.vectorSS_insert(self, *args)


    def reserve(self, n: 'std::vector< short >::size_type') -> "void":
        """reserve(vectorSS self, std::vector< short >::size_type n)"""
        return _pyBasePython.vectorSS_reserve(self, n)


    def capacity(self) -> "std::vector< short >::size_type":
        """capacity(vectorSS self) -> std::vector< short >::size_type"""
        return _pyBasePython.vectorSS_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorSS
vectorSS.iterator = new_instancemethod(_pyBasePython.vectorSS_iterator, None, vectorSS)
vectorSS.__nonzero__ = new_instancemethod(_pyBasePython.vectorSS___nonzero__, None, vectorSS)
vectorSS.__bool__ = new_instancemethod(_pyBasePython.vectorSS___bool__, None, vectorSS)
vectorSS.__len__ = new_instancemethod(_pyBasePython.vectorSS___len__, None, vectorSS)
vectorSS.__getslice__ = new_instancemethod(_pyBasePython.vectorSS___getslice__, None, vectorSS)
vectorSS.__setslice__ = new_instancemethod(_pyBasePython.vectorSS___setslice__, None, vectorSS)
vectorSS.__delslice__ = new_instancemethod(_pyBasePython.vectorSS___delslice__, None, vectorSS)
vectorSS.__delitem__ = new_instancemethod(_pyBasePython.vectorSS___delitem__, None, vectorSS)
vectorSS.__getitem__ = new_instancemethod(_pyBasePython.vectorSS___getitem__, None, vectorSS)
vectorSS.__setitem__ = new_instancemethod(_pyBasePython.vectorSS___setitem__, None, vectorSS)
vectorSS.pop = new_instancemethod(_pyBasePython.vectorSS_pop, None, vectorSS)
vectorSS.append = new_instancemethod(_pyBasePython.vectorSS_append, None, vectorSS)
vectorSS.empty = new_instancemethod(_pyBasePython.vectorSS_empty, None, vectorSS)
vectorSS.size = new_instancemethod(_pyBasePython.vectorSS_size, None, vectorSS)
vectorSS.swap = new_instancemethod(_pyBasePython.vectorSS_swap, None, vectorSS)
vectorSS.begin = new_instancemethod(_pyBasePython.vectorSS_begin, None, vectorSS)
vectorSS.end = new_instancemethod(_pyBasePython.vectorSS_end, None, vectorSS)
vectorSS.rbegin = new_instancemethod(_pyBasePython.vectorSS_rbegin, None, vectorSS)
vectorSS.rend = new_instancemethod(_pyBasePython.vectorSS_rend, None, vectorSS)
vectorSS.clear = new_instancemethod(_pyBasePython.vectorSS_clear, None, vectorSS)
vectorSS.get_allocator = new_instancemethod(_pyBasePython.vectorSS_get_allocator, None, vectorSS)
vectorSS.pop_back = new_instancemethod(_pyBasePython.vectorSS_pop_back, None, vectorSS)
vectorSS.erase = new_instancemethod(_pyBasePython.vectorSS_erase, None, vectorSS)
vectorSS.push_back = new_instancemethod(_pyBasePython.vectorSS_push_back, None, vectorSS)
vectorSS.front = new_instancemethod(_pyBasePython.vectorSS_front, None, vectorSS)
vectorSS.back = new_instancemethod(_pyBasePython.vectorSS_back, None, vectorSS)
vectorSS.assign = new_instancemethod(_pyBasePython.vectorSS_assign, None, vectorSS)
vectorSS.resize = new_instancemethod(_pyBasePython.vectorSS_resize, None, vectorSS)
vectorSS.insert = new_instancemethod(_pyBasePython.vectorSS_insert, None, vectorSS)
vectorSS.reserve = new_instancemethod(_pyBasePython.vectorSS_reserve, None, vectorSS)
vectorSS.capacity = new_instancemethod(_pyBasePython.vectorSS_capacity, None, vectorSS)
vectorSS_swigregister = _pyBasePython.vectorSS_swigregister
vectorSS_swigregister(vectorSS)

class vectorvectorSS(object):
    """Proxy of C++ std::vector<(std::vector<(short)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorvectorSS self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorSS_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorvectorSS self) -> bool"""
        return _pyBasePython.vectorvectorSS___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorvectorSS self) -> bool"""
        return _pyBasePython.vectorvectorSS___bool__(self)


    def __len__(self) -> "std::vector< std::vector< short > >::size_type":
        """__len__(vectorvectorSS self) -> std::vector< std::vector< short > >::size_type"""
        return _pyBasePython.vectorvectorSS___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< short > >::difference_type', j: 'std::vector< std::vector< short > >::difference_type') -> "std::vector< std::vector< short,std::allocator< short > >,std::allocator< std::vector< short,std::allocator< short > > > > *":
        """__getslice__(vectorvectorSS self, std::vector< std::vector< short > >::difference_type i, std::vector< std::vector< short > >::difference_type j) -> vectorvectorSS"""
        return _pyBasePython.vectorvectorSS___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorvectorSS self, std::vector< std::vector< short > >::difference_type i, std::vector< std::vector< short > >::difference_type j)
        __setslice__(vectorvectorSS self, std::vector< std::vector< short > >::difference_type i, std::vector< std::vector< short > >::difference_type j, vectorvectorSS v)
        """
        return _pyBasePython.vectorvectorSS___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< short > >::difference_type', j: 'std::vector< std::vector< short > >::difference_type') -> "void":
        """__delslice__(vectorvectorSS self, std::vector< std::vector< short > >::difference_type i, std::vector< std::vector< short > >::difference_type j)"""
        return _pyBasePython.vectorvectorSS___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorvectorSS self, std::vector< std::vector< short > >::difference_type i)
        __delitem__(vectorvectorSS self, PySliceObject * slice)
        """
        return _pyBasePython.vectorvectorSS___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< short > >::value_type const &":
        """
        __getitem__(vectorvectorSS self, PySliceObject * slice) -> vectorvectorSS
        __getitem__(vectorvectorSS self, std::vector< std::vector< short > >::difference_type i) -> vectorSS
        """
        return _pyBasePython.vectorvectorSS___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorvectorSS self, PySliceObject * slice, vectorvectorSS v)
        __setitem__(vectorvectorSS self, PySliceObject * slice)
        __setitem__(vectorvectorSS self, std::vector< std::vector< short > >::difference_type i, vectorSS x)
        """
        return _pyBasePython.vectorvectorSS___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< short > >::value_type":
        """pop(vectorvectorSS self) -> vectorSS"""
        return _pyBasePython.vectorvectorSS_pop(self)


    def append(self, x: 'vectorSS') -> "void":
        """append(vectorvectorSS self, vectorSS x)"""
        return _pyBasePython.vectorvectorSS_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorvectorSS self) -> bool"""
        return _pyBasePython.vectorvectorSS_empty(self)


    def size(self) -> "std::vector< std::vector< short > >::size_type":
        """size(vectorvectorSS self) -> std::vector< std::vector< short > >::size_type"""
        return _pyBasePython.vectorvectorSS_size(self)


    def swap(self, v: 'vectorvectorSS') -> "void":
        """swap(vectorvectorSS self, vectorvectorSS v)"""
        return _pyBasePython.vectorvectorSS_swap(self, v)


    def begin(self) -> "std::vector< std::vector< short > >::iterator":
        """begin(vectorvectorSS self) -> std::vector< std::vector< short > >::iterator"""
        return _pyBasePython.vectorvectorSS_begin(self)


    def end(self) -> "std::vector< std::vector< short > >::iterator":
        """end(vectorvectorSS self) -> std::vector< std::vector< short > >::iterator"""
        return _pyBasePython.vectorvectorSS_end(self)


    def rbegin(self) -> "std::vector< std::vector< short > >::reverse_iterator":
        """rbegin(vectorvectorSS self) -> std::vector< std::vector< short > >::reverse_iterator"""
        return _pyBasePython.vectorvectorSS_rbegin(self)


    def rend(self) -> "std::vector< std::vector< short > >::reverse_iterator":
        """rend(vectorvectorSS self) -> std::vector< std::vector< short > >::reverse_iterator"""
        return _pyBasePython.vectorvectorSS_rend(self)


    def clear(self) -> "void":
        """clear(vectorvectorSS self)"""
        return _pyBasePython.vectorvectorSS_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< short > >::allocator_type":
        """get_allocator(vectorvectorSS self) -> std::vector< std::vector< short > >::allocator_type"""
        return _pyBasePython.vectorvectorSS_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorvectorSS self)"""
        return _pyBasePython.vectorvectorSS_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< short > >::iterator":
        """
        erase(vectorvectorSS self, std::vector< std::vector< short > >::iterator pos) -> std::vector< std::vector< short > >::iterator
        erase(vectorvectorSS self, std::vector< std::vector< short > >::iterator first, std::vector< std::vector< short > >::iterator last) -> std::vector< std::vector< short > >::iterator
        """
        return _pyBasePython.vectorvectorSS_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(short)>)> self) -> vectorvectorSS
        __init__(std::vector<(std::vector<(short)>)> self, vectorvectorSS arg2) -> vectorvectorSS
        __init__(std::vector<(std::vector<(short)>)> self, std::vector< std::vector< short > >::size_type size) -> vectorvectorSS
        __init__(std::vector<(std::vector<(short)>)> self, std::vector< std::vector< short > >::size_type size, vectorSS value) -> vectorvectorSS
        """
        _pyBasePython.vectorvectorSS_swiginit(self, _pyBasePython.new_vectorvectorSS(*args))

    def push_back(self, x: 'vectorSS') -> "void":
        """push_back(vectorvectorSS self, vectorSS x)"""
        return _pyBasePython.vectorvectorSS_push_back(self, x)


    def front(self) -> "std::vector< std::vector< short > >::value_type const &":
        """front(vectorvectorSS self) -> vectorSS"""
        return _pyBasePython.vectorvectorSS_front(self)


    def back(self) -> "std::vector< std::vector< short > >::value_type const &":
        """back(vectorvectorSS self) -> vectorSS"""
        return _pyBasePython.vectorvectorSS_back(self)


    def assign(self, n: 'std::vector< std::vector< short > >::size_type', x: 'vectorSS') -> "void":
        """assign(vectorvectorSS self, std::vector< std::vector< short > >::size_type n, vectorSS x)"""
        return _pyBasePython.vectorvectorSS_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorvectorSS self, std::vector< std::vector< short > >::size_type new_size)
        resize(vectorvectorSS self, std::vector< std::vector< short > >::size_type new_size, vectorSS x)
        """
        return _pyBasePython.vectorvectorSS_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorvectorSS self, std::vector< std::vector< short > >::iterator pos, vectorSS x) -> std::vector< std::vector< short > >::iterator
        insert(vectorvectorSS self, std::vector< std::vector< short > >::iterator pos, std::vector< std::vector< short > >::size_type n, vectorSS x)
        """
        return _pyBasePython.vectorvectorSS_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< short > >::size_type') -> "void":
        """reserve(vectorvectorSS self, std::vector< std::vector< short > >::size_type n)"""
        return _pyBasePython.vectorvectorSS_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< short > >::size_type":
        """capacity(vectorvectorSS self) -> std::vector< std::vector< short > >::size_type"""
        return _pyBasePython.vectorvectorSS_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorSS
vectorvectorSS.iterator = new_instancemethod(_pyBasePython.vectorvectorSS_iterator, None, vectorvectorSS)
vectorvectorSS.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorSS___nonzero__, None, vectorvectorSS)
vectorvectorSS.__bool__ = new_instancemethod(_pyBasePython.vectorvectorSS___bool__, None, vectorvectorSS)
vectorvectorSS.__len__ = new_instancemethod(_pyBasePython.vectorvectorSS___len__, None, vectorvectorSS)
vectorvectorSS.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorSS___getslice__, None, vectorvectorSS)
vectorvectorSS.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorSS___setslice__, None, vectorvectorSS)
vectorvectorSS.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorSS___delslice__, None, vectorvectorSS)
vectorvectorSS.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorSS___delitem__, None, vectorvectorSS)
vectorvectorSS.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorSS___getitem__, None, vectorvectorSS)
vectorvectorSS.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorSS___setitem__, None, vectorvectorSS)
vectorvectorSS.pop = new_instancemethod(_pyBasePython.vectorvectorSS_pop, None, vectorvectorSS)
vectorvectorSS.append = new_instancemethod(_pyBasePython.vectorvectorSS_append, None, vectorvectorSS)
vectorvectorSS.empty = new_instancemethod(_pyBasePython.vectorvectorSS_empty, None, vectorvectorSS)
vectorvectorSS.size = new_instancemethod(_pyBasePython.vectorvectorSS_size, None, vectorvectorSS)
vectorvectorSS.swap = new_instancemethod(_pyBasePython.vectorvectorSS_swap, None, vectorvectorSS)
vectorvectorSS.begin = new_instancemethod(_pyBasePython.vectorvectorSS_begin, None, vectorvectorSS)
vectorvectorSS.end = new_instancemethod(_pyBasePython.vectorvectorSS_end, None, vectorvectorSS)
vectorvectorSS.rbegin = new_instancemethod(_pyBasePython.vectorvectorSS_rbegin, None, vectorvectorSS)
vectorvectorSS.rend = new_instancemethod(_pyBasePython.vectorvectorSS_rend, None, vectorvectorSS)
vectorvectorSS.clear = new_instancemethod(_pyBasePython.vectorvectorSS_clear, None, vectorvectorSS)
vectorvectorSS.get_allocator = new_instancemethod(_pyBasePython.vectorvectorSS_get_allocator, None, vectorvectorSS)
vectorvectorSS.pop_back = new_instancemethod(_pyBasePython.vectorvectorSS_pop_back, None, vectorvectorSS)
vectorvectorSS.erase = new_instancemethod(_pyBasePython.vectorvectorSS_erase, None, vectorvectorSS)
vectorvectorSS.push_back = new_instancemethod(_pyBasePython.vectorvectorSS_push_back, None, vectorvectorSS)
vectorvectorSS.front = new_instancemethod(_pyBasePython.vectorvectorSS_front, None, vectorvectorSS)
vectorvectorSS.back = new_instancemethod(_pyBasePython.vectorvectorSS_back, None, vectorvectorSS)
vectorvectorSS.assign = new_instancemethod(_pyBasePython.vectorvectorSS_assign, None, vectorvectorSS)
vectorvectorSS.resize = new_instancemethod(_pyBasePython.vectorvectorSS_resize, None, vectorvectorSS)
vectorvectorSS.insert = new_instancemethod(_pyBasePython.vectorvectorSS_insert, None, vectorvectorSS)
vectorvectorSS.reserve = new_instancemethod(_pyBasePython.vectorvectorSS_reserve, None, vectorvectorSS)
vectorvectorSS.capacity = new_instancemethod(_pyBasePython.vectorvectorSS_capacity, None, vectorvectorSS)
vectorvectorSS_swigregister = _pyBasePython.vectorvectorSS_swigregister
vectorvectorSS_swigregister(vectorvectorSS)

class vectorSL(object):
    """Proxy of C++ std::vector<(long)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorSL self) -> SwigPyIterator"""
        return _pyBasePython.vectorSL_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorSL self) -> bool"""
        return _pyBasePython.vectorSL___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorSL self) -> bool"""
        return _pyBasePython.vectorSL___bool__(self)


    def __len__(self) -> "std::vector< long >::size_type":
        """__len__(vectorSL self) -> std::vector< long >::size_type"""
        return _pyBasePython.vectorSL___len__(self)


    def __getslice__(self, i: 'std::vector< long >::difference_type', j: 'std::vector< long >::difference_type') -> "std::vector< long,std::allocator< long > > *":
        """__getslice__(vectorSL self, std::vector< long >::difference_type i, std::vector< long >::difference_type j) -> vectorSL"""
        return _pyBasePython.vectorSL___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorSL self, std::vector< long >::difference_type i, std::vector< long >::difference_type j)
        __setslice__(vectorSL self, std::vector< long >::difference_type i, std::vector< long >::difference_type j, vectorSL v)
        """
        return _pyBasePython.vectorSL___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< long >::difference_type', j: 'std::vector< long >::difference_type') -> "void":
        """__delslice__(vectorSL self, std::vector< long >::difference_type i, std::vector< long >::difference_type j)"""
        return _pyBasePython.vectorSL___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorSL self, std::vector< long >::difference_type i)
        __delitem__(vectorSL self, PySliceObject * slice)
        """
        return _pyBasePython.vectorSL___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< long >::value_type const &":
        """
        __getitem__(vectorSL self, PySliceObject * slice) -> vectorSL
        __getitem__(vectorSL self, std::vector< long >::difference_type i) -> std::vector< long >::value_type const &
        """
        return _pyBasePython.vectorSL___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorSL self, PySliceObject * slice, vectorSL v)
        __setitem__(vectorSL self, PySliceObject * slice)
        __setitem__(vectorSL self, std::vector< long >::difference_type i, std::vector< long >::value_type const & x)
        """
        return _pyBasePython.vectorSL___setitem__(self, *args)


    def pop(self) -> "std::vector< long >::value_type":
        """pop(vectorSL self) -> std::vector< long >::value_type"""
        return _pyBasePython.vectorSL_pop(self)


    def append(self, x: 'std::vector< long >::value_type const &') -> "void":
        """append(vectorSL self, std::vector< long >::value_type const & x)"""
        return _pyBasePython.vectorSL_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorSL self) -> bool"""
        return _pyBasePython.vectorSL_empty(self)


    def size(self) -> "std::vector< long >::size_type":
        """size(vectorSL self) -> std::vector< long >::size_type"""
        return _pyBasePython.vectorSL_size(self)


    def swap(self, v: 'vectorSL') -> "void":
        """swap(vectorSL self, vectorSL v)"""
        return _pyBasePython.vectorSL_swap(self, v)


    def begin(self) -> "std::vector< long >::iterator":
        """begin(vectorSL self) -> std::vector< long >::iterator"""
        return _pyBasePython.vectorSL_begin(self)


    def end(self) -> "std::vector< long >::iterator":
        """end(vectorSL self) -> std::vector< long >::iterator"""
        return _pyBasePython.vectorSL_end(self)


    def rbegin(self) -> "std::vector< long >::reverse_iterator":
        """rbegin(vectorSL self) -> std::vector< long >::reverse_iterator"""
        return _pyBasePython.vectorSL_rbegin(self)


    def rend(self) -> "std::vector< long >::reverse_iterator":
        """rend(vectorSL self) -> std::vector< long >::reverse_iterator"""
        return _pyBasePython.vectorSL_rend(self)


    def clear(self) -> "void":
        """clear(vectorSL self)"""
        return _pyBasePython.vectorSL_clear(self)


    def get_allocator(self) -> "std::vector< long >::allocator_type":
        """get_allocator(vectorSL self) -> std::vector< long >::allocator_type"""
        return _pyBasePython.vectorSL_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorSL self)"""
        return _pyBasePython.vectorSL_pop_back(self)


    def erase(self, *args) -> "std::vector< long >::iterator":
        """
        erase(vectorSL self, std::vector< long >::iterator pos) -> std::vector< long >::iterator
        erase(vectorSL self, std::vector< long >::iterator first, std::vector< long >::iterator last) -> std::vector< long >::iterator
        """
        return _pyBasePython.vectorSL_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(long)> self) -> vectorSL
        __init__(std::vector<(long)> self, vectorSL arg2) -> vectorSL
        __init__(std::vector<(long)> self, std::vector< long >::size_type size) -> vectorSL
        __init__(std::vector<(long)> self, std::vector< long >::size_type size, std::vector< long >::value_type const & value) -> vectorSL
        """
        _pyBasePython.vectorSL_swiginit(self, _pyBasePython.new_vectorSL(*args))

    def push_back(self, x: 'std::vector< long >::value_type const &') -> "void":
        """push_back(vectorSL self, std::vector< long >::value_type const & x)"""
        return _pyBasePython.vectorSL_push_back(self, x)


    def front(self) -> "std::vector< long >::value_type const &":
        """front(vectorSL self) -> std::vector< long >::value_type const &"""
        return _pyBasePython.vectorSL_front(self)


    def back(self) -> "std::vector< long >::value_type const &":
        """back(vectorSL self) -> std::vector< long >::value_type const &"""
        return _pyBasePython.vectorSL_back(self)


    def assign(self, n: 'std::vector< long >::size_type', x: 'std::vector< long >::value_type const &') -> "void":
        """assign(vectorSL self, std::vector< long >::size_type n, std::vector< long >::value_type const & x)"""
        return _pyBasePython.vectorSL_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorSL self, std::vector< long >::size_type new_size)
        resize(vectorSL self, std::vector< long >::size_type new_size, std::vector< long >::value_type const & x)
        """
        return _pyBasePython.vectorSL_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorSL self, std::vector< long >::iterator pos, std::vector< long >::value_type const & x) -> std::vector< long >::iterator
        insert(vectorSL self, std::vector< long >::iterator pos, std::vector< long >::size_type n, std::vector< long >::value_type const & x)
        """
        return _pyBasePython.vectorSL_insert(self, *args)


    def reserve(self, n: 'std::vector< long >::size_type') -> "void":
        """reserve(vectorSL self, std::vector< long >::size_type n)"""
        return _pyBasePython.vectorSL_reserve(self, n)


    def capacity(self) -> "std::vector< long >::size_type":
        """capacity(vectorSL self) -> std::vector< long >::size_type"""
        return _pyBasePython.vectorSL_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorSL
vectorSL.iterator = new_instancemethod(_pyBasePython.vectorSL_iterator, None, vectorSL)
vectorSL.__nonzero__ = new_instancemethod(_pyBasePython.vectorSL___nonzero__, None, vectorSL)
vectorSL.__bool__ = new_instancemethod(_pyBasePython.vectorSL___bool__, None, vectorSL)
vectorSL.__len__ = new_instancemethod(_pyBasePython.vectorSL___len__, None, vectorSL)
vectorSL.__getslice__ = new_instancemethod(_pyBasePython.vectorSL___getslice__, None, vectorSL)
vectorSL.__setslice__ = new_instancemethod(_pyBasePython.vectorSL___setslice__, None, vectorSL)
vectorSL.__delslice__ = new_instancemethod(_pyBasePython.vectorSL___delslice__, None, vectorSL)
vectorSL.__delitem__ = new_instancemethod(_pyBasePython.vectorSL___delitem__, None, vectorSL)
vectorSL.__getitem__ = new_instancemethod(_pyBasePython.vectorSL___getitem__, None, vectorSL)
vectorSL.__setitem__ = new_instancemethod(_pyBasePython.vectorSL___setitem__, None, vectorSL)
vectorSL.pop = new_instancemethod(_pyBasePython.vectorSL_pop, None, vectorSL)
vectorSL.append = new_instancemethod(_pyBasePython.vectorSL_append, None, vectorSL)
vectorSL.empty = new_instancemethod(_pyBasePython.vectorSL_empty, None, vectorSL)
vectorSL.size = new_instancemethod(_pyBasePython.vectorSL_size, None, vectorSL)
vectorSL.swap = new_instancemethod(_pyBasePython.vectorSL_swap, None, vectorSL)
vectorSL.begin = new_instancemethod(_pyBasePython.vectorSL_begin, None, vectorSL)
vectorSL.end = new_instancemethod(_pyBasePython.vectorSL_end, None, vectorSL)
vectorSL.rbegin = new_instancemethod(_pyBasePython.vectorSL_rbegin, None, vectorSL)
vectorSL.rend = new_instancemethod(_pyBasePython.vectorSL_rend, None, vectorSL)
vectorSL.clear = new_instancemethod(_pyBasePython.vectorSL_clear, None, vectorSL)
vectorSL.get_allocator = new_instancemethod(_pyBasePython.vectorSL_get_allocator, None, vectorSL)
vectorSL.pop_back = new_instancemethod(_pyBasePython.vectorSL_pop_back, None, vectorSL)
vectorSL.erase = new_instancemethod(_pyBasePython.vectorSL_erase, None, vectorSL)
vectorSL.push_back = new_instancemethod(_pyBasePython.vectorSL_push_back, None, vectorSL)
vectorSL.front = new_instancemethod(_pyBasePython.vectorSL_front, None, vectorSL)
vectorSL.back = new_instancemethod(_pyBasePython.vectorSL_back, None, vectorSL)
vectorSL.assign = new_instancemethod(_pyBasePython.vectorSL_assign, None, vectorSL)
vectorSL.resize = new_instancemethod(_pyBasePython.vectorSL_resize, None, vectorSL)
vectorSL.insert = new_instancemethod(_pyBasePython.vectorSL_insert, None, vectorSL)
vectorSL.reserve = new_instancemethod(_pyBasePython.vectorSL_reserve, None, vectorSL)
vectorSL.capacity = new_instancemethod(_pyBasePython.vectorSL_capacity, None, vectorSL)
vectorSL_swigregister = _pyBasePython.vectorSL_swigregister
vectorSL_swigregister(vectorSL)

class vectorvectorSL(object):
    """Proxy of C++ std::vector<(std::vector<(long)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorvectorSL self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorSL_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorvectorSL self) -> bool"""
        return _pyBasePython.vectorvectorSL___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorvectorSL self) -> bool"""
        return _pyBasePython.vectorvectorSL___bool__(self)


    def __len__(self) -> "std::vector< std::vector< long > >::size_type":
        """__len__(vectorvectorSL self) -> std::vector< std::vector< long > >::size_type"""
        return _pyBasePython.vectorvectorSL___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< long > >::difference_type', j: 'std::vector< std::vector< long > >::difference_type') -> "std::vector< std::vector< long,std::allocator< long > >,std::allocator< std::vector< long,std::allocator< long > > > > *":
        """__getslice__(vectorvectorSL self, std::vector< std::vector< long > >::difference_type i, std::vector< std::vector< long > >::difference_type j) -> vectorvectorSL"""
        return _pyBasePython.vectorvectorSL___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorvectorSL self, std::vector< std::vector< long > >::difference_type i, std::vector< std::vector< long > >::difference_type j)
        __setslice__(vectorvectorSL self, std::vector< std::vector< long > >::difference_type i, std::vector< std::vector< long > >::difference_type j, vectorvectorSL v)
        """
        return _pyBasePython.vectorvectorSL___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< long > >::difference_type', j: 'std::vector< std::vector< long > >::difference_type') -> "void":
        """__delslice__(vectorvectorSL self, std::vector< std::vector< long > >::difference_type i, std::vector< std::vector< long > >::difference_type j)"""
        return _pyBasePython.vectorvectorSL___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorvectorSL self, std::vector< std::vector< long > >::difference_type i)
        __delitem__(vectorvectorSL self, PySliceObject * slice)
        """
        return _pyBasePython.vectorvectorSL___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< long > >::value_type const &":
        """
        __getitem__(vectorvectorSL self, PySliceObject * slice) -> vectorvectorSL
        __getitem__(vectorvectorSL self, std::vector< std::vector< long > >::difference_type i) -> vectorSL
        """
        return _pyBasePython.vectorvectorSL___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorvectorSL self, PySliceObject * slice, vectorvectorSL v)
        __setitem__(vectorvectorSL self, PySliceObject * slice)
        __setitem__(vectorvectorSL self, std::vector< std::vector< long > >::difference_type i, vectorSL x)
        """
        return _pyBasePython.vectorvectorSL___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< long > >::value_type":
        """pop(vectorvectorSL self) -> vectorSL"""
        return _pyBasePython.vectorvectorSL_pop(self)


    def append(self, x: 'vectorSL') -> "void":
        """append(vectorvectorSL self, vectorSL x)"""
        return _pyBasePython.vectorvectorSL_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorvectorSL self) -> bool"""
        return _pyBasePython.vectorvectorSL_empty(self)


    def size(self) -> "std::vector< std::vector< long > >::size_type":
        """size(vectorvectorSL self) -> std::vector< std::vector< long > >::size_type"""
        return _pyBasePython.vectorvectorSL_size(self)


    def swap(self, v: 'vectorvectorSL') -> "void":
        """swap(vectorvectorSL self, vectorvectorSL v)"""
        return _pyBasePython.vectorvectorSL_swap(self, v)


    def begin(self) -> "std::vector< std::vector< long > >::iterator":
        """begin(vectorvectorSL self) -> std::vector< std::vector< long > >::iterator"""
        return _pyBasePython.vectorvectorSL_begin(self)


    def end(self) -> "std::vector< std::vector< long > >::iterator":
        """end(vectorvectorSL self) -> std::vector< std::vector< long > >::iterator"""
        return _pyBasePython.vectorvectorSL_end(self)


    def rbegin(self) -> "std::vector< std::vector< long > >::reverse_iterator":
        """rbegin(vectorvectorSL self) -> std::vector< std::vector< long > >::reverse_iterator"""
        return _pyBasePython.vectorvectorSL_rbegin(self)


    def rend(self) -> "std::vector< std::vector< long > >::reverse_iterator":
        """rend(vectorvectorSL self) -> std::vector< std::vector< long > >::reverse_iterator"""
        return _pyBasePython.vectorvectorSL_rend(self)


    def clear(self) -> "void":
        """clear(vectorvectorSL self)"""
        return _pyBasePython.vectorvectorSL_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< long > >::allocator_type":
        """get_allocator(vectorvectorSL self) -> std::vector< std::vector< long > >::allocator_type"""
        return _pyBasePython.vectorvectorSL_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorvectorSL self)"""
        return _pyBasePython.vectorvectorSL_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< long > >::iterator":
        """
        erase(vectorvectorSL self, std::vector< std::vector< long > >::iterator pos) -> std::vector< std::vector< long > >::iterator
        erase(vectorvectorSL self, std::vector< std::vector< long > >::iterator first, std::vector< std::vector< long > >::iterator last) -> std::vector< std::vector< long > >::iterator
        """
        return _pyBasePython.vectorvectorSL_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(long)>)> self) -> vectorvectorSL
        __init__(std::vector<(std::vector<(long)>)> self, vectorvectorSL arg2) -> vectorvectorSL
        __init__(std::vector<(std::vector<(long)>)> self, std::vector< std::vector< long > >::size_type size) -> vectorvectorSL
        __init__(std::vector<(std::vector<(long)>)> self, std::vector< std::vector< long > >::size_type size, vectorSL value) -> vectorvectorSL
        """
        _pyBasePython.vectorvectorSL_swiginit(self, _pyBasePython.new_vectorvectorSL(*args))

    def push_back(self, x: 'vectorSL') -> "void":
        """push_back(vectorvectorSL self, vectorSL x)"""
        return _pyBasePython.vectorvectorSL_push_back(self, x)


    def front(self) -> "std::vector< std::vector< long > >::value_type const &":
        """front(vectorvectorSL self) -> vectorSL"""
        return _pyBasePython.vectorvectorSL_front(self)


    def back(self) -> "std::vector< std::vector< long > >::value_type const &":
        """back(vectorvectorSL self) -> vectorSL"""
        return _pyBasePython.vectorvectorSL_back(self)


    def assign(self, n: 'std::vector< std::vector< long > >::size_type', x: 'vectorSL') -> "void":
        """assign(vectorvectorSL self, std::vector< std::vector< long > >::size_type n, vectorSL x)"""
        return _pyBasePython.vectorvectorSL_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorvectorSL self, std::vector< std::vector< long > >::size_type new_size)
        resize(vectorvectorSL self, std::vector< std::vector< long > >::size_type new_size, vectorSL x)
        """
        return _pyBasePython.vectorvectorSL_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorvectorSL self, std::vector< std::vector< long > >::iterator pos, vectorSL x) -> std::vector< std::vector< long > >::iterator
        insert(vectorvectorSL self, std::vector< std::vector< long > >::iterator pos, std::vector< std::vector< long > >::size_type n, vectorSL x)
        """
        return _pyBasePython.vectorvectorSL_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< long > >::size_type') -> "void":
        """reserve(vectorvectorSL self, std::vector< std::vector< long > >::size_type n)"""
        return _pyBasePython.vectorvectorSL_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< long > >::size_type":
        """capacity(vectorvectorSL self) -> std::vector< std::vector< long > >::size_type"""
        return _pyBasePython.vectorvectorSL_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorSL
vectorvectorSL.iterator = new_instancemethod(_pyBasePython.vectorvectorSL_iterator, None, vectorvectorSL)
vectorvectorSL.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorSL___nonzero__, None, vectorvectorSL)
vectorvectorSL.__bool__ = new_instancemethod(_pyBasePython.vectorvectorSL___bool__, None, vectorvectorSL)
vectorvectorSL.__len__ = new_instancemethod(_pyBasePython.vectorvectorSL___len__, None, vectorvectorSL)
vectorvectorSL.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorSL___getslice__, None, vectorvectorSL)
vectorvectorSL.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorSL___setslice__, None, vectorvectorSL)
vectorvectorSL.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorSL___delslice__, None, vectorvectorSL)
vectorvectorSL.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorSL___delitem__, None, vectorvectorSL)
vectorvectorSL.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorSL___getitem__, None, vectorvectorSL)
vectorvectorSL.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorSL___setitem__, None, vectorvectorSL)
vectorvectorSL.pop = new_instancemethod(_pyBasePython.vectorvectorSL_pop, None, vectorvectorSL)
vectorvectorSL.append = new_instancemethod(_pyBasePython.vectorvectorSL_append, None, vectorvectorSL)
vectorvectorSL.empty = new_instancemethod(_pyBasePython.vectorvectorSL_empty, None, vectorvectorSL)
vectorvectorSL.size = new_instancemethod(_pyBasePython.vectorvectorSL_size, None, vectorvectorSL)
vectorvectorSL.swap = new_instancemethod(_pyBasePython.vectorvectorSL_swap, None, vectorvectorSL)
vectorvectorSL.begin = new_instancemethod(_pyBasePython.vectorvectorSL_begin, None, vectorvectorSL)
vectorvectorSL.end = new_instancemethod(_pyBasePython.vectorvectorSL_end, None, vectorvectorSL)
vectorvectorSL.rbegin = new_instancemethod(_pyBasePython.vectorvectorSL_rbegin, None, vectorvectorSL)
vectorvectorSL.rend = new_instancemethod(_pyBasePython.vectorvectorSL_rend, None, vectorvectorSL)
vectorvectorSL.clear = new_instancemethod(_pyBasePython.vectorvectorSL_clear, None, vectorvectorSL)
vectorvectorSL.get_allocator = new_instancemethod(_pyBasePython.vectorvectorSL_get_allocator, None, vectorvectorSL)
vectorvectorSL.pop_back = new_instancemethod(_pyBasePython.vectorvectorSL_pop_back, None, vectorvectorSL)
vectorvectorSL.erase = new_instancemethod(_pyBasePython.vectorvectorSL_erase, None, vectorvectorSL)
vectorvectorSL.push_back = new_instancemethod(_pyBasePython.vectorvectorSL_push_back, None, vectorvectorSL)
vectorvectorSL.front = new_instancemethod(_pyBasePython.vectorvectorSL_front, None, vectorvectorSL)
vectorvectorSL.back = new_instancemethod(_pyBasePython.vectorvectorSL_back, None, vectorvectorSL)
vectorvectorSL.assign = new_instancemethod(_pyBasePython.vectorvectorSL_assign, None, vectorvectorSL)
vectorvectorSL.resize = new_instancemethod(_pyBasePython.vectorvectorSL_resize, None, vectorvectorSL)
vectorvectorSL.insert = new_instancemethod(_pyBasePython.vectorvectorSL_insert, None, vectorvectorSL)
vectorvectorSL.reserve = new_instancemethod(_pyBasePython.vectorvectorSL_reserve, None, vectorvectorSL)
vectorvectorSL.capacity = new_instancemethod(_pyBasePython.vectorvectorSL_capacity, None, vectorvectorSL)
vectorvectorSL_swigregister = _pyBasePython.vectorvectorSL_swigregister
vectorvectorSL_swigregister(vectorvectorSL)

class vectorF(object):
    """Proxy of C++ std::vector<(float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorF self) -> SwigPyIterator"""
        return _pyBasePython.vectorF_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorF self) -> bool"""
        return _pyBasePython.vectorF___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorF self) -> bool"""
        return _pyBasePython.vectorF___bool__(self)


    def __len__(self) -> "std::vector< float >::size_type":
        """__len__(vectorF self) -> std::vector< float >::size_type"""
        return _pyBasePython.vectorF___len__(self)


    def __getslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "std::vector< float,std::allocator< float > > *":
        """__getslice__(vectorF self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> vectorF"""
        return _pyBasePython.vectorF___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorF self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)
        __setslice__(vectorF self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, vectorF v)
        """
        return _pyBasePython.vectorF___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "void":
        """__delslice__(vectorF self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)"""
        return _pyBasePython.vectorF___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorF self, std::vector< float >::difference_type i)
        __delitem__(vectorF self, PySliceObject * slice)
        """
        return _pyBasePython.vectorF___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        """
        __getitem__(vectorF self, PySliceObject * slice) -> vectorF
        __getitem__(vectorF self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &
        """
        return _pyBasePython.vectorF___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorF self, PySliceObject * slice, vectorF v)
        __setitem__(vectorF self, PySliceObject * slice)
        __setitem__(vectorF self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)
        """
        return _pyBasePython.vectorF___setitem__(self, *args)


    def pop(self) -> "std::vector< float >::value_type":
        """pop(vectorF self) -> std::vector< float >::value_type"""
        return _pyBasePython.vectorF_pop(self)


    def append(self, x: 'std::vector< float >::value_type const &') -> "void":
        """append(vectorF self, std::vector< float >::value_type const & x)"""
        return _pyBasePython.vectorF_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorF self) -> bool"""
        return _pyBasePython.vectorF_empty(self)


    def size(self) -> "std::vector< float >::size_type":
        """size(vectorF self) -> std::vector< float >::size_type"""
        return _pyBasePython.vectorF_size(self)


    def swap(self, v: 'vectorF') -> "void":
        """swap(vectorF self, vectorF v)"""
        return _pyBasePython.vectorF_swap(self, v)


    def begin(self) -> "std::vector< float >::iterator":
        """begin(vectorF self) -> std::vector< float >::iterator"""
        return _pyBasePython.vectorF_begin(self)


    def end(self) -> "std::vector< float >::iterator":
        """end(vectorF self) -> std::vector< float >::iterator"""
        return _pyBasePython.vectorF_end(self)


    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        """rbegin(vectorF self) -> std::vector< float >::reverse_iterator"""
        return _pyBasePython.vectorF_rbegin(self)


    def rend(self) -> "std::vector< float >::reverse_iterator":
        """rend(vectorF self) -> std::vector< float >::reverse_iterator"""
        return _pyBasePython.vectorF_rend(self)


    def clear(self) -> "void":
        """clear(vectorF self)"""
        return _pyBasePython.vectorF_clear(self)


    def get_allocator(self) -> "std::vector< float >::allocator_type":
        """get_allocator(vectorF self) -> std::vector< float >::allocator_type"""
        return _pyBasePython.vectorF_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorF self)"""
        return _pyBasePython.vectorF_pop_back(self)


    def erase(self, *args) -> "std::vector< float >::iterator":
        """
        erase(vectorF self, std::vector< float >::iterator pos) -> std::vector< float >::iterator
        erase(vectorF self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator
        """
        return _pyBasePython.vectorF_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(float)> self) -> vectorF
        __init__(std::vector<(float)> self, vectorF arg2) -> vectorF
        __init__(std::vector<(float)> self, std::vector< float >::size_type size) -> vectorF
        __init__(std::vector<(float)> self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> vectorF
        """
        _pyBasePython.vectorF_swiginit(self, _pyBasePython.new_vectorF(*args))

    def push_back(self, x: 'std::vector< float >::value_type const &') -> "void":
        """push_back(vectorF self, std::vector< float >::value_type const & x)"""
        return _pyBasePython.vectorF_push_back(self, x)


    def front(self) -> "std::vector< float >::value_type const &":
        """front(vectorF self) -> std::vector< float >::value_type const &"""
        return _pyBasePython.vectorF_front(self)


    def back(self) -> "std::vector< float >::value_type const &":
        """back(vectorF self) -> std::vector< float >::value_type const &"""
        return _pyBasePython.vectorF_back(self)


    def assign(self, n: 'std::vector< float >::size_type', x: 'std::vector< float >::value_type const &') -> "void":
        """assign(vectorF self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)"""
        return _pyBasePython.vectorF_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorF self, std::vector< float >::size_type new_size)
        resize(vectorF self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)
        """
        return _pyBasePython.vectorF_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorF self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator
        insert(vectorF self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)
        """
        return _pyBasePython.vectorF_insert(self, *args)


    def reserve(self, n: 'std::vector< float >::size_type') -> "void":
        """reserve(vectorF self, std::vector< float >::size_type n)"""
        return _pyBasePython.vectorF_reserve(self, n)


    def capacity(self) -> "std::vector< float >::size_type":
        """capacity(vectorF self) -> std::vector< float >::size_type"""
        return _pyBasePython.vectorF_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorF
vectorF.iterator = new_instancemethod(_pyBasePython.vectorF_iterator, None, vectorF)
vectorF.__nonzero__ = new_instancemethod(_pyBasePython.vectorF___nonzero__, None, vectorF)
vectorF.__bool__ = new_instancemethod(_pyBasePython.vectorF___bool__, None, vectorF)
vectorF.__len__ = new_instancemethod(_pyBasePython.vectorF___len__, None, vectorF)
vectorF.__getslice__ = new_instancemethod(_pyBasePython.vectorF___getslice__, None, vectorF)
vectorF.__setslice__ = new_instancemethod(_pyBasePython.vectorF___setslice__, None, vectorF)
vectorF.__delslice__ = new_instancemethod(_pyBasePython.vectorF___delslice__, None, vectorF)
vectorF.__delitem__ = new_instancemethod(_pyBasePython.vectorF___delitem__, None, vectorF)
vectorF.__getitem__ = new_instancemethod(_pyBasePython.vectorF___getitem__, None, vectorF)
vectorF.__setitem__ = new_instancemethod(_pyBasePython.vectorF___setitem__, None, vectorF)
vectorF.pop = new_instancemethod(_pyBasePython.vectorF_pop, None, vectorF)
vectorF.append = new_instancemethod(_pyBasePython.vectorF_append, None, vectorF)
vectorF.empty = new_instancemethod(_pyBasePython.vectorF_empty, None, vectorF)
vectorF.size = new_instancemethod(_pyBasePython.vectorF_size, None, vectorF)
vectorF.swap = new_instancemethod(_pyBasePython.vectorF_swap, None, vectorF)
vectorF.begin = new_instancemethod(_pyBasePython.vectorF_begin, None, vectorF)
vectorF.end = new_instancemethod(_pyBasePython.vectorF_end, None, vectorF)
vectorF.rbegin = new_instancemethod(_pyBasePython.vectorF_rbegin, None, vectorF)
vectorF.rend = new_instancemethod(_pyBasePython.vectorF_rend, None, vectorF)
vectorF.clear = new_instancemethod(_pyBasePython.vectorF_clear, None, vectorF)
vectorF.get_allocator = new_instancemethod(_pyBasePython.vectorF_get_allocator, None, vectorF)
vectorF.pop_back = new_instancemethod(_pyBasePython.vectorF_pop_back, None, vectorF)
vectorF.erase = new_instancemethod(_pyBasePython.vectorF_erase, None, vectorF)
vectorF.push_back = new_instancemethod(_pyBasePython.vectorF_push_back, None, vectorF)
vectorF.front = new_instancemethod(_pyBasePython.vectorF_front, None, vectorF)
vectorF.back = new_instancemethod(_pyBasePython.vectorF_back, None, vectorF)
vectorF.assign = new_instancemethod(_pyBasePython.vectorF_assign, None, vectorF)
vectorF.resize = new_instancemethod(_pyBasePython.vectorF_resize, None, vectorF)
vectorF.insert = new_instancemethod(_pyBasePython.vectorF_insert, None, vectorF)
vectorF.reserve = new_instancemethod(_pyBasePython.vectorF_reserve, None, vectorF)
vectorF.capacity = new_instancemethod(_pyBasePython.vectorF_capacity, None, vectorF)
vectorF_swigregister = _pyBasePython.vectorF_swigregister
vectorF_swigregister(vectorF)

class vectorvectorF(object):
    """Proxy of C++ std::vector<(std::vector<(float)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorvectorF self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorF_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorvectorF self) -> bool"""
        return _pyBasePython.vectorvectorF___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorvectorF self) -> bool"""
        return _pyBasePython.vectorvectorF___bool__(self)


    def __len__(self) -> "std::vector< std::vector< float > >::size_type":
        """__len__(vectorvectorF self) -> std::vector< std::vector< float > >::size_type"""
        return _pyBasePython.vectorvectorF___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< float > >::difference_type', j: 'std::vector< std::vector< float > >::difference_type') -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > *":
        """__getslice__(vectorvectorF self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j) -> vectorvectorF"""
        return _pyBasePython.vectorvectorF___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorvectorF self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j)
        __setslice__(vectorvectorF self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j, vectorvectorF v)
        """
        return _pyBasePython.vectorvectorF___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< float > >::difference_type', j: 'std::vector< std::vector< float > >::difference_type') -> "void":
        """__delslice__(vectorvectorF self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j)"""
        return _pyBasePython.vectorvectorF___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorvectorF self, std::vector< std::vector< float > >::difference_type i)
        __delitem__(vectorvectorF self, PySliceObject * slice)
        """
        return _pyBasePython.vectorvectorF___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< float > >::value_type const &":
        """
        __getitem__(vectorvectorF self, PySliceObject * slice) -> vectorvectorF
        __getitem__(vectorvectorF self, std::vector< std::vector< float > >::difference_type i) -> vectorF
        """
        return _pyBasePython.vectorvectorF___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorvectorF self, PySliceObject * slice, vectorvectorF v)
        __setitem__(vectorvectorF self, PySliceObject * slice)
        __setitem__(vectorvectorF self, std::vector< std::vector< float > >::difference_type i, vectorF x)
        """
        return _pyBasePython.vectorvectorF___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< float > >::value_type":
        """pop(vectorvectorF self) -> vectorF"""
        return _pyBasePython.vectorvectorF_pop(self)


    def append(self, x: 'vectorF') -> "void":
        """append(vectorvectorF self, vectorF x)"""
        return _pyBasePython.vectorvectorF_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorvectorF self) -> bool"""
        return _pyBasePython.vectorvectorF_empty(self)


    def size(self) -> "std::vector< std::vector< float > >::size_type":
        """size(vectorvectorF self) -> std::vector< std::vector< float > >::size_type"""
        return _pyBasePython.vectorvectorF_size(self)


    def swap(self, v: 'vectorvectorF') -> "void":
        """swap(vectorvectorF self, vectorvectorF v)"""
        return _pyBasePython.vectorvectorF_swap(self, v)


    def begin(self) -> "std::vector< std::vector< float > >::iterator":
        """begin(vectorvectorF self) -> std::vector< std::vector< float > >::iterator"""
        return _pyBasePython.vectorvectorF_begin(self)


    def end(self) -> "std::vector< std::vector< float > >::iterator":
        """end(vectorvectorF self) -> std::vector< std::vector< float > >::iterator"""
        return _pyBasePython.vectorvectorF_end(self)


    def rbegin(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        """rbegin(vectorvectorF self) -> std::vector< std::vector< float > >::reverse_iterator"""
        return _pyBasePython.vectorvectorF_rbegin(self)


    def rend(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        """rend(vectorvectorF self) -> std::vector< std::vector< float > >::reverse_iterator"""
        return _pyBasePython.vectorvectorF_rend(self)


    def clear(self) -> "void":
        """clear(vectorvectorF self)"""
        return _pyBasePython.vectorvectorF_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< float > >::allocator_type":
        """get_allocator(vectorvectorF self) -> std::vector< std::vector< float > >::allocator_type"""
        return _pyBasePython.vectorvectorF_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorvectorF self)"""
        return _pyBasePython.vectorvectorF_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< float > >::iterator":
        """
        erase(vectorvectorF self, std::vector< std::vector< float > >::iterator pos) -> std::vector< std::vector< float > >::iterator
        erase(vectorvectorF self, std::vector< std::vector< float > >::iterator first, std::vector< std::vector< float > >::iterator last) -> std::vector< std::vector< float > >::iterator
        """
        return _pyBasePython.vectorvectorF_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(float)>)> self) -> vectorvectorF
        __init__(std::vector<(std::vector<(float)>)> self, vectorvectorF arg2) -> vectorvectorF
        __init__(std::vector<(std::vector<(float)>)> self, std::vector< std::vector< float > >::size_type size) -> vectorvectorF
        __init__(std::vector<(std::vector<(float)>)> self, std::vector< std::vector< float > >::size_type size, vectorF value) -> vectorvectorF
        """
        _pyBasePython.vectorvectorF_swiginit(self, _pyBasePython.new_vectorvectorF(*args))

    def push_back(self, x: 'vectorF') -> "void":
        """push_back(vectorvectorF self, vectorF x)"""
        return _pyBasePython.vectorvectorF_push_back(self, x)


    def front(self) -> "std::vector< std::vector< float > >::value_type const &":
        """front(vectorvectorF self) -> vectorF"""
        return _pyBasePython.vectorvectorF_front(self)


    def back(self) -> "std::vector< std::vector< float > >::value_type const &":
        """back(vectorvectorF self) -> vectorF"""
        return _pyBasePython.vectorvectorF_back(self)


    def assign(self, n: 'std::vector< std::vector< float > >::size_type', x: 'vectorF') -> "void":
        """assign(vectorvectorF self, std::vector< std::vector< float > >::size_type n, vectorF x)"""
        return _pyBasePython.vectorvectorF_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorvectorF self, std::vector< std::vector< float > >::size_type new_size)
        resize(vectorvectorF self, std::vector< std::vector< float > >::size_type new_size, vectorF x)
        """
        return _pyBasePython.vectorvectorF_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorvectorF self, std::vector< std::vector< float > >::iterator pos, vectorF x) -> std::vector< std::vector< float > >::iterator
        insert(vectorvectorF self, std::vector< std::vector< float > >::iterator pos, std::vector< std::vector< float > >::size_type n, vectorF x)
        """
        return _pyBasePython.vectorvectorF_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< float > >::size_type') -> "void":
        """reserve(vectorvectorF self, std::vector< std::vector< float > >::size_type n)"""
        return _pyBasePython.vectorvectorF_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< float > >::size_type":
        """capacity(vectorvectorF self) -> std::vector< std::vector< float > >::size_type"""
        return _pyBasePython.vectorvectorF_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorF
vectorvectorF.iterator = new_instancemethod(_pyBasePython.vectorvectorF_iterator, None, vectorvectorF)
vectorvectorF.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorF___nonzero__, None, vectorvectorF)
vectorvectorF.__bool__ = new_instancemethod(_pyBasePython.vectorvectorF___bool__, None, vectorvectorF)
vectorvectorF.__len__ = new_instancemethod(_pyBasePython.vectorvectorF___len__, None, vectorvectorF)
vectorvectorF.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorF___getslice__, None, vectorvectorF)
vectorvectorF.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorF___setslice__, None, vectorvectorF)
vectorvectorF.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorF___delslice__, None, vectorvectorF)
vectorvectorF.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorF___delitem__, None, vectorvectorF)
vectorvectorF.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorF___getitem__, None, vectorvectorF)
vectorvectorF.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorF___setitem__, None, vectorvectorF)
vectorvectorF.pop = new_instancemethod(_pyBasePython.vectorvectorF_pop, None, vectorvectorF)
vectorvectorF.append = new_instancemethod(_pyBasePython.vectorvectorF_append, None, vectorvectorF)
vectorvectorF.empty = new_instancemethod(_pyBasePython.vectorvectorF_empty, None, vectorvectorF)
vectorvectorF.size = new_instancemethod(_pyBasePython.vectorvectorF_size, None, vectorvectorF)
vectorvectorF.swap = new_instancemethod(_pyBasePython.vectorvectorF_swap, None, vectorvectorF)
vectorvectorF.begin = new_instancemethod(_pyBasePython.vectorvectorF_begin, None, vectorvectorF)
vectorvectorF.end = new_instancemethod(_pyBasePython.vectorvectorF_end, None, vectorvectorF)
vectorvectorF.rbegin = new_instancemethod(_pyBasePython.vectorvectorF_rbegin, None, vectorvectorF)
vectorvectorF.rend = new_instancemethod(_pyBasePython.vectorvectorF_rend, None, vectorvectorF)
vectorvectorF.clear = new_instancemethod(_pyBasePython.vectorvectorF_clear, None, vectorvectorF)
vectorvectorF.get_allocator = new_instancemethod(_pyBasePython.vectorvectorF_get_allocator, None, vectorvectorF)
vectorvectorF.pop_back = new_instancemethod(_pyBasePython.vectorvectorF_pop_back, None, vectorvectorF)
vectorvectorF.erase = new_instancemethod(_pyBasePython.vectorvectorF_erase, None, vectorvectorF)
vectorvectorF.push_back = new_instancemethod(_pyBasePython.vectorvectorF_push_back, None, vectorvectorF)
vectorvectorF.front = new_instancemethod(_pyBasePython.vectorvectorF_front, None, vectorvectorF)
vectorvectorF.back = new_instancemethod(_pyBasePython.vectorvectorF_back, None, vectorvectorF)
vectorvectorF.assign = new_instancemethod(_pyBasePython.vectorvectorF_assign, None, vectorvectorF)
vectorvectorF.resize = new_instancemethod(_pyBasePython.vectorvectorF_resize, None, vectorvectorF)
vectorvectorF.insert = new_instancemethod(_pyBasePython.vectorvectorF_insert, None, vectorvectorF)
vectorvectorF.reserve = new_instancemethod(_pyBasePython.vectorvectorF_reserve, None, vectorvectorF)
vectorvectorF.capacity = new_instancemethod(_pyBasePython.vectorvectorF_capacity, None, vectorvectorF)
vectorvectorF_swigregister = _pyBasePython.vectorvectorF_swigregister
vectorvectorF_swigregister(vectorvectorF)

class vectorD(object):
    """Proxy of C++ std::vector<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorD self) -> SwigPyIterator"""
        return _pyBasePython.vectorD_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorD self) -> bool"""
        return _pyBasePython.vectorD___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorD self) -> bool"""
        return _pyBasePython.vectorD___bool__(self)


    def __len__(self) -> "std::vector< double >::size_type":
        """__len__(vectorD self) -> std::vector< double >::size_type"""
        return _pyBasePython.vectorD___len__(self)


    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        """__getslice__(vectorD self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> vectorD"""
        return _pyBasePython.vectorD___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorD self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(vectorD self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, vectorD v)
        """
        return _pyBasePython.vectorD___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        """__delslice__(vectorD self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _pyBasePython.vectorD___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorD self, std::vector< double >::difference_type i)
        __delitem__(vectorD self, PySliceObject * slice)
        """
        return _pyBasePython.vectorD___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        """
        __getitem__(vectorD self, PySliceObject * slice) -> vectorD
        __getitem__(vectorD self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _pyBasePython.vectorD___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorD self, PySliceObject * slice, vectorD v)
        __setitem__(vectorD self, PySliceObject * slice)
        __setitem__(vectorD self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _pyBasePython.vectorD___setitem__(self, *args)


    def pop(self) -> "std::vector< double >::value_type":
        """pop(vectorD self) -> std::vector< double >::value_type"""
        return _pyBasePython.vectorD_pop(self)


    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        """append(vectorD self, std::vector< double >::value_type const & x)"""
        return _pyBasePython.vectorD_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorD self) -> bool"""
        return _pyBasePython.vectorD_empty(self)


    def size(self) -> "std::vector< double >::size_type":
        """size(vectorD self) -> std::vector< double >::size_type"""
        return _pyBasePython.vectorD_size(self)


    def swap(self, v: 'vectorD') -> "void":
        """swap(vectorD self, vectorD v)"""
        return _pyBasePython.vectorD_swap(self, v)


    def begin(self) -> "std::vector< double >::iterator":
        """begin(vectorD self) -> std::vector< double >::iterator"""
        return _pyBasePython.vectorD_begin(self)


    def end(self) -> "std::vector< double >::iterator":
        """end(vectorD self) -> std::vector< double >::iterator"""
        return _pyBasePython.vectorD_end(self)


    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        """rbegin(vectorD self) -> std::vector< double >::reverse_iterator"""
        return _pyBasePython.vectorD_rbegin(self)


    def rend(self) -> "std::vector< double >::reverse_iterator":
        """rend(vectorD self) -> std::vector< double >::reverse_iterator"""
        return _pyBasePython.vectorD_rend(self)


    def clear(self) -> "void":
        """clear(vectorD self)"""
        return _pyBasePython.vectorD_clear(self)


    def get_allocator(self) -> "std::vector< double >::allocator_type":
        """get_allocator(vectorD self) -> std::vector< double >::allocator_type"""
        return _pyBasePython.vectorD_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorD self)"""
        return _pyBasePython.vectorD_pop_back(self)


    def erase(self, *args) -> "std::vector< double >::iterator":
        """
        erase(vectorD self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(vectorD self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _pyBasePython.vectorD_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> vectorD
        __init__(std::vector<(double)> self, vectorD arg2) -> vectorD
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> vectorD
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vectorD
        """
        _pyBasePython.vectorD_swiginit(self, _pyBasePython.new_vectorD(*args))

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        """push_back(vectorD self, std::vector< double >::value_type const & x)"""
        return _pyBasePython.vectorD_push_back(self, x)


    def front(self) -> "std::vector< double >::value_type const &":
        """front(vectorD self) -> std::vector< double >::value_type const &"""
        return _pyBasePython.vectorD_front(self)


    def back(self) -> "std::vector< double >::value_type const &":
        """back(vectorD self) -> std::vector< double >::value_type const &"""
        return _pyBasePython.vectorD_back(self)


    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        """assign(vectorD self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _pyBasePython.vectorD_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorD self, std::vector< double >::size_type new_size)
        resize(vectorD self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _pyBasePython.vectorD_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorD self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(vectorD self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _pyBasePython.vectorD_insert(self, *args)


    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        """reserve(vectorD self, std::vector< double >::size_type n)"""
        return _pyBasePython.vectorD_reserve(self, n)


    def capacity(self) -> "std::vector< double >::size_type":
        """capacity(vectorD self) -> std::vector< double >::size_type"""
        return _pyBasePython.vectorD_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorD
vectorD.iterator = new_instancemethod(_pyBasePython.vectorD_iterator, None, vectorD)
vectorD.__nonzero__ = new_instancemethod(_pyBasePython.vectorD___nonzero__, None, vectorD)
vectorD.__bool__ = new_instancemethod(_pyBasePython.vectorD___bool__, None, vectorD)
vectorD.__len__ = new_instancemethod(_pyBasePython.vectorD___len__, None, vectorD)
vectorD.__getslice__ = new_instancemethod(_pyBasePython.vectorD___getslice__, None, vectorD)
vectorD.__setslice__ = new_instancemethod(_pyBasePython.vectorD___setslice__, None, vectorD)
vectorD.__delslice__ = new_instancemethod(_pyBasePython.vectorD___delslice__, None, vectorD)
vectorD.__delitem__ = new_instancemethod(_pyBasePython.vectorD___delitem__, None, vectorD)
vectorD.__getitem__ = new_instancemethod(_pyBasePython.vectorD___getitem__, None, vectorD)
vectorD.__setitem__ = new_instancemethod(_pyBasePython.vectorD___setitem__, None, vectorD)
vectorD.pop = new_instancemethod(_pyBasePython.vectorD_pop, None, vectorD)
vectorD.append = new_instancemethod(_pyBasePython.vectorD_append, None, vectorD)
vectorD.empty = new_instancemethod(_pyBasePython.vectorD_empty, None, vectorD)
vectorD.size = new_instancemethod(_pyBasePython.vectorD_size, None, vectorD)
vectorD.swap = new_instancemethod(_pyBasePython.vectorD_swap, None, vectorD)
vectorD.begin = new_instancemethod(_pyBasePython.vectorD_begin, None, vectorD)
vectorD.end = new_instancemethod(_pyBasePython.vectorD_end, None, vectorD)
vectorD.rbegin = new_instancemethod(_pyBasePython.vectorD_rbegin, None, vectorD)
vectorD.rend = new_instancemethod(_pyBasePython.vectorD_rend, None, vectorD)
vectorD.clear = new_instancemethod(_pyBasePython.vectorD_clear, None, vectorD)
vectorD.get_allocator = new_instancemethod(_pyBasePython.vectorD_get_allocator, None, vectorD)
vectorD.pop_back = new_instancemethod(_pyBasePython.vectorD_pop_back, None, vectorD)
vectorD.erase = new_instancemethod(_pyBasePython.vectorD_erase, None, vectorD)
vectorD.push_back = new_instancemethod(_pyBasePython.vectorD_push_back, None, vectorD)
vectorD.front = new_instancemethod(_pyBasePython.vectorD_front, None, vectorD)
vectorD.back = new_instancemethod(_pyBasePython.vectorD_back, None, vectorD)
vectorD.assign = new_instancemethod(_pyBasePython.vectorD_assign, None, vectorD)
vectorD.resize = new_instancemethod(_pyBasePython.vectorD_resize, None, vectorD)
vectorD.insert = new_instancemethod(_pyBasePython.vectorD_insert, None, vectorD)
vectorD.reserve = new_instancemethod(_pyBasePython.vectorD_reserve, None, vectorD)
vectorD.capacity = new_instancemethod(_pyBasePython.vectorD_capacity, None, vectorD)
vectorD_swigregister = _pyBasePython.vectorD_swigregister
vectorD_swigregister(vectorD)

class vectorvectorD(object):
    """Proxy of C++ std::vector<(std::vector<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorvectorD self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorD_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorvectorD self) -> bool"""
        return _pyBasePython.vectorvectorD___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorvectorD self) -> bool"""
        return _pyBasePython.vectorvectorD___bool__(self)


    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        """__len__(vectorvectorD self) -> std::vector< std::vector< double > >::size_type"""
        return _pyBasePython.vectorvectorD___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< double > >::difference_type', j: 'std::vector< std::vector< double > >::difference_type') -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        """__getslice__(vectorvectorD self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> vectorvectorD"""
        return _pyBasePython.vectorvectorD___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorvectorD self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)
        __setslice__(vectorvectorD self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, vectorvectorD v)
        """
        return _pyBasePython.vectorvectorD___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< double > >::difference_type', j: 'std::vector< std::vector< double > >::difference_type') -> "void":
        """__delslice__(vectorvectorD self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)"""
        return _pyBasePython.vectorvectorD___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorvectorD self, std::vector< std::vector< double > >::difference_type i)
        __delitem__(vectorvectorD self, PySliceObject * slice)
        """
        return _pyBasePython.vectorvectorD___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        """
        __getitem__(vectorvectorD self, PySliceObject * slice) -> vectorvectorD
        __getitem__(vectorvectorD self, std::vector< std::vector< double > >::difference_type i) -> vectorD
        """
        return _pyBasePython.vectorvectorD___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorvectorD self, PySliceObject * slice, vectorvectorD v)
        __setitem__(vectorvectorD self, PySliceObject * slice)
        __setitem__(vectorvectorD self, std::vector< std::vector< double > >::difference_type i, vectorD x)
        """
        return _pyBasePython.vectorvectorD___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        """pop(vectorvectorD self) -> vectorD"""
        return _pyBasePython.vectorvectorD_pop(self)


    def append(self, x: 'vectorD') -> "void":
        """append(vectorvectorD self, vectorD x)"""
        return _pyBasePython.vectorvectorD_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorvectorD self) -> bool"""
        return _pyBasePython.vectorvectorD_empty(self)


    def size(self) -> "std::vector< std::vector< double > >::size_type":
        """size(vectorvectorD self) -> std::vector< std::vector< double > >::size_type"""
        return _pyBasePython.vectorvectorD_size(self)


    def swap(self, v: 'vectorvectorD') -> "void":
        """swap(vectorvectorD self, vectorvectorD v)"""
        return _pyBasePython.vectorvectorD_swap(self, v)


    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        """begin(vectorvectorD self) -> std::vector< std::vector< double > >::iterator"""
        return _pyBasePython.vectorvectorD_begin(self)


    def end(self) -> "std::vector< std::vector< double > >::iterator":
        """end(vectorvectorD self) -> std::vector< std::vector< double > >::iterator"""
        return _pyBasePython.vectorvectorD_end(self)


    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        """rbegin(vectorvectorD self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _pyBasePython.vectorvectorD_rbegin(self)


    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        """rend(vectorvectorD self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _pyBasePython.vectorvectorD_rend(self)


    def clear(self) -> "void":
        """clear(vectorvectorD self)"""
        return _pyBasePython.vectorvectorD_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        """get_allocator(vectorvectorD self) -> std::vector< std::vector< double > >::allocator_type"""
        return _pyBasePython.vectorvectorD_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorvectorD self)"""
        return _pyBasePython.vectorvectorD_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        """
        erase(vectorvectorD self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator
        erase(vectorvectorD self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator
        """
        return _pyBasePython.vectorvectorD_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(double)>)> self) -> vectorvectorD
        __init__(std::vector<(std::vector<(double)>)> self, vectorvectorD arg2) -> vectorvectorD
        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size) -> vectorvectorD
        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size, vectorD value) -> vectorvectorD
        """
        _pyBasePython.vectorvectorD_swiginit(self, _pyBasePython.new_vectorvectorD(*args))

    def push_back(self, x: 'vectorD') -> "void":
        """push_back(vectorvectorD self, vectorD x)"""
        return _pyBasePython.vectorvectorD_push_back(self, x)


    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        """front(vectorvectorD self) -> vectorD"""
        return _pyBasePython.vectorvectorD_front(self)


    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        """back(vectorvectorD self) -> vectorD"""
        return _pyBasePython.vectorvectorD_back(self)


    def assign(self, n: 'std::vector< std::vector< double > >::size_type', x: 'vectorD') -> "void":
        """assign(vectorvectorD self, std::vector< std::vector< double > >::size_type n, vectorD x)"""
        return _pyBasePython.vectorvectorD_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorvectorD self, std::vector< std::vector< double > >::size_type new_size)
        resize(vectorvectorD self, std::vector< std::vector< double > >::size_type new_size, vectorD x)
        """
        return _pyBasePython.vectorvectorD_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorvectorD self, std::vector< std::vector< double > >::iterator pos, vectorD x) -> std::vector< std::vector< double > >::iterator
        insert(vectorvectorD self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, vectorD x)
        """
        return _pyBasePython.vectorvectorD_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< double > >::size_type') -> "void":
        """reserve(vectorvectorD self, std::vector< std::vector< double > >::size_type n)"""
        return _pyBasePython.vectorvectorD_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        """capacity(vectorvectorD self) -> std::vector< std::vector< double > >::size_type"""
        return _pyBasePython.vectorvectorD_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorD
vectorvectorD.iterator = new_instancemethod(_pyBasePython.vectorvectorD_iterator, None, vectorvectorD)
vectorvectorD.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorD___nonzero__, None, vectorvectorD)
vectorvectorD.__bool__ = new_instancemethod(_pyBasePython.vectorvectorD___bool__, None, vectorvectorD)
vectorvectorD.__len__ = new_instancemethod(_pyBasePython.vectorvectorD___len__, None, vectorvectorD)
vectorvectorD.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorD___getslice__, None, vectorvectorD)
vectorvectorD.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorD___setslice__, None, vectorvectorD)
vectorvectorD.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorD___delslice__, None, vectorvectorD)
vectorvectorD.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorD___delitem__, None, vectorvectorD)
vectorvectorD.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorD___getitem__, None, vectorvectorD)
vectorvectorD.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorD___setitem__, None, vectorvectorD)
vectorvectorD.pop = new_instancemethod(_pyBasePython.vectorvectorD_pop, None, vectorvectorD)
vectorvectorD.append = new_instancemethod(_pyBasePython.vectorvectorD_append, None, vectorvectorD)
vectorvectorD.empty = new_instancemethod(_pyBasePython.vectorvectorD_empty, None, vectorvectorD)
vectorvectorD.size = new_instancemethod(_pyBasePython.vectorvectorD_size, None, vectorvectorD)
vectorvectorD.swap = new_instancemethod(_pyBasePython.vectorvectorD_swap, None, vectorvectorD)
vectorvectorD.begin = new_instancemethod(_pyBasePython.vectorvectorD_begin, None, vectorvectorD)
vectorvectorD.end = new_instancemethod(_pyBasePython.vectorvectorD_end, None, vectorvectorD)
vectorvectorD.rbegin = new_instancemethod(_pyBasePython.vectorvectorD_rbegin, None, vectorvectorD)
vectorvectorD.rend = new_instancemethod(_pyBasePython.vectorvectorD_rend, None, vectorvectorD)
vectorvectorD.clear = new_instancemethod(_pyBasePython.vectorvectorD_clear, None, vectorvectorD)
vectorvectorD.get_allocator = new_instancemethod(_pyBasePython.vectorvectorD_get_allocator, None, vectorvectorD)
vectorvectorD.pop_back = new_instancemethod(_pyBasePython.vectorvectorD_pop_back, None, vectorvectorD)
vectorvectorD.erase = new_instancemethod(_pyBasePython.vectorvectorD_erase, None, vectorvectorD)
vectorvectorD.push_back = new_instancemethod(_pyBasePython.vectorvectorD_push_back, None, vectorvectorD)
vectorvectorD.front = new_instancemethod(_pyBasePython.vectorvectorD_front, None, vectorvectorD)
vectorvectorD.back = new_instancemethod(_pyBasePython.vectorvectorD_back, None, vectorvectorD)
vectorvectorD.assign = new_instancemethod(_pyBasePython.vectorvectorD_assign, None, vectorvectorD)
vectorvectorD.resize = new_instancemethod(_pyBasePython.vectorvectorD_resize, None, vectorvectorD)
vectorvectorD.insert = new_instancemethod(_pyBasePython.vectorvectorD_insert, None, vectorvectorD)
vectorvectorD.reserve = new_instancemethod(_pyBasePython.vectorvectorD_reserve, None, vectorvectorD)
vectorvectorD.capacity = new_instancemethod(_pyBasePython.vectorvectorD_capacity, None, vectorvectorD)
vectorvectorD_swigregister = _pyBasePython.vectorvectorD_swigregister
vectorvectorD_swigregister(vectorvectorD)

class vectorstring(object):
    """Proxy of C++ std::vector<(std::string)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorstring self) -> SwigPyIterator"""
        return _pyBasePython.vectorstring_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorstring self) -> bool"""
        return _pyBasePython.vectorstring___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorstring self) -> bool"""
        return _pyBasePython.vectorstring___bool__(self)


    def __len__(self) -> "std::vector< std::string >::size_type":
        """__len__(vectorstring self) -> std::vector< std::string >::size_type"""
        return _pyBasePython.vectorstring___len__(self)


    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
        """__getslice__(vectorstring self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vectorstring"""
        return _pyBasePython.vectorstring___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorstring self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(vectorstring self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, vectorstring v)
        """
        return _pyBasePython.vectorstring___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
        """__delslice__(vectorstring self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _pyBasePython.vectorstring___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorstring self, std::vector< std::string >::difference_type i)
        __delitem__(vectorstring self, PySliceObject * slice)
        """
        return _pyBasePython.vectorstring___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        """
        __getitem__(vectorstring self, PySliceObject * slice) -> vectorstring
        __getitem__(vectorstring self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _pyBasePython.vectorstring___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorstring self, PySliceObject * slice, vectorstring v)
        __setitem__(vectorstring self, PySliceObject * slice)
        __setitem__(vectorstring self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _pyBasePython.vectorstring___setitem__(self, *args)


    def pop(self) -> "std::vector< std::string >::value_type":
        """pop(vectorstring self) -> std::vector< std::string >::value_type"""
        return _pyBasePython.vectorstring_pop(self)


    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        """append(vectorstring self, std::vector< std::string >::value_type const & x)"""
        return _pyBasePython.vectorstring_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorstring self) -> bool"""
        return _pyBasePython.vectorstring_empty(self)


    def size(self) -> "std::vector< std::string >::size_type":
        """size(vectorstring self) -> std::vector< std::string >::size_type"""
        return _pyBasePython.vectorstring_size(self)


    def swap(self, v: 'vectorstring') -> "void":
        """swap(vectorstring self, vectorstring v)"""
        return _pyBasePython.vectorstring_swap(self, v)


    def begin(self) -> "std::vector< std::string >::iterator":
        """begin(vectorstring self) -> std::vector< std::string >::iterator"""
        return _pyBasePython.vectorstring_begin(self)


    def end(self) -> "std::vector< std::string >::iterator":
        """end(vectorstring self) -> std::vector< std::string >::iterator"""
        return _pyBasePython.vectorstring_end(self)


    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        """rbegin(vectorstring self) -> std::vector< std::string >::reverse_iterator"""
        return _pyBasePython.vectorstring_rbegin(self)


    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        """rend(vectorstring self) -> std::vector< std::string >::reverse_iterator"""
        return _pyBasePython.vectorstring_rend(self)


    def clear(self) -> "void":
        """clear(vectorstring self)"""
        return _pyBasePython.vectorstring_clear(self)


    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        """get_allocator(vectorstring self) -> std::vector< std::string >::allocator_type"""
        return _pyBasePython.vectorstring_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorstring self)"""
        return _pyBasePython.vectorstring_pop_back(self)


    def erase(self, *args) -> "std::vector< std::string >::iterator":
        """
        erase(vectorstring self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(vectorstring self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _pyBasePython.vectorstring_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> vectorstring
        __init__(std::vector<(std::string)> self, vectorstring arg2) -> vectorstring
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> vectorstring
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vectorstring
        """
        _pyBasePython.vectorstring_swiginit(self, _pyBasePython.new_vectorstring(*args))

    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        """push_back(vectorstring self, std::vector< std::string >::value_type const & x)"""
        return _pyBasePython.vectorstring_push_back(self, x)


    def front(self) -> "std::vector< std::string >::value_type const &":
        """front(vectorstring self) -> std::vector< std::string >::value_type const &"""
        return _pyBasePython.vectorstring_front(self)


    def back(self) -> "std::vector< std::string >::value_type const &":
        """back(vectorstring self) -> std::vector< std::string >::value_type const &"""
        return _pyBasePython.vectorstring_back(self)


    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
        """assign(vectorstring self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _pyBasePython.vectorstring_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorstring self, std::vector< std::string >::size_type new_size)
        resize(vectorstring self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _pyBasePython.vectorstring_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorstring self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(vectorstring self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _pyBasePython.vectorstring_insert(self, *args)


    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
        """reserve(vectorstring self, std::vector< std::string >::size_type n)"""
        return _pyBasePython.vectorstring_reserve(self, n)


    def capacity(self) -> "std::vector< std::string >::size_type":
        """capacity(vectorstring self) -> std::vector< std::string >::size_type"""
        return _pyBasePython.vectorstring_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorstring
vectorstring.iterator = new_instancemethod(_pyBasePython.vectorstring_iterator, None, vectorstring)
vectorstring.__nonzero__ = new_instancemethod(_pyBasePython.vectorstring___nonzero__, None, vectorstring)
vectorstring.__bool__ = new_instancemethod(_pyBasePython.vectorstring___bool__, None, vectorstring)
vectorstring.__len__ = new_instancemethod(_pyBasePython.vectorstring___len__, None, vectorstring)
vectorstring.__getslice__ = new_instancemethod(_pyBasePython.vectorstring___getslice__, None, vectorstring)
vectorstring.__setslice__ = new_instancemethod(_pyBasePython.vectorstring___setslice__, None, vectorstring)
vectorstring.__delslice__ = new_instancemethod(_pyBasePython.vectorstring___delslice__, None, vectorstring)
vectorstring.__delitem__ = new_instancemethod(_pyBasePython.vectorstring___delitem__, None, vectorstring)
vectorstring.__getitem__ = new_instancemethod(_pyBasePython.vectorstring___getitem__, None, vectorstring)
vectorstring.__setitem__ = new_instancemethod(_pyBasePython.vectorstring___setitem__, None, vectorstring)
vectorstring.pop = new_instancemethod(_pyBasePython.vectorstring_pop, None, vectorstring)
vectorstring.append = new_instancemethod(_pyBasePython.vectorstring_append, None, vectorstring)
vectorstring.empty = new_instancemethod(_pyBasePython.vectorstring_empty, None, vectorstring)
vectorstring.size = new_instancemethod(_pyBasePython.vectorstring_size, None, vectorstring)
vectorstring.swap = new_instancemethod(_pyBasePython.vectorstring_swap, None, vectorstring)
vectorstring.begin = new_instancemethod(_pyBasePython.vectorstring_begin, None, vectorstring)
vectorstring.end = new_instancemethod(_pyBasePython.vectorstring_end, None, vectorstring)
vectorstring.rbegin = new_instancemethod(_pyBasePython.vectorstring_rbegin, None, vectorstring)
vectorstring.rend = new_instancemethod(_pyBasePython.vectorstring_rend, None, vectorstring)
vectorstring.clear = new_instancemethod(_pyBasePython.vectorstring_clear, None, vectorstring)
vectorstring.get_allocator = new_instancemethod(_pyBasePython.vectorstring_get_allocator, None, vectorstring)
vectorstring.pop_back = new_instancemethod(_pyBasePython.vectorstring_pop_back, None, vectorstring)
vectorstring.erase = new_instancemethod(_pyBasePython.vectorstring_erase, None, vectorstring)
vectorstring.push_back = new_instancemethod(_pyBasePython.vectorstring_push_back, None, vectorstring)
vectorstring.front = new_instancemethod(_pyBasePython.vectorstring_front, None, vectorstring)
vectorstring.back = new_instancemethod(_pyBasePython.vectorstring_back, None, vectorstring)
vectorstring.assign = new_instancemethod(_pyBasePython.vectorstring_assign, None, vectorstring)
vectorstring.resize = new_instancemethod(_pyBasePython.vectorstring_resize, None, vectorstring)
vectorstring.insert = new_instancemethod(_pyBasePython.vectorstring_insert, None, vectorstring)
vectorstring.reserve = new_instancemethod(_pyBasePython.vectorstring_reserve, None, vectorstring)
vectorstring.capacity = new_instancemethod(_pyBasePython.vectorstring_capacity, None, vectorstring)
vectorstring_swigregister = _pyBasePython.vectorstring_swigregister
vectorstring_swigregister(vectorstring)

class listB(object):
    """Proxy of C++ std::list<(bool)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listB self) -> SwigPyIterator"""
        return _pyBasePython.listB_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listB self) -> bool"""
        return _pyBasePython.listB___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listB self) -> bool"""
        return _pyBasePython.listB___bool__(self)


    def __len__(self) -> "std::list< bool >::size_type":
        """__len__(listB self) -> std::list< bool >::size_type"""
        return _pyBasePython.listB___len__(self)


    def __getslice__(self, i: 'std::list< bool >::difference_type', j: 'std::list< bool >::difference_type') -> "std::list< bool,std::allocator< bool > > *":
        """__getslice__(listB self, std::list< bool >::difference_type i, std::list< bool >::difference_type j) -> listB"""
        return _pyBasePython.listB___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listB self, std::list< bool >::difference_type i, std::list< bool >::difference_type j)
        __setslice__(listB self, std::list< bool >::difference_type i, std::list< bool >::difference_type j, listB v)
        """
        return _pyBasePython.listB___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< bool >::difference_type', j: 'std::list< bool >::difference_type') -> "void":
        """__delslice__(listB self, std::list< bool >::difference_type i, std::list< bool >::difference_type j)"""
        return _pyBasePython.listB___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listB self, std::list< bool >::difference_type i)
        __delitem__(listB self, PySliceObject * slice)
        """
        return _pyBasePython.listB___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< bool >::value_type const &":
        """
        __getitem__(listB self, PySliceObject * slice) -> listB
        __getitem__(listB self, std::list< bool >::difference_type i) -> std::list< bool >::value_type const &
        """
        return _pyBasePython.listB___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listB self, PySliceObject * slice, listB v)
        __setitem__(listB self, PySliceObject * slice)
        __setitem__(listB self, std::list< bool >::difference_type i, std::list< bool >::value_type const & x)
        """
        return _pyBasePython.listB___setitem__(self, *args)


    def pop(self) -> "std::list< bool >::value_type":
        """pop(listB self) -> std::list< bool >::value_type"""
        return _pyBasePython.listB_pop(self)


    def append(self, x: 'std::list< bool >::value_type const &') -> "void":
        """append(listB self, std::list< bool >::value_type const & x)"""
        return _pyBasePython.listB_append(self, x)


    def empty(self) -> "bool":
        """empty(listB self) -> bool"""
        return _pyBasePython.listB_empty(self)


    def size(self) -> "std::list< bool >::size_type":
        """size(listB self) -> std::list< bool >::size_type"""
        return _pyBasePython.listB_size(self)


    def swap(self, v: 'listB') -> "void":
        """swap(listB self, listB v)"""
        return _pyBasePython.listB_swap(self, v)


    def begin(self) -> "std::list< bool >::iterator":
        """begin(listB self) -> std::list< bool >::iterator"""
        return _pyBasePython.listB_begin(self)


    def end(self) -> "std::list< bool >::iterator":
        """end(listB self) -> std::list< bool >::iterator"""
        return _pyBasePython.listB_end(self)


    def rbegin(self) -> "std::list< bool >::reverse_iterator":
        """rbegin(listB self) -> std::list< bool >::reverse_iterator"""
        return _pyBasePython.listB_rbegin(self)


    def rend(self) -> "std::list< bool >::reverse_iterator":
        """rend(listB self) -> std::list< bool >::reverse_iterator"""
        return _pyBasePython.listB_rend(self)


    def clear(self) -> "void":
        """clear(listB self)"""
        return _pyBasePython.listB_clear(self)


    def get_allocator(self) -> "std::list< bool >::allocator_type":
        """get_allocator(listB self) -> std::list< bool >::allocator_type"""
        return _pyBasePython.listB_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listB self)"""
        return _pyBasePython.listB_pop_back(self)


    def erase(self, *args) -> "std::list< bool >::iterator":
        """
        erase(listB self, std::list< bool >::iterator pos) -> std::list< bool >::iterator
        erase(listB self, std::list< bool >::iterator first, std::list< bool >::iterator last) -> std::list< bool >::iterator
        """
        return _pyBasePython.listB_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(bool)> self) -> listB
        __init__(std::list<(bool)> self, listB arg2) -> listB
        __init__(std::list<(bool)> self, std::list< bool >::size_type size) -> listB
        __init__(std::list<(bool)> self, std::list< bool >::size_type size, std::list< bool >::value_type const & value) -> listB
        """
        _pyBasePython.listB_swiginit(self, _pyBasePython.new_listB(*args))

    def push_back(self, x: 'std::list< bool >::value_type const &') -> "void":
        """push_back(listB self, std::list< bool >::value_type const & x)"""
        return _pyBasePython.listB_push_back(self, x)


    def front(self) -> "std::list< bool >::value_type const &":
        """front(listB self) -> std::list< bool >::value_type const &"""
        return _pyBasePython.listB_front(self)


    def back(self) -> "std::list< bool >::value_type const &":
        """back(listB self) -> std::list< bool >::value_type const &"""
        return _pyBasePython.listB_back(self)


    def assign(self, n: 'std::list< bool >::size_type', x: 'std::list< bool >::value_type const &') -> "void":
        """assign(listB self, std::list< bool >::size_type n, std::list< bool >::value_type const & x)"""
        return _pyBasePython.listB_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listB self, std::list< bool >::size_type new_size)
        resize(listB self, std::list< bool >::size_type new_size, std::list< bool >::value_type const & x)
        """
        return _pyBasePython.listB_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listB self, std::list< bool >::iterator pos, std::list< bool >::value_type const & x) -> std::list< bool >::iterator
        insert(listB self, std::list< bool >::iterator pos, std::list< bool >::size_type n, std::list< bool >::value_type const & x)
        """
        return _pyBasePython.listB_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listB self)"""
        return _pyBasePython.listB_pop_front(self)


    def push_front(self, x: 'std::list< bool >::value_type const &') -> "void":
        """push_front(listB self, std::list< bool >::value_type const & x)"""
        return _pyBasePython.listB_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listB self)"""
        return _pyBasePython.listB_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listB
listB.iterator = new_instancemethod(_pyBasePython.listB_iterator, None, listB)
listB.__nonzero__ = new_instancemethod(_pyBasePython.listB___nonzero__, None, listB)
listB.__bool__ = new_instancemethod(_pyBasePython.listB___bool__, None, listB)
listB.__len__ = new_instancemethod(_pyBasePython.listB___len__, None, listB)
listB.__getslice__ = new_instancemethod(_pyBasePython.listB___getslice__, None, listB)
listB.__setslice__ = new_instancemethod(_pyBasePython.listB___setslice__, None, listB)
listB.__delslice__ = new_instancemethod(_pyBasePython.listB___delslice__, None, listB)
listB.__delitem__ = new_instancemethod(_pyBasePython.listB___delitem__, None, listB)
listB.__getitem__ = new_instancemethod(_pyBasePython.listB___getitem__, None, listB)
listB.__setitem__ = new_instancemethod(_pyBasePython.listB___setitem__, None, listB)
listB.pop = new_instancemethod(_pyBasePython.listB_pop, None, listB)
listB.append = new_instancemethod(_pyBasePython.listB_append, None, listB)
listB.empty = new_instancemethod(_pyBasePython.listB_empty, None, listB)
listB.size = new_instancemethod(_pyBasePython.listB_size, None, listB)
listB.swap = new_instancemethod(_pyBasePython.listB_swap, None, listB)
listB.begin = new_instancemethod(_pyBasePython.listB_begin, None, listB)
listB.end = new_instancemethod(_pyBasePython.listB_end, None, listB)
listB.rbegin = new_instancemethod(_pyBasePython.listB_rbegin, None, listB)
listB.rend = new_instancemethod(_pyBasePython.listB_rend, None, listB)
listB.clear = new_instancemethod(_pyBasePython.listB_clear, None, listB)
listB.get_allocator = new_instancemethod(_pyBasePython.listB_get_allocator, None, listB)
listB.pop_back = new_instancemethod(_pyBasePython.listB_pop_back, None, listB)
listB.erase = new_instancemethod(_pyBasePython.listB_erase, None, listB)
listB.push_back = new_instancemethod(_pyBasePython.listB_push_back, None, listB)
listB.front = new_instancemethod(_pyBasePython.listB_front, None, listB)
listB.back = new_instancemethod(_pyBasePython.listB_back, None, listB)
listB.assign = new_instancemethod(_pyBasePython.listB_assign, None, listB)
listB.resize = new_instancemethod(_pyBasePython.listB_resize, None, listB)
listB.insert = new_instancemethod(_pyBasePython.listB_insert, None, listB)
listB.pop_front = new_instancemethod(_pyBasePython.listB_pop_front, None, listB)
listB.push_front = new_instancemethod(_pyBasePython.listB_push_front, None, listB)
listB.reverse = new_instancemethod(_pyBasePython.listB_reverse, None, listB)
listB_swigregister = _pyBasePython.listB_swigregister
listB_swigregister(listB)

class listI(object):
    """Proxy of C++ std::list<(int)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listI self) -> SwigPyIterator"""
        return _pyBasePython.listI_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listI self) -> bool"""
        return _pyBasePython.listI___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listI self) -> bool"""
        return _pyBasePython.listI___bool__(self)


    def __len__(self) -> "std::list< int >::size_type":
        """__len__(listI self) -> std::list< int >::size_type"""
        return _pyBasePython.listI___len__(self)


    def __getslice__(self, i: 'std::list< int >::difference_type', j: 'std::list< int >::difference_type') -> "std::list< int,std::allocator< int > > *":
        """__getslice__(listI self, std::list< int >::difference_type i, std::list< int >::difference_type j) -> listI"""
        return _pyBasePython.listI___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listI self, std::list< int >::difference_type i, std::list< int >::difference_type j)
        __setslice__(listI self, std::list< int >::difference_type i, std::list< int >::difference_type j, listI v)
        """
        return _pyBasePython.listI___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< int >::difference_type', j: 'std::list< int >::difference_type') -> "void":
        """__delslice__(listI self, std::list< int >::difference_type i, std::list< int >::difference_type j)"""
        return _pyBasePython.listI___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listI self, std::list< int >::difference_type i)
        __delitem__(listI self, PySliceObject * slice)
        """
        return _pyBasePython.listI___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< int >::value_type const &":
        """
        __getitem__(listI self, PySliceObject * slice) -> listI
        __getitem__(listI self, std::list< int >::difference_type i) -> std::list< int >::value_type const &
        """
        return _pyBasePython.listI___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listI self, PySliceObject * slice, listI v)
        __setitem__(listI self, PySliceObject * slice)
        __setitem__(listI self, std::list< int >::difference_type i, std::list< int >::value_type const & x)
        """
        return _pyBasePython.listI___setitem__(self, *args)


    def pop(self) -> "std::list< int >::value_type":
        """pop(listI self) -> std::list< int >::value_type"""
        return _pyBasePython.listI_pop(self)


    def append(self, x: 'std::list< int >::value_type const &') -> "void":
        """append(listI self, std::list< int >::value_type const & x)"""
        return _pyBasePython.listI_append(self, x)


    def empty(self) -> "bool":
        """empty(listI self) -> bool"""
        return _pyBasePython.listI_empty(self)


    def size(self) -> "std::list< int >::size_type":
        """size(listI self) -> std::list< int >::size_type"""
        return _pyBasePython.listI_size(self)


    def swap(self, v: 'listI') -> "void":
        """swap(listI self, listI v)"""
        return _pyBasePython.listI_swap(self, v)


    def begin(self) -> "std::list< int >::iterator":
        """begin(listI self) -> std::list< int >::iterator"""
        return _pyBasePython.listI_begin(self)


    def end(self) -> "std::list< int >::iterator":
        """end(listI self) -> std::list< int >::iterator"""
        return _pyBasePython.listI_end(self)


    def rbegin(self) -> "std::list< int >::reverse_iterator":
        """rbegin(listI self) -> std::list< int >::reverse_iterator"""
        return _pyBasePython.listI_rbegin(self)


    def rend(self) -> "std::list< int >::reverse_iterator":
        """rend(listI self) -> std::list< int >::reverse_iterator"""
        return _pyBasePython.listI_rend(self)


    def clear(self) -> "void":
        """clear(listI self)"""
        return _pyBasePython.listI_clear(self)


    def get_allocator(self) -> "std::list< int >::allocator_type":
        """get_allocator(listI self) -> std::list< int >::allocator_type"""
        return _pyBasePython.listI_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listI self)"""
        return _pyBasePython.listI_pop_back(self)


    def erase(self, *args) -> "std::list< int >::iterator":
        """
        erase(listI self, std::list< int >::iterator pos) -> std::list< int >::iterator
        erase(listI self, std::list< int >::iterator first, std::list< int >::iterator last) -> std::list< int >::iterator
        """
        return _pyBasePython.listI_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(int)> self) -> listI
        __init__(std::list<(int)> self, listI arg2) -> listI
        __init__(std::list<(int)> self, std::list< int >::size_type size) -> listI
        __init__(std::list<(int)> self, std::list< int >::size_type size, std::list< int >::value_type const & value) -> listI
        """
        _pyBasePython.listI_swiginit(self, _pyBasePython.new_listI(*args))

    def push_back(self, x: 'std::list< int >::value_type const &') -> "void":
        """push_back(listI self, std::list< int >::value_type const & x)"""
        return _pyBasePython.listI_push_back(self, x)


    def front(self) -> "std::list< int >::value_type const &":
        """front(listI self) -> std::list< int >::value_type const &"""
        return _pyBasePython.listI_front(self)


    def back(self) -> "std::list< int >::value_type const &":
        """back(listI self) -> std::list< int >::value_type const &"""
        return _pyBasePython.listI_back(self)


    def assign(self, n: 'std::list< int >::size_type', x: 'std::list< int >::value_type const &') -> "void":
        """assign(listI self, std::list< int >::size_type n, std::list< int >::value_type const & x)"""
        return _pyBasePython.listI_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listI self, std::list< int >::size_type new_size)
        resize(listI self, std::list< int >::size_type new_size, std::list< int >::value_type const & x)
        """
        return _pyBasePython.listI_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listI self, std::list< int >::iterator pos, std::list< int >::value_type const & x) -> std::list< int >::iterator
        insert(listI self, std::list< int >::iterator pos, std::list< int >::size_type n, std::list< int >::value_type const & x)
        """
        return _pyBasePython.listI_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listI self)"""
        return _pyBasePython.listI_pop_front(self)


    def push_front(self, x: 'std::list< int >::value_type const &') -> "void":
        """push_front(listI self, std::list< int >::value_type const & x)"""
        return _pyBasePython.listI_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listI self)"""
        return _pyBasePython.listI_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listI
listI.iterator = new_instancemethod(_pyBasePython.listI_iterator, None, listI)
listI.__nonzero__ = new_instancemethod(_pyBasePython.listI___nonzero__, None, listI)
listI.__bool__ = new_instancemethod(_pyBasePython.listI___bool__, None, listI)
listI.__len__ = new_instancemethod(_pyBasePython.listI___len__, None, listI)
listI.__getslice__ = new_instancemethod(_pyBasePython.listI___getslice__, None, listI)
listI.__setslice__ = new_instancemethod(_pyBasePython.listI___setslice__, None, listI)
listI.__delslice__ = new_instancemethod(_pyBasePython.listI___delslice__, None, listI)
listI.__delitem__ = new_instancemethod(_pyBasePython.listI___delitem__, None, listI)
listI.__getitem__ = new_instancemethod(_pyBasePython.listI___getitem__, None, listI)
listI.__setitem__ = new_instancemethod(_pyBasePython.listI___setitem__, None, listI)
listI.pop = new_instancemethod(_pyBasePython.listI_pop, None, listI)
listI.append = new_instancemethod(_pyBasePython.listI_append, None, listI)
listI.empty = new_instancemethod(_pyBasePython.listI_empty, None, listI)
listI.size = new_instancemethod(_pyBasePython.listI_size, None, listI)
listI.swap = new_instancemethod(_pyBasePython.listI_swap, None, listI)
listI.begin = new_instancemethod(_pyBasePython.listI_begin, None, listI)
listI.end = new_instancemethod(_pyBasePython.listI_end, None, listI)
listI.rbegin = new_instancemethod(_pyBasePython.listI_rbegin, None, listI)
listI.rend = new_instancemethod(_pyBasePython.listI_rend, None, listI)
listI.clear = new_instancemethod(_pyBasePython.listI_clear, None, listI)
listI.get_allocator = new_instancemethod(_pyBasePython.listI_get_allocator, None, listI)
listI.pop_back = new_instancemethod(_pyBasePython.listI_pop_back, None, listI)
listI.erase = new_instancemethod(_pyBasePython.listI_erase, None, listI)
listI.push_back = new_instancemethod(_pyBasePython.listI_push_back, None, listI)
listI.front = new_instancemethod(_pyBasePython.listI_front, None, listI)
listI.back = new_instancemethod(_pyBasePython.listI_back, None, listI)
listI.assign = new_instancemethod(_pyBasePython.listI_assign, None, listI)
listI.resize = new_instancemethod(_pyBasePython.listI_resize, None, listI)
listI.insert = new_instancemethod(_pyBasePython.listI_insert, None, listI)
listI.pop_front = new_instancemethod(_pyBasePython.listI_pop_front, None, listI)
listI.push_front = new_instancemethod(_pyBasePython.listI_push_front, None, listI)
listI.reverse = new_instancemethod(_pyBasePython.listI_reverse, None, listI)
listI_swigregister = _pyBasePython.listI_swigregister
listI_swigregister(listI)

class listUC(object):
    """Proxy of C++ std::list<(unsigned char)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listUC self) -> SwigPyIterator"""
        return _pyBasePython.listUC_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listUC self) -> bool"""
        return _pyBasePython.listUC___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listUC self) -> bool"""
        return _pyBasePython.listUC___bool__(self)


    def __len__(self) -> "std::list< unsigned char >::size_type":
        """__len__(listUC self) -> std::list< unsigned char >::size_type"""
        return _pyBasePython.listUC___len__(self)


    def __getslice__(self, i: 'std::list< unsigned char >::difference_type', j: 'std::list< unsigned char >::difference_type') -> "std::list< unsigned char,std::allocator< unsigned char > > *":
        """__getslice__(listUC self, std::list< unsigned char >::difference_type i, std::list< unsigned char >::difference_type j) -> listUC"""
        return _pyBasePython.listUC___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listUC self, std::list< unsigned char >::difference_type i, std::list< unsigned char >::difference_type j)
        __setslice__(listUC self, std::list< unsigned char >::difference_type i, std::list< unsigned char >::difference_type j, listUC v)
        """
        return _pyBasePython.listUC___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< unsigned char >::difference_type', j: 'std::list< unsigned char >::difference_type') -> "void":
        """__delslice__(listUC self, std::list< unsigned char >::difference_type i, std::list< unsigned char >::difference_type j)"""
        return _pyBasePython.listUC___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listUC self, std::list< unsigned char >::difference_type i)
        __delitem__(listUC self, PySliceObject * slice)
        """
        return _pyBasePython.listUC___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< unsigned char >::value_type const &":
        """
        __getitem__(listUC self, PySliceObject * slice) -> listUC
        __getitem__(listUC self, std::list< unsigned char >::difference_type i) -> std::list< unsigned char >::value_type const &
        """
        return _pyBasePython.listUC___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listUC self, PySliceObject * slice, listUC v)
        __setitem__(listUC self, PySliceObject * slice)
        __setitem__(listUC self, std::list< unsigned char >::difference_type i, std::list< unsigned char >::value_type const & x)
        """
        return _pyBasePython.listUC___setitem__(self, *args)


    def pop(self) -> "std::list< unsigned char >::value_type":
        """pop(listUC self) -> std::list< unsigned char >::value_type"""
        return _pyBasePython.listUC_pop(self)


    def append(self, x: 'std::list< unsigned char >::value_type const &') -> "void":
        """append(listUC self, std::list< unsigned char >::value_type const & x)"""
        return _pyBasePython.listUC_append(self, x)


    def empty(self) -> "bool":
        """empty(listUC self) -> bool"""
        return _pyBasePython.listUC_empty(self)


    def size(self) -> "std::list< unsigned char >::size_type":
        """size(listUC self) -> std::list< unsigned char >::size_type"""
        return _pyBasePython.listUC_size(self)


    def swap(self, v: 'listUC') -> "void":
        """swap(listUC self, listUC v)"""
        return _pyBasePython.listUC_swap(self, v)


    def begin(self) -> "std::list< unsigned char >::iterator":
        """begin(listUC self) -> std::list< unsigned char >::iterator"""
        return _pyBasePython.listUC_begin(self)


    def end(self) -> "std::list< unsigned char >::iterator":
        """end(listUC self) -> std::list< unsigned char >::iterator"""
        return _pyBasePython.listUC_end(self)


    def rbegin(self) -> "std::list< unsigned char >::reverse_iterator":
        """rbegin(listUC self) -> std::list< unsigned char >::reverse_iterator"""
        return _pyBasePython.listUC_rbegin(self)


    def rend(self) -> "std::list< unsigned char >::reverse_iterator":
        """rend(listUC self) -> std::list< unsigned char >::reverse_iterator"""
        return _pyBasePython.listUC_rend(self)


    def clear(self) -> "void":
        """clear(listUC self)"""
        return _pyBasePython.listUC_clear(self)


    def get_allocator(self) -> "std::list< unsigned char >::allocator_type":
        """get_allocator(listUC self) -> std::list< unsigned char >::allocator_type"""
        return _pyBasePython.listUC_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listUC self)"""
        return _pyBasePython.listUC_pop_back(self)


    def erase(self, *args) -> "std::list< unsigned char >::iterator":
        """
        erase(listUC self, std::list< unsigned char >::iterator pos) -> std::list< unsigned char >::iterator
        erase(listUC self, std::list< unsigned char >::iterator first, std::list< unsigned char >::iterator last) -> std::list< unsigned char >::iterator
        """
        return _pyBasePython.listUC_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(unsigned char)> self) -> listUC
        __init__(std::list<(unsigned char)> self, listUC arg2) -> listUC
        __init__(std::list<(unsigned char)> self, std::list< unsigned char >::size_type size) -> listUC
        __init__(std::list<(unsigned char)> self, std::list< unsigned char >::size_type size, std::list< unsigned char >::value_type const & value) -> listUC
        """
        _pyBasePython.listUC_swiginit(self, _pyBasePython.new_listUC(*args))

    def push_back(self, x: 'std::list< unsigned char >::value_type const &') -> "void":
        """push_back(listUC self, std::list< unsigned char >::value_type const & x)"""
        return _pyBasePython.listUC_push_back(self, x)


    def front(self) -> "std::list< unsigned char >::value_type const &":
        """front(listUC self) -> std::list< unsigned char >::value_type const &"""
        return _pyBasePython.listUC_front(self)


    def back(self) -> "std::list< unsigned char >::value_type const &":
        """back(listUC self) -> std::list< unsigned char >::value_type const &"""
        return _pyBasePython.listUC_back(self)


    def assign(self, n: 'std::list< unsigned char >::size_type', x: 'std::list< unsigned char >::value_type const &') -> "void":
        """assign(listUC self, std::list< unsigned char >::size_type n, std::list< unsigned char >::value_type const & x)"""
        return _pyBasePython.listUC_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listUC self, std::list< unsigned char >::size_type new_size)
        resize(listUC self, std::list< unsigned char >::size_type new_size, std::list< unsigned char >::value_type const & x)
        """
        return _pyBasePython.listUC_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listUC self, std::list< unsigned char >::iterator pos, std::list< unsigned char >::value_type const & x) -> std::list< unsigned char >::iterator
        insert(listUC self, std::list< unsigned char >::iterator pos, std::list< unsigned char >::size_type n, std::list< unsigned char >::value_type const & x)
        """
        return _pyBasePython.listUC_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listUC self)"""
        return _pyBasePython.listUC_pop_front(self)


    def push_front(self, x: 'std::list< unsigned char >::value_type const &') -> "void":
        """push_front(listUC self, std::list< unsigned char >::value_type const & x)"""
        return _pyBasePython.listUC_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listUC self)"""
        return _pyBasePython.listUC_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listUC
listUC.iterator = new_instancemethod(_pyBasePython.listUC_iterator, None, listUC)
listUC.__nonzero__ = new_instancemethod(_pyBasePython.listUC___nonzero__, None, listUC)
listUC.__bool__ = new_instancemethod(_pyBasePython.listUC___bool__, None, listUC)
listUC.__len__ = new_instancemethod(_pyBasePython.listUC___len__, None, listUC)
listUC.__getslice__ = new_instancemethod(_pyBasePython.listUC___getslice__, None, listUC)
listUC.__setslice__ = new_instancemethod(_pyBasePython.listUC___setslice__, None, listUC)
listUC.__delslice__ = new_instancemethod(_pyBasePython.listUC___delslice__, None, listUC)
listUC.__delitem__ = new_instancemethod(_pyBasePython.listUC___delitem__, None, listUC)
listUC.__getitem__ = new_instancemethod(_pyBasePython.listUC___getitem__, None, listUC)
listUC.__setitem__ = new_instancemethod(_pyBasePython.listUC___setitem__, None, listUC)
listUC.pop = new_instancemethod(_pyBasePython.listUC_pop, None, listUC)
listUC.append = new_instancemethod(_pyBasePython.listUC_append, None, listUC)
listUC.empty = new_instancemethod(_pyBasePython.listUC_empty, None, listUC)
listUC.size = new_instancemethod(_pyBasePython.listUC_size, None, listUC)
listUC.swap = new_instancemethod(_pyBasePython.listUC_swap, None, listUC)
listUC.begin = new_instancemethod(_pyBasePython.listUC_begin, None, listUC)
listUC.end = new_instancemethod(_pyBasePython.listUC_end, None, listUC)
listUC.rbegin = new_instancemethod(_pyBasePython.listUC_rbegin, None, listUC)
listUC.rend = new_instancemethod(_pyBasePython.listUC_rend, None, listUC)
listUC.clear = new_instancemethod(_pyBasePython.listUC_clear, None, listUC)
listUC.get_allocator = new_instancemethod(_pyBasePython.listUC_get_allocator, None, listUC)
listUC.pop_back = new_instancemethod(_pyBasePython.listUC_pop_back, None, listUC)
listUC.erase = new_instancemethod(_pyBasePython.listUC_erase, None, listUC)
listUC.push_back = new_instancemethod(_pyBasePython.listUC_push_back, None, listUC)
listUC.front = new_instancemethod(_pyBasePython.listUC_front, None, listUC)
listUC.back = new_instancemethod(_pyBasePython.listUC_back, None, listUC)
listUC.assign = new_instancemethod(_pyBasePython.listUC_assign, None, listUC)
listUC.resize = new_instancemethod(_pyBasePython.listUC_resize, None, listUC)
listUC.insert = new_instancemethod(_pyBasePython.listUC_insert, None, listUC)
listUC.pop_front = new_instancemethod(_pyBasePython.listUC_pop_front, None, listUC)
listUC.push_front = new_instancemethod(_pyBasePython.listUC_push_front, None, listUC)
listUC.reverse = new_instancemethod(_pyBasePython.listUC_reverse, None, listUC)
listUC_swigregister = _pyBasePython.listUC_swigregister
listUC_swigregister(listUC)

class listUS(object):
    """Proxy of C++ std::list<(unsigned short)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listUS self) -> SwigPyIterator"""
        return _pyBasePython.listUS_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listUS self) -> bool"""
        return _pyBasePython.listUS___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listUS self) -> bool"""
        return _pyBasePython.listUS___bool__(self)


    def __len__(self) -> "std::list< unsigned short >::size_type":
        """__len__(listUS self) -> std::list< unsigned short >::size_type"""
        return _pyBasePython.listUS___len__(self)


    def __getslice__(self, i: 'std::list< unsigned short >::difference_type', j: 'std::list< unsigned short >::difference_type') -> "std::list< unsigned short,std::allocator< unsigned short > > *":
        """__getslice__(listUS self, std::list< unsigned short >::difference_type i, std::list< unsigned short >::difference_type j) -> listUS"""
        return _pyBasePython.listUS___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listUS self, std::list< unsigned short >::difference_type i, std::list< unsigned short >::difference_type j)
        __setslice__(listUS self, std::list< unsigned short >::difference_type i, std::list< unsigned short >::difference_type j, listUS v)
        """
        return _pyBasePython.listUS___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< unsigned short >::difference_type', j: 'std::list< unsigned short >::difference_type') -> "void":
        """__delslice__(listUS self, std::list< unsigned short >::difference_type i, std::list< unsigned short >::difference_type j)"""
        return _pyBasePython.listUS___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listUS self, std::list< unsigned short >::difference_type i)
        __delitem__(listUS self, PySliceObject * slice)
        """
        return _pyBasePython.listUS___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< unsigned short >::value_type const &":
        """
        __getitem__(listUS self, PySliceObject * slice) -> listUS
        __getitem__(listUS self, std::list< unsigned short >::difference_type i) -> std::list< unsigned short >::value_type const &
        """
        return _pyBasePython.listUS___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listUS self, PySliceObject * slice, listUS v)
        __setitem__(listUS self, PySliceObject * slice)
        __setitem__(listUS self, std::list< unsigned short >::difference_type i, std::list< unsigned short >::value_type const & x)
        """
        return _pyBasePython.listUS___setitem__(self, *args)


    def pop(self) -> "std::list< unsigned short >::value_type":
        """pop(listUS self) -> std::list< unsigned short >::value_type"""
        return _pyBasePython.listUS_pop(self)


    def append(self, x: 'std::list< unsigned short >::value_type const &') -> "void":
        """append(listUS self, std::list< unsigned short >::value_type const & x)"""
        return _pyBasePython.listUS_append(self, x)


    def empty(self) -> "bool":
        """empty(listUS self) -> bool"""
        return _pyBasePython.listUS_empty(self)


    def size(self) -> "std::list< unsigned short >::size_type":
        """size(listUS self) -> std::list< unsigned short >::size_type"""
        return _pyBasePython.listUS_size(self)


    def swap(self, v: 'listUS') -> "void":
        """swap(listUS self, listUS v)"""
        return _pyBasePython.listUS_swap(self, v)


    def begin(self) -> "std::list< unsigned short >::iterator":
        """begin(listUS self) -> std::list< unsigned short >::iterator"""
        return _pyBasePython.listUS_begin(self)


    def end(self) -> "std::list< unsigned short >::iterator":
        """end(listUS self) -> std::list< unsigned short >::iterator"""
        return _pyBasePython.listUS_end(self)


    def rbegin(self) -> "std::list< unsigned short >::reverse_iterator":
        """rbegin(listUS self) -> std::list< unsigned short >::reverse_iterator"""
        return _pyBasePython.listUS_rbegin(self)


    def rend(self) -> "std::list< unsigned short >::reverse_iterator":
        """rend(listUS self) -> std::list< unsigned short >::reverse_iterator"""
        return _pyBasePython.listUS_rend(self)


    def clear(self) -> "void":
        """clear(listUS self)"""
        return _pyBasePython.listUS_clear(self)


    def get_allocator(self) -> "std::list< unsigned short >::allocator_type":
        """get_allocator(listUS self) -> std::list< unsigned short >::allocator_type"""
        return _pyBasePython.listUS_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listUS self)"""
        return _pyBasePython.listUS_pop_back(self)


    def erase(self, *args) -> "std::list< unsigned short >::iterator":
        """
        erase(listUS self, std::list< unsigned short >::iterator pos) -> std::list< unsigned short >::iterator
        erase(listUS self, std::list< unsigned short >::iterator first, std::list< unsigned short >::iterator last) -> std::list< unsigned short >::iterator
        """
        return _pyBasePython.listUS_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(unsigned short)> self) -> listUS
        __init__(std::list<(unsigned short)> self, listUS arg2) -> listUS
        __init__(std::list<(unsigned short)> self, std::list< unsigned short >::size_type size) -> listUS
        __init__(std::list<(unsigned short)> self, std::list< unsigned short >::size_type size, std::list< unsigned short >::value_type const & value) -> listUS
        """
        _pyBasePython.listUS_swiginit(self, _pyBasePython.new_listUS(*args))

    def push_back(self, x: 'std::list< unsigned short >::value_type const &') -> "void":
        """push_back(listUS self, std::list< unsigned short >::value_type const & x)"""
        return _pyBasePython.listUS_push_back(self, x)


    def front(self) -> "std::list< unsigned short >::value_type const &":
        """front(listUS self) -> std::list< unsigned short >::value_type const &"""
        return _pyBasePython.listUS_front(self)


    def back(self) -> "std::list< unsigned short >::value_type const &":
        """back(listUS self) -> std::list< unsigned short >::value_type const &"""
        return _pyBasePython.listUS_back(self)


    def assign(self, n: 'std::list< unsigned short >::size_type', x: 'std::list< unsigned short >::value_type const &') -> "void":
        """assign(listUS self, std::list< unsigned short >::size_type n, std::list< unsigned short >::value_type const & x)"""
        return _pyBasePython.listUS_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listUS self, std::list< unsigned short >::size_type new_size)
        resize(listUS self, std::list< unsigned short >::size_type new_size, std::list< unsigned short >::value_type const & x)
        """
        return _pyBasePython.listUS_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listUS self, std::list< unsigned short >::iterator pos, std::list< unsigned short >::value_type const & x) -> std::list< unsigned short >::iterator
        insert(listUS self, std::list< unsigned short >::iterator pos, std::list< unsigned short >::size_type n, std::list< unsigned short >::value_type const & x)
        """
        return _pyBasePython.listUS_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listUS self)"""
        return _pyBasePython.listUS_pop_front(self)


    def push_front(self, x: 'std::list< unsigned short >::value_type const &') -> "void":
        """push_front(listUS self, std::list< unsigned short >::value_type const & x)"""
        return _pyBasePython.listUS_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listUS self)"""
        return _pyBasePython.listUS_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listUS
listUS.iterator = new_instancemethod(_pyBasePython.listUS_iterator, None, listUS)
listUS.__nonzero__ = new_instancemethod(_pyBasePython.listUS___nonzero__, None, listUS)
listUS.__bool__ = new_instancemethod(_pyBasePython.listUS___bool__, None, listUS)
listUS.__len__ = new_instancemethod(_pyBasePython.listUS___len__, None, listUS)
listUS.__getslice__ = new_instancemethod(_pyBasePython.listUS___getslice__, None, listUS)
listUS.__setslice__ = new_instancemethod(_pyBasePython.listUS___setslice__, None, listUS)
listUS.__delslice__ = new_instancemethod(_pyBasePython.listUS___delslice__, None, listUS)
listUS.__delitem__ = new_instancemethod(_pyBasePython.listUS___delitem__, None, listUS)
listUS.__getitem__ = new_instancemethod(_pyBasePython.listUS___getitem__, None, listUS)
listUS.__setitem__ = new_instancemethod(_pyBasePython.listUS___setitem__, None, listUS)
listUS.pop = new_instancemethod(_pyBasePython.listUS_pop, None, listUS)
listUS.append = new_instancemethod(_pyBasePython.listUS_append, None, listUS)
listUS.empty = new_instancemethod(_pyBasePython.listUS_empty, None, listUS)
listUS.size = new_instancemethod(_pyBasePython.listUS_size, None, listUS)
listUS.swap = new_instancemethod(_pyBasePython.listUS_swap, None, listUS)
listUS.begin = new_instancemethod(_pyBasePython.listUS_begin, None, listUS)
listUS.end = new_instancemethod(_pyBasePython.listUS_end, None, listUS)
listUS.rbegin = new_instancemethod(_pyBasePython.listUS_rbegin, None, listUS)
listUS.rend = new_instancemethod(_pyBasePython.listUS_rend, None, listUS)
listUS.clear = new_instancemethod(_pyBasePython.listUS_clear, None, listUS)
listUS.get_allocator = new_instancemethod(_pyBasePython.listUS_get_allocator, None, listUS)
listUS.pop_back = new_instancemethod(_pyBasePython.listUS_pop_back, None, listUS)
listUS.erase = new_instancemethod(_pyBasePython.listUS_erase, None, listUS)
listUS.push_back = new_instancemethod(_pyBasePython.listUS_push_back, None, listUS)
listUS.front = new_instancemethod(_pyBasePython.listUS_front, None, listUS)
listUS.back = new_instancemethod(_pyBasePython.listUS_back, None, listUS)
listUS.assign = new_instancemethod(_pyBasePython.listUS_assign, None, listUS)
listUS.resize = new_instancemethod(_pyBasePython.listUS_resize, None, listUS)
listUS.insert = new_instancemethod(_pyBasePython.listUS_insert, None, listUS)
listUS.pop_front = new_instancemethod(_pyBasePython.listUS_pop_front, None, listUS)
listUS.push_front = new_instancemethod(_pyBasePython.listUS_push_front, None, listUS)
listUS.reverse = new_instancemethod(_pyBasePython.listUS_reverse, None, listUS)
listUS_swigregister = _pyBasePython.listUS_swigregister
listUS_swigregister(listUS)

class listUI(object):
    """Proxy of C++ std::list<(unsigned int)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listUI self) -> SwigPyIterator"""
        return _pyBasePython.listUI_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listUI self) -> bool"""
        return _pyBasePython.listUI___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listUI self) -> bool"""
        return _pyBasePython.listUI___bool__(self)


    def __len__(self) -> "std::list< unsigned int >::size_type":
        """__len__(listUI self) -> std::list< unsigned int >::size_type"""
        return _pyBasePython.listUI___len__(self)


    def __getslice__(self, i: 'std::list< unsigned int >::difference_type', j: 'std::list< unsigned int >::difference_type') -> "std::list< unsigned int,std::allocator< unsigned int > > *":
        """__getslice__(listUI self, std::list< unsigned int >::difference_type i, std::list< unsigned int >::difference_type j) -> listUI"""
        return _pyBasePython.listUI___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listUI self, std::list< unsigned int >::difference_type i, std::list< unsigned int >::difference_type j)
        __setslice__(listUI self, std::list< unsigned int >::difference_type i, std::list< unsigned int >::difference_type j, listUI v)
        """
        return _pyBasePython.listUI___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< unsigned int >::difference_type', j: 'std::list< unsigned int >::difference_type') -> "void":
        """__delslice__(listUI self, std::list< unsigned int >::difference_type i, std::list< unsigned int >::difference_type j)"""
        return _pyBasePython.listUI___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listUI self, std::list< unsigned int >::difference_type i)
        __delitem__(listUI self, PySliceObject * slice)
        """
        return _pyBasePython.listUI___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< unsigned int >::value_type const &":
        """
        __getitem__(listUI self, PySliceObject * slice) -> listUI
        __getitem__(listUI self, std::list< unsigned int >::difference_type i) -> std::list< unsigned int >::value_type const &
        """
        return _pyBasePython.listUI___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listUI self, PySliceObject * slice, listUI v)
        __setitem__(listUI self, PySliceObject * slice)
        __setitem__(listUI self, std::list< unsigned int >::difference_type i, std::list< unsigned int >::value_type const & x)
        """
        return _pyBasePython.listUI___setitem__(self, *args)


    def pop(self) -> "std::list< unsigned int >::value_type":
        """pop(listUI self) -> std::list< unsigned int >::value_type"""
        return _pyBasePython.listUI_pop(self)


    def append(self, x: 'std::list< unsigned int >::value_type const &') -> "void":
        """append(listUI self, std::list< unsigned int >::value_type const & x)"""
        return _pyBasePython.listUI_append(self, x)


    def empty(self) -> "bool":
        """empty(listUI self) -> bool"""
        return _pyBasePython.listUI_empty(self)


    def size(self) -> "std::list< unsigned int >::size_type":
        """size(listUI self) -> std::list< unsigned int >::size_type"""
        return _pyBasePython.listUI_size(self)


    def swap(self, v: 'listUI') -> "void":
        """swap(listUI self, listUI v)"""
        return _pyBasePython.listUI_swap(self, v)


    def begin(self) -> "std::list< unsigned int >::iterator":
        """begin(listUI self) -> std::list< unsigned int >::iterator"""
        return _pyBasePython.listUI_begin(self)


    def end(self) -> "std::list< unsigned int >::iterator":
        """end(listUI self) -> std::list< unsigned int >::iterator"""
        return _pyBasePython.listUI_end(self)


    def rbegin(self) -> "std::list< unsigned int >::reverse_iterator":
        """rbegin(listUI self) -> std::list< unsigned int >::reverse_iterator"""
        return _pyBasePython.listUI_rbegin(self)


    def rend(self) -> "std::list< unsigned int >::reverse_iterator":
        """rend(listUI self) -> std::list< unsigned int >::reverse_iterator"""
        return _pyBasePython.listUI_rend(self)


    def clear(self) -> "void":
        """clear(listUI self)"""
        return _pyBasePython.listUI_clear(self)


    def get_allocator(self) -> "std::list< unsigned int >::allocator_type":
        """get_allocator(listUI self) -> std::list< unsigned int >::allocator_type"""
        return _pyBasePython.listUI_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listUI self)"""
        return _pyBasePython.listUI_pop_back(self)


    def erase(self, *args) -> "std::list< unsigned int >::iterator":
        """
        erase(listUI self, std::list< unsigned int >::iterator pos) -> std::list< unsigned int >::iterator
        erase(listUI self, std::list< unsigned int >::iterator first, std::list< unsigned int >::iterator last) -> std::list< unsigned int >::iterator
        """
        return _pyBasePython.listUI_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(unsigned int)> self) -> listUI
        __init__(std::list<(unsigned int)> self, listUI arg2) -> listUI
        __init__(std::list<(unsigned int)> self, std::list< unsigned int >::size_type size) -> listUI
        __init__(std::list<(unsigned int)> self, std::list< unsigned int >::size_type size, std::list< unsigned int >::value_type const & value) -> listUI
        """
        _pyBasePython.listUI_swiginit(self, _pyBasePython.new_listUI(*args))

    def push_back(self, x: 'std::list< unsigned int >::value_type const &') -> "void":
        """push_back(listUI self, std::list< unsigned int >::value_type const & x)"""
        return _pyBasePython.listUI_push_back(self, x)


    def front(self) -> "std::list< unsigned int >::value_type const &":
        """front(listUI self) -> std::list< unsigned int >::value_type const &"""
        return _pyBasePython.listUI_front(self)


    def back(self) -> "std::list< unsigned int >::value_type const &":
        """back(listUI self) -> std::list< unsigned int >::value_type const &"""
        return _pyBasePython.listUI_back(self)


    def assign(self, n: 'std::list< unsigned int >::size_type', x: 'std::list< unsigned int >::value_type const &') -> "void":
        """assign(listUI self, std::list< unsigned int >::size_type n, std::list< unsigned int >::value_type const & x)"""
        return _pyBasePython.listUI_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listUI self, std::list< unsigned int >::size_type new_size)
        resize(listUI self, std::list< unsigned int >::size_type new_size, std::list< unsigned int >::value_type const & x)
        """
        return _pyBasePython.listUI_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listUI self, std::list< unsigned int >::iterator pos, std::list< unsigned int >::value_type const & x) -> std::list< unsigned int >::iterator
        insert(listUI self, std::list< unsigned int >::iterator pos, std::list< unsigned int >::size_type n, std::list< unsigned int >::value_type const & x)
        """
        return _pyBasePython.listUI_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listUI self)"""
        return _pyBasePython.listUI_pop_front(self)


    def push_front(self, x: 'std::list< unsigned int >::value_type const &') -> "void":
        """push_front(listUI self, std::list< unsigned int >::value_type const & x)"""
        return _pyBasePython.listUI_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listUI self)"""
        return _pyBasePython.listUI_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listUI
listUI.iterator = new_instancemethod(_pyBasePython.listUI_iterator, None, listUI)
listUI.__nonzero__ = new_instancemethod(_pyBasePython.listUI___nonzero__, None, listUI)
listUI.__bool__ = new_instancemethod(_pyBasePython.listUI___bool__, None, listUI)
listUI.__len__ = new_instancemethod(_pyBasePython.listUI___len__, None, listUI)
listUI.__getslice__ = new_instancemethod(_pyBasePython.listUI___getslice__, None, listUI)
listUI.__setslice__ = new_instancemethod(_pyBasePython.listUI___setslice__, None, listUI)
listUI.__delslice__ = new_instancemethod(_pyBasePython.listUI___delslice__, None, listUI)
listUI.__delitem__ = new_instancemethod(_pyBasePython.listUI___delitem__, None, listUI)
listUI.__getitem__ = new_instancemethod(_pyBasePython.listUI___getitem__, None, listUI)
listUI.__setitem__ = new_instancemethod(_pyBasePython.listUI___setitem__, None, listUI)
listUI.pop = new_instancemethod(_pyBasePython.listUI_pop, None, listUI)
listUI.append = new_instancemethod(_pyBasePython.listUI_append, None, listUI)
listUI.empty = new_instancemethod(_pyBasePython.listUI_empty, None, listUI)
listUI.size = new_instancemethod(_pyBasePython.listUI_size, None, listUI)
listUI.swap = new_instancemethod(_pyBasePython.listUI_swap, None, listUI)
listUI.begin = new_instancemethod(_pyBasePython.listUI_begin, None, listUI)
listUI.end = new_instancemethod(_pyBasePython.listUI_end, None, listUI)
listUI.rbegin = new_instancemethod(_pyBasePython.listUI_rbegin, None, listUI)
listUI.rend = new_instancemethod(_pyBasePython.listUI_rend, None, listUI)
listUI.clear = new_instancemethod(_pyBasePython.listUI_clear, None, listUI)
listUI.get_allocator = new_instancemethod(_pyBasePython.listUI_get_allocator, None, listUI)
listUI.pop_back = new_instancemethod(_pyBasePython.listUI_pop_back, None, listUI)
listUI.erase = new_instancemethod(_pyBasePython.listUI_erase, None, listUI)
listUI.push_back = new_instancemethod(_pyBasePython.listUI_push_back, None, listUI)
listUI.front = new_instancemethod(_pyBasePython.listUI_front, None, listUI)
listUI.back = new_instancemethod(_pyBasePython.listUI_back, None, listUI)
listUI.assign = new_instancemethod(_pyBasePython.listUI_assign, None, listUI)
listUI.resize = new_instancemethod(_pyBasePython.listUI_resize, None, listUI)
listUI.insert = new_instancemethod(_pyBasePython.listUI_insert, None, listUI)
listUI.pop_front = new_instancemethod(_pyBasePython.listUI_pop_front, None, listUI)
listUI.push_front = new_instancemethod(_pyBasePython.listUI_push_front, None, listUI)
listUI.reverse = new_instancemethod(_pyBasePython.listUI_reverse, None, listUI)
listUI_swigregister = _pyBasePython.listUI_swigregister
listUI_swigregister(listUI)

class listUL(object):
    """Proxy of C++ std::list<(unsigned long)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listUL self) -> SwigPyIterator"""
        return _pyBasePython.listUL_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listUL self) -> bool"""
        return _pyBasePython.listUL___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listUL self) -> bool"""
        return _pyBasePython.listUL___bool__(self)


    def __len__(self) -> "std::list< unsigned long >::size_type":
        """__len__(listUL self) -> std::list< unsigned long >::size_type"""
        return _pyBasePython.listUL___len__(self)


    def __getslice__(self, i: 'std::list< unsigned long >::difference_type', j: 'std::list< unsigned long >::difference_type') -> "std::list< unsigned long,std::allocator< unsigned long > > *":
        """__getslice__(listUL self, std::list< unsigned long >::difference_type i, std::list< unsigned long >::difference_type j) -> listUL"""
        return _pyBasePython.listUL___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listUL self, std::list< unsigned long >::difference_type i, std::list< unsigned long >::difference_type j)
        __setslice__(listUL self, std::list< unsigned long >::difference_type i, std::list< unsigned long >::difference_type j, listUL v)
        """
        return _pyBasePython.listUL___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< unsigned long >::difference_type', j: 'std::list< unsigned long >::difference_type') -> "void":
        """__delslice__(listUL self, std::list< unsigned long >::difference_type i, std::list< unsigned long >::difference_type j)"""
        return _pyBasePython.listUL___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listUL self, std::list< unsigned long >::difference_type i)
        __delitem__(listUL self, PySliceObject * slice)
        """
        return _pyBasePython.listUL___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< unsigned long >::value_type const &":
        """
        __getitem__(listUL self, PySliceObject * slice) -> listUL
        __getitem__(listUL self, std::list< unsigned long >::difference_type i) -> std::list< unsigned long >::value_type const &
        """
        return _pyBasePython.listUL___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listUL self, PySliceObject * slice, listUL v)
        __setitem__(listUL self, PySliceObject * slice)
        __setitem__(listUL self, std::list< unsigned long >::difference_type i, std::list< unsigned long >::value_type const & x)
        """
        return _pyBasePython.listUL___setitem__(self, *args)


    def pop(self) -> "std::list< unsigned long >::value_type":
        """pop(listUL self) -> std::list< unsigned long >::value_type"""
        return _pyBasePython.listUL_pop(self)


    def append(self, x: 'std::list< unsigned long >::value_type const &') -> "void":
        """append(listUL self, std::list< unsigned long >::value_type const & x)"""
        return _pyBasePython.listUL_append(self, x)


    def empty(self) -> "bool":
        """empty(listUL self) -> bool"""
        return _pyBasePython.listUL_empty(self)


    def size(self) -> "std::list< unsigned long >::size_type":
        """size(listUL self) -> std::list< unsigned long >::size_type"""
        return _pyBasePython.listUL_size(self)


    def swap(self, v: 'listUL') -> "void":
        """swap(listUL self, listUL v)"""
        return _pyBasePython.listUL_swap(self, v)


    def begin(self) -> "std::list< unsigned long >::iterator":
        """begin(listUL self) -> std::list< unsigned long >::iterator"""
        return _pyBasePython.listUL_begin(self)


    def end(self) -> "std::list< unsigned long >::iterator":
        """end(listUL self) -> std::list< unsigned long >::iterator"""
        return _pyBasePython.listUL_end(self)


    def rbegin(self) -> "std::list< unsigned long >::reverse_iterator":
        """rbegin(listUL self) -> std::list< unsigned long >::reverse_iterator"""
        return _pyBasePython.listUL_rbegin(self)


    def rend(self) -> "std::list< unsigned long >::reverse_iterator":
        """rend(listUL self) -> std::list< unsigned long >::reverse_iterator"""
        return _pyBasePython.listUL_rend(self)


    def clear(self) -> "void":
        """clear(listUL self)"""
        return _pyBasePython.listUL_clear(self)


    def get_allocator(self) -> "std::list< unsigned long >::allocator_type":
        """get_allocator(listUL self) -> std::list< unsigned long >::allocator_type"""
        return _pyBasePython.listUL_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listUL self)"""
        return _pyBasePython.listUL_pop_back(self)


    def erase(self, *args) -> "std::list< unsigned long >::iterator":
        """
        erase(listUL self, std::list< unsigned long >::iterator pos) -> std::list< unsigned long >::iterator
        erase(listUL self, std::list< unsigned long >::iterator first, std::list< unsigned long >::iterator last) -> std::list< unsigned long >::iterator
        """
        return _pyBasePython.listUL_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(unsigned long)> self) -> listUL
        __init__(std::list<(unsigned long)> self, listUL arg2) -> listUL
        __init__(std::list<(unsigned long)> self, std::list< unsigned long >::size_type size) -> listUL
        __init__(std::list<(unsigned long)> self, std::list< unsigned long >::size_type size, std::list< unsigned long >::value_type const & value) -> listUL
        """
        _pyBasePython.listUL_swiginit(self, _pyBasePython.new_listUL(*args))

    def push_back(self, x: 'std::list< unsigned long >::value_type const &') -> "void":
        """push_back(listUL self, std::list< unsigned long >::value_type const & x)"""
        return _pyBasePython.listUL_push_back(self, x)


    def front(self) -> "std::list< unsigned long >::value_type const &":
        """front(listUL self) -> std::list< unsigned long >::value_type const &"""
        return _pyBasePython.listUL_front(self)


    def back(self) -> "std::list< unsigned long >::value_type const &":
        """back(listUL self) -> std::list< unsigned long >::value_type const &"""
        return _pyBasePython.listUL_back(self)


    def assign(self, n: 'std::list< unsigned long >::size_type', x: 'std::list< unsigned long >::value_type const &') -> "void":
        """assign(listUL self, std::list< unsigned long >::size_type n, std::list< unsigned long >::value_type const & x)"""
        return _pyBasePython.listUL_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listUL self, std::list< unsigned long >::size_type new_size)
        resize(listUL self, std::list< unsigned long >::size_type new_size, std::list< unsigned long >::value_type const & x)
        """
        return _pyBasePython.listUL_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listUL self, std::list< unsigned long >::iterator pos, std::list< unsigned long >::value_type const & x) -> std::list< unsigned long >::iterator
        insert(listUL self, std::list< unsigned long >::iterator pos, std::list< unsigned long >::size_type n, std::list< unsigned long >::value_type const & x)
        """
        return _pyBasePython.listUL_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listUL self)"""
        return _pyBasePython.listUL_pop_front(self)


    def push_front(self, x: 'std::list< unsigned long >::value_type const &') -> "void":
        """push_front(listUL self, std::list< unsigned long >::value_type const & x)"""
        return _pyBasePython.listUL_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listUL self)"""
        return _pyBasePython.listUL_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listUL
listUL.iterator = new_instancemethod(_pyBasePython.listUL_iterator, None, listUL)
listUL.__nonzero__ = new_instancemethod(_pyBasePython.listUL___nonzero__, None, listUL)
listUL.__bool__ = new_instancemethod(_pyBasePython.listUL___bool__, None, listUL)
listUL.__len__ = new_instancemethod(_pyBasePython.listUL___len__, None, listUL)
listUL.__getslice__ = new_instancemethod(_pyBasePython.listUL___getslice__, None, listUL)
listUL.__setslice__ = new_instancemethod(_pyBasePython.listUL___setslice__, None, listUL)
listUL.__delslice__ = new_instancemethod(_pyBasePython.listUL___delslice__, None, listUL)
listUL.__delitem__ = new_instancemethod(_pyBasePython.listUL___delitem__, None, listUL)
listUL.__getitem__ = new_instancemethod(_pyBasePython.listUL___getitem__, None, listUL)
listUL.__setitem__ = new_instancemethod(_pyBasePython.listUL___setitem__, None, listUL)
listUL.pop = new_instancemethod(_pyBasePython.listUL_pop, None, listUL)
listUL.append = new_instancemethod(_pyBasePython.listUL_append, None, listUL)
listUL.empty = new_instancemethod(_pyBasePython.listUL_empty, None, listUL)
listUL.size = new_instancemethod(_pyBasePython.listUL_size, None, listUL)
listUL.swap = new_instancemethod(_pyBasePython.listUL_swap, None, listUL)
listUL.begin = new_instancemethod(_pyBasePython.listUL_begin, None, listUL)
listUL.end = new_instancemethod(_pyBasePython.listUL_end, None, listUL)
listUL.rbegin = new_instancemethod(_pyBasePython.listUL_rbegin, None, listUL)
listUL.rend = new_instancemethod(_pyBasePython.listUL_rend, None, listUL)
listUL.clear = new_instancemethod(_pyBasePython.listUL_clear, None, listUL)
listUL.get_allocator = new_instancemethod(_pyBasePython.listUL_get_allocator, None, listUL)
listUL.pop_back = new_instancemethod(_pyBasePython.listUL_pop_back, None, listUL)
listUL.erase = new_instancemethod(_pyBasePython.listUL_erase, None, listUL)
listUL.push_back = new_instancemethod(_pyBasePython.listUL_push_back, None, listUL)
listUL.front = new_instancemethod(_pyBasePython.listUL_front, None, listUL)
listUL.back = new_instancemethod(_pyBasePython.listUL_back, None, listUL)
listUL.assign = new_instancemethod(_pyBasePython.listUL_assign, None, listUL)
listUL.resize = new_instancemethod(_pyBasePython.listUL_resize, None, listUL)
listUL.insert = new_instancemethod(_pyBasePython.listUL_insert, None, listUL)
listUL.pop_front = new_instancemethod(_pyBasePython.listUL_pop_front, None, listUL)
listUL.push_front = new_instancemethod(_pyBasePython.listUL_push_front, None, listUL)
listUL.reverse = new_instancemethod(_pyBasePython.listUL_reverse, None, listUL)
listUL_swigregister = _pyBasePython.listUL_swigregister
listUL_swigregister(listUL)

class listSC(object):
    """Proxy of C++ std::list<(signed char)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listSC self) -> SwigPyIterator"""
        return _pyBasePython.listSC_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listSC self) -> bool"""
        return _pyBasePython.listSC___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listSC self) -> bool"""
        return _pyBasePython.listSC___bool__(self)


    def __len__(self) -> "std::list< signed char >::size_type":
        """__len__(listSC self) -> std::list< signed char >::size_type"""
        return _pyBasePython.listSC___len__(self)


    def __getslice__(self, i: 'std::list< signed char >::difference_type', j: 'std::list< signed char >::difference_type') -> "std::list< signed char,std::allocator< signed char > > *":
        """__getslice__(listSC self, std::list< signed char >::difference_type i, std::list< signed char >::difference_type j) -> listSC"""
        return _pyBasePython.listSC___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listSC self, std::list< signed char >::difference_type i, std::list< signed char >::difference_type j)
        __setslice__(listSC self, std::list< signed char >::difference_type i, std::list< signed char >::difference_type j, listSC v)
        """
        return _pyBasePython.listSC___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< signed char >::difference_type', j: 'std::list< signed char >::difference_type') -> "void":
        """__delslice__(listSC self, std::list< signed char >::difference_type i, std::list< signed char >::difference_type j)"""
        return _pyBasePython.listSC___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listSC self, std::list< signed char >::difference_type i)
        __delitem__(listSC self, PySliceObject * slice)
        """
        return _pyBasePython.listSC___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< signed char >::value_type const &":
        """
        __getitem__(listSC self, PySliceObject * slice) -> listSC
        __getitem__(listSC self, std::list< signed char >::difference_type i) -> std::list< signed char >::value_type const &
        """
        return _pyBasePython.listSC___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listSC self, PySliceObject * slice, listSC v)
        __setitem__(listSC self, PySliceObject * slice)
        __setitem__(listSC self, std::list< signed char >::difference_type i, std::list< signed char >::value_type const & x)
        """
        return _pyBasePython.listSC___setitem__(self, *args)


    def pop(self) -> "std::list< signed char >::value_type":
        """pop(listSC self) -> std::list< signed char >::value_type"""
        return _pyBasePython.listSC_pop(self)


    def append(self, x: 'std::list< signed char >::value_type const &') -> "void":
        """append(listSC self, std::list< signed char >::value_type const & x)"""
        return _pyBasePython.listSC_append(self, x)


    def empty(self) -> "bool":
        """empty(listSC self) -> bool"""
        return _pyBasePython.listSC_empty(self)


    def size(self) -> "std::list< signed char >::size_type":
        """size(listSC self) -> std::list< signed char >::size_type"""
        return _pyBasePython.listSC_size(self)


    def swap(self, v: 'listSC') -> "void":
        """swap(listSC self, listSC v)"""
        return _pyBasePython.listSC_swap(self, v)


    def begin(self) -> "std::list< signed char >::iterator":
        """begin(listSC self) -> std::list< signed char >::iterator"""
        return _pyBasePython.listSC_begin(self)


    def end(self) -> "std::list< signed char >::iterator":
        """end(listSC self) -> std::list< signed char >::iterator"""
        return _pyBasePython.listSC_end(self)


    def rbegin(self) -> "std::list< signed char >::reverse_iterator":
        """rbegin(listSC self) -> std::list< signed char >::reverse_iterator"""
        return _pyBasePython.listSC_rbegin(self)


    def rend(self) -> "std::list< signed char >::reverse_iterator":
        """rend(listSC self) -> std::list< signed char >::reverse_iterator"""
        return _pyBasePython.listSC_rend(self)


    def clear(self) -> "void":
        """clear(listSC self)"""
        return _pyBasePython.listSC_clear(self)


    def get_allocator(self) -> "std::list< signed char >::allocator_type":
        """get_allocator(listSC self) -> std::list< signed char >::allocator_type"""
        return _pyBasePython.listSC_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listSC self)"""
        return _pyBasePython.listSC_pop_back(self)


    def erase(self, *args) -> "std::list< signed char >::iterator":
        """
        erase(listSC self, std::list< signed char >::iterator pos) -> std::list< signed char >::iterator
        erase(listSC self, std::list< signed char >::iterator first, std::list< signed char >::iterator last) -> std::list< signed char >::iterator
        """
        return _pyBasePython.listSC_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(signed char)> self) -> listSC
        __init__(std::list<(signed char)> self, listSC arg2) -> listSC
        __init__(std::list<(signed char)> self, std::list< signed char >::size_type size) -> listSC
        __init__(std::list<(signed char)> self, std::list< signed char >::size_type size, std::list< signed char >::value_type const & value) -> listSC
        """
        _pyBasePython.listSC_swiginit(self, _pyBasePython.new_listSC(*args))

    def push_back(self, x: 'std::list< signed char >::value_type const &') -> "void":
        """push_back(listSC self, std::list< signed char >::value_type const & x)"""
        return _pyBasePython.listSC_push_back(self, x)


    def front(self) -> "std::list< signed char >::value_type const &":
        """front(listSC self) -> std::list< signed char >::value_type const &"""
        return _pyBasePython.listSC_front(self)


    def back(self) -> "std::list< signed char >::value_type const &":
        """back(listSC self) -> std::list< signed char >::value_type const &"""
        return _pyBasePython.listSC_back(self)


    def assign(self, n: 'std::list< signed char >::size_type', x: 'std::list< signed char >::value_type const &') -> "void":
        """assign(listSC self, std::list< signed char >::size_type n, std::list< signed char >::value_type const & x)"""
        return _pyBasePython.listSC_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listSC self, std::list< signed char >::size_type new_size)
        resize(listSC self, std::list< signed char >::size_type new_size, std::list< signed char >::value_type const & x)
        """
        return _pyBasePython.listSC_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listSC self, std::list< signed char >::iterator pos, std::list< signed char >::value_type const & x) -> std::list< signed char >::iterator
        insert(listSC self, std::list< signed char >::iterator pos, std::list< signed char >::size_type n, std::list< signed char >::value_type const & x)
        """
        return _pyBasePython.listSC_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listSC self)"""
        return _pyBasePython.listSC_pop_front(self)


    def push_front(self, x: 'std::list< signed char >::value_type const &') -> "void":
        """push_front(listSC self, std::list< signed char >::value_type const & x)"""
        return _pyBasePython.listSC_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listSC self)"""
        return _pyBasePython.listSC_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listSC
listSC.iterator = new_instancemethod(_pyBasePython.listSC_iterator, None, listSC)
listSC.__nonzero__ = new_instancemethod(_pyBasePython.listSC___nonzero__, None, listSC)
listSC.__bool__ = new_instancemethod(_pyBasePython.listSC___bool__, None, listSC)
listSC.__len__ = new_instancemethod(_pyBasePython.listSC___len__, None, listSC)
listSC.__getslice__ = new_instancemethod(_pyBasePython.listSC___getslice__, None, listSC)
listSC.__setslice__ = new_instancemethod(_pyBasePython.listSC___setslice__, None, listSC)
listSC.__delslice__ = new_instancemethod(_pyBasePython.listSC___delslice__, None, listSC)
listSC.__delitem__ = new_instancemethod(_pyBasePython.listSC___delitem__, None, listSC)
listSC.__getitem__ = new_instancemethod(_pyBasePython.listSC___getitem__, None, listSC)
listSC.__setitem__ = new_instancemethod(_pyBasePython.listSC___setitem__, None, listSC)
listSC.pop = new_instancemethod(_pyBasePython.listSC_pop, None, listSC)
listSC.append = new_instancemethod(_pyBasePython.listSC_append, None, listSC)
listSC.empty = new_instancemethod(_pyBasePython.listSC_empty, None, listSC)
listSC.size = new_instancemethod(_pyBasePython.listSC_size, None, listSC)
listSC.swap = new_instancemethod(_pyBasePython.listSC_swap, None, listSC)
listSC.begin = new_instancemethod(_pyBasePython.listSC_begin, None, listSC)
listSC.end = new_instancemethod(_pyBasePython.listSC_end, None, listSC)
listSC.rbegin = new_instancemethod(_pyBasePython.listSC_rbegin, None, listSC)
listSC.rend = new_instancemethod(_pyBasePython.listSC_rend, None, listSC)
listSC.clear = new_instancemethod(_pyBasePython.listSC_clear, None, listSC)
listSC.get_allocator = new_instancemethod(_pyBasePython.listSC_get_allocator, None, listSC)
listSC.pop_back = new_instancemethod(_pyBasePython.listSC_pop_back, None, listSC)
listSC.erase = new_instancemethod(_pyBasePython.listSC_erase, None, listSC)
listSC.push_back = new_instancemethod(_pyBasePython.listSC_push_back, None, listSC)
listSC.front = new_instancemethod(_pyBasePython.listSC_front, None, listSC)
listSC.back = new_instancemethod(_pyBasePython.listSC_back, None, listSC)
listSC.assign = new_instancemethod(_pyBasePython.listSC_assign, None, listSC)
listSC.resize = new_instancemethod(_pyBasePython.listSC_resize, None, listSC)
listSC.insert = new_instancemethod(_pyBasePython.listSC_insert, None, listSC)
listSC.pop_front = new_instancemethod(_pyBasePython.listSC_pop_front, None, listSC)
listSC.push_front = new_instancemethod(_pyBasePython.listSC_push_front, None, listSC)
listSC.reverse = new_instancemethod(_pyBasePython.listSC_reverse, None, listSC)
listSC_swigregister = _pyBasePython.listSC_swigregister
listSC_swigregister(listSC)

class listSS(object):
    """Proxy of C++ std::list<(short)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listSS self) -> SwigPyIterator"""
        return _pyBasePython.listSS_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listSS self) -> bool"""
        return _pyBasePython.listSS___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listSS self) -> bool"""
        return _pyBasePython.listSS___bool__(self)


    def __len__(self) -> "std::list< short >::size_type":
        """__len__(listSS self) -> std::list< short >::size_type"""
        return _pyBasePython.listSS___len__(self)


    def __getslice__(self, i: 'std::list< short >::difference_type', j: 'std::list< short >::difference_type') -> "std::list< short,std::allocator< short > > *":
        """__getslice__(listSS self, std::list< short >::difference_type i, std::list< short >::difference_type j) -> listSS"""
        return _pyBasePython.listSS___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listSS self, std::list< short >::difference_type i, std::list< short >::difference_type j)
        __setslice__(listSS self, std::list< short >::difference_type i, std::list< short >::difference_type j, listSS v)
        """
        return _pyBasePython.listSS___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< short >::difference_type', j: 'std::list< short >::difference_type') -> "void":
        """__delslice__(listSS self, std::list< short >::difference_type i, std::list< short >::difference_type j)"""
        return _pyBasePython.listSS___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listSS self, std::list< short >::difference_type i)
        __delitem__(listSS self, PySliceObject * slice)
        """
        return _pyBasePython.listSS___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< short >::value_type const &":
        """
        __getitem__(listSS self, PySliceObject * slice) -> listSS
        __getitem__(listSS self, std::list< short >::difference_type i) -> std::list< short >::value_type const &
        """
        return _pyBasePython.listSS___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listSS self, PySliceObject * slice, listSS v)
        __setitem__(listSS self, PySliceObject * slice)
        __setitem__(listSS self, std::list< short >::difference_type i, std::list< short >::value_type const & x)
        """
        return _pyBasePython.listSS___setitem__(self, *args)


    def pop(self) -> "std::list< short >::value_type":
        """pop(listSS self) -> std::list< short >::value_type"""
        return _pyBasePython.listSS_pop(self)


    def append(self, x: 'std::list< short >::value_type const &') -> "void":
        """append(listSS self, std::list< short >::value_type const & x)"""
        return _pyBasePython.listSS_append(self, x)


    def empty(self) -> "bool":
        """empty(listSS self) -> bool"""
        return _pyBasePython.listSS_empty(self)


    def size(self) -> "std::list< short >::size_type":
        """size(listSS self) -> std::list< short >::size_type"""
        return _pyBasePython.listSS_size(self)


    def swap(self, v: 'listSS') -> "void":
        """swap(listSS self, listSS v)"""
        return _pyBasePython.listSS_swap(self, v)


    def begin(self) -> "std::list< short >::iterator":
        """begin(listSS self) -> std::list< short >::iterator"""
        return _pyBasePython.listSS_begin(self)


    def end(self) -> "std::list< short >::iterator":
        """end(listSS self) -> std::list< short >::iterator"""
        return _pyBasePython.listSS_end(self)


    def rbegin(self) -> "std::list< short >::reverse_iterator":
        """rbegin(listSS self) -> std::list< short >::reverse_iterator"""
        return _pyBasePython.listSS_rbegin(self)


    def rend(self) -> "std::list< short >::reverse_iterator":
        """rend(listSS self) -> std::list< short >::reverse_iterator"""
        return _pyBasePython.listSS_rend(self)


    def clear(self) -> "void":
        """clear(listSS self)"""
        return _pyBasePython.listSS_clear(self)


    def get_allocator(self) -> "std::list< short >::allocator_type":
        """get_allocator(listSS self) -> std::list< short >::allocator_type"""
        return _pyBasePython.listSS_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listSS self)"""
        return _pyBasePython.listSS_pop_back(self)


    def erase(self, *args) -> "std::list< short >::iterator":
        """
        erase(listSS self, std::list< short >::iterator pos) -> std::list< short >::iterator
        erase(listSS self, std::list< short >::iterator first, std::list< short >::iterator last) -> std::list< short >::iterator
        """
        return _pyBasePython.listSS_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(short)> self) -> listSS
        __init__(std::list<(short)> self, listSS arg2) -> listSS
        __init__(std::list<(short)> self, std::list< short >::size_type size) -> listSS
        __init__(std::list<(short)> self, std::list< short >::size_type size, std::list< short >::value_type const & value) -> listSS
        """
        _pyBasePython.listSS_swiginit(self, _pyBasePython.new_listSS(*args))

    def push_back(self, x: 'std::list< short >::value_type const &') -> "void":
        """push_back(listSS self, std::list< short >::value_type const & x)"""
        return _pyBasePython.listSS_push_back(self, x)


    def front(self) -> "std::list< short >::value_type const &":
        """front(listSS self) -> std::list< short >::value_type const &"""
        return _pyBasePython.listSS_front(self)


    def back(self) -> "std::list< short >::value_type const &":
        """back(listSS self) -> std::list< short >::value_type const &"""
        return _pyBasePython.listSS_back(self)


    def assign(self, n: 'std::list< short >::size_type', x: 'std::list< short >::value_type const &') -> "void":
        """assign(listSS self, std::list< short >::size_type n, std::list< short >::value_type const & x)"""
        return _pyBasePython.listSS_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listSS self, std::list< short >::size_type new_size)
        resize(listSS self, std::list< short >::size_type new_size, std::list< short >::value_type const & x)
        """
        return _pyBasePython.listSS_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listSS self, std::list< short >::iterator pos, std::list< short >::value_type const & x) -> std::list< short >::iterator
        insert(listSS self, std::list< short >::iterator pos, std::list< short >::size_type n, std::list< short >::value_type const & x)
        """
        return _pyBasePython.listSS_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listSS self)"""
        return _pyBasePython.listSS_pop_front(self)


    def push_front(self, x: 'std::list< short >::value_type const &') -> "void":
        """push_front(listSS self, std::list< short >::value_type const & x)"""
        return _pyBasePython.listSS_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listSS self)"""
        return _pyBasePython.listSS_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listSS
listSS.iterator = new_instancemethod(_pyBasePython.listSS_iterator, None, listSS)
listSS.__nonzero__ = new_instancemethod(_pyBasePython.listSS___nonzero__, None, listSS)
listSS.__bool__ = new_instancemethod(_pyBasePython.listSS___bool__, None, listSS)
listSS.__len__ = new_instancemethod(_pyBasePython.listSS___len__, None, listSS)
listSS.__getslice__ = new_instancemethod(_pyBasePython.listSS___getslice__, None, listSS)
listSS.__setslice__ = new_instancemethod(_pyBasePython.listSS___setslice__, None, listSS)
listSS.__delslice__ = new_instancemethod(_pyBasePython.listSS___delslice__, None, listSS)
listSS.__delitem__ = new_instancemethod(_pyBasePython.listSS___delitem__, None, listSS)
listSS.__getitem__ = new_instancemethod(_pyBasePython.listSS___getitem__, None, listSS)
listSS.__setitem__ = new_instancemethod(_pyBasePython.listSS___setitem__, None, listSS)
listSS.pop = new_instancemethod(_pyBasePython.listSS_pop, None, listSS)
listSS.append = new_instancemethod(_pyBasePython.listSS_append, None, listSS)
listSS.empty = new_instancemethod(_pyBasePython.listSS_empty, None, listSS)
listSS.size = new_instancemethod(_pyBasePython.listSS_size, None, listSS)
listSS.swap = new_instancemethod(_pyBasePython.listSS_swap, None, listSS)
listSS.begin = new_instancemethod(_pyBasePython.listSS_begin, None, listSS)
listSS.end = new_instancemethod(_pyBasePython.listSS_end, None, listSS)
listSS.rbegin = new_instancemethod(_pyBasePython.listSS_rbegin, None, listSS)
listSS.rend = new_instancemethod(_pyBasePython.listSS_rend, None, listSS)
listSS.clear = new_instancemethod(_pyBasePython.listSS_clear, None, listSS)
listSS.get_allocator = new_instancemethod(_pyBasePython.listSS_get_allocator, None, listSS)
listSS.pop_back = new_instancemethod(_pyBasePython.listSS_pop_back, None, listSS)
listSS.erase = new_instancemethod(_pyBasePython.listSS_erase, None, listSS)
listSS.push_back = new_instancemethod(_pyBasePython.listSS_push_back, None, listSS)
listSS.front = new_instancemethod(_pyBasePython.listSS_front, None, listSS)
listSS.back = new_instancemethod(_pyBasePython.listSS_back, None, listSS)
listSS.assign = new_instancemethod(_pyBasePython.listSS_assign, None, listSS)
listSS.resize = new_instancemethod(_pyBasePython.listSS_resize, None, listSS)
listSS.insert = new_instancemethod(_pyBasePython.listSS_insert, None, listSS)
listSS.pop_front = new_instancemethod(_pyBasePython.listSS_pop_front, None, listSS)
listSS.push_front = new_instancemethod(_pyBasePython.listSS_push_front, None, listSS)
listSS.reverse = new_instancemethod(_pyBasePython.listSS_reverse, None, listSS)
listSS_swigregister = _pyBasePython.listSS_swigregister
listSS_swigregister(listSS)

class listSL(object):
    """Proxy of C++ std::list<(long)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listSL self) -> SwigPyIterator"""
        return _pyBasePython.listSL_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listSL self) -> bool"""
        return _pyBasePython.listSL___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listSL self) -> bool"""
        return _pyBasePython.listSL___bool__(self)


    def __len__(self) -> "std::list< long >::size_type":
        """__len__(listSL self) -> std::list< long >::size_type"""
        return _pyBasePython.listSL___len__(self)


    def __getslice__(self, i: 'std::list< long >::difference_type', j: 'std::list< long >::difference_type') -> "std::list< long,std::allocator< long > > *":
        """__getslice__(listSL self, std::list< long >::difference_type i, std::list< long >::difference_type j) -> listSL"""
        return _pyBasePython.listSL___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listSL self, std::list< long >::difference_type i, std::list< long >::difference_type j)
        __setslice__(listSL self, std::list< long >::difference_type i, std::list< long >::difference_type j, listSL v)
        """
        return _pyBasePython.listSL___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< long >::difference_type', j: 'std::list< long >::difference_type') -> "void":
        """__delslice__(listSL self, std::list< long >::difference_type i, std::list< long >::difference_type j)"""
        return _pyBasePython.listSL___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listSL self, std::list< long >::difference_type i)
        __delitem__(listSL self, PySliceObject * slice)
        """
        return _pyBasePython.listSL___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< long >::value_type const &":
        """
        __getitem__(listSL self, PySliceObject * slice) -> listSL
        __getitem__(listSL self, std::list< long >::difference_type i) -> std::list< long >::value_type const &
        """
        return _pyBasePython.listSL___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listSL self, PySliceObject * slice, listSL v)
        __setitem__(listSL self, PySliceObject * slice)
        __setitem__(listSL self, std::list< long >::difference_type i, std::list< long >::value_type const & x)
        """
        return _pyBasePython.listSL___setitem__(self, *args)


    def pop(self) -> "std::list< long >::value_type":
        """pop(listSL self) -> std::list< long >::value_type"""
        return _pyBasePython.listSL_pop(self)


    def append(self, x: 'std::list< long >::value_type const &') -> "void":
        """append(listSL self, std::list< long >::value_type const & x)"""
        return _pyBasePython.listSL_append(self, x)


    def empty(self) -> "bool":
        """empty(listSL self) -> bool"""
        return _pyBasePython.listSL_empty(self)


    def size(self) -> "std::list< long >::size_type":
        """size(listSL self) -> std::list< long >::size_type"""
        return _pyBasePython.listSL_size(self)


    def swap(self, v: 'listSL') -> "void":
        """swap(listSL self, listSL v)"""
        return _pyBasePython.listSL_swap(self, v)


    def begin(self) -> "std::list< long >::iterator":
        """begin(listSL self) -> std::list< long >::iterator"""
        return _pyBasePython.listSL_begin(self)


    def end(self) -> "std::list< long >::iterator":
        """end(listSL self) -> std::list< long >::iterator"""
        return _pyBasePython.listSL_end(self)


    def rbegin(self) -> "std::list< long >::reverse_iterator":
        """rbegin(listSL self) -> std::list< long >::reverse_iterator"""
        return _pyBasePython.listSL_rbegin(self)


    def rend(self) -> "std::list< long >::reverse_iterator":
        """rend(listSL self) -> std::list< long >::reverse_iterator"""
        return _pyBasePython.listSL_rend(self)


    def clear(self) -> "void":
        """clear(listSL self)"""
        return _pyBasePython.listSL_clear(self)


    def get_allocator(self) -> "std::list< long >::allocator_type":
        """get_allocator(listSL self) -> std::list< long >::allocator_type"""
        return _pyBasePython.listSL_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listSL self)"""
        return _pyBasePython.listSL_pop_back(self)


    def erase(self, *args) -> "std::list< long >::iterator":
        """
        erase(listSL self, std::list< long >::iterator pos) -> std::list< long >::iterator
        erase(listSL self, std::list< long >::iterator first, std::list< long >::iterator last) -> std::list< long >::iterator
        """
        return _pyBasePython.listSL_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(long)> self) -> listSL
        __init__(std::list<(long)> self, listSL arg2) -> listSL
        __init__(std::list<(long)> self, std::list< long >::size_type size) -> listSL
        __init__(std::list<(long)> self, std::list< long >::size_type size, std::list< long >::value_type const & value) -> listSL
        """
        _pyBasePython.listSL_swiginit(self, _pyBasePython.new_listSL(*args))

    def push_back(self, x: 'std::list< long >::value_type const &') -> "void":
        """push_back(listSL self, std::list< long >::value_type const & x)"""
        return _pyBasePython.listSL_push_back(self, x)


    def front(self) -> "std::list< long >::value_type const &":
        """front(listSL self) -> std::list< long >::value_type const &"""
        return _pyBasePython.listSL_front(self)


    def back(self) -> "std::list< long >::value_type const &":
        """back(listSL self) -> std::list< long >::value_type const &"""
        return _pyBasePython.listSL_back(self)


    def assign(self, n: 'std::list< long >::size_type', x: 'std::list< long >::value_type const &') -> "void":
        """assign(listSL self, std::list< long >::size_type n, std::list< long >::value_type const & x)"""
        return _pyBasePython.listSL_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listSL self, std::list< long >::size_type new_size)
        resize(listSL self, std::list< long >::size_type new_size, std::list< long >::value_type const & x)
        """
        return _pyBasePython.listSL_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listSL self, std::list< long >::iterator pos, std::list< long >::value_type const & x) -> std::list< long >::iterator
        insert(listSL self, std::list< long >::iterator pos, std::list< long >::size_type n, std::list< long >::value_type const & x)
        """
        return _pyBasePython.listSL_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listSL self)"""
        return _pyBasePython.listSL_pop_front(self)


    def push_front(self, x: 'std::list< long >::value_type const &') -> "void":
        """push_front(listSL self, std::list< long >::value_type const & x)"""
        return _pyBasePython.listSL_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listSL self)"""
        return _pyBasePython.listSL_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listSL
listSL.iterator = new_instancemethod(_pyBasePython.listSL_iterator, None, listSL)
listSL.__nonzero__ = new_instancemethod(_pyBasePython.listSL___nonzero__, None, listSL)
listSL.__bool__ = new_instancemethod(_pyBasePython.listSL___bool__, None, listSL)
listSL.__len__ = new_instancemethod(_pyBasePython.listSL___len__, None, listSL)
listSL.__getslice__ = new_instancemethod(_pyBasePython.listSL___getslice__, None, listSL)
listSL.__setslice__ = new_instancemethod(_pyBasePython.listSL___setslice__, None, listSL)
listSL.__delslice__ = new_instancemethod(_pyBasePython.listSL___delslice__, None, listSL)
listSL.__delitem__ = new_instancemethod(_pyBasePython.listSL___delitem__, None, listSL)
listSL.__getitem__ = new_instancemethod(_pyBasePython.listSL___getitem__, None, listSL)
listSL.__setitem__ = new_instancemethod(_pyBasePython.listSL___setitem__, None, listSL)
listSL.pop = new_instancemethod(_pyBasePython.listSL_pop, None, listSL)
listSL.append = new_instancemethod(_pyBasePython.listSL_append, None, listSL)
listSL.empty = new_instancemethod(_pyBasePython.listSL_empty, None, listSL)
listSL.size = new_instancemethod(_pyBasePython.listSL_size, None, listSL)
listSL.swap = new_instancemethod(_pyBasePython.listSL_swap, None, listSL)
listSL.begin = new_instancemethod(_pyBasePython.listSL_begin, None, listSL)
listSL.end = new_instancemethod(_pyBasePython.listSL_end, None, listSL)
listSL.rbegin = new_instancemethod(_pyBasePython.listSL_rbegin, None, listSL)
listSL.rend = new_instancemethod(_pyBasePython.listSL_rend, None, listSL)
listSL.clear = new_instancemethod(_pyBasePython.listSL_clear, None, listSL)
listSL.get_allocator = new_instancemethod(_pyBasePython.listSL_get_allocator, None, listSL)
listSL.pop_back = new_instancemethod(_pyBasePython.listSL_pop_back, None, listSL)
listSL.erase = new_instancemethod(_pyBasePython.listSL_erase, None, listSL)
listSL.push_back = new_instancemethod(_pyBasePython.listSL_push_back, None, listSL)
listSL.front = new_instancemethod(_pyBasePython.listSL_front, None, listSL)
listSL.back = new_instancemethod(_pyBasePython.listSL_back, None, listSL)
listSL.assign = new_instancemethod(_pyBasePython.listSL_assign, None, listSL)
listSL.resize = new_instancemethod(_pyBasePython.listSL_resize, None, listSL)
listSL.insert = new_instancemethod(_pyBasePython.listSL_insert, None, listSL)
listSL.pop_front = new_instancemethod(_pyBasePython.listSL_pop_front, None, listSL)
listSL.push_front = new_instancemethod(_pyBasePython.listSL_push_front, None, listSL)
listSL.reverse = new_instancemethod(_pyBasePython.listSL_reverse, None, listSL)
listSL_swigregister = _pyBasePython.listSL_swigregister
listSL_swigregister(listSL)

class listF(object):
    """Proxy of C++ std::list<(float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listF self) -> SwigPyIterator"""
        return _pyBasePython.listF_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listF self) -> bool"""
        return _pyBasePython.listF___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listF self) -> bool"""
        return _pyBasePython.listF___bool__(self)


    def __len__(self) -> "std::list< float >::size_type":
        """__len__(listF self) -> std::list< float >::size_type"""
        return _pyBasePython.listF___len__(self)


    def __getslice__(self, i: 'std::list< float >::difference_type', j: 'std::list< float >::difference_type') -> "std::list< float,std::allocator< float > > *":
        """__getslice__(listF self, std::list< float >::difference_type i, std::list< float >::difference_type j) -> listF"""
        return _pyBasePython.listF___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listF self, std::list< float >::difference_type i, std::list< float >::difference_type j)
        __setslice__(listF self, std::list< float >::difference_type i, std::list< float >::difference_type j, listF v)
        """
        return _pyBasePython.listF___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< float >::difference_type', j: 'std::list< float >::difference_type') -> "void":
        """__delslice__(listF self, std::list< float >::difference_type i, std::list< float >::difference_type j)"""
        return _pyBasePython.listF___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listF self, std::list< float >::difference_type i)
        __delitem__(listF self, PySliceObject * slice)
        """
        return _pyBasePython.listF___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< float >::value_type const &":
        """
        __getitem__(listF self, PySliceObject * slice) -> listF
        __getitem__(listF self, std::list< float >::difference_type i) -> std::list< float >::value_type const &
        """
        return _pyBasePython.listF___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listF self, PySliceObject * slice, listF v)
        __setitem__(listF self, PySliceObject * slice)
        __setitem__(listF self, std::list< float >::difference_type i, std::list< float >::value_type const & x)
        """
        return _pyBasePython.listF___setitem__(self, *args)


    def pop(self) -> "std::list< float >::value_type":
        """pop(listF self) -> std::list< float >::value_type"""
        return _pyBasePython.listF_pop(self)


    def append(self, x: 'std::list< float >::value_type const &') -> "void":
        """append(listF self, std::list< float >::value_type const & x)"""
        return _pyBasePython.listF_append(self, x)


    def empty(self) -> "bool":
        """empty(listF self) -> bool"""
        return _pyBasePython.listF_empty(self)


    def size(self) -> "std::list< float >::size_type":
        """size(listF self) -> std::list< float >::size_type"""
        return _pyBasePython.listF_size(self)


    def swap(self, v: 'listF') -> "void":
        """swap(listF self, listF v)"""
        return _pyBasePython.listF_swap(self, v)


    def begin(self) -> "std::list< float >::iterator":
        """begin(listF self) -> std::list< float >::iterator"""
        return _pyBasePython.listF_begin(self)


    def end(self) -> "std::list< float >::iterator":
        """end(listF self) -> std::list< float >::iterator"""
        return _pyBasePython.listF_end(self)


    def rbegin(self) -> "std::list< float >::reverse_iterator":
        """rbegin(listF self) -> std::list< float >::reverse_iterator"""
        return _pyBasePython.listF_rbegin(self)


    def rend(self) -> "std::list< float >::reverse_iterator":
        """rend(listF self) -> std::list< float >::reverse_iterator"""
        return _pyBasePython.listF_rend(self)


    def clear(self) -> "void":
        """clear(listF self)"""
        return _pyBasePython.listF_clear(self)


    def get_allocator(self) -> "std::list< float >::allocator_type":
        """get_allocator(listF self) -> std::list< float >::allocator_type"""
        return _pyBasePython.listF_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listF self)"""
        return _pyBasePython.listF_pop_back(self)


    def erase(self, *args) -> "std::list< float >::iterator":
        """
        erase(listF self, std::list< float >::iterator pos) -> std::list< float >::iterator
        erase(listF self, std::list< float >::iterator first, std::list< float >::iterator last) -> std::list< float >::iterator
        """
        return _pyBasePython.listF_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(float)> self) -> listF
        __init__(std::list<(float)> self, listF arg2) -> listF
        __init__(std::list<(float)> self, std::list< float >::size_type size) -> listF
        __init__(std::list<(float)> self, std::list< float >::size_type size, std::list< float >::value_type const & value) -> listF
        """
        _pyBasePython.listF_swiginit(self, _pyBasePython.new_listF(*args))

    def push_back(self, x: 'std::list< float >::value_type const &') -> "void":
        """push_back(listF self, std::list< float >::value_type const & x)"""
        return _pyBasePython.listF_push_back(self, x)


    def front(self) -> "std::list< float >::value_type const &":
        """front(listF self) -> std::list< float >::value_type const &"""
        return _pyBasePython.listF_front(self)


    def back(self) -> "std::list< float >::value_type const &":
        """back(listF self) -> std::list< float >::value_type const &"""
        return _pyBasePython.listF_back(self)


    def assign(self, n: 'std::list< float >::size_type', x: 'std::list< float >::value_type const &') -> "void":
        """assign(listF self, std::list< float >::size_type n, std::list< float >::value_type const & x)"""
        return _pyBasePython.listF_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listF self, std::list< float >::size_type new_size)
        resize(listF self, std::list< float >::size_type new_size, std::list< float >::value_type const & x)
        """
        return _pyBasePython.listF_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listF self, std::list< float >::iterator pos, std::list< float >::value_type const & x) -> std::list< float >::iterator
        insert(listF self, std::list< float >::iterator pos, std::list< float >::size_type n, std::list< float >::value_type const & x)
        """
        return _pyBasePython.listF_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listF self)"""
        return _pyBasePython.listF_pop_front(self)


    def push_front(self, x: 'std::list< float >::value_type const &') -> "void":
        """push_front(listF self, std::list< float >::value_type const & x)"""
        return _pyBasePython.listF_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listF self)"""
        return _pyBasePython.listF_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listF
listF.iterator = new_instancemethod(_pyBasePython.listF_iterator, None, listF)
listF.__nonzero__ = new_instancemethod(_pyBasePython.listF___nonzero__, None, listF)
listF.__bool__ = new_instancemethod(_pyBasePython.listF___bool__, None, listF)
listF.__len__ = new_instancemethod(_pyBasePython.listF___len__, None, listF)
listF.__getslice__ = new_instancemethod(_pyBasePython.listF___getslice__, None, listF)
listF.__setslice__ = new_instancemethod(_pyBasePython.listF___setslice__, None, listF)
listF.__delslice__ = new_instancemethod(_pyBasePython.listF___delslice__, None, listF)
listF.__delitem__ = new_instancemethod(_pyBasePython.listF___delitem__, None, listF)
listF.__getitem__ = new_instancemethod(_pyBasePython.listF___getitem__, None, listF)
listF.__setitem__ = new_instancemethod(_pyBasePython.listF___setitem__, None, listF)
listF.pop = new_instancemethod(_pyBasePython.listF_pop, None, listF)
listF.append = new_instancemethod(_pyBasePython.listF_append, None, listF)
listF.empty = new_instancemethod(_pyBasePython.listF_empty, None, listF)
listF.size = new_instancemethod(_pyBasePython.listF_size, None, listF)
listF.swap = new_instancemethod(_pyBasePython.listF_swap, None, listF)
listF.begin = new_instancemethod(_pyBasePython.listF_begin, None, listF)
listF.end = new_instancemethod(_pyBasePython.listF_end, None, listF)
listF.rbegin = new_instancemethod(_pyBasePython.listF_rbegin, None, listF)
listF.rend = new_instancemethod(_pyBasePython.listF_rend, None, listF)
listF.clear = new_instancemethod(_pyBasePython.listF_clear, None, listF)
listF.get_allocator = new_instancemethod(_pyBasePython.listF_get_allocator, None, listF)
listF.pop_back = new_instancemethod(_pyBasePython.listF_pop_back, None, listF)
listF.erase = new_instancemethod(_pyBasePython.listF_erase, None, listF)
listF.push_back = new_instancemethod(_pyBasePython.listF_push_back, None, listF)
listF.front = new_instancemethod(_pyBasePython.listF_front, None, listF)
listF.back = new_instancemethod(_pyBasePython.listF_back, None, listF)
listF.assign = new_instancemethod(_pyBasePython.listF_assign, None, listF)
listF.resize = new_instancemethod(_pyBasePython.listF_resize, None, listF)
listF.insert = new_instancemethod(_pyBasePython.listF_insert, None, listF)
listF.pop_front = new_instancemethod(_pyBasePython.listF_pop_front, None, listF)
listF.push_front = new_instancemethod(_pyBasePython.listF_push_front, None, listF)
listF.reverse = new_instancemethod(_pyBasePython.listF_reverse, None, listF)
listF_swigregister = _pyBasePython.listF_swigregister
listF_swigregister(listF)

class listD(object):
    """Proxy of C++ std::list<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listD self) -> SwigPyIterator"""
        return _pyBasePython.listD_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listD self) -> bool"""
        return _pyBasePython.listD___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listD self) -> bool"""
        return _pyBasePython.listD___bool__(self)


    def __len__(self) -> "std::list< double >::size_type":
        """__len__(listD self) -> std::list< double >::size_type"""
        return _pyBasePython.listD___len__(self)


    def __getslice__(self, i: 'std::list< double >::difference_type', j: 'std::list< double >::difference_type') -> "std::list< double,std::allocator< double > > *":
        """__getslice__(listD self, std::list< double >::difference_type i, std::list< double >::difference_type j) -> listD"""
        return _pyBasePython.listD___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listD self, std::list< double >::difference_type i, std::list< double >::difference_type j)
        __setslice__(listD self, std::list< double >::difference_type i, std::list< double >::difference_type j, listD v)
        """
        return _pyBasePython.listD___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< double >::difference_type', j: 'std::list< double >::difference_type') -> "void":
        """__delslice__(listD self, std::list< double >::difference_type i, std::list< double >::difference_type j)"""
        return _pyBasePython.listD___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listD self, std::list< double >::difference_type i)
        __delitem__(listD self, PySliceObject * slice)
        """
        return _pyBasePython.listD___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< double >::value_type const &":
        """
        __getitem__(listD self, PySliceObject * slice) -> listD
        __getitem__(listD self, std::list< double >::difference_type i) -> std::list< double >::value_type const &
        """
        return _pyBasePython.listD___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listD self, PySliceObject * slice, listD v)
        __setitem__(listD self, PySliceObject * slice)
        __setitem__(listD self, std::list< double >::difference_type i, std::list< double >::value_type const & x)
        """
        return _pyBasePython.listD___setitem__(self, *args)


    def pop(self) -> "std::list< double >::value_type":
        """pop(listD self) -> std::list< double >::value_type"""
        return _pyBasePython.listD_pop(self)


    def append(self, x: 'std::list< double >::value_type const &') -> "void":
        """append(listD self, std::list< double >::value_type const & x)"""
        return _pyBasePython.listD_append(self, x)


    def empty(self) -> "bool":
        """empty(listD self) -> bool"""
        return _pyBasePython.listD_empty(self)


    def size(self) -> "std::list< double >::size_type":
        """size(listD self) -> std::list< double >::size_type"""
        return _pyBasePython.listD_size(self)


    def swap(self, v: 'listD') -> "void":
        """swap(listD self, listD v)"""
        return _pyBasePython.listD_swap(self, v)


    def begin(self) -> "std::list< double >::iterator":
        """begin(listD self) -> std::list< double >::iterator"""
        return _pyBasePython.listD_begin(self)


    def end(self) -> "std::list< double >::iterator":
        """end(listD self) -> std::list< double >::iterator"""
        return _pyBasePython.listD_end(self)


    def rbegin(self) -> "std::list< double >::reverse_iterator":
        """rbegin(listD self) -> std::list< double >::reverse_iterator"""
        return _pyBasePython.listD_rbegin(self)


    def rend(self) -> "std::list< double >::reverse_iterator":
        """rend(listD self) -> std::list< double >::reverse_iterator"""
        return _pyBasePython.listD_rend(self)


    def clear(self) -> "void":
        """clear(listD self)"""
        return _pyBasePython.listD_clear(self)


    def get_allocator(self) -> "std::list< double >::allocator_type":
        """get_allocator(listD self) -> std::list< double >::allocator_type"""
        return _pyBasePython.listD_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listD self)"""
        return _pyBasePython.listD_pop_back(self)


    def erase(self, *args) -> "std::list< double >::iterator":
        """
        erase(listD self, std::list< double >::iterator pos) -> std::list< double >::iterator
        erase(listD self, std::list< double >::iterator first, std::list< double >::iterator last) -> std::list< double >::iterator
        """
        return _pyBasePython.listD_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(double)> self) -> listD
        __init__(std::list<(double)> self, listD arg2) -> listD
        __init__(std::list<(double)> self, std::list< double >::size_type size) -> listD
        __init__(std::list<(double)> self, std::list< double >::size_type size, std::list< double >::value_type const & value) -> listD
        """
        _pyBasePython.listD_swiginit(self, _pyBasePython.new_listD(*args))

    def push_back(self, x: 'std::list< double >::value_type const &') -> "void":
        """push_back(listD self, std::list< double >::value_type const & x)"""
        return _pyBasePython.listD_push_back(self, x)


    def front(self) -> "std::list< double >::value_type const &":
        """front(listD self) -> std::list< double >::value_type const &"""
        return _pyBasePython.listD_front(self)


    def back(self) -> "std::list< double >::value_type const &":
        """back(listD self) -> std::list< double >::value_type const &"""
        return _pyBasePython.listD_back(self)


    def assign(self, n: 'std::list< double >::size_type', x: 'std::list< double >::value_type const &') -> "void":
        """assign(listD self, std::list< double >::size_type n, std::list< double >::value_type const & x)"""
        return _pyBasePython.listD_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listD self, std::list< double >::size_type new_size)
        resize(listD self, std::list< double >::size_type new_size, std::list< double >::value_type const & x)
        """
        return _pyBasePython.listD_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listD self, std::list< double >::iterator pos, std::list< double >::value_type const & x) -> std::list< double >::iterator
        insert(listD self, std::list< double >::iterator pos, std::list< double >::size_type n, std::list< double >::value_type const & x)
        """
        return _pyBasePython.listD_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listD self)"""
        return _pyBasePython.listD_pop_front(self)


    def push_front(self, x: 'std::list< double >::value_type const &') -> "void":
        """push_front(listD self, std::list< double >::value_type const & x)"""
        return _pyBasePython.listD_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listD self)"""
        return _pyBasePython.listD_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listD
listD.iterator = new_instancemethod(_pyBasePython.listD_iterator, None, listD)
listD.__nonzero__ = new_instancemethod(_pyBasePython.listD___nonzero__, None, listD)
listD.__bool__ = new_instancemethod(_pyBasePython.listD___bool__, None, listD)
listD.__len__ = new_instancemethod(_pyBasePython.listD___len__, None, listD)
listD.__getslice__ = new_instancemethod(_pyBasePython.listD___getslice__, None, listD)
listD.__setslice__ = new_instancemethod(_pyBasePython.listD___setslice__, None, listD)
listD.__delslice__ = new_instancemethod(_pyBasePython.listD___delslice__, None, listD)
listD.__delitem__ = new_instancemethod(_pyBasePython.listD___delitem__, None, listD)
listD.__getitem__ = new_instancemethod(_pyBasePython.listD___getitem__, None, listD)
listD.__setitem__ = new_instancemethod(_pyBasePython.listD___setitem__, None, listD)
listD.pop = new_instancemethod(_pyBasePython.listD_pop, None, listD)
listD.append = new_instancemethod(_pyBasePython.listD_append, None, listD)
listD.empty = new_instancemethod(_pyBasePython.listD_empty, None, listD)
listD.size = new_instancemethod(_pyBasePython.listD_size, None, listD)
listD.swap = new_instancemethod(_pyBasePython.listD_swap, None, listD)
listD.begin = new_instancemethod(_pyBasePython.listD_begin, None, listD)
listD.end = new_instancemethod(_pyBasePython.listD_end, None, listD)
listD.rbegin = new_instancemethod(_pyBasePython.listD_rbegin, None, listD)
listD.rend = new_instancemethod(_pyBasePython.listD_rend, None, listD)
listD.clear = new_instancemethod(_pyBasePython.listD_clear, None, listD)
listD.get_allocator = new_instancemethod(_pyBasePython.listD_get_allocator, None, listD)
listD.pop_back = new_instancemethod(_pyBasePython.listD_pop_back, None, listD)
listD.erase = new_instancemethod(_pyBasePython.listD_erase, None, listD)
listD.push_back = new_instancemethod(_pyBasePython.listD_push_back, None, listD)
listD.front = new_instancemethod(_pyBasePython.listD_front, None, listD)
listD.back = new_instancemethod(_pyBasePython.listD_back, None, listD)
listD.assign = new_instancemethod(_pyBasePython.listD_assign, None, listD)
listD.resize = new_instancemethod(_pyBasePython.listD_resize, None, listD)
listD.insert = new_instancemethod(_pyBasePython.listD_insert, None, listD)
listD.pop_front = new_instancemethod(_pyBasePython.listD_pop_front, None, listD)
listD.push_front = new_instancemethod(_pyBasePython.listD_push_front, None, listD)
listD.reverse = new_instancemethod(_pyBasePython.listD_reverse, None, listD)
listD_swigregister = _pyBasePython.listD_swigregister
listD_swigregister(listD)

class liststring(object):
    """Proxy of C++ std::list<(std::string)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(liststring self) -> SwigPyIterator"""
        return _pyBasePython.liststring_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(liststring self) -> bool"""
        return _pyBasePython.liststring___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(liststring self) -> bool"""
        return _pyBasePython.liststring___bool__(self)


    def __len__(self) -> "std::list< std::string >::size_type":
        """__len__(liststring self) -> std::list< std::string >::size_type"""
        return _pyBasePython.liststring___len__(self)


    def __getslice__(self, i: 'std::list< std::string >::difference_type', j: 'std::list< std::string >::difference_type') -> "std::list< std::string,std::allocator< std::string > > *":
        """__getslice__(liststring self, std::list< std::string >::difference_type i, std::list< std::string >::difference_type j) -> liststring"""
        return _pyBasePython.liststring___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(liststring self, std::list< std::string >::difference_type i, std::list< std::string >::difference_type j)
        __setslice__(liststring self, std::list< std::string >::difference_type i, std::list< std::string >::difference_type j, liststring v)
        """
        return _pyBasePython.liststring___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< std::string >::difference_type', j: 'std::list< std::string >::difference_type') -> "void":
        """__delslice__(liststring self, std::list< std::string >::difference_type i, std::list< std::string >::difference_type j)"""
        return _pyBasePython.liststring___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(liststring self, std::list< std::string >::difference_type i)
        __delitem__(liststring self, PySliceObject * slice)
        """
        return _pyBasePython.liststring___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< std::string >::value_type const &":
        """
        __getitem__(liststring self, PySliceObject * slice) -> liststring
        __getitem__(liststring self, std::list< std::string >::difference_type i) -> std::list< std::string >::value_type const &
        """
        return _pyBasePython.liststring___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(liststring self, PySliceObject * slice, liststring v)
        __setitem__(liststring self, PySliceObject * slice)
        __setitem__(liststring self, std::list< std::string >::difference_type i, std::list< std::string >::value_type const & x)
        """
        return _pyBasePython.liststring___setitem__(self, *args)


    def pop(self) -> "std::list< std::string >::value_type":
        """pop(liststring self) -> std::list< std::string >::value_type"""
        return _pyBasePython.liststring_pop(self)


    def append(self, x: 'std::list< std::string >::value_type const &') -> "void":
        """append(liststring self, std::list< std::string >::value_type const & x)"""
        return _pyBasePython.liststring_append(self, x)


    def empty(self) -> "bool":
        """empty(liststring self) -> bool"""
        return _pyBasePython.liststring_empty(self)


    def size(self) -> "std::list< std::string >::size_type":
        """size(liststring self) -> std::list< std::string >::size_type"""
        return _pyBasePython.liststring_size(self)


    def swap(self, v: 'liststring') -> "void":
        """swap(liststring self, liststring v)"""
        return _pyBasePython.liststring_swap(self, v)


    def begin(self) -> "std::list< std::string >::iterator":
        """begin(liststring self) -> std::list< std::string >::iterator"""
        return _pyBasePython.liststring_begin(self)


    def end(self) -> "std::list< std::string >::iterator":
        """end(liststring self) -> std::list< std::string >::iterator"""
        return _pyBasePython.liststring_end(self)


    def rbegin(self) -> "std::list< std::string >::reverse_iterator":
        """rbegin(liststring self) -> std::list< std::string >::reverse_iterator"""
        return _pyBasePython.liststring_rbegin(self)


    def rend(self) -> "std::list< std::string >::reverse_iterator":
        """rend(liststring self) -> std::list< std::string >::reverse_iterator"""
        return _pyBasePython.liststring_rend(self)


    def clear(self) -> "void":
        """clear(liststring self)"""
        return _pyBasePython.liststring_clear(self)


    def get_allocator(self) -> "std::list< std::string >::allocator_type":
        """get_allocator(liststring self) -> std::list< std::string >::allocator_type"""
        return _pyBasePython.liststring_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(liststring self)"""
        return _pyBasePython.liststring_pop_back(self)


    def erase(self, *args) -> "std::list< std::string >::iterator":
        """
        erase(liststring self, std::list< std::string >::iterator pos) -> std::list< std::string >::iterator
        erase(liststring self, std::list< std::string >::iterator first, std::list< std::string >::iterator last) -> std::list< std::string >::iterator
        """
        return _pyBasePython.liststring_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(std::string)> self) -> liststring
        __init__(std::list<(std::string)> self, liststring arg2) -> liststring
        __init__(std::list<(std::string)> self, std::list< std::string >::size_type size) -> liststring
        __init__(std::list<(std::string)> self, std::list< std::string >::size_type size, std::list< std::string >::value_type const & value) -> liststring
        """
        _pyBasePython.liststring_swiginit(self, _pyBasePython.new_liststring(*args))

    def push_back(self, x: 'std::list< std::string >::value_type const &') -> "void":
        """push_back(liststring self, std::list< std::string >::value_type const & x)"""
        return _pyBasePython.liststring_push_back(self, x)


    def front(self) -> "std::list< std::string >::value_type const &":
        """front(liststring self) -> std::list< std::string >::value_type const &"""
        return _pyBasePython.liststring_front(self)


    def back(self) -> "std::list< std::string >::value_type const &":
        """back(liststring self) -> std::list< std::string >::value_type const &"""
        return _pyBasePython.liststring_back(self)


    def assign(self, n: 'std::list< std::string >::size_type', x: 'std::list< std::string >::value_type const &') -> "void":
        """assign(liststring self, std::list< std::string >::size_type n, std::list< std::string >::value_type const & x)"""
        return _pyBasePython.liststring_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(liststring self, std::list< std::string >::size_type new_size)
        resize(liststring self, std::list< std::string >::size_type new_size, std::list< std::string >::value_type const & x)
        """
        return _pyBasePython.liststring_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(liststring self, std::list< std::string >::iterator pos, std::list< std::string >::value_type const & x) -> std::list< std::string >::iterator
        insert(liststring self, std::list< std::string >::iterator pos, std::list< std::string >::size_type n, std::list< std::string >::value_type const & x)
        """
        return _pyBasePython.liststring_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(liststring self)"""
        return _pyBasePython.liststring_pop_front(self)


    def push_front(self, x: 'std::list< std::string >::value_type const &') -> "void":
        """push_front(liststring self, std::list< std::string >::value_type const & x)"""
        return _pyBasePython.liststring_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(liststring self)"""
        return _pyBasePython.liststring_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_liststring
liststring.iterator = new_instancemethod(_pyBasePython.liststring_iterator, None, liststring)
liststring.__nonzero__ = new_instancemethod(_pyBasePython.liststring___nonzero__, None, liststring)
liststring.__bool__ = new_instancemethod(_pyBasePython.liststring___bool__, None, liststring)
liststring.__len__ = new_instancemethod(_pyBasePython.liststring___len__, None, liststring)
liststring.__getslice__ = new_instancemethod(_pyBasePython.liststring___getslice__, None, liststring)
liststring.__setslice__ = new_instancemethod(_pyBasePython.liststring___setslice__, None, liststring)
liststring.__delslice__ = new_instancemethod(_pyBasePython.liststring___delslice__, None, liststring)
liststring.__delitem__ = new_instancemethod(_pyBasePython.liststring___delitem__, None, liststring)
liststring.__getitem__ = new_instancemethod(_pyBasePython.liststring___getitem__, None, liststring)
liststring.__setitem__ = new_instancemethod(_pyBasePython.liststring___setitem__, None, liststring)
liststring.pop = new_instancemethod(_pyBasePython.liststring_pop, None, liststring)
liststring.append = new_instancemethod(_pyBasePython.liststring_append, None, liststring)
liststring.empty = new_instancemethod(_pyBasePython.liststring_empty, None, liststring)
liststring.size = new_instancemethod(_pyBasePython.liststring_size, None, liststring)
liststring.swap = new_instancemethod(_pyBasePython.liststring_swap, None, liststring)
liststring.begin = new_instancemethod(_pyBasePython.liststring_begin, None, liststring)
liststring.end = new_instancemethod(_pyBasePython.liststring_end, None, liststring)
liststring.rbegin = new_instancemethod(_pyBasePython.liststring_rbegin, None, liststring)
liststring.rend = new_instancemethod(_pyBasePython.liststring_rend, None, liststring)
liststring.clear = new_instancemethod(_pyBasePython.liststring_clear, None, liststring)
liststring.get_allocator = new_instancemethod(_pyBasePython.liststring_get_allocator, None, liststring)
liststring.pop_back = new_instancemethod(_pyBasePython.liststring_pop_back, None, liststring)
liststring.erase = new_instancemethod(_pyBasePython.liststring_erase, None, liststring)
liststring.push_back = new_instancemethod(_pyBasePython.liststring_push_back, None, liststring)
liststring.front = new_instancemethod(_pyBasePython.liststring_front, None, liststring)
liststring.back = new_instancemethod(_pyBasePython.liststring_back, None, liststring)
liststring.assign = new_instancemethod(_pyBasePython.liststring_assign, None, liststring)
liststring.resize = new_instancemethod(_pyBasePython.liststring_resize, None, liststring)
liststring.insert = new_instancemethod(_pyBasePython.liststring_insert, None, liststring)
liststring.pop_front = new_instancemethod(_pyBasePython.liststring_pop_front, None, liststring)
liststring.push_front = new_instancemethod(_pyBasePython.liststring_push_front, None, liststring)
liststring.reverse = new_instancemethod(_pyBasePython.liststring_reverse, None, liststring)
liststring_swigregister = _pyBasePython.liststring_swigregister
liststring_swigregister(liststring)

class setB(object):
    """Proxy of C++ std::set<(bool,std::less<(bool)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(setB self) -> SwigPyIterator"""
        return _pyBasePython.setB_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(setB self) -> bool"""
        return _pyBasePython.setB___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(setB self) -> bool"""
        return _pyBasePython.setB___bool__(self)


    def __len__(self) -> "std::set< bool,std::less< bool > >::size_type":
        """__len__(setB self) -> std::set< bool,std::less< bool > >::size_type"""
        return _pyBasePython.setB___len__(self)


    def append(self, x: 'std::set< bool,std::less< bool > >::value_type') -> "void":
        """append(setB self, std::set< bool,std::less< bool > >::value_type x)"""
        return _pyBasePython.setB_append(self, x)


    def __contains__(self, x: 'std::set< bool,std::less< bool > >::value_type') -> "bool":
        """__contains__(setB self, std::set< bool,std::less< bool > >::value_type x) -> bool"""
        return _pyBasePython.setB___contains__(self, x)


    def __getitem__(self, i: 'std::set< bool,std::less< bool > >::difference_type') -> "std::set< bool,std::less< bool > >::value_type":
        """__getitem__(setB self, std::set< bool,std::less< bool > >::difference_type i) -> std::set< bool,std::less< bool > >::value_type"""
        return _pyBasePython.setB___getitem__(self, i)


    def add(self, x: 'std::set< bool,std::less< bool > >::value_type') -> "void":
        """add(setB self, std::set< bool,std::less< bool > >::value_type x)"""
        return _pyBasePython.setB_add(self, x)


    def discard(self, x: 'std::set< bool,std::less< bool > >::value_type') -> "void":
        """discard(setB self, std::set< bool,std::less< bool > >::value_type x)"""
        return _pyBasePython.setB_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(bool,std::less<(bool)>)> self, std::less< bool > const & arg2) -> setB
        __init__(std::set<(bool,std::less<(bool)>)> self) -> setB
        __init__(std::set<(bool,std::less<(bool)>)> self, setB arg2) -> setB
        """
        _pyBasePython.setB_swiginit(self, _pyBasePython.new_setB(*args))

    def empty(self) -> "bool":
        """empty(setB self) -> bool"""
        return _pyBasePython.setB_empty(self)


    def size(self) -> "std::set< bool,std::less< bool > >::size_type":
        """size(setB self) -> std::set< bool,std::less< bool > >::size_type"""
        return _pyBasePython.setB_size(self)


    def clear(self) -> "void":
        """clear(setB self)"""
        return _pyBasePython.setB_clear(self)


    def swap(self, v: 'setB') -> "void":
        """swap(setB self, setB v)"""
        return _pyBasePython.setB_swap(self, v)


    def count(self, x: 'std::set< bool,std::less< bool > >::key_type const &') -> "std::set< bool,std::less< bool > >::size_type":
        """count(setB self, std::set< bool,std::less< bool > >::key_type const & x) -> std::set< bool,std::less< bool > >::size_type"""
        return _pyBasePython.setB_count(self, x)


    def begin(self) -> "std::set< bool,std::less< bool > >::iterator":
        """begin(setB self) -> std::set< bool,std::less< bool > >::iterator"""
        return _pyBasePython.setB_begin(self)


    def end(self) -> "std::set< bool,std::less< bool > >::iterator":
        """end(setB self) -> std::set< bool,std::less< bool > >::iterator"""
        return _pyBasePython.setB_end(self)


    def rbegin(self) -> "std::set< bool,std::less< bool > >::reverse_iterator":
        """rbegin(setB self) -> std::set< bool,std::less< bool > >::reverse_iterator"""
        return _pyBasePython.setB_rbegin(self)


    def rend(self) -> "std::set< bool,std::less< bool > >::reverse_iterator":
        """rend(setB self) -> std::set< bool,std::less< bool > >::reverse_iterator"""
        return _pyBasePython.setB_rend(self)


    def erase(self, *args) -> "void":
        """
        erase(setB self, std::set< bool,std::less< bool > >::key_type const & x) -> std::set< bool,std::less< bool > >::size_type
        erase(setB self, std::set< bool,std::less< bool > >::iterator pos)
        erase(setB self, std::set< bool,std::less< bool > >::iterator first, std::set< bool,std::less< bool > >::iterator last)
        """
        return _pyBasePython.setB_erase(self, *args)


    def find(self, x: 'std::set< bool,std::less< bool > >::key_type const &') -> "std::set< bool,std::less< bool > >::iterator":
        """find(setB self, std::set< bool,std::less< bool > >::key_type const & x) -> std::set< bool,std::less< bool > >::iterator"""
        return _pyBasePython.setB_find(self, x)


    def lower_bound(self, x: 'std::set< bool,std::less< bool > >::key_type const &') -> "std::set< bool,std::less< bool > >::iterator":
        """lower_bound(setB self, std::set< bool,std::less< bool > >::key_type const & x) -> std::set< bool,std::less< bool > >::iterator"""
        return _pyBasePython.setB_lower_bound(self, x)


    def upper_bound(self, x: 'std::set< bool,std::less< bool > >::key_type const &') -> "std::set< bool,std::less< bool > >::iterator":
        """upper_bound(setB self, std::set< bool,std::less< bool > >::key_type const & x) -> std::set< bool,std::less< bool > >::iterator"""
        return _pyBasePython.setB_upper_bound(self, x)


    def equal_range(self, x: 'std::set< bool,std::less< bool > >::key_type const &') -> "std::pair< std::set< bool,std::less< bool > >::iterator,std::set< bool,std::less< bool > >::iterator >":
        """equal_range(setB self, std::set< bool,std::less< bool > >::key_type const & x) -> std::pair< std::set< bool,std::less< bool > >::iterator,std::set< bool,std::less< bool > >::iterator >"""
        return _pyBasePython.setB_equal_range(self, x)


    def insert(self, __x: 'std::set< bool,std::less< bool > >::value_type const &') -> "std::pair< std::set< bool,std::less< bool > >::iterator,bool >":
        """insert(setB self, std::set< bool,std::less< bool > >::value_type const & __x) -> std::pair< std::set< bool,std::less< bool > >::iterator,bool >"""
        return _pyBasePython.setB_insert(self, __x)

    __swig_destroy__ = _pyBasePython.delete_setB
setB.iterator = new_instancemethod(_pyBasePython.setB_iterator, None, setB)
setB.__nonzero__ = new_instancemethod(_pyBasePython.setB___nonzero__, None, setB)
setB.__bool__ = new_instancemethod(_pyBasePython.setB___bool__, None, setB)
setB.__len__ = new_instancemethod(_pyBasePython.setB___len__, None, setB)
setB.append = new_instancemethod(_pyBasePython.setB_append, None, setB)
setB.__contains__ = new_instancemethod(_pyBasePython.setB___contains__, None, setB)
setB.__getitem__ = new_instancemethod(_pyBasePython.setB___getitem__, None, setB)
setB.add = new_instancemethod(_pyBasePython.setB_add, None, setB)
setB.discard = new_instancemethod(_pyBasePython.setB_discard, None, setB)
setB.empty = new_instancemethod(_pyBasePython.setB_empty, None, setB)
setB.size = new_instancemethod(_pyBasePython.setB_size, None, setB)
setB.clear = new_instancemethod(_pyBasePython.setB_clear, None, setB)
setB.swap = new_instancemethod(_pyBasePython.setB_swap, None, setB)
setB.count = new_instancemethod(_pyBasePython.setB_count, None, setB)
setB.begin = new_instancemethod(_pyBasePython.setB_begin, None, setB)
setB.end = new_instancemethod(_pyBasePython.setB_end, None, setB)
setB.rbegin = new_instancemethod(_pyBasePython.setB_rbegin, None, setB)
setB.rend = new_instancemethod(_pyBasePython.setB_rend, None, setB)
setB.erase = new_instancemethod(_pyBasePython.setB_erase, None, setB)
setB.find = new_instancemethod(_pyBasePython.setB_find, None, setB)
setB.lower_bound = new_instancemethod(_pyBasePython.setB_lower_bound, None, setB)
setB.upper_bound = new_instancemethod(_pyBasePython.setB_upper_bound, None, setB)
setB.equal_range = new_instancemethod(_pyBasePython.setB_equal_range, None, setB)
setB.insert = new_instancemethod(_pyBasePython.setB_insert, None, setB)
setB_swigregister = _pyBasePython.setB_swigregister
setB_swigregister(setB)

class setI(object):
    """Proxy of C++ std::set<(int,std::less<(int)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(setI self) -> SwigPyIterator"""
        return _pyBasePython.setI_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(setI self) -> bool"""
        return _pyBasePython.setI___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(setI self) -> bool"""
        return _pyBasePython.setI___bool__(self)


    def __len__(self) -> "std::set< int,std::less< int > >::size_type":
        """__len__(setI self) -> std::set< int,std::less< int > >::size_type"""
        return _pyBasePython.setI___len__(self)


    def append(self, x: 'std::set< int,std::less< int > >::value_type') -> "void":
        """append(setI self, std::set< int,std::less< int > >::value_type x)"""
        return _pyBasePython.setI_append(self, x)


    def __contains__(self, x: 'std::set< int,std::less< int > >::value_type') -> "bool":
        """__contains__(setI self, std::set< int,std::less< int > >::value_type x) -> bool"""
        return _pyBasePython.setI___contains__(self, x)


    def __getitem__(self, i: 'std::set< int,std::less< int > >::difference_type') -> "std::set< int,std::less< int > >::value_type":
        """__getitem__(setI self, std::set< int,std::less< int > >::difference_type i) -> std::set< int,std::less< int > >::value_type"""
        return _pyBasePython.setI___getitem__(self, i)


    def add(self, x: 'std::set< int,std::less< int > >::value_type') -> "void":
        """add(setI self, std::set< int,std::less< int > >::value_type x)"""
        return _pyBasePython.setI_add(self, x)


    def discard(self, x: 'std::set< int,std::less< int > >::value_type') -> "void":
        """discard(setI self, std::set< int,std::less< int > >::value_type x)"""
        return _pyBasePython.setI_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(int,std::less<(int)>)> self, std::less< int > const & arg2) -> setI
        __init__(std::set<(int,std::less<(int)>)> self) -> setI
        __init__(std::set<(int,std::less<(int)>)> self, setI arg2) -> setI
        """
        _pyBasePython.setI_swiginit(self, _pyBasePython.new_setI(*args))

    def empty(self) -> "bool":
        """empty(setI self) -> bool"""
        return _pyBasePython.setI_empty(self)


    def size(self) -> "std::set< int,std::less< int > >::size_type":
        """size(setI self) -> std::set< int,std::less< int > >::size_type"""
        return _pyBasePython.setI_size(self)


    def clear(self) -> "void":
        """clear(setI self)"""
        return _pyBasePython.setI_clear(self)


    def swap(self, v: 'setI') -> "void":
        """swap(setI self, setI v)"""
        return _pyBasePython.setI_swap(self, v)


    def count(self, x: 'std::set< int,std::less< int > >::key_type const &') -> "std::set< int,std::less< int > >::size_type":
        """count(setI self, std::set< int,std::less< int > >::key_type const & x) -> std::set< int,std::less< int > >::size_type"""
        return _pyBasePython.setI_count(self, x)


    def begin(self) -> "std::set< int,std::less< int > >::iterator":
        """begin(setI self) -> std::set< int,std::less< int > >::iterator"""
        return _pyBasePython.setI_begin(self)


    def end(self) -> "std::set< int,std::less< int > >::iterator":
        """end(setI self) -> std::set< int,std::less< int > >::iterator"""
        return _pyBasePython.setI_end(self)


    def rbegin(self) -> "std::set< int,std::less< int > >::reverse_iterator":
        """rbegin(setI self) -> std::set< int,std::less< int > >::reverse_iterator"""
        return _pyBasePython.setI_rbegin(self)


    def rend(self) -> "std::set< int,std::less< int > >::reverse_iterator":
        """rend(setI self) -> std::set< int,std::less< int > >::reverse_iterator"""
        return _pyBasePython.setI_rend(self)


    def erase(self, *args) -> "void":
        """
        erase(setI self, std::set< int,std::less< int > >::key_type const & x) -> std::set< int,std::less< int > >::size_type
        erase(setI self, std::set< int,std::less< int > >::iterator pos)
        erase(setI self, std::set< int,std::less< int > >::iterator first, std::set< int,std::less< int > >::iterator last)
        """
        return _pyBasePython.setI_erase(self, *args)


    def find(self, x: 'std::set< int,std::less< int > >::key_type const &') -> "std::set< int,std::less< int > >::iterator":
        """find(setI self, std::set< int,std::less< int > >::key_type const & x) -> std::set< int,std::less< int > >::iterator"""
        return _pyBasePython.setI_find(self, x)


    def lower_bound(self, x: 'std::set< int,std::less< int > >::key_type const &') -> "std::set< int,std::less< int > >::iterator":
        """lower_bound(setI self, std::set< int,std::less< int > >::key_type const & x) -> std::set< int,std::less< int > >::iterator"""
        return _pyBasePython.setI_lower_bound(self, x)


    def upper_bound(self, x: 'std::set< int,std::less< int > >::key_type const &') -> "std::set< int,std::less< int > >::iterator":
        """upper_bound(setI self, std::set< int,std::less< int > >::key_type const & x) -> std::set< int,std::less< int > >::iterator"""
        return _pyBasePython.setI_upper_bound(self, x)


    def equal_range(self, x: 'std::set< int,std::less< int > >::key_type const &') -> "std::pair< std::set< int,std::less< int > >::iterator,std::set< int,std::less< int > >::iterator >":
        """equal_range(setI self, std::set< int,std::less< int > >::key_type const & x) -> std::pair< std::set< int,std::less< int > >::iterator,std::set< int,std::less< int > >::iterator >"""
        return _pyBasePython.setI_equal_range(self, x)


    def insert(self, __x: 'std::set< int,std::less< int > >::value_type const &') -> "std::pair< std::set< int,std::less< int > >::iterator,bool >":
        """insert(setI self, std::set< int,std::less< int > >::value_type const & __x) -> std::pair< std::set< int,std::less< int > >::iterator,bool >"""
        return _pyBasePython.setI_insert(self, __x)

    __swig_destroy__ = _pyBasePython.delete_setI
setI.iterator = new_instancemethod(_pyBasePython.setI_iterator, None, setI)
setI.__nonzero__ = new_instancemethod(_pyBasePython.setI___nonzero__, None, setI)
setI.__bool__ = new_instancemethod(_pyBasePython.setI___bool__, None, setI)
setI.__len__ = new_instancemethod(_pyBasePython.setI___len__, None, setI)
setI.append = new_instancemethod(_pyBasePython.setI_append, None, setI)
setI.__contains__ = new_instancemethod(_pyBasePython.setI___contains__, None, setI)
setI.__getitem__ = new_instancemethod(_pyBasePython.setI___getitem__, None, setI)
setI.add = new_instancemethod(_pyBasePython.setI_add, None, setI)
setI.discard = new_instancemethod(_pyBasePython.setI_discard, None, setI)
setI.empty = new_instancemethod(_pyBasePython.setI_empty, None, setI)
setI.size = new_instancemethod(_pyBasePython.setI_size, None, setI)
setI.clear = new_instancemethod(_pyBasePython.setI_clear, None, setI)
setI.swap = new_instancemethod(_pyBasePython.setI_swap, None, setI)
setI.count = new_instancemethod(_pyBasePython.setI_count, None, setI)
setI.begin = new_instancemethod(_pyBasePython.setI_begin, None, setI)
setI.end = new_instancemethod(_pyBasePython.setI_end, None, setI)
setI.rbegin = new_instancemethod(_pyBasePython.setI_rbegin, None, setI)
setI.rend = new_instancemethod(_pyBasePython.setI_rend, None, setI)
setI.erase = new_instancemethod(_pyBasePython.setI_erase, None, setI)
setI.find = new_instancemethod(_pyBasePython.setI_find, None, setI)
setI.lower_bound = new_instancemethod(_pyBasePython.setI_lower_bound, None, setI)
setI.upper_bound = new_instancemethod(_pyBasePython.setI_upper_bound, None, setI)
setI.equal_range = new_instancemethod(_pyBasePython.setI_equal_range, None, setI)
setI.insert = new_instancemethod(_pyBasePython.setI_insert, None, setI)
setI_swigregister = _pyBasePython.setI_swigregister
setI_swigregister(setI)

class setUC(object):
    """Proxy of C++ std::set<(unsigned char,std::less<(unsigned char)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(setUC self) -> SwigPyIterator"""
        return _pyBasePython.setUC_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(setUC self) -> bool"""
        return _pyBasePython.setUC___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(setUC self) -> bool"""
        return _pyBasePython.setUC___bool__(self)


    def __len__(self) -> "std::set< unsigned char,std::less< unsigned char > >::size_type":
        """__len__(setUC self) -> std::set< unsigned char,std::less< unsigned char > >::size_type"""
        return _pyBasePython.setUC___len__(self)


    def append(self, x: 'std::set< unsigned char,std::less< unsigned char > >::value_type') -> "void":
        """append(setUC self, std::set< unsigned char,std::less< unsigned char > >::value_type x)"""
        return _pyBasePython.setUC_append(self, x)


    def __contains__(self, x: 'std::set< unsigned char,std::less< unsigned char > >::value_type') -> "bool":
        """__contains__(setUC self, std::set< unsigned char,std::less< unsigned char > >::value_type x) -> bool"""
        return _pyBasePython.setUC___contains__(self, x)


    def __getitem__(self, i: 'std::set< unsigned char,std::less< unsigned char > >::difference_type') -> "std::set< unsigned char,std::less< unsigned char > >::value_type":
        """__getitem__(setUC self, std::set< unsigned char,std::less< unsigned char > >::difference_type i) -> std::set< unsigned char,std::less< unsigned char > >::value_type"""
        return _pyBasePython.setUC___getitem__(self, i)


    def add(self, x: 'std::set< unsigned char,std::less< unsigned char > >::value_type') -> "void":
        """add(setUC self, std::set< unsigned char,std::less< unsigned char > >::value_type x)"""
        return _pyBasePython.setUC_add(self, x)


    def discard(self, x: 'std::set< unsigned char,std::less< unsigned char > >::value_type') -> "void":
        """discard(setUC self, std::set< unsigned char,std::less< unsigned char > >::value_type x)"""
        return _pyBasePython.setUC_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(unsigned char,std::less<(unsigned char)>)> self, std::less< unsigned char > const & arg2) -> setUC
        __init__(std::set<(unsigned char,std::less<(unsigned char)>)> self) -> setUC
        __init__(std::set<(unsigned char,std::less<(unsigned char)>)> self, setUC arg2) -> setUC
        """
        _pyBasePython.setUC_swiginit(self, _pyBasePython.new_setUC(*args))

    def empty(self) -> "bool":
        """empty(setUC self) -> bool"""
        return _pyBasePython.setUC_empty(self)


    def size(self) -> "std::set< unsigned char,std::less< unsigned char > >::size_type":
        """size(setUC self) -> std::set< unsigned char,std::less< unsigned char > >::size_type"""
        return _pyBasePython.setUC_size(self)


    def clear(self) -> "void":
        """clear(setUC self)"""
        return _pyBasePython.setUC_clear(self)


    def swap(self, v: 'setUC') -> "void":
        """swap(setUC self, setUC v)"""
        return _pyBasePython.setUC_swap(self, v)


    def count(self, x: 'std::set< unsigned char,std::less< unsigned char > >::key_type const &') -> "std::set< unsigned char,std::less< unsigned char > >::size_type":
        """count(setUC self, std::set< unsigned char,std::less< unsigned char > >::key_type const & x) -> std::set< unsigned char,std::less< unsigned char > >::size_type"""
        return _pyBasePython.setUC_count(self, x)


    def begin(self) -> "std::set< unsigned char,std::less< unsigned char > >::iterator":
        """begin(setUC self) -> std::set< unsigned char,std::less< unsigned char > >::iterator"""
        return _pyBasePython.setUC_begin(self)


    def end(self) -> "std::set< unsigned char,std::less< unsigned char > >::iterator":
        """end(setUC self) -> std::set< unsigned char,std::less< unsigned char > >::iterator"""
        return _pyBasePython.setUC_end(self)


    def rbegin(self) -> "std::set< unsigned char,std::less< unsigned char > >::reverse_iterator":
        """rbegin(setUC self) -> std::set< unsigned char,std::less< unsigned char > >::reverse_iterator"""
        return _pyBasePython.setUC_rbegin(self)


    def rend(self) -> "std::set< unsigned char,std::less< unsigned char > >::reverse_iterator":
        """rend(setUC self) -> std::set< unsigned char,std::less< unsigned char > >::reverse_iterator"""
        return _pyBasePython.setUC_rend(self)


    def erase(self, *args) -> "void":
        """
        erase(setUC self, std::set< unsigned char,std::less< unsigned char > >::key_type const & x) -> std::set< unsigned char,std::less< unsigned char > >::size_type
        erase(setUC self, std::set< unsigned char,std::less< unsigned char > >::iterator pos)
        erase(setUC self, std::set< unsigned char,std::less< unsigned char > >::iterator first, std::set< unsigned char,std::less< unsigned char > >::iterator last)
        """
        return _pyBasePython.setUC_erase(self, *args)


    def find(self, x: 'std::set< unsigned char,std::less< unsigned char > >::key_type const &') -> "std::set< unsigned char,std::less< unsigned char > >::iterator":
        """find(setUC self, std::set< unsigned char,std::less< unsigned char > >::key_type const & x) -> std::set< unsigned char,std::less< unsigned char > >::iterator"""
        return _pyBasePython.setUC_find(self, x)


    def lower_bound(self, x: 'std::set< unsigned char,std::less< unsigned char > >::key_type const &') -> "std::set< unsigned char,std::less< unsigned char > >::iterator":
        """lower_bound(setUC self, std::set< unsigned char,std::less< unsigned char > >::key_type const & x) -> std::set< unsigned char,std::less< unsigned char > >::iterator"""
        return _pyBasePython.setUC_lower_bound(self, x)


    def upper_bound(self, x: 'std::set< unsigned char,std::less< unsigned char > >::key_type const &') -> "std::set< unsigned char,std::less< unsigned char > >::iterator":
        """upper_bound(setUC self, std::set< unsigned char,std::less< unsigned char > >::key_type const & x) -> std::set< unsigned char,std::less< unsigned char > >::iterator"""
        return _pyBasePython.setUC_upper_bound(self, x)


    def equal_range(self, x: 'std::set< unsigned char,std::less< unsigned char > >::key_type const &') -> "std::pair< std::set< unsigned char,std::less< unsigned char > >::iterator,std::set< unsigned char,std::less< unsigned char > >::iterator >":
        """equal_range(setUC self, std::set< unsigned char,std::less< unsigned char > >::key_type const & x) -> std::pair< std::set< unsigned char,std::less< unsigned char > >::iterator,std::set< unsigned char,std::less< unsigned char > >::iterator >"""
        return _pyBasePython.setUC_equal_range(self, x)


    def insert(self, __x: 'std::set< unsigned char,std::less< unsigned char > >::value_type const &') -> "std::pair< std::set< unsigned char,std::less< unsigned char > >::iterator,bool >":
        """insert(setUC self, std::set< unsigned char,std::less< unsigned char > >::value_type const & __x) -> std::pair< std::set< unsigned char,std::less< unsigned char > >::iterator,bool >"""
        return _pyBasePython.setUC_insert(self, __x)

    __swig_destroy__ = _pyBasePython.delete_setUC
setUC.iterator = new_instancemethod(_pyBasePython.setUC_iterator, None, setUC)
setUC.__nonzero__ = new_instancemethod(_pyBasePython.setUC___nonzero__, None, setUC)
setUC.__bool__ = new_instancemethod(_pyBasePython.setUC___bool__, None, setUC)
setUC.__len__ = new_instancemethod(_pyBasePython.setUC___len__, None, setUC)
setUC.append = new_instancemethod(_pyBasePython.setUC_append, None, setUC)
setUC.__contains__ = new_instancemethod(_pyBasePython.setUC___contains__, None, setUC)
setUC.__getitem__ = new_instancemethod(_pyBasePython.setUC___getitem__, None, setUC)
setUC.add = new_instancemethod(_pyBasePython.setUC_add, None, setUC)
setUC.discard = new_instancemethod(_pyBasePython.setUC_discard, None, setUC)
setUC.empty = new_instancemethod(_pyBasePython.setUC_empty, None, setUC)
setUC.size = new_instancemethod(_pyBasePython.setUC_size, None, setUC)
setUC.clear = new_instancemethod(_pyBasePython.setUC_clear, None, setUC)
setUC.swap = new_instancemethod(_pyBasePython.setUC_swap, None, setUC)
setUC.count = new_instancemethod(_pyBasePython.setUC_count, None, setUC)
setUC.begin = new_instancemethod(_pyBasePython.setUC_begin, None, setUC)
setUC.end = new_instancemethod(_pyBasePython.setUC_end, None, setUC)
setUC.rbegin = new_instancemethod(_pyBasePython.setUC_rbegin, None, setUC)
setUC.rend = new_instancemethod(_pyBasePython.setUC_rend, None, setUC)
setUC.erase = new_instancemethod(_pyBasePython.setUC_erase, None, setUC)
setUC.find = new_instancemethod(_pyBasePython.setUC_find, None, setUC)
setUC.lower_bound = new_instancemethod(_pyBasePython.setUC_lower_bound, None, setUC)
setUC.upper_bound = new_instancemethod(_pyBasePython.setUC_upper_bound, None, setUC)
setUC.equal_range = new_instancemethod(_pyBasePython.setUC_equal_range, None, setUC)
setUC.insert = new_instancemethod(_pyBasePython.setUC_insert, None, setUC)
setUC_swigregister = _pyBasePython.setUC_swigregister
setUC_swigregister(setUC)

class setUS(object):
    """Proxy of C++ std::set<(unsigned short,std::less<(unsigned short)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(setUS self) -> SwigPyIterator"""
        return _pyBasePython.setUS_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(setUS self) -> bool"""
        return _pyBasePython.setUS___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(setUS self) -> bool"""
        return _pyBasePython.setUS___bool__(self)


    def __len__(self) -> "std::set< unsigned short,std::less< unsigned short > >::size_type":
        """__len__(setUS self) -> std::set< unsigned short,std::less< unsigned short > >::size_type"""
        return _pyBasePython.setUS___len__(self)


    def append(self, x: 'std::set< unsigned short,std::less< unsigned short > >::value_type') -> "void":
        """append(setUS self, std::set< unsigned short,std::less< unsigned short > >::value_type x)"""
        return _pyBasePython.setUS_append(self, x)


    def __contains__(self, x: 'std::set< unsigned short,std::less< unsigned short > >::value_type') -> "bool":
        """__contains__(setUS self, std::set< unsigned short,std::less< unsigned short > >::value_type x) -> bool"""
        return _pyBasePython.setUS___contains__(self, x)


    def __getitem__(self, i: 'std::set< unsigned short,std::less< unsigned short > >::difference_type') -> "std::set< unsigned short,std::less< unsigned short > >::value_type":
        """__getitem__(setUS self, std::set< unsigned short,std::less< unsigned short > >::difference_type i) -> std::set< unsigned short,std::less< unsigned short > >::value_type"""
        return _pyBasePython.setUS___getitem__(self, i)


    def add(self, x: 'std::set< unsigned short,std::less< unsigned short > >::value_type') -> "void":
        """add(setUS self, std::set< unsigned short,std::less< unsigned short > >::value_type x)"""
        return _pyBasePython.setUS_add(self, x)


    def discard(self, x: 'std::set< unsigned short,std::less< unsigned short > >::value_type') -> "void":
        """discard(setUS self, std::set< unsigned short,std::less< unsigned short > >::value_type x)"""
        return _pyBasePython.setUS_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(unsigned short,std::less<(unsigned short)>)> self, std::less< unsigned short > const & arg2) -> setUS
        __init__(std::set<(unsigned short,std::less<(unsigned short)>)> self) -> setUS
        __init__(std::set<(unsigned short,std::less<(unsigned short)>)> self, setUS arg2) -> setUS
        """
        _pyBasePython.setUS_swiginit(self, _pyBasePython.new_setUS(*args))

    def empty(self) -> "bool":
        """empty(setUS self) -> bool"""
        return _pyBasePython.setUS_empty(self)


    def size(self) -> "std::set< unsigned short,std::less< unsigned short > >::size_type":
        """size(setUS self) -> std::set< unsigned short,std::less< unsigned short > >::size_type"""
        return _pyBasePython.setUS_size(self)


    def clear(self) -> "void":
        """clear(setUS self)"""
        return _pyBasePython.setUS_clear(self)


    def swap(self, v: 'setUS') -> "void":
        """swap(setUS self, setUS v)"""
        return _pyBasePython.setUS_swap(self, v)


    def count(self, x: 'std::set< unsigned short,std::less< unsigned short > >::key_type const &') -> "std::set< unsigned short,std::less< unsigned short > >::size_type":
        """count(setUS self, std::set< unsigned short,std::less< unsigned short > >::key_type const & x) -> std::set< unsigned short,std::less< unsigned short > >::size_type"""
        return _pyBasePython.setUS_count(self, x)


    def begin(self) -> "std::set< unsigned short,std::less< unsigned short > >::iterator":
        """begin(setUS self) -> std::set< unsigned short,std::less< unsigned short > >::iterator"""
        return _pyBasePython.setUS_begin(self)


    def end(self) -> "std::set< unsigned short,std::less< unsigned short > >::iterator":
        """end(setUS self) -> std::set< unsigned short,std::less< unsigned short > >::iterator"""
        return _pyBasePython.setUS_end(self)


    def rbegin(self) -> "std::set< unsigned short,std::less< unsigned short > >::reverse_iterator":
        """rbegin(setUS self) -> std::set< unsigned short,std::less< unsigned short > >::reverse_iterator"""
        return _pyBasePython.setUS_rbegin(self)


    def rend(self) -> "std::set< unsigned short,std::less< unsigned short > >::reverse_iterator":
        """rend(setUS self) -> std::set< unsigned short,std::less< unsigned short > >::reverse_iterator"""
        return _pyBasePython.setUS_rend(self)


    def erase(self, *args) -> "void":
        """
        erase(setUS self, std::set< unsigned short,std::less< unsigned short > >::key_type const & x) -> std::set< unsigned short,std::less< unsigned short > >::size_type
        erase(setUS self, std::set< unsigned short,std::less< unsigned short > >::iterator pos)
        erase(setUS self, std::set< unsigned short,std::less< unsigned short > >::iterator first, std::set< unsigned short,std::less< unsigned short > >::iterator last)
        """
        return _pyBasePython.setUS_erase(self, *args)


    def find(self, x: 'std::set< unsigned short,std::less< unsigned short > >::key_type const &') -> "std::set< unsigned short,std::less< unsigned short > >::iterator":
        """find(setUS self, std::set< unsigned short,std::less< unsigned short > >::key_type const & x) -> std::set< unsigned short,std::less< unsigned short > >::iterator"""
        return _pyBasePython.setUS_find(self, x)


    def lower_bound(self, x: 'std::set< unsigned short,std::less< unsigned short > >::key_type const &') -> "std::set< unsigned short,std::less< unsigned short > >::iterator":
        """lower_bound(setUS self, std::set< unsigned short,std::less< unsigned short > >::key_type const & x) -> std::set< unsigned short,std::less< unsigned short > >::iterator"""
        return _pyBasePython.setUS_lower_bound(self, x)


    def upper_bound(self, x: 'std::set< unsigned short,std::less< unsigned short > >::key_type const &') -> "std::set< unsigned short,std::less< unsigned short > >::iterator":
        """upper_bound(setUS self, std::set< unsigned short,std::less< unsigned short > >::key_type const & x) -> std::set< unsigned short,std::less< unsigned short > >::iterator"""
        return _pyBasePython.setUS_upper_bound(self, x)


    def equal_range(self, x: 'std::set< unsigned short,std::less< unsigned short > >::key_type const &') -> "std::pair< std::set< unsigned short,std::less< unsigned short > >::iterator,std::set< unsigned short,std::less< unsigned short > >::iterator >":
        """equal_range(setUS self, std::set< unsigned short,std::less< unsigned short > >::key_type const & x) -> std::pair< std::set< unsigned short,std::less< unsigned short > >::iterator,std::set< unsigned short,std::less< unsigned short > >::iterator >"""
        return _pyBasePython.setUS_equal_range(self, x)


    def insert(self, __x: 'std::set< unsigned short,std::less< unsigned short > >::value_type const &') -> "std::pair< std::set< unsigned short,std::less< unsigned short > >::iterator,bool >":
        """insert(setUS self, std::set< unsigned short,std::less< unsigned short > >::value_type const & __x) -> std::pair< std::set< unsigned short,std::less< unsigned short > >::iterator,bool >"""
        return _pyBasePython.setUS_insert(self, __x)

    __swig_destroy__ = _pyBasePython.delete_setUS
setUS.iterator = new_instancemethod(_pyBasePython.setUS_iterator, None, setUS)
setUS.__nonzero__ = new_instancemethod(_pyBasePython.setUS___nonzero__, None, setUS)
setUS.__bool__ = new_instancemethod(_pyBasePython.setUS___bool__, None, setUS)
setUS.__len__ = new_instancemethod(_pyBasePython.setUS___len__, None, setUS)
setUS.append = new_instancemethod(_pyBasePython.setUS_append, None, setUS)
setUS.__contains__ = new_instancemethod(_pyBasePython.setUS___contains__, None, setUS)
setUS.__getitem__ = new_instancemethod(_pyBasePython.setUS___getitem__, None, setUS)
setUS.add = new_instancemethod(_pyBasePython.setUS_add, None, setUS)
setUS.discard = new_instancemethod(_pyBasePython.setUS_discard, None, setUS)
setUS.empty = new_instancemethod(_pyBasePython.setUS_empty, None, setUS)
setUS.size = new_instancemethod(_pyBasePython.setUS_size, None, setUS)
setUS.clear = new_instancemethod(_pyBasePython.setUS_clear, None, setUS)
setUS.swap = new_instancemethod(_pyBasePython.setUS_swap, None, setUS)
setUS.count = new_instancemethod(_pyBasePython.setUS_count, None, setUS)
setUS.begin = new_instancemethod(_pyBasePython.setUS_begin, None, setUS)
setUS.end = new_instancemethod(_pyBasePython.setUS_end, None, setUS)
setUS.rbegin = new_instancemethod(_pyBasePython.setUS_rbegin, None, setUS)
setUS.rend = new_instancemethod(_pyBasePython.setUS_rend, None, setUS)
setUS.erase = new_instancemethod(_pyBasePython.setUS_erase, None, setUS)
setUS.find = new_instancemethod(_pyBasePython.setUS_find, None, setUS)
setUS.lower_bound = new_instancemethod(_pyBasePython.setUS_lower_bound, None, setUS)
setUS.upper_bound = new_instancemethod(_pyBasePython.setUS_upper_bound, None, setUS)
setUS.equal_range = new_instancemethod(_pyBasePython.setUS_equal_range, None, setUS)
setUS.insert = new_instancemethod(_pyBasePython.setUS_insert, None, setUS)
setUS_swigregister = _pyBasePython.setUS_swigregister
setUS_swigregister(setUS)

class setUI(object):
    """Proxy of C++ std::set<(unsigned int,std::less<(unsigned int)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(setUI self) -> SwigPyIterator"""
        return _pyBasePython.setUI_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(setUI self) -> bool"""
        return _pyBasePython.setUI___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(setUI self) -> bool"""
        return _pyBasePython.setUI___bool__(self)


    def __len__(self) -> "std::set< unsigned int,std::less< unsigned int > >::size_type":
        """__len__(setUI self) -> std::set< unsigned int,std::less< unsigned int > >::size_type"""
        return _pyBasePython.setUI___len__(self)


    def append(self, x: 'std::set< unsigned int,std::less< unsigned int > >::value_type') -> "void":
        """append(setUI self, std::set< unsigned int,std::less< unsigned int > >::value_type x)"""
        return _pyBasePython.setUI_append(self, x)


    def __contains__(self, x: 'std::set< unsigned int,std::less< unsigned int > >::value_type') -> "bool":
        """__contains__(setUI self, std::set< unsigned int,std::less< unsigned int > >::value_type x) -> bool"""
        return _pyBasePython.setUI___contains__(self, x)


    def __getitem__(self, i: 'std::set< unsigned int,std::less< unsigned int > >::difference_type') -> "std::set< unsigned int,std::less< unsigned int > >::value_type":
        """__getitem__(setUI self, std::set< unsigned int,std::less< unsigned int > >::difference_type i) -> std::set< unsigned int,std::less< unsigned int > >::value_type"""
        return _pyBasePython.setUI___getitem__(self, i)


    def add(self, x: 'std::set< unsigned int,std::less< unsigned int > >::value_type') -> "void":
        """add(setUI self, std::set< unsigned int,std::less< unsigned int > >::value_type x)"""
        return _pyBasePython.setUI_add(self, x)


    def discard(self, x: 'std::set< unsigned int,std::less< unsigned int > >::value_type') -> "void":
        """discard(setUI self, std::set< unsigned int,std::less< unsigned int > >::value_type x)"""
        return _pyBasePython.setUI_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(unsigned int,std::less<(unsigned int)>)> self, std::less< unsigned int > const & arg2) -> setUI
        __init__(std::set<(unsigned int,std::less<(unsigned int)>)> self) -> setUI
        __init__(std::set<(unsigned int,std::less<(unsigned int)>)> self, setUI arg2) -> setUI
        """
        _pyBasePython.setUI_swiginit(self, _pyBasePython.new_setUI(*args))

    def empty(self) -> "bool":
        """empty(setUI self) -> bool"""
        return _pyBasePython.setUI_empty(self)


    def size(self) -> "std::set< unsigned int,std::less< unsigned int > >::size_type":
        """size(setUI self) -> std::set< unsigned int,std::less< unsigned int > >::size_type"""
        return _pyBasePython.setUI_size(self)


    def clear(self) -> "void":
        """clear(setUI self)"""
        return _pyBasePython.setUI_clear(self)


    def swap(self, v: 'setUI') -> "void":
        """swap(setUI self, setUI v)"""
        return _pyBasePython.setUI_swap(self, v)


    def count(self, x: 'std::set< unsigned int,std::less< unsigned int > >::key_type const &') -> "std::set< unsigned int,std::less< unsigned int > >::size_type":
        """count(setUI self, std::set< unsigned int,std::less< unsigned int > >::key_type const & x) -> std::set< unsigned int,std::less< unsigned int > >::size_type"""
        return _pyBasePython.setUI_count(self, x)


    def begin(self) -> "std::set< unsigned int,std::less< unsigned int > >::iterator":
        """begin(setUI self) -> std::set< unsigned int,std::less< unsigned int > >::iterator"""
        return _pyBasePython.setUI_begin(self)


    def end(self) -> "std::set< unsigned int,std::less< unsigned int > >::iterator":
        """end(setUI self) -> std::set< unsigned int,std::less< unsigned int > >::iterator"""
        return _pyBasePython.setUI_end(self)


    def rbegin(self) -> "std::set< unsigned int,std::less< unsigned int > >::reverse_iterator":
        """rbegin(setUI self) -> std::set< unsigned int,std::less< unsigned int > >::reverse_iterator"""
        return _pyBasePython.setUI_rbegin(self)


    def rend(self) -> "std::set< unsigned int,std::less< unsigned int > >::reverse_iterator":
        """rend(setUI self) -> std::set< unsigned int,std::less< unsigned int > >::reverse_iterator"""
        return _pyBasePython.setUI_rend(self)


    def erase(self, *args) -> "void":
        """
        erase(setUI self, std::set< unsigned int,std::less< unsigned int > >::key_type const & x) -> std::set< unsigned int,std::less< unsigned int > >::size_type
        erase(setUI self, std::set< unsigned int,std::less< unsigned int > >::iterator pos)
        erase(setUI self, std::set< unsigned int,std::less< unsigned int > >::iterator first, std::set< unsigned int,std::less< unsigned int > >::iterator last)
        """
        return _pyBasePython.setUI_erase(self, *args)


    def find(self, x: 'std::set< unsigned int,std::less< unsigned int > >::key_type const &') -> "std::set< unsigned int,std::less< unsigned int > >::iterator":
        """find(setUI self, std::set< unsigned int,std::less< unsigned int > >::key_type const & x) -> std::set< unsigned int,std::less< unsigned int > >::iterator"""
        return _pyBasePython.setUI_find(self, x)


    def lower_bound(self, x: 'std::set< unsigned int,std::less< unsigned int > >::key_type const &') -> "std::set< unsigned int,std::less< unsigned int > >::iterator":
        """lower_bound(setUI self, std::set< unsigned int,std::less< unsigned int > >::key_type const & x) -> std::set< unsigned int,std::less< unsigned int > >::iterator"""
        return _pyBasePython.setUI_lower_bound(self, x)


    def upper_bound(self, x: 'std::set< unsigned int,std::less< unsigned int > >::key_type const &') -> "std::set< unsigned int,std::less< unsigned int > >::iterator":
        """upper_bound(setUI self, std::set< unsigned int,std::less< unsigned int > >::key_type const & x) -> std::set< unsigned int,std::less< unsigned int > >::iterator"""
        return _pyBasePython.setUI_upper_bound(self, x)


    def equal_range(self, x: 'std::set< unsigned int,std::less< unsigned int > >::key_type const &') -> "std::pair< std::set< unsigned int,std::less< unsigned int > >::iterator,std::set< unsigned int,std::less< unsigned int > >::iterator >":
        """equal_range(setUI self, std::set< unsigned int,std::less< unsigned int > >::key_type const & x) -> std::pair< std::set< unsigned int,std::less< unsigned int > >::iterator,std::set< unsigned int,std::less< unsigned int > >::iterator >"""
        return _pyBasePython.setUI_equal_range(self, x)


    def insert(self, __x: 'std::set< unsigned int,std::less< unsigned int > >::value_type const &') -> "std::pair< std::set< unsigned int,std::less< unsigned int > >::iterator,bool >":
        """insert(setUI self, std::set< unsigned int,std::less< unsigned int > >::value_type const & __x) -> std::pair< std::set< unsigned int,std::less< unsigned int > >::iterator,bool >"""
        return _pyBasePython.setUI_insert(self, __x)

    __swig_destroy__ = _pyBasePython.delete_setUI
setUI.iterator = new_instancemethod(_pyBasePython.setUI_iterator, None, setUI)
setUI.__nonzero__ = new_instancemethod(_pyBasePython.setUI___nonzero__, None, setUI)
setUI.__bool__ = new_instancemethod(_pyBasePython.setUI___bool__, None, setUI)
setUI.__len__ = new_instancemethod(_pyBasePython.setUI___len__, None, setUI)
setUI.append = new_instancemethod(_pyBasePython.setUI_append, None, setUI)
setUI.__contains__ = new_instancemethod(_pyBasePython.setUI___contains__, None, setUI)
setUI.__getitem__ = new_instancemethod(_pyBasePython.setUI___getitem__, None, setUI)
setUI.add = new_instancemethod(_pyBasePython.setUI_add, None, setUI)
setUI.discard = new_instancemethod(_pyBasePython.setUI_discard, None, setUI)
setUI.empty = new_instancemethod(_pyBasePython.setUI_empty, None, setUI)
setUI.size = new_instancemethod(_pyBasePython.setUI_size, None, setUI)
setUI.clear = new_instancemethod(_pyBasePython.setUI_clear, None, setUI)
setUI.swap = new_instancemethod(_pyBasePython.setUI_swap, None, setUI)
setUI.count = new_instancemethod(_pyBasePython.setUI_count, None, setUI)
setUI.begin = new_instancemethod(_pyBasePython.setUI_begin, None, setUI)
setUI.end = new_instancemethod(_pyBasePython.setUI_end, None, setUI)
setUI.rbegin = new_instancemethod(_pyBasePython.setUI_rbegin, None, setUI)
setUI.rend = new_instancemethod(_pyBasePython.setUI_rend, None, setUI)
setUI.erase = new_instancemethod(_pyBasePython.setUI_erase, None, setUI)
setUI.find = new_instancemethod(_pyBasePython.setUI_find, None, setUI)
setUI.lower_bound = new_instancemethod(_pyBasePython.setUI_lower_bound, None, setUI)
setUI.upper_bound = new_instancemethod(_pyBasePython.setUI_upper_bound, None, setUI)
setUI.equal_range = new_instancemethod(_pyBasePython.setUI_equal_range, None, setUI)
setUI.insert = new_instancemethod(_pyBasePython.setUI_insert, None, setUI)
setUI_swigregister = _pyBasePython.setUI_swigregister
setUI_swigregister(setUI)

class setUL(object):
    """Proxy of C++ std::set<(unsigned long,std::less<(unsigned long)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(setUL self) -> SwigPyIterator"""
        return _pyBasePython.setUL_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(setUL self) -> bool"""
        return _pyBasePython.setUL___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(setUL self) -> bool"""
        return _pyBasePython.setUL___bool__(self)


    def __len__(self) -> "std::set< unsigned long,std::less< unsigned long > >::size_type":
        """__len__(setUL self) -> std::set< unsigned long,std::less< unsigned long > >::size_type"""
        return _pyBasePython.setUL___len__(self)


    def append(self, x: 'std::set< unsigned long,std::less< unsigned long > >::value_type') -> "void":
        """append(setUL self, std::set< unsigned long,std::less< unsigned long > >::value_type x)"""
        return _pyBasePython.setUL_append(self, x)


    def __contains__(self, x: 'std::set< unsigned long,std::less< unsigned long > >::value_type') -> "bool":
        """__contains__(setUL self, std::set< unsigned long,std::less< unsigned long > >::value_type x) -> bool"""
        return _pyBasePython.setUL___contains__(self, x)


    def __getitem__(self, i: 'std::set< unsigned long,std::less< unsigned long > >::difference_type') -> "std::set< unsigned long,std::less< unsigned long > >::value_type":
        """__getitem__(setUL self, std::set< unsigned long,std::less< unsigned long > >::difference_type i) -> std::set< unsigned long,std::less< unsigned long > >::value_type"""
        return _pyBasePython.setUL___getitem__(self, i)


    def add(self, x: 'std::set< unsigned long,std::less< unsigned long > >::value_type') -> "void":
        """add(setUL self, std::set< unsigned long,std::less< unsigned long > >::value_type x)"""
        return _pyBasePython.setUL_add(self, x)


    def discard(self, x: 'std::set< unsigned long,std::less< unsigned long > >::value_type') -> "void":
        """discard(setUL self, std::set< unsigned long,std::less< unsigned long > >::value_type x)"""
        return _pyBasePython.setUL_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(unsigned long,std::less<(unsigned long)>)> self, std::less< unsigned long > const & arg2) -> setUL
        __init__(std::set<(unsigned long,std::less<(unsigned long)>)> self) -> setUL
        __init__(std::set<(unsigned long,std::less<(unsigned long)>)> self, setUL arg2) -> setUL
        """
        _pyBasePython.setUL_swiginit(self, _pyBasePython.new_setUL(*args))

    def empty(self) -> "bool":
        """empty(setUL self) -> bool"""
        return _pyBasePython.setUL_empty(self)


    def size(self) -> "std::set< unsigned long,std::less< unsigned long > >::size_type":
        """size(setUL self) -> std::set< unsigned long,std::less< unsigned long > >::size_type"""
        return _pyBasePython.setUL_size(self)


    def clear(self) -> "void":
        """clear(setUL self)"""
        return _pyBasePython.setUL_clear(self)


    def swap(self, v: 'setUL') -> "void":
        """swap(setUL self, setUL v)"""
        return _pyBasePython.setUL_swap(self, v)


    def count(self, x: 'std::set< unsigned long,std::less< unsigned long > >::key_type const &') -> "std::set< unsigned long,std::less< unsigned long > >::size_type":
        """count(setUL self, std::set< unsigned long,std::less< unsigned long > >::key_type const & x) -> std::set< unsigned long,std::less< unsigned long > >::size_type"""
        return _pyBasePython.setUL_count(self, x)


    def begin(self) -> "std::set< unsigned long,std::less< unsigned long > >::iterator":
        """begin(setUL self) -> std::set< unsigned long,std::less< unsigned long > >::iterator"""
        return _pyBasePython.setUL_begin(self)


    def end(self) -> "std::set< unsigned long,std::less< unsigned long > >::iterator":
        """end(setUL self) -> std::set< unsigned long,std::less< unsigned long > >::iterator"""
        return _pyBasePython.setUL_end(self)


    def rbegin(self) -> "std::set< unsigned long,std::less< unsigned long > >::reverse_iterator":
        """rbegin(setUL self) -> std::set< unsigned long,std::less< unsigned long > >::reverse_iterator"""
        return _pyBasePython.setUL_rbegin(self)


    def rend(self) -> "std::set< unsigned long,std::less< unsigned long > >::reverse_iterator":
        """rend(setUL self) -> std::set< unsigned long,std::less< unsigned long > >::reverse_iterator"""
        return _pyBasePython.setUL_rend(self)


    def erase(self, *args) -> "void":
        """
        erase(setUL self, std::set< unsigned long,std::less< unsigned long > >::key_type const & x) -> std::set< unsigned long,std::less< unsigned long > >::size_type
        erase(setUL self, std::set< unsigned long,std::less< unsigned long > >::iterator pos)
        erase(setUL self, std::set< unsigned long,std::less< unsigned long > >::iterator first, std::set< unsigned long,std::less< unsigned long > >::iterator last)
        """
        return _pyBasePython.setUL_erase(self, *args)


    def find(self, x: 'std::set< unsigned long,std::less< unsigned long > >::key_type const &') -> "std::set< unsigned long,std::less< unsigned long > >::iterator":
        """find(setUL self, std::set< unsigned long,std::less< unsigned long > >::key_type const & x) -> std::set< unsigned long,std::less< unsigned long > >::iterator"""
        return _pyBasePython.setUL_find(self, x)


    def lower_bound(self, x: 'std::set< unsigned long,std::less< unsigned long > >::key_type const &') -> "std::set< unsigned long,std::less< unsigned long > >::iterator":
        """lower_bound(setUL self, std::set< unsigned long,std::less< unsigned long > >::key_type const & x) -> std::set< unsigned long,std::less< unsigned long > >::iterator"""
        return _pyBasePython.setUL_lower_bound(self, x)


    def upper_bound(self, x: 'std::set< unsigned long,std::less< unsigned long > >::key_type const &') -> "std::set< unsigned long,std::less< unsigned long > >::iterator":
        """upper_bound(setUL self, std::set< unsigned long,std::less< unsigned long > >::key_type const & x) -> std::set< unsigned long,std::less< unsigned long > >::iterator"""
        return _pyBasePython.setUL_upper_bound(self, x)


    def equal_range(self, x: 'std::set< unsigned long,std::less< unsigned long > >::key_type const &') -> "std::pair< std::set< unsigned long,std::less< unsigned long > >::iterator,std::set< unsigned long,std::less< unsigned long > >::iterator >":
        """equal_range(setUL self, std::set< unsigned long,std::less< unsigned long > >::key_type const & x) -> std::pair< std::set< unsigned long,std::less< unsigned long > >::iterator,std::set< unsigned long,std::less< unsigned long > >::iterator >"""
        return _pyBasePython.setUL_equal_range(self, x)


    def insert(self, __x: 'std::set< unsigned long,std::less< unsigned long > >::value_type const &') -> "std::pair< std::set< unsigned long,std::less< unsigned long > >::iterator,bool >":
        """insert(setUL self, std::set< unsigned long,std::less< unsigned long > >::value_type const & __x) -> std::pair< std::set< unsigned long,std::less< unsigned long > >::iterator,bool >"""
        return _pyBasePython.setUL_insert(self, __x)

    __swig_destroy__ = _pyBasePython.delete_setUL
setUL.iterator = new_instancemethod(_pyBasePython.setUL_iterator, None, setUL)
setUL.__nonzero__ = new_instancemethod(_pyBasePython.setUL___nonzero__, None, setUL)
setUL.__bool__ = new_instancemethod(_pyBasePython.setUL___bool__, None, setUL)
setUL.__len__ = new_instancemethod(_pyBasePython.setUL___len__, None, setUL)
setUL.append = new_instancemethod(_pyBasePython.setUL_append, None, setUL)
setUL.__contains__ = new_instancemethod(_pyBasePython.setUL___contains__, None, setUL)
setUL.__getitem__ = new_instancemethod(_pyBasePython.setUL___getitem__, None, setUL)
setUL.add = new_instancemethod(_pyBasePython.setUL_add, None, setUL)
setUL.discard = new_instancemethod(_pyBasePython.setUL_discard, None, setUL)
setUL.empty = new_instancemethod(_pyBasePython.setUL_empty, None, setUL)
setUL.size = new_instancemethod(_pyBasePython.setUL_size, None, setUL)
setUL.clear = new_instancemethod(_pyBasePython.setUL_clear, None, setUL)
setUL.swap = new_instancemethod(_pyBasePython.setUL_swap, None, setUL)
setUL.count = new_instancemethod(_pyBasePython.setUL_count, None, setUL)
setUL.begin = new_instancemethod(_pyBasePython.setUL_begin, None, setUL)
setUL.end = new_instancemethod(_pyBasePython.setUL_end, None, setUL)
setUL.rbegin = new_instancemethod(_pyBasePython.setUL_rbegin, None, setUL)
setUL.rend = new_instancemethod(_pyBasePython.setUL_rend, None, setUL)
setUL.erase = new_instancemethod(_pyBasePython.setUL_erase, None, setUL)
setUL.find = new_instancemethod(_pyBasePython.setUL_find, None, setUL)
setUL.lower_bound = new_instancemethod(_pyBasePython.setUL_lower_bound, None, setUL)
setUL.upper_bound = new_instancemethod(_pyBasePython.setUL_upper_bound, None, setUL)
setUL.equal_range = new_instancemethod(_pyBasePython.setUL_equal_range, None, setUL)
setUL.insert = new_instancemethod(_pyBasePython.setUL_insert, None, setUL)
setUL_swigregister = _pyBasePython.setUL_swigregister
setUL_swigregister(setUL)

class setULL(object):
    """Proxy of C++ std::set<(unsigned long long,std::less<(unsigned long long)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(setULL self) -> SwigPyIterator"""
        return _pyBasePython.setULL_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(setULL self) -> bool"""
        return _pyBasePython.setULL___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(setULL self) -> bool"""
        return _pyBasePython.setULL___bool__(self)


    def __len__(self) -> "std::set< unsigned long long,std::less< unsigned long long > >::size_type":
        """__len__(setULL self) -> std::set< unsigned long long,std::less< unsigned long long > >::size_type"""
        return _pyBasePython.setULL___len__(self)


    def append(self, x: 'std::set< unsigned long long,std::less< unsigned long long > >::value_type') -> "void":
        """append(setULL self, std::set< unsigned long long,std::less< unsigned long long > >::value_type x)"""
        return _pyBasePython.setULL_append(self, x)


    def __contains__(self, x: 'std::set< unsigned long long,std::less< unsigned long long > >::value_type') -> "bool":
        """__contains__(setULL self, std::set< unsigned long long,std::less< unsigned long long > >::value_type x) -> bool"""
        return _pyBasePython.setULL___contains__(self, x)


    def __getitem__(self, i: 'std::set< unsigned long long,std::less< unsigned long long > >::difference_type') -> "std::set< unsigned long long,std::less< unsigned long long > >::value_type":
        """__getitem__(setULL self, std::set< unsigned long long,std::less< unsigned long long > >::difference_type i) -> std::set< unsigned long long,std::less< unsigned long long > >::value_type"""
        return _pyBasePython.setULL___getitem__(self, i)


    def add(self, x: 'std::set< unsigned long long,std::less< unsigned long long > >::value_type') -> "void":
        """add(setULL self, std::set< unsigned long long,std::less< unsigned long long > >::value_type x)"""
        return _pyBasePython.setULL_add(self, x)


    def discard(self, x: 'std::set< unsigned long long,std::less< unsigned long long > >::value_type') -> "void":
        """discard(setULL self, std::set< unsigned long long,std::less< unsigned long long > >::value_type x)"""
        return _pyBasePython.setULL_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(unsigned long long,std::less<(unsigned long long)>)> self, std::less< unsigned long long > const & arg2) -> setULL
        __init__(std::set<(unsigned long long,std::less<(unsigned long long)>)> self) -> setULL
        __init__(std::set<(unsigned long long,std::less<(unsigned long long)>)> self, setULL arg2) -> setULL
        """
        _pyBasePython.setULL_swiginit(self, _pyBasePython.new_setULL(*args))

    def empty(self) -> "bool":
        """empty(setULL self) -> bool"""
        return _pyBasePython.setULL_empty(self)


    def size(self) -> "std::set< unsigned long long,std::less< unsigned long long > >::size_type":
        """size(setULL self) -> std::set< unsigned long long,std::less< unsigned long long > >::size_type"""
        return _pyBasePython.setULL_size(self)


    def clear(self) -> "void":
        """clear(setULL self)"""
        return _pyBasePython.setULL_clear(self)


    def swap(self, v: 'setULL') -> "void":
        """swap(setULL self, setULL v)"""
        return _pyBasePython.setULL_swap(self, v)


    def count(self, x: 'std::set< unsigned long long,std::less< unsigned long long > >::key_type const &') -> "std::set< unsigned long long,std::less< unsigned long long > >::size_type":
        """count(setULL self, std::set< unsigned long long,std::less< unsigned long long > >::key_type const & x) -> std::set< unsigned long long,std::less< unsigned long long > >::size_type"""
        return _pyBasePython.setULL_count(self, x)


    def begin(self) -> "std::set< unsigned long long,std::less< unsigned long long > >::iterator":
        """begin(setULL self) -> std::set< unsigned long long,std::less< unsigned long long > >::iterator"""
        return _pyBasePython.setULL_begin(self)


    def end(self) -> "std::set< unsigned long long,std::less< unsigned long long > >::iterator":
        """end(setULL self) -> std::set< unsigned long long,std::less< unsigned long long > >::iterator"""
        return _pyBasePython.setULL_end(self)


    def rbegin(self) -> "std::set< unsigned long long,std::less< unsigned long long > >::reverse_iterator":
        """rbegin(setULL self) -> std::set< unsigned long long,std::less< unsigned long long > >::reverse_iterator"""
        return _pyBasePython.setULL_rbegin(self)


    def rend(self) -> "std::set< unsigned long long,std::less< unsigned long long > >::reverse_iterator":
        """rend(setULL self) -> std::set< unsigned long long,std::less< unsigned long long > >::reverse_iterator"""
        return _pyBasePython.setULL_rend(self)


    def erase(self, *args) -> "void":
        """
        erase(setULL self, std::set< unsigned long long,std::less< unsigned long long > >::key_type const & x) -> std::set< unsigned long long,std::less< unsigned long long > >::size_type
        erase(setULL self, std::set< unsigned long long,std::less< unsigned long long > >::iterator pos)
        erase(setULL self, std::set< unsigned long long,std::less< unsigned long long > >::iterator first, std::set< unsigned long long,std::less< unsigned long long > >::iterator last)
        """
        return _pyBasePython.setULL_erase(self, *args)


    def find(self, x: 'std::set< unsigned long long,std::less< unsigned long long > >::key_type const &') -> "std::set< unsigned long long,std::less< unsigned long long > >::iterator":
        """find(setULL self, std::set< unsigned long long,std::less< unsigned long long > >::key_type const & x) -> std::set< unsigned long long,std::less< unsigned long long > >::iterator"""
        return _pyBasePython.setULL_find(self, x)


    def lower_bound(self, x: 'std::set< unsigned long long,std::less< unsigned long long > >::key_type const &') -> "std::set< unsigned long long,std::less< unsigned long long > >::iterator":
        """lower_bound(setULL self, std::set< unsigned long long,std::less< unsigned long long > >::key_type const & x) -> std::set< unsigned long long,std::less< unsigned long long > >::iterator"""
        return _pyBasePython.setULL_lower_bound(self, x)


    def upper_bound(self, x: 'std::set< unsigned long long,std::less< unsigned long long > >::key_type const &') -> "std::set< unsigned long long,std::less< unsigned long long > >::iterator":
        """upper_bound(setULL self, std::set< unsigned long long,std::less< unsigned long long > >::key_type const & x) -> std::set< unsigned long long,std::less< unsigned long long > >::iterator"""
        return _pyBasePython.setULL_upper_bound(self, x)


    def equal_range(self, x: 'std::set< unsigned long long,std::less< unsigned long long > >::key_type const &') -> "std::pair< std::set< unsigned long long,std::less< unsigned long long > >::iterator,std::set< unsigned long long,std::less< unsigned long long > >::iterator >":
        """equal_range(setULL self, std::set< unsigned long long,std::less< unsigned long long > >::key_type const & x) -> std::pair< std::set< unsigned long long,std::less< unsigned long long > >::iterator,std::set< unsigned long long,std::less< unsigned long long > >::iterator >"""
        return _pyBasePython.setULL_equal_range(self, x)


    def insert(self, __x: 'std::set< unsigned long long,std::less< unsigned long long > >::value_type const &') -> "std::pair< std::set< unsigned long long,std::less< unsigned long long > >::iterator,bool >":
        """insert(setULL self, std::set< unsigned long long,std::less< unsigned long long > >::value_type const & __x) -> std::pair< std::set< unsigned long long,std::less< unsigned long long > >::iterator,bool >"""
        return _pyBasePython.setULL_insert(self, __x)

    __swig_destroy__ = _pyBasePython.delete_setULL
setULL.iterator = new_instancemethod(_pyBasePython.setULL_iterator, None, setULL)
setULL.__nonzero__ = new_instancemethod(_pyBasePython.setULL___nonzero__, None, setULL)
setULL.__bool__ = new_instancemethod(_pyBasePython.setULL___bool__, None, setULL)
setULL.__len__ = new_instancemethod(_pyBasePython.setULL___len__, None, setULL)
setULL.append = new_instancemethod(_pyBasePython.setULL_append, None, setULL)
setULL.__contains__ = new_instancemethod(_pyBasePython.setULL___contains__, None, setULL)
setULL.__getitem__ = new_instancemethod(_pyBasePython.setULL___getitem__, None, setULL)
setULL.add = new_instancemethod(_pyBasePython.setULL_add, None, setULL)
setULL.discard = new_instancemethod(_pyBasePython.setULL_discard, None, setULL)
setULL.empty = new_instancemethod(_pyBasePython.setULL_empty, None, setULL)
setULL.size = new_instancemethod(_pyBasePython.setULL_size, None, setULL)
setULL.clear = new_instancemethod(_pyBasePython.setULL_clear, None, setULL)
setULL.swap = new_instancemethod(_pyBasePython.setULL_swap, None, setULL)
setULL.count = new_instancemethod(_pyBasePython.setULL_count, None, setULL)
setULL.begin = new_instancemethod(_pyBasePython.setULL_begin, None, setULL)
setULL.end = new_instancemethod(_pyBasePython.setULL_end, None, setULL)
setULL.rbegin = new_instancemethod(_pyBasePython.setULL_rbegin, None, setULL)
setULL.rend = new_instancemethod(_pyBasePython.setULL_rend, None, setULL)
setULL.erase = new_instancemethod(_pyBasePython.setULL_erase, None, setULL)
setULL.find = new_instancemethod(_pyBasePython.setULL_find, None, setULL)
setULL.lower_bound = new_instancemethod(_pyBasePython.setULL_lower_bound, None, setULL)
setULL.upper_bound = new_instancemethod(_pyBasePython.setULL_upper_bound, None, setULL)
setULL.equal_range = new_instancemethod(_pyBasePython.setULL_equal_range, None, setULL)
setULL.insert = new_instancemethod(_pyBasePython.setULL_insert, None, setULL)
setULL_swigregister = _pyBasePython.setULL_swigregister
setULL_swigregister(setULL)

class setSC(object):
    """Proxy of C++ std::set<(signed char,std::less<(signed char)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(setSC self) -> SwigPyIterator"""
        return _pyBasePython.setSC_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(setSC self) -> bool"""
        return _pyBasePython.setSC___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(setSC self) -> bool"""
        return _pyBasePython.setSC___bool__(self)


    def __len__(self) -> "std::set< signed char,std::less< signed char > >::size_type":
        """__len__(setSC self) -> std::set< signed char,std::less< signed char > >::size_type"""
        return _pyBasePython.setSC___len__(self)


    def append(self, x: 'std::set< signed char,std::less< signed char > >::value_type') -> "void":
        """append(setSC self, std::set< signed char,std::less< signed char > >::value_type x)"""
        return _pyBasePython.setSC_append(self, x)


    def __contains__(self, x: 'std::set< signed char,std::less< signed char > >::value_type') -> "bool":
        """__contains__(setSC self, std::set< signed char,std::less< signed char > >::value_type x) -> bool"""
        return _pyBasePython.setSC___contains__(self, x)


    def __getitem__(self, i: 'std::set< signed char,std::less< signed char > >::difference_type') -> "std::set< signed char,std::less< signed char > >::value_type":
        """__getitem__(setSC self, std::set< signed char,std::less< signed char > >::difference_type i) -> std::set< signed char,std::less< signed char > >::value_type"""
        return _pyBasePython.setSC___getitem__(self, i)


    def add(self, x: 'std::set< signed char,std::less< signed char > >::value_type') -> "void":
        """add(setSC self, std::set< signed char,std::less< signed char > >::value_type x)"""
        return _pyBasePython.setSC_add(self, x)


    def discard(self, x: 'std::set< signed char,std::less< signed char > >::value_type') -> "void":
        """discard(setSC self, std::set< signed char,std::less< signed char > >::value_type x)"""
        return _pyBasePython.setSC_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(signed char,std::less<(signed char)>)> self, std::less< signed char > const & arg2) -> setSC
        __init__(std::set<(signed char,std::less<(signed char)>)> self) -> setSC
        __init__(std::set<(signed char,std::less<(signed char)>)> self, setSC arg2) -> setSC
        """
        _pyBasePython.setSC_swiginit(self, _pyBasePython.new_setSC(*args))

    def empty(self) -> "bool":
        """empty(setSC self) -> bool"""
        return _pyBasePython.setSC_empty(self)


    def size(self) -> "std::set< signed char,std::less< signed char > >::size_type":
        """size(setSC self) -> std::set< signed char,std::less< signed char > >::size_type"""
        return _pyBasePython.setSC_size(self)


    def clear(self) -> "void":
        """clear(setSC self)"""
        return _pyBasePython.setSC_clear(self)


    def swap(self, v: 'setSC') -> "void":
        """swap(setSC self, setSC v)"""
        return _pyBasePython.setSC_swap(self, v)


    def count(self, x: 'std::set< signed char,std::less< signed char > >::key_type const &') -> "std::set< signed char,std::less< signed char > >::size_type":
        """count(setSC self, std::set< signed char,std::less< signed char > >::key_type const & x) -> std::set< signed char,std::less< signed char > >::size_type"""
        return _pyBasePython.setSC_count(self, x)


    def begin(self) -> "std::set< signed char,std::less< signed char > >::iterator":
        """begin(setSC self) -> std::set< signed char,std::less< signed char > >::iterator"""
        return _pyBasePython.setSC_begin(self)


    def end(self) -> "std::set< signed char,std::less< signed char > >::iterator":
        """end(setSC self) -> std::set< signed char,std::less< signed char > >::iterator"""
        return _pyBasePython.setSC_end(self)


    def rbegin(self) -> "std::set< signed char,std::less< signed char > >::reverse_iterator":
        """rbegin(setSC self) -> std::set< signed char,std::less< signed char > >::reverse_iterator"""
        return _pyBasePython.setSC_rbegin(self)


    def rend(self) -> "std::set< signed char,std::less< signed char > >::reverse_iterator":
        """rend(setSC self) -> std::set< signed char,std::less< signed char > >::reverse_iterator"""
        return _pyBasePython.setSC_rend(self)


    def erase(self, *args) -> "void":
        """
        erase(setSC self, std::set< signed char,std::less< signed char > >::key_type const & x) -> std::set< signed char,std::less< signed char > >::size_type
        erase(setSC self, std::set< signed char,std::less< signed char > >::iterator pos)
        erase(setSC self, std::set< signed char,std::less< signed char > >::iterator first, std::set< signed char,std::less< signed char > >::iterator last)
        """
        return _pyBasePython.setSC_erase(self, *args)


    def find(self, x: 'std::set< signed char,std::less< signed char > >::key_type const &') -> "std::set< signed char,std::less< signed char > >::iterator":
        """find(setSC self, std::set< signed char,std::less< signed char > >::key_type const & x) -> std::set< signed char,std::less< signed char > >::iterator"""
        return _pyBasePython.setSC_find(self, x)


    def lower_bound(self, x: 'std::set< signed char,std::less< signed char > >::key_type const &') -> "std::set< signed char,std::less< signed char > >::iterator":
        """lower_bound(setSC self, std::set< signed char,std::less< signed char > >::key_type const & x) -> std::set< signed char,std::less< signed char > >::iterator"""
        return _pyBasePython.setSC_lower_bound(self, x)


    def upper_bound(self, x: 'std::set< signed char,std::less< signed char > >::key_type const &') -> "std::set< signed char,std::less< signed char > >::iterator":
        """upper_bound(setSC self, std::set< signed char,std::less< signed char > >::key_type const & x) -> std::set< signed char,std::less< signed char > >::iterator"""
        return _pyBasePython.setSC_upper_bound(self, x)


    def equal_range(self, x: 'std::set< signed char,std::less< signed char > >::key_type const &') -> "std::pair< std::set< signed char,std::less< signed char > >::iterator,std::set< signed char,std::less< signed char > >::iterator >":
        """equal_range(setSC self, std::set< signed char,std::less< signed char > >::key_type const & x) -> std::pair< std::set< signed char,std::less< signed char > >::iterator,std::set< signed char,std::less< signed char > >::iterator >"""
        return _pyBasePython.setSC_equal_range(self, x)


    def insert(self, __x: 'std::set< signed char,std::less< signed char > >::value_type const &') -> "std::pair< std::set< signed char,std::less< signed char > >::iterator,bool >":
        """insert(setSC self, std::set< signed char,std::less< signed char > >::value_type const & __x) -> std::pair< std::set< signed char,std::less< signed char > >::iterator,bool >"""
        return _pyBasePython.setSC_insert(self, __x)

    __swig_destroy__ = _pyBasePython.delete_setSC
setSC.iterator = new_instancemethod(_pyBasePython.setSC_iterator, None, setSC)
setSC.__nonzero__ = new_instancemethod(_pyBasePython.setSC___nonzero__, None, setSC)
setSC.__bool__ = new_instancemethod(_pyBasePython.setSC___bool__, None, setSC)
setSC.__len__ = new_instancemethod(_pyBasePython.setSC___len__, None, setSC)
setSC.append = new_instancemethod(_pyBasePython.setSC_append, None, setSC)
setSC.__contains__ = new_instancemethod(_pyBasePython.setSC___contains__, None, setSC)
setSC.__getitem__ = new_instancemethod(_pyBasePython.setSC___getitem__, None, setSC)
setSC.add = new_instancemethod(_pyBasePython.setSC_add, None, setSC)
setSC.discard = new_instancemethod(_pyBasePython.setSC_discard, None, setSC)
setSC.empty = new_instancemethod(_pyBasePython.setSC_empty, None, setSC)
setSC.size = new_instancemethod(_pyBasePython.setSC_size, None, setSC)
setSC.clear = new_instancemethod(_pyBasePython.setSC_clear, None, setSC)
setSC.swap = new_instancemethod(_pyBasePython.setSC_swap, None, setSC)
setSC.count = new_instancemethod(_pyBasePython.setSC_count, None, setSC)
setSC.begin = new_instancemethod(_pyBasePython.setSC_begin, None, setSC)
setSC.end = new_instancemethod(_pyBasePython.setSC_end, None, setSC)
setSC.rbegin = new_instancemethod(_pyBasePython.setSC_rbegin, None, setSC)
setSC.rend = new_instancemethod(_pyBasePython.setSC_rend, None, setSC)
setSC.erase = new_instancemethod(_pyBasePython.setSC_erase, None, setSC)
setSC.find = new_instancemethod(_pyBasePython.setSC_find, None, setSC)
setSC.lower_bound = new_instancemethod(_pyBasePython.setSC_lower_bound, None, setSC)
setSC.upper_bound = new_instancemethod(_pyBasePython.setSC_upper_bound, None, setSC)
setSC.equal_range = new_instancemethod(_pyBasePython.setSC_equal_range, None, setSC)
setSC.insert = new_instancemethod(_pyBasePython.setSC_insert, None, setSC)
setSC_swigregister = _pyBasePython.setSC_swigregister
setSC_swigregister(setSC)

class setSS(object):
    """Proxy of C++ std::set<(short,std::less<(short)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(setSS self) -> SwigPyIterator"""
        return _pyBasePython.setSS_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(setSS self) -> bool"""
        return _pyBasePython.setSS___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(setSS self) -> bool"""
        return _pyBasePython.setSS___bool__(self)


    def __len__(self) -> "std::set< short,std::less< short > >::size_type":
        """__len__(setSS self) -> std::set< short,std::less< short > >::size_type"""
        return _pyBasePython.setSS___len__(self)


    def append(self, x: 'std::set< short,std::less< short > >::value_type') -> "void":
        """append(setSS self, std::set< short,std::less< short > >::value_type x)"""
        return _pyBasePython.setSS_append(self, x)


    def __contains__(self, x: 'std::set< short,std::less< short > >::value_type') -> "bool":
        """__contains__(setSS self, std::set< short,std::less< short > >::value_type x) -> bool"""
        return _pyBasePython.setSS___contains__(self, x)


    def __getitem__(self, i: 'std::set< short,std::less< short > >::difference_type') -> "std::set< short,std::less< short > >::value_type":
        """__getitem__(setSS self, std::set< short,std::less< short > >::difference_type i) -> std::set< short,std::less< short > >::value_type"""
        return _pyBasePython.setSS___getitem__(self, i)


    def add(self, x: 'std::set< short,std::less< short > >::value_type') -> "void":
        """add(setSS self, std::set< short,std::less< short > >::value_type x)"""
        return _pyBasePython.setSS_add(self, x)


    def discard(self, x: 'std::set< short,std::less< short > >::value_type') -> "void":
        """discard(setSS self, std::set< short,std::less< short > >::value_type x)"""
        return _pyBasePython.setSS_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(short,std::less<(short)>)> self, std::less< short > const & arg2) -> setSS
        __init__(std::set<(short,std::less<(short)>)> self) -> setSS
        __init__(std::set<(short,std::less<(short)>)> self, setSS arg2) -> setSS
        """
        _pyBasePython.setSS_swiginit(self, _pyBasePython.new_setSS(*args))

    def empty(self) -> "bool":
        """empty(setSS self) -> bool"""
        return _pyBasePython.setSS_empty(self)


    def size(self) -> "std::set< short,std::less< short > >::size_type":
        """size(setSS self) -> std::set< short,std::less< short > >::size_type"""
        return _pyBasePython.setSS_size(self)


    def clear(self) -> "void":
        """clear(setSS self)"""
        return _pyBasePython.setSS_clear(self)


    def swap(self, v: 'setSS') -> "void":
        """swap(setSS self, setSS v)"""
        return _pyBasePython.setSS_swap(self, v)


    def count(self, x: 'std::set< short,std::less< short > >::key_type const &') -> "std::set< short,std::less< short > >::size_type":
        """count(setSS self, std::set< short,std::less< short > >::key_type const & x) -> std::set< short,std::less< short > >::size_type"""
        return _pyBasePython.setSS_count(self, x)


    def begin(self) -> "std::set< short,std::less< short > >::iterator":
        """begin(setSS self) -> std::set< short,std::less< short > >::iterator"""
        return _pyBasePython.setSS_begin(self)


    def end(self) -> "std::set< short,std::less< short > >::iterator":
        """end(setSS self) -> std::set< short,std::less< short > >::iterator"""
        return _pyBasePython.setSS_end(self)


    def rbegin(self) -> "std::set< short,std::less< short > >::reverse_iterator":
        """rbegin(setSS self) -> std::set< short,std::less< short > >::reverse_iterator"""
        return _pyBasePython.setSS_rbegin(self)


    def rend(self) -> "std::set< short,std::less< short > >::reverse_iterator":
        """rend(setSS self) -> std::set< short,std::less< short > >::reverse_iterator"""
        return _pyBasePython.setSS_rend(self)


    def erase(self, *args) -> "void":
        """
        erase(setSS self, std::set< short,std::less< short > >::key_type const & x) -> std::set< short,std::less< short > >::size_type
        erase(setSS self, std::set< short,std::less< short > >::iterator pos)
        erase(setSS self, std::set< short,std::less< short > >::iterator first, std::set< short,std::less< short > >::iterator last)
        """
        return _pyBasePython.setSS_erase(self, *args)


    def find(self, x: 'std::set< short,std::less< short > >::key_type const &') -> "std::set< short,std::less< short > >::iterator":
        """find(setSS self, std::set< short,std::less< short > >::key_type const & x) -> std::set< short,std::less< short > >::iterator"""
        return _pyBasePython.setSS_find(self, x)


    def lower_bound(self, x: 'std::set< short,std::less< short > >::key_type const &') -> "std::set< short,std::less< short > >::iterator":
        """lower_bound(setSS self, std::set< short,std::less< short > >::key_type const & x) -> std::set< short,std::less< short > >::iterator"""
        return _pyBasePython.setSS_lower_bound(self, x)


    def upper_bound(self, x: 'std::set< short,std::less< short > >::key_type const &') -> "std::set< short,std::less< short > >::iterator":
        """upper_bound(setSS self, std::set< short,std::less< short > >::key_type const & x) -> std::set< short,std::less< short > >::iterator"""
        return _pyBasePython.setSS_upper_bound(self, x)


    def equal_range(self, x: 'std::set< short,std::less< short > >::key_type const &') -> "std::pair< std::set< short,std::less< short > >::iterator,std::set< short,std::less< short > >::iterator >":
        """equal_range(setSS self, std::set< short,std::less< short > >::key_type const & x) -> std::pair< std::set< short,std::less< short > >::iterator,std::set< short,std::less< short > >::iterator >"""
        return _pyBasePython.setSS_equal_range(self, x)


    def insert(self, __x: 'std::set< short,std::less< short > >::value_type const &') -> "std::pair< std::set< short,std::less< short > >::iterator,bool >":
        """insert(setSS self, std::set< short,std::less< short > >::value_type const & __x) -> std::pair< std::set< short,std::less< short > >::iterator,bool >"""
        return _pyBasePython.setSS_insert(self, __x)

    __swig_destroy__ = _pyBasePython.delete_setSS
setSS.iterator = new_instancemethod(_pyBasePython.setSS_iterator, None, setSS)
setSS.__nonzero__ = new_instancemethod(_pyBasePython.setSS___nonzero__, None, setSS)
setSS.__bool__ = new_instancemethod(_pyBasePython.setSS___bool__, None, setSS)
setSS.__len__ = new_instancemethod(_pyBasePython.setSS___len__, None, setSS)
setSS.append = new_instancemethod(_pyBasePython.setSS_append, None, setSS)
setSS.__contains__ = new_instancemethod(_pyBasePython.setSS___contains__, None, setSS)
setSS.__getitem__ = new_instancemethod(_pyBasePython.setSS___getitem__, None, setSS)
setSS.add = new_instancemethod(_pyBasePython.setSS_add, None, setSS)
setSS.discard = new_instancemethod(_pyBasePython.setSS_discard, None, setSS)
setSS.empty = new_instancemethod(_pyBasePython.setSS_empty, None, setSS)
setSS.size = new_instancemethod(_pyBasePython.setSS_size, None, setSS)
setSS.clear = new_instancemethod(_pyBasePython.setSS_clear, None, setSS)
setSS.swap = new_instancemethod(_pyBasePython.setSS_swap, None, setSS)
setSS.count = new_instancemethod(_pyBasePython.setSS_count, None, setSS)
setSS.begin = new_instancemethod(_pyBasePython.setSS_begin, None, setSS)
setSS.end = new_instancemethod(_pyBasePython.setSS_end, None, setSS)
setSS.rbegin = new_instancemethod(_pyBasePython.setSS_rbegin, None, setSS)
setSS.rend = new_instancemethod(_pyBasePython.setSS_rend, None, setSS)
setSS.erase = new_instancemethod(_pyBasePython.setSS_erase, None, setSS)
setSS.find = new_instancemethod(_pyBasePython.setSS_find, None, setSS)
setSS.lower_bound = new_instancemethod(_pyBasePython.setSS_lower_bound, None, setSS)
setSS.upper_bound = new_instancemethod(_pyBasePython.setSS_upper_bound, None, setSS)
setSS.equal_range = new_instancemethod(_pyBasePython.setSS_equal_range, None, setSS)
setSS.insert = new_instancemethod(_pyBasePython.setSS_insert, None, setSS)
setSS_swigregister = _pyBasePython.setSS_swigregister
setSS_swigregister(setSS)

class setSL(object):
    """Proxy of C++ std::set<(long,std::less<(long)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(setSL self) -> SwigPyIterator"""
        return _pyBasePython.setSL_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(setSL self) -> bool"""
        return _pyBasePython.setSL___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(setSL self) -> bool"""
        return _pyBasePython.setSL___bool__(self)


    def __len__(self) -> "std::set< long,std::less< long > >::size_type":
        """__len__(setSL self) -> std::set< long,std::less< long > >::size_type"""
        return _pyBasePython.setSL___len__(self)


    def append(self, x: 'std::set< long,std::less< long > >::value_type') -> "void":
        """append(setSL self, std::set< long,std::less< long > >::value_type x)"""
        return _pyBasePython.setSL_append(self, x)


    def __contains__(self, x: 'std::set< long,std::less< long > >::value_type') -> "bool":
        """__contains__(setSL self, std::set< long,std::less< long > >::value_type x) -> bool"""
        return _pyBasePython.setSL___contains__(self, x)


    def __getitem__(self, i: 'std::set< long,std::less< long > >::difference_type') -> "std::set< long,std::less< long > >::value_type":
        """__getitem__(setSL self, std::set< long,std::less< long > >::difference_type i) -> std::set< long,std::less< long > >::value_type"""
        return _pyBasePython.setSL___getitem__(self, i)


    def add(self, x: 'std::set< long,std::less< long > >::value_type') -> "void":
        """add(setSL self, std::set< long,std::less< long > >::value_type x)"""
        return _pyBasePython.setSL_add(self, x)


    def discard(self, x: 'std::set< long,std::less< long > >::value_type') -> "void":
        """discard(setSL self, std::set< long,std::less< long > >::value_type x)"""
        return _pyBasePython.setSL_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(long,std::less<(long)>)> self, std::less< long > const & arg2) -> setSL
        __init__(std::set<(long,std::less<(long)>)> self) -> setSL
        __init__(std::set<(long,std::less<(long)>)> self, setSL arg2) -> setSL
        """
        _pyBasePython.setSL_swiginit(self, _pyBasePython.new_setSL(*args))

    def empty(self) -> "bool":
        """empty(setSL self) -> bool"""
        return _pyBasePython.setSL_empty(self)


    def size(self) -> "std::set< long,std::less< long > >::size_type":
        """size(setSL self) -> std::set< long,std::less< long > >::size_type"""
        return _pyBasePython.setSL_size(self)


    def clear(self) -> "void":
        """clear(setSL self)"""
        return _pyBasePython.setSL_clear(self)


    def swap(self, v: 'setSL') -> "void":
        """swap(setSL self, setSL v)"""
        return _pyBasePython.setSL_swap(self, v)


    def count(self, x: 'std::set< long,std::less< long > >::key_type const &') -> "std::set< long,std::less< long > >::size_type":
        """count(setSL self, std::set< long,std::less< long > >::key_type const & x) -> std::set< long,std::less< long > >::size_type"""
        return _pyBasePython.setSL_count(self, x)


    def begin(self) -> "std::set< long,std::less< long > >::iterator":
        """begin(setSL self) -> std::set< long,std::less< long > >::iterator"""
        return _pyBasePython.setSL_begin(self)


    def end(self) -> "std::set< long,std::less< long > >::iterator":
        """end(setSL self) -> std::set< long,std::less< long > >::iterator"""
        return _pyBasePython.setSL_end(self)


    def rbegin(self) -> "std::set< long,std::less< long > >::reverse_iterator":
        """rbegin(setSL self) -> std::set< long,std::less< long > >::reverse_iterator"""
        return _pyBasePython.setSL_rbegin(self)


    def rend(self) -> "std::set< long,std::less< long > >::reverse_iterator":
        """rend(setSL self) -> std::set< long,std::less< long > >::reverse_iterator"""
        return _pyBasePython.setSL_rend(self)


    def erase(self, *args) -> "void":
        """
        erase(setSL self, std::set< long,std::less< long > >::key_type const & x) -> std::set< long,std::less< long > >::size_type
        erase(setSL self, std::set< long,std::less< long > >::iterator pos)
        erase(setSL self, std::set< long,std::less< long > >::iterator first, std::set< long,std::less< long > >::iterator last)
        """
        return _pyBasePython.setSL_erase(self, *args)


    def find(self, x: 'std::set< long,std::less< long > >::key_type const &') -> "std::set< long,std::less< long > >::iterator":
        """find(setSL self, std::set< long,std::less< long > >::key_type const & x) -> std::set< long,std::less< long > >::iterator"""
        return _pyBasePython.setSL_find(self, x)


    def lower_bound(self, x: 'std::set< long,std::less< long > >::key_type const &') -> "std::set< long,std::less< long > >::iterator":
        """lower_bound(setSL self, std::set< long,std::less< long > >::key_type const & x) -> std::set< long,std::less< long > >::iterator"""
        return _pyBasePython.setSL_lower_bound(self, x)


    def upper_bound(self, x: 'std::set< long,std::less< long > >::key_type const &') -> "std::set< long,std::less< long > >::iterator":
        """upper_bound(setSL self, std::set< long,std::less< long > >::key_type const & x) -> std::set< long,std::less< long > >::iterator"""
        return _pyBasePython.setSL_upper_bound(self, x)


    def equal_range(self, x: 'std::set< long,std::less< long > >::key_type const &') -> "std::pair< std::set< long,std::less< long > >::iterator,std::set< long,std::less< long > >::iterator >":
        """equal_range(setSL self, std::set< long,std::less< long > >::key_type const & x) -> std::pair< std::set< long,std::less< long > >::iterator,std::set< long,std::less< long > >::iterator >"""
        return _pyBasePython.setSL_equal_range(self, x)


    def insert(self, __x: 'std::set< long,std::less< long > >::value_type const &') -> "std::pair< std::set< long,std::less< long > >::iterator,bool >":
        """insert(setSL self, std::set< long,std::less< long > >::value_type const & __x) -> std::pair< std::set< long,std::less< long > >::iterator,bool >"""
        return _pyBasePython.setSL_insert(self, __x)

    __swig_destroy__ = _pyBasePython.delete_setSL
setSL.iterator = new_instancemethod(_pyBasePython.setSL_iterator, None, setSL)
setSL.__nonzero__ = new_instancemethod(_pyBasePython.setSL___nonzero__, None, setSL)
setSL.__bool__ = new_instancemethod(_pyBasePython.setSL___bool__, None, setSL)
setSL.__len__ = new_instancemethod(_pyBasePython.setSL___len__, None, setSL)
setSL.append = new_instancemethod(_pyBasePython.setSL_append, None, setSL)
setSL.__contains__ = new_instancemethod(_pyBasePython.setSL___contains__, None, setSL)
setSL.__getitem__ = new_instancemethod(_pyBasePython.setSL___getitem__, None, setSL)
setSL.add = new_instancemethod(_pyBasePython.setSL_add, None, setSL)
setSL.discard = new_instancemethod(_pyBasePython.setSL_discard, None, setSL)
setSL.empty = new_instancemethod(_pyBasePython.setSL_empty, None, setSL)
setSL.size = new_instancemethod(_pyBasePython.setSL_size, None, setSL)
setSL.clear = new_instancemethod(_pyBasePython.setSL_clear, None, setSL)
setSL.swap = new_instancemethod(_pyBasePython.setSL_swap, None, setSL)
setSL.count = new_instancemethod(_pyBasePython.setSL_count, None, setSL)
setSL.begin = new_instancemethod(_pyBasePython.setSL_begin, None, setSL)
setSL.end = new_instancemethod(_pyBasePython.setSL_end, None, setSL)
setSL.rbegin = new_instancemethod(_pyBasePython.setSL_rbegin, None, setSL)
setSL.rend = new_instancemethod(_pyBasePython.setSL_rend, None, setSL)
setSL.erase = new_instancemethod(_pyBasePython.setSL_erase, None, setSL)
setSL.find = new_instancemethod(_pyBasePython.setSL_find, None, setSL)
setSL.lower_bound = new_instancemethod(_pyBasePython.setSL_lower_bound, None, setSL)
setSL.upper_bound = new_instancemethod(_pyBasePython.setSL_upper_bound, None, setSL)
setSL.equal_range = new_instancemethod(_pyBasePython.setSL_equal_range, None, setSL)
setSL.insert = new_instancemethod(_pyBasePython.setSL_insert, None, setSL)
setSL_swigregister = _pyBasePython.setSL_swigregister
setSL_swigregister(setSL)

class setSLL(object):
    """Proxy of C++ std::set<(long long,std::less<(long long)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(setSLL self) -> SwigPyIterator"""
        return _pyBasePython.setSLL_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(setSLL self) -> bool"""
        return _pyBasePython.setSLL___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(setSLL self) -> bool"""
        return _pyBasePython.setSLL___bool__(self)


    def __len__(self) -> "std::set< long long,std::less< long long > >::size_type":
        """__len__(setSLL self) -> std::set< long long,std::less< long long > >::size_type"""
        return _pyBasePython.setSLL___len__(self)


    def append(self, x: 'std::set< long long,std::less< long long > >::value_type') -> "void":
        """append(setSLL self, std::set< long long,std::less< long long > >::value_type x)"""
        return _pyBasePython.setSLL_append(self, x)


    def __contains__(self, x: 'std::set< long long,std::less< long long > >::value_type') -> "bool":
        """__contains__(setSLL self, std::set< long long,std::less< long long > >::value_type x) -> bool"""
        return _pyBasePython.setSLL___contains__(self, x)


    def __getitem__(self, i: 'std::set< long long,std::less< long long > >::difference_type') -> "std::set< long long,std::less< long long > >::value_type":
        """__getitem__(setSLL self, std::set< long long,std::less< long long > >::difference_type i) -> std::set< long long,std::less< long long > >::value_type"""
        return _pyBasePython.setSLL___getitem__(self, i)


    def add(self, x: 'std::set< long long,std::less< long long > >::value_type') -> "void":
        """add(setSLL self, std::set< long long,std::less< long long > >::value_type x)"""
        return _pyBasePython.setSLL_add(self, x)


    def discard(self, x: 'std::set< long long,std::less< long long > >::value_type') -> "void":
        """discard(setSLL self, std::set< long long,std::less< long long > >::value_type x)"""
        return _pyBasePython.setSLL_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(long long,std::less<(long long)>)> self, std::less< long long > const & arg2) -> setSLL
        __init__(std::set<(long long,std::less<(long long)>)> self) -> setSLL
        __init__(std::set<(long long,std::less<(long long)>)> self, setSLL arg2) -> setSLL
        """
        _pyBasePython.setSLL_swiginit(self, _pyBasePython.new_setSLL(*args))

    def empty(self) -> "bool":
        """empty(setSLL self) -> bool"""
        return _pyBasePython.setSLL_empty(self)


    def size(self) -> "std::set< long long,std::less< long long > >::size_type":
        """size(setSLL self) -> std::set< long long,std::less< long long > >::size_type"""
        return _pyBasePython.setSLL_size(self)


    def clear(self) -> "void":
        """clear(setSLL self)"""
        return _pyBasePython.setSLL_clear(self)


    def swap(self, v: 'setSLL') -> "void":
        """swap(setSLL self, setSLL v)"""
        return _pyBasePython.setSLL_swap(self, v)


    def count(self, x: 'std::set< long long,std::less< long long > >::key_type const &') -> "std::set< long long,std::less< long long > >::size_type":
        """count(setSLL self, std::set< long long,std::less< long long > >::key_type const & x) -> std::set< long long,std::less< long long > >::size_type"""
        return _pyBasePython.setSLL_count(self, x)


    def begin(self) -> "std::set< long long,std::less< long long > >::iterator":
        """begin(setSLL self) -> std::set< long long,std::less< long long > >::iterator"""
        return _pyBasePython.setSLL_begin(self)


    def end(self) -> "std::set< long long,std::less< long long > >::iterator":
        """end(setSLL self) -> std::set< long long,std::less< long long > >::iterator"""
        return _pyBasePython.setSLL_end(self)


    def rbegin(self) -> "std::set< long long,std::less< long long > >::reverse_iterator":
        """rbegin(setSLL self) -> std::set< long long,std::less< long long > >::reverse_iterator"""
        return _pyBasePython.setSLL_rbegin(self)


    def rend(self) -> "std::set< long long,std::less< long long > >::reverse_iterator":
        """rend(setSLL self) -> std::set< long long,std::less< long long > >::reverse_iterator"""
        return _pyBasePython.setSLL_rend(self)


    def erase(self, *args) -> "void":
        """
        erase(setSLL self, std::set< long long,std::less< long long > >::key_type const & x) -> std::set< long long,std::less< long long > >::size_type
        erase(setSLL self, std::set< long long,std::less< long long > >::iterator pos)
        erase(setSLL self, std::set< long long,std::less< long long > >::iterator first, std::set< long long,std::less< long long > >::iterator last)
        """
        return _pyBasePython.setSLL_erase(self, *args)


    def find(self, x: 'std::set< long long,std::less< long long > >::key_type const &') -> "std::set< long long,std::less< long long > >::iterator":
        """find(setSLL self, std::set< long long,std::less< long long > >::key_type const & x) -> std::set< long long,std::less< long long > >::iterator"""
        return _pyBasePython.setSLL_find(self, x)


    def lower_bound(self, x: 'std::set< long long,std::less< long long > >::key_type const &') -> "std::set< long long,std::less< long long > >::iterator":
        """lower_bound(setSLL self, std::set< long long,std::less< long long > >::key_type const & x) -> std::set< long long,std::less< long long > >::iterator"""
        return _pyBasePython.setSLL_lower_bound(self, x)


    def upper_bound(self, x: 'std::set< long long,std::less< long long > >::key_type const &') -> "std::set< long long,std::less< long long > >::iterator":
        """upper_bound(setSLL self, std::set< long long,std::less< long long > >::key_type const & x) -> std::set< long long,std::less< long long > >::iterator"""
        return _pyBasePython.setSLL_upper_bound(self, x)


    def equal_range(self, x: 'std::set< long long,std::less< long long > >::key_type const &') -> "std::pair< std::set< long long,std::less< long long > >::iterator,std::set< long long,std::less< long long > >::iterator >":
        """equal_range(setSLL self, std::set< long long,std::less< long long > >::key_type const & x) -> std::pair< std::set< long long,std::less< long long > >::iterator,std::set< long long,std::less< long long > >::iterator >"""
        return _pyBasePython.setSLL_equal_range(self, x)


    def insert(self, __x: 'std::set< long long,std::less< long long > >::value_type const &') -> "std::pair< std::set< long long,std::less< long long > >::iterator,bool >":
        """insert(setSLL self, std::set< long long,std::less< long long > >::value_type const & __x) -> std::pair< std::set< long long,std::less< long long > >::iterator,bool >"""
        return _pyBasePython.setSLL_insert(self, __x)

    __swig_destroy__ = _pyBasePython.delete_setSLL
setSLL.iterator = new_instancemethod(_pyBasePython.setSLL_iterator, None, setSLL)
setSLL.__nonzero__ = new_instancemethod(_pyBasePython.setSLL___nonzero__, None, setSLL)
setSLL.__bool__ = new_instancemethod(_pyBasePython.setSLL___bool__, None, setSLL)
setSLL.__len__ = new_instancemethod(_pyBasePython.setSLL___len__, None, setSLL)
setSLL.append = new_instancemethod(_pyBasePython.setSLL_append, None, setSLL)
setSLL.__contains__ = new_instancemethod(_pyBasePython.setSLL___contains__, None, setSLL)
setSLL.__getitem__ = new_instancemethod(_pyBasePython.setSLL___getitem__, None, setSLL)
setSLL.add = new_instancemethod(_pyBasePython.setSLL_add, None, setSLL)
setSLL.discard = new_instancemethod(_pyBasePython.setSLL_discard, None, setSLL)
setSLL.empty = new_instancemethod(_pyBasePython.setSLL_empty, None, setSLL)
setSLL.size = new_instancemethod(_pyBasePython.setSLL_size, None, setSLL)
setSLL.clear = new_instancemethod(_pyBasePython.setSLL_clear, None, setSLL)
setSLL.swap = new_instancemethod(_pyBasePython.setSLL_swap, None, setSLL)
setSLL.count = new_instancemethod(_pyBasePython.setSLL_count, None, setSLL)
setSLL.begin = new_instancemethod(_pyBasePython.setSLL_begin, None, setSLL)
setSLL.end = new_instancemethod(_pyBasePython.setSLL_end, None, setSLL)
setSLL.rbegin = new_instancemethod(_pyBasePython.setSLL_rbegin, None, setSLL)
setSLL.rend = new_instancemethod(_pyBasePython.setSLL_rend, None, setSLL)
setSLL.erase = new_instancemethod(_pyBasePython.setSLL_erase, None, setSLL)
setSLL.find = new_instancemethod(_pyBasePython.setSLL_find, None, setSLL)
setSLL.lower_bound = new_instancemethod(_pyBasePython.setSLL_lower_bound, None, setSLL)
setSLL.upper_bound = new_instancemethod(_pyBasePython.setSLL_upper_bound, None, setSLL)
setSLL.equal_range = new_instancemethod(_pyBasePython.setSLL_equal_range, None, setSLL)
setSLL.insert = new_instancemethod(_pyBasePython.setSLL_insert, None, setSLL)
setSLL_swigregister = _pyBasePython.setSLL_swigregister
setSLL_swigregister(setSLL)

class setF(object):
    """Proxy of C++ std::set<(float,std::less<(float)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(setF self) -> SwigPyIterator"""
        return _pyBasePython.setF_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(setF self) -> bool"""
        return _pyBasePython.setF___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(setF self) -> bool"""
        return _pyBasePython.setF___bool__(self)


    def __len__(self) -> "std::set< float,std::less< float > >::size_type":
        """__len__(setF self) -> std::set< float,std::less< float > >::size_type"""
        return _pyBasePython.setF___len__(self)


    def append(self, x: 'std::set< float,std::less< float > >::value_type') -> "void":
        """append(setF self, std::set< float,std::less< float > >::value_type x)"""
        return _pyBasePython.setF_append(self, x)


    def __contains__(self, x: 'std::set< float,std::less< float > >::value_type') -> "bool":
        """__contains__(setF self, std::set< float,std::less< float > >::value_type x) -> bool"""
        return _pyBasePython.setF___contains__(self, x)


    def __getitem__(self, i: 'std::set< float,std::less< float > >::difference_type') -> "std::set< float,std::less< float > >::value_type":
        """__getitem__(setF self, std::set< float,std::less< float > >::difference_type i) -> std::set< float,std::less< float > >::value_type"""
        return _pyBasePython.setF___getitem__(self, i)


    def add(self, x: 'std::set< float,std::less< float > >::value_type') -> "void":
        """add(setF self, std::set< float,std::less< float > >::value_type x)"""
        return _pyBasePython.setF_add(self, x)


    def discard(self, x: 'std::set< float,std::less< float > >::value_type') -> "void":
        """discard(setF self, std::set< float,std::less< float > >::value_type x)"""
        return _pyBasePython.setF_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(float,std::less<(float)>)> self, std::less< float > const & arg2) -> setF
        __init__(std::set<(float,std::less<(float)>)> self) -> setF
        __init__(std::set<(float,std::less<(float)>)> self, setF arg2) -> setF
        """
        _pyBasePython.setF_swiginit(self, _pyBasePython.new_setF(*args))

    def empty(self) -> "bool":
        """empty(setF self) -> bool"""
        return _pyBasePython.setF_empty(self)


    def size(self) -> "std::set< float,std::less< float > >::size_type":
        """size(setF self) -> std::set< float,std::less< float > >::size_type"""
        return _pyBasePython.setF_size(self)


    def clear(self) -> "void":
        """clear(setF self)"""
        return _pyBasePython.setF_clear(self)


    def swap(self, v: 'setF') -> "void":
        """swap(setF self, setF v)"""
        return _pyBasePython.setF_swap(self, v)


    def count(self, x: 'std::set< float,std::less< float > >::key_type const &') -> "std::set< float,std::less< float > >::size_type":
        """count(setF self, std::set< float,std::less< float > >::key_type const & x) -> std::set< float,std::less< float > >::size_type"""
        return _pyBasePython.setF_count(self, x)


    def begin(self) -> "std::set< float,std::less< float > >::iterator":
        """begin(setF self) -> std::set< float,std::less< float > >::iterator"""
        return _pyBasePython.setF_begin(self)


    def end(self) -> "std::set< float,std::less< float > >::iterator":
        """end(setF self) -> std::set< float,std::less< float > >::iterator"""
        return _pyBasePython.setF_end(self)


    def rbegin(self) -> "std::set< float,std::less< float > >::reverse_iterator":
        """rbegin(setF self) -> std::set< float,std::less< float > >::reverse_iterator"""
        return _pyBasePython.setF_rbegin(self)


    def rend(self) -> "std::set< float,std::less< float > >::reverse_iterator":
        """rend(setF self) -> std::set< float,std::less< float > >::reverse_iterator"""
        return _pyBasePython.setF_rend(self)


    def erase(self, *args) -> "void":
        """
        erase(setF self, std::set< float,std::less< float > >::key_type const & x) -> std::set< float,std::less< float > >::size_type
        erase(setF self, std::set< float,std::less< float > >::iterator pos)
        erase(setF self, std::set< float,std::less< float > >::iterator first, std::set< float,std::less< float > >::iterator last)
        """
        return _pyBasePython.setF_erase(self, *args)


    def find(self, x: 'std::set< float,std::less< float > >::key_type const &') -> "std::set< float,std::less< float > >::iterator":
        """find(setF self, std::set< float,std::less< float > >::key_type const & x) -> std::set< float,std::less< float > >::iterator"""
        return _pyBasePython.setF_find(self, x)


    def lower_bound(self, x: 'std::set< float,std::less< float > >::key_type const &') -> "std::set< float,std::less< float > >::iterator":
        """lower_bound(setF self, std::set< float,std::less< float > >::key_type const & x) -> std::set< float,std::less< float > >::iterator"""
        return _pyBasePython.setF_lower_bound(self, x)


    def upper_bound(self, x: 'std::set< float,std::less< float > >::key_type const &') -> "std::set< float,std::less< float > >::iterator":
        """upper_bound(setF self, std::set< float,std::less< float > >::key_type const & x) -> std::set< float,std::less< float > >::iterator"""
        return _pyBasePython.setF_upper_bound(self, x)


    def equal_range(self, x: 'std::set< float,std::less< float > >::key_type const &') -> "std::pair< std::set< float,std::less< float > >::iterator,std::set< float,std::less< float > >::iterator >":
        """equal_range(setF self, std::set< float,std::less< float > >::key_type const & x) -> std::pair< std::set< float,std::less< float > >::iterator,std::set< float,std::less< float > >::iterator >"""
        return _pyBasePython.setF_equal_range(self, x)


    def insert(self, __x: 'std::set< float,std::less< float > >::value_type const &') -> "std::pair< std::set< float,std::less< float > >::iterator,bool >":
        """insert(setF self, std::set< float,std::less< float > >::value_type const & __x) -> std::pair< std::set< float,std::less< float > >::iterator,bool >"""
        return _pyBasePython.setF_insert(self, __x)

    __swig_destroy__ = _pyBasePython.delete_setF
setF.iterator = new_instancemethod(_pyBasePython.setF_iterator, None, setF)
setF.__nonzero__ = new_instancemethod(_pyBasePython.setF___nonzero__, None, setF)
setF.__bool__ = new_instancemethod(_pyBasePython.setF___bool__, None, setF)
setF.__len__ = new_instancemethod(_pyBasePython.setF___len__, None, setF)
setF.append = new_instancemethod(_pyBasePython.setF_append, None, setF)
setF.__contains__ = new_instancemethod(_pyBasePython.setF___contains__, None, setF)
setF.__getitem__ = new_instancemethod(_pyBasePython.setF___getitem__, None, setF)
setF.add = new_instancemethod(_pyBasePython.setF_add, None, setF)
setF.discard = new_instancemethod(_pyBasePython.setF_discard, None, setF)
setF.empty = new_instancemethod(_pyBasePython.setF_empty, None, setF)
setF.size = new_instancemethod(_pyBasePython.setF_size, None, setF)
setF.clear = new_instancemethod(_pyBasePython.setF_clear, None, setF)
setF.swap = new_instancemethod(_pyBasePython.setF_swap, None, setF)
setF.count = new_instancemethod(_pyBasePython.setF_count, None, setF)
setF.begin = new_instancemethod(_pyBasePython.setF_begin, None, setF)
setF.end = new_instancemethod(_pyBasePython.setF_end, None, setF)
setF.rbegin = new_instancemethod(_pyBasePython.setF_rbegin, None, setF)
setF.rend = new_instancemethod(_pyBasePython.setF_rend, None, setF)
setF.erase = new_instancemethod(_pyBasePython.setF_erase, None, setF)
setF.find = new_instancemethod(_pyBasePython.setF_find, None, setF)
setF.lower_bound = new_instancemethod(_pyBasePython.setF_lower_bound, None, setF)
setF.upper_bound = new_instancemethod(_pyBasePython.setF_upper_bound, None, setF)
setF.equal_range = new_instancemethod(_pyBasePython.setF_equal_range, None, setF)
setF.insert = new_instancemethod(_pyBasePython.setF_insert, None, setF)
setF_swigregister = _pyBasePython.setF_swigregister
setF_swigregister(setF)

class setD(object):
    """Proxy of C++ std::set<(double,std::less<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(setD self) -> SwigPyIterator"""
        return _pyBasePython.setD_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(setD self) -> bool"""
        return _pyBasePython.setD___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(setD self) -> bool"""
        return _pyBasePython.setD___bool__(self)


    def __len__(self) -> "std::set< double,std::less< double > >::size_type":
        """__len__(setD self) -> std::set< double,std::less< double > >::size_type"""
        return _pyBasePython.setD___len__(self)


    def append(self, x: 'std::set< double,std::less< double > >::value_type') -> "void":
        """append(setD self, std::set< double,std::less< double > >::value_type x)"""
        return _pyBasePython.setD_append(self, x)


    def __contains__(self, x: 'std::set< double,std::less< double > >::value_type') -> "bool":
        """__contains__(setD self, std::set< double,std::less< double > >::value_type x) -> bool"""
        return _pyBasePython.setD___contains__(self, x)


    def __getitem__(self, i: 'std::set< double,std::less< double > >::difference_type') -> "std::set< double,std::less< double > >::value_type":
        """__getitem__(setD self, std::set< double,std::less< double > >::difference_type i) -> std::set< double,std::less< double > >::value_type"""
        return _pyBasePython.setD___getitem__(self, i)


    def add(self, x: 'std::set< double,std::less< double > >::value_type') -> "void":
        """add(setD self, std::set< double,std::less< double > >::value_type x)"""
        return _pyBasePython.setD_add(self, x)


    def discard(self, x: 'std::set< double,std::less< double > >::value_type') -> "void":
        """discard(setD self, std::set< double,std::less< double > >::value_type x)"""
        return _pyBasePython.setD_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(double,std::less<(double)>)> self, std::less< double > const & arg2) -> setD
        __init__(std::set<(double,std::less<(double)>)> self) -> setD
        __init__(std::set<(double,std::less<(double)>)> self, setD arg2) -> setD
        """
        _pyBasePython.setD_swiginit(self, _pyBasePython.new_setD(*args))

    def empty(self) -> "bool":
        """empty(setD self) -> bool"""
        return _pyBasePython.setD_empty(self)


    def size(self) -> "std::set< double,std::less< double > >::size_type":
        """size(setD self) -> std::set< double,std::less< double > >::size_type"""
        return _pyBasePython.setD_size(self)


    def clear(self) -> "void":
        """clear(setD self)"""
        return _pyBasePython.setD_clear(self)


    def swap(self, v: 'setD') -> "void":
        """swap(setD self, setD v)"""
        return _pyBasePython.setD_swap(self, v)


    def count(self, x: 'std::set< double,std::less< double > >::key_type const &') -> "std::set< double,std::less< double > >::size_type":
        """count(setD self, std::set< double,std::less< double > >::key_type const & x) -> std::set< double,std::less< double > >::size_type"""
        return _pyBasePython.setD_count(self, x)


    def begin(self) -> "std::set< double,std::less< double > >::iterator":
        """begin(setD self) -> std::set< double,std::less< double > >::iterator"""
        return _pyBasePython.setD_begin(self)


    def end(self) -> "std::set< double,std::less< double > >::iterator":
        """end(setD self) -> std::set< double,std::less< double > >::iterator"""
        return _pyBasePython.setD_end(self)


    def rbegin(self) -> "std::set< double,std::less< double > >::reverse_iterator":
        """rbegin(setD self) -> std::set< double,std::less< double > >::reverse_iterator"""
        return _pyBasePython.setD_rbegin(self)


    def rend(self) -> "std::set< double,std::less< double > >::reverse_iterator":
        """rend(setD self) -> std::set< double,std::less< double > >::reverse_iterator"""
        return _pyBasePython.setD_rend(self)


    def erase(self, *args) -> "void":
        """
        erase(setD self, std::set< double,std::less< double > >::key_type const & x) -> std::set< double,std::less< double > >::size_type
        erase(setD self, std::set< double,std::less< double > >::iterator pos)
        erase(setD self, std::set< double,std::less< double > >::iterator first, std::set< double,std::less< double > >::iterator last)
        """
        return _pyBasePython.setD_erase(self, *args)


    def find(self, x: 'std::set< double,std::less< double > >::key_type const &') -> "std::set< double,std::less< double > >::iterator":
        """find(setD self, std::set< double,std::less< double > >::key_type const & x) -> std::set< double,std::less< double > >::iterator"""
        return _pyBasePython.setD_find(self, x)


    def lower_bound(self, x: 'std::set< double,std::less< double > >::key_type const &') -> "std::set< double,std::less< double > >::iterator":
        """lower_bound(setD self, std::set< double,std::less< double > >::key_type const & x) -> std::set< double,std::less< double > >::iterator"""
        return _pyBasePython.setD_lower_bound(self, x)


    def upper_bound(self, x: 'std::set< double,std::less< double > >::key_type const &') -> "std::set< double,std::less< double > >::iterator":
        """upper_bound(setD self, std::set< double,std::less< double > >::key_type const & x) -> std::set< double,std::less< double > >::iterator"""
        return _pyBasePython.setD_upper_bound(self, x)


    def equal_range(self, x: 'std::set< double,std::less< double > >::key_type const &') -> "std::pair< std::set< double,std::less< double > >::iterator,std::set< double,std::less< double > >::iterator >":
        """equal_range(setD self, std::set< double,std::less< double > >::key_type const & x) -> std::pair< std::set< double,std::less< double > >::iterator,std::set< double,std::less< double > >::iterator >"""
        return _pyBasePython.setD_equal_range(self, x)


    def insert(self, __x: 'std::set< double,std::less< double > >::value_type const &') -> "std::pair< std::set< double,std::less< double > >::iterator,bool >":
        """insert(setD self, std::set< double,std::less< double > >::value_type const & __x) -> std::pair< std::set< double,std::less< double > >::iterator,bool >"""
        return _pyBasePython.setD_insert(self, __x)

    __swig_destroy__ = _pyBasePython.delete_setD
setD.iterator = new_instancemethod(_pyBasePython.setD_iterator, None, setD)
setD.__nonzero__ = new_instancemethod(_pyBasePython.setD___nonzero__, None, setD)
setD.__bool__ = new_instancemethod(_pyBasePython.setD___bool__, None, setD)
setD.__len__ = new_instancemethod(_pyBasePython.setD___len__, None, setD)
setD.append = new_instancemethod(_pyBasePython.setD_append, None, setD)
setD.__contains__ = new_instancemethod(_pyBasePython.setD___contains__, None, setD)
setD.__getitem__ = new_instancemethod(_pyBasePython.setD___getitem__, None, setD)
setD.add = new_instancemethod(_pyBasePython.setD_add, None, setD)
setD.discard = new_instancemethod(_pyBasePython.setD_discard, None, setD)
setD.empty = new_instancemethod(_pyBasePython.setD_empty, None, setD)
setD.size = new_instancemethod(_pyBasePython.setD_size, None, setD)
setD.clear = new_instancemethod(_pyBasePython.setD_clear, None, setD)
setD.swap = new_instancemethod(_pyBasePython.setD_swap, None, setD)
setD.count = new_instancemethod(_pyBasePython.setD_count, None, setD)
setD.begin = new_instancemethod(_pyBasePython.setD_begin, None, setD)
setD.end = new_instancemethod(_pyBasePython.setD_end, None, setD)
setD.rbegin = new_instancemethod(_pyBasePython.setD_rbegin, None, setD)
setD.rend = new_instancemethod(_pyBasePython.setD_rend, None, setD)
setD.erase = new_instancemethod(_pyBasePython.setD_erase, None, setD)
setD.find = new_instancemethod(_pyBasePython.setD_find, None, setD)
setD.lower_bound = new_instancemethod(_pyBasePython.setD_lower_bound, None, setD)
setD.upper_bound = new_instancemethod(_pyBasePython.setD_upper_bound, None, setD)
setD.equal_range = new_instancemethod(_pyBasePython.setD_equal_range, None, setD)
setD.insert = new_instancemethod(_pyBasePython.setD_insert, None, setD)
setD_swigregister = _pyBasePython.setD_swigregister
setD_swigregister(setD)

class vectorsetUL(object):
    """Proxy of C++ std::vector<(std::set<(unsigned long,std::less<(unsigned long)>)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectorsetUL self) -> SwigPyIterator"""
        return _pyBasePython.vectorsetUL_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectorsetUL self) -> bool"""
        return _pyBasePython.vectorsetUL___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectorsetUL self) -> bool"""
        return _pyBasePython.vectorsetUL___bool__(self)


    def __len__(self) -> "std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type":
        """__len__(vectorsetUL self) -> std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type"""
        return _pyBasePython.vectorsetUL___len__(self)


    def __getslice__(self, i: 'std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type', j: 'std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type') -> "std::vector< std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > >,std::allocator< std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > > > *":
        """__getslice__(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type i, std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type j) -> vectorsetUL"""
        return _pyBasePython.vectorsetUL___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type i, std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type j)
        __setslice__(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type i, std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type j, vectorsetUL v)
        """
        return _pyBasePython.vectorsetUL___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type', j: 'std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type') -> "void":
        """__delslice__(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type i, std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type j)"""
        return _pyBasePython.vectorsetUL___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type i)
        __delitem__(vectorsetUL self, PySliceObject * slice)
        """
        return _pyBasePython.vectorsetUL___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::set< unsigned long,std::less< unsigned long > > >::value_type const &":
        """
        __getitem__(vectorsetUL self, PySliceObject * slice) -> vectorsetUL
        __getitem__(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type i) -> setUL
        """
        return _pyBasePython.vectorsetUL___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectorsetUL self, PySliceObject * slice, vectorsetUL v)
        __setitem__(vectorsetUL self, PySliceObject * slice)
        __setitem__(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::difference_type i, setUL x)
        """
        return _pyBasePython.vectorsetUL___setitem__(self, *args)


    def pop(self) -> "std::vector< std::set< unsigned long,std::less< unsigned long > > >::value_type":
        """pop(vectorsetUL self) -> setUL"""
        return _pyBasePython.vectorsetUL_pop(self)


    def append(self, x: 'setUL') -> "void":
        """append(vectorsetUL self, setUL x)"""
        return _pyBasePython.vectorsetUL_append(self, x)


    def empty(self) -> "bool":
        """empty(vectorsetUL self) -> bool"""
        return _pyBasePython.vectorsetUL_empty(self)


    def size(self) -> "std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type":
        """size(vectorsetUL self) -> std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type"""
        return _pyBasePython.vectorsetUL_size(self)


    def swap(self, v: 'vectorsetUL') -> "void":
        """swap(vectorsetUL self, vectorsetUL v)"""
        return _pyBasePython.vectorsetUL_swap(self, v)


    def begin(self) -> "std::vector< std::set< unsigned long,std::less< unsigned long > > >::iterator":
        """begin(vectorsetUL self) -> std::vector< std::set< unsigned long,std::less< unsigned long > > >::iterator"""
        return _pyBasePython.vectorsetUL_begin(self)


    def end(self) -> "std::vector< std::set< unsigned long,std::less< unsigned long > > >::iterator":
        """end(vectorsetUL self) -> std::vector< std::set< unsigned long,std::less< unsigned long > > >::iterator"""
        return _pyBasePython.vectorsetUL_end(self)


    def rbegin(self) -> "std::vector< std::set< unsigned long,std::less< unsigned long > > >::reverse_iterator":
        """rbegin(vectorsetUL self) -> std::vector< std::set< unsigned long,std::less< unsigned long > > >::reverse_iterator"""
        return _pyBasePython.vectorsetUL_rbegin(self)


    def rend(self) -> "std::vector< std::set< unsigned long,std::less< unsigned long > > >::reverse_iterator":
        """rend(vectorsetUL self) -> std::vector< std::set< unsigned long,std::less< unsigned long > > >::reverse_iterator"""
        return _pyBasePython.vectorsetUL_rend(self)


    def clear(self) -> "void":
        """clear(vectorsetUL self)"""
        return _pyBasePython.vectorsetUL_clear(self)


    def get_allocator(self) -> "std::vector< std::set< unsigned long,std::less< unsigned long > > >::allocator_type":
        """get_allocator(vectorsetUL self) -> std::vector< std::set< unsigned long,std::less< unsigned long > > >::allocator_type"""
        return _pyBasePython.vectorsetUL_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectorsetUL self)"""
        return _pyBasePython.vectorsetUL_pop_back(self)


    def erase(self, *args) -> "std::vector< std::set< unsigned long,std::less< unsigned long > > >::iterator":
        """
        erase(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::iterator pos) -> std::vector< std::set< unsigned long,std::less< unsigned long > > >::iterator
        erase(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::iterator first, std::vector< std::set< unsigned long,std::less< unsigned long > > >::iterator last) -> std::vector< std::set< unsigned long,std::less< unsigned long > > >::iterator
        """
        return _pyBasePython.vectorsetUL_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::set<(unsigned long,std::less<(unsigned long)>)>)> self) -> vectorsetUL
        __init__(std::vector<(std::set<(unsigned long,std::less<(unsigned long)>)>)> self, vectorsetUL arg2) -> vectorsetUL
        __init__(std::vector<(std::set<(unsigned long,std::less<(unsigned long)>)>)> self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type size) -> vectorsetUL
        __init__(std::vector<(std::set<(unsigned long,std::less<(unsigned long)>)>)> self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type size, setUL value) -> vectorsetUL
        """
        _pyBasePython.vectorsetUL_swiginit(self, _pyBasePython.new_vectorsetUL(*args))

    def push_back(self, x: 'setUL') -> "void":
        """push_back(vectorsetUL self, setUL x)"""
        return _pyBasePython.vectorsetUL_push_back(self, x)


    def front(self) -> "std::vector< std::set< unsigned long,std::less< unsigned long > > >::value_type const &":
        """front(vectorsetUL self) -> setUL"""
        return _pyBasePython.vectorsetUL_front(self)


    def back(self) -> "std::vector< std::set< unsigned long,std::less< unsigned long > > >::value_type const &":
        """back(vectorsetUL self) -> setUL"""
        return _pyBasePython.vectorsetUL_back(self)


    def assign(self, n: 'std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type', x: 'setUL') -> "void":
        """assign(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type n, setUL x)"""
        return _pyBasePython.vectorsetUL_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type new_size)
        resize(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type new_size, setUL x)
        """
        return _pyBasePython.vectorsetUL_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::iterator pos, setUL x) -> std::vector< std::set< unsigned long,std::less< unsigned long > > >::iterator
        insert(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::iterator pos, std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type n, setUL x)
        """
        return _pyBasePython.vectorsetUL_insert(self, *args)


    def reserve(self, n: 'std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type') -> "void":
        """reserve(vectorsetUL self, std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type n)"""
        return _pyBasePython.vectorsetUL_reserve(self, n)


    def capacity(self) -> "std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type":
        """capacity(vectorsetUL self) -> std::vector< std::set< unsigned long,std::less< unsigned long > > >::size_type"""
        return _pyBasePython.vectorsetUL_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorsetUL
vectorsetUL.iterator = new_instancemethod(_pyBasePython.vectorsetUL_iterator, None, vectorsetUL)
vectorsetUL.__nonzero__ = new_instancemethod(_pyBasePython.vectorsetUL___nonzero__, None, vectorsetUL)
vectorsetUL.__bool__ = new_instancemethod(_pyBasePython.vectorsetUL___bool__, None, vectorsetUL)
vectorsetUL.__len__ = new_instancemethod(_pyBasePython.vectorsetUL___len__, None, vectorsetUL)
vectorsetUL.__getslice__ = new_instancemethod(_pyBasePython.vectorsetUL___getslice__, None, vectorsetUL)
vectorsetUL.__setslice__ = new_instancemethod(_pyBasePython.vectorsetUL___setslice__, None, vectorsetUL)
vectorsetUL.__delslice__ = new_instancemethod(_pyBasePython.vectorsetUL___delslice__, None, vectorsetUL)
vectorsetUL.__delitem__ = new_instancemethod(_pyBasePython.vectorsetUL___delitem__, None, vectorsetUL)
vectorsetUL.__getitem__ = new_instancemethod(_pyBasePython.vectorsetUL___getitem__, None, vectorsetUL)
vectorsetUL.__setitem__ = new_instancemethod(_pyBasePython.vectorsetUL___setitem__, None, vectorsetUL)
vectorsetUL.pop = new_instancemethod(_pyBasePython.vectorsetUL_pop, None, vectorsetUL)
vectorsetUL.append = new_instancemethod(_pyBasePython.vectorsetUL_append, None, vectorsetUL)
vectorsetUL.empty = new_instancemethod(_pyBasePython.vectorsetUL_empty, None, vectorsetUL)
vectorsetUL.size = new_instancemethod(_pyBasePython.vectorsetUL_size, None, vectorsetUL)
vectorsetUL.swap = new_instancemethod(_pyBasePython.vectorsetUL_swap, None, vectorsetUL)
vectorsetUL.begin = new_instancemethod(_pyBasePython.vectorsetUL_begin, None, vectorsetUL)
vectorsetUL.end = new_instancemethod(_pyBasePython.vectorsetUL_end, None, vectorsetUL)
vectorsetUL.rbegin = new_instancemethod(_pyBasePython.vectorsetUL_rbegin, None, vectorsetUL)
vectorsetUL.rend = new_instancemethod(_pyBasePython.vectorsetUL_rend, None, vectorsetUL)
vectorsetUL.clear = new_instancemethod(_pyBasePython.vectorsetUL_clear, None, vectorsetUL)
vectorsetUL.get_allocator = new_instancemethod(_pyBasePython.vectorsetUL_get_allocator, None, vectorsetUL)
vectorsetUL.pop_back = new_instancemethod(_pyBasePython.vectorsetUL_pop_back, None, vectorsetUL)
vectorsetUL.erase = new_instancemethod(_pyBasePython.vectorsetUL_erase, None, vectorsetUL)
vectorsetUL.push_back = new_instancemethod(_pyBasePython.vectorsetUL_push_back, None, vectorsetUL)
vectorsetUL.front = new_instancemethod(_pyBasePython.vectorsetUL_front, None, vectorsetUL)
vectorsetUL.back = new_instancemethod(_pyBasePython.vectorsetUL_back, None, vectorsetUL)
vectorsetUL.assign = new_instancemethod(_pyBasePython.vectorsetUL_assign, None, vectorsetUL)
vectorsetUL.resize = new_instancemethod(_pyBasePython.vectorsetUL_resize, None, vectorsetUL)
vectorsetUL.insert = new_instancemethod(_pyBasePython.vectorsetUL_insert, None, vectorsetUL)
vectorsetUL.reserve = new_instancemethod(_pyBasePython.vectorsetUL_reserve, None, vectorsetUL)
vectorsetUL.capacity = new_instancemethod(_pyBasePython.vectorsetUL_capacity, None, vectorsetUL)
vectorsetUL_swigregister = _pyBasePython.vectorsetUL_swigregister
vectorsetUL_swigregister(vectorsetUL)

class mapsetUL(object):
    """Proxy of C++ std::map<(unsigned long,std::set<(unsigned long,std::less<(unsigned long)>)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(mapsetUL self) -> SwigPyIterator"""
        return _pyBasePython.mapsetUL_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(mapsetUL self) -> bool"""
        return _pyBasePython.mapsetUL___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(mapsetUL self) -> bool"""
        return _pyBasePython.mapsetUL___bool__(self)


    def __len__(self) -> "std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::size_type":
        """__len__(mapsetUL self) -> std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::size_type"""
        return _pyBasePython.mapsetUL___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const &') -> "std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::mapped_type const &":
        """__getitem__(mapsetUL self, std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const & key) -> setUL"""
        return _pyBasePython.mapsetUL___getitem__(self, key)


    def __delitem__(self, key: 'std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const &') -> "void":
        """__delitem__(mapsetUL self, std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const & key)"""
        return _pyBasePython.mapsetUL___delitem__(self, key)


    def has_key(self, key: 'std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const &') -> "bool":
        """has_key(mapsetUL self, std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const & key) -> bool"""
        return _pyBasePython.mapsetUL_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(mapsetUL self) -> PyObject *"""
        return _pyBasePython.mapsetUL_keys(self)


    def values(self) -> "PyObject *":
        """values(mapsetUL self) -> PyObject *"""
        return _pyBasePython.mapsetUL_values(self)


    def items(self) -> "PyObject *":
        """items(mapsetUL self) -> PyObject *"""
        return _pyBasePython.mapsetUL_items(self)


    def __contains__(self, key: 'std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const &') -> "bool":
        """__contains__(mapsetUL self, std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const & key) -> bool"""
        return _pyBasePython.mapsetUL___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(mapsetUL self) -> SwigPyIterator"""
        return _pyBasePython.mapsetUL_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(mapsetUL self) -> SwigPyIterator"""
        return _pyBasePython.mapsetUL_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(mapsetUL self, std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const & key)
        __setitem__(mapsetUL self, std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const & key, setUL x)
        """
        return _pyBasePython.mapsetUL___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(mapsetUL self) -> PyObject *"""
        return _pyBasePython.mapsetUL_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(unsigned long,std::set<(unsigned long,std::less<(unsigned long)>)>)> self, std::less< unsigned long > const & arg2) -> mapsetUL
        __init__(std::map<(unsigned long,std::set<(unsigned long,std::less<(unsigned long)>)>)> self) -> mapsetUL
        __init__(std::map<(unsigned long,std::set<(unsigned long,std::less<(unsigned long)>)>)> self, mapsetUL arg2) -> mapsetUL
        """
        _pyBasePython.mapsetUL_swiginit(self, _pyBasePython.new_mapsetUL(*args))

    def empty(self) -> "bool":
        """empty(mapsetUL self) -> bool"""
        return _pyBasePython.mapsetUL_empty(self)


    def size(self) -> "std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::size_type":
        """size(mapsetUL self) -> std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::size_type"""
        return _pyBasePython.mapsetUL_size(self)


    def swap(self, v: 'mapsetUL') -> "void":
        """swap(mapsetUL self, mapsetUL v)"""
        return _pyBasePython.mapsetUL_swap(self, v)


    def begin(self) -> "std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::iterator":
        """begin(mapsetUL self) -> std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::iterator"""
        return _pyBasePython.mapsetUL_begin(self)


    def end(self) -> "std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::iterator":
        """end(mapsetUL self) -> std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::iterator"""
        return _pyBasePython.mapsetUL_end(self)


    def rbegin(self) -> "std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::reverse_iterator":
        """rbegin(mapsetUL self) -> std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::reverse_iterator"""
        return _pyBasePython.mapsetUL_rbegin(self)


    def rend(self) -> "std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::reverse_iterator":
        """rend(mapsetUL self) -> std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::reverse_iterator"""
        return _pyBasePython.mapsetUL_rend(self)


    def clear(self) -> "void":
        """clear(mapsetUL self)"""
        return _pyBasePython.mapsetUL_clear(self)


    def get_allocator(self) -> "std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::allocator_type":
        """get_allocator(mapsetUL self) -> std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::allocator_type"""
        return _pyBasePython.mapsetUL_get_allocator(self)


    def count(self, x: 'std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const &') -> "std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::size_type":
        """count(mapsetUL self, std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const & x) -> std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::size_type"""
        return _pyBasePython.mapsetUL_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(mapsetUL self, std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const & x) -> std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::size_type
        erase(mapsetUL self, std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::iterator position)
        erase(mapsetUL self, std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::iterator first, std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::iterator last)
        """
        return _pyBasePython.mapsetUL_erase(self, *args)


    def find(self, x: 'std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const &') -> "std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::iterator":
        """find(mapsetUL self, std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const & x) -> std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::iterator"""
        return _pyBasePython.mapsetUL_find(self, x)


    def lower_bound(self, x: 'std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const &') -> "std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::iterator":
        """lower_bound(mapsetUL self, std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const & x) -> std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::iterator"""
        return _pyBasePython.mapsetUL_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const &') -> "std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::iterator":
        """upper_bound(mapsetUL self, std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::key_type const & x) -> std::map< unsigned long,std::set< unsigned long,std::less< unsigned long > > >::iterator"""
        return _pyBasePython.mapsetUL_upper_bound(self, x)

    __swig_destroy__ = _pyBasePython.delete_mapsetUL
mapsetUL.iterator = new_instancemethod(_pyBasePython.mapsetUL_iterator, None, mapsetUL)
mapsetUL.__nonzero__ = new_instancemethod(_pyBasePython.mapsetUL___nonzero__, None, mapsetUL)
mapsetUL.__bool__ = new_instancemethod(_pyBasePython.mapsetUL___bool__, None, mapsetUL)
mapsetUL.__len__ = new_instancemethod(_pyBasePython.mapsetUL___len__, None, mapsetUL)
mapsetUL.__getitem__ = new_instancemethod(_pyBasePython.mapsetUL___getitem__, None, mapsetUL)
mapsetUL.__delitem__ = new_instancemethod(_pyBasePython.mapsetUL___delitem__, None, mapsetUL)
mapsetUL.has_key = new_instancemethod(_pyBasePython.mapsetUL_has_key, None, mapsetUL)
mapsetUL.keys = new_instancemethod(_pyBasePython.mapsetUL_keys, None, mapsetUL)
mapsetUL.values = new_instancemethod(_pyBasePython.mapsetUL_values, None, mapsetUL)
mapsetUL.items = new_instancemethod(_pyBasePython.mapsetUL_items, None, mapsetUL)
mapsetUL.__contains__ = new_instancemethod(_pyBasePython.mapsetUL___contains__, None, mapsetUL)
mapsetUL.key_iterator = new_instancemethod(_pyBasePython.mapsetUL_key_iterator, None, mapsetUL)
mapsetUL.value_iterator = new_instancemethod(_pyBasePython.mapsetUL_value_iterator, None, mapsetUL)
mapsetUL.__setitem__ = new_instancemethod(_pyBasePython.mapsetUL___setitem__, None, mapsetUL)
mapsetUL.asdict = new_instancemethod(_pyBasePython.mapsetUL_asdict, None, mapsetUL)
mapsetUL.empty = new_instancemethod(_pyBasePython.mapsetUL_empty, None, mapsetUL)
mapsetUL.size = new_instancemethod(_pyBasePython.mapsetUL_size, None, mapsetUL)
mapsetUL.swap = new_instancemethod(_pyBasePython.mapsetUL_swap, None, mapsetUL)
mapsetUL.begin = new_instancemethod(_pyBasePython.mapsetUL_begin, None, mapsetUL)
mapsetUL.end = new_instancemethod(_pyBasePython.mapsetUL_end, None, mapsetUL)
mapsetUL.rbegin = new_instancemethod(_pyBasePython.mapsetUL_rbegin, None, mapsetUL)
mapsetUL.rend = new_instancemethod(_pyBasePython.mapsetUL_rend, None, mapsetUL)
mapsetUL.clear = new_instancemethod(_pyBasePython.mapsetUL_clear, None, mapsetUL)
mapsetUL.get_allocator = new_instancemethod(_pyBasePython.mapsetUL_get_allocator, None, mapsetUL)
mapsetUL.count = new_instancemethod(_pyBasePython.mapsetUL_count, None, mapsetUL)
mapsetUL.erase = new_instancemethod(_pyBasePython.mapsetUL_erase, None, mapsetUL)
mapsetUL.find = new_instancemethod(_pyBasePython.mapsetUL_find, None, mapsetUL)
mapsetUL.lower_bound = new_instancemethod(_pyBasePython.mapsetUL_lower_bound, None, mapsetUL)
mapsetUL.upper_bound = new_instancemethod(_pyBasePython.mapsetUL_upper_bound, None, mapsetUL)
mapsetUL_swigregister = _pyBasePython.mapsetUL_swigregister
mapsetUL_swigregister(mapsetUL)



