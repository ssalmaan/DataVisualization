# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkCovariantVectorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkCovariantVectorPython', [dirname(__file__)])
        except ImportError:
            import _itkCovariantVectorPython
            return _itkCovariantVectorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkCovariantVectorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkCovariantVectorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkCovariantVectorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vnl_vector_refPython
import stdcomplexPython
import pyBasePython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
class itkCovariantVectorD2(itkFixedArrayPython.itkFixedArrayD2):
    """Proxy of C++ itkCovariantVectorD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetCovariantVectorDimension() -> "unsigned int":
        """GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD2_GetCovariantVectorDimension()

    GetCovariantVectorDimension = staticmethod(GetCovariantVectorDimension)

    def SetVnlVector(self, arg0: 'vnl_vectorD') -> "void":
        """SetVnlVector(itkCovariantVectorD2 self, vnl_vectorD arg0)"""
        return _itkCovariantVectorPython.itkCovariantVectorD2_SetVnlVector(self, arg0)


    def GetVnlVector(self, *args) -> "vnl_vectorD":
        """
        GetVnlVector(itkCovariantVectorD2 self) -> vnl_vector_refD
        GetVnlVector(itkCovariantVectorD2 self) -> vnl_vectorD
        """
        return _itkCovariantVectorPython.itkCovariantVectorD2_GetVnlVector(self, *args)

    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorD2

    def __init__(self, *args):
        """
        __init__(itkCovariantVectorD2 self) -> itkCovariantVectorD2
        __init__(itkCovariantVectorD2 self, itkCovariantVectorD2 arg0) -> itkCovariantVectorD2
        __init__(itkCovariantVectorD2 self, double const & r) -> itkCovariantVectorD2
        __init__(itkCovariantVectorD2 self, double const * r) -> itkCovariantVectorD2
        """
        _itkCovariantVectorPython.itkCovariantVectorD2_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorD2(*args))

    def __iadd__(self, vec: 'itkCovariantVectorD2') -> "itkCovariantVectorD2 const &":
        """__iadd__(itkCovariantVectorD2 self, itkCovariantVectorD2 vec) -> itkCovariantVectorD2"""
        return _itkCovariantVectorPython.itkCovariantVectorD2___iadd__(self, vec)


    def __isub__(self, vec: 'itkCovariantVectorD2') -> "itkCovariantVectorD2 const &":
        """__isub__(itkCovariantVectorD2 self, itkCovariantVectorD2 vec) -> itkCovariantVectorD2"""
        return _itkCovariantVectorPython.itkCovariantVectorD2___isub__(self, vec)


    def __neg__(self) -> "itkCovariantVectorD2":
        """__neg__(itkCovariantVectorD2 self) -> itkCovariantVectorD2"""
        return _itkCovariantVectorPython.itkCovariantVectorD2___neg__(self)


    def __add__(self, vec: 'itkCovariantVectorD2') -> "itkCovariantVectorD2":
        """__add__(itkCovariantVectorD2 self, itkCovariantVectorD2 vec) -> itkCovariantVectorD2"""
        return _itkCovariantVectorPython.itkCovariantVectorD2___add__(self, vec)


    def __sub__(self, vec: 'itkCovariantVectorD2') -> "itkCovariantVectorD2":
        """__sub__(itkCovariantVectorD2 self, itkCovariantVectorD2 vec) -> itkCovariantVectorD2"""
        return _itkCovariantVectorPython.itkCovariantVectorD2___sub__(self, vec)


    def __mul__(self, *args) -> "itkCovariantVectorD2":
        """
        __mul__(itkCovariantVectorD2 self, itkCovariantVectorD2 vec) -> double
        __mul__(itkCovariantVectorD2 self, itkVectorD2 vec) -> double
        __mul__(itkCovariantVectorD2 self, double const & val) -> itkCovariantVectorD2
        """
        return _itkCovariantVectorPython.itkCovariantVectorD2___mul__(self, *args)


    def GetNorm(self) -> "double":
        """GetNorm(itkCovariantVectorD2 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD2_GetNorm(self)


    def GetNumberOfComponents() -> "unsigned int":
        """GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD2_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)

    def Normalize(self) -> "double":
        """Normalize(itkCovariantVectorD2 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD2_Normalize(self)


    def GetSquaredNorm(self) -> "double":
        """GetSquaredNorm(itkCovariantVectorD2 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD2_GetSquaredNorm(self)


    def __getitem__(self, d: 'unsigned long') -> "double":
        """__getitem__(itkCovariantVectorD2 self, unsigned long d) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'double') -> "void":
        """__setitem__(itkCovariantVectorD2 self, unsigned long d, double v)"""
        return _itkCovariantVectorPython.itkCovariantVectorD2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkCovariantVectorD2 self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorD2___repr__(self)

itkCovariantVectorD2.SetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD2_SetVnlVector, None, itkCovariantVectorD2)
itkCovariantVectorD2.GetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD2_GetVnlVector, None, itkCovariantVectorD2)
itkCovariantVectorD2.__iadd__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD2___iadd__, None, itkCovariantVectorD2)
itkCovariantVectorD2.__isub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD2___isub__, None, itkCovariantVectorD2)
itkCovariantVectorD2.__neg__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD2___neg__, None, itkCovariantVectorD2)
itkCovariantVectorD2.__add__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD2___add__, None, itkCovariantVectorD2)
itkCovariantVectorD2.__sub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD2___sub__, None, itkCovariantVectorD2)
itkCovariantVectorD2.__mul__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD2___mul__, None, itkCovariantVectorD2)
itkCovariantVectorD2.GetNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD2_GetNorm, None, itkCovariantVectorD2)
itkCovariantVectorD2.Normalize = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD2_Normalize, None, itkCovariantVectorD2)
itkCovariantVectorD2.GetSquaredNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD2_GetSquaredNorm, None, itkCovariantVectorD2)
itkCovariantVectorD2.__getitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD2___getitem__, None, itkCovariantVectorD2)
itkCovariantVectorD2.__setitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD2___setitem__, None, itkCovariantVectorD2)
itkCovariantVectorD2.__repr__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD2___repr__, None, itkCovariantVectorD2)
itkCovariantVectorD2_swigregister = _itkCovariantVectorPython.itkCovariantVectorD2_swigregister
itkCovariantVectorD2_swigregister(itkCovariantVectorD2)

def itkCovariantVectorD2_GetCovariantVectorDimension() -> "unsigned int":
    """itkCovariantVectorD2_GetCovariantVectorDimension() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorD2_GetCovariantVectorDimension()

def itkCovariantVectorD2_GetNumberOfComponents() -> "unsigned int":
    """itkCovariantVectorD2_GetNumberOfComponents() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorD2_GetNumberOfComponents()

def itkCovariantVectorD2___len__() -> "unsigned int":
    """itkCovariantVectorD2___len__() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorD2___len__()

class itkCovariantVectorD3(itkFixedArrayPython.itkFixedArrayD3):
    """Proxy of C++ itkCovariantVectorD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetCovariantVectorDimension() -> "unsigned int":
        """GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD3_GetCovariantVectorDimension()

    GetCovariantVectorDimension = staticmethod(GetCovariantVectorDimension)

    def SetVnlVector(self, arg0: 'vnl_vectorD') -> "void":
        """SetVnlVector(itkCovariantVectorD3 self, vnl_vectorD arg0)"""
        return _itkCovariantVectorPython.itkCovariantVectorD3_SetVnlVector(self, arg0)


    def GetVnlVector(self, *args) -> "vnl_vectorD":
        """
        GetVnlVector(itkCovariantVectorD3 self) -> vnl_vector_refD
        GetVnlVector(itkCovariantVectorD3 self) -> vnl_vectorD
        """
        return _itkCovariantVectorPython.itkCovariantVectorD3_GetVnlVector(self, *args)

    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorD3

    def __init__(self, *args):
        """
        __init__(itkCovariantVectorD3 self) -> itkCovariantVectorD3
        __init__(itkCovariantVectorD3 self, itkCovariantVectorD3 arg0) -> itkCovariantVectorD3
        __init__(itkCovariantVectorD3 self, double const & r) -> itkCovariantVectorD3
        __init__(itkCovariantVectorD3 self, double const * r) -> itkCovariantVectorD3
        """
        _itkCovariantVectorPython.itkCovariantVectorD3_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorD3(*args))

    def __iadd__(self, vec: 'itkCovariantVectorD3') -> "itkCovariantVectorD3 const &":
        """__iadd__(itkCovariantVectorD3 self, itkCovariantVectorD3 vec) -> itkCovariantVectorD3"""
        return _itkCovariantVectorPython.itkCovariantVectorD3___iadd__(self, vec)


    def __isub__(self, vec: 'itkCovariantVectorD3') -> "itkCovariantVectorD3 const &":
        """__isub__(itkCovariantVectorD3 self, itkCovariantVectorD3 vec) -> itkCovariantVectorD3"""
        return _itkCovariantVectorPython.itkCovariantVectorD3___isub__(self, vec)


    def __neg__(self) -> "itkCovariantVectorD3":
        """__neg__(itkCovariantVectorD3 self) -> itkCovariantVectorD3"""
        return _itkCovariantVectorPython.itkCovariantVectorD3___neg__(self)


    def __add__(self, vec: 'itkCovariantVectorD3') -> "itkCovariantVectorD3":
        """__add__(itkCovariantVectorD3 self, itkCovariantVectorD3 vec) -> itkCovariantVectorD3"""
        return _itkCovariantVectorPython.itkCovariantVectorD3___add__(self, vec)


    def __sub__(self, vec: 'itkCovariantVectorD3') -> "itkCovariantVectorD3":
        """__sub__(itkCovariantVectorD3 self, itkCovariantVectorD3 vec) -> itkCovariantVectorD3"""
        return _itkCovariantVectorPython.itkCovariantVectorD3___sub__(self, vec)


    def __mul__(self, *args) -> "itkCovariantVectorD3":
        """
        __mul__(itkCovariantVectorD3 self, itkCovariantVectorD3 vec) -> double
        __mul__(itkCovariantVectorD3 self, itkVectorD3 vec) -> double
        __mul__(itkCovariantVectorD3 self, double const & val) -> itkCovariantVectorD3
        """
        return _itkCovariantVectorPython.itkCovariantVectorD3___mul__(self, *args)


    def GetNorm(self) -> "double":
        """GetNorm(itkCovariantVectorD3 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD3_GetNorm(self)


    def GetNumberOfComponents() -> "unsigned int":
        """GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD3_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)

    def Normalize(self) -> "double":
        """Normalize(itkCovariantVectorD3 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD3_Normalize(self)


    def GetSquaredNorm(self) -> "double":
        """GetSquaredNorm(itkCovariantVectorD3 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD3_GetSquaredNorm(self)


    def __getitem__(self, d: 'unsigned long') -> "double":
        """__getitem__(itkCovariantVectorD3 self, unsigned long d) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'double') -> "void":
        """__setitem__(itkCovariantVectorD3 self, unsigned long d, double v)"""
        return _itkCovariantVectorPython.itkCovariantVectorD3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkCovariantVectorD3 self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorD3___repr__(self)

itkCovariantVectorD3.SetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD3_SetVnlVector, None, itkCovariantVectorD3)
itkCovariantVectorD3.GetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD3_GetVnlVector, None, itkCovariantVectorD3)
itkCovariantVectorD3.__iadd__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD3___iadd__, None, itkCovariantVectorD3)
itkCovariantVectorD3.__isub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD3___isub__, None, itkCovariantVectorD3)
itkCovariantVectorD3.__neg__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD3___neg__, None, itkCovariantVectorD3)
itkCovariantVectorD3.__add__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD3___add__, None, itkCovariantVectorD3)
itkCovariantVectorD3.__sub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD3___sub__, None, itkCovariantVectorD3)
itkCovariantVectorD3.__mul__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD3___mul__, None, itkCovariantVectorD3)
itkCovariantVectorD3.GetNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD3_GetNorm, None, itkCovariantVectorD3)
itkCovariantVectorD3.Normalize = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD3_Normalize, None, itkCovariantVectorD3)
itkCovariantVectorD3.GetSquaredNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD3_GetSquaredNorm, None, itkCovariantVectorD3)
itkCovariantVectorD3.__getitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD3___getitem__, None, itkCovariantVectorD3)
itkCovariantVectorD3.__setitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD3___setitem__, None, itkCovariantVectorD3)
itkCovariantVectorD3.__repr__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD3___repr__, None, itkCovariantVectorD3)
itkCovariantVectorD3_swigregister = _itkCovariantVectorPython.itkCovariantVectorD3_swigregister
itkCovariantVectorD3_swigregister(itkCovariantVectorD3)

def itkCovariantVectorD3_GetCovariantVectorDimension() -> "unsigned int":
    """itkCovariantVectorD3_GetCovariantVectorDimension() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorD3_GetCovariantVectorDimension()

def itkCovariantVectorD3_GetNumberOfComponents() -> "unsigned int":
    """itkCovariantVectorD3_GetNumberOfComponents() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorD3_GetNumberOfComponents()

def itkCovariantVectorD3___len__() -> "unsigned int":
    """itkCovariantVectorD3___len__() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorD3___len__()

class itkCovariantVectorD4(itkFixedArrayPython.itkFixedArrayD4):
    """Proxy of C++ itkCovariantVectorD4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetCovariantVectorDimension() -> "unsigned int":
        """GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD4_GetCovariantVectorDimension()

    GetCovariantVectorDimension = staticmethod(GetCovariantVectorDimension)

    def SetVnlVector(self, arg0: 'vnl_vectorD') -> "void":
        """SetVnlVector(itkCovariantVectorD4 self, vnl_vectorD arg0)"""
        return _itkCovariantVectorPython.itkCovariantVectorD4_SetVnlVector(self, arg0)


    def GetVnlVector(self, *args) -> "vnl_vectorD":
        """
        GetVnlVector(itkCovariantVectorD4 self) -> vnl_vector_refD
        GetVnlVector(itkCovariantVectorD4 self) -> vnl_vectorD
        """
        return _itkCovariantVectorPython.itkCovariantVectorD4_GetVnlVector(self, *args)

    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorD4

    def __init__(self, *args):
        """
        __init__(itkCovariantVectorD4 self) -> itkCovariantVectorD4
        __init__(itkCovariantVectorD4 self, itkCovariantVectorD4 arg0) -> itkCovariantVectorD4
        __init__(itkCovariantVectorD4 self, double const & r) -> itkCovariantVectorD4
        __init__(itkCovariantVectorD4 self, double const * r) -> itkCovariantVectorD4
        """
        _itkCovariantVectorPython.itkCovariantVectorD4_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorD4(*args))

    def __iadd__(self, vec: 'itkCovariantVectorD4') -> "itkCovariantVectorD4 const &":
        """__iadd__(itkCovariantVectorD4 self, itkCovariantVectorD4 vec) -> itkCovariantVectorD4"""
        return _itkCovariantVectorPython.itkCovariantVectorD4___iadd__(self, vec)


    def __isub__(self, vec: 'itkCovariantVectorD4') -> "itkCovariantVectorD4 const &":
        """__isub__(itkCovariantVectorD4 self, itkCovariantVectorD4 vec) -> itkCovariantVectorD4"""
        return _itkCovariantVectorPython.itkCovariantVectorD4___isub__(self, vec)


    def __neg__(self) -> "itkCovariantVectorD4":
        """__neg__(itkCovariantVectorD4 self) -> itkCovariantVectorD4"""
        return _itkCovariantVectorPython.itkCovariantVectorD4___neg__(self)


    def __add__(self, vec: 'itkCovariantVectorD4') -> "itkCovariantVectorD4":
        """__add__(itkCovariantVectorD4 self, itkCovariantVectorD4 vec) -> itkCovariantVectorD4"""
        return _itkCovariantVectorPython.itkCovariantVectorD4___add__(self, vec)


    def __sub__(self, vec: 'itkCovariantVectorD4') -> "itkCovariantVectorD4":
        """__sub__(itkCovariantVectorD4 self, itkCovariantVectorD4 vec) -> itkCovariantVectorD4"""
        return _itkCovariantVectorPython.itkCovariantVectorD4___sub__(self, vec)


    def __mul__(self, *args) -> "itkCovariantVectorD4":
        """
        __mul__(itkCovariantVectorD4 self, itkCovariantVectorD4 vec) -> double
        __mul__(itkCovariantVectorD4 self, itkVectorD4 vec) -> double
        __mul__(itkCovariantVectorD4 self, double const & val) -> itkCovariantVectorD4
        """
        return _itkCovariantVectorPython.itkCovariantVectorD4___mul__(self, *args)


    def GetNorm(self) -> "double":
        """GetNorm(itkCovariantVectorD4 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD4_GetNorm(self)


    def GetNumberOfComponents() -> "unsigned int":
        """GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD4_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)

    def Normalize(self) -> "double":
        """Normalize(itkCovariantVectorD4 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD4_Normalize(self)


    def GetSquaredNorm(self) -> "double":
        """GetSquaredNorm(itkCovariantVectorD4 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD4_GetSquaredNorm(self)


    def __getitem__(self, d: 'unsigned long') -> "double":
        """__getitem__(itkCovariantVectorD4 self, unsigned long d) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'double') -> "void":
        """__setitem__(itkCovariantVectorD4 self, unsigned long d, double v)"""
        return _itkCovariantVectorPython.itkCovariantVectorD4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkCovariantVectorD4 self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorD4___repr__(self)

itkCovariantVectorD4.SetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD4_SetVnlVector, None, itkCovariantVectorD4)
itkCovariantVectorD4.GetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD4_GetVnlVector, None, itkCovariantVectorD4)
itkCovariantVectorD4.__iadd__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD4___iadd__, None, itkCovariantVectorD4)
itkCovariantVectorD4.__isub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD4___isub__, None, itkCovariantVectorD4)
itkCovariantVectorD4.__neg__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD4___neg__, None, itkCovariantVectorD4)
itkCovariantVectorD4.__add__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD4___add__, None, itkCovariantVectorD4)
itkCovariantVectorD4.__sub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD4___sub__, None, itkCovariantVectorD4)
itkCovariantVectorD4.__mul__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD4___mul__, None, itkCovariantVectorD4)
itkCovariantVectorD4.GetNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD4_GetNorm, None, itkCovariantVectorD4)
itkCovariantVectorD4.Normalize = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD4_Normalize, None, itkCovariantVectorD4)
itkCovariantVectorD4.GetSquaredNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD4_GetSquaredNorm, None, itkCovariantVectorD4)
itkCovariantVectorD4.__getitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD4___getitem__, None, itkCovariantVectorD4)
itkCovariantVectorD4.__setitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD4___setitem__, None, itkCovariantVectorD4)
itkCovariantVectorD4.__repr__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD4___repr__, None, itkCovariantVectorD4)
itkCovariantVectorD4_swigregister = _itkCovariantVectorPython.itkCovariantVectorD4_swigregister
itkCovariantVectorD4_swigregister(itkCovariantVectorD4)

def itkCovariantVectorD4_GetCovariantVectorDimension() -> "unsigned int":
    """itkCovariantVectorD4_GetCovariantVectorDimension() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorD4_GetCovariantVectorDimension()

def itkCovariantVectorD4_GetNumberOfComponents() -> "unsigned int":
    """itkCovariantVectorD4_GetNumberOfComponents() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorD4_GetNumberOfComponents()

def itkCovariantVectorD4___len__() -> "unsigned int":
    """itkCovariantVectorD4___len__() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorD4___len__()

class itkCovariantVectorD5(itkFixedArrayPython.itkFixedArrayD5):
    """Proxy of C++ itkCovariantVectorD5 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetCovariantVectorDimension() -> "unsigned int":
        """GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD5_GetCovariantVectorDimension()

    GetCovariantVectorDimension = staticmethod(GetCovariantVectorDimension)

    def SetVnlVector(self, arg0: 'vnl_vectorD') -> "void":
        """SetVnlVector(itkCovariantVectorD5 self, vnl_vectorD arg0)"""
        return _itkCovariantVectorPython.itkCovariantVectorD5_SetVnlVector(self, arg0)


    def GetVnlVector(self, *args) -> "vnl_vectorD":
        """
        GetVnlVector(itkCovariantVectorD5 self) -> vnl_vector_refD
        GetVnlVector(itkCovariantVectorD5 self) -> vnl_vectorD
        """
        return _itkCovariantVectorPython.itkCovariantVectorD5_GetVnlVector(self, *args)

    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorD5

    def __init__(self, *args):
        """
        __init__(itkCovariantVectorD5 self) -> itkCovariantVectorD5
        __init__(itkCovariantVectorD5 self, itkCovariantVectorD5 arg0) -> itkCovariantVectorD5
        __init__(itkCovariantVectorD5 self, double const & r) -> itkCovariantVectorD5
        __init__(itkCovariantVectorD5 self, double const * r) -> itkCovariantVectorD5
        """
        _itkCovariantVectorPython.itkCovariantVectorD5_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorD5(*args))

    def __iadd__(self, vec: 'itkCovariantVectorD5') -> "itkCovariantVectorD5 const &":
        """__iadd__(itkCovariantVectorD5 self, itkCovariantVectorD5 vec) -> itkCovariantVectorD5"""
        return _itkCovariantVectorPython.itkCovariantVectorD5___iadd__(self, vec)


    def __isub__(self, vec: 'itkCovariantVectorD5') -> "itkCovariantVectorD5 const &":
        """__isub__(itkCovariantVectorD5 self, itkCovariantVectorD5 vec) -> itkCovariantVectorD5"""
        return _itkCovariantVectorPython.itkCovariantVectorD5___isub__(self, vec)


    def __neg__(self) -> "itkCovariantVectorD5":
        """__neg__(itkCovariantVectorD5 self) -> itkCovariantVectorD5"""
        return _itkCovariantVectorPython.itkCovariantVectorD5___neg__(self)


    def __add__(self, vec: 'itkCovariantVectorD5') -> "itkCovariantVectorD5":
        """__add__(itkCovariantVectorD5 self, itkCovariantVectorD5 vec) -> itkCovariantVectorD5"""
        return _itkCovariantVectorPython.itkCovariantVectorD5___add__(self, vec)


    def __sub__(self, vec: 'itkCovariantVectorD5') -> "itkCovariantVectorD5":
        """__sub__(itkCovariantVectorD5 self, itkCovariantVectorD5 vec) -> itkCovariantVectorD5"""
        return _itkCovariantVectorPython.itkCovariantVectorD5___sub__(self, vec)


    def __mul__(self, *args) -> "itkCovariantVectorD5":
        """
        __mul__(itkCovariantVectorD5 self, itkCovariantVectorD5 vec) -> double
        __mul__(itkCovariantVectorD5 self, itkVectorD5 vec) -> double
        __mul__(itkCovariantVectorD5 self, double const & val) -> itkCovariantVectorD5
        """
        return _itkCovariantVectorPython.itkCovariantVectorD5___mul__(self, *args)


    def GetNorm(self) -> "double":
        """GetNorm(itkCovariantVectorD5 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD5_GetNorm(self)


    def GetNumberOfComponents() -> "unsigned int":
        """GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD5_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)

    def Normalize(self) -> "double":
        """Normalize(itkCovariantVectorD5 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD5_Normalize(self)


    def GetSquaredNorm(self) -> "double":
        """GetSquaredNorm(itkCovariantVectorD5 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD5_GetSquaredNorm(self)


    def __getitem__(self, d: 'unsigned long') -> "double":
        """__getitem__(itkCovariantVectorD5 self, unsigned long d) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD5___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'double') -> "void":
        """__setitem__(itkCovariantVectorD5 self, unsigned long d, double v)"""
        return _itkCovariantVectorPython.itkCovariantVectorD5___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD5___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkCovariantVectorD5 self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorD5___repr__(self)

itkCovariantVectorD5.SetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD5_SetVnlVector, None, itkCovariantVectorD5)
itkCovariantVectorD5.GetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD5_GetVnlVector, None, itkCovariantVectorD5)
itkCovariantVectorD5.__iadd__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD5___iadd__, None, itkCovariantVectorD5)
itkCovariantVectorD5.__isub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD5___isub__, None, itkCovariantVectorD5)
itkCovariantVectorD5.__neg__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD5___neg__, None, itkCovariantVectorD5)
itkCovariantVectorD5.__add__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD5___add__, None, itkCovariantVectorD5)
itkCovariantVectorD5.__sub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD5___sub__, None, itkCovariantVectorD5)
itkCovariantVectorD5.__mul__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD5___mul__, None, itkCovariantVectorD5)
itkCovariantVectorD5.GetNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD5_GetNorm, None, itkCovariantVectorD5)
itkCovariantVectorD5.Normalize = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD5_Normalize, None, itkCovariantVectorD5)
itkCovariantVectorD5.GetSquaredNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD5_GetSquaredNorm, None, itkCovariantVectorD5)
itkCovariantVectorD5.__getitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD5___getitem__, None, itkCovariantVectorD5)
itkCovariantVectorD5.__setitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD5___setitem__, None, itkCovariantVectorD5)
itkCovariantVectorD5.__repr__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorD5___repr__, None, itkCovariantVectorD5)
itkCovariantVectorD5_swigregister = _itkCovariantVectorPython.itkCovariantVectorD5_swigregister
itkCovariantVectorD5_swigregister(itkCovariantVectorD5)

def itkCovariantVectorD5_GetCovariantVectorDimension() -> "unsigned int":
    """itkCovariantVectorD5_GetCovariantVectorDimension() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorD5_GetCovariantVectorDimension()

def itkCovariantVectorD5_GetNumberOfComponents() -> "unsigned int":
    """itkCovariantVectorD5_GetNumberOfComponents() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorD5_GetNumberOfComponents()

def itkCovariantVectorD5___len__() -> "unsigned int":
    """itkCovariantVectorD5___len__() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorD5___len__()

class itkCovariantVectorF2(itkFixedArrayPython.itkFixedArrayF2):
    """Proxy of C++ itkCovariantVectorF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetCovariantVectorDimension() -> "unsigned int":
        """GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF2_GetCovariantVectorDimension()

    GetCovariantVectorDimension = staticmethod(GetCovariantVectorDimension)

    def SetVnlVector(self, arg0: 'vnl_vectorF') -> "void":
        """SetVnlVector(itkCovariantVectorF2 self, vnl_vectorF arg0)"""
        return _itkCovariantVectorPython.itkCovariantVectorF2_SetVnlVector(self, arg0)


    def GetVnlVector(self, *args) -> "vnl_vectorF":
        """
        GetVnlVector(itkCovariantVectorF2 self) -> vnl_vector_refF
        GetVnlVector(itkCovariantVectorF2 self) -> vnl_vectorF
        """
        return _itkCovariantVectorPython.itkCovariantVectorF2_GetVnlVector(self, *args)

    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorF2

    def __init__(self, *args):
        """
        __init__(itkCovariantVectorF2 self) -> itkCovariantVectorF2
        __init__(itkCovariantVectorF2 self, itkCovariantVectorF2 arg0) -> itkCovariantVectorF2
        __init__(itkCovariantVectorF2 self, float const & r) -> itkCovariantVectorF2
        __init__(itkCovariantVectorF2 self, float const * r) -> itkCovariantVectorF2
        """
        _itkCovariantVectorPython.itkCovariantVectorF2_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorF2(*args))

    def __iadd__(self, vec: 'itkCovariantVectorF2') -> "itkCovariantVectorF2 const &":
        """__iadd__(itkCovariantVectorF2 self, itkCovariantVectorF2 vec) -> itkCovariantVectorF2"""
        return _itkCovariantVectorPython.itkCovariantVectorF2___iadd__(self, vec)


    def __isub__(self, vec: 'itkCovariantVectorF2') -> "itkCovariantVectorF2 const &":
        """__isub__(itkCovariantVectorF2 self, itkCovariantVectorF2 vec) -> itkCovariantVectorF2"""
        return _itkCovariantVectorPython.itkCovariantVectorF2___isub__(self, vec)


    def __neg__(self) -> "itkCovariantVectorF2":
        """__neg__(itkCovariantVectorF2 self) -> itkCovariantVectorF2"""
        return _itkCovariantVectorPython.itkCovariantVectorF2___neg__(self)


    def __add__(self, vec: 'itkCovariantVectorF2') -> "itkCovariantVectorF2":
        """__add__(itkCovariantVectorF2 self, itkCovariantVectorF2 vec) -> itkCovariantVectorF2"""
        return _itkCovariantVectorPython.itkCovariantVectorF2___add__(self, vec)


    def __sub__(self, vec: 'itkCovariantVectorF2') -> "itkCovariantVectorF2":
        """__sub__(itkCovariantVectorF2 self, itkCovariantVectorF2 vec) -> itkCovariantVectorF2"""
        return _itkCovariantVectorPython.itkCovariantVectorF2___sub__(self, vec)


    def __mul__(self, *args) -> "itkCovariantVectorF2":
        """
        __mul__(itkCovariantVectorF2 self, itkCovariantVectorF2 vec) -> float
        __mul__(itkCovariantVectorF2 self, itkVectorF2 vec) -> float
        __mul__(itkCovariantVectorF2 self, float const & val) -> itkCovariantVectorF2
        """
        return _itkCovariantVectorPython.itkCovariantVectorF2___mul__(self, *args)


    def GetNorm(self) -> "double":
        """GetNorm(itkCovariantVectorF2 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF2_GetNorm(self)


    def GetNumberOfComponents() -> "unsigned int":
        """GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF2_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)

    def Normalize(self) -> "double":
        """Normalize(itkCovariantVectorF2 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF2_Normalize(self)


    def GetSquaredNorm(self) -> "double":
        """GetSquaredNorm(itkCovariantVectorF2 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF2_GetSquaredNorm(self)


    def __getitem__(self, d: 'unsigned long') -> "float":
        """__getitem__(itkCovariantVectorF2 self, unsigned long d) -> float"""
        return _itkCovariantVectorPython.itkCovariantVectorF2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'float') -> "void":
        """__setitem__(itkCovariantVectorF2 self, unsigned long d, float v)"""
        return _itkCovariantVectorPython.itkCovariantVectorF2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkCovariantVectorF2 self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorF2___repr__(self)

itkCovariantVectorF2.SetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF2_SetVnlVector, None, itkCovariantVectorF2)
itkCovariantVectorF2.GetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF2_GetVnlVector, None, itkCovariantVectorF2)
itkCovariantVectorF2.__iadd__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF2___iadd__, None, itkCovariantVectorF2)
itkCovariantVectorF2.__isub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF2___isub__, None, itkCovariantVectorF2)
itkCovariantVectorF2.__neg__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF2___neg__, None, itkCovariantVectorF2)
itkCovariantVectorF2.__add__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF2___add__, None, itkCovariantVectorF2)
itkCovariantVectorF2.__sub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF2___sub__, None, itkCovariantVectorF2)
itkCovariantVectorF2.__mul__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF2___mul__, None, itkCovariantVectorF2)
itkCovariantVectorF2.GetNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF2_GetNorm, None, itkCovariantVectorF2)
itkCovariantVectorF2.Normalize = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF2_Normalize, None, itkCovariantVectorF2)
itkCovariantVectorF2.GetSquaredNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF2_GetSquaredNorm, None, itkCovariantVectorF2)
itkCovariantVectorF2.__getitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF2___getitem__, None, itkCovariantVectorF2)
itkCovariantVectorF2.__setitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF2___setitem__, None, itkCovariantVectorF2)
itkCovariantVectorF2.__repr__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF2___repr__, None, itkCovariantVectorF2)
itkCovariantVectorF2_swigregister = _itkCovariantVectorPython.itkCovariantVectorF2_swigregister
itkCovariantVectorF2_swigregister(itkCovariantVectorF2)

def itkCovariantVectorF2_GetCovariantVectorDimension() -> "unsigned int":
    """itkCovariantVectorF2_GetCovariantVectorDimension() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorF2_GetCovariantVectorDimension()

def itkCovariantVectorF2_GetNumberOfComponents() -> "unsigned int":
    """itkCovariantVectorF2_GetNumberOfComponents() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorF2_GetNumberOfComponents()

def itkCovariantVectorF2___len__() -> "unsigned int":
    """itkCovariantVectorF2___len__() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorF2___len__()

class itkCovariantVectorF3(itkFixedArrayPython.itkFixedArrayF3):
    """Proxy of C++ itkCovariantVectorF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetCovariantVectorDimension() -> "unsigned int":
        """GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF3_GetCovariantVectorDimension()

    GetCovariantVectorDimension = staticmethod(GetCovariantVectorDimension)

    def SetVnlVector(self, arg0: 'vnl_vectorF') -> "void":
        """SetVnlVector(itkCovariantVectorF3 self, vnl_vectorF arg0)"""
        return _itkCovariantVectorPython.itkCovariantVectorF3_SetVnlVector(self, arg0)


    def GetVnlVector(self, *args) -> "vnl_vectorF":
        """
        GetVnlVector(itkCovariantVectorF3 self) -> vnl_vector_refF
        GetVnlVector(itkCovariantVectorF3 self) -> vnl_vectorF
        """
        return _itkCovariantVectorPython.itkCovariantVectorF3_GetVnlVector(self, *args)

    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorF3

    def __init__(self, *args):
        """
        __init__(itkCovariantVectorF3 self) -> itkCovariantVectorF3
        __init__(itkCovariantVectorF3 self, itkCovariantVectorF3 arg0) -> itkCovariantVectorF3
        __init__(itkCovariantVectorF3 self, float const & r) -> itkCovariantVectorF3
        __init__(itkCovariantVectorF3 self, float const * r) -> itkCovariantVectorF3
        """
        _itkCovariantVectorPython.itkCovariantVectorF3_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorF3(*args))

    def __iadd__(self, vec: 'itkCovariantVectorF3') -> "itkCovariantVectorF3 const &":
        """__iadd__(itkCovariantVectorF3 self, itkCovariantVectorF3 vec) -> itkCovariantVectorF3"""
        return _itkCovariantVectorPython.itkCovariantVectorF3___iadd__(self, vec)


    def __isub__(self, vec: 'itkCovariantVectorF3') -> "itkCovariantVectorF3 const &":
        """__isub__(itkCovariantVectorF3 self, itkCovariantVectorF3 vec) -> itkCovariantVectorF3"""
        return _itkCovariantVectorPython.itkCovariantVectorF3___isub__(self, vec)


    def __neg__(self) -> "itkCovariantVectorF3":
        """__neg__(itkCovariantVectorF3 self) -> itkCovariantVectorF3"""
        return _itkCovariantVectorPython.itkCovariantVectorF3___neg__(self)


    def __add__(self, vec: 'itkCovariantVectorF3') -> "itkCovariantVectorF3":
        """__add__(itkCovariantVectorF3 self, itkCovariantVectorF3 vec) -> itkCovariantVectorF3"""
        return _itkCovariantVectorPython.itkCovariantVectorF3___add__(self, vec)


    def __sub__(self, vec: 'itkCovariantVectorF3') -> "itkCovariantVectorF3":
        """__sub__(itkCovariantVectorF3 self, itkCovariantVectorF3 vec) -> itkCovariantVectorF3"""
        return _itkCovariantVectorPython.itkCovariantVectorF3___sub__(self, vec)


    def __mul__(self, *args) -> "itkCovariantVectorF3":
        """
        __mul__(itkCovariantVectorF3 self, itkCovariantVectorF3 vec) -> float
        __mul__(itkCovariantVectorF3 self, itkVectorF3 vec) -> float
        __mul__(itkCovariantVectorF3 self, float const & val) -> itkCovariantVectorF3
        """
        return _itkCovariantVectorPython.itkCovariantVectorF3___mul__(self, *args)


    def GetNorm(self) -> "double":
        """GetNorm(itkCovariantVectorF3 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF3_GetNorm(self)


    def GetNumberOfComponents() -> "unsigned int":
        """GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF3_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)

    def Normalize(self) -> "double":
        """Normalize(itkCovariantVectorF3 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF3_Normalize(self)


    def GetSquaredNorm(self) -> "double":
        """GetSquaredNorm(itkCovariantVectorF3 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF3_GetSquaredNorm(self)


    def __getitem__(self, d: 'unsigned long') -> "float":
        """__getitem__(itkCovariantVectorF3 self, unsigned long d) -> float"""
        return _itkCovariantVectorPython.itkCovariantVectorF3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'float') -> "void":
        """__setitem__(itkCovariantVectorF3 self, unsigned long d, float v)"""
        return _itkCovariantVectorPython.itkCovariantVectorF3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkCovariantVectorF3 self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorF3___repr__(self)

itkCovariantVectorF3.SetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF3_SetVnlVector, None, itkCovariantVectorF3)
itkCovariantVectorF3.GetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF3_GetVnlVector, None, itkCovariantVectorF3)
itkCovariantVectorF3.__iadd__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF3___iadd__, None, itkCovariantVectorF3)
itkCovariantVectorF3.__isub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF3___isub__, None, itkCovariantVectorF3)
itkCovariantVectorF3.__neg__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF3___neg__, None, itkCovariantVectorF3)
itkCovariantVectorF3.__add__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF3___add__, None, itkCovariantVectorF3)
itkCovariantVectorF3.__sub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF3___sub__, None, itkCovariantVectorF3)
itkCovariantVectorF3.__mul__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF3___mul__, None, itkCovariantVectorF3)
itkCovariantVectorF3.GetNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF3_GetNorm, None, itkCovariantVectorF3)
itkCovariantVectorF3.Normalize = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF3_Normalize, None, itkCovariantVectorF3)
itkCovariantVectorF3.GetSquaredNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF3_GetSquaredNorm, None, itkCovariantVectorF3)
itkCovariantVectorF3.__getitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF3___getitem__, None, itkCovariantVectorF3)
itkCovariantVectorF3.__setitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF3___setitem__, None, itkCovariantVectorF3)
itkCovariantVectorF3.__repr__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF3___repr__, None, itkCovariantVectorF3)
itkCovariantVectorF3_swigregister = _itkCovariantVectorPython.itkCovariantVectorF3_swigregister
itkCovariantVectorF3_swigregister(itkCovariantVectorF3)

def itkCovariantVectorF3_GetCovariantVectorDimension() -> "unsigned int":
    """itkCovariantVectorF3_GetCovariantVectorDimension() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorF3_GetCovariantVectorDimension()

def itkCovariantVectorF3_GetNumberOfComponents() -> "unsigned int":
    """itkCovariantVectorF3_GetNumberOfComponents() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorF3_GetNumberOfComponents()

def itkCovariantVectorF3___len__() -> "unsigned int":
    """itkCovariantVectorF3___len__() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorF3___len__()

class itkCovariantVectorF4(itkFixedArrayPython.itkFixedArrayF4):
    """Proxy of C++ itkCovariantVectorF4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetCovariantVectorDimension() -> "unsigned int":
        """GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF4_GetCovariantVectorDimension()

    GetCovariantVectorDimension = staticmethod(GetCovariantVectorDimension)

    def SetVnlVector(self, arg0: 'vnl_vectorF') -> "void":
        """SetVnlVector(itkCovariantVectorF4 self, vnl_vectorF arg0)"""
        return _itkCovariantVectorPython.itkCovariantVectorF4_SetVnlVector(self, arg0)


    def GetVnlVector(self, *args) -> "vnl_vectorF":
        """
        GetVnlVector(itkCovariantVectorF4 self) -> vnl_vector_refF
        GetVnlVector(itkCovariantVectorF4 self) -> vnl_vectorF
        """
        return _itkCovariantVectorPython.itkCovariantVectorF4_GetVnlVector(self, *args)

    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorF4

    def __init__(self, *args):
        """
        __init__(itkCovariantVectorF4 self) -> itkCovariantVectorF4
        __init__(itkCovariantVectorF4 self, itkCovariantVectorF4 arg0) -> itkCovariantVectorF4
        __init__(itkCovariantVectorF4 self, float const & r) -> itkCovariantVectorF4
        __init__(itkCovariantVectorF4 self, float const * r) -> itkCovariantVectorF4
        """
        _itkCovariantVectorPython.itkCovariantVectorF4_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorF4(*args))

    def __iadd__(self, vec: 'itkCovariantVectorF4') -> "itkCovariantVectorF4 const &":
        """__iadd__(itkCovariantVectorF4 self, itkCovariantVectorF4 vec) -> itkCovariantVectorF4"""
        return _itkCovariantVectorPython.itkCovariantVectorF4___iadd__(self, vec)


    def __isub__(self, vec: 'itkCovariantVectorF4') -> "itkCovariantVectorF4 const &":
        """__isub__(itkCovariantVectorF4 self, itkCovariantVectorF4 vec) -> itkCovariantVectorF4"""
        return _itkCovariantVectorPython.itkCovariantVectorF4___isub__(self, vec)


    def __neg__(self) -> "itkCovariantVectorF4":
        """__neg__(itkCovariantVectorF4 self) -> itkCovariantVectorF4"""
        return _itkCovariantVectorPython.itkCovariantVectorF4___neg__(self)


    def __add__(self, vec: 'itkCovariantVectorF4') -> "itkCovariantVectorF4":
        """__add__(itkCovariantVectorF4 self, itkCovariantVectorF4 vec) -> itkCovariantVectorF4"""
        return _itkCovariantVectorPython.itkCovariantVectorF4___add__(self, vec)


    def __sub__(self, vec: 'itkCovariantVectorF4') -> "itkCovariantVectorF4":
        """__sub__(itkCovariantVectorF4 self, itkCovariantVectorF4 vec) -> itkCovariantVectorF4"""
        return _itkCovariantVectorPython.itkCovariantVectorF4___sub__(self, vec)


    def __mul__(self, *args) -> "itkCovariantVectorF4":
        """
        __mul__(itkCovariantVectorF4 self, itkCovariantVectorF4 vec) -> float
        __mul__(itkCovariantVectorF4 self, itkVectorF4 vec) -> float
        __mul__(itkCovariantVectorF4 self, float const & val) -> itkCovariantVectorF4
        """
        return _itkCovariantVectorPython.itkCovariantVectorF4___mul__(self, *args)


    def GetNorm(self) -> "double":
        """GetNorm(itkCovariantVectorF4 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF4_GetNorm(self)


    def GetNumberOfComponents() -> "unsigned int":
        """GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF4_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)

    def Normalize(self) -> "double":
        """Normalize(itkCovariantVectorF4 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF4_Normalize(self)


    def GetSquaredNorm(self) -> "double":
        """GetSquaredNorm(itkCovariantVectorF4 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF4_GetSquaredNorm(self)


    def __getitem__(self, d: 'unsigned long') -> "float":
        """__getitem__(itkCovariantVectorF4 self, unsigned long d) -> float"""
        return _itkCovariantVectorPython.itkCovariantVectorF4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'float') -> "void":
        """__setitem__(itkCovariantVectorF4 self, unsigned long d, float v)"""
        return _itkCovariantVectorPython.itkCovariantVectorF4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkCovariantVectorF4 self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorF4___repr__(self)

itkCovariantVectorF4.SetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF4_SetVnlVector, None, itkCovariantVectorF4)
itkCovariantVectorF4.GetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF4_GetVnlVector, None, itkCovariantVectorF4)
itkCovariantVectorF4.__iadd__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF4___iadd__, None, itkCovariantVectorF4)
itkCovariantVectorF4.__isub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF4___isub__, None, itkCovariantVectorF4)
itkCovariantVectorF4.__neg__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF4___neg__, None, itkCovariantVectorF4)
itkCovariantVectorF4.__add__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF4___add__, None, itkCovariantVectorF4)
itkCovariantVectorF4.__sub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF4___sub__, None, itkCovariantVectorF4)
itkCovariantVectorF4.__mul__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF4___mul__, None, itkCovariantVectorF4)
itkCovariantVectorF4.GetNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF4_GetNorm, None, itkCovariantVectorF4)
itkCovariantVectorF4.Normalize = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF4_Normalize, None, itkCovariantVectorF4)
itkCovariantVectorF4.GetSquaredNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF4_GetSquaredNorm, None, itkCovariantVectorF4)
itkCovariantVectorF4.__getitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF4___getitem__, None, itkCovariantVectorF4)
itkCovariantVectorF4.__setitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF4___setitem__, None, itkCovariantVectorF4)
itkCovariantVectorF4.__repr__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF4___repr__, None, itkCovariantVectorF4)
itkCovariantVectorF4_swigregister = _itkCovariantVectorPython.itkCovariantVectorF4_swigregister
itkCovariantVectorF4_swigregister(itkCovariantVectorF4)

def itkCovariantVectorF4_GetCovariantVectorDimension() -> "unsigned int":
    """itkCovariantVectorF4_GetCovariantVectorDimension() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorF4_GetCovariantVectorDimension()

def itkCovariantVectorF4_GetNumberOfComponents() -> "unsigned int":
    """itkCovariantVectorF4_GetNumberOfComponents() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorF4_GetNumberOfComponents()

def itkCovariantVectorF4___len__() -> "unsigned int":
    """itkCovariantVectorF4___len__() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorF4___len__()

class itkCovariantVectorF5(itkFixedArrayPython.itkFixedArrayF5):
    """Proxy of C++ itkCovariantVectorF5 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetCovariantVectorDimension() -> "unsigned int":
        """GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF5_GetCovariantVectorDimension()

    GetCovariantVectorDimension = staticmethod(GetCovariantVectorDimension)

    def SetVnlVector(self, arg0: 'vnl_vectorF') -> "void":
        """SetVnlVector(itkCovariantVectorF5 self, vnl_vectorF arg0)"""
        return _itkCovariantVectorPython.itkCovariantVectorF5_SetVnlVector(self, arg0)


    def GetVnlVector(self, *args) -> "vnl_vectorF":
        """
        GetVnlVector(itkCovariantVectorF5 self) -> vnl_vector_refF
        GetVnlVector(itkCovariantVectorF5 self) -> vnl_vectorF
        """
        return _itkCovariantVectorPython.itkCovariantVectorF5_GetVnlVector(self, *args)

    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorF5

    def __init__(self, *args):
        """
        __init__(itkCovariantVectorF5 self) -> itkCovariantVectorF5
        __init__(itkCovariantVectorF5 self, itkCovariantVectorF5 arg0) -> itkCovariantVectorF5
        __init__(itkCovariantVectorF5 self, float const & r) -> itkCovariantVectorF5
        __init__(itkCovariantVectorF5 self, float const * r) -> itkCovariantVectorF5
        """
        _itkCovariantVectorPython.itkCovariantVectorF5_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorF5(*args))

    def __iadd__(self, vec: 'itkCovariantVectorF5') -> "itkCovariantVectorF5 const &":
        """__iadd__(itkCovariantVectorF5 self, itkCovariantVectorF5 vec) -> itkCovariantVectorF5"""
        return _itkCovariantVectorPython.itkCovariantVectorF5___iadd__(self, vec)


    def __isub__(self, vec: 'itkCovariantVectorF5') -> "itkCovariantVectorF5 const &":
        """__isub__(itkCovariantVectorF5 self, itkCovariantVectorF5 vec) -> itkCovariantVectorF5"""
        return _itkCovariantVectorPython.itkCovariantVectorF5___isub__(self, vec)


    def __neg__(self) -> "itkCovariantVectorF5":
        """__neg__(itkCovariantVectorF5 self) -> itkCovariantVectorF5"""
        return _itkCovariantVectorPython.itkCovariantVectorF5___neg__(self)


    def __add__(self, vec: 'itkCovariantVectorF5') -> "itkCovariantVectorF5":
        """__add__(itkCovariantVectorF5 self, itkCovariantVectorF5 vec) -> itkCovariantVectorF5"""
        return _itkCovariantVectorPython.itkCovariantVectorF5___add__(self, vec)


    def __sub__(self, vec: 'itkCovariantVectorF5') -> "itkCovariantVectorF5":
        """__sub__(itkCovariantVectorF5 self, itkCovariantVectorF5 vec) -> itkCovariantVectorF5"""
        return _itkCovariantVectorPython.itkCovariantVectorF5___sub__(self, vec)


    def __mul__(self, *args) -> "itkCovariantVectorF5":
        """
        __mul__(itkCovariantVectorF5 self, itkCovariantVectorF5 vec) -> float
        __mul__(itkCovariantVectorF5 self, itkVectorF5 vec) -> float
        __mul__(itkCovariantVectorF5 self, float const & val) -> itkCovariantVectorF5
        """
        return _itkCovariantVectorPython.itkCovariantVectorF5___mul__(self, *args)


    def GetNorm(self) -> "double":
        """GetNorm(itkCovariantVectorF5 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF5_GetNorm(self)


    def GetNumberOfComponents() -> "unsigned int":
        """GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF5_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)

    def Normalize(self) -> "double":
        """Normalize(itkCovariantVectorF5 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF5_Normalize(self)


    def GetSquaredNorm(self) -> "double":
        """GetSquaredNorm(itkCovariantVectorF5 self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF5_GetSquaredNorm(self)


    def __getitem__(self, d: 'unsigned long') -> "float":
        """__getitem__(itkCovariantVectorF5 self, unsigned long d) -> float"""
        return _itkCovariantVectorPython.itkCovariantVectorF5___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'float') -> "void":
        """__setitem__(itkCovariantVectorF5 self, unsigned long d, float v)"""
        return _itkCovariantVectorPython.itkCovariantVectorF5___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF5___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkCovariantVectorF5 self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorF5___repr__(self)

itkCovariantVectorF5.SetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF5_SetVnlVector, None, itkCovariantVectorF5)
itkCovariantVectorF5.GetVnlVector = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF5_GetVnlVector, None, itkCovariantVectorF5)
itkCovariantVectorF5.__iadd__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF5___iadd__, None, itkCovariantVectorF5)
itkCovariantVectorF5.__isub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF5___isub__, None, itkCovariantVectorF5)
itkCovariantVectorF5.__neg__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF5___neg__, None, itkCovariantVectorF5)
itkCovariantVectorF5.__add__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF5___add__, None, itkCovariantVectorF5)
itkCovariantVectorF5.__sub__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF5___sub__, None, itkCovariantVectorF5)
itkCovariantVectorF5.__mul__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF5___mul__, None, itkCovariantVectorF5)
itkCovariantVectorF5.GetNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF5_GetNorm, None, itkCovariantVectorF5)
itkCovariantVectorF5.Normalize = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF5_Normalize, None, itkCovariantVectorF5)
itkCovariantVectorF5.GetSquaredNorm = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF5_GetSquaredNorm, None, itkCovariantVectorF5)
itkCovariantVectorF5.__getitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF5___getitem__, None, itkCovariantVectorF5)
itkCovariantVectorF5.__setitem__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF5___setitem__, None, itkCovariantVectorF5)
itkCovariantVectorF5.__repr__ = new_instancemethod(_itkCovariantVectorPython.itkCovariantVectorF5___repr__, None, itkCovariantVectorF5)
itkCovariantVectorF5_swigregister = _itkCovariantVectorPython.itkCovariantVectorF5_swigregister
itkCovariantVectorF5_swigregister(itkCovariantVectorF5)

def itkCovariantVectorF5_GetCovariantVectorDimension() -> "unsigned int":
    """itkCovariantVectorF5_GetCovariantVectorDimension() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorF5_GetCovariantVectorDimension()

def itkCovariantVectorF5_GetNumberOfComponents() -> "unsigned int":
    """itkCovariantVectorF5_GetNumberOfComponents() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorF5_GetNumberOfComponents()

def itkCovariantVectorF5___len__() -> "unsigned int":
    """itkCovariantVectorF5___len__() -> unsigned int"""
    return _itkCovariantVectorPython.itkCovariantVectorF5___len__()



