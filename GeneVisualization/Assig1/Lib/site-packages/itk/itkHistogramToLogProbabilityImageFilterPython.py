# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkHistogramToLogProbabilityImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkHistogramToLogProbabilityImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkHistogramToLogProbabilityImageFilterPython
            return _itkHistogramToLogProbabilityImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkHistogramToLogProbabilityImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkHistogramToLogProbabilityImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkHistogramToLogProbabilityImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageSourcePython
import itkImageSourceCommonPython
import ITKCommonBasePython
import pyBasePython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkHistogramPython
import itkSamplePython
import itkArrayPython

def itkHistogramToLogProbabilityImageFilterHDIF3_New():
  return itkHistogramToLogProbabilityImageFilterHDIF3.New()


def itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_New():
  return itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.New()


def itkHistogramToLogProbabilityImageFilterHFIF3_New():
  return itkHistogramToLogProbabilityImageFilterHFIF3.New()


def itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_New():
  return itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.New()


def itkHistogramToLogProbabilityImageFilterHDIF2_New():
  return itkHistogramToLogProbabilityImageFilterHDIF2.New()


def itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_New():
  return itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.New()


def itkHistogramToLogProbabilityImageFilterHFIF2_New():
  return itkHistogramToLogProbabilityImageFilterHFIF2.New()


def itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_New():
  return itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHDIF2_Superclass(itkImageSourcePython.itkImageSourceIF2):
    """Proxy of C++ itkHistogramToLogProbabilityImageFilterHDIF2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_Pointer":
        """Clone(itkHistogramToLogProbabilityImageFilterHDIF2_Superclass self) -> itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramD') -> "void":
        """SetInput(itkHistogramToLogProbabilityImageFilterHDIF2_Superclass self, itkHistogramD histogram)"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramD const *":
        """GetInput(itkHistogramToLogProbabilityImageFilterHDIF2_Superclass self) -> itkHistogramD"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const &') -> "void":
        """SetFunctor(itkHistogramToLogProbabilityImageFilterHDIF2_Superclass self, itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const & functor)"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const &":
        """
        GetFunctor(itkHistogramToLogProbabilityImageFilterHDIF2_Superclass self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long long,float >
        GetFunctor(itkHistogramToLogProbabilityImageFilterHDIF2_Superclass self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long long') -> "void":
        """SetTotalFrequency(itkHistogramToLogProbabilityImageFilterHDIF2_Superclass self, unsigned long long n)"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDIF2_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHDIF2_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHDIF2_Superclass"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDIF2_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.Clone = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_Clone, None, itkHistogramToLogProbabilityImageFilterHDIF2_Superclass)
itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.SetInput = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_SetInput, None, itkHistogramToLogProbabilityImageFilterHDIF2_Superclass)
itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.GetInput = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_GetInput, None, itkHistogramToLogProbabilityImageFilterHDIF2_Superclass)
itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.SetFunctor = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_SetFunctor, None, itkHistogramToLogProbabilityImageFilterHDIF2_Superclass)
itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.GetFunctor = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_GetFunctor, None, itkHistogramToLogProbabilityImageFilterHDIF2_Superclass)
itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_SetTotalFrequency, None, itkHistogramToLogProbabilityImageFilterHDIF2_Superclass)
itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_swigregister = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_swigregister
itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHDIF2_Superclass)

def itkHistogramToLogProbabilityImageFilterHDIF2_Superclass___New_orig__() -> "itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_Pointer":
    """itkHistogramToLogProbabilityImageFilterHDIF2_Superclass___New_orig__() -> itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_Pointer"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass___New_orig__()

def itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHDIF2_Superclass *":
    """itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHDIF2_Superclass"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_cast(obj)

class itkHistogramToLogProbabilityImageFilterHDIF3_Superclass(itkImageSourcePython.itkImageSourceIF3):
    """Proxy of C++ itkHistogramToLogProbabilityImageFilterHDIF3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_Pointer":
        """Clone(itkHistogramToLogProbabilityImageFilterHDIF3_Superclass self) -> itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramD') -> "void":
        """SetInput(itkHistogramToLogProbabilityImageFilterHDIF3_Superclass self, itkHistogramD histogram)"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramD const *":
        """GetInput(itkHistogramToLogProbabilityImageFilterHDIF3_Superclass self) -> itkHistogramD"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const &') -> "void":
        """SetFunctor(itkHistogramToLogProbabilityImageFilterHDIF3_Superclass self, itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const & functor)"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const &":
        """
        GetFunctor(itkHistogramToLogProbabilityImageFilterHDIF3_Superclass self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long long,float >
        GetFunctor(itkHistogramToLogProbabilityImageFilterHDIF3_Superclass self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long long') -> "void":
        """SetTotalFrequency(itkHistogramToLogProbabilityImageFilterHDIF3_Superclass self, unsigned long long n)"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDIF3_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHDIF3_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHDIF3_Superclass"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDIF3_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.Clone = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_Clone, None, itkHistogramToLogProbabilityImageFilterHDIF3_Superclass)
itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.SetInput = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_SetInput, None, itkHistogramToLogProbabilityImageFilterHDIF3_Superclass)
itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.GetInput = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_GetInput, None, itkHistogramToLogProbabilityImageFilterHDIF3_Superclass)
itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.SetFunctor = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_SetFunctor, None, itkHistogramToLogProbabilityImageFilterHDIF3_Superclass)
itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.GetFunctor = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_GetFunctor, None, itkHistogramToLogProbabilityImageFilterHDIF3_Superclass)
itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_SetTotalFrequency, None, itkHistogramToLogProbabilityImageFilterHDIF3_Superclass)
itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_swigregister = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_swigregister
itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHDIF3_Superclass)

def itkHistogramToLogProbabilityImageFilterHDIF3_Superclass___New_orig__() -> "itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_Pointer":
    """itkHistogramToLogProbabilityImageFilterHDIF3_Superclass___New_orig__() -> itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_Pointer"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass___New_orig__()

def itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHDIF3_Superclass *":
    """itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHDIF3_Superclass"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_cast(obj)

class itkHistogramToLogProbabilityImageFilterHFIF2_Superclass(itkImageSourcePython.itkImageSourceIF2):
    """Proxy of C++ itkHistogramToLogProbabilityImageFilterHFIF2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_Pointer":
        """Clone(itkHistogramToLogProbabilityImageFilterHFIF2_Superclass self) -> itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramF') -> "void":
        """SetInput(itkHistogramToLogProbabilityImageFilterHFIF2_Superclass self, itkHistogramF histogram)"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramF const *":
        """GetInput(itkHistogramToLogProbabilityImageFilterHFIF2_Superclass self) -> itkHistogramF"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const &') -> "void":
        """SetFunctor(itkHistogramToLogProbabilityImageFilterHFIF2_Superclass self, itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const & functor)"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const &":
        """
        GetFunctor(itkHistogramToLogProbabilityImageFilterHFIF2_Superclass self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long long,float >
        GetFunctor(itkHistogramToLogProbabilityImageFilterHFIF2_Superclass self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long long') -> "void":
        """SetTotalFrequency(itkHistogramToLogProbabilityImageFilterHFIF2_Superclass self, unsigned long long n)"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFIF2_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHFIF2_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHFIF2_Superclass"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFIF2_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.Clone = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_Clone, None, itkHistogramToLogProbabilityImageFilterHFIF2_Superclass)
itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.SetInput = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_SetInput, None, itkHistogramToLogProbabilityImageFilterHFIF2_Superclass)
itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.GetInput = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_GetInput, None, itkHistogramToLogProbabilityImageFilterHFIF2_Superclass)
itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.SetFunctor = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_SetFunctor, None, itkHistogramToLogProbabilityImageFilterHFIF2_Superclass)
itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.GetFunctor = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_GetFunctor, None, itkHistogramToLogProbabilityImageFilterHFIF2_Superclass)
itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_SetTotalFrequency, None, itkHistogramToLogProbabilityImageFilterHFIF2_Superclass)
itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_swigregister = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_swigregister
itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHFIF2_Superclass)

def itkHistogramToLogProbabilityImageFilterHFIF2_Superclass___New_orig__() -> "itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_Pointer":
    """itkHistogramToLogProbabilityImageFilterHFIF2_Superclass___New_orig__() -> itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_Pointer"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass___New_orig__()

def itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHFIF2_Superclass *":
    """itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHFIF2_Superclass"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_cast(obj)

class itkHistogramToLogProbabilityImageFilterHFIF3_Superclass(itkImageSourcePython.itkImageSourceIF3):
    """Proxy of C++ itkHistogramToLogProbabilityImageFilterHFIF3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_Pointer":
        """__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_Pointer":
        """Clone(itkHistogramToLogProbabilityImageFilterHFIF3_Superclass self) -> itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_Clone(self)


    def SetInput(self, histogram: 'itkHistogramF') -> "void":
        """SetInput(itkHistogramToLogProbabilityImageFilterHFIF3_Superclass self, itkHistogramF histogram)"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_SetInput(self, histogram)


    def GetInput(self) -> "itkHistogramF const *":
        """GetInput(itkHistogramToLogProbabilityImageFilterHFIF3_Superclass self) -> itkHistogramF"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_GetInput(self)


    def SetFunctor(self, functor: 'itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const &') -> "void":
        """SetFunctor(itkHistogramToLogProbabilityImageFilterHFIF3_Superclass self, itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const & functor)"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_SetFunctor(self, functor)


    def GetFunctor(self, *args) -> "itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const &":
        """
        GetFunctor(itkHistogramToLogProbabilityImageFilterHFIF3_Superclass self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long long,float >
        GetFunctor(itkHistogramToLogProbabilityImageFilterHFIF3_Superclass self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long long,float > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_GetFunctor(self, *args)


    def SetTotalFrequency(self, n: 'unsigned long long') -> "void":
        """SetTotalFrequency(itkHistogramToLogProbabilityImageFilterHFIF3_Superclass self, unsigned long long n)"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_SetTotalFrequency(self, n)

    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFIF3_Superclass

    def cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHFIF3_Superclass *":
        """cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHFIF3_Superclass"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFIF3_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.Clone = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_Clone, None, itkHistogramToLogProbabilityImageFilterHFIF3_Superclass)
itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.SetInput = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_SetInput, None, itkHistogramToLogProbabilityImageFilterHFIF3_Superclass)
itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.GetInput = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_GetInput, None, itkHistogramToLogProbabilityImageFilterHFIF3_Superclass)
itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.SetFunctor = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_SetFunctor, None, itkHistogramToLogProbabilityImageFilterHFIF3_Superclass)
itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.GetFunctor = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_GetFunctor, None, itkHistogramToLogProbabilityImageFilterHFIF3_Superclass)
itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.SetTotalFrequency = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_SetTotalFrequency, None, itkHistogramToLogProbabilityImageFilterHFIF3_Superclass)
itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_swigregister = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_swigregister
itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHFIF3_Superclass)

def itkHistogramToLogProbabilityImageFilterHFIF3_Superclass___New_orig__() -> "itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_Pointer":
    """itkHistogramToLogProbabilityImageFilterHFIF3_Superclass___New_orig__() -> itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_Pointer"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass___New_orig__()

def itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHFIF3_Superclass *":
    """itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHFIF3_Superclass"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_cast(obj)

class itkHistogramToLogProbabilityImageFilterHDIF2(itkHistogramToLogProbabilityImageFilterHDIF2_Superclass):
    """Proxy of C++ itkHistogramToLogProbabilityImageFilterHDIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToLogProbabilityImageFilterHDIF2_Pointer":
        """__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDIF2_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToLogProbabilityImageFilterHDIF2_Pointer":
        """Clone(itkHistogramToLogProbabilityImageFilterHDIF2 self) -> itkHistogramToLogProbabilityImageFilterHDIF2_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Clone(self)

    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDIF2

    def cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHDIF2 *":
        """cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHDIF2"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDIF2

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToLogProbabilityImageFilterHDIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToLogProbabilityImageFilterHDIF2.Clone = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Clone, None, itkHistogramToLogProbabilityImageFilterHDIF2)
itkHistogramToLogProbabilityImageFilterHDIF2_swigregister = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_swigregister
itkHistogramToLogProbabilityImageFilterHDIF2_swigregister(itkHistogramToLogProbabilityImageFilterHDIF2)

def itkHistogramToLogProbabilityImageFilterHDIF2___New_orig__() -> "itkHistogramToLogProbabilityImageFilterHDIF2_Pointer":
    """itkHistogramToLogProbabilityImageFilterHDIF2___New_orig__() -> itkHistogramToLogProbabilityImageFilterHDIF2_Pointer"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2___New_orig__()

def itkHistogramToLogProbabilityImageFilterHDIF2_cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHDIF2 *":
    """itkHistogramToLogProbabilityImageFilterHDIF2_cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHDIF2"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_cast(obj)

class itkHistogramToLogProbabilityImageFilterHDIF3(itkHistogramToLogProbabilityImageFilterHDIF3_Superclass):
    """Proxy of C++ itkHistogramToLogProbabilityImageFilterHDIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToLogProbabilityImageFilterHDIF3_Pointer":
        """__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDIF3_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToLogProbabilityImageFilterHDIF3_Pointer":
        """Clone(itkHistogramToLogProbabilityImageFilterHDIF3 self) -> itkHistogramToLogProbabilityImageFilterHDIF3_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Clone(self)

    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDIF3

    def cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHDIF3 *":
        """cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHDIF3"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDIF3

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToLogProbabilityImageFilterHDIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToLogProbabilityImageFilterHDIF3.Clone = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Clone, None, itkHistogramToLogProbabilityImageFilterHDIF3)
itkHistogramToLogProbabilityImageFilterHDIF3_swigregister = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_swigregister
itkHistogramToLogProbabilityImageFilterHDIF3_swigregister(itkHistogramToLogProbabilityImageFilterHDIF3)

def itkHistogramToLogProbabilityImageFilterHDIF3___New_orig__() -> "itkHistogramToLogProbabilityImageFilterHDIF3_Pointer":
    """itkHistogramToLogProbabilityImageFilterHDIF3___New_orig__() -> itkHistogramToLogProbabilityImageFilterHDIF3_Pointer"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3___New_orig__()

def itkHistogramToLogProbabilityImageFilterHDIF3_cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHDIF3 *":
    """itkHistogramToLogProbabilityImageFilterHDIF3_cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHDIF3"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_cast(obj)

class itkHistogramToLogProbabilityImageFilterHFIF2(itkHistogramToLogProbabilityImageFilterHFIF2_Superclass):
    """Proxy of C++ itkHistogramToLogProbabilityImageFilterHFIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToLogProbabilityImageFilterHFIF2_Pointer":
        """__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFIF2_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToLogProbabilityImageFilterHFIF2_Pointer":
        """Clone(itkHistogramToLogProbabilityImageFilterHFIF2 self) -> itkHistogramToLogProbabilityImageFilterHFIF2_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Clone(self)

    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFIF2

    def cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHFIF2 *":
        """cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHFIF2"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFIF2

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToLogProbabilityImageFilterHFIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToLogProbabilityImageFilterHFIF2.Clone = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Clone, None, itkHistogramToLogProbabilityImageFilterHFIF2)
itkHistogramToLogProbabilityImageFilterHFIF2_swigregister = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_swigregister
itkHistogramToLogProbabilityImageFilterHFIF2_swigregister(itkHistogramToLogProbabilityImageFilterHFIF2)

def itkHistogramToLogProbabilityImageFilterHFIF2___New_orig__() -> "itkHistogramToLogProbabilityImageFilterHFIF2_Pointer":
    """itkHistogramToLogProbabilityImageFilterHFIF2___New_orig__() -> itkHistogramToLogProbabilityImageFilterHFIF2_Pointer"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2___New_orig__()

def itkHistogramToLogProbabilityImageFilterHFIF2_cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHFIF2 *":
    """itkHistogramToLogProbabilityImageFilterHFIF2_cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHFIF2"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_cast(obj)

class itkHistogramToLogProbabilityImageFilterHFIF3(itkHistogramToLogProbabilityImageFilterHFIF3_Superclass):
    """Proxy of C++ itkHistogramToLogProbabilityImageFilterHFIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramToLogProbabilityImageFilterHFIF3_Pointer":
        """__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFIF3_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramToLogProbabilityImageFilterHFIF3_Pointer":
        """Clone(itkHistogramToLogProbabilityImageFilterHFIF3 self) -> itkHistogramToLogProbabilityImageFilterHFIF3_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Clone(self)

    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFIF3

    def cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHFIF3 *":
        """cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHFIF3"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFIF3

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramToLogProbabilityImageFilterHFIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramToLogProbabilityImageFilterHFIF3.Clone = new_instancemethod(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Clone, None, itkHistogramToLogProbabilityImageFilterHFIF3)
itkHistogramToLogProbabilityImageFilterHFIF3_swigregister = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_swigregister
itkHistogramToLogProbabilityImageFilterHFIF3_swigregister(itkHistogramToLogProbabilityImageFilterHFIF3)

def itkHistogramToLogProbabilityImageFilterHFIF3___New_orig__() -> "itkHistogramToLogProbabilityImageFilterHFIF3_Pointer":
    """itkHistogramToLogProbabilityImageFilterHFIF3___New_orig__() -> itkHistogramToLogProbabilityImageFilterHFIF3_Pointer"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3___New_orig__()

def itkHistogramToLogProbabilityImageFilterHFIF3_cast(obj: 'itkLightObject') -> "itkHistogramToLogProbabilityImageFilterHFIF3 *":
    """itkHistogramToLogProbabilityImageFilterHFIF3_cast(itkLightObject obj) -> itkHistogramToLogProbabilityImageFilterHFIF3"""
    return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_cast(obj)


def histogram_to_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToImageFilter"""
    import itk
    instance = itk.HistogramToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.HistogramToImageFilter, itkTemplate.itkTemplate):
        histogram_to_image_filter.__doc__ = itk.HistogramToImageFilter.values()[0].__doc__
    else:
        histogram_to_image_filter.__doc__ = itk.HistogramToImageFilter.__doc__

def histogram_to_log_probability_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToLogProbabilityImageFilter"""
    import itk
    instance = itk.HistogramToLogProbabilityImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_log_probability_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.HistogramToLogProbabilityImageFilter, itkTemplate.itkTemplate):
        histogram_to_log_probability_image_filter.__doc__ = itk.HistogramToLogProbabilityImageFilter.values()[0].__doc__
    else:
        histogram_to_log_probability_image_filter.__doc__ = itk.HistogramToLogProbabilityImageFilter.__doc__




