# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSquaredDifferenceImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSquaredDifferenceImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkSquaredDifferenceImageFilterPython
            return _itkSquaredDifferenceImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSquaredDifferenceImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSquaredDifferenceImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSquaredDifferenceImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkBinaryGeneratorImageFilterPython
import itkInPlaceImageFilterBPython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkSimpleDataObjectDecoratorPython
import itkArrayPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython

def itkSquaredDifferenceImageFilterIF3IF3IF3_New():
  return itkSquaredDifferenceImageFilterIF3IF3IF3.New()


def itkSquaredDifferenceImageFilterIF2IF2IF2_New():
  return itkSquaredDifferenceImageFilterIF2IF2IF2.New()


def itkSquaredDifferenceImageFilterIUS3IUS3IUS3_New():
  return itkSquaredDifferenceImageFilterIUS3IUS3IUS3.New()


def itkSquaredDifferenceImageFilterIUS2IUS2IUS2_New():
  return itkSquaredDifferenceImageFilterIUS2IUS2IUS2.New()


def itkSquaredDifferenceImageFilterIUC3IUC3IUC3_New():
  return itkSquaredDifferenceImageFilterIUC3IUC3IUC3.New()


def itkSquaredDifferenceImageFilterIUC2IUC2IUC2_New():
  return itkSquaredDifferenceImageFilterIUC2IUC2IUC2.New()


def itkSquaredDifferenceImageFilterISS3ISS3ISS3_New():
  return itkSquaredDifferenceImageFilterISS3ISS3ISS3.New()


def itkSquaredDifferenceImageFilterISS2ISS2ISS2_New():
  return itkSquaredDifferenceImageFilterISS2ISS2ISS2.New()

class itkSquaredDifferenceImageFilterIF2IF2IF2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    """Proxy of C++ itkSquaredDifferenceImageFilterIF2IF2IF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSquaredDifferenceImageFilterIF2IF2IF2_Pointer":
        """__New_orig__() -> itkSquaredDifferenceImageFilterIF2IF2IF2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSquaredDifferenceImageFilterIF2IF2IF2_Pointer":
        """Clone(itkSquaredDifferenceImageFilterIF2IF2IF2 self) -> itkSquaredDifferenceImageFilterIF2IF2IF2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIF2IF2IF2

    def cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterIF2IF2IF2 *":
        """cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterIF2IF2IF2"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIF2IF2IF2

        Create a new object of the class itkSquaredDifferenceImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIF2IF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIF2IF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSquaredDifferenceImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSquaredDifferenceImageFilterIF2IF2IF2.Clone = new_instancemethod(_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2_Clone, None, itkSquaredDifferenceImageFilterIF2IF2IF2)
itkSquaredDifferenceImageFilterIF2IF2IF2_swigregister = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2_swigregister
itkSquaredDifferenceImageFilterIF2IF2IF2_swigregister(itkSquaredDifferenceImageFilterIF2IF2IF2)

def itkSquaredDifferenceImageFilterIF2IF2IF2___New_orig__() -> "itkSquaredDifferenceImageFilterIF2IF2IF2_Pointer":
    """itkSquaredDifferenceImageFilterIF2IF2IF2___New_orig__() -> itkSquaredDifferenceImageFilterIF2IF2IF2_Pointer"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2___New_orig__()

def itkSquaredDifferenceImageFilterIF2IF2IF2_cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterIF2IF2IF2 *":
    """itkSquaredDifferenceImageFilterIF2IF2IF2_cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterIF2IF2IF2"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2_cast(obj)

class itkSquaredDifferenceImageFilterIF3IF3IF3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    """Proxy of C++ itkSquaredDifferenceImageFilterIF3IF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSquaredDifferenceImageFilterIF3IF3IF3_Pointer":
        """__New_orig__() -> itkSquaredDifferenceImageFilterIF3IF3IF3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSquaredDifferenceImageFilterIF3IF3IF3_Pointer":
        """Clone(itkSquaredDifferenceImageFilterIF3IF3IF3 self) -> itkSquaredDifferenceImageFilterIF3IF3IF3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIF3IF3IF3

    def cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterIF3IF3IF3 *":
        """cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterIF3IF3IF3"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIF3IF3IF3

        Create a new object of the class itkSquaredDifferenceImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIF3IF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIF3IF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSquaredDifferenceImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSquaredDifferenceImageFilterIF3IF3IF3.Clone = new_instancemethod(_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3_Clone, None, itkSquaredDifferenceImageFilterIF3IF3IF3)
itkSquaredDifferenceImageFilterIF3IF3IF3_swigregister = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3_swigregister
itkSquaredDifferenceImageFilterIF3IF3IF3_swigregister(itkSquaredDifferenceImageFilterIF3IF3IF3)

def itkSquaredDifferenceImageFilterIF3IF3IF3___New_orig__() -> "itkSquaredDifferenceImageFilterIF3IF3IF3_Pointer":
    """itkSquaredDifferenceImageFilterIF3IF3IF3___New_orig__() -> itkSquaredDifferenceImageFilterIF3IF3IF3_Pointer"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3___New_orig__()

def itkSquaredDifferenceImageFilterIF3IF3IF3_cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterIF3IF3IF3 *":
    """itkSquaredDifferenceImageFilterIF3IF3IF3_cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterIF3IF3IF3"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3_cast(obj)

class itkSquaredDifferenceImageFilterISS2ISS2ISS2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    """Proxy of C++ itkSquaredDifferenceImageFilterISS2ISS2ISS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSquaredDifferenceImageFilterISS2ISS2ISS2_Pointer":
        """__New_orig__() -> itkSquaredDifferenceImageFilterISS2ISS2ISS2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSquaredDifferenceImageFilterISS2ISS2ISS2_Pointer":
        """Clone(itkSquaredDifferenceImageFilterISS2ISS2ISS2 self) -> itkSquaredDifferenceImageFilterISS2ISS2ISS2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterISS2ISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterISS2ISS2ISS2 *":
        """cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterISS2ISS2ISS2"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterISS2ISS2ISS2

        Create a new object of the class itkSquaredDifferenceImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterISS2ISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterISS2ISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSquaredDifferenceImageFilterISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSquaredDifferenceImageFilterISS2ISS2ISS2.Clone = new_instancemethod(_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2_Clone, None, itkSquaredDifferenceImageFilterISS2ISS2ISS2)
itkSquaredDifferenceImageFilterISS2ISS2ISS2_swigregister = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2_swigregister
itkSquaredDifferenceImageFilterISS2ISS2ISS2_swigregister(itkSquaredDifferenceImageFilterISS2ISS2ISS2)

def itkSquaredDifferenceImageFilterISS2ISS2ISS2___New_orig__() -> "itkSquaredDifferenceImageFilterISS2ISS2ISS2_Pointer":
    """itkSquaredDifferenceImageFilterISS2ISS2ISS2___New_orig__() -> itkSquaredDifferenceImageFilterISS2ISS2ISS2_Pointer"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2___New_orig__()

def itkSquaredDifferenceImageFilterISS2ISS2ISS2_cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterISS2ISS2ISS2 *":
    """itkSquaredDifferenceImageFilterISS2ISS2ISS2_cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterISS2ISS2ISS2"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2_cast(obj)

class itkSquaredDifferenceImageFilterISS3ISS3ISS3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    """Proxy of C++ itkSquaredDifferenceImageFilterISS3ISS3ISS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSquaredDifferenceImageFilterISS3ISS3ISS3_Pointer":
        """__New_orig__() -> itkSquaredDifferenceImageFilterISS3ISS3ISS3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSquaredDifferenceImageFilterISS3ISS3ISS3_Pointer":
        """Clone(itkSquaredDifferenceImageFilterISS3ISS3ISS3 self) -> itkSquaredDifferenceImageFilterISS3ISS3ISS3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterISS3ISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterISS3ISS3ISS3 *":
        """cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterISS3ISS3ISS3"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterISS3ISS3ISS3

        Create a new object of the class itkSquaredDifferenceImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterISS3ISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterISS3ISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSquaredDifferenceImageFilterISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSquaredDifferenceImageFilterISS3ISS3ISS3.Clone = new_instancemethod(_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3_Clone, None, itkSquaredDifferenceImageFilterISS3ISS3ISS3)
itkSquaredDifferenceImageFilterISS3ISS3ISS3_swigregister = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3_swigregister
itkSquaredDifferenceImageFilterISS3ISS3ISS3_swigregister(itkSquaredDifferenceImageFilterISS3ISS3ISS3)

def itkSquaredDifferenceImageFilterISS3ISS3ISS3___New_orig__() -> "itkSquaredDifferenceImageFilterISS3ISS3ISS3_Pointer":
    """itkSquaredDifferenceImageFilterISS3ISS3ISS3___New_orig__() -> itkSquaredDifferenceImageFilterISS3ISS3ISS3_Pointer"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3___New_orig__()

def itkSquaredDifferenceImageFilterISS3ISS3ISS3_cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterISS3ISS3ISS3 *":
    """itkSquaredDifferenceImageFilterISS3ISS3ISS3_cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterISS3ISS3ISS3"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3_cast(obj)

class itkSquaredDifferenceImageFilterIUC2IUC2IUC2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    """Proxy of C++ itkSquaredDifferenceImageFilterIUC2IUC2IUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Pointer":
        """__New_orig__() -> itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Pointer":
        """Clone(itkSquaredDifferenceImageFilterIUC2IUC2IUC2 self) -> itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIUC2IUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterIUC2IUC2IUC2 *":
        """cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterIUC2IUC2IUC2"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIUC2IUC2IUC2

        Create a new object of the class itkSquaredDifferenceImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIUC2IUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIUC2IUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSquaredDifferenceImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSquaredDifferenceImageFilterIUC2IUC2IUC2.Clone = new_instancemethod(_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Clone, None, itkSquaredDifferenceImageFilterIUC2IUC2IUC2)
itkSquaredDifferenceImageFilterIUC2IUC2IUC2_swigregister = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2_swigregister
itkSquaredDifferenceImageFilterIUC2IUC2IUC2_swigregister(itkSquaredDifferenceImageFilterIUC2IUC2IUC2)

def itkSquaredDifferenceImageFilterIUC2IUC2IUC2___New_orig__() -> "itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Pointer":
    """itkSquaredDifferenceImageFilterIUC2IUC2IUC2___New_orig__() -> itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Pointer"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2___New_orig__()

def itkSquaredDifferenceImageFilterIUC2IUC2IUC2_cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterIUC2IUC2IUC2 *":
    """itkSquaredDifferenceImageFilterIUC2IUC2IUC2_cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterIUC2IUC2IUC2"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2_cast(obj)

class itkSquaredDifferenceImageFilterIUC3IUC3IUC3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    """Proxy of C++ itkSquaredDifferenceImageFilterIUC3IUC3IUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Pointer":
        """__New_orig__() -> itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Pointer":
        """Clone(itkSquaredDifferenceImageFilterIUC3IUC3IUC3 self) -> itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIUC3IUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterIUC3IUC3IUC3 *":
        """cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterIUC3IUC3IUC3"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIUC3IUC3IUC3

        Create a new object of the class itkSquaredDifferenceImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIUC3IUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIUC3IUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSquaredDifferenceImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSquaredDifferenceImageFilterIUC3IUC3IUC3.Clone = new_instancemethod(_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Clone, None, itkSquaredDifferenceImageFilterIUC3IUC3IUC3)
itkSquaredDifferenceImageFilterIUC3IUC3IUC3_swigregister = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3_swigregister
itkSquaredDifferenceImageFilterIUC3IUC3IUC3_swigregister(itkSquaredDifferenceImageFilterIUC3IUC3IUC3)

def itkSquaredDifferenceImageFilterIUC3IUC3IUC3___New_orig__() -> "itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Pointer":
    """itkSquaredDifferenceImageFilterIUC3IUC3IUC3___New_orig__() -> itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Pointer"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3___New_orig__()

def itkSquaredDifferenceImageFilterIUC3IUC3IUC3_cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterIUC3IUC3IUC3 *":
    """itkSquaredDifferenceImageFilterIUC3IUC3IUC3_cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterIUC3IUC3IUC3"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3_cast(obj)

class itkSquaredDifferenceImageFilterIUS2IUS2IUS2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    """Proxy of C++ itkSquaredDifferenceImageFilterIUS2IUS2IUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Pointer":
        """__New_orig__() -> itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Pointer":
        """Clone(itkSquaredDifferenceImageFilterIUS2IUS2IUS2 self) -> itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIUS2IUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterIUS2IUS2IUS2 *":
        """cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterIUS2IUS2IUS2"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIUS2IUS2IUS2

        Create a new object of the class itkSquaredDifferenceImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIUS2IUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIUS2IUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSquaredDifferenceImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSquaredDifferenceImageFilterIUS2IUS2IUS2.Clone = new_instancemethod(_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Clone, None, itkSquaredDifferenceImageFilterIUS2IUS2IUS2)
itkSquaredDifferenceImageFilterIUS2IUS2IUS2_swigregister = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2_swigregister
itkSquaredDifferenceImageFilterIUS2IUS2IUS2_swigregister(itkSquaredDifferenceImageFilterIUS2IUS2IUS2)

def itkSquaredDifferenceImageFilterIUS2IUS2IUS2___New_orig__() -> "itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Pointer":
    """itkSquaredDifferenceImageFilterIUS2IUS2IUS2___New_orig__() -> itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Pointer"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2___New_orig__()

def itkSquaredDifferenceImageFilterIUS2IUS2IUS2_cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterIUS2IUS2IUS2 *":
    """itkSquaredDifferenceImageFilterIUS2IUS2IUS2_cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterIUS2IUS2IUS2"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2_cast(obj)

class itkSquaredDifferenceImageFilterIUS3IUS3IUS3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    """Proxy of C++ itkSquaredDifferenceImageFilterIUS3IUS3IUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Pointer":
        """__New_orig__() -> itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Pointer":
        """Clone(itkSquaredDifferenceImageFilterIUS3IUS3IUS3 self) -> itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIUS3IUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterIUS3IUS3IUS3 *":
        """cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterIUS3IUS3IUS3"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIUS3IUS3IUS3

        Create a new object of the class itkSquaredDifferenceImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIUS3IUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIUS3IUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSquaredDifferenceImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSquaredDifferenceImageFilterIUS3IUS3IUS3.Clone = new_instancemethod(_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Clone, None, itkSquaredDifferenceImageFilterIUS3IUS3IUS3)
itkSquaredDifferenceImageFilterIUS3IUS3IUS3_swigregister = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3_swigregister
itkSquaredDifferenceImageFilterIUS3IUS3IUS3_swigregister(itkSquaredDifferenceImageFilterIUS3IUS3IUS3)

def itkSquaredDifferenceImageFilterIUS3IUS3IUS3___New_orig__() -> "itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Pointer":
    """itkSquaredDifferenceImageFilterIUS3IUS3IUS3___New_orig__() -> itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Pointer"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3___New_orig__()

def itkSquaredDifferenceImageFilterIUS3IUS3IUS3_cast(obj: 'itkLightObject') -> "itkSquaredDifferenceImageFilterIUS3IUS3IUS3 *":
    """itkSquaredDifferenceImageFilterIUS3IUS3IUS3_cast(itkLightObject obj) -> itkSquaredDifferenceImageFilterIUS3IUS3IUS3"""
    return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3_cast(obj)


def squared_difference_image_filter(*args, **kwargs):
    """Procedural interface for SquaredDifferenceImageFilter"""
    import itk
    instance = itk.SquaredDifferenceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def squared_difference_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.SquaredDifferenceImageFilter, itkTemplate.itkTemplate):
        squared_difference_image_filter.__doc__ = itk.SquaredDifferenceImageFilter.values()[0].__doc__
    else:
        squared_difference_image_filter.__doc__ = itk.SquaredDifferenceImageFilter.__doc__




