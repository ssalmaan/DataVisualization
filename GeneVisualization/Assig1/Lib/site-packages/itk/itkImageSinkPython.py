# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImageSinkPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImageSinkPython', [dirname(__file__)])
        except ImportError:
            import _itkImageSinkPython
            return _itkImageSinkPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImageSinkPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImageSinkPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImageSinkPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import itkOffsetPython
import itkSizePython
import pyBasePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import ITKCommonBasePython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkImageToImageFilterCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython

def itkImageSinkVIF3_New():
  return itkImageSinkVIF3.New()


def itkImageSinkVIUS3_New():
  return itkImageSinkVIUS3.New()


def itkImageSinkVIUC3_New():
  return itkImageSinkVIUC3.New()


def itkImageSinkVISS3_New():
  return itkImageSinkVISS3.New()


def itkImageSinkVIF2_New():
  return itkImageSinkVIF2.New()


def itkImageSinkVIUS2_New():
  return itkImageSinkVIUS2.New()


def itkImageSinkVIUC2_New():
  return itkImageSinkVIUC2.New()


def itkImageSinkVISS2_New():
  return itkImageSinkVISS2.New()


def itkImageSinkICF3_New():
  return itkImageSinkICF3.New()


def itkImageSinkICF2_New():
  return itkImageSinkICF2.New()


def itkImageSinkIF3_New():
  return itkImageSinkIF3.New()


def itkImageSinkIF2_New():
  return itkImageSinkIF2.New()


def itkImageSinkIUS3_New():
  return itkImageSinkIUS3.New()


def itkImageSinkIUS2_New():
  return itkImageSinkIUS2.New()


def itkImageSinkIUC3_New():
  return itkImageSinkIUC3.New()


def itkImageSinkIUC2_New():
  return itkImageSinkIUC2.New()


def itkImageSinkISS3_New():
  return itkImageSinkISS3.New()


def itkImageSinkISS2_New():
  return itkImageSinkISS2.New()


def itkImageSinkICVF43_New():
  return itkImageSinkICVF43.New()


def itkImageSinkICVF42_New():
  return itkImageSinkICVF42.New()


def itkImageSinkICVF33_New():
  return itkImageSinkICVF33.New()


def itkImageSinkICVF32_New():
  return itkImageSinkICVF32.New()


def itkImageSinkICVF23_New():
  return itkImageSinkICVF23.New()


def itkImageSinkICVF22_New():
  return itkImageSinkICVF22.New()


def itkImageSinkIVF43_New():
  return itkImageSinkIVF43.New()


def itkImageSinkIVF42_New():
  return itkImageSinkIVF42.New()


def itkImageSinkIVF33_New():
  return itkImageSinkIVF33.New()


def itkImageSinkIVF32_New():
  return itkImageSinkIVF32.New()


def itkImageSinkIVF23_New():
  return itkImageSinkIVF23.New()


def itkImageSinkIVF22_New():
  return itkImageSinkIVF22.New()


def itkImageSinkIRGBAUC3_New():
  return itkImageSinkIRGBAUC3.New()


def itkImageSinkIRGBAUC2_New():
  return itkImageSinkIRGBAUC2.New()


def itkImageSinkIRGBUC3_New():
  return itkImageSinkIRGBUC3.New()


def itkImageSinkIRGBUC2_New():
  return itkImageSinkIRGBUC2.New()

class itkImageSinkICF2(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkICF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageCF2') -> "void":
        """SetInput(itkImageSinkICF2 self, itkImageCF2 input)"""
        return _itkImageSinkPython.itkImageSinkICF2_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageCF2 const *":
        """
        GetInput(itkImageSinkICF2 self) -> itkImageCF2
        GetInput(itkImageSinkICF2 self, unsigned int idx) -> itkImageCF2
        GetInput(itkImageSinkICF2 self, std::string const & key) -> itkImageCF2
        """
        return _itkImageSinkPython.itkImageSinkICF2_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkICF2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICF2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkICF2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICF2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkICF2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICF2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkICF2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICF2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkICF2

    def cast(obj: 'itkLightObject') -> "itkImageSinkICF2 *":
        """cast(itkLightObject obj) -> itkImageSinkICF2"""
        return _itkImageSinkPython.itkImageSinkICF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkICF2

        Create a new object of the class itkImageSinkICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkICF2.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICF2_SetInput, None, itkImageSinkICF2)
itkImageSinkICF2.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICF2_GetInput, None, itkImageSinkICF2)
itkImageSinkICF2.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICF2_SetCoordinateTolerance, None, itkImageSinkICF2)
itkImageSinkICF2.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICF2_GetCoordinateTolerance, None, itkImageSinkICF2)
itkImageSinkICF2.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICF2_SetDirectionTolerance, None, itkImageSinkICF2)
itkImageSinkICF2.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICF2_GetDirectionTolerance, None, itkImageSinkICF2)
itkImageSinkICF2_swigregister = _itkImageSinkPython.itkImageSinkICF2_swigregister
itkImageSinkICF2_swigregister(itkImageSinkICF2)

def itkImageSinkICF2_cast(obj: 'itkLightObject') -> "itkImageSinkICF2 *":
    """itkImageSinkICF2_cast(itkLightObject obj) -> itkImageSinkICF2"""
    return _itkImageSinkPython.itkImageSinkICF2_cast(obj)

class itkImageSinkICF3(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkICF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageCF3') -> "void":
        """SetInput(itkImageSinkICF3 self, itkImageCF3 input)"""
        return _itkImageSinkPython.itkImageSinkICF3_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageCF3 const *":
        """
        GetInput(itkImageSinkICF3 self) -> itkImageCF3
        GetInput(itkImageSinkICF3 self, unsigned int idx) -> itkImageCF3
        GetInput(itkImageSinkICF3 self, std::string const & key) -> itkImageCF3
        """
        return _itkImageSinkPython.itkImageSinkICF3_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkICF3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICF3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkICF3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICF3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkICF3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICF3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkICF3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICF3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkICF3

    def cast(obj: 'itkLightObject') -> "itkImageSinkICF3 *":
        """cast(itkLightObject obj) -> itkImageSinkICF3"""
        return _itkImageSinkPython.itkImageSinkICF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkICF3

        Create a new object of the class itkImageSinkICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkICF3.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICF3_SetInput, None, itkImageSinkICF3)
itkImageSinkICF3.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICF3_GetInput, None, itkImageSinkICF3)
itkImageSinkICF3.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICF3_SetCoordinateTolerance, None, itkImageSinkICF3)
itkImageSinkICF3.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICF3_GetCoordinateTolerance, None, itkImageSinkICF3)
itkImageSinkICF3.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICF3_SetDirectionTolerance, None, itkImageSinkICF3)
itkImageSinkICF3.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICF3_GetDirectionTolerance, None, itkImageSinkICF3)
itkImageSinkICF3_swigregister = _itkImageSinkPython.itkImageSinkICF3_swigregister
itkImageSinkICF3_swigregister(itkImageSinkICF3)

def itkImageSinkICF3_cast(obj: 'itkLightObject') -> "itkImageSinkICF3 *":
    """itkImageSinkICF3_cast(itkLightObject obj) -> itkImageSinkICF3"""
    return _itkImageSinkPython.itkImageSinkICF3_cast(obj)

class itkImageSinkICVF22(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkICVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageCVF22') -> "void":
        """SetInput(itkImageSinkICVF22 self, itkImageCVF22 input)"""
        return _itkImageSinkPython.itkImageSinkICVF22_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageCVF22 const *":
        """
        GetInput(itkImageSinkICVF22 self) -> itkImageCVF22
        GetInput(itkImageSinkICVF22 self, unsigned int idx) -> itkImageCVF22
        GetInput(itkImageSinkICVF22 self, std::string const & key) -> itkImageCVF22
        """
        return _itkImageSinkPython.itkImageSinkICVF22_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkICVF22 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICVF22_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkICVF22 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICVF22_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkICVF22 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICVF22_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkICVF22 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICVF22_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkICVF22

    def cast(obj: 'itkLightObject') -> "itkImageSinkICVF22 *":
        """cast(itkLightObject obj) -> itkImageSinkICVF22"""
        return _itkImageSinkPython.itkImageSinkICVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkICVF22

        Create a new object of the class itkImageSinkICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkICVF22.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF22_SetInput, None, itkImageSinkICVF22)
itkImageSinkICVF22.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF22_GetInput, None, itkImageSinkICVF22)
itkImageSinkICVF22.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF22_SetCoordinateTolerance, None, itkImageSinkICVF22)
itkImageSinkICVF22.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF22_GetCoordinateTolerance, None, itkImageSinkICVF22)
itkImageSinkICVF22.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF22_SetDirectionTolerance, None, itkImageSinkICVF22)
itkImageSinkICVF22.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF22_GetDirectionTolerance, None, itkImageSinkICVF22)
itkImageSinkICVF22_swigregister = _itkImageSinkPython.itkImageSinkICVF22_swigregister
itkImageSinkICVF22_swigregister(itkImageSinkICVF22)

def itkImageSinkICVF22_cast(obj: 'itkLightObject') -> "itkImageSinkICVF22 *":
    """itkImageSinkICVF22_cast(itkLightObject obj) -> itkImageSinkICVF22"""
    return _itkImageSinkPython.itkImageSinkICVF22_cast(obj)

class itkImageSinkICVF23(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkICVF23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageCVF23') -> "void":
        """SetInput(itkImageSinkICVF23 self, itkImageCVF23 input)"""
        return _itkImageSinkPython.itkImageSinkICVF23_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageCVF23 const *":
        """
        GetInput(itkImageSinkICVF23 self) -> itkImageCVF23
        GetInput(itkImageSinkICVF23 self, unsigned int idx) -> itkImageCVF23
        GetInput(itkImageSinkICVF23 self, std::string const & key) -> itkImageCVF23
        """
        return _itkImageSinkPython.itkImageSinkICVF23_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkICVF23 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICVF23_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkICVF23 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICVF23_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkICVF23 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICVF23_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkICVF23 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICVF23_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkICVF23

    def cast(obj: 'itkLightObject') -> "itkImageSinkICVF23 *":
        """cast(itkLightObject obj) -> itkImageSinkICVF23"""
        return _itkImageSinkPython.itkImageSinkICVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkICVF23

        Create a new object of the class itkImageSinkICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkICVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkICVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkICVF23.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF23_SetInput, None, itkImageSinkICVF23)
itkImageSinkICVF23.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF23_GetInput, None, itkImageSinkICVF23)
itkImageSinkICVF23.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF23_SetCoordinateTolerance, None, itkImageSinkICVF23)
itkImageSinkICVF23.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF23_GetCoordinateTolerance, None, itkImageSinkICVF23)
itkImageSinkICVF23.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF23_SetDirectionTolerance, None, itkImageSinkICVF23)
itkImageSinkICVF23.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF23_GetDirectionTolerance, None, itkImageSinkICVF23)
itkImageSinkICVF23_swigregister = _itkImageSinkPython.itkImageSinkICVF23_swigregister
itkImageSinkICVF23_swigregister(itkImageSinkICVF23)

def itkImageSinkICVF23_cast(obj: 'itkLightObject') -> "itkImageSinkICVF23 *":
    """itkImageSinkICVF23_cast(itkLightObject obj) -> itkImageSinkICVF23"""
    return _itkImageSinkPython.itkImageSinkICVF23_cast(obj)

class itkImageSinkICVF32(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkICVF32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageCVF32') -> "void":
        """SetInput(itkImageSinkICVF32 self, itkImageCVF32 input)"""
        return _itkImageSinkPython.itkImageSinkICVF32_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageCVF32 const *":
        """
        GetInput(itkImageSinkICVF32 self) -> itkImageCVF32
        GetInput(itkImageSinkICVF32 self, unsigned int idx) -> itkImageCVF32
        GetInput(itkImageSinkICVF32 self, std::string const & key) -> itkImageCVF32
        """
        return _itkImageSinkPython.itkImageSinkICVF32_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkICVF32 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICVF32_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkICVF32 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICVF32_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkICVF32 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICVF32_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkICVF32 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICVF32_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkICVF32

    def cast(obj: 'itkLightObject') -> "itkImageSinkICVF32 *":
        """cast(itkLightObject obj) -> itkImageSinkICVF32"""
        return _itkImageSinkPython.itkImageSinkICVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkICVF32

        Create a new object of the class itkImageSinkICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkICVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkICVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkICVF32.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF32_SetInput, None, itkImageSinkICVF32)
itkImageSinkICVF32.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF32_GetInput, None, itkImageSinkICVF32)
itkImageSinkICVF32.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF32_SetCoordinateTolerance, None, itkImageSinkICVF32)
itkImageSinkICVF32.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF32_GetCoordinateTolerance, None, itkImageSinkICVF32)
itkImageSinkICVF32.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF32_SetDirectionTolerance, None, itkImageSinkICVF32)
itkImageSinkICVF32.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF32_GetDirectionTolerance, None, itkImageSinkICVF32)
itkImageSinkICVF32_swigregister = _itkImageSinkPython.itkImageSinkICVF32_swigregister
itkImageSinkICVF32_swigregister(itkImageSinkICVF32)

def itkImageSinkICVF32_cast(obj: 'itkLightObject') -> "itkImageSinkICVF32 *":
    """itkImageSinkICVF32_cast(itkLightObject obj) -> itkImageSinkICVF32"""
    return _itkImageSinkPython.itkImageSinkICVF32_cast(obj)

class itkImageSinkICVF33(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkICVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageCVF33') -> "void":
        """SetInput(itkImageSinkICVF33 self, itkImageCVF33 input)"""
        return _itkImageSinkPython.itkImageSinkICVF33_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageCVF33 const *":
        """
        GetInput(itkImageSinkICVF33 self) -> itkImageCVF33
        GetInput(itkImageSinkICVF33 self, unsigned int idx) -> itkImageCVF33
        GetInput(itkImageSinkICVF33 self, std::string const & key) -> itkImageCVF33
        """
        return _itkImageSinkPython.itkImageSinkICVF33_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkICVF33 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICVF33_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkICVF33 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICVF33_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkICVF33 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICVF33_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkICVF33 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICVF33_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkICVF33

    def cast(obj: 'itkLightObject') -> "itkImageSinkICVF33 *":
        """cast(itkLightObject obj) -> itkImageSinkICVF33"""
        return _itkImageSinkPython.itkImageSinkICVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkICVF33

        Create a new object of the class itkImageSinkICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkICVF33.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF33_SetInput, None, itkImageSinkICVF33)
itkImageSinkICVF33.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF33_GetInput, None, itkImageSinkICVF33)
itkImageSinkICVF33.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF33_SetCoordinateTolerance, None, itkImageSinkICVF33)
itkImageSinkICVF33.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF33_GetCoordinateTolerance, None, itkImageSinkICVF33)
itkImageSinkICVF33.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF33_SetDirectionTolerance, None, itkImageSinkICVF33)
itkImageSinkICVF33.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF33_GetDirectionTolerance, None, itkImageSinkICVF33)
itkImageSinkICVF33_swigregister = _itkImageSinkPython.itkImageSinkICVF33_swigregister
itkImageSinkICVF33_swigregister(itkImageSinkICVF33)

def itkImageSinkICVF33_cast(obj: 'itkLightObject') -> "itkImageSinkICVF33 *":
    """itkImageSinkICVF33_cast(itkLightObject obj) -> itkImageSinkICVF33"""
    return _itkImageSinkPython.itkImageSinkICVF33_cast(obj)

class itkImageSinkICVF42(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkICVF42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageCVF42') -> "void":
        """SetInput(itkImageSinkICVF42 self, itkImageCVF42 input)"""
        return _itkImageSinkPython.itkImageSinkICVF42_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageCVF42 const *":
        """
        GetInput(itkImageSinkICVF42 self) -> itkImageCVF42
        GetInput(itkImageSinkICVF42 self, unsigned int idx) -> itkImageCVF42
        GetInput(itkImageSinkICVF42 self, std::string const & key) -> itkImageCVF42
        """
        return _itkImageSinkPython.itkImageSinkICVF42_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkICVF42 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICVF42_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkICVF42 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICVF42_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkICVF42 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICVF42_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkICVF42 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICVF42_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkICVF42

    def cast(obj: 'itkLightObject') -> "itkImageSinkICVF42 *":
        """cast(itkLightObject obj) -> itkImageSinkICVF42"""
        return _itkImageSinkPython.itkImageSinkICVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkICVF42

        Create a new object of the class itkImageSinkICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkICVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkICVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkICVF42.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF42_SetInput, None, itkImageSinkICVF42)
itkImageSinkICVF42.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF42_GetInput, None, itkImageSinkICVF42)
itkImageSinkICVF42.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF42_SetCoordinateTolerance, None, itkImageSinkICVF42)
itkImageSinkICVF42.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF42_GetCoordinateTolerance, None, itkImageSinkICVF42)
itkImageSinkICVF42.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF42_SetDirectionTolerance, None, itkImageSinkICVF42)
itkImageSinkICVF42.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF42_GetDirectionTolerance, None, itkImageSinkICVF42)
itkImageSinkICVF42_swigregister = _itkImageSinkPython.itkImageSinkICVF42_swigregister
itkImageSinkICVF42_swigregister(itkImageSinkICVF42)

def itkImageSinkICVF42_cast(obj: 'itkLightObject') -> "itkImageSinkICVF42 *":
    """itkImageSinkICVF42_cast(itkLightObject obj) -> itkImageSinkICVF42"""
    return _itkImageSinkPython.itkImageSinkICVF42_cast(obj)

class itkImageSinkICVF43(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkICVF43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageCVF43') -> "void":
        """SetInput(itkImageSinkICVF43 self, itkImageCVF43 input)"""
        return _itkImageSinkPython.itkImageSinkICVF43_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageCVF43 const *":
        """
        GetInput(itkImageSinkICVF43 self) -> itkImageCVF43
        GetInput(itkImageSinkICVF43 self, unsigned int idx) -> itkImageCVF43
        GetInput(itkImageSinkICVF43 self, std::string const & key) -> itkImageCVF43
        """
        return _itkImageSinkPython.itkImageSinkICVF43_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkICVF43 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICVF43_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkICVF43 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICVF43_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkICVF43 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkICVF43_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkICVF43 self) -> double"""
        return _itkImageSinkPython.itkImageSinkICVF43_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkICVF43

    def cast(obj: 'itkLightObject') -> "itkImageSinkICVF43 *":
        """cast(itkLightObject obj) -> itkImageSinkICVF43"""
        return _itkImageSinkPython.itkImageSinkICVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkICVF43

        Create a new object of the class itkImageSinkICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkICVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkICVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkICVF43.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF43_SetInput, None, itkImageSinkICVF43)
itkImageSinkICVF43.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF43_GetInput, None, itkImageSinkICVF43)
itkImageSinkICVF43.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF43_SetCoordinateTolerance, None, itkImageSinkICVF43)
itkImageSinkICVF43.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF43_GetCoordinateTolerance, None, itkImageSinkICVF43)
itkImageSinkICVF43.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF43_SetDirectionTolerance, None, itkImageSinkICVF43)
itkImageSinkICVF43.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkICVF43_GetDirectionTolerance, None, itkImageSinkICVF43)
itkImageSinkICVF43_swigregister = _itkImageSinkPython.itkImageSinkICVF43_swigregister
itkImageSinkICVF43_swigregister(itkImageSinkICVF43)

def itkImageSinkICVF43_cast(obj: 'itkLightObject') -> "itkImageSinkICVF43 *":
    """itkImageSinkICVF43_cast(itkLightObject obj) -> itkImageSinkICVF43"""
    return _itkImageSinkPython.itkImageSinkICVF43_cast(obj)

class itkImageSinkIF2(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageF2') -> "void":
        """SetInput(itkImageSinkIF2 self, itkImageF2 input)"""
        return _itkImageSinkPython.itkImageSinkIF2_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageF2 const *":
        """
        GetInput(itkImageSinkIF2 self) -> itkImageF2
        GetInput(itkImageSinkIF2 self, unsigned int idx) -> itkImageF2
        GetInput(itkImageSinkIF2 self, std::string const & key) -> itkImageF2
        """
        return _itkImageSinkPython.itkImageSinkIF2_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIF2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIF2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIF2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIF2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIF2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIF2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIF2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIF2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIF2

    def cast(obj: 'itkLightObject') -> "itkImageSinkIF2 *":
        """cast(itkLightObject obj) -> itkImageSinkIF2"""
        return _itkImageSinkPython.itkImageSinkIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIF2

        Create a new object of the class itkImageSinkIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIF2.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIF2_SetInput, None, itkImageSinkIF2)
itkImageSinkIF2.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIF2_GetInput, None, itkImageSinkIF2)
itkImageSinkIF2.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIF2_SetCoordinateTolerance, None, itkImageSinkIF2)
itkImageSinkIF2.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIF2_GetCoordinateTolerance, None, itkImageSinkIF2)
itkImageSinkIF2.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIF2_SetDirectionTolerance, None, itkImageSinkIF2)
itkImageSinkIF2.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIF2_GetDirectionTolerance, None, itkImageSinkIF2)
itkImageSinkIF2_swigregister = _itkImageSinkPython.itkImageSinkIF2_swigregister
itkImageSinkIF2_swigregister(itkImageSinkIF2)

def itkImageSinkIF2_cast(obj: 'itkLightObject') -> "itkImageSinkIF2 *":
    """itkImageSinkIF2_cast(itkLightObject obj) -> itkImageSinkIF2"""
    return _itkImageSinkPython.itkImageSinkIF2_cast(obj)

class itkImageSinkIF3(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageF3') -> "void":
        """SetInput(itkImageSinkIF3 self, itkImageF3 input)"""
        return _itkImageSinkPython.itkImageSinkIF3_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageF3 const *":
        """
        GetInput(itkImageSinkIF3 self) -> itkImageF3
        GetInput(itkImageSinkIF3 self, unsigned int idx) -> itkImageF3
        GetInput(itkImageSinkIF3 self, std::string const & key) -> itkImageF3
        """
        return _itkImageSinkPython.itkImageSinkIF3_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIF3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIF3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIF3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIF3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIF3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIF3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIF3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIF3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIF3

    def cast(obj: 'itkLightObject') -> "itkImageSinkIF3 *":
        """cast(itkLightObject obj) -> itkImageSinkIF3"""
        return _itkImageSinkPython.itkImageSinkIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIF3

        Create a new object of the class itkImageSinkIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIF3.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIF3_SetInput, None, itkImageSinkIF3)
itkImageSinkIF3.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIF3_GetInput, None, itkImageSinkIF3)
itkImageSinkIF3.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIF3_SetCoordinateTolerance, None, itkImageSinkIF3)
itkImageSinkIF3.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIF3_GetCoordinateTolerance, None, itkImageSinkIF3)
itkImageSinkIF3.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIF3_SetDirectionTolerance, None, itkImageSinkIF3)
itkImageSinkIF3.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIF3_GetDirectionTolerance, None, itkImageSinkIF3)
itkImageSinkIF3_swigregister = _itkImageSinkPython.itkImageSinkIF3_swigregister
itkImageSinkIF3_swigregister(itkImageSinkIF3)

def itkImageSinkIF3_cast(obj: 'itkLightObject') -> "itkImageSinkIF3 *":
    """itkImageSinkIF3_cast(itkLightObject obj) -> itkImageSinkIF3"""
    return _itkImageSinkPython.itkImageSinkIF3_cast(obj)

class itkImageSinkIRGBAUC2(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIRGBAUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageRGBAUC2') -> "void":
        """SetInput(itkImageSinkIRGBAUC2 self, itkImageRGBAUC2 input)"""
        return _itkImageSinkPython.itkImageSinkIRGBAUC2_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageRGBAUC2 const *":
        """
        GetInput(itkImageSinkIRGBAUC2 self) -> itkImageRGBAUC2
        GetInput(itkImageSinkIRGBAUC2 self, unsigned int idx) -> itkImageRGBAUC2
        GetInput(itkImageSinkIRGBAUC2 self, std::string const & key) -> itkImageRGBAUC2
        """
        return _itkImageSinkPython.itkImageSinkIRGBAUC2_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIRGBAUC2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIRGBAUC2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIRGBAUC2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIRGBAUC2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIRGBAUC2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIRGBAUC2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIRGBAUC2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIRGBAUC2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIRGBAUC2

    def cast(obj: 'itkLightObject') -> "itkImageSinkIRGBAUC2 *":
        """cast(itkLightObject obj) -> itkImageSinkIRGBAUC2"""
        return _itkImageSinkPython.itkImageSinkIRGBAUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIRGBAUC2

        Create a new object of the class itkImageSinkIRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIRGBAUC2.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBAUC2_SetInput, None, itkImageSinkIRGBAUC2)
itkImageSinkIRGBAUC2.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBAUC2_GetInput, None, itkImageSinkIRGBAUC2)
itkImageSinkIRGBAUC2.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBAUC2_SetCoordinateTolerance, None, itkImageSinkIRGBAUC2)
itkImageSinkIRGBAUC2.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBAUC2_GetCoordinateTolerance, None, itkImageSinkIRGBAUC2)
itkImageSinkIRGBAUC2.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBAUC2_SetDirectionTolerance, None, itkImageSinkIRGBAUC2)
itkImageSinkIRGBAUC2.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBAUC2_GetDirectionTolerance, None, itkImageSinkIRGBAUC2)
itkImageSinkIRGBAUC2_swigregister = _itkImageSinkPython.itkImageSinkIRGBAUC2_swigregister
itkImageSinkIRGBAUC2_swigregister(itkImageSinkIRGBAUC2)

def itkImageSinkIRGBAUC2_cast(obj: 'itkLightObject') -> "itkImageSinkIRGBAUC2 *":
    """itkImageSinkIRGBAUC2_cast(itkLightObject obj) -> itkImageSinkIRGBAUC2"""
    return _itkImageSinkPython.itkImageSinkIRGBAUC2_cast(obj)

class itkImageSinkIRGBAUC3(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIRGBAUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageRGBAUC3') -> "void":
        """SetInput(itkImageSinkIRGBAUC3 self, itkImageRGBAUC3 input)"""
        return _itkImageSinkPython.itkImageSinkIRGBAUC3_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageRGBAUC3 const *":
        """
        GetInput(itkImageSinkIRGBAUC3 self) -> itkImageRGBAUC3
        GetInput(itkImageSinkIRGBAUC3 self, unsigned int idx) -> itkImageRGBAUC3
        GetInput(itkImageSinkIRGBAUC3 self, std::string const & key) -> itkImageRGBAUC3
        """
        return _itkImageSinkPython.itkImageSinkIRGBAUC3_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIRGBAUC3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIRGBAUC3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIRGBAUC3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIRGBAUC3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIRGBAUC3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIRGBAUC3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIRGBAUC3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIRGBAUC3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIRGBAUC3

    def cast(obj: 'itkLightObject') -> "itkImageSinkIRGBAUC3 *":
        """cast(itkLightObject obj) -> itkImageSinkIRGBAUC3"""
        return _itkImageSinkPython.itkImageSinkIRGBAUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIRGBAUC3

        Create a new object of the class itkImageSinkIRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIRGBAUC3.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBAUC3_SetInput, None, itkImageSinkIRGBAUC3)
itkImageSinkIRGBAUC3.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBAUC3_GetInput, None, itkImageSinkIRGBAUC3)
itkImageSinkIRGBAUC3.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBAUC3_SetCoordinateTolerance, None, itkImageSinkIRGBAUC3)
itkImageSinkIRGBAUC3.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBAUC3_GetCoordinateTolerance, None, itkImageSinkIRGBAUC3)
itkImageSinkIRGBAUC3.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBAUC3_SetDirectionTolerance, None, itkImageSinkIRGBAUC3)
itkImageSinkIRGBAUC3.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBAUC3_GetDirectionTolerance, None, itkImageSinkIRGBAUC3)
itkImageSinkIRGBAUC3_swigregister = _itkImageSinkPython.itkImageSinkIRGBAUC3_swigregister
itkImageSinkIRGBAUC3_swigregister(itkImageSinkIRGBAUC3)

def itkImageSinkIRGBAUC3_cast(obj: 'itkLightObject') -> "itkImageSinkIRGBAUC3 *":
    """itkImageSinkIRGBAUC3_cast(itkLightObject obj) -> itkImageSinkIRGBAUC3"""
    return _itkImageSinkPython.itkImageSinkIRGBAUC3_cast(obj)

class itkImageSinkIRGBUC2(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIRGBUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageRGBUC2') -> "void":
        """SetInput(itkImageSinkIRGBUC2 self, itkImageRGBUC2 input)"""
        return _itkImageSinkPython.itkImageSinkIRGBUC2_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageRGBUC2 const *":
        """
        GetInput(itkImageSinkIRGBUC2 self) -> itkImageRGBUC2
        GetInput(itkImageSinkIRGBUC2 self, unsigned int idx) -> itkImageRGBUC2
        GetInput(itkImageSinkIRGBUC2 self, std::string const & key) -> itkImageRGBUC2
        """
        return _itkImageSinkPython.itkImageSinkIRGBUC2_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIRGBUC2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIRGBUC2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIRGBUC2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIRGBUC2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIRGBUC2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIRGBUC2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIRGBUC2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIRGBUC2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIRGBUC2

    def cast(obj: 'itkLightObject') -> "itkImageSinkIRGBUC2 *":
        """cast(itkLightObject obj) -> itkImageSinkIRGBUC2"""
        return _itkImageSinkPython.itkImageSinkIRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIRGBUC2

        Create a new object of the class itkImageSinkIRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIRGBUC2.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBUC2_SetInput, None, itkImageSinkIRGBUC2)
itkImageSinkIRGBUC2.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBUC2_GetInput, None, itkImageSinkIRGBUC2)
itkImageSinkIRGBUC2.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBUC2_SetCoordinateTolerance, None, itkImageSinkIRGBUC2)
itkImageSinkIRGBUC2.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBUC2_GetCoordinateTolerance, None, itkImageSinkIRGBUC2)
itkImageSinkIRGBUC2.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBUC2_SetDirectionTolerance, None, itkImageSinkIRGBUC2)
itkImageSinkIRGBUC2.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBUC2_GetDirectionTolerance, None, itkImageSinkIRGBUC2)
itkImageSinkIRGBUC2_swigregister = _itkImageSinkPython.itkImageSinkIRGBUC2_swigregister
itkImageSinkIRGBUC2_swigregister(itkImageSinkIRGBUC2)

def itkImageSinkIRGBUC2_cast(obj: 'itkLightObject') -> "itkImageSinkIRGBUC2 *":
    """itkImageSinkIRGBUC2_cast(itkLightObject obj) -> itkImageSinkIRGBUC2"""
    return _itkImageSinkPython.itkImageSinkIRGBUC2_cast(obj)

class itkImageSinkIRGBUC3(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIRGBUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageRGBUC3') -> "void":
        """SetInput(itkImageSinkIRGBUC3 self, itkImageRGBUC3 input)"""
        return _itkImageSinkPython.itkImageSinkIRGBUC3_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageRGBUC3 const *":
        """
        GetInput(itkImageSinkIRGBUC3 self) -> itkImageRGBUC3
        GetInput(itkImageSinkIRGBUC3 self, unsigned int idx) -> itkImageRGBUC3
        GetInput(itkImageSinkIRGBUC3 self, std::string const & key) -> itkImageRGBUC3
        """
        return _itkImageSinkPython.itkImageSinkIRGBUC3_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIRGBUC3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIRGBUC3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIRGBUC3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIRGBUC3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIRGBUC3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIRGBUC3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIRGBUC3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIRGBUC3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIRGBUC3

    def cast(obj: 'itkLightObject') -> "itkImageSinkIRGBUC3 *":
        """cast(itkLightObject obj) -> itkImageSinkIRGBUC3"""
        return _itkImageSinkPython.itkImageSinkIRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIRGBUC3

        Create a new object of the class itkImageSinkIRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIRGBUC3.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBUC3_SetInput, None, itkImageSinkIRGBUC3)
itkImageSinkIRGBUC3.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBUC3_GetInput, None, itkImageSinkIRGBUC3)
itkImageSinkIRGBUC3.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBUC3_SetCoordinateTolerance, None, itkImageSinkIRGBUC3)
itkImageSinkIRGBUC3.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBUC3_GetCoordinateTolerance, None, itkImageSinkIRGBUC3)
itkImageSinkIRGBUC3.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBUC3_SetDirectionTolerance, None, itkImageSinkIRGBUC3)
itkImageSinkIRGBUC3.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIRGBUC3_GetDirectionTolerance, None, itkImageSinkIRGBUC3)
itkImageSinkIRGBUC3_swigregister = _itkImageSinkPython.itkImageSinkIRGBUC3_swigregister
itkImageSinkIRGBUC3_swigregister(itkImageSinkIRGBUC3)

def itkImageSinkIRGBUC3_cast(obj: 'itkLightObject') -> "itkImageSinkIRGBUC3 *":
    """itkImageSinkIRGBUC3_cast(itkLightObject obj) -> itkImageSinkIRGBUC3"""
    return _itkImageSinkPython.itkImageSinkIRGBUC3_cast(obj)

class itkImageSinkISS2(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkISS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageSS2') -> "void":
        """SetInput(itkImageSinkISS2 self, itkImageSS2 input)"""
        return _itkImageSinkPython.itkImageSinkISS2_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageSS2 const *":
        """
        GetInput(itkImageSinkISS2 self) -> itkImageSS2
        GetInput(itkImageSinkISS2 self, unsigned int idx) -> itkImageSS2
        GetInput(itkImageSinkISS2 self, std::string const & key) -> itkImageSS2
        """
        return _itkImageSinkPython.itkImageSinkISS2_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkISS2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkISS2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkISS2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkISS2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkISS2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkISS2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkISS2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkISS2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkISS2

    def cast(obj: 'itkLightObject') -> "itkImageSinkISS2 *":
        """cast(itkLightObject obj) -> itkImageSinkISS2"""
        return _itkImageSinkPython.itkImageSinkISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkISS2

        Create a new object of the class itkImageSinkISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkISS2.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkISS2_SetInput, None, itkImageSinkISS2)
itkImageSinkISS2.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkISS2_GetInput, None, itkImageSinkISS2)
itkImageSinkISS2.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkISS2_SetCoordinateTolerance, None, itkImageSinkISS2)
itkImageSinkISS2.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkISS2_GetCoordinateTolerance, None, itkImageSinkISS2)
itkImageSinkISS2.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkISS2_SetDirectionTolerance, None, itkImageSinkISS2)
itkImageSinkISS2.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkISS2_GetDirectionTolerance, None, itkImageSinkISS2)
itkImageSinkISS2_swigregister = _itkImageSinkPython.itkImageSinkISS2_swigregister
itkImageSinkISS2_swigregister(itkImageSinkISS2)

def itkImageSinkISS2_cast(obj: 'itkLightObject') -> "itkImageSinkISS2 *":
    """itkImageSinkISS2_cast(itkLightObject obj) -> itkImageSinkISS2"""
    return _itkImageSinkPython.itkImageSinkISS2_cast(obj)

class itkImageSinkISS3(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkISS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageSS3') -> "void":
        """SetInput(itkImageSinkISS3 self, itkImageSS3 input)"""
        return _itkImageSinkPython.itkImageSinkISS3_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageSS3 const *":
        """
        GetInput(itkImageSinkISS3 self) -> itkImageSS3
        GetInput(itkImageSinkISS3 self, unsigned int idx) -> itkImageSS3
        GetInput(itkImageSinkISS3 self, std::string const & key) -> itkImageSS3
        """
        return _itkImageSinkPython.itkImageSinkISS3_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkISS3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkISS3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkISS3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkISS3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkISS3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkISS3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkISS3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkISS3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkISS3

    def cast(obj: 'itkLightObject') -> "itkImageSinkISS3 *":
        """cast(itkLightObject obj) -> itkImageSinkISS3"""
        return _itkImageSinkPython.itkImageSinkISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkISS3

        Create a new object of the class itkImageSinkISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkISS3.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkISS3_SetInput, None, itkImageSinkISS3)
itkImageSinkISS3.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkISS3_GetInput, None, itkImageSinkISS3)
itkImageSinkISS3.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkISS3_SetCoordinateTolerance, None, itkImageSinkISS3)
itkImageSinkISS3.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkISS3_GetCoordinateTolerance, None, itkImageSinkISS3)
itkImageSinkISS3.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkISS3_SetDirectionTolerance, None, itkImageSinkISS3)
itkImageSinkISS3.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkISS3_GetDirectionTolerance, None, itkImageSinkISS3)
itkImageSinkISS3_swigregister = _itkImageSinkPython.itkImageSinkISS3_swigregister
itkImageSinkISS3_swigregister(itkImageSinkISS3)

def itkImageSinkISS3_cast(obj: 'itkLightObject') -> "itkImageSinkISS3 *":
    """itkImageSinkISS3_cast(itkLightObject obj) -> itkImageSinkISS3"""
    return _itkImageSinkPython.itkImageSinkISS3_cast(obj)

class itkImageSinkIUC2(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageUC2') -> "void":
        """SetInput(itkImageSinkIUC2 self, itkImageUC2 input)"""
        return _itkImageSinkPython.itkImageSinkIUC2_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageUC2 const *":
        """
        GetInput(itkImageSinkIUC2 self) -> itkImageUC2
        GetInput(itkImageSinkIUC2 self, unsigned int idx) -> itkImageUC2
        GetInput(itkImageSinkIUC2 self, std::string const & key) -> itkImageUC2
        """
        return _itkImageSinkPython.itkImageSinkIUC2_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIUC2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIUC2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIUC2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIUC2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIUC2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIUC2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIUC2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIUC2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIUC2

    def cast(obj: 'itkLightObject') -> "itkImageSinkIUC2 *":
        """cast(itkLightObject obj) -> itkImageSinkIUC2"""
        return _itkImageSinkPython.itkImageSinkIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIUC2

        Create a new object of the class itkImageSinkIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIUC2.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIUC2_SetInput, None, itkImageSinkIUC2)
itkImageSinkIUC2.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIUC2_GetInput, None, itkImageSinkIUC2)
itkImageSinkIUC2.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUC2_SetCoordinateTolerance, None, itkImageSinkIUC2)
itkImageSinkIUC2.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUC2_GetCoordinateTolerance, None, itkImageSinkIUC2)
itkImageSinkIUC2.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUC2_SetDirectionTolerance, None, itkImageSinkIUC2)
itkImageSinkIUC2.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUC2_GetDirectionTolerance, None, itkImageSinkIUC2)
itkImageSinkIUC2_swigregister = _itkImageSinkPython.itkImageSinkIUC2_swigregister
itkImageSinkIUC2_swigregister(itkImageSinkIUC2)

def itkImageSinkIUC2_cast(obj: 'itkLightObject') -> "itkImageSinkIUC2 *":
    """itkImageSinkIUC2_cast(itkLightObject obj) -> itkImageSinkIUC2"""
    return _itkImageSinkPython.itkImageSinkIUC2_cast(obj)

class itkImageSinkIUC3(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageUC3') -> "void":
        """SetInput(itkImageSinkIUC3 self, itkImageUC3 input)"""
        return _itkImageSinkPython.itkImageSinkIUC3_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageUC3 const *":
        """
        GetInput(itkImageSinkIUC3 self) -> itkImageUC3
        GetInput(itkImageSinkIUC3 self, unsigned int idx) -> itkImageUC3
        GetInput(itkImageSinkIUC3 self, std::string const & key) -> itkImageUC3
        """
        return _itkImageSinkPython.itkImageSinkIUC3_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIUC3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIUC3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIUC3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIUC3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIUC3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIUC3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIUC3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIUC3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIUC3

    def cast(obj: 'itkLightObject') -> "itkImageSinkIUC3 *":
        """cast(itkLightObject obj) -> itkImageSinkIUC3"""
        return _itkImageSinkPython.itkImageSinkIUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIUC3

        Create a new object of the class itkImageSinkIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIUC3.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIUC3_SetInput, None, itkImageSinkIUC3)
itkImageSinkIUC3.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIUC3_GetInput, None, itkImageSinkIUC3)
itkImageSinkIUC3.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUC3_SetCoordinateTolerance, None, itkImageSinkIUC3)
itkImageSinkIUC3.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUC3_GetCoordinateTolerance, None, itkImageSinkIUC3)
itkImageSinkIUC3.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUC3_SetDirectionTolerance, None, itkImageSinkIUC3)
itkImageSinkIUC3.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUC3_GetDirectionTolerance, None, itkImageSinkIUC3)
itkImageSinkIUC3_swigregister = _itkImageSinkPython.itkImageSinkIUC3_swigregister
itkImageSinkIUC3_swigregister(itkImageSinkIUC3)

def itkImageSinkIUC3_cast(obj: 'itkLightObject') -> "itkImageSinkIUC3 *":
    """itkImageSinkIUC3_cast(itkLightObject obj) -> itkImageSinkIUC3"""
    return _itkImageSinkPython.itkImageSinkIUC3_cast(obj)

class itkImageSinkIUS2(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageUS2') -> "void":
        """SetInput(itkImageSinkIUS2 self, itkImageUS2 input)"""
        return _itkImageSinkPython.itkImageSinkIUS2_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageUS2 const *":
        """
        GetInput(itkImageSinkIUS2 self) -> itkImageUS2
        GetInput(itkImageSinkIUS2 self, unsigned int idx) -> itkImageUS2
        GetInput(itkImageSinkIUS2 self, std::string const & key) -> itkImageUS2
        """
        return _itkImageSinkPython.itkImageSinkIUS2_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIUS2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIUS2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIUS2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIUS2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIUS2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIUS2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIUS2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIUS2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIUS2

    def cast(obj: 'itkLightObject') -> "itkImageSinkIUS2 *":
        """cast(itkLightObject obj) -> itkImageSinkIUS2"""
        return _itkImageSinkPython.itkImageSinkIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIUS2

        Create a new object of the class itkImageSinkIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIUS2.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIUS2_SetInput, None, itkImageSinkIUS2)
itkImageSinkIUS2.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIUS2_GetInput, None, itkImageSinkIUS2)
itkImageSinkIUS2.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUS2_SetCoordinateTolerance, None, itkImageSinkIUS2)
itkImageSinkIUS2.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUS2_GetCoordinateTolerance, None, itkImageSinkIUS2)
itkImageSinkIUS2.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUS2_SetDirectionTolerance, None, itkImageSinkIUS2)
itkImageSinkIUS2.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUS2_GetDirectionTolerance, None, itkImageSinkIUS2)
itkImageSinkIUS2_swigregister = _itkImageSinkPython.itkImageSinkIUS2_swigregister
itkImageSinkIUS2_swigregister(itkImageSinkIUS2)

def itkImageSinkIUS2_cast(obj: 'itkLightObject') -> "itkImageSinkIUS2 *":
    """itkImageSinkIUS2_cast(itkLightObject obj) -> itkImageSinkIUS2"""
    return _itkImageSinkPython.itkImageSinkIUS2_cast(obj)

class itkImageSinkIUS3(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageUS3') -> "void":
        """SetInput(itkImageSinkIUS3 self, itkImageUS3 input)"""
        return _itkImageSinkPython.itkImageSinkIUS3_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageUS3 const *":
        """
        GetInput(itkImageSinkIUS3 self) -> itkImageUS3
        GetInput(itkImageSinkIUS3 self, unsigned int idx) -> itkImageUS3
        GetInput(itkImageSinkIUS3 self, std::string const & key) -> itkImageUS3
        """
        return _itkImageSinkPython.itkImageSinkIUS3_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIUS3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIUS3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIUS3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIUS3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIUS3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIUS3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIUS3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIUS3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIUS3

    def cast(obj: 'itkLightObject') -> "itkImageSinkIUS3 *":
        """cast(itkLightObject obj) -> itkImageSinkIUS3"""
        return _itkImageSinkPython.itkImageSinkIUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIUS3

        Create a new object of the class itkImageSinkIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIUS3.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIUS3_SetInput, None, itkImageSinkIUS3)
itkImageSinkIUS3.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIUS3_GetInput, None, itkImageSinkIUS3)
itkImageSinkIUS3.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUS3_SetCoordinateTolerance, None, itkImageSinkIUS3)
itkImageSinkIUS3.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUS3_GetCoordinateTolerance, None, itkImageSinkIUS3)
itkImageSinkIUS3.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUS3_SetDirectionTolerance, None, itkImageSinkIUS3)
itkImageSinkIUS3.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIUS3_GetDirectionTolerance, None, itkImageSinkIUS3)
itkImageSinkIUS3_swigregister = _itkImageSinkPython.itkImageSinkIUS3_swigregister
itkImageSinkIUS3_swigregister(itkImageSinkIUS3)

def itkImageSinkIUS3_cast(obj: 'itkLightObject') -> "itkImageSinkIUS3 *":
    """itkImageSinkIUS3_cast(itkLightObject obj) -> itkImageSinkIUS3"""
    return _itkImageSinkPython.itkImageSinkIUS3_cast(obj)

class itkImageSinkIVF22(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageVF22') -> "void":
        """SetInput(itkImageSinkIVF22 self, itkImageVF22 input)"""
        return _itkImageSinkPython.itkImageSinkIVF22_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageVF22 const *":
        """
        GetInput(itkImageSinkIVF22 self) -> itkImageVF22
        GetInput(itkImageSinkIVF22 self, unsigned int idx) -> itkImageVF22
        GetInput(itkImageSinkIVF22 self, std::string const & key) -> itkImageVF22
        """
        return _itkImageSinkPython.itkImageSinkIVF22_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIVF22 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIVF22_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIVF22 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIVF22_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIVF22 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIVF22_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIVF22 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIVF22_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIVF22

    def cast(obj: 'itkLightObject') -> "itkImageSinkIVF22 *":
        """cast(itkLightObject obj) -> itkImageSinkIVF22"""
        return _itkImageSinkPython.itkImageSinkIVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIVF22

        Create a new object of the class itkImageSinkIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIVF22.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF22_SetInput, None, itkImageSinkIVF22)
itkImageSinkIVF22.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF22_GetInput, None, itkImageSinkIVF22)
itkImageSinkIVF22.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF22_SetCoordinateTolerance, None, itkImageSinkIVF22)
itkImageSinkIVF22.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF22_GetCoordinateTolerance, None, itkImageSinkIVF22)
itkImageSinkIVF22.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF22_SetDirectionTolerance, None, itkImageSinkIVF22)
itkImageSinkIVF22.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF22_GetDirectionTolerance, None, itkImageSinkIVF22)
itkImageSinkIVF22_swigregister = _itkImageSinkPython.itkImageSinkIVF22_swigregister
itkImageSinkIVF22_swigregister(itkImageSinkIVF22)

def itkImageSinkIVF22_cast(obj: 'itkLightObject') -> "itkImageSinkIVF22 *":
    """itkImageSinkIVF22_cast(itkLightObject obj) -> itkImageSinkIVF22"""
    return _itkImageSinkPython.itkImageSinkIVF22_cast(obj)

class itkImageSinkIVF23(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIVF23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageVF23') -> "void":
        """SetInput(itkImageSinkIVF23 self, itkImageVF23 input)"""
        return _itkImageSinkPython.itkImageSinkIVF23_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageVF23 const *":
        """
        GetInput(itkImageSinkIVF23 self) -> itkImageVF23
        GetInput(itkImageSinkIVF23 self, unsigned int idx) -> itkImageVF23
        GetInput(itkImageSinkIVF23 self, std::string const & key) -> itkImageVF23
        """
        return _itkImageSinkPython.itkImageSinkIVF23_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIVF23 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIVF23_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIVF23 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIVF23_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIVF23 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIVF23_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIVF23 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIVF23_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIVF23

    def cast(obj: 'itkLightObject') -> "itkImageSinkIVF23 *":
        """cast(itkLightObject obj) -> itkImageSinkIVF23"""
        return _itkImageSinkPython.itkImageSinkIVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIVF23

        Create a new object of the class itkImageSinkIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIVF23.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF23_SetInput, None, itkImageSinkIVF23)
itkImageSinkIVF23.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF23_GetInput, None, itkImageSinkIVF23)
itkImageSinkIVF23.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF23_SetCoordinateTolerance, None, itkImageSinkIVF23)
itkImageSinkIVF23.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF23_GetCoordinateTolerance, None, itkImageSinkIVF23)
itkImageSinkIVF23.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF23_SetDirectionTolerance, None, itkImageSinkIVF23)
itkImageSinkIVF23.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF23_GetDirectionTolerance, None, itkImageSinkIVF23)
itkImageSinkIVF23_swigregister = _itkImageSinkPython.itkImageSinkIVF23_swigregister
itkImageSinkIVF23_swigregister(itkImageSinkIVF23)

def itkImageSinkIVF23_cast(obj: 'itkLightObject') -> "itkImageSinkIVF23 *":
    """itkImageSinkIVF23_cast(itkLightObject obj) -> itkImageSinkIVF23"""
    return _itkImageSinkPython.itkImageSinkIVF23_cast(obj)

class itkImageSinkIVF32(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIVF32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageVF32') -> "void":
        """SetInput(itkImageSinkIVF32 self, itkImageVF32 input)"""
        return _itkImageSinkPython.itkImageSinkIVF32_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageVF32 const *":
        """
        GetInput(itkImageSinkIVF32 self) -> itkImageVF32
        GetInput(itkImageSinkIVF32 self, unsigned int idx) -> itkImageVF32
        GetInput(itkImageSinkIVF32 self, std::string const & key) -> itkImageVF32
        """
        return _itkImageSinkPython.itkImageSinkIVF32_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIVF32 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIVF32_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIVF32 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIVF32_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIVF32 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIVF32_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIVF32 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIVF32_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIVF32

    def cast(obj: 'itkLightObject') -> "itkImageSinkIVF32 *":
        """cast(itkLightObject obj) -> itkImageSinkIVF32"""
        return _itkImageSinkPython.itkImageSinkIVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIVF32

        Create a new object of the class itkImageSinkIVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIVF32.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF32_SetInput, None, itkImageSinkIVF32)
itkImageSinkIVF32.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF32_GetInput, None, itkImageSinkIVF32)
itkImageSinkIVF32.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF32_SetCoordinateTolerance, None, itkImageSinkIVF32)
itkImageSinkIVF32.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF32_GetCoordinateTolerance, None, itkImageSinkIVF32)
itkImageSinkIVF32.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF32_SetDirectionTolerance, None, itkImageSinkIVF32)
itkImageSinkIVF32.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF32_GetDirectionTolerance, None, itkImageSinkIVF32)
itkImageSinkIVF32_swigregister = _itkImageSinkPython.itkImageSinkIVF32_swigregister
itkImageSinkIVF32_swigregister(itkImageSinkIVF32)

def itkImageSinkIVF32_cast(obj: 'itkLightObject') -> "itkImageSinkIVF32 *":
    """itkImageSinkIVF32_cast(itkLightObject obj) -> itkImageSinkIVF32"""
    return _itkImageSinkPython.itkImageSinkIVF32_cast(obj)

class itkImageSinkIVF33(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageVF33') -> "void":
        """SetInput(itkImageSinkIVF33 self, itkImageVF33 input)"""
        return _itkImageSinkPython.itkImageSinkIVF33_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageVF33 const *":
        """
        GetInput(itkImageSinkIVF33 self) -> itkImageVF33
        GetInput(itkImageSinkIVF33 self, unsigned int idx) -> itkImageVF33
        GetInput(itkImageSinkIVF33 self, std::string const & key) -> itkImageVF33
        """
        return _itkImageSinkPython.itkImageSinkIVF33_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIVF33 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIVF33_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIVF33 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIVF33_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIVF33 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIVF33_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIVF33 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIVF33_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIVF33

    def cast(obj: 'itkLightObject') -> "itkImageSinkIVF33 *":
        """cast(itkLightObject obj) -> itkImageSinkIVF33"""
        return _itkImageSinkPython.itkImageSinkIVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIVF33

        Create a new object of the class itkImageSinkIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIVF33.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF33_SetInput, None, itkImageSinkIVF33)
itkImageSinkIVF33.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF33_GetInput, None, itkImageSinkIVF33)
itkImageSinkIVF33.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF33_SetCoordinateTolerance, None, itkImageSinkIVF33)
itkImageSinkIVF33.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF33_GetCoordinateTolerance, None, itkImageSinkIVF33)
itkImageSinkIVF33.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF33_SetDirectionTolerance, None, itkImageSinkIVF33)
itkImageSinkIVF33.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF33_GetDirectionTolerance, None, itkImageSinkIVF33)
itkImageSinkIVF33_swigregister = _itkImageSinkPython.itkImageSinkIVF33_swigregister
itkImageSinkIVF33_swigregister(itkImageSinkIVF33)

def itkImageSinkIVF33_cast(obj: 'itkLightObject') -> "itkImageSinkIVF33 *":
    """itkImageSinkIVF33_cast(itkLightObject obj) -> itkImageSinkIVF33"""
    return _itkImageSinkPython.itkImageSinkIVF33_cast(obj)

class itkImageSinkIVF42(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIVF42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageVF42') -> "void":
        """SetInput(itkImageSinkIVF42 self, itkImageVF42 input)"""
        return _itkImageSinkPython.itkImageSinkIVF42_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageVF42 const *":
        """
        GetInput(itkImageSinkIVF42 self) -> itkImageVF42
        GetInput(itkImageSinkIVF42 self, unsigned int idx) -> itkImageVF42
        GetInput(itkImageSinkIVF42 self, std::string const & key) -> itkImageVF42
        """
        return _itkImageSinkPython.itkImageSinkIVF42_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIVF42 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIVF42_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIVF42 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIVF42_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIVF42 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIVF42_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIVF42 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIVF42_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIVF42

    def cast(obj: 'itkLightObject') -> "itkImageSinkIVF42 *":
        """cast(itkLightObject obj) -> itkImageSinkIVF42"""
        return _itkImageSinkPython.itkImageSinkIVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIVF42

        Create a new object of the class itkImageSinkIVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIVF42.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF42_SetInput, None, itkImageSinkIVF42)
itkImageSinkIVF42.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF42_GetInput, None, itkImageSinkIVF42)
itkImageSinkIVF42.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF42_SetCoordinateTolerance, None, itkImageSinkIVF42)
itkImageSinkIVF42.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF42_GetCoordinateTolerance, None, itkImageSinkIVF42)
itkImageSinkIVF42.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF42_SetDirectionTolerance, None, itkImageSinkIVF42)
itkImageSinkIVF42.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF42_GetDirectionTolerance, None, itkImageSinkIVF42)
itkImageSinkIVF42_swigregister = _itkImageSinkPython.itkImageSinkIVF42_swigregister
itkImageSinkIVF42_swigregister(itkImageSinkIVF42)

def itkImageSinkIVF42_cast(obj: 'itkLightObject') -> "itkImageSinkIVF42 *":
    """itkImageSinkIVF42_cast(itkLightObject obj) -> itkImageSinkIVF42"""
    return _itkImageSinkPython.itkImageSinkIVF42_cast(obj)

class itkImageSinkIVF43(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkIVF43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkImageVF43') -> "void":
        """SetInput(itkImageSinkIVF43 self, itkImageVF43 input)"""
        return _itkImageSinkPython.itkImageSinkIVF43_SetInput(self, input)


    def GetInput(self, *args) -> "itkImageVF43 const *":
        """
        GetInput(itkImageSinkIVF43 self) -> itkImageVF43
        GetInput(itkImageSinkIVF43 self, unsigned int idx) -> itkImageVF43
        GetInput(itkImageSinkIVF43 self, std::string const & key) -> itkImageVF43
        """
        return _itkImageSinkPython.itkImageSinkIVF43_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkIVF43 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIVF43_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkIVF43 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIVF43_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkIVF43 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkIVF43_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkIVF43 self) -> double"""
        return _itkImageSinkPython.itkImageSinkIVF43_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkIVF43

    def cast(obj: 'itkLightObject') -> "itkImageSinkIVF43 *":
        """cast(itkLightObject obj) -> itkImageSinkIVF43"""
        return _itkImageSinkPython.itkImageSinkIVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkIVF43

        Create a new object of the class itkImageSinkIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkIVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkIVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkIVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkIVF43.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF43_SetInput, None, itkImageSinkIVF43)
itkImageSinkIVF43.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF43_GetInput, None, itkImageSinkIVF43)
itkImageSinkIVF43.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF43_SetCoordinateTolerance, None, itkImageSinkIVF43)
itkImageSinkIVF43.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF43_GetCoordinateTolerance, None, itkImageSinkIVF43)
itkImageSinkIVF43.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF43_SetDirectionTolerance, None, itkImageSinkIVF43)
itkImageSinkIVF43.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkIVF43_GetDirectionTolerance, None, itkImageSinkIVF43)
itkImageSinkIVF43_swigregister = _itkImageSinkPython.itkImageSinkIVF43_swigregister
itkImageSinkIVF43_swigregister(itkImageSinkIVF43)

def itkImageSinkIVF43_cast(obj: 'itkLightObject') -> "itkImageSinkIVF43 *":
    """itkImageSinkIVF43_cast(itkLightObject obj) -> itkImageSinkIVF43"""
    return _itkImageSinkPython.itkImageSinkIVF43_cast(obj)

class itkImageSinkVIF2(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkVIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkVectorImageF2') -> "void":
        """SetInput(itkImageSinkVIF2 self, itkVectorImageF2 input)"""
        return _itkImageSinkPython.itkImageSinkVIF2_SetInput(self, input)


    def GetInput(self, *args) -> "itkVectorImageF2 const *":
        """
        GetInput(itkImageSinkVIF2 self) -> itkVectorImageF2
        GetInput(itkImageSinkVIF2 self, unsigned int idx) -> itkVectorImageF2
        GetInput(itkImageSinkVIF2 self, std::string const & key) -> itkVectorImageF2
        """
        return _itkImageSinkPython.itkImageSinkVIF2_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkVIF2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVIF2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkVIF2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVIF2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkVIF2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVIF2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkVIF2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVIF2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkVIF2

    def cast(obj: 'itkLightObject') -> "itkImageSinkVIF2 *":
        """cast(itkLightObject obj) -> itkImageSinkVIF2"""
        return _itkImageSinkPython.itkImageSinkVIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkVIF2

        Create a new object of the class itkImageSinkVIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkVIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkVIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkVIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkVIF2.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVIF2_SetInput, None, itkImageSinkVIF2)
itkImageSinkVIF2.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVIF2_GetInput, None, itkImageSinkVIF2)
itkImageSinkVIF2.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIF2_SetCoordinateTolerance, None, itkImageSinkVIF2)
itkImageSinkVIF2.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIF2_GetCoordinateTolerance, None, itkImageSinkVIF2)
itkImageSinkVIF2.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIF2_SetDirectionTolerance, None, itkImageSinkVIF2)
itkImageSinkVIF2.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIF2_GetDirectionTolerance, None, itkImageSinkVIF2)
itkImageSinkVIF2_swigregister = _itkImageSinkPython.itkImageSinkVIF2_swigregister
itkImageSinkVIF2_swigregister(itkImageSinkVIF2)

def itkImageSinkVIF2_cast(obj: 'itkLightObject') -> "itkImageSinkVIF2 *":
    """itkImageSinkVIF2_cast(itkLightObject obj) -> itkImageSinkVIF2"""
    return _itkImageSinkPython.itkImageSinkVIF2_cast(obj)

class itkImageSinkVIF3(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkVIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkVectorImageF3') -> "void":
        """SetInput(itkImageSinkVIF3 self, itkVectorImageF3 input)"""
        return _itkImageSinkPython.itkImageSinkVIF3_SetInput(self, input)


    def GetInput(self, *args) -> "itkVectorImageF3 const *":
        """
        GetInput(itkImageSinkVIF3 self) -> itkVectorImageF3
        GetInput(itkImageSinkVIF3 self, unsigned int idx) -> itkVectorImageF3
        GetInput(itkImageSinkVIF3 self, std::string const & key) -> itkVectorImageF3
        """
        return _itkImageSinkPython.itkImageSinkVIF3_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkVIF3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVIF3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkVIF3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVIF3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkVIF3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVIF3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkVIF3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVIF3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkVIF3

    def cast(obj: 'itkLightObject') -> "itkImageSinkVIF3 *":
        """cast(itkLightObject obj) -> itkImageSinkVIF3"""
        return _itkImageSinkPython.itkImageSinkVIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkVIF3

        Create a new object of the class itkImageSinkVIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkVIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkVIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkVIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkVIF3.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVIF3_SetInput, None, itkImageSinkVIF3)
itkImageSinkVIF3.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVIF3_GetInput, None, itkImageSinkVIF3)
itkImageSinkVIF3.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIF3_SetCoordinateTolerance, None, itkImageSinkVIF3)
itkImageSinkVIF3.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIF3_GetCoordinateTolerance, None, itkImageSinkVIF3)
itkImageSinkVIF3.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIF3_SetDirectionTolerance, None, itkImageSinkVIF3)
itkImageSinkVIF3.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIF3_GetDirectionTolerance, None, itkImageSinkVIF3)
itkImageSinkVIF3_swigregister = _itkImageSinkPython.itkImageSinkVIF3_swigregister
itkImageSinkVIF3_swigregister(itkImageSinkVIF3)

def itkImageSinkVIF3_cast(obj: 'itkLightObject') -> "itkImageSinkVIF3 *":
    """itkImageSinkVIF3_cast(itkLightObject obj) -> itkImageSinkVIF3"""
    return _itkImageSinkPython.itkImageSinkVIF3_cast(obj)

class itkImageSinkVISS2(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkVISS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkVectorImageSS2') -> "void":
        """SetInput(itkImageSinkVISS2 self, itkVectorImageSS2 input)"""
        return _itkImageSinkPython.itkImageSinkVISS2_SetInput(self, input)


    def GetInput(self, *args) -> "itkVectorImageSS2 const *":
        """
        GetInput(itkImageSinkVISS2 self) -> itkVectorImageSS2
        GetInput(itkImageSinkVISS2 self, unsigned int idx) -> itkVectorImageSS2
        GetInput(itkImageSinkVISS2 self, std::string const & key) -> itkVectorImageSS2
        """
        return _itkImageSinkPython.itkImageSinkVISS2_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkVISS2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVISS2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkVISS2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVISS2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkVISS2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVISS2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkVISS2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVISS2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkVISS2

    def cast(obj: 'itkLightObject') -> "itkImageSinkVISS2 *":
        """cast(itkLightObject obj) -> itkImageSinkVISS2"""
        return _itkImageSinkPython.itkImageSinkVISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkVISS2

        Create a new object of the class itkImageSinkVISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkVISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkVISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkVISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkVISS2.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVISS2_SetInput, None, itkImageSinkVISS2)
itkImageSinkVISS2.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVISS2_GetInput, None, itkImageSinkVISS2)
itkImageSinkVISS2.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVISS2_SetCoordinateTolerance, None, itkImageSinkVISS2)
itkImageSinkVISS2.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVISS2_GetCoordinateTolerance, None, itkImageSinkVISS2)
itkImageSinkVISS2.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVISS2_SetDirectionTolerance, None, itkImageSinkVISS2)
itkImageSinkVISS2.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVISS2_GetDirectionTolerance, None, itkImageSinkVISS2)
itkImageSinkVISS2_swigregister = _itkImageSinkPython.itkImageSinkVISS2_swigregister
itkImageSinkVISS2_swigregister(itkImageSinkVISS2)

def itkImageSinkVISS2_cast(obj: 'itkLightObject') -> "itkImageSinkVISS2 *":
    """itkImageSinkVISS2_cast(itkLightObject obj) -> itkImageSinkVISS2"""
    return _itkImageSinkPython.itkImageSinkVISS2_cast(obj)

class itkImageSinkVISS3(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkVISS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkVectorImageSS3') -> "void":
        """SetInput(itkImageSinkVISS3 self, itkVectorImageSS3 input)"""
        return _itkImageSinkPython.itkImageSinkVISS3_SetInput(self, input)


    def GetInput(self, *args) -> "itkVectorImageSS3 const *":
        """
        GetInput(itkImageSinkVISS3 self) -> itkVectorImageSS3
        GetInput(itkImageSinkVISS3 self, unsigned int idx) -> itkVectorImageSS3
        GetInput(itkImageSinkVISS3 self, std::string const & key) -> itkVectorImageSS3
        """
        return _itkImageSinkPython.itkImageSinkVISS3_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkVISS3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVISS3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkVISS3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVISS3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkVISS3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVISS3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkVISS3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVISS3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkVISS3

    def cast(obj: 'itkLightObject') -> "itkImageSinkVISS3 *":
        """cast(itkLightObject obj) -> itkImageSinkVISS3"""
        return _itkImageSinkPython.itkImageSinkVISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkVISS3

        Create a new object of the class itkImageSinkVISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkVISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkVISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkVISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkVISS3.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVISS3_SetInput, None, itkImageSinkVISS3)
itkImageSinkVISS3.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVISS3_GetInput, None, itkImageSinkVISS3)
itkImageSinkVISS3.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVISS3_SetCoordinateTolerance, None, itkImageSinkVISS3)
itkImageSinkVISS3.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVISS3_GetCoordinateTolerance, None, itkImageSinkVISS3)
itkImageSinkVISS3.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVISS3_SetDirectionTolerance, None, itkImageSinkVISS3)
itkImageSinkVISS3.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVISS3_GetDirectionTolerance, None, itkImageSinkVISS3)
itkImageSinkVISS3_swigregister = _itkImageSinkPython.itkImageSinkVISS3_swigregister
itkImageSinkVISS3_swigregister(itkImageSinkVISS3)

def itkImageSinkVISS3_cast(obj: 'itkLightObject') -> "itkImageSinkVISS3 *":
    """itkImageSinkVISS3_cast(itkLightObject obj) -> itkImageSinkVISS3"""
    return _itkImageSinkPython.itkImageSinkVISS3_cast(obj)

class itkImageSinkVIUC2(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkVIUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkVectorImageUC2') -> "void":
        """SetInput(itkImageSinkVIUC2 self, itkVectorImageUC2 input)"""
        return _itkImageSinkPython.itkImageSinkVIUC2_SetInput(self, input)


    def GetInput(self, *args) -> "itkVectorImageUC2 const *":
        """
        GetInput(itkImageSinkVIUC2 self) -> itkVectorImageUC2
        GetInput(itkImageSinkVIUC2 self, unsigned int idx) -> itkVectorImageUC2
        GetInput(itkImageSinkVIUC2 self, std::string const & key) -> itkVectorImageUC2
        """
        return _itkImageSinkPython.itkImageSinkVIUC2_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkVIUC2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVIUC2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkVIUC2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVIUC2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkVIUC2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVIUC2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkVIUC2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVIUC2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkVIUC2

    def cast(obj: 'itkLightObject') -> "itkImageSinkVIUC2 *":
        """cast(itkLightObject obj) -> itkImageSinkVIUC2"""
        return _itkImageSinkPython.itkImageSinkVIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkVIUC2

        Create a new object of the class itkImageSinkVIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkVIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkVIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkVIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkVIUC2.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUC2_SetInput, None, itkImageSinkVIUC2)
itkImageSinkVIUC2.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUC2_GetInput, None, itkImageSinkVIUC2)
itkImageSinkVIUC2.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUC2_SetCoordinateTolerance, None, itkImageSinkVIUC2)
itkImageSinkVIUC2.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUC2_GetCoordinateTolerance, None, itkImageSinkVIUC2)
itkImageSinkVIUC2.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUC2_SetDirectionTolerance, None, itkImageSinkVIUC2)
itkImageSinkVIUC2.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUC2_GetDirectionTolerance, None, itkImageSinkVIUC2)
itkImageSinkVIUC2_swigregister = _itkImageSinkPython.itkImageSinkVIUC2_swigregister
itkImageSinkVIUC2_swigregister(itkImageSinkVIUC2)

def itkImageSinkVIUC2_cast(obj: 'itkLightObject') -> "itkImageSinkVIUC2 *":
    """itkImageSinkVIUC2_cast(itkLightObject obj) -> itkImageSinkVIUC2"""
    return _itkImageSinkPython.itkImageSinkVIUC2_cast(obj)

class itkImageSinkVIUC3(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkVIUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkVectorImageUC3') -> "void":
        """SetInput(itkImageSinkVIUC3 self, itkVectorImageUC3 input)"""
        return _itkImageSinkPython.itkImageSinkVIUC3_SetInput(self, input)


    def GetInput(self, *args) -> "itkVectorImageUC3 const *":
        """
        GetInput(itkImageSinkVIUC3 self) -> itkVectorImageUC3
        GetInput(itkImageSinkVIUC3 self, unsigned int idx) -> itkVectorImageUC3
        GetInput(itkImageSinkVIUC3 self, std::string const & key) -> itkVectorImageUC3
        """
        return _itkImageSinkPython.itkImageSinkVIUC3_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkVIUC3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVIUC3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkVIUC3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVIUC3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkVIUC3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVIUC3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkVIUC3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVIUC3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkVIUC3

    def cast(obj: 'itkLightObject') -> "itkImageSinkVIUC3 *":
        """cast(itkLightObject obj) -> itkImageSinkVIUC3"""
        return _itkImageSinkPython.itkImageSinkVIUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkVIUC3

        Create a new object of the class itkImageSinkVIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkVIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkVIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkVIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkVIUC3.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUC3_SetInput, None, itkImageSinkVIUC3)
itkImageSinkVIUC3.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUC3_GetInput, None, itkImageSinkVIUC3)
itkImageSinkVIUC3.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUC3_SetCoordinateTolerance, None, itkImageSinkVIUC3)
itkImageSinkVIUC3.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUC3_GetCoordinateTolerance, None, itkImageSinkVIUC3)
itkImageSinkVIUC3.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUC3_SetDirectionTolerance, None, itkImageSinkVIUC3)
itkImageSinkVIUC3.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUC3_GetDirectionTolerance, None, itkImageSinkVIUC3)
itkImageSinkVIUC3_swigregister = _itkImageSinkPython.itkImageSinkVIUC3_swigregister
itkImageSinkVIUC3_swigregister(itkImageSinkVIUC3)

def itkImageSinkVIUC3_cast(obj: 'itkLightObject') -> "itkImageSinkVIUC3 *":
    """itkImageSinkVIUC3_cast(itkLightObject obj) -> itkImageSinkVIUC3"""
    return _itkImageSinkPython.itkImageSinkVIUC3_cast(obj)

class itkImageSinkVIUS2(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkVIUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkVectorImageUS2') -> "void":
        """SetInput(itkImageSinkVIUS2 self, itkVectorImageUS2 input)"""
        return _itkImageSinkPython.itkImageSinkVIUS2_SetInput(self, input)


    def GetInput(self, *args) -> "itkVectorImageUS2 const *":
        """
        GetInput(itkImageSinkVIUS2 self) -> itkVectorImageUS2
        GetInput(itkImageSinkVIUS2 self, unsigned int idx) -> itkVectorImageUS2
        GetInput(itkImageSinkVIUS2 self, std::string const & key) -> itkVectorImageUS2
        """
        return _itkImageSinkPython.itkImageSinkVIUS2_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkVIUS2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVIUS2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkVIUS2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVIUS2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkVIUS2 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVIUS2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkVIUS2 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVIUS2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkVIUS2

    def cast(obj: 'itkLightObject') -> "itkImageSinkVIUS2 *":
        """cast(itkLightObject obj) -> itkImageSinkVIUS2"""
        return _itkImageSinkPython.itkImageSinkVIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkVIUS2

        Create a new object of the class itkImageSinkVIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkVIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkVIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkVIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkVIUS2.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUS2_SetInput, None, itkImageSinkVIUS2)
itkImageSinkVIUS2.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUS2_GetInput, None, itkImageSinkVIUS2)
itkImageSinkVIUS2.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUS2_SetCoordinateTolerance, None, itkImageSinkVIUS2)
itkImageSinkVIUS2.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUS2_GetCoordinateTolerance, None, itkImageSinkVIUS2)
itkImageSinkVIUS2.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUS2_SetDirectionTolerance, None, itkImageSinkVIUS2)
itkImageSinkVIUS2.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUS2_GetDirectionTolerance, None, itkImageSinkVIUS2)
itkImageSinkVIUS2_swigregister = _itkImageSinkPython.itkImageSinkVIUS2_swigregister
itkImageSinkVIUS2_swigregister(itkImageSinkVIUS2)

def itkImageSinkVIUS2_cast(obj: 'itkLightObject') -> "itkImageSinkVIUS2 *":
    """itkImageSinkVIUS2_cast(itkLightObject obj) -> itkImageSinkVIUS2"""
    return _itkImageSinkPython.itkImageSinkVIUS2_cast(obj)

class itkImageSinkVIUS3(ITKCommonBasePython.itkStreamingProcessObject):
    """Proxy of C++ itkImageSinkVIUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInput(self, input: 'itkVectorImageUS3') -> "void":
        """SetInput(itkImageSinkVIUS3 self, itkVectorImageUS3 input)"""
        return _itkImageSinkPython.itkImageSinkVIUS3_SetInput(self, input)


    def GetInput(self, *args) -> "itkVectorImageUS3 const *":
        """
        GetInput(itkImageSinkVIUS3 self) -> itkVectorImageUS3
        GetInput(itkImageSinkVIUS3 self, unsigned int idx) -> itkVectorImageUS3
        GetInput(itkImageSinkVIUS3 self, std::string const & key) -> itkVectorImageUS3
        """
        return _itkImageSinkPython.itkImageSinkVIUS3_GetInput(self, *args)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageSinkVIUS3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVIUS3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageSinkVIUS3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVIUS3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageSinkVIUS3 self, double const _arg)"""
        return _itkImageSinkPython.itkImageSinkVIUS3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageSinkVIUS3 self) -> double"""
        return _itkImageSinkPython.itkImageSinkVIUS3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageSinkPython.delete_itkImageSinkVIUS3

    def cast(obj: 'itkLightObject') -> "itkImageSinkVIUS3 *":
        """cast(itkLightObject obj) -> itkImageSinkVIUS3"""
        return _itkImageSinkPython.itkImageSinkVIUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSinkVIUS3

        Create a new object of the class itkImageSinkVIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSinkVIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSinkVIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSinkVIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSinkVIUS3.SetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUS3_SetInput, None, itkImageSinkVIUS3)
itkImageSinkVIUS3.GetInput = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUS3_GetInput, None, itkImageSinkVIUS3)
itkImageSinkVIUS3.SetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUS3_SetCoordinateTolerance, None, itkImageSinkVIUS3)
itkImageSinkVIUS3.GetCoordinateTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUS3_GetCoordinateTolerance, None, itkImageSinkVIUS3)
itkImageSinkVIUS3.SetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUS3_SetDirectionTolerance, None, itkImageSinkVIUS3)
itkImageSinkVIUS3.GetDirectionTolerance = new_instancemethod(_itkImageSinkPython.itkImageSinkVIUS3_GetDirectionTolerance, None, itkImageSinkVIUS3)
itkImageSinkVIUS3_swigregister = _itkImageSinkPython.itkImageSinkVIUS3_swigregister
itkImageSinkVIUS3_swigregister(itkImageSinkVIUS3)

def itkImageSinkVIUS3_cast(obj: 'itkLightObject') -> "itkImageSinkVIUS3 *":
    """itkImageSinkVIUS3_cast(itkLightObject obj) -> itkImageSinkVIUS3"""
    return _itkImageSinkPython.itkImageSinkVIUS3_cast(obj)


def image_sink(*args, **kwargs):
    """Procedural interface for ImageSink"""
    import itk
    instance = itk.ImageSink.New(*args, **kwargs)
    return instance.__internal_call__()

def image_sink_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ImageSink, itkTemplate.itkTemplate):
        image_sink.__doc__ = itk.ImageSink.values()[0].__doc__
    else:
        image_sink.__doc__ = itk.ImageSink.__doc__




