# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSingleValuedCostFunctionv4Python.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSingleValuedCostFunctionv4Python', [dirname(__file__)])
        except ImportError:
            import _itkSingleValuedCostFunctionv4Python
            return _itkSingleValuedCostFunctionv4Python
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSingleValuedCostFunctionv4Python', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSingleValuedCostFunctionv4Python = swig_import_helper()
    del swig_import_helper
else:
    import _itkSingleValuedCostFunctionv4Python
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkCostFunctionPython
import ITKCommonBasePython
import pyBasePython
import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython

def itkSingleValuedCostFunctionv4TemplateF_New():
  return itkSingleValuedCostFunctionv4TemplateF.New()


def itkSingleValuedCostFunctionv4TemplateD_New():
  return itkSingleValuedCostFunctionv4TemplateD.New()

class itkSingleValuedCostFunctionv4TemplateD(itkCostFunctionPython.itkCostFunctionTemplateD):
    """Proxy of C++ itkSingleValuedCostFunctionv4TemplateD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetValue(self) -> "double":
        """GetValue(itkSingleValuedCostFunctionv4TemplateD self) -> double"""
        return _itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateD_GetValue(self)


    def GetValueAndDerivative(self, value: 'double &', derivative: 'itkArrayD') -> "void":
        """GetValueAndDerivative(itkSingleValuedCostFunctionv4TemplateD self, double & value, itkArrayD derivative)"""
        return _itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateD_GetValueAndDerivative(self, value, derivative)

    __swig_destroy__ = _itkSingleValuedCostFunctionv4Python.delete_itkSingleValuedCostFunctionv4TemplateD

    def cast(obj: 'itkLightObject') -> "itkSingleValuedCostFunctionv4TemplateD *":
        """cast(itkLightObject obj) -> itkSingleValuedCostFunctionv4TemplateD"""
        return _itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSingleValuedCostFunctionv4TemplateD

        Create a new object of the class itkSingleValuedCostFunctionv4TemplateD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleValuedCostFunctionv4TemplateD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSingleValuedCostFunctionv4TemplateD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSingleValuedCostFunctionv4TemplateD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSingleValuedCostFunctionv4TemplateD.GetValue = new_instancemethod(_itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateD_GetValue, None, itkSingleValuedCostFunctionv4TemplateD)
itkSingleValuedCostFunctionv4TemplateD.GetValueAndDerivative = new_instancemethod(_itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateD_GetValueAndDerivative, None, itkSingleValuedCostFunctionv4TemplateD)
itkSingleValuedCostFunctionv4TemplateD_swigregister = _itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateD_swigregister
itkSingleValuedCostFunctionv4TemplateD_swigregister(itkSingleValuedCostFunctionv4TemplateD)

def itkSingleValuedCostFunctionv4TemplateD_cast(obj: 'itkLightObject') -> "itkSingleValuedCostFunctionv4TemplateD *":
    """itkSingleValuedCostFunctionv4TemplateD_cast(itkLightObject obj) -> itkSingleValuedCostFunctionv4TemplateD"""
    return _itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateD_cast(obj)

class itkSingleValuedCostFunctionv4TemplateF(itkCostFunctionPython.itkCostFunctionTemplateF):
    """Proxy of C++ itkSingleValuedCostFunctionv4TemplateF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetValue(self) -> "float":
        """GetValue(itkSingleValuedCostFunctionv4TemplateF self) -> float"""
        return _itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateF_GetValue(self)


    def GetValueAndDerivative(self, value: 'float &', derivative: 'itkArrayF') -> "void":
        """GetValueAndDerivative(itkSingleValuedCostFunctionv4TemplateF self, float & value, itkArrayF derivative)"""
        return _itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateF_GetValueAndDerivative(self, value, derivative)

    __swig_destroy__ = _itkSingleValuedCostFunctionv4Python.delete_itkSingleValuedCostFunctionv4TemplateF

    def cast(obj: 'itkLightObject') -> "itkSingleValuedCostFunctionv4TemplateF *":
        """cast(itkLightObject obj) -> itkSingleValuedCostFunctionv4TemplateF"""
        return _itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSingleValuedCostFunctionv4TemplateF

        Create a new object of the class itkSingleValuedCostFunctionv4TemplateF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleValuedCostFunctionv4TemplateF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSingleValuedCostFunctionv4TemplateF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSingleValuedCostFunctionv4TemplateF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSingleValuedCostFunctionv4TemplateF.GetValue = new_instancemethod(_itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateF_GetValue, None, itkSingleValuedCostFunctionv4TemplateF)
itkSingleValuedCostFunctionv4TemplateF.GetValueAndDerivative = new_instancemethod(_itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateF_GetValueAndDerivative, None, itkSingleValuedCostFunctionv4TemplateF)
itkSingleValuedCostFunctionv4TemplateF_swigregister = _itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateF_swigregister
itkSingleValuedCostFunctionv4TemplateF_swigregister(itkSingleValuedCostFunctionv4TemplateF)

def itkSingleValuedCostFunctionv4TemplateF_cast(obj: 'itkLightObject') -> "itkSingleValuedCostFunctionv4TemplateF *":
    """itkSingleValuedCostFunctionv4TemplateF_cast(itkLightObject obj) -> itkSingleValuedCostFunctionv4TemplateF"""
    return _itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateF_cast(obj)



