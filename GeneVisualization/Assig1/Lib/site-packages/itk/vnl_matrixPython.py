# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _vnl_matrixPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vnl_matrixPython', [dirname(__file__)])
        except ImportError:
            import _vnl_matrixPython
            return _vnl_matrixPython
        if fp is not None:
            try:
                _mod = imp.load_module('_vnl_matrixPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vnl_matrixPython = swig_import_helper()
    del swig_import_helper
else:
    import _vnl_matrixPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vnl_vectorPython
import stdcomplexPython
import pyBasePython
class vnl_matrixCF(object):
    """Proxy of C++ vnl_matrixCF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_matrixCF self) -> vnl_matrixCF
        __init__(vnl_matrixCF self, unsigned int r, unsigned int c) -> vnl_matrixCF
        __init__(vnl_matrixCF self, unsigned int r, unsigned int c, stdcomplexF v0) -> vnl_matrixCF
        __init__(vnl_matrixCF self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixCF
        __init__(vnl_matrixCF self, unsigned int r, unsigned int c, unsigned int n, stdcomplexF values) -> vnl_matrixCF
        __init__(vnl_matrixCF self, stdcomplexF data_block, unsigned int r, unsigned int c) -> vnl_matrixCF
        __init__(vnl_matrixCF self, vnl_matrixCF arg0) -> vnl_matrixCF
        __init__(vnl_matrixCF self, vnl_matrixCF arg0, vnl_matrixCF arg1, vnl_tag_add arg2) -> vnl_matrixCF
        __init__(vnl_matrixCF self, vnl_matrixCF arg0, vnl_matrixCF arg1, vnl_tag_sub arg2) -> vnl_matrixCF
        __init__(vnl_matrixCF self, vnl_matrixCF arg0, stdcomplexF arg1, vnl_tag_mul arg2) -> vnl_matrixCF
        __init__(vnl_matrixCF self, vnl_matrixCF arg0, stdcomplexF arg1, vnl_tag_div arg2) -> vnl_matrixCF
        __init__(vnl_matrixCF self, vnl_matrixCF arg0, stdcomplexF arg1, vnl_tag_add arg2) -> vnl_matrixCF
        __init__(vnl_matrixCF self, vnl_matrixCF arg0, stdcomplexF arg1, vnl_tag_sub arg2) -> vnl_matrixCF
        __init__(vnl_matrixCF self, vnl_matrixCF arg0, vnl_matrixCF arg1, vnl_tag_mul arg2) -> vnl_matrixCF
        __init__(vnl_matrixCF self, vnl_matrixCF that, vnl_tag_grab arg1) -> vnl_matrixCF
        """
        _vnl_matrixPython.vnl_matrixCF_swiginit(self, _vnl_matrixPython.new_vnl_matrixCF(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixCF

    def size(self) -> "unsigned int":
        """size(vnl_matrixCF self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixCF_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrixCF self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixCF_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrixCF self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixCF_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrixCF self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixCF_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', arg2: 'stdcomplexF') -> "void":
        """put(vnl_matrixCF self, unsigned int r, unsigned int c, stdcomplexF arg2)"""
        return _vnl_matrixPython.vnl_matrixCF_put(self, r, c, arg2)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "stdcomplexF":
        """get(vnl_matrixCF self, unsigned int r, unsigned int c) -> stdcomplexF"""
        return _vnl_matrixPython.vnl_matrixCF_get(self, r, c)


    def __call__(self, *args) -> "stdcomplexF const &":
        """
        __call__(vnl_matrixCF self, unsigned int r, unsigned int c) -> stdcomplexF
        __call__(vnl_matrixCF self, unsigned int r, unsigned int c) -> stdcomplexF
        """
        return _vnl_matrixPython.vnl_matrixCF___call__(self, *args)


    def fill(self, arg0: 'stdcomplexF') -> "vnl_matrixCF &":
        """fill(vnl_matrixCF self, stdcomplexF arg0) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_fill(self, arg0)


    def fill_diagonal(self, arg0: 'stdcomplexF') -> "vnl_matrixCF &":
        """fill_diagonal(vnl_matrixCF self, stdcomplexF arg0) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorCF') -> "vnl_matrixCF &":
        """set_diagonal(vnl_matrixCF self, vnl_vectorCF arg0) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'stdcomplexF') -> "vnl_matrixCF &":
        """copy_in(vnl_matrixCF self, stdcomplexF arg0) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_copy_in(self, arg0)


    def set(self, d: 'stdcomplexF') -> "vnl_matrixCF &":
        """set(vnl_matrixCF self, stdcomplexF d) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_set(self, d)


    def copy_out(self, arg0: 'stdcomplexF') -> "void":
        """copy_out(vnl_matrixCF self, stdcomplexF arg0)"""
        return _vnl_matrixPython.vnl_matrixCF_copy_out(self, arg0)


    def __idiv__(self, value: 'stdcomplexF') -> "vnl_matrixCF &":
        """__idiv__(vnl_matrixCF self, stdcomplexF value) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF___idiv__(self, value)


    def __iadd__(self, *args) -> "vnl_matrixCF &":
        """
        __iadd__(vnl_matrixCF self, stdcomplexF value) -> vnl_matrixCF
        __iadd__(vnl_matrixCF self, vnl_matrixCF arg0) -> vnl_matrixCF
        """
        return _vnl_matrixPython.vnl_matrixCF___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrixCF &":
        """
        __isub__(vnl_matrixCF self, stdcomplexF value) -> vnl_matrixCF
        __isub__(vnl_matrixCF self, vnl_matrixCF arg0) -> vnl_matrixCF
        """
        return _vnl_matrixPython.vnl_matrixCF___isub__(self, *args)


    def __imul__(self, *args) -> "vnl_matrixCF &":
        """
        __imul__(vnl_matrixCF self, stdcomplexF value) -> vnl_matrixCF
        __imul__(vnl_matrixCF self, vnl_matrixCF rhs) -> vnl_matrixCF
        """
        return _vnl_matrixPython.vnl_matrixCF___imul__(self, *args)


    def __neg__(self) -> "vnl_matrixCF":
        """__neg__(vnl_matrixCF self) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF___neg__(self)


    def __div__(self, v: 'stdcomplexF') -> "vnl_matrixCF":
        """__div__(vnl_matrixCF self, stdcomplexF v) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF___div__(self, v)


    def __add__(self, *args) -> "vnl_matrixCF":
        """
        __add__(vnl_matrixCF self, stdcomplexF v) -> vnl_matrixCF
        __add__(vnl_matrixCF self, vnl_matrixCF rhs) -> vnl_matrixCF
        """
        return _vnl_matrixPython.vnl_matrixCF___add__(self, *args)


    def __sub__(self, *args) -> "vnl_matrixCF":
        """
        __sub__(vnl_matrixCF self, stdcomplexF v) -> vnl_matrixCF
        __sub__(vnl_matrixCF self, vnl_matrixCF rhs) -> vnl_matrixCF
        """
        return _vnl_matrixPython.vnl_matrixCF___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_matrixCF":
        """
        __mul__(vnl_matrixCF self, stdcomplexF v) -> vnl_matrixCF
        __mul__(vnl_matrixCF self, vnl_matrixCF rhs) -> vnl_matrixCF
        """
        return _vnl_matrixPython.vnl_matrixCF___mul__(self, *args)


    def transpose(self) -> "vnl_matrixCF":
        """transpose(vnl_matrixCF self) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrixCF":
        """conjugate_transpose(vnl_matrixCF self) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixCF', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrixCF &":
        """
        update(vnl_matrixCF self, vnl_matrixCF arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrixCF
        update(vnl_matrixCF self, vnl_matrixCF arg0, unsigned int top=0) -> vnl_matrixCF
        update(vnl_matrixCF self, vnl_matrixCF arg0) -> vnl_matrixCF
        """
        return _vnl_matrixPython.vnl_matrixCF_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrixCF &":
        """
        set_column(vnl_matrixCF self, unsigned int i, stdcomplexF v) -> vnl_matrixCF
        set_column(vnl_matrixCF self, unsigned int i, stdcomplexF value) -> vnl_matrixCF
        set_column(vnl_matrixCF self, unsigned int j, vnl_vectorCF v) -> vnl_matrixCF
        """
        return _vnl_matrixPython.vnl_matrixCF_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixCF') -> "vnl_matrixCF &":
        """set_columns(vnl_matrixCF self, unsigned int starting_column, vnl_matrixCF M) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrixCF &":
        """
        set_row(vnl_matrixCF self, unsigned int i, stdcomplexF v) -> vnl_matrixCF
        set_row(vnl_matrixCF self, unsigned int i, stdcomplexF value) -> vnl_matrixCF
        set_row(vnl_matrixCF self, unsigned int i, vnl_vectorCF arg1) -> vnl_matrixCF
        """
        return _vnl_matrixPython.vnl_matrixCF_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrixCF self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixCF
        extract(vnl_matrixCF self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixCF
        extract(vnl_matrixCF self, unsigned int r, unsigned int c) -> vnl_matrixCF
        extract(vnl_matrixCF self, vnl_matrixCF sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrixCF self, vnl_matrixCF sub_matrix, unsigned int top=0)
        extract(vnl_matrixCF self, vnl_matrixCF sub_matrix)
        """
        return _vnl_matrixPython.vnl_matrixCF_extract(self, *args)


    def get_row(self, r: 'unsigned int') -> "vnl_vectorCF":
        """get_row(vnl_matrixCF self, unsigned int r) -> vnl_vectorCF"""
        return _vnl_matrixPython.vnl_matrixCF_get_row(self, r)


    def get_column(self, c: 'unsigned int') -> "vnl_vectorCF":
        """get_column(vnl_matrixCF self, unsigned int c) -> vnl_vectorCF"""
        return _vnl_matrixPython.vnl_matrixCF_get_column(self, c)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixCF":
        """get_rows(vnl_matrixCF self, vnl_vectorUI i) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixCF":
        """get_columns(vnl_matrixCF self, vnl_vectorUI i) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixCF":
        """get_n_rows(vnl_matrixCF self, unsigned int rowstart, unsigned int n) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixCF":
        """get_n_columns(vnl_matrixCF self, unsigned int colstart, unsigned int n) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorCF":
        """get_diagonal(vnl_matrixCF self) -> vnl_vectorCF"""
        return _vnl_matrixPython.vnl_matrixCF_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vectorCF":
        """flatten_row_major(vnl_matrixCF self) -> vnl_vectorCF"""
        return _vnl_matrixPython.vnl_matrixCF_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vectorCF":
        """flatten_column_major(vnl_matrixCF self) -> vnl_vectorCF"""
        return _vnl_matrixPython.vnl_matrixCF_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrixCF &":
        """set_identity(vnl_matrixCF self) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_set_identity(self)


    def inplace_transpose(self) -> "vnl_matrixCF &":
        """inplace_transpose(vnl_matrixCF self) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_inplace_transpose(self)


    def flipud(self) -> "vnl_matrixCF &":
        """flipud(vnl_matrixCF self) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_flipud(self)


    def fliplr(self) -> "vnl_matrixCF &":
        """fliplr(vnl_matrixCF self) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_fliplr(self)


    def normalize_rows(self) -> "vnl_matrixCF &":
        """normalize_rows(vnl_matrixCF self) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrixCF &":
        """normalize_columns(vnl_matrixCF self) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'stdcomplexF') -> "vnl_matrixCF &":
        """scale_row(vnl_matrixCF self, unsigned int row, stdcomplexF value) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'stdcomplexF') -> "vnl_matrixCF &":
        """scale_column(vnl_matrixCF self, unsigned int col, stdcomplexF value) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrixCF') -> "void":
        """swap(vnl_matrixCF self, vnl_matrixCF that)"""
        return _vnl_matrixPython.vnl_matrixCF_swap(self, that)


    def array_one_norm(self) -> "float":
        """array_one_norm(vnl_matrixCF self) -> float"""
        return _vnl_matrixPython.vnl_matrixCF_array_one_norm(self)


    def array_two_norm(self) -> "float":
        """array_two_norm(vnl_matrixCF self) -> float"""
        return _vnl_matrixPython.vnl_matrixCF_array_two_norm(self)


    def array_inf_norm(self) -> "float":
        """array_inf_norm(vnl_matrixCF self) -> float"""
        return _vnl_matrixPython.vnl_matrixCF_array_inf_norm(self)


    def absolute_value_sum(self) -> "float":
        """absolute_value_sum(vnl_matrixCF self) -> float"""
        return _vnl_matrixPython.vnl_matrixCF_absolute_value_sum(self)


    def absolute_value_max(self) -> "float":
        """absolute_value_max(vnl_matrixCF self) -> float"""
        return _vnl_matrixPython.vnl_matrixCF_absolute_value_max(self)


    def operator_one_norm(self) -> "float":
        """operator_one_norm(vnl_matrixCF self) -> float"""
        return _vnl_matrixPython.vnl_matrixCF_operator_one_norm(self)


    def operator_inf_norm(self) -> "float":
        """operator_inf_norm(vnl_matrixCF self) -> float"""
        return _vnl_matrixPython.vnl_matrixCF_operator_inf_norm(self)


    def frobenius_norm(self) -> "float":
        """frobenius_norm(vnl_matrixCF self) -> float"""
        return _vnl_matrixPython.vnl_matrixCF_frobenius_norm(self)


    def fro_norm(self) -> "float":
        """fro_norm(vnl_matrixCF self) -> float"""
        return _vnl_matrixPython.vnl_matrixCF_fro_norm(self)


    def rms(self) -> "float":
        """rms(vnl_matrixCF self) -> float"""
        return _vnl_matrixPython.vnl_matrixCF_rms(self)


    def min_value(self) -> "stdcomplexF":
        """min_value(vnl_matrixCF self) -> stdcomplexF"""
        return _vnl_matrixPython.vnl_matrixCF_min_value(self)


    def max_value(self) -> "stdcomplexF":
        """max_value(vnl_matrixCF self) -> stdcomplexF"""
        return _vnl_matrixPython.vnl_matrixCF_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrixCF self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixCF_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrixCF self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixCF_arg_max(self)


    def mean(self) -> "stdcomplexF":
        """mean(vnl_matrixCF self) -> stdcomplexF"""
        return _vnl_matrixPython.vnl_matrixCF_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrixCF self) -> bool"""
        return _vnl_matrixPython.vnl_matrixCF_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrixCF self) -> bool
        is_identity(vnl_matrixCF self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixCF_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrixCF self) -> bool
        is_zero(vnl_matrixCF self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixCF_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrixCF', tol: 'double') -> "bool":
        """is_equal(vnl_matrixCF self, vnl_matrixCF rhs, double tol) -> bool"""
        return _vnl_matrixPython.vnl_matrixCF_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrixCF self) -> bool"""
        return _vnl_matrixPython.vnl_matrixCF_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrixCF self) -> bool"""
        return _vnl_matrixPython.vnl_matrixCF_has_nans(self)


    def assert_size(self, r: 'unsigned int', c: 'unsigned int') -> "void":
        """assert_size(vnl_matrixCF self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixCF_assert_size(self, r, c)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrixCF self)"""
        return _vnl_matrixPython.vnl_matrixCF_assert_finite(self)


    def read(s: 'istream') -> "vnl_matrixCF":
        """read(istream s) -> vnl_matrixCF"""
        return _vnl_matrixPython.vnl_matrixCF_read(s)

    read = staticmethod(read)

    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrixCF self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixCF_read_ascii(self, s)


    def data_block(self, *args) -> "stdcomplexF *":
        """
        data_block(vnl_matrixCF self) -> stdcomplexF
        data_block(vnl_matrixCF self) -> stdcomplexF
        """
        return _vnl_matrixPython.vnl_matrixCF_data_block(self, *args)


    def data_array(self, *args) -> "stdcomplexF **":
        """
        data_array(vnl_matrixCF self) -> stdcomplexF
        data_array(vnl_matrixCF self) -> stdcomplexF **
        """
        return _vnl_matrixPython.vnl_matrixCF_data_array(self, *args)


    def begin(self, *args) -> "stdcomplexF const *":
        """
        begin(vnl_matrixCF self) -> stdcomplexF
        begin(vnl_matrixCF self) -> stdcomplexF
        """
        return _vnl_matrixPython.vnl_matrixCF_begin(self, *args)


    def end(self, *args) -> "stdcomplexF const *":
        """
        end(vnl_matrixCF self) -> stdcomplexF
        end(vnl_matrixCF self) -> stdcomplexF
        """
        return _vnl_matrixPython.vnl_matrixCF_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrixCF') -> "bool":
        """operator_eq(vnl_matrixCF self, vnl_matrixCF rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixCF_operator_eq(self, rhs)


    def __eq__(self, that: 'vnl_matrixCF') -> "bool":
        """__eq__(vnl_matrixCF self, vnl_matrixCF that) -> bool"""
        return _vnl_matrixPython.vnl_matrixCF___eq__(self, that)


    def __ne__(self, that: 'vnl_matrixCF') -> "bool":
        """__ne__(vnl_matrixCF self, vnl_matrixCF that) -> bool"""
        return _vnl_matrixPython.vnl_matrixCF___ne__(self, that)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrixCF self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixCF__print(self, os)


    def clear(self) -> "void":
        """clear(vnl_matrixCF self)"""
        return _vnl_matrixPython.vnl_matrixCF_clear(self)


    def set_size(self, r: 'unsigned int', c: 'unsigned int') -> "bool":
        """set_size(vnl_matrixCF self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixCF_set_size(self, r, c)

vnl_matrixCF.size = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_size, None, vnl_matrixCF)
vnl_matrixCF.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_rows, None, vnl_matrixCF)
vnl_matrixCF.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_cols, None, vnl_matrixCF)
vnl_matrixCF.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_columns, None, vnl_matrixCF)
vnl_matrixCF.put = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_put, None, vnl_matrixCF)
vnl_matrixCF.get = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_get, None, vnl_matrixCF)
vnl_matrixCF.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixCF___call__, None, vnl_matrixCF)
vnl_matrixCF.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_fill, None, vnl_matrixCF)
vnl_matrixCF.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_fill_diagonal, None, vnl_matrixCF)
vnl_matrixCF.set_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_set_diagonal, None, vnl_matrixCF)
vnl_matrixCF.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_copy_in, None, vnl_matrixCF)
vnl_matrixCF.set = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_set, None, vnl_matrixCF)
vnl_matrixCF.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_copy_out, None, vnl_matrixCF)
vnl_matrixCF.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixCF___idiv__, None, vnl_matrixCF)
vnl_matrixCF.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixCF___iadd__, None, vnl_matrixCF)
vnl_matrixCF.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixCF___isub__, None, vnl_matrixCF)
vnl_matrixCF.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixCF___imul__, None, vnl_matrixCF)
vnl_matrixCF.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixCF___neg__, None, vnl_matrixCF)
vnl_matrixCF.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixCF___div__, None, vnl_matrixCF)
vnl_matrixCF.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixCF___add__, None, vnl_matrixCF)
vnl_matrixCF.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixCF___sub__, None, vnl_matrixCF)
vnl_matrixCF.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixCF___mul__, None, vnl_matrixCF)
vnl_matrixCF.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_transpose, None, vnl_matrixCF)
vnl_matrixCF.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_conjugate_transpose, None, vnl_matrixCF)
vnl_matrixCF.update = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_update, None, vnl_matrixCF)
vnl_matrixCF.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_set_column, None, vnl_matrixCF)
vnl_matrixCF.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_set_columns, None, vnl_matrixCF)
vnl_matrixCF.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_set_row, None, vnl_matrixCF)
vnl_matrixCF.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_extract, None, vnl_matrixCF)
vnl_matrixCF.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_get_row, None, vnl_matrixCF)
vnl_matrixCF.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_get_column, None, vnl_matrixCF)
vnl_matrixCF.get_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_get_rows, None, vnl_matrixCF)
vnl_matrixCF.get_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_get_columns, None, vnl_matrixCF)
vnl_matrixCF.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_get_n_rows, None, vnl_matrixCF)
vnl_matrixCF.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_get_n_columns, None, vnl_matrixCF)
vnl_matrixCF.get_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_get_diagonal, None, vnl_matrixCF)
vnl_matrixCF.flatten_row_major = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_flatten_row_major, None, vnl_matrixCF)
vnl_matrixCF.flatten_column_major = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_flatten_column_major, None, vnl_matrixCF)
vnl_matrixCF.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_set_identity, None, vnl_matrixCF)
vnl_matrixCF.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_inplace_transpose, None, vnl_matrixCF)
vnl_matrixCF.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_flipud, None, vnl_matrixCF)
vnl_matrixCF.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_fliplr, None, vnl_matrixCF)
vnl_matrixCF.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_normalize_rows, None, vnl_matrixCF)
vnl_matrixCF.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_normalize_columns, None, vnl_matrixCF)
vnl_matrixCF.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_scale_row, None, vnl_matrixCF)
vnl_matrixCF.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_scale_column, None, vnl_matrixCF)
vnl_matrixCF.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_swap, None, vnl_matrixCF)
vnl_matrixCF.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_array_one_norm, None, vnl_matrixCF)
vnl_matrixCF.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_array_two_norm, None, vnl_matrixCF)
vnl_matrixCF.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_array_inf_norm, None, vnl_matrixCF)
vnl_matrixCF.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_absolute_value_sum, None, vnl_matrixCF)
vnl_matrixCF.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_absolute_value_max, None, vnl_matrixCF)
vnl_matrixCF.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_operator_one_norm, None, vnl_matrixCF)
vnl_matrixCF.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_operator_inf_norm, None, vnl_matrixCF)
vnl_matrixCF.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_frobenius_norm, None, vnl_matrixCF)
vnl_matrixCF.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_fro_norm, None, vnl_matrixCF)
vnl_matrixCF.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_rms, None, vnl_matrixCF)
vnl_matrixCF.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_min_value, None, vnl_matrixCF)
vnl_matrixCF.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_max_value, None, vnl_matrixCF)
vnl_matrixCF.arg_min = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_arg_min, None, vnl_matrixCF)
vnl_matrixCF.arg_max = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_arg_max, None, vnl_matrixCF)
vnl_matrixCF.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_mean, None, vnl_matrixCF)
vnl_matrixCF.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_empty, None, vnl_matrixCF)
vnl_matrixCF.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_is_identity, None, vnl_matrixCF)
vnl_matrixCF.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_is_zero, None, vnl_matrixCF)
vnl_matrixCF.is_equal = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_is_equal, None, vnl_matrixCF)
vnl_matrixCF.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_is_finite, None, vnl_matrixCF)
vnl_matrixCF.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_has_nans, None, vnl_matrixCF)
vnl_matrixCF.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_assert_size, None, vnl_matrixCF)
vnl_matrixCF.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_assert_finite, None, vnl_matrixCF)
vnl_matrixCF.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_read_ascii, None, vnl_matrixCF)
vnl_matrixCF.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_data_block, None, vnl_matrixCF)
vnl_matrixCF.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_data_array, None, vnl_matrixCF)
vnl_matrixCF.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_begin, None, vnl_matrixCF)
vnl_matrixCF.end = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_end, None, vnl_matrixCF)
vnl_matrixCF.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_operator_eq, None, vnl_matrixCF)
vnl_matrixCF.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixCF___eq__, None, vnl_matrixCF)
vnl_matrixCF.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixCF___ne__, None, vnl_matrixCF)
vnl_matrixCF._print = new_instancemethod(_vnl_matrixPython.vnl_matrixCF__print, None, vnl_matrixCF)
vnl_matrixCF.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_clear, None, vnl_matrixCF)
vnl_matrixCF.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixCF_set_size, None, vnl_matrixCF)
vnl_matrixCF_swigregister = _vnl_matrixPython.vnl_matrixCF_swigregister
vnl_matrixCF_swigregister(vnl_matrixCF)

def vnl_matrixCF_read(s: 'istream') -> "vnl_matrixCF":
    """vnl_matrixCF_read(istream s) -> vnl_matrixCF"""
    return _vnl_matrixPython.vnl_matrixCF_read(s)

class vnl_matrixD(object):
    """Proxy of C++ vnl_matrixD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_matrixD self) -> vnl_matrixD
        __init__(vnl_matrixD self, unsigned int r, unsigned int c) -> vnl_matrixD
        __init__(vnl_matrixD self, unsigned int r, unsigned int c, double const & v0) -> vnl_matrixD
        __init__(vnl_matrixD self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixD
        __init__(vnl_matrixD self, unsigned int r, unsigned int c, unsigned int n, double const * values) -> vnl_matrixD
        __init__(vnl_matrixD self, double const * data_block, unsigned int r, unsigned int c) -> vnl_matrixD
        __init__(vnl_matrixD self, vnl_matrixD arg0) -> vnl_matrixD
        __init__(vnl_matrixD self, vnl_matrixD arg0, vnl_matrixD arg1, vnl_tag_add arg2) -> vnl_matrixD
        __init__(vnl_matrixD self, vnl_matrixD arg0, vnl_matrixD arg1, vnl_tag_sub arg2) -> vnl_matrixD
        __init__(vnl_matrixD self, vnl_matrixD arg0, double arg1, vnl_tag_mul arg2) -> vnl_matrixD
        __init__(vnl_matrixD self, vnl_matrixD arg0, double arg1, vnl_tag_div arg2) -> vnl_matrixD
        __init__(vnl_matrixD self, vnl_matrixD arg0, double arg1, vnl_tag_add arg2) -> vnl_matrixD
        __init__(vnl_matrixD self, vnl_matrixD arg0, double arg1, vnl_tag_sub arg2) -> vnl_matrixD
        __init__(vnl_matrixD self, vnl_matrixD arg0, vnl_matrixD arg1, vnl_tag_mul arg2) -> vnl_matrixD
        __init__(vnl_matrixD self, vnl_matrixD that, vnl_tag_grab arg1) -> vnl_matrixD
        """
        _vnl_matrixPython.vnl_matrixD_swiginit(self, _vnl_matrixPython.new_vnl_matrixD(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixD

    def size(self) -> "unsigned int":
        """size(vnl_matrixD self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixD_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrixD self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixD_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrixD self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixD_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrixD self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixD_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', arg2: 'double const &') -> "void":
        """put(vnl_matrixD self, unsigned int r, unsigned int c, double const & arg2)"""
        return _vnl_matrixPython.vnl_matrixD_put(self, r, c, arg2)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "double":
        """get(vnl_matrixD self, unsigned int r, unsigned int c) -> double"""
        return _vnl_matrixPython.vnl_matrixD_get(self, r, c)


    def __call__(self, *args) -> "double const &":
        """
        __call__(vnl_matrixD self, unsigned int r, unsigned int c) -> double
        __call__(vnl_matrixD self, unsigned int r, unsigned int c) -> double const &
        """
        return _vnl_matrixPython.vnl_matrixD___call__(self, *args)


    def fill(self, arg0: 'double const &') -> "vnl_matrixD &":
        """fill(vnl_matrixD self, double const & arg0) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_fill(self, arg0)


    def fill_diagonal(self, arg0: 'double const &') -> "vnl_matrixD &":
        """fill_diagonal(vnl_matrixD self, double const & arg0) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorD') -> "vnl_matrixD &":
        """set_diagonal(vnl_matrixD self, vnl_vectorD arg0) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'double const *') -> "vnl_matrixD &":
        """copy_in(vnl_matrixD self, double const * arg0) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_copy_in(self, arg0)


    def set(self, d: 'double const *') -> "vnl_matrixD &":
        """set(vnl_matrixD self, double const * d) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_set(self, d)


    def copy_out(self, arg0: 'double *') -> "void":
        """copy_out(vnl_matrixD self, double * arg0)"""
        return _vnl_matrixPython.vnl_matrixD_copy_out(self, arg0)


    def __idiv__(self, value: 'double') -> "vnl_matrixD &":
        """__idiv__(vnl_matrixD self, double value) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD___idiv__(self, value)


    def __iadd__(self, *args) -> "vnl_matrixD &":
        """
        __iadd__(vnl_matrixD self, double value) -> vnl_matrixD
        __iadd__(vnl_matrixD self, vnl_matrixD arg0) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrixD &":
        """
        __isub__(vnl_matrixD self, double value) -> vnl_matrixD
        __isub__(vnl_matrixD self, vnl_matrixD arg0) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD___isub__(self, *args)


    def __imul__(self, *args) -> "vnl_matrixD &":
        """
        __imul__(vnl_matrixD self, double value) -> vnl_matrixD
        __imul__(vnl_matrixD self, vnl_matrixD rhs) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD___imul__(self, *args)


    def __neg__(self) -> "vnl_matrixD":
        """__neg__(vnl_matrixD self) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD___neg__(self)


    def __div__(self, v: 'double const &') -> "vnl_matrixD":
        """__div__(vnl_matrixD self, double const & v) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD___div__(self, v)


    def __add__(self, *args) -> "vnl_matrixD":
        """
        __add__(vnl_matrixD self, double const & v) -> vnl_matrixD
        __add__(vnl_matrixD self, vnl_matrixD rhs) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD___add__(self, *args)


    def __sub__(self, *args) -> "vnl_matrixD":
        """
        __sub__(vnl_matrixD self, double const & v) -> vnl_matrixD
        __sub__(vnl_matrixD self, vnl_matrixD rhs) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_matrixD":
        """
        __mul__(vnl_matrixD self, double const & v) -> vnl_matrixD
        __mul__(vnl_matrixD self, vnl_matrixD rhs) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD___mul__(self, *args)


    def transpose(self) -> "vnl_matrixD":
        """transpose(vnl_matrixD self) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrixD":
        """conjugate_transpose(vnl_matrixD self) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixD', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrixD &":
        """
        update(vnl_matrixD self, vnl_matrixD arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrixD
        update(vnl_matrixD self, vnl_matrixD arg0, unsigned int top=0) -> vnl_matrixD
        update(vnl_matrixD self, vnl_matrixD arg0) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrixD &":
        """
        set_column(vnl_matrixD self, unsigned int i, double const * v) -> vnl_matrixD
        set_column(vnl_matrixD self, unsigned int i, double value) -> vnl_matrixD
        set_column(vnl_matrixD self, unsigned int j, vnl_vectorD v) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixD') -> "vnl_matrixD &":
        """set_columns(vnl_matrixD self, unsigned int starting_column, vnl_matrixD M) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrixD &":
        """
        set_row(vnl_matrixD self, unsigned int i, double const * v) -> vnl_matrixD
        set_row(vnl_matrixD self, unsigned int i, double value) -> vnl_matrixD
        set_row(vnl_matrixD self, unsigned int i, vnl_vectorD arg1) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrixD self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixD
        extract(vnl_matrixD self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixD
        extract(vnl_matrixD self, unsigned int r, unsigned int c) -> vnl_matrixD
        extract(vnl_matrixD self, vnl_matrixD sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrixD self, vnl_matrixD sub_matrix, unsigned int top=0)
        extract(vnl_matrixD self, vnl_matrixD sub_matrix)
        """
        return _vnl_matrixPython.vnl_matrixD_extract(self, *args)


    def get_row(self, r: 'unsigned int') -> "vnl_vectorD":
        """get_row(vnl_matrixD self, unsigned int r) -> vnl_vectorD"""
        return _vnl_matrixPython.vnl_matrixD_get_row(self, r)


    def get_column(self, c: 'unsigned int') -> "vnl_vectorD":
        """get_column(vnl_matrixD self, unsigned int c) -> vnl_vectorD"""
        return _vnl_matrixPython.vnl_matrixD_get_column(self, c)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_rows(vnl_matrixD self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_columns(vnl_matrixD self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_rows(vnl_matrixD self, unsigned int rowstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_columns(vnl_matrixD self, unsigned int colstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorD":
        """get_diagonal(vnl_matrixD self) -> vnl_vectorD"""
        return _vnl_matrixPython.vnl_matrixD_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vectorD":
        """flatten_row_major(vnl_matrixD self) -> vnl_vectorD"""
        return _vnl_matrixPython.vnl_matrixD_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vectorD":
        """flatten_column_major(vnl_matrixD self) -> vnl_vectorD"""
        return _vnl_matrixPython.vnl_matrixD_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrixD &":
        """set_identity(vnl_matrixD self) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_set_identity(self)


    def inplace_transpose(self) -> "vnl_matrixD &":
        """inplace_transpose(vnl_matrixD self) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_inplace_transpose(self)


    def flipud(self) -> "vnl_matrixD &":
        """flipud(vnl_matrixD self) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_flipud(self)


    def fliplr(self) -> "vnl_matrixD &":
        """fliplr(vnl_matrixD self) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_fliplr(self)


    def normalize_rows(self) -> "vnl_matrixD &":
        """normalize_rows(vnl_matrixD self) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrixD &":
        """normalize_columns(vnl_matrixD self) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'double') -> "vnl_matrixD &":
        """scale_row(vnl_matrixD self, unsigned int row, double value) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'double') -> "vnl_matrixD &":
        """scale_column(vnl_matrixD self, unsigned int col, double value) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrixD') -> "void":
        """swap(vnl_matrixD self, vnl_matrixD that)"""
        return _vnl_matrixPython.vnl_matrixD_swap(self, that)


    def array_one_norm(self) -> "double":
        """array_one_norm(vnl_matrixD self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_array_one_norm(self)


    def array_two_norm(self) -> "double":
        """array_two_norm(vnl_matrixD self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_array_two_norm(self)


    def array_inf_norm(self) -> "double":
        """array_inf_norm(vnl_matrixD self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_array_inf_norm(self)


    def absolute_value_sum(self) -> "double":
        """absolute_value_sum(vnl_matrixD self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_absolute_value_sum(self)


    def absolute_value_max(self) -> "double":
        """absolute_value_max(vnl_matrixD self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_absolute_value_max(self)


    def operator_one_norm(self) -> "double":
        """operator_one_norm(vnl_matrixD self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_operator_one_norm(self)


    def operator_inf_norm(self) -> "double":
        """operator_inf_norm(vnl_matrixD self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_operator_inf_norm(self)


    def frobenius_norm(self) -> "double":
        """frobenius_norm(vnl_matrixD self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_frobenius_norm(self)


    def fro_norm(self) -> "double":
        """fro_norm(vnl_matrixD self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_fro_norm(self)


    def rms(self) -> "double":
        """rms(vnl_matrixD self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_rms(self)


    def min_value(self) -> "double":
        """min_value(vnl_matrixD self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_min_value(self)


    def max_value(self) -> "double":
        """max_value(vnl_matrixD self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrixD self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixD_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrixD self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixD_arg_max(self)


    def mean(self) -> "double":
        """mean(vnl_matrixD self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrixD self) -> bool"""
        return _vnl_matrixPython.vnl_matrixD_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrixD self) -> bool
        is_identity(vnl_matrixD self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixD_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrixD self) -> bool
        is_zero(vnl_matrixD self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixD_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrixD', tol: 'double') -> "bool":
        """is_equal(vnl_matrixD self, vnl_matrixD rhs, double tol) -> bool"""
        return _vnl_matrixPython.vnl_matrixD_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrixD self) -> bool"""
        return _vnl_matrixPython.vnl_matrixD_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrixD self) -> bool"""
        return _vnl_matrixPython.vnl_matrixD_has_nans(self)


    def assert_size(self, r: 'unsigned int', c: 'unsigned int') -> "void":
        """assert_size(vnl_matrixD self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixD_assert_size(self, r, c)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrixD self)"""
        return _vnl_matrixPython.vnl_matrixD_assert_finite(self)


    def read(s: 'istream') -> "vnl_matrixD":
        """read(istream s) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_read(s)

    read = staticmethod(read)

    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrixD self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixD_read_ascii(self, s)


    def data_block(self, *args) -> "double *":
        """
        data_block(vnl_matrixD self) -> double const
        data_block(vnl_matrixD self) -> double *
        """
        return _vnl_matrixPython.vnl_matrixD_data_block(self, *args)


    def data_array(self, *args) -> "double **":
        """
        data_array(vnl_matrixD self) -> double const
        data_array(vnl_matrixD self) -> double **
        """
        return _vnl_matrixPython.vnl_matrixD_data_array(self, *args)


    def begin(self, *args) -> "double const *":
        """
        begin(vnl_matrixD self) -> double
        begin(vnl_matrixD self) -> double const *
        """
        return _vnl_matrixPython.vnl_matrixD_begin(self, *args)


    def end(self, *args) -> "double const *":
        """
        end(vnl_matrixD self) -> double
        end(vnl_matrixD self) -> double const *
        """
        return _vnl_matrixPython.vnl_matrixD_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrixD') -> "bool":
        """operator_eq(vnl_matrixD self, vnl_matrixD rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixD_operator_eq(self, rhs)


    def __eq__(self, that: 'vnl_matrixD') -> "bool":
        """__eq__(vnl_matrixD self, vnl_matrixD that) -> bool"""
        return _vnl_matrixPython.vnl_matrixD___eq__(self, that)


    def __ne__(self, that: 'vnl_matrixD') -> "bool":
        """__ne__(vnl_matrixD self, vnl_matrixD that) -> bool"""
        return _vnl_matrixPython.vnl_matrixD___ne__(self, that)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrixD self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixD__print(self, os)


    def clear(self) -> "void":
        """clear(vnl_matrixD self)"""
        return _vnl_matrixPython.vnl_matrixD_clear(self)


    def set_size(self, r: 'unsigned int', c: 'unsigned int') -> "bool":
        """set_size(vnl_matrixD self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixD_set_size(self, r, c)

vnl_matrixD.size = new_instancemethod(_vnl_matrixPython.vnl_matrixD_size, None, vnl_matrixD)
vnl_matrixD.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixD_rows, None, vnl_matrixD)
vnl_matrixD.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixD_cols, None, vnl_matrixD)
vnl_matrixD.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixD_columns, None, vnl_matrixD)
vnl_matrixD.put = new_instancemethod(_vnl_matrixPython.vnl_matrixD_put, None, vnl_matrixD)
vnl_matrixD.get = new_instancemethod(_vnl_matrixPython.vnl_matrixD_get, None, vnl_matrixD)
vnl_matrixD.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___call__, None, vnl_matrixD)
vnl_matrixD.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixD_fill, None, vnl_matrixD)
vnl_matrixD.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixD_fill_diagonal, None, vnl_matrixD)
vnl_matrixD.set_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixD_set_diagonal, None, vnl_matrixD)
vnl_matrixD.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixD_copy_in, None, vnl_matrixD)
vnl_matrixD.set = new_instancemethod(_vnl_matrixPython.vnl_matrixD_set, None, vnl_matrixD)
vnl_matrixD.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixD_copy_out, None, vnl_matrixD)
vnl_matrixD.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___idiv__, None, vnl_matrixD)
vnl_matrixD.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___iadd__, None, vnl_matrixD)
vnl_matrixD.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___isub__, None, vnl_matrixD)
vnl_matrixD.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___imul__, None, vnl_matrixD)
vnl_matrixD.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___neg__, None, vnl_matrixD)
vnl_matrixD.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___div__, None, vnl_matrixD)
vnl_matrixD.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___add__, None, vnl_matrixD)
vnl_matrixD.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___sub__, None, vnl_matrixD)
vnl_matrixD.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___mul__, None, vnl_matrixD)
vnl_matrixD.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixD_transpose, None, vnl_matrixD)
vnl_matrixD.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixD_conjugate_transpose, None, vnl_matrixD)
vnl_matrixD.update = new_instancemethod(_vnl_matrixPython.vnl_matrixD_update, None, vnl_matrixD)
vnl_matrixD.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixD_set_column, None, vnl_matrixD)
vnl_matrixD.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixD_set_columns, None, vnl_matrixD)
vnl_matrixD.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixD_set_row, None, vnl_matrixD)
vnl_matrixD.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixD_extract, None, vnl_matrixD)
vnl_matrixD.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixD_get_row, None, vnl_matrixD)
vnl_matrixD.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixD_get_column, None, vnl_matrixD)
vnl_matrixD.get_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixD_get_rows, None, vnl_matrixD)
vnl_matrixD.get_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixD_get_columns, None, vnl_matrixD)
vnl_matrixD.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixD_get_n_rows, None, vnl_matrixD)
vnl_matrixD.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixD_get_n_columns, None, vnl_matrixD)
vnl_matrixD.get_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixD_get_diagonal, None, vnl_matrixD)
vnl_matrixD.flatten_row_major = new_instancemethod(_vnl_matrixPython.vnl_matrixD_flatten_row_major, None, vnl_matrixD)
vnl_matrixD.flatten_column_major = new_instancemethod(_vnl_matrixPython.vnl_matrixD_flatten_column_major, None, vnl_matrixD)
vnl_matrixD.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixD_set_identity, None, vnl_matrixD)
vnl_matrixD.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixD_inplace_transpose, None, vnl_matrixD)
vnl_matrixD.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixD_flipud, None, vnl_matrixD)
vnl_matrixD.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixD_fliplr, None, vnl_matrixD)
vnl_matrixD.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixD_normalize_rows, None, vnl_matrixD)
vnl_matrixD.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixD_normalize_columns, None, vnl_matrixD)
vnl_matrixD.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixD_scale_row, None, vnl_matrixD)
vnl_matrixD.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixD_scale_column, None, vnl_matrixD)
vnl_matrixD.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixD_swap, None, vnl_matrixD)
vnl_matrixD.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixD_array_one_norm, None, vnl_matrixD)
vnl_matrixD.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixD_array_two_norm, None, vnl_matrixD)
vnl_matrixD.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixD_array_inf_norm, None, vnl_matrixD)
vnl_matrixD.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixD_absolute_value_sum, None, vnl_matrixD)
vnl_matrixD.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixD_absolute_value_max, None, vnl_matrixD)
vnl_matrixD.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixD_operator_one_norm, None, vnl_matrixD)
vnl_matrixD.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixD_operator_inf_norm, None, vnl_matrixD)
vnl_matrixD.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixD_frobenius_norm, None, vnl_matrixD)
vnl_matrixD.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixD_fro_norm, None, vnl_matrixD)
vnl_matrixD.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixD_rms, None, vnl_matrixD)
vnl_matrixD.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixD_min_value, None, vnl_matrixD)
vnl_matrixD.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixD_max_value, None, vnl_matrixD)
vnl_matrixD.arg_min = new_instancemethod(_vnl_matrixPython.vnl_matrixD_arg_min, None, vnl_matrixD)
vnl_matrixD.arg_max = new_instancemethod(_vnl_matrixPython.vnl_matrixD_arg_max, None, vnl_matrixD)
vnl_matrixD.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixD_mean, None, vnl_matrixD)
vnl_matrixD.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixD_empty, None, vnl_matrixD)
vnl_matrixD.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixD_is_identity, None, vnl_matrixD)
vnl_matrixD.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixD_is_zero, None, vnl_matrixD)
vnl_matrixD.is_equal = new_instancemethod(_vnl_matrixPython.vnl_matrixD_is_equal, None, vnl_matrixD)
vnl_matrixD.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixD_is_finite, None, vnl_matrixD)
vnl_matrixD.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixD_has_nans, None, vnl_matrixD)
vnl_matrixD.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixD_assert_size, None, vnl_matrixD)
vnl_matrixD.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixD_assert_finite, None, vnl_matrixD)
vnl_matrixD.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixD_read_ascii, None, vnl_matrixD)
vnl_matrixD.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixD_data_block, None, vnl_matrixD)
vnl_matrixD.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixD_data_array, None, vnl_matrixD)
vnl_matrixD.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixD_begin, None, vnl_matrixD)
vnl_matrixD.end = new_instancemethod(_vnl_matrixPython.vnl_matrixD_end, None, vnl_matrixD)
vnl_matrixD.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixD_operator_eq, None, vnl_matrixD)
vnl_matrixD.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___eq__, None, vnl_matrixD)
vnl_matrixD.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___ne__, None, vnl_matrixD)
vnl_matrixD._print = new_instancemethod(_vnl_matrixPython.vnl_matrixD__print, None, vnl_matrixD)
vnl_matrixD.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixD_clear, None, vnl_matrixD)
vnl_matrixD.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixD_set_size, None, vnl_matrixD)
vnl_matrixD_swigregister = _vnl_matrixPython.vnl_matrixD_swigregister
vnl_matrixD_swigregister(vnl_matrixD)

def vnl_matrixD_read(s: 'istream') -> "vnl_matrixD":
    """vnl_matrixD_read(istream s) -> vnl_matrixD"""
    return _vnl_matrixPython.vnl_matrixD_read(s)

class vnl_matrixF(object):
    """Proxy of C++ vnl_matrixF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_matrixF self) -> vnl_matrixF
        __init__(vnl_matrixF self, unsigned int r, unsigned int c) -> vnl_matrixF
        __init__(vnl_matrixF self, unsigned int r, unsigned int c, float const & v0) -> vnl_matrixF
        __init__(vnl_matrixF self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixF
        __init__(vnl_matrixF self, unsigned int r, unsigned int c, unsigned int n, float const * values) -> vnl_matrixF
        __init__(vnl_matrixF self, float const * data_block, unsigned int r, unsigned int c) -> vnl_matrixF
        __init__(vnl_matrixF self, vnl_matrixF arg0) -> vnl_matrixF
        __init__(vnl_matrixF self, vnl_matrixF arg0, vnl_matrixF arg1, vnl_tag_add arg2) -> vnl_matrixF
        __init__(vnl_matrixF self, vnl_matrixF arg0, vnl_matrixF arg1, vnl_tag_sub arg2) -> vnl_matrixF
        __init__(vnl_matrixF self, vnl_matrixF arg0, float arg1, vnl_tag_mul arg2) -> vnl_matrixF
        __init__(vnl_matrixF self, vnl_matrixF arg0, float arg1, vnl_tag_div arg2) -> vnl_matrixF
        __init__(vnl_matrixF self, vnl_matrixF arg0, float arg1, vnl_tag_add arg2) -> vnl_matrixF
        __init__(vnl_matrixF self, vnl_matrixF arg0, float arg1, vnl_tag_sub arg2) -> vnl_matrixF
        __init__(vnl_matrixF self, vnl_matrixF arg0, vnl_matrixF arg1, vnl_tag_mul arg2) -> vnl_matrixF
        __init__(vnl_matrixF self, vnl_matrixF that, vnl_tag_grab arg1) -> vnl_matrixF
        """
        _vnl_matrixPython.vnl_matrixF_swiginit(self, _vnl_matrixPython.new_vnl_matrixF(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixF

    def size(self) -> "unsigned int":
        """size(vnl_matrixF self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixF_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrixF self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixF_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrixF self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixF_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrixF self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixF_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', arg2: 'float const &') -> "void":
        """put(vnl_matrixF self, unsigned int r, unsigned int c, float const & arg2)"""
        return _vnl_matrixPython.vnl_matrixF_put(self, r, c, arg2)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "float":
        """get(vnl_matrixF self, unsigned int r, unsigned int c) -> float"""
        return _vnl_matrixPython.vnl_matrixF_get(self, r, c)


    def __call__(self, *args) -> "float const &":
        """
        __call__(vnl_matrixF self, unsigned int r, unsigned int c) -> float
        __call__(vnl_matrixF self, unsigned int r, unsigned int c) -> float const &
        """
        return _vnl_matrixPython.vnl_matrixF___call__(self, *args)


    def fill(self, arg0: 'float const &') -> "vnl_matrixF &":
        """fill(vnl_matrixF self, float const & arg0) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_fill(self, arg0)


    def fill_diagonal(self, arg0: 'float const &') -> "vnl_matrixF &":
        """fill_diagonal(vnl_matrixF self, float const & arg0) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorF') -> "vnl_matrixF &":
        """set_diagonal(vnl_matrixF self, vnl_vectorF arg0) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'float const *') -> "vnl_matrixF &":
        """copy_in(vnl_matrixF self, float const * arg0) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_copy_in(self, arg0)


    def set(self, d: 'float const *') -> "vnl_matrixF &":
        """set(vnl_matrixF self, float const * d) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_set(self, d)


    def copy_out(self, arg0: 'float *') -> "void":
        """copy_out(vnl_matrixF self, float * arg0)"""
        return _vnl_matrixPython.vnl_matrixF_copy_out(self, arg0)


    def __idiv__(self, value: 'float') -> "vnl_matrixF &":
        """__idiv__(vnl_matrixF self, float value) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF___idiv__(self, value)


    def __iadd__(self, *args) -> "vnl_matrixF &":
        """
        __iadd__(vnl_matrixF self, float value) -> vnl_matrixF
        __iadd__(vnl_matrixF self, vnl_matrixF arg0) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrixF &":
        """
        __isub__(vnl_matrixF self, float value) -> vnl_matrixF
        __isub__(vnl_matrixF self, vnl_matrixF arg0) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF___isub__(self, *args)


    def __imul__(self, *args) -> "vnl_matrixF &":
        """
        __imul__(vnl_matrixF self, float value) -> vnl_matrixF
        __imul__(vnl_matrixF self, vnl_matrixF rhs) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF___imul__(self, *args)


    def __neg__(self) -> "vnl_matrixF":
        """__neg__(vnl_matrixF self) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF___neg__(self)


    def __div__(self, v: 'float const &') -> "vnl_matrixF":
        """__div__(vnl_matrixF self, float const & v) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF___div__(self, v)


    def __add__(self, *args) -> "vnl_matrixF":
        """
        __add__(vnl_matrixF self, float const & v) -> vnl_matrixF
        __add__(vnl_matrixF self, vnl_matrixF rhs) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF___add__(self, *args)


    def __sub__(self, *args) -> "vnl_matrixF":
        """
        __sub__(vnl_matrixF self, float const & v) -> vnl_matrixF
        __sub__(vnl_matrixF self, vnl_matrixF rhs) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_matrixF":
        """
        __mul__(vnl_matrixF self, float const & v) -> vnl_matrixF
        __mul__(vnl_matrixF self, vnl_matrixF rhs) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF___mul__(self, *args)


    def transpose(self) -> "vnl_matrixF":
        """transpose(vnl_matrixF self) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrixF":
        """conjugate_transpose(vnl_matrixF self) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixF', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrixF &":
        """
        update(vnl_matrixF self, vnl_matrixF arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrixF
        update(vnl_matrixF self, vnl_matrixF arg0, unsigned int top=0) -> vnl_matrixF
        update(vnl_matrixF self, vnl_matrixF arg0) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrixF &":
        """
        set_column(vnl_matrixF self, unsigned int i, float const * v) -> vnl_matrixF
        set_column(vnl_matrixF self, unsigned int i, float value) -> vnl_matrixF
        set_column(vnl_matrixF self, unsigned int j, vnl_vectorF v) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixF') -> "vnl_matrixF &":
        """set_columns(vnl_matrixF self, unsigned int starting_column, vnl_matrixF M) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrixF &":
        """
        set_row(vnl_matrixF self, unsigned int i, float const * v) -> vnl_matrixF
        set_row(vnl_matrixF self, unsigned int i, float value) -> vnl_matrixF
        set_row(vnl_matrixF self, unsigned int i, vnl_vectorF arg1) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrixF self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixF
        extract(vnl_matrixF self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixF
        extract(vnl_matrixF self, unsigned int r, unsigned int c) -> vnl_matrixF
        extract(vnl_matrixF self, vnl_matrixF sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrixF self, vnl_matrixF sub_matrix, unsigned int top=0)
        extract(vnl_matrixF self, vnl_matrixF sub_matrix)
        """
        return _vnl_matrixPython.vnl_matrixF_extract(self, *args)


    def get_row(self, r: 'unsigned int') -> "vnl_vectorF":
        """get_row(vnl_matrixF self, unsigned int r) -> vnl_vectorF"""
        return _vnl_matrixPython.vnl_matrixF_get_row(self, r)


    def get_column(self, c: 'unsigned int') -> "vnl_vectorF":
        """get_column(vnl_matrixF self, unsigned int c) -> vnl_vectorF"""
        return _vnl_matrixPython.vnl_matrixF_get_column(self, c)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixF":
        """get_rows(vnl_matrixF self, vnl_vectorUI i) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixF":
        """get_columns(vnl_matrixF self, vnl_vectorUI i) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixF":
        """get_n_rows(vnl_matrixF self, unsigned int rowstart, unsigned int n) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixF":
        """get_n_columns(vnl_matrixF self, unsigned int colstart, unsigned int n) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorF":
        """get_diagonal(vnl_matrixF self) -> vnl_vectorF"""
        return _vnl_matrixPython.vnl_matrixF_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vectorF":
        """flatten_row_major(vnl_matrixF self) -> vnl_vectorF"""
        return _vnl_matrixPython.vnl_matrixF_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vectorF":
        """flatten_column_major(vnl_matrixF self) -> vnl_vectorF"""
        return _vnl_matrixPython.vnl_matrixF_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrixF &":
        """set_identity(vnl_matrixF self) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_set_identity(self)


    def inplace_transpose(self) -> "vnl_matrixF &":
        """inplace_transpose(vnl_matrixF self) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_inplace_transpose(self)


    def flipud(self) -> "vnl_matrixF &":
        """flipud(vnl_matrixF self) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_flipud(self)


    def fliplr(self) -> "vnl_matrixF &":
        """fliplr(vnl_matrixF self) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_fliplr(self)


    def normalize_rows(self) -> "vnl_matrixF &":
        """normalize_rows(vnl_matrixF self) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrixF &":
        """normalize_columns(vnl_matrixF self) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'float') -> "vnl_matrixF &":
        """scale_row(vnl_matrixF self, unsigned int row, float value) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'float') -> "vnl_matrixF &":
        """scale_column(vnl_matrixF self, unsigned int col, float value) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrixF') -> "void":
        """swap(vnl_matrixF self, vnl_matrixF that)"""
        return _vnl_matrixPython.vnl_matrixF_swap(self, that)


    def array_one_norm(self) -> "float":
        """array_one_norm(vnl_matrixF self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_array_one_norm(self)


    def array_two_norm(self) -> "float":
        """array_two_norm(vnl_matrixF self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_array_two_norm(self)


    def array_inf_norm(self) -> "float":
        """array_inf_norm(vnl_matrixF self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_array_inf_norm(self)


    def absolute_value_sum(self) -> "float":
        """absolute_value_sum(vnl_matrixF self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_absolute_value_sum(self)


    def absolute_value_max(self) -> "float":
        """absolute_value_max(vnl_matrixF self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_absolute_value_max(self)


    def operator_one_norm(self) -> "float":
        """operator_one_norm(vnl_matrixF self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_operator_one_norm(self)


    def operator_inf_norm(self) -> "float":
        """operator_inf_norm(vnl_matrixF self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_operator_inf_norm(self)


    def frobenius_norm(self) -> "float":
        """frobenius_norm(vnl_matrixF self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_frobenius_norm(self)


    def fro_norm(self) -> "float":
        """fro_norm(vnl_matrixF self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_fro_norm(self)


    def rms(self) -> "float":
        """rms(vnl_matrixF self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_rms(self)


    def min_value(self) -> "float":
        """min_value(vnl_matrixF self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_min_value(self)


    def max_value(self) -> "float":
        """max_value(vnl_matrixF self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrixF self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixF_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrixF self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixF_arg_max(self)


    def mean(self) -> "float":
        """mean(vnl_matrixF self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrixF self) -> bool"""
        return _vnl_matrixPython.vnl_matrixF_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrixF self) -> bool
        is_identity(vnl_matrixF self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixF_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrixF self) -> bool
        is_zero(vnl_matrixF self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixF_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrixF', tol: 'double') -> "bool":
        """is_equal(vnl_matrixF self, vnl_matrixF rhs, double tol) -> bool"""
        return _vnl_matrixPython.vnl_matrixF_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrixF self) -> bool"""
        return _vnl_matrixPython.vnl_matrixF_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrixF self) -> bool"""
        return _vnl_matrixPython.vnl_matrixF_has_nans(self)


    def assert_size(self, r: 'unsigned int', c: 'unsigned int') -> "void":
        """assert_size(vnl_matrixF self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixF_assert_size(self, r, c)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrixF self)"""
        return _vnl_matrixPython.vnl_matrixF_assert_finite(self)


    def read(s: 'istream') -> "vnl_matrixF":
        """read(istream s) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_read(s)

    read = staticmethod(read)

    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrixF self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixF_read_ascii(self, s)


    def data_block(self, *args) -> "float *":
        """
        data_block(vnl_matrixF self) -> float const
        data_block(vnl_matrixF self) -> float *
        """
        return _vnl_matrixPython.vnl_matrixF_data_block(self, *args)


    def data_array(self, *args) -> "float **":
        """
        data_array(vnl_matrixF self) -> float const
        data_array(vnl_matrixF self) -> float **
        """
        return _vnl_matrixPython.vnl_matrixF_data_array(self, *args)


    def begin(self, *args) -> "float const *":
        """
        begin(vnl_matrixF self) -> float
        begin(vnl_matrixF self) -> float const *
        """
        return _vnl_matrixPython.vnl_matrixF_begin(self, *args)


    def end(self, *args) -> "float const *":
        """
        end(vnl_matrixF self) -> float
        end(vnl_matrixF self) -> float const *
        """
        return _vnl_matrixPython.vnl_matrixF_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrixF') -> "bool":
        """operator_eq(vnl_matrixF self, vnl_matrixF rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixF_operator_eq(self, rhs)


    def __eq__(self, that: 'vnl_matrixF') -> "bool":
        """__eq__(vnl_matrixF self, vnl_matrixF that) -> bool"""
        return _vnl_matrixPython.vnl_matrixF___eq__(self, that)


    def __ne__(self, that: 'vnl_matrixF') -> "bool":
        """__ne__(vnl_matrixF self, vnl_matrixF that) -> bool"""
        return _vnl_matrixPython.vnl_matrixF___ne__(self, that)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrixF self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixF__print(self, os)


    def clear(self) -> "void":
        """clear(vnl_matrixF self)"""
        return _vnl_matrixPython.vnl_matrixF_clear(self)


    def set_size(self, r: 'unsigned int', c: 'unsigned int') -> "bool":
        """set_size(vnl_matrixF self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixF_set_size(self, r, c)

vnl_matrixF.size = new_instancemethod(_vnl_matrixPython.vnl_matrixF_size, None, vnl_matrixF)
vnl_matrixF.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixF_rows, None, vnl_matrixF)
vnl_matrixF.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixF_cols, None, vnl_matrixF)
vnl_matrixF.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixF_columns, None, vnl_matrixF)
vnl_matrixF.put = new_instancemethod(_vnl_matrixPython.vnl_matrixF_put, None, vnl_matrixF)
vnl_matrixF.get = new_instancemethod(_vnl_matrixPython.vnl_matrixF_get, None, vnl_matrixF)
vnl_matrixF.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___call__, None, vnl_matrixF)
vnl_matrixF.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixF_fill, None, vnl_matrixF)
vnl_matrixF.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixF_fill_diagonal, None, vnl_matrixF)
vnl_matrixF.set_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixF_set_diagonal, None, vnl_matrixF)
vnl_matrixF.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixF_copy_in, None, vnl_matrixF)
vnl_matrixF.set = new_instancemethod(_vnl_matrixPython.vnl_matrixF_set, None, vnl_matrixF)
vnl_matrixF.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixF_copy_out, None, vnl_matrixF)
vnl_matrixF.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___idiv__, None, vnl_matrixF)
vnl_matrixF.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___iadd__, None, vnl_matrixF)
vnl_matrixF.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___isub__, None, vnl_matrixF)
vnl_matrixF.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___imul__, None, vnl_matrixF)
vnl_matrixF.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___neg__, None, vnl_matrixF)
vnl_matrixF.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___div__, None, vnl_matrixF)
vnl_matrixF.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___add__, None, vnl_matrixF)
vnl_matrixF.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___sub__, None, vnl_matrixF)
vnl_matrixF.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___mul__, None, vnl_matrixF)
vnl_matrixF.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixF_transpose, None, vnl_matrixF)
vnl_matrixF.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixF_conjugate_transpose, None, vnl_matrixF)
vnl_matrixF.update = new_instancemethod(_vnl_matrixPython.vnl_matrixF_update, None, vnl_matrixF)
vnl_matrixF.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixF_set_column, None, vnl_matrixF)
vnl_matrixF.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixF_set_columns, None, vnl_matrixF)
vnl_matrixF.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixF_set_row, None, vnl_matrixF)
vnl_matrixF.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixF_extract, None, vnl_matrixF)
vnl_matrixF.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixF_get_row, None, vnl_matrixF)
vnl_matrixF.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixF_get_column, None, vnl_matrixF)
vnl_matrixF.get_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixF_get_rows, None, vnl_matrixF)
vnl_matrixF.get_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixF_get_columns, None, vnl_matrixF)
vnl_matrixF.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixF_get_n_rows, None, vnl_matrixF)
vnl_matrixF.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixF_get_n_columns, None, vnl_matrixF)
vnl_matrixF.get_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixF_get_diagonal, None, vnl_matrixF)
vnl_matrixF.flatten_row_major = new_instancemethod(_vnl_matrixPython.vnl_matrixF_flatten_row_major, None, vnl_matrixF)
vnl_matrixF.flatten_column_major = new_instancemethod(_vnl_matrixPython.vnl_matrixF_flatten_column_major, None, vnl_matrixF)
vnl_matrixF.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixF_set_identity, None, vnl_matrixF)
vnl_matrixF.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixF_inplace_transpose, None, vnl_matrixF)
vnl_matrixF.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixF_flipud, None, vnl_matrixF)
vnl_matrixF.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixF_fliplr, None, vnl_matrixF)
vnl_matrixF.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixF_normalize_rows, None, vnl_matrixF)
vnl_matrixF.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixF_normalize_columns, None, vnl_matrixF)
vnl_matrixF.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixF_scale_row, None, vnl_matrixF)
vnl_matrixF.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixF_scale_column, None, vnl_matrixF)
vnl_matrixF.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixF_swap, None, vnl_matrixF)
vnl_matrixF.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixF_array_one_norm, None, vnl_matrixF)
vnl_matrixF.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixF_array_two_norm, None, vnl_matrixF)
vnl_matrixF.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixF_array_inf_norm, None, vnl_matrixF)
vnl_matrixF.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixF_absolute_value_sum, None, vnl_matrixF)
vnl_matrixF.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixF_absolute_value_max, None, vnl_matrixF)
vnl_matrixF.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixF_operator_one_norm, None, vnl_matrixF)
vnl_matrixF.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixF_operator_inf_norm, None, vnl_matrixF)
vnl_matrixF.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixF_frobenius_norm, None, vnl_matrixF)
vnl_matrixF.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixF_fro_norm, None, vnl_matrixF)
vnl_matrixF.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixF_rms, None, vnl_matrixF)
vnl_matrixF.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixF_min_value, None, vnl_matrixF)
vnl_matrixF.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixF_max_value, None, vnl_matrixF)
vnl_matrixF.arg_min = new_instancemethod(_vnl_matrixPython.vnl_matrixF_arg_min, None, vnl_matrixF)
vnl_matrixF.arg_max = new_instancemethod(_vnl_matrixPython.vnl_matrixF_arg_max, None, vnl_matrixF)
vnl_matrixF.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixF_mean, None, vnl_matrixF)
vnl_matrixF.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixF_empty, None, vnl_matrixF)
vnl_matrixF.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixF_is_identity, None, vnl_matrixF)
vnl_matrixF.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixF_is_zero, None, vnl_matrixF)
vnl_matrixF.is_equal = new_instancemethod(_vnl_matrixPython.vnl_matrixF_is_equal, None, vnl_matrixF)
vnl_matrixF.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixF_is_finite, None, vnl_matrixF)
vnl_matrixF.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixF_has_nans, None, vnl_matrixF)
vnl_matrixF.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixF_assert_size, None, vnl_matrixF)
vnl_matrixF.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixF_assert_finite, None, vnl_matrixF)
vnl_matrixF.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixF_read_ascii, None, vnl_matrixF)
vnl_matrixF.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixF_data_block, None, vnl_matrixF)
vnl_matrixF.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixF_data_array, None, vnl_matrixF)
vnl_matrixF.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixF_begin, None, vnl_matrixF)
vnl_matrixF.end = new_instancemethod(_vnl_matrixPython.vnl_matrixF_end, None, vnl_matrixF)
vnl_matrixF.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixF_operator_eq, None, vnl_matrixF)
vnl_matrixF.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___eq__, None, vnl_matrixF)
vnl_matrixF.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___ne__, None, vnl_matrixF)
vnl_matrixF._print = new_instancemethod(_vnl_matrixPython.vnl_matrixF__print, None, vnl_matrixF)
vnl_matrixF.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixF_clear, None, vnl_matrixF)
vnl_matrixF.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixF_set_size, None, vnl_matrixF)
vnl_matrixF_swigregister = _vnl_matrixPython.vnl_matrixF_swigregister
vnl_matrixF_swigregister(vnl_matrixF)

def vnl_matrixF_read(s: 'istream') -> "vnl_matrixF":
    """vnl_matrixF_read(istream s) -> vnl_matrixF"""
    return _vnl_matrixPython.vnl_matrixF_read(s)

class vnl_matrixLD(object):
    """Proxy of C++ vnl_matrixLD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_matrixLD self) -> vnl_matrixLD
        __init__(vnl_matrixLD self, unsigned int r, unsigned int c) -> vnl_matrixLD
        __init__(vnl_matrixLD self, unsigned int r, unsigned int c, long double const & v0) -> vnl_matrixLD
        __init__(vnl_matrixLD self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixLD
        __init__(vnl_matrixLD self, unsigned int r, unsigned int c, unsigned int n, long double const * values) -> vnl_matrixLD
        __init__(vnl_matrixLD self, long double const * data_block, unsigned int r, unsigned int c) -> vnl_matrixLD
        __init__(vnl_matrixLD self, vnl_matrixLD arg0) -> vnl_matrixLD
        __init__(vnl_matrixLD self, vnl_matrixLD arg0, vnl_matrixLD arg1, vnl_tag_add arg2) -> vnl_matrixLD
        __init__(vnl_matrixLD self, vnl_matrixLD arg0, vnl_matrixLD arg1, vnl_tag_sub arg2) -> vnl_matrixLD
        __init__(vnl_matrixLD self, vnl_matrixLD arg0, long double arg1, vnl_tag_mul arg2) -> vnl_matrixLD
        __init__(vnl_matrixLD self, vnl_matrixLD arg0, long double arg1, vnl_tag_div arg2) -> vnl_matrixLD
        __init__(vnl_matrixLD self, vnl_matrixLD arg0, long double arg1, vnl_tag_add arg2) -> vnl_matrixLD
        __init__(vnl_matrixLD self, vnl_matrixLD arg0, long double arg1, vnl_tag_sub arg2) -> vnl_matrixLD
        __init__(vnl_matrixLD self, vnl_matrixLD arg0, vnl_matrixLD arg1, vnl_tag_mul arg2) -> vnl_matrixLD
        __init__(vnl_matrixLD self, vnl_matrixLD that, vnl_tag_grab arg1) -> vnl_matrixLD
        """
        _vnl_matrixPython.vnl_matrixLD_swiginit(self, _vnl_matrixPython.new_vnl_matrixLD(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixLD

    def size(self) -> "unsigned int":
        """size(vnl_matrixLD self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixLD_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrixLD self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixLD_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrixLD self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixLD_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrixLD self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixLD_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', arg2: 'long double const &') -> "void":
        """put(vnl_matrixLD self, unsigned int r, unsigned int c, long double const & arg2)"""
        return _vnl_matrixPython.vnl_matrixLD_put(self, r, c, arg2)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "long double":
        """get(vnl_matrixLD self, unsigned int r, unsigned int c) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_get(self, r, c)


    def __call__(self, *args) -> "long double const &":
        """
        __call__(vnl_matrixLD self, unsigned int r, unsigned int c) -> long double
        __call__(vnl_matrixLD self, unsigned int r, unsigned int c) -> long double const &
        """
        return _vnl_matrixPython.vnl_matrixLD___call__(self, *args)


    def fill(self, arg0: 'long double const &') -> "vnl_matrixLD &":
        """fill(vnl_matrixLD self, long double const & arg0) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_fill(self, arg0)


    def fill_diagonal(self, arg0: 'long double const &') -> "vnl_matrixLD &":
        """fill_diagonal(vnl_matrixLD self, long double const & arg0) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorLD') -> "vnl_matrixLD &":
        """set_diagonal(vnl_matrixLD self, vnl_vectorLD arg0) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'long double const *') -> "vnl_matrixLD &":
        """copy_in(vnl_matrixLD self, long double const * arg0) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_copy_in(self, arg0)


    def set(self, d: 'long double const *') -> "vnl_matrixLD &":
        """set(vnl_matrixLD self, long double const * d) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_set(self, d)


    def copy_out(self, arg0: 'long double *') -> "void":
        """copy_out(vnl_matrixLD self, long double * arg0)"""
        return _vnl_matrixPython.vnl_matrixLD_copy_out(self, arg0)


    def __idiv__(self, value: 'long double') -> "vnl_matrixLD &":
        """__idiv__(vnl_matrixLD self, long double value) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD___idiv__(self, value)


    def __iadd__(self, *args) -> "vnl_matrixLD &":
        """
        __iadd__(vnl_matrixLD self, long double value) -> vnl_matrixLD
        __iadd__(vnl_matrixLD self, vnl_matrixLD arg0) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrixLD &":
        """
        __isub__(vnl_matrixLD self, long double value) -> vnl_matrixLD
        __isub__(vnl_matrixLD self, vnl_matrixLD arg0) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD___isub__(self, *args)


    def __imul__(self, *args) -> "vnl_matrixLD &":
        """
        __imul__(vnl_matrixLD self, long double value) -> vnl_matrixLD
        __imul__(vnl_matrixLD self, vnl_matrixLD rhs) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD___imul__(self, *args)


    def __neg__(self) -> "vnl_matrixLD":
        """__neg__(vnl_matrixLD self) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD___neg__(self)


    def __div__(self, v: 'long double const &') -> "vnl_matrixLD":
        """__div__(vnl_matrixLD self, long double const & v) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD___div__(self, v)


    def __add__(self, *args) -> "vnl_matrixLD":
        """
        __add__(vnl_matrixLD self, long double const & v) -> vnl_matrixLD
        __add__(vnl_matrixLD self, vnl_matrixLD rhs) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD___add__(self, *args)


    def __sub__(self, *args) -> "vnl_matrixLD":
        """
        __sub__(vnl_matrixLD self, long double const & v) -> vnl_matrixLD
        __sub__(vnl_matrixLD self, vnl_matrixLD rhs) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_matrixLD":
        """
        __mul__(vnl_matrixLD self, long double const & v) -> vnl_matrixLD
        __mul__(vnl_matrixLD self, vnl_matrixLD rhs) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD___mul__(self, *args)


    def transpose(self) -> "vnl_matrixLD":
        """transpose(vnl_matrixLD self) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrixLD":
        """conjugate_transpose(vnl_matrixLD self) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixLD', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrixLD &":
        """
        update(vnl_matrixLD self, vnl_matrixLD arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrixLD
        update(vnl_matrixLD self, vnl_matrixLD arg0, unsigned int top=0) -> vnl_matrixLD
        update(vnl_matrixLD self, vnl_matrixLD arg0) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrixLD &":
        """
        set_column(vnl_matrixLD self, unsigned int i, long double const * v) -> vnl_matrixLD
        set_column(vnl_matrixLD self, unsigned int i, long double value) -> vnl_matrixLD
        set_column(vnl_matrixLD self, unsigned int j, vnl_vectorLD v) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixLD') -> "vnl_matrixLD &":
        """set_columns(vnl_matrixLD self, unsigned int starting_column, vnl_matrixLD M) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrixLD &":
        """
        set_row(vnl_matrixLD self, unsigned int i, long double const * v) -> vnl_matrixLD
        set_row(vnl_matrixLD self, unsigned int i, long double value) -> vnl_matrixLD
        set_row(vnl_matrixLD self, unsigned int i, vnl_vectorLD arg1) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrixLD self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixLD
        extract(vnl_matrixLD self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixLD
        extract(vnl_matrixLD self, unsigned int r, unsigned int c) -> vnl_matrixLD
        extract(vnl_matrixLD self, vnl_matrixLD sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrixLD self, vnl_matrixLD sub_matrix, unsigned int top=0)
        extract(vnl_matrixLD self, vnl_matrixLD sub_matrix)
        """
        return _vnl_matrixPython.vnl_matrixLD_extract(self, *args)


    def get_row(self, r: 'unsigned int') -> "vnl_vectorLD":
        """get_row(vnl_matrixLD self, unsigned int r) -> vnl_vectorLD"""
        return _vnl_matrixPython.vnl_matrixLD_get_row(self, r)


    def get_column(self, c: 'unsigned int') -> "vnl_vectorLD":
        """get_column(vnl_matrixLD self, unsigned int c) -> vnl_vectorLD"""
        return _vnl_matrixPython.vnl_matrixLD_get_column(self, c)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixLD":
        """get_rows(vnl_matrixLD self, vnl_vectorUI i) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixLD":
        """get_columns(vnl_matrixLD self, vnl_vectorUI i) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixLD":
        """get_n_rows(vnl_matrixLD self, unsigned int rowstart, unsigned int n) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixLD":
        """get_n_columns(vnl_matrixLD self, unsigned int colstart, unsigned int n) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorLD":
        """get_diagonal(vnl_matrixLD self) -> vnl_vectorLD"""
        return _vnl_matrixPython.vnl_matrixLD_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vectorLD":
        """flatten_row_major(vnl_matrixLD self) -> vnl_vectorLD"""
        return _vnl_matrixPython.vnl_matrixLD_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vectorLD":
        """flatten_column_major(vnl_matrixLD self) -> vnl_vectorLD"""
        return _vnl_matrixPython.vnl_matrixLD_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrixLD &":
        """set_identity(vnl_matrixLD self) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_set_identity(self)


    def inplace_transpose(self) -> "vnl_matrixLD &":
        """inplace_transpose(vnl_matrixLD self) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_inplace_transpose(self)


    def flipud(self) -> "vnl_matrixLD &":
        """flipud(vnl_matrixLD self) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_flipud(self)


    def fliplr(self) -> "vnl_matrixLD &":
        """fliplr(vnl_matrixLD self) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_fliplr(self)


    def normalize_rows(self) -> "vnl_matrixLD &":
        """normalize_rows(vnl_matrixLD self) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrixLD &":
        """normalize_columns(vnl_matrixLD self) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'long double') -> "vnl_matrixLD &":
        """scale_row(vnl_matrixLD self, unsigned int row, long double value) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'long double') -> "vnl_matrixLD &":
        """scale_column(vnl_matrixLD self, unsigned int col, long double value) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrixLD') -> "void":
        """swap(vnl_matrixLD self, vnl_matrixLD that)"""
        return _vnl_matrixPython.vnl_matrixLD_swap(self, that)


    def array_one_norm(self) -> "long double":
        """array_one_norm(vnl_matrixLD self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_array_one_norm(self)


    def array_two_norm(self) -> "long double":
        """array_two_norm(vnl_matrixLD self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_array_two_norm(self)


    def array_inf_norm(self) -> "long double":
        """array_inf_norm(vnl_matrixLD self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_array_inf_norm(self)


    def absolute_value_sum(self) -> "long double":
        """absolute_value_sum(vnl_matrixLD self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_absolute_value_sum(self)


    def absolute_value_max(self) -> "long double":
        """absolute_value_max(vnl_matrixLD self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_absolute_value_max(self)


    def operator_one_norm(self) -> "long double":
        """operator_one_norm(vnl_matrixLD self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_operator_one_norm(self)


    def operator_inf_norm(self) -> "long double":
        """operator_inf_norm(vnl_matrixLD self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_operator_inf_norm(self)


    def frobenius_norm(self) -> "long double":
        """frobenius_norm(vnl_matrixLD self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_frobenius_norm(self)


    def fro_norm(self) -> "long double":
        """fro_norm(vnl_matrixLD self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_fro_norm(self)


    def rms(self) -> "long double":
        """rms(vnl_matrixLD self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_rms(self)


    def min_value(self) -> "long double":
        """min_value(vnl_matrixLD self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_min_value(self)


    def max_value(self) -> "long double":
        """max_value(vnl_matrixLD self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrixLD self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixLD_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrixLD self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixLD_arg_max(self)


    def mean(self) -> "long double":
        """mean(vnl_matrixLD self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrixLD self) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrixLD self) -> bool
        is_identity(vnl_matrixLD self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixLD_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrixLD self) -> bool
        is_zero(vnl_matrixLD self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixLD_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrixLD', tol: 'double') -> "bool":
        """is_equal(vnl_matrixLD self, vnl_matrixLD rhs, double tol) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrixLD self) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrixLD self) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD_has_nans(self)


    def assert_size(self, r: 'unsigned int', c: 'unsigned int') -> "void":
        """assert_size(vnl_matrixLD self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixLD_assert_size(self, r, c)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrixLD self)"""
        return _vnl_matrixPython.vnl_matrixLD_assert_finite(self)


    def read(s: 'istream') -> "vnl_matrixLD":
        """read(istream s) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_read(s)

    read = staticmethod(read)

    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrixLD self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD_read_ascii(self, s)


    def data_block(self, *args) -> "long double *":
        """
        data_block(vnl_matrixLD self) -> long double const
        data_block(vnl_matrixLD self) -> long double *
        """
        return _vnl_matrixPython.vnl_matrixLD_data_block(self, *args)


    def data_array(self, *args) -> "long double **":
        """
        data_array(vnl_matrixLD self) -> long double const
        data_array(vnl_matrixLD self) -> long double **
        """
        return _vnl_matrixPython.vnl_matrixLD_data_array(self, *args)


    def begin(self, *args) -> "long double const *":
        """
        begin(vnl_matrixLD self) -> long double
        begin(vnl_matrixLD self) -> long double const *
        """
        return _vnl_matrixPython.vnl_matrixLD_begin(self, *args)


    def end(self, *args) -> "long double const *":
        """
        end(vnl_matrixLD self) -> long double
        end(vnl_matrixLD self) -> long double const *
        """
        return _vnl_matrixPython.vnl_matrixLD_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrixLD') -> "bool":
        """operator_eq(vnl_matrixLD self, vnl_matrixLD rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD_operator_eq(self, rhs)


    def __eq__(self, that: 'vnl_matrixLD') -> "bool":
        """__eq__(vnl_matrixLD self, vnl_matrixLD that) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD___eq__(self, that)


    def __ne__(self, that: 'vnl_matrixLD') -> "bool":
        """__ne__(vnl_matrixLD self, vnl_matrixLD that) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD___ne__(self, that)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrixLD self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixLD__print(self, os)


    def clear(self) -> "void":
        """clear(vnl_matrixLD self)"""
        return _vnl_matrixPython.vnl_matrixLD_clear(self)


    def set_size(self, r: 'unsigned int', c: 'unsigned int') -> "bool":
        """set_size(vnl_matrixLD self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD_set_size(self, r, c)

vnl_matrixLD.size = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_size, None, vnl_matrixLD)
vnl_matrixLD.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_rows, None, vnl_matrixLD)
vnl_matrixLD.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_cols, None, vnl_matrixLD)
vnl_matrixLD.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_columns, None, vnl_matrixLD)
vnl_matrixLD.put = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_put, None, vnl_matrixLD)
vnl_matrixLD.get = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_get, None, vnl_matrixLD)
vnl_matrixLD.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___call__, None, vnl_matrixLD)
vnl_matrixLD.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_fill, None, vnl_matrixLD)
vnl_matrixLD.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_fill_diagonal, None, vnl_matrixLD)
vnl_matrixLD.set_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_set_diagonal, None, vnl_matrixLD)
vnl_matrixLD.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_copy_in, None, vnl_matrixLD)
vnl_matrixLD.set = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_set, None, vnl_matrixLD)
vnl_matrixLD.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_copy_out, None, vnl_matrixLD)
vnl_matrixLD.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___idiv__, None, vnl_matrixLD)
vnl_matrixLD.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___iadd__, None, vnl_matrixLD)
vnl_matrixLD.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___isub__, None, vnl_matrixLD)
vnl_matrixLD.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___imul__, None, vnl_matrixLD)
vnl_matrixLD.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___neg__, None, vnl_matrixLD)
vnl_matrixLD.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___div__, None, vnl_matrixLD)
vnl_matrixLD.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___add__, None, vnl_matrixLD)
vnl_matrixLD.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___sub__, None, vnl_matrixLD)
vnl_matrixLD.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___mul__, None, vnl_matrixLD)
vnl_matrixLD.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_transpose, None, vnl_matrixLD)
vnl_matrixLD.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_conjugate_transpose, None, vnl_matrixLD)
vnl_matrixLD.update = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_update, None, vnl_matrixLD)
vnl_matrixLD.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_set_column, None, vnl_matrixLD)
vnl_matrixLD.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_set_columns, None, vnl_matrixLD)
vnl_matrixLD.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_set_row, None, vnl_matrixLD)
vnl_matrixLD.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_extract, None, vnl_matrixLD)
vnl_matrixLD.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_get_row, None, vnl_matrixLD)
vnl_matrixLD.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_get_column, None, vnl_matrixLD)
vnl_matrixLD.get_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_get_rows, None, vnl_matrixLD)
vnl_matrixLD.get_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_get_columns, None, vnl_matrixLD)
vnl_matrixLD.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_get_n_rows, None, vnl_matrixLD)
vnl_matrixLD.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_get_n_columns, None, vnl_matrixLD)
vnl_matrixLD.get_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_get_diagonal, None, vnl_matrixLD)
vnl_matrixLD.flatten_row_major = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_flatten_row_major, None, vnl_matrixLD)
vnl_matrixLD.flatten_column_major = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_flatten_column_major, None, vnl_matrixLD)
vnl_matrixLD.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_set_identity, None, vnl_matrixLD)
vnl_matrixLD.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_inplace_transpose, None, vnl_matrixLD)
vnl_matrixLD.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_flipud, None, vnl_matrixLD)
vnl_matrixLD.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_fliplr, None, vnl_matrixLD)
vnl_matrixLD.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_normalize_rows, None, vnl_matrixLD)
vnl_matrixLD.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_normalize_columns, None, vnl_matrixLD)
vnl_matrixLD.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_scale_row, None, vnl_matrixLD)
vnl_matrixLD.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_scale_column, None, vnl_matrixLD)
vnl_matrixLD.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_swap, None, vnl_matrixLD)
vnl_matrixLD.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_array_one_norm, None, vnl_matrixLD)
vnl_matrixLD.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_array_two_norm, None, vnl_matrixLD)
vnl_matrixLD.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_array_inf_norm, None, vnl_matrixLD)
vnl_matrixLD.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_absolute_value_sum, None, vnl_matrixLD)
vnl_matrixLD.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_absolute_value_max, None, vnl_matrixLD)
vnl_matrixLD.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_operator_one_norm, None, vnl_matrixLD)
vnl_matrixLD.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_operator_inf_norm, None, vnl_matrixLD)
vnl_matrixLD.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_frobenius_norm, None, vnl_matrixLD)
vnl_matrixLD.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_fro_norm, None, vnl_matrixLD)
vnl_matrixLD.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_rms, None, vnl_matrixLD)
vnl_matrixLD.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_min_value, None, vnl_matrixLD)
vnl_matrixLD.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_max_value, None, vnl_matrixLD)
vnl_matrixLD.arg_min = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_arg_min, None, vnl_matrixLD)
vnl_matrixLD.arg_max = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_arg_max, None, vnl_matrixLD)
vnl_matrixLD.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_mean, None, vnl_matrixLD)
vnl_matrixLD.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_empty, None, vnl_matrixLD)
vnl_matrixLD.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_is_identity, None, vnl_matrixLD)
vnl_matrixLD.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_is_zero, None, vnl_matrixLD)
vnl_matrixLD.is_equal = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_is_equal, None, vnl_matrixLD)
vnl_matrixLD.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_is_finite, None, vnl_matrixLD)
vnl_matrixLD.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_has_nans, None, vnl_matrixLD)
vnl_matrixLD.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_assert_size, None, vnl_matrixLD)
vnl_matrixLD.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_assert_finite, None, vnl_matrixLD)
vnl_matrixLD.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_read_ascii, None, vnl_matrixLD)
vnl_matrixLD.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_data_block, None, vnl_matrixLD)
vnl_matrixLD.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_data_array, None, vnl_matrixLD)
vnl_matrixLD.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_begin, None, vnl_matrixLD)
vnl_matrixLD.end = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_end, None, vnl_matrixLD)
vnl_matrixLD.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_operator_eq, None, vnl_matrixLD)
vnl_matrixLD.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___eq__, None, vnl_matrixLD)
vnl_matrixLD.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___ne__, None, vnl_matrixLD)
vnl_matrixLD._print = new_instancemethod(_vnl_matrixPython.vnl_matrixLD__print, None, vnl_matrixLD)
vnl_matrixLD.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_clear, None, vnl_matrixLD)
vnl_matrixLD.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_set_size, None, vnl_matrixLD)
vnl_matrixLD_swigregister = _vnl_matrixPython.vnl_matrixLD_swigregister
vnl_matrixLD_swigregister(vnl_matrixLD)

def vnl_matrixLD_read(s: 'istream') -> "vnl_matrixLD":
    """vnl_matrixLD_read(istream s) -> vnl_matrixLD"""
    return _vnl_matrixPython.vnl_matrixLD_read(s)

class vnl_matrixSC(object):
    """Proxy of C++ vnl_matrixSC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_matrixSC self) -> vnl_matrixSC
        __init__(vnl_matrixSC self, unsigned int r, unsigned int c) -> vnl_matrixSC
        __init__(vnl_matrixSC self, unsigned int r, unsigned int c, signed char const & v0) -> vnl_matrixSC
        __init__(vnl_matrixSC self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixSC
        __init__(vnl_matrixSC self, unsigned int r, unsigned int c, unsigned int n, signed char const * values) -> vnl_matrixSC
        __init__(vnl_matrixSC self, signed char const * data_block, unsigned int r, unsigned int c) -> vnl_matrixSC
        __init__(vnl_matrixSC self, vnl_matrixSC arg0) -> vnl_matrixSC
        __init__(vnl_matrixSC self, vnl_matrixSC arg0, vnl_matrixSC arg1, vnl_tag_add arg2) -> vnl_matrixSC
        __init__(vnl_matrixSC self, vnl_matrixSC arg0, vnl_matrixSC arg1, vnl_tag_sub arg2) -> vnl_matrixSC
        __init__(vnl_matrixSC self, vnl_matrixSC arg0, signed char arg1, vnl_tag_mul arg2) -> vnl_matrixSC
        __init__(vnl_matrixSC self, vnl_matrixSC arg0, signed char arg1, vnl_tag_div arg2) -> vnl_matrixSC
        __init__(vnl_matrixSC self, vnl_matrixSC arg0, signed char arg1, vnl_tag_add arg2) -> vnl_matrixSC
        __init__(vnl_matrixSC self, vnl_matrixSC arg0, signed char arg1, vnl_tag_sub arg2) -> vnl_matrixSC
        __init__(vnl_matrixSC self, vnl_matrixSC arg0, vnl_matrixSC arg1, vnl_tag_mul arg2) -> vnl_matrixSC
        __init__(vnl_matrixSC self, vnl_matrixSC that, vnl_tag_grab arg1) -> vnl_matrixSC
        """
        _vnl_matrixPython.vnl_matrixSC_swiginit(self, _vnl_matrixPython.new_vnl_matrixSC(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixSC

    def size(self) -> "unsigned int":
        """size(vnl_matrixSC self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSC_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrixSC self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSC_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrixSC self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSC_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrixSC self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSC_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', arg2: 'signed char const &') -> "void":
        """put(vnl_matrixSC self, unsigned int r, unsigned int c, signed char const & arg2)"""
        return _vnl_matrixPython.vnl_matrixSC_put(self, r, c, arg2)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "signed char":
        """get(vnl_matrixSC self, unsigned int r, unsigned int c) -> signed char"""
        return _vnl_matrixPython.vnl_matrixSC_get(self, r, c)


    def __call__(self, *args) -> "signed char const &":
        """
        __call__(vnl_matrixSC self, unsigned int r, unsigned int c) -> signed char
        __call__(vnl_matrixSC self, unsigned int r, unsigned int c) -> signed char const &
        """
        return _vnl_matrixPython.vnl_matrixSC___call__(self, *args)


    def fill(self, arg0: 'signed char const &') -> "vnl_matrixSC &":
        """fill(vnl_matrixSC self, signed char const & arg0) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_fill(self, arg0)


    def fill_diagonal(self, arg0: 'signed char const &') -> "vnl_matrixSC &":
        """fill_diagonal(vnl_matrixSC self, signed char const & arg0) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorSC') -> "vnl_matrixSC &":
        """set_diagonal(vnl_matrixSC self, vnl_vectorSC arg0) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'signed char const *') -> "vnl_matrixSC &":
        """copy_in(vnl_matrixSC self, signed char const * arg0) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_copy_in(self, arg0)


    def set(self, d: 'signed char const *') -> "vnl_matrixSC &":
        """set(vnl_matrixSC self, signed char const * d) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_set(self, d)


    def copy_out(self, arg0: 'signed char *') -> "void":
        """copy_out(vnl_matrixSC self, signed char * arg0)"""
        return _vnl_matrixPython.vnl_matrixSC_copy_out(self, arg0)


    def __idiv__(self, value: 'signed char') -> "vnl_matrixSC &":
        """__idiv__(vnl_matrixSC self, signed char value) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC___idiv__(self, value)


    def __iadd__(self, *args) -> "vnl_matrixSC &":
        """
        __iadd__(vnl_matrixSC self, signed char value) -> vnl_matrixSC
        __iadd__(vnl_matrixSC self, vnl_matrixSC arg0) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrixSC &":
        """
        __isub__(vnl_matrixSC self, signed char value) -> vnl_matrixSC
        __isub__(vnl_matrixSC self, vnl_matrixSC arg0) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC___isub__(self, *args)


    def __imul__(self, *args) -> "vnl_matrixSC &":
        """
        __imul__(vnl_matrixSC self, signed char value) -> vnl_matrixSC
        __imul__(vnl_matrixSC self, vnl_matrixSC rhs) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC___imul__(self, *args)


    def __neg__(self) -> "vnl_matrixSC":
        """__neg__(vnl_matrixSC self) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC___neg__(self)


    def __div__(self, v: 'signed char const &') -> "vnl_matrixSC":
        """__div__(vnl_matrixSC self, signed char const & v) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC___div__(self, v)


    def __add__(self, *args) -> "vnl_matrixSC":
        """
        __add__(vnl_matrixSC self, signed char const & v) -> vnl_matrixSC
        __add__(vnl_matrixSC self, vnl_matrixSC rhs) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC___add__(self, *args)


    def __sub__(self, *args) -> "vnl_matrixSC":
        """
        __sub__(vnl_matrixSC self, signed char const & v) -> vnl_matrixSC
        __sub__(vnl_matrixSC self, vnl_matrixSC rhs) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_matrixSC":
        """
        __mul__(vnl_matrixSC self, signed char const & v) -> vnl_matrixSC
        __mul__(vnl_matrixSC self, vnl_matrixSC rhs) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC___mul__(self, *args)


    def transpose(self) -> "vnl_matrixSC":
        """transpose(vnl_matrixSC self) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrixSC":
        """conjugate_transpose(vnl_matrixSC self) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixSC', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrixSC &":
        """
        update(vnl_matrixSC self, vnl_matrixSC arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrixSC
        update(vnl_matrixSC self, vnl_matrixSC arg0, unsigned int top=0) -> vnl_matrixSC
        update(vnl_matrixSC self, vnl_matrixSC arg0) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrixSC &":
        """
        set_column(vnl_matrixSC self, unsigned int i, signed char const * v) -> vnl_matrixSC
        set_column(vnl_matrixSC self, unsigned int i, signed char value) -> vnl_matrixSC
        set_column(vnl_matrixSC self, unsigned int j, vnl_vectorSC v) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixSC') -> "vnl_matrixSC &":
        """set_columns(vnl_matrixSC self, unsigned int starting_column, vnl_matrixSC M) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrixSC &":
        """
        set_row(vnl_matrixSC self, unsigned int i, signed char const * v) -> vnl_matrixSC
        set_row(vnl_matrixSC self, unsigned int i, signed char value) -> vnl_matrixSC
        set_row(vnl_matrixSC self, unsigned int i, vnl_vectorSC arg1) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrixSC self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixSC
        extract(vnl_matrixSC self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixSC
        extract(vnl_matrixSC self, unsigned int r, unsigned int c) -> vnl_matrixSC
        extract(vnl_matrixSC self, vnl_matrixSC sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrixSC self, vnl_matrixSC sub_matrix, unsigned int top=0)
        extract(vnl_matrixSC self, vnl_matrixSC sub_matrix)
        """
        return _vnl_matrixPython.vnl_matrixSC_extract(self, *args)


    def get_row(self, r: 'unsigned int') -> "vnl_vectorSC":
        """get_row(vnl_matrixSC self, unsigned int r) -> vnl_vectorSC"""
        return _vnl_matrixPython.vnl_matrixSC_get_row(self, r)


    def get_column(self, c: 'unsigned int') -> "vnl_vectorSC":
        """get_column(vnl_matrixSC self, unsigned int c) -> vnl_vectorSC"""
        return _vnl_matrixPython.vnl_matrixSC_get_column(self, c)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixSC":
        """get_rows(vnl_matrixSC self, vnl_vectorUI i) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixSC":
        """get_columns(vnl_matrixSC self, vnl_vectorUI i) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixSC":
        """get_n_rows(vnl_matrixSC self, unsigned int rowstart, unsigned int n) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixSC":
        """get_n_columns(vnl_matrixSC self, unsigned int colstart, unsigned int n) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorSC":
        """get_diagonal(vnl_matrixSC self) -> vnl_vectorSC"""
        return _vnl_matrixPython.vnl_matrixSC_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vectorSC":
        """flatten_row_major(vnl_matrixSC self) -> vnl_vectorSC"""
        return _vnl_matrixPython.vnl_matrixSC_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vectorSC":
        """flatten_column_major(vnl_matrixSC self) -> vnl_vectorSC"""
        return _vnl_matrixPython.vnl_matrixSC_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrixSC &":
        """set_identity(vnl_matrixSC self) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_set_identity(self)


    def inplace_transpose(self) -> "vnl_matrixSC &":
        """inplace_transpose(vnl_matrixSC self) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_inplace_transpose(self)


    def flipud(self) -> "vnl_matrixSC &":
        """flipud(vnl_matrixSC self) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_flipud(self)


    def fliplr(self) -> "vnl_matrixSC &":
        """fliplr(vnl_matrixSC self) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_fliplr(self)


    def normalize_rows(self) -> "vnl_matrixSC &":
        """normalize_rows(vnl_matrixSC self) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrixSC &":
        """normalize_columns(vnl_matrixSC self) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'signed char') -> "vnl_matrixSC &":
        """scale_row(vnl_matrixSC self, unsigned int row, signed char value) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'signed char') -> "vnl_matrixSC &":
        """scale_column(vnl_matrixSC self, unsigned int col, signed char value) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrixSC') -> "void":
        """swap(vnl_matrixSC self, vnl_matrixSC that)"""
        return _vnl_matrixPython.vnl_matrixSC_swap(self, that)


    def array_one_norm(self) -> "unsigned char":
        """array_one_norm(vnl_matrixSC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_array_one_norm(self)


    def array_two_norm(self) -> "unsigned char":
        """array_two_norm(vnl_matrixSC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_array_two_norm(self)


    def array_inf_norm(self) -> "unsigned char":
        """array_inf_norm(vnl_matrixSC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_array_inf_norm(self)


    def absolute_value_sum(self) -> "unsigned char":
        """absolute_value_sum(vnl_matrixSC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_absolute_value_sum(self)


    def absolute_value_max(self) -> "unsigned char":
        """absolute_value_max(vnl_matrixSC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_absolute_value_max(self)


    def operator_one_norm(self) -> "unsigned char":
        """operator_one_norm(vnl_matrixSC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_operator_one_norm(self)


    def operator_inf_norm(self) -> "unsigned char":
        """operator_inf_norm(vnl_matrixSC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_operator_inf_norm(self)


    def frobenius_norm(self) -> "unsigned char":
        """frobenius_norm(vnl_matrixSC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_frobenius_norm(self)


    def fro_norm(self) -> "unsigned char":
        """fro_norm(vnl_matrixSC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_fro_norm(self)


    def rms(self) -> "unsigned char":
        """rms(vnl_matrixSC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_rms(self)


    def min_value(self) -> "signed char":
        """min_value(vnl_matrixSC self) -> signed char"""
        return _vnl_matrixPython.vnl_matrixSC_min_value(self)


    def max_value(self) -> "signed char":
        """max_value(vnl_matrixSC self) -> signed char"""
        return _vnl_matrixPython.vnl_matrixSC_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrixSC self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSC_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrixSC self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSC_arg_max(self)


    def mean(self) -> "signed char":
        """mean(vnl_matrixSC self) -> signed char"""
        return _vnl_matrixPython.vnl_matrixSC_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrixSC self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrixSC self) -> bool
        is_identity(vnl_matrixSC self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSC_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrixSC self) -> bool
        is_zero(vnl_matrixSC self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSC_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrixSC', tol: 'double') -> "bool":
        """is_equal(vnl_matrixSC self, vnl_matrixSC rhs, double tol) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrixSC self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrixSC self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC_has_nans(self)


    def assert_size(self, r: 'unsigned int', c: 'unsigned int') -> "void":
        """assert_size(vnl_matrixSC self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixSC_assert_size(self, r, c)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrixSC self)"""
        return _vnl_matrixPython.vnl_matrixSC_assert_finite(self)


    def read(s: 'istream') -> "vnl_matrixSC":
        """read(istream s) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_read(s)

    read = staticmethod(read)

    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrixSC self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC_read_ascii(self, s)


    def data_block(self, *args) -> "signed char *":
        """
        data_block(vnl_matrixSC self) -> signed char const
        data_block(vnl_matrixSC self) -> signed char *
        """
        return _vnl_matrixPython.vnl_matrixSC_data_block(self, *args)


    def data_array(self, *args) -> "signed char **":
        """
        data_array(vnl_matrixSC self) -> signed char const
        data_array(vnl_matrixSC self) -> signed char **
        """
        return _vnl_matrixPython.vnl_matrixSC_data_array(self, *args)


    def begin(self, *args) -> "signed char const *":
        """
        begin(vnl_matrixSC self) -> signed char
        begin(vnl_matrixSC self) -> signed char const *
        """
        return _vnl_matrixPython.vnl_matrixSC_begin(self, *args)


    def end(self, *args) -> "signed char const *":
        """
        end(vnl_matrixSC self) -> signed char
        end(vnl_matrixSC self) -> signed char const *
        """
        return _vnl_matrixPython.vnl_matrixSC_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrixSC') -> "bool":
        """operator_eq(vnl_matrixSC self, vnl_matrixSC rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC_operator_eq(self, rhs)


    def __eq__(self, that: 'vnl_matrixSC') -> "bool":
        """__eq__(vnl_matrixSC self, vnl_matrixSC that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC___eq__(self, that)


    def __ne__(self, that: 'vnl_matrixSC') -> "bool":
        """__ne__(vnl_matrixSC self, vnl_matrixSC that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC___ne__(self, that)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrixSC self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixSC__print(self, os)


    def clear(self) -> "void":
        """clear(vnl_matrixSC self)"""
        return _vnl_matrixPython.vnl_matrixSC_clear(self)


    def set_size(self, r: 'unsigned int', c: 'unsigned int') -> "bool":
        """set_size(vnl_matrixSC self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC_set_size(self, r, c)

vnl_matrixSC.size = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_size, None, vnl_matrixSC)
vnl_matrixSC.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_rows, None, vnl_matrixSC)
vnl_matrixSC.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_cols, None, vnl_matrixSC)
vnl_matrixSC.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_columns, None, vnl_matrixSC)
vnl_matrixSC.put = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_put, None, vnl_matrixSC)
vnl_matrixSC.get = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_get, None, vnl_matrixSC)
vnl_matrixSC.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___call__, None, vnl_matrixSC)
vnl_matrixSC.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_fill, None, vnl_matrixSC)
vnl_matrixSC.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_fill_diagonal, None, vnl_matrixSC)
vnl_matrixSC.set_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_set_diagonal, None, vnl_matrixSC)
vnl_matrixSC.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_copy_in, None, vnl_matrixSC)
vnl_matrixSC.set = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_set, None, vnl_matrixSC)
vnl_matrixSC.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_copy_out, None, vnl_matrixSC)
vnl_matrixSC.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___idiv__, None, vnl_matrixSC)
vnl_matrixSC.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___iadd__, None, vnl_matrixSC)
vnl_matrixSC.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___isub__, None, vnl_matrixSC)
vnl_matrixSC.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___imul__, None, vnl_matrixSC)
vnl_matrixSC.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___neg__, None, vnl_matrixSC)
vnl_matrixSC.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___div__, None, vnl_matrixSC)
vnl_matrixSC.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___add__, None, vnl_matrixSC)
vnl_matrixSC.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___sub__, None, vnl_matrixSC)
vnl_matrixSC.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___mul__, None, vnl_matrixSC)
vnl_matrixSC.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_transpose, None, vnl_matrixSC)
vnl_matrixSC.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_conjugate_transpose, None, vnl_matrixSC)
vnl_matrixSC.update = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_update, None, vnl_matrixSC)
vnl_matrixSC.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_set_column, None, vnl_matrixSC)
vnl_matrixSC.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_set_columns, None, vnl_matrixSC)
vnl_matrixSC.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_set_row, None, vnl_matrixSC)
vnl_matrixSC.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_extract, None, vnl_matrixSC)
vnl_matrixSC.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_get_row, None, vnl_matrixSC)
vnl_matrixSC.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_get_column, None, vnl_matrixSC)
vnl_matrixSC.get_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_get_rows, None, vnl_matrixSC)
vnl_matrixSC.get_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_get_columns, None, vnl_matrixSC)
vnl_matrixSC.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_get_n_rows, None, vnl_matrixSC)
vnl_matrixSC.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_get_n_columns, None, vnl_matrixSC)
vnl_matrixSC.get_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_get_diagonal, None, vnl_matrixSC)
vnl_matrixSC.flatten_row_major = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_flatten_row_major, None, vnl_matrixSC)
vnl_matrixSC.flatten_column_major = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_flatten_column_major, None, vnl_matrixSC)
vnl_matrixSC.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_set_identity, None, vnl_matrixSC)
vnl_matrixSC.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_inplace_transpose, None, vnl_matrixSC)
vnl_matrixSC.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_flipud, None, vnl_matrixSC)
vnl_matrixSC.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_fliplr, None, vnl_matrixSC)
vnl_matrixSC.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_normalize_rows, None, vnl_matrixSC)
vnl_matrixSC.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_normalize_columns, None, vnl_matrixSC)
vnl_matrixSC.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_scale_row, None, vnl_matrixSC)
vnl_matrixSC.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_scale_column, None, vnl_matrixSC)
vnl_matrixSC.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_swap, None, vnl_matrixSC)
vnl_matrixSC.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_array_one_norm, None, vnl_matrixSC)
vnl_matrixSC.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_array_two_norm, None, vnl_matrixSC)
vnl_matrixSC.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_array_inf_norm, None, vnl_matrixSC)
vnl_matrixSC.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_absolute_value_sum, None, vnl_matrixSC)
vnl_matrixSC.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_absolute_value_max, None, vnl_matrixSC)
vnl_matrixSC.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_operator_one_norm, None, vnl_matrixSC)
vnl_matrixSC.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_operator_inf_norm, None, vnl_matrixSC)
vnl_matrixSC.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_frobenius_norm, None, vnl_matrixSC)
vnl_matrixSC.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_fro_norm, None, vnl_matrixSC)
vnl_matrixSC.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_rms, None, vnl_matrixSC)
vnl_matrixSC.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_min_value, None, vnl_matrixSC)
vnl_matrixSC.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_max_value, None, vnl_matrixSC)
vnl_matrixSC.arg_min = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_arg_min, None, vnl_matrixSC)
vnl_matrixSC.arg_max = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_arg_max, None, vnl_matrixSC)
vnl_matrixSC.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_mean, None, vnl_matrixSC)
vnl_matrixSC.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_empty, None, vnl_matrixSC)
vnl_matrixSC.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_is_identity, None, vnl_matrixSC)
vnl_matrixSC.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_is_zero, None, vnl_matrixSC)
vnl_matrixSC.is_equal = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_is_equal, None, vnl_matrixSC)
vnl_matrixSC.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_is_finite, None, vnl_matrixSC)
vnl_matrixSC.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_has_nans, None, vnl_matrixSC)
vnl_matrixSC.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_assert_size, None, vnl_matrixSC)
vnl_matrixSC.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_assert_finite, None, vnl_matrixSC)
vnl_matrixSC.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_read_ascii, None, vnl_matrixSC)
vnl_matrixSC.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_data_block, None, vnl_matrixSC)
vnl_matrixSC.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_data_array, None, vnl_matrixSC)
vnl_matrixSC.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_begin, None, vnl_matrixSC)
vnl_matrixSC.end = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_end, None, vnl_matrixSC)
vnl_matrixSC.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_operator_eq, None, vnl_matrixSC)
vnl_matrixSC.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___eq__, None, vnl_matrixSC)
vnl_matrixSC.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___ne__, None, vnl_matrixSC)
vnl_matrixSC._print = new_instancemethod(_vnl_matrixPython.vnl_matrixSC__print, None, vnl_matrixSC)
vnl_matrixSC.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_clear, None, vnl_matrixSC)
vnl_matrixSC.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_set_size, None, vnl_matrixSC)
vnl_matrixSC_swigregister = _vnl_matrixPython.vnl_matrixSC_swigregister
vnl_matrixSC_swigregister(vnl_matrixSC)

def vnl_matrixSC_read(s: 'istream') -> "vnl_matrixSC":
    """vnl_matrixSC_read(istream s) -> vnl_matrixSC"""
    return _vnl_matrixPython.vnl_matrixSC_read(s)

class vnl_matrixSI(object):
    """Proxy of C++ vnl_matrixSI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_matrixSI self) -> vnl_matrixSI
        __init__(vnl_matrixSI self, unsigned int r, unsigned int c) -> vnl_matrixSI
        __init__(vnl_matrixSI self, unsigned int r, unsigned int c, int const & v0) -> vnl_matrixSI
        __init__(vnl_matrixSI self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixSI
        __init__(vnl_matrixSI self, unsigned int r, unsigned int c, unsigned int n, int const * values) -> vnl_matrixSI
        __init__(vnl_matrixSI self, int const * data_block, unsigned int r, unsigned int c) -> vnl_matrixSI
        __init__(vnl_matrixSI self, vnl_matrixSI arg0) -> vnl_matrixSI
        __init__(vnl_matrixSI self, vnl_matrixSI arg0, vnl_matrixSI arg1, vnl_tag_add arg2) -> vnl_matrixSI
        __init__(vnl_matrixSI self, vnl_matrixSI arg0, vnl_matrixSI arg1, vnl_tag_sub arg2) -> vnl_matrixSI
        __init__(vnl_matrixSI self, vnl_matrixSI arg0, int arg1, vnl_tag_mul arg2) -> vnl_matrixSI
        __init__(vnl_matrixSI self, vnl_matrixSI arg0, int arg1, vnl_tag_div arg2) -> vnl_matrixSI
        __init__(vnl_matrixSI self, vnl_matrixSI arg0, int arg1, vnl_tag_add arg2) -> vnl_matrixSI
        __init__(vnl_matrixSI self, vnl_matrixSI arg0, int arg1, vnl_tag_sub arg2) -> vnl_matrixSI
        __init__(vnl_matrixSI self, vnl_matrixSI arg0, vnl_matrixSI arg1, vnl_tag_mul arg2) -> vnl_matrixSI
        __init__(vnl_matrixSI self, vnl_matrixSI that, vnl_tag_grab arg1) -> vnl_matrixSI
        """
        _vnl_matrixPython.vnl_matrixSI_swiginit(self, _vnl_matrixPython.new_vnl_matrixSI(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixSI

    def size(self) -> "unsigned int":
        """size(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', arg2: 'int const &') -> "void":
        """put(vnl_matrixSI self, unsigned int r, unsigned int c, int const & arg2)"""
        return _vnl_matrixPython.vnl_matrixSI_put(self, r, c, arg2)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "int":
        """get(vnl_matrixSI self, unsigned int r, unsigned int c) -> int"""
        return _vnl_matrixPython.vnl_matrixSI_get(self, r, c)


    def __call__(self, *args) -> "int const &":
        """
        __call__(vnl_matrixSI self, unsigned int r, unsigned int c) -> int
        __call__(vnl_matrixSI self, unsigned int r, unsigned int c) -> int const &
        """
        return _vnl_matrixPython.vnl_matrixSI___call__(self, *args)


    def fill(self, arg0: 'int const &') -> "vnl_matrixSI &":
        """fill(vnl_matrixSI self, int const & arg0) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_fill(self, arg0)


    def fill_diagonal(self, arg0: 'int const &') -> "vnl_matrixSI &":
        """fill_diagonal(vnl_matrixSI self, int const & arg0) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorSI') -> "vnl_matrixSI &":
        """set_diagonal(vnl_matrixSI self, vnl_vectorSI arg0) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'int const *') -> "vnl_matrixSI &":
        """copy_in(vnl_matrixSI self, int const * arg0) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_copy_in(self, arg0)


    def set(self, d: 'int const *') -> "vnl_matrixSI &":
        """set(vnl_matrixSI self, int const * d) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_set(self, d)


    def copy_out(self, arg0: 'int *') -> "void":
        """copy_out(vnl_matrixSI self, int * arg0)"""
        return _vnl_matrixPython.vnl_matrixSI_copy_out(self, arg0)


    def __idiv__(self, value: 'int') -> "vnl_matrixSI &":
        """__idiv__(vnl_matrixSI self, int value) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI___idiv__(self, value)


    def __iadd__(self, *args) -> "vnl_matrixSI &":
        """
        __iadd__(vnl_matrixSI self, int value) -> vnl_matrixSI
        __iadd__(vnl_matrixSI self, vnl_matrixSI arg0) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrixSI &":
        """
        __isub__(vnl_matrixSI self, int value) -> vnl_matrixSI
        __isub__(vnl_matrixSI self, vnl_matrixSI arg0) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI___isub__(self, *args)


    def __imul__(self, *args) -> "vnl_matrixSI &":
        """
        __imul__(vnl_matrixSI self, int value) -> vnl_matrixSI
        __imul__(vnl_matrixSI self, vnl_matrixSI rhs) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI___imul__(self, *args)


    def __neg__(self) -> "vnl_matrixSI":
        """__neg__(vnl_matrixSI self) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI___neg__(self)


    def __div__(self, v: 'int const &') -> "vnl_matrixSI":
        """__div__(vnl_matrixSI self, int const & v) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI___div__(self, v)


    def __add__(self, *args) -> "vnl_matrixSI":
        """
        __add__(vnl_matrixSI self, int const & v) -> vnl_matrixSI
        __add__(vnl_matrixSI self, vnl_matrixSI rhs) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI___add__(self, *args)


    def __sub__(self, *args) -> "vnl_matrixSI":
        """
        __sub__(vnl_matrixSI self, int const & v) -> vnl_matrixSI
        __sub__(vnl_matrixSI self, vnl_matrixSI rhs) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_matrixSI":
        """
        __mul__(vnl_matrixSI self, int const & v) -> vnl_matrixSI
        __mul__(vnl_matrixSI self, vnl_matrixSI rhs) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI___mul__(self, *args)


    def transpose(self) -> "vnl_matrixSI":
        """transpose(vnl_matrixSI self) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrixSI":
        """conjugate_transpose(vnl_matrixSI self) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixSI', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrixSI &":
        """
        update(vnl_matrixSI self, vnl_matrixSI arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrixSI
        update(vnl_matrixSI self, vnl_matrixSI arg0, unsigned int top=0) -> vnl_matrixSI
        update(vnl_matrixSI self, vnl_matrixSI arg0) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrixSI &":
        """
        set_column(vnl_matrixSI self, unsigned int i, int const * v) -> vnl_matrixSI
        set_column(vnl_matrixSI self, unsigned int i, int value) -> vnl_matrixSI
        set_column(vnl_matrixSI self, unsigned int j, vnl_vectorSI v) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixSI') -> "vnl_matrixSI &":
        """set_columns(vnl_matrixSI self, unsigned int starting_column, vnl_matrixSI M) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrixSI &":
        """
        set_row(vnl_matrixSI self, unsigned int i, int const * v) -> vnl_matrixSI
        set_row(vnl_matrixSI self, unsigned int i, int value) -> vnl_matrixSI
        set_row(vnl_matrixSI self, unsigned int i, vnl_vectorSI arg1) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrixSI self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixSI
        extract(vnl_matrixSI self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixSI
        extract(vnl_matrixSI self, unsigned int r, unsigned int c) -> vnl_matrixSI
        extract(vnl_matrixSI self, vnl_matrixSI sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrixSI self, vnl_matrixSI sub_matrix, unsigned int top=0)
        extract(vnl_matrixSI self, vnl_matrixSI sub_matrix)
        """
        return _vnl_matrixPython.vnl_matrixSI_extract(self, *args)


    def get_row(self, r: 'unsigned int') -> "vnl_vectorSI":
        """get_row(vnl_matrixSI self, unsigned int r) -> vnl_vectorSI"""
        return _vnl_matrixPython.vnl_matrixSI_get_row(self, r)


    def get_column(self, c: 'unsigned int') -> "vnl_vectorSI":
        """get_column(vnl_matrixSI self, unsigned int c) -> vnl_vectorSI"""
        return _vnl_matrixPython.vnl_matrixSI_get_column(self, c)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixSI":
        """get_rows(vnl_matrixSI self, vnl_vectorUI i) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixSI":
        """get_columns(vnl_matrixSI self, vnl_vectorUI i) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixSI":
        """get_n_rows(vnl_matrixSI self, unsigned int rowstart, unsigned int n) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixSI":
        """get_n_columns(vnl_matrixSI self, unsigned int colstart, unsigned int n) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorSI":
        """get_diagonal(vnl_matrixSI self) -> vnl_vectorSI"""
        return _vnl_matrixPython.vnl_matrixSI_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vectorSI":
        """flatten_row_major(vnl_matrixSI self) -> vnl_vectorSI"""
        return _vnl_matrixPython.vnl_matrixSI_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vectorSI":
        """flatten_column_major(vnl_matrixSI self) -> vnl_vectorSI"""
        return _vnl_matrixPython.vnl_matrixSI_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrixSI &":
        """set_identity(vnl_matrixSI self) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_set_identity(self)


    def inplace_transpose(self) -> "vnl_matrixSI &":
        """inplace_transpose(vnl_matrixSI self) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_inplace_transpose(self)


    def flipud(self) -> "vnl_matrixSI &":
        """flipud(vnl_matrixSI self) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_flipud(self)


    def fliplr(self) -> "vnl_matrixSI &":
        """fliplr(vnl_matrixSI self) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_fliplr(self)


    def normalize_rows(self) -> "vnl_matrixSI &":
        """normalize_rows(vnl_matrixSI self) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrixSI &":
        """normalize_columns(vnl_matrixSI self) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'int') -> "vnl_matrixSI &":
        """scale_row(vnl_matrixSI self, unsigned int row, int value) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'int') -> "vnl_matrixSI &":
        """scale_column(vnl_matrixSI self, unsigned int col, int value) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrixSI') -> "void":
        """swap(vnl_matrixSI self, vnl_matrixSI that)"""
        return _vnl_matrixPython.vnl_matrixSI_swap(self, that)


    def array_one_norm(self) -> "unsigned int":
        """array_one_norm(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_array_one_norm(self)


    def array_two_norm(self) -> "unsigned int":
        """array_two_norm(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_array_two_norm(self)


    def array_inf_norm(self) -> "unsigned int":
        """array_inf_norm(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_array_inf_norm(self)


    def absolute_value_sum(self) -> "unsigned int":
        """absolute_value_sum(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_absolute_value_sum(self)


    def absolute_value_max(self) -> "unsigned int":
        """absolute_value_max(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_absolute_value_max(self)


    def operator_one_norm(self) -> "unsigned int":
        """operator_one_norm(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_operator_one_norm(self)


    def operator_inf_norm(self) -> "unsigned int":
        """operator_inf_norm(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_operator_inf_norm(self)


    def frobenius_norm(self) -> "unsigned int":
        """frobenius_norm(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_frobenius_norm(self)


    def fro_norm(self) -> "unsigned int":
        """fro_norm(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_fro_norm(self)


    def rms(self) -> "unsigned int":
        """rms(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_rms(self)


    def min_value(self) -> "int":
        """min_value(vnl_matrixSI self) -> int"""
        return _vnl_matrixPython.vnl_matrixSI_min_value(self)


    def max_value(self) -> "int":
        """max_value(vnl_matrixSI self) -> int"""
        return _vnl_matrixPython.vnl_matrixSI_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrixSI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_arg_max(self)


    def mean(self) -> "int":
        """mean(vnl_matrixSI self) -> int"""
        return _vnl_matrixPython.vnl_matrixSI_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrixSI self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrixSI self) -> bool
        is_identity(vnl_matrixSI self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSI_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrixSI self) -> bool
        is_zero(vnl_matrixSI self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSI_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrixSI', tol: 'double') -> "bool":
        """is_equal(vnl_matrixSI self, vnl_matrixSI rhs, double tol) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrixSI self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrixSI self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI_has_nans(self)


    def assert_size(self, r: 'unsigned int', c: 'unsigned int') -> "void":
        """assert_size(vnl_matrixSI self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixSI_assert_size(self, r, c)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrixSI self)"""
        return _vnl_matrixPython.vnl_matrixSI_assert_finite(self)


    def read(s: 'istream') -> "vnl_matrixSI":
        """read(istream s) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_read(s)

    read = staticmethod(read)

    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrixSI self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI_read_ascii(self, s)


    def data_block(self, *args) -> "int *":
        """
        data_block(vnl_matrixSI self) -> int const
        data_block(vnl_matrixSI self) -> int *
        """
        return _vnl_matrixPython.vnl_matrixSI_data_block(self, *args)


    def data_array(self, *args) -> "int **":
        """
        data_array(vnl_matrixSI self) -> int const
        data_array(vnl_matrixSI self) -> int **
        """
        return _vnl_matrixPython.vnl_matrixSI_data_array(self, *args)


    def begin(self, *args) -> "int const *":
        """
        begin(vnl_matrixSI self) -> int
        begin(vnl_matrixSI self) -> int const *
        """
        return _vnl_matrixPython.vnl_matrixSI_begin(self, *args)


    def end(self, *args) -> "int const *":
        """
        end(vnl_matrixSI self) -> int
        end(vnl_matrixSI self) -> int const *
        """
        return _vnl_matrixPython.vnl_matrixSI_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrixSI') -> "bool":
        """operator_eq(vnl_matrixSI self, vnl_matrixSI rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI_operator_eq(self, rhs)


    def __eq__(self, that: 'vnl_matrixSI') -> "bool":
        """__eq__(vnl_matrixSI self, vnl_matrixSI that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI___eq__(self, that)


    def __ne__(self, that: 'vnl_matrixSI') -> "bool":
        """__ne__(vnl_matrixSI self, vnl_matrixSI that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI___ne__(self, that)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrixSI self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixSI__print(self, os)


    def clear(self) -> "void":
        """clear(vnl_matrixSI self)"""
        return _vnl_matrixPython.vnl_matrixSI_clear(self)


    def set_size(self, r: 'unsigned int', c: 'unsigned int') -> "bool":
        """set_size(vnl_matrixSI self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI_set_size(self, r, c)

vnl_matrixSI.size = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_size, None, vnl_matrixSI)
vnl_matrixSI.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_rows, None, vnl_matrixSI)
vnl_matrixSI.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_cols, None, vnl_matrixSI)
vnl_matrixSI.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_columns, None, vnl_matrixSI)
vnl_matrixSI.put = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_put, None, vnl_matrixSI)
vnl_matrixSI.get = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_get, None, vnl_matrixSI)
vnl_matrixSI.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___call__, None, vnl_matrixSI)
vnl_matrixSI.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_fill, None, vnl_matrixSI)
vnl_matrixSI.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_fill_diagonal, None, vnl_matrixSI)
vnl_matrixSI.set_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_set_diagonal, None, vnl_matrixSI)
vnl_matrixSI.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_copy_in, None, vnl_matrixSI)
vnl_matrixSI.set = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_set, None, vnl_matrixSI)
vnl_matrixSI.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_copy_out, None, vnl_matrixSI)
vnl_matrixSI.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___idiv__, None, vnl_matrixSI)
vnl_matrixSI.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___iadd__, None, vnl_matrixSI)
vnl_matrixSI.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___isub__, None, vnl_matrixSI)
vnl_matrixSI.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___imul__, None, vnl_matrixSI)
vnl_matrixSI.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___neg__, None, vnl_matrixSI)
vnl_matrixSI.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___div__, None, vnl_matrixSI)
vnl_matrixSI.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___add__, None, vnl_matrixSI)
vnl_matrixSI.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___sub__, None, vnl_matrixSI)
vnl_matrixSI.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___mul__, None, vnl_matrixSI)
vnl_matrixSI.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_transpose, None, vnl_matrixSI)
vnl_matrixSI.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_conjugate_transpose, None, vnl_matrixSI)
vnl_matrixSI.update = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_update, None, vnl_matrixSI)
vnl_matrixSI.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_set_column, None, vnl_matrixSI)
vnl_matrixSI.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_set_columns, None, vnl_matrixSI)
vnl_matrixSI.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_set_row, None, vnl_matrixSI)
vnl_matrixSI.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_extract, None, vnl_matrixSI)
vnl_matrixSI.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_get_row, None, vnl_matrixSI)
vnl_matrixSI.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_get_column, None, vnl_matrixSI)
vnl_matrixSI.get_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_get_rows, None, vnl_matrixSI)
vnl_matrixSI.get_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_get_columns, None, vnl_matrixSI)
vnl_matrixSI.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_get_n_rows, None, vnl_matrixSI)
vnl_matrixSI.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_get_n_columns, None, vnl_matrixSI)
vnl_matrixSI.get_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_get_diagonal, None, vnl_matrixSI)
vnl_matrixSI.flatten_row_major = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_flatten_row_major, None, vnl_matrixSI)
vnl_matrixSI.flatten_column_major = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_flatten_column_major, None, vnl_matrixSI)
vnl_matrixSI.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_set_identity, None, vnl_matrixSI)
vnl_matrixSI.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_inplace_transpose, None, vnl_matrixSI)
vnl_matrixSI.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_flipud, None, vnl_matrixSI)
vnl_matrixSI.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_fliplr, None, vnl_matrixSI)
vnl_matrixSI.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_normalize_rows, None, vnl_matrixSI)
vnl_matrixSI.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_normalize_columns, None, vnl_matrixSI)
vnl_matrixSI.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_scale_row, None, vnl_matrixSI)
vnl_matrixSI.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_scale_column, None, vnl_matrixSI)
vnl_matrixSI.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_swap, None, vnl_matrixSI)
vnl_matrixSI.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_array_one_norm, None, vnl_matrixSI)
vnl_matrixSI.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_array_two_norm, None, vnl_matrixSI)
vnl_matrixSI.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_array_inf_norm, None, vnl_matrixSI)
vnl_matrixSI.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_absolute_value_sum, None, vnl_matrixSI)
vnl_matrixSI.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_absolute_value_max, None, vnl_matrixSI)
vnl_matrixSI.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_operator_one_norm, None, vnl_matrixSI)
vnl_matrixSI.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_operator_inf_norm, None, vnl_matrixSI)
vnl_matrixSI.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_frobenius_norm, None, vnl_matrixSI)
vnl_matrixSI.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_fro_norm, None, vnl_matrixSI)
vnl_matrixSI.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_rms, None, vnl_matrixSI)
vnl_matrixSI.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_min_value, None, vnl_matrixSI)
vnl_matrixSI.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_max_value, None, vnl_matrixSI)
vnl_matrixSI.arg_min = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_arg_min, None, vnl_matrixSI)
vnl_matrixSI.arg_max = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_arg_max, None, vnl_matrixSI)
vnl_matrixSI.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_mean, None, vnl_matrixSI)
vnl_matrixSI.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_empty, None, vnl_matrixSI)
vnl_matrixSI.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_is_identity, None, vnl_matrixSI)
vnl_matrixSI.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_is_zero, None, vnl_matrixSI)
vnl_matrixSI.is_equal = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_is_equal, None, vnl_matrixSI)
vnl_matrixSI.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_is_finite, None, vnl_matrixSI)
vnl_matrixSI.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_has_nans, None, vnl_matrixSI)
vnl_matrixSI.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_assert_size, None, vnl_matrixSI)
vnl_matrixSI.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_assert_finite, None, vnl_matrixSI)
vnl_matrixSI.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_read_ascii, None, vnl_matrixSI)
vnl_matrixSI.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_data_block, None, vnl_matrixSI)
vnl_matrixSI.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_data_array, None, vnl_matrixSI)
vnl_matrixSI.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_begin, None, vnl_matrixSI)
vnl_matrixSI.end = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_end, None, vnl_matrixSI)
vnl_matrixSI.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_operator_eq, None, vnl_matrixSI)
vnl_matrixSI.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___eq__, None, vnl_matrixSI)
vnl_matrixSI.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___ne__, None, vnl_matrixSI)
vnl_matrixSI._print = new_instancemethod(_vnl_matrixPython.vnl_matrixSI__print, None, vnl_matrixSI)
vnl_matrixSI.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_clear, None, vnl_matrixSI)
vnl_matrixSI.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_set_size, None, vnl_matrixSI)
vnl_matrixSI_swigregister = _vnl_matrixPython.vnl_matrixSI_swigregister
vnl_matrixSI_swigregister(vnl_matrixSI)

def vnl_matrixSI_read(s: 'istream') -> "vnl_matrixSI":
    """vnl_matrixSI_read(istream s) -> vnl_matrixSI"""
    return _vnl_matrixPython.vnl_matrixSI_read(s)

class vnl_matrixSL(object):
    """Proxy of C++ vnl_matrixSL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_matrixSL self) -> vnl_matrixSL
        __init__(vnl_matrixSL self, unsigned int r, unsigned int c) -> vnl_matrixSL
        __init__(vnl_matrixSL self, unsigned int r, unsigned int c, long const & v0) -> vnl_matrixSL
        __init__(vnl_matrixSL self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixSL
        __init__(vnl_matrixSL self, unsigned int r, unsigned int c, unsigned int n, long const * values) -> vnl_matrixSL
        __init__(vnl_matrixSL self, long const * data_block, unsigned int r, unsigned int c) -> vnl_matrixSL
        __init__(vnl_matrixSL self, vnl_matrixSL arg0) -> vnl_matrixSL
        __init__(vnl_matrixSL self, vnl_matrixSL arg0, vnl_matrixSL arg1, vnl_tag_add arg2) -> vnl_matrixSL
        __init__(vnl_matrixSL self, vnl_matrixSL arg0, vnl_matrixSL arg1, vnl_tag_sub arg2) -> vnl_matrixSL
        __init__(vnl_matrixSL self, vnl_matrixSL arg0, long arg1, vnl_tag_mul arg2) -> vnl_matrixSL
        __init__(vnl_matrixSL self, vnl_matrixSL arg0, long arg1, vnl_tag_div arg2) -> vnl_matrixSL
        __init__(vnl_matrixSL self, vnl_matrixSL arg0, long arg1, vnl_tag_add arg2) -> vnl_matrixSL
        __init__(vnl_matrixSL self, vnl_matrixSL arg0, long arg1, vnl_tag_sub arg2) -> vnl_matrixSL
        __init__(vnl_matrixSL self, vnl_matrixSL arg0, vnl_matrixSL arg1, vnl_tag_mul arg2) -> vnl_matrixSL
        __init__(vnl_matrixSL self, vnl_matrixSL that, vnl_tag_grab arg1) -> vnl_matrixSL
        """
        _vnl_matrixPython.vnl_matrixSL_swiginit(self, _vnl_matrixPython.new_vnl_matrixSL(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixSL

    def size(self) -> "unsigned int":
        """size(vnl_matrixSL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSL_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrixSL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSL_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrixSL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSL_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrixSL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSL_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', arg2: 'long const &') -> "void":
        """put(vnl_matrixSL self, unsigned int r, unsigned int c, long const & arg2)"""
        return _vnl_matrixPython.vnl_matrixSL_put(self, r, c, arg2)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "long":
        """get(vnl_matrixSL self, unsigned int r, unsigned int c) -> long"""
        return _vnl_matrixPython.vnl_matrixSL_get(self, r, c)


    def __call__(self, *args) -> "long const &":
        """
        __call__(vnl_matrixSL self, unsigned int r, unsigned int c) -> long
        __call__(vnl_matrixSL self, unsigned int r, unsigned int c) -> long const &
        """
        return _vnl_matrixPython.vnl_matrixSL___call__(self, *args)


    def fill(self, arg0: 'long const &') -> "vnl_matrixSL &":
        """fill(vnl_matrixSL self, long const & arg0) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_fill(self, arg0)


    def fill_diagonal(self, arg0: 'long const &') -> "vnl_matrixSL &":
        """fill_diagonal(vnl_matrixSL self, long const & arg0) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorSL') -> "vnl_matrixSL &":
        """set_diagonal(vnl_matrixSL self, vnl_vectorSL arg0) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'long const *') -> "vnl_matrixSL &":
        """copy_in(vnl_matrixSL self, long const * arg0) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_copy_in(self, arg0)


    def set(self, d: 'long const *') -> "vnl_matrixSL &":
        """set(vnl_matrixSL self, long const * d) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_set(self, d)


    def copy_out(self, arg0: 'long *') -> "void":
        """copy_out(vnl_matrixSL self, long * arg0)"""
        return _vnl_matrixPython.vnl_matrixSL_copy_out(self, arg0)


    def __idiv__(self, value: 'long') -> "vnl_matrixSL &":
        """__idiv__(vnl_matrixSL self, long value) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL___idiv__(self, value)


    def __iadd__(self, *args) -> "vnl_matrixSL &":
        """
        __iadd__(vnl_matrixSL self, long value) -> vnl_matrixSL
        __iadd__(vnl_matrixSL self, vnl_matrixSL arg0) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrixSL &":
        """
        __isub__(vnl_matrixSL self, long value) -> vnl_matrixSL
        __isub__(vnl_matrixSL self, vnl_matrixSL arg0) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL___isub__(self, *args)


    def __imul__(self, *args) -> "vnl_matrixSL &":
        """
        __imul__(vnl_matrixSL self, long value) -> vnl_matrixSL
        __imul__(vnl_matrixSL self, vnl_matrixSL rhs) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL___imul__(self, *args)


    def __neg__(self) -> "vnl_matrixSL":
        """__neg__(vnl_matrixSL self) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL___neg__(self)


    def __div__(self, v: 'long const &') -> "vnl_matrixSL":
        """__div__(vnl_matrixSL self, long const & v) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL___div__(self, v)


    def __add__(self, *args) -> "vnl_matrixSL":
        """
        __add__(vnl_matrixSL self, long const & v) -> vnl_matrixSL
        __add__(vnl_matrixSL self, vnl_matrixSL rhs) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL___add__(self, *args)


    def __sub__(self, *args) -> "vnl_matrixSL":
        """
        __sub__(vnl_matrixSL self, long const & v) -> vnl_matrixSL
        __sub__(vnl_matrixSL self, vnl_matrixSL rhs) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_matrixSL":
        """
        __mul__(vnl_matrixSL self, long const & v) -> vnl_matrixSL
        __mul__(vnl_matrixSL self, vnl_matrixSL rhs) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL___mul__(self, *args)


    def transpose(self) -> "vnl_matrixSL":
        """transpose(vnl_matrixSL self) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrixSL":
        """conjugate_transpose(vnl_matrixSL self) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixSL', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrixSL &":
        """
        update(vnl_matrixSL self, vnl_matrixSL arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrixSL
        update(vnl_matrixSL self, vnl_matrixSL arg0, unsigned int top=0) -> vnl_matrixSL
        update(vnl_matrixSL self, vnl_matrixSL arg0) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrixSL &":
        """
        set_column(vnl_matrixSL self, unsigned int i, long const * v) -> vnl_matrixSL
        set_column(vnl_matrixSL self, unsigned int i, long value) -> vnl_matrixSL
        set_column(vnl_matrixSL self, unsigned int j, vnl_vectorSL v) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixSL') -> "vnl_matrixSL &":
        """set_columns(vnl_matrixSL self, unsigned int starting_column, vnl_matrixSL M) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrixSL &":
        """
        set_row(vnl_matrixSL self, unsigned int i, long const * v) -> vnl_matrixSL
        set_row(vnl_matrixSL self, unsigned int i, long value) -> vnl_matrixSL
        set_row(vnl_matrixSL self, unsigned int i, vnl_vectorSL arg1) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrixSL self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixSL
        extract(vnl_matrixSL self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixSL
        extract(vnl_matrixSL self, unsigned int r, unsigned int c) -> vnl_matrixSL
        extract(vnl_matrixSL self, vnl_matrixSL sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrixSL self, vnl_matrixSL sub_matrix, unsigned int top=0)
        extract(vnl_matrixSL self, vnl_matrixSL sub_matrix)
        """
        return _vnl_matrixPython.vnl_matrixSL_extract(self, *args)


    def get_row(self, r: 'unsigned int') -> "vnl_vectorSL":
        """get_row(vnl_matrixSL self, unsigned int r) -> vnl_vectorSL"""
        return _vnl_matrixPython.vnl_matrixSL_get_row(self, r)


    def get_column(self, c: 'unsigned int') -> "vnl_vectorSL":
        """get_column(vnl_matrixSL self, unsigned int c) -> vnl_vectorSL"""
        return _vnl_matrixPython.vnl_matrixSL_get_column(self, c)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixSL":
        """get_rows(vnl_matrixSL self, vnl_vectorUI i) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixSL":
        """get_columns(vnl_matrixSL self, vnl_vectorUI i) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixSL":
        """get_n_rows(vnl_matrixSL self, unsigned int rowstart, unsigned int n) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixSL":
        """get_n_columns(vnl_matrixSL self, unsigned int colstart, unsigned int n) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorSL":
        """get_diagonal(vnl_matrixSL self) -> vnl_vectorSL"""
        return _vnl_matrixPython.vnl_matrixSL_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vectorSL":
        """flatten_row_major(vnl_matrixSL self) -> vnl_vectorSL"""
        return _vnl_matrixPython.vnl_matrixSL_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vectorSL":
        """flatten_column_major(vnl_matrixSL self) -> vnl_vectorSL"""
        return _vnl_matrixPython.vnl_matrixSL_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrixSL &":
        """set_identity(vnl_matrixSL self) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_set_identity(self)


    def inplace_transpose(self) -> "vnl_matrixSL &":
        """inplace_transpose(vnl_matrixSL self) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_inplace_transpose(self)


    def flipud(self) -> "vnl_matrixSL &":
        """flipud(vnl_matrixSL self) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_flipud(self)


    def fliplr(self) -> "vnl_matrixSL &":
        """fliplr(vnl_matrixSL self) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_fliplr(self)


    def normalize_rows(self) -> "vnl_matrixSL &":
        """normalize_rows(vnl_matrixSL self) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrixSL &":
        """normalize_columns(vnl_matrixSL self) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'long') -> "vnl_matrixSL &":
        """scale_row(vnl_matrixSL self, unsigned int row, long value) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'long') -> "vnl_matrixSL &":
        """scale_column(vnl_matrixSL self, unsigned int col, long value) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrixSL') -> "void":
        """swap(vnl_matrixSL self, vnl_matrixSL that)"""
        return _vnl_matrixPython.vnl_matrixSL_swap(self, that)


    def array_one_norm(self) -> "unsigned long":
        """array_one_norm(vnl_matrixSL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_array_one_norm(self)


    def array_two_norm(self) -> "unsigned long":
        """array_two_norm(vnl_matrixSL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_array_two_norm(self)


    def array_inf_norm(self) -> "unsigned long":
        """array_inf_norm(vnl_matrixSL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_array_inf_norm(self)


    def absolute_value_sum(self) -> "unsigned long":
        """absolute_value_sum(vnl_matrixSL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_absolute_value_sum(self)


    def absolute_value_max(self) -> "unsigned long":
        """absolute_value_max(vnl_matrixSL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_absolute_value_max(self)


    def operator_one_norm(self) -> "unsigned long":
        """operator_one_norm(vnl_matrixSL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_operator_one_norm(self)


    def operator_inf_norm(self) -> "unsigned long":
        """operator_inf_norm(vnl_matrixSL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_operator_inf_norm(self)


    def frobenius_norm(self) -> "unsigned long":
        """frobenius_norm(vnl_matrixSL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_frobenius_norm(self)


    def fro_norm(self) -> "unsigned long":
        """fro_norm(vnl_matrixSL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_fro_norm(self)


    def rms(self) -> "unsigned long":
        """rms(vnl_matrixSL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_rms(self)


    def min_value(self) -> "long":
        """min_value(vnl_matrixSL self) -> long"""
        return _vnl_matrixPython.vnl_matrixSL_min_value(self)


    def max_value(self) -> "long":
        """max_value(vnl_matrixSL self) -> long"""
        return _vnl_matrixPython.vnl_matrixSL_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrixSL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSL_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrixSL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSL_arg_max(self)


    def mean(self) -> "long":
        """mean(vnl_matrixSL self) -> long"""
        return _vnl_matrixPython.vnl_matrixSL_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrixSL self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrixSL self) -> bool
        is_identity(vnl_matrixSL self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSL_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrixSL self) -> bool
        is_zero(vnl_matrixSL self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSL_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrixSL', tol: 'double') -> "bool":
        """is_equal(vnl_matrixSL self, vnl_matrixSL rhs, double tol) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrixSL self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrixSL self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL_has_nans(self)


    def assert_size(self, r: 'unsigned int', c: 'unsigned int') -> "void":
        """assert_size(vnl_matrixSL self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixSL_assert_size(self, r, c)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrixSL self)"""
        return _vnl_matrixPython.vnl_matrixSL_assert_finite(self)


    def read(s: 'istream') -> "vnl_matrixSL":
        """read(istream s) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_read(s)

    read = staticmethod(read)

    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrixSL self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL_read_ascii(self, s)


    def data_block(self, *args) -> "long *":
        """
        data_block(vnl_matrixSL self) -> long const
        data_block(vnl_matrixSL self) -> long *
        """
        return _vnl_matrixPython.vnl_matrixSL_data_block(self, *args)


    def data_array(self, *args) -> "long **":
        """
        data_array(vnl_matrixSL self) -> long const
        data_array(vnl_matrixSL self) -> long **
        """
        return _vnl_matrixPython.vnl_matrixSL_data_array(self, *args)


    def begin(self, *args) -> "long const *":
        """
        begin(vnl_matrixSL self) -> long
        begin(vnl_matrixSL self) -> long const *
        """
        return _vnl_matrixPython.vnl_matrixSL_begin(self, *args)


    def end(self, *args) -> "long const *":
        """
        end(vnl_matrixSL self) -> long
        end(vnl_matrixSL self) -> long const *
        """
        return _vnl_matrixPython.vnl_matrixSL_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrixSL') -> "bool":
        """operator_eq(vnl_matrixSL self, vnl_matrixSL rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL_operator_eq(self, rhs)


    def __eq__(self, that: 'vnl_matrixSL') -> "bool":
        """__eq__(vnl_matrixSL self, vnl_matrixSL that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL___eq__(self, that)


    def __ne__(self, that: 'vnl_matrixSL') -> "bool":
        """__ne__(vnl_matrixSL self, vnl_matrixSL that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL___ne__(self, that)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrixSL self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixSL__print(self, os)


    def clear(self) -> "void":
        """clear(vnl_matrixSL self)"""
        return _vnl_matrixPython.vnl_matrixSL_clear(self)


    def set_size(self, r: 'unsigned int', c: 'unsigned int') -> "bool":
        """set_size(vnl_matrixSL self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL_set_size(self, r, c)

vnl_matrixSL.size = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_size, None, vnl_matrixSL)
vnl_matrixSL.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_rows, None, vnl_matrixSL)
vnl_matrixSL.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_cols, None, vnl_matrixSL)
vnl_matrixSL.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_columns, None, vnl_matrixSL)
vnl_matrixSL.put = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_put, None, vnl_matrixSL)
vnl_matrixSL.get = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_get, None, vnl_matrixSL)
vnl_matrixSL.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___call__, None, vnl_matrixSL)
vnl_matrixSL.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_fill, None, vnl_matrixSL)
vnl_matrixSL.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_fill_diagonal, None, vnl_matrixSL)
vnl_matrixSL.set_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_set_diagonal, None, vnl_matrixSL)
vnl_matrixSL.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_copy_in, None, vnl_matrixSL)
vnl_matrixSL.set = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_set, None, vnl_matrixSL)
vnl_matrixSL.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_copy_out, None, vnl_matrixSL)
vnl_matrixSL.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___idiv__, None, vnl_matrixSL)
vnl_matrixSL.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___iadd__, None, vnl_matrixSL)
vnl_matrixSL.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___isub__, None, vnl_matrixSL)
vnl_matrixSL.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___imul__, None, vnl_matrixSL)
vnl_matrixSL.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___neg__, None, vnl_matrixSL)
vnl_matrixSL.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___div__, None, vnl_matrixSL)
vnl_matrixSL.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___add__, None, vnl_matrixSL)
vnl_matrixSL.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___sub__, None, vnl_matrixSL)
vnl_matrixSL.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___mul__, None, vnl_matrixSL)
vnl_matrixSL.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_transpose, None, vnl_matrixSL)
vnl_matrixSL.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_conjugate_transpose, None, vnl_matrixSL)
vnl_matrixSL.update = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_update, None, vnl_matrixSL)
vnl_matrixSL.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_set_column, None, vnl_matrixSL)
vnl_matrixSL.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_set_columns, None, vnl_matrixSL)
vnl_matrixSL.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_set_row, None, vnl_matrixSL)
vnl_matrixSL.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_extract, None, vnl_matrixSL)
vnl_matrixSL.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_get_row, None, vnl_matrixSL)
vnl_matrixSL.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_get_column, None, vnl_matrixSL)
vnl_matrixSL.get_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_get_rows, None, vnl_matrixSL)
vnl_matrixSL.get_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_get_columns, None, vnl_matrixSL)
vnl_matrixSL.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_get_n_rows, None, vnl_matrixSL)
vnl_matrixSL.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_get_n_columns, None, vnl_matrixSL)
vnl_matrixSL.get_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_get_diagonal, None, vnl_matrixSL)
vnl_matrixSL.flatten_row_major = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_flatten_row_major, None, vnl_matrixSL)
vnl_matrixSL.flatten_column_major = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_flatten_column_major, None, vnl_matrixSL)
vnl_matrixSL.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_set_identity, None, vnl_matrixSL)
vnl_matrixSL.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_inplace_transpose, None, vnl_matrixSL)
vnl_matrixSL.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_flipud, None, vnl_matrixSL)
vnl_matrixSL.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_fliplr, None, vnl_matrixSL)
vnl_matrixSL.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_normalize_rows, None, vnl_matrixSL)
vnl_matrixSL.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_normalize_columns, None, vnl_matrixSL)
vnl_matrixSL.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_scale_row, None, vnl_matrixSL)
vnl_matrixSL.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_scale_column, None, vnl_matrixSL)
vnl_matrixSL.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_swap, None, vnl_matrixSL)
vnl_matrixSL.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_array_one_norm, None, vnl_matrixSL)
vnl_matrixSL.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_array_two_norm, None, vnl_matrixSL)
vnl_matrixSL.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_array_inf_norm, None, vnl_matrixSL)
vnl_matrixSL.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_absolute_value_sum, None, vnl_matrixSL)
vnl_matrixSL.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_absolute_value_max, None, vnl_matrixSL)
vnl_matrixSL.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_operator_one_norm, None, vnl_matrixSL)
vnl_matrixSL.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_operator_inf_norm, None, vnl_matrixSL)
vnl_matrixSL.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_frobenius_norm, None, vnl_matrixSL)
vnl_matrixSL.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_fro_norm, None, vnl_matrixSL)
vnl_matrixSL.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_rms, None, vnl_matrixSL)
vnl_matrixSL.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_min_value, None, vnl_matrixSL)
vnl_matrixSL.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_max_value, None, vnl_matrixSL)
vnl_matrixSL.arg_min = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_arg_min, None, vnl_matrixSL)
vnl_matrixSL.arg_max = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_arg_max, None, vnl_matrixSL)
vnl_matrixSL.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_mean, None, vnl_matrixSL)
vnl_matrixSL.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_empty, None, vnl_matrixSL)
vnl_matrixSL.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_is_identity, None, vnl_matrixSL)
vnl_matrixSL.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_is_zero, None, vnl_matrixSL)
vnl_matrixSL.is_equal = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_is_equal, None, vnl_matrixSL)
vnl_matrixSL.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_is_finite, None, vnl_matrixSL)
vnl_matrixSL.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_has_nans, None, vnl_matrixSL)
vnl_matrixSL.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_assert_size, None, vnl_matrixSL)
vnl_matrixSL.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_assert_finite, None, vnl_matrixSL)
vnl_matrixSL.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_read_ascii, None, vnl_matrixSL)
vnl_matrixSL.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_data_block, None, vnl_matrixSL)
vnl_matrixSL.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_data_array, None, vnl_matrixSL)
vnl_matrixSL.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_begin, None, vnl_matrixSL)
vnl_matrixSL.end = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_end, None, vnl_matrixSL)
vnl_matrixSL.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_operator_eq, None, vnl_matrixSL)
vnl_matrixSL.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___eq__, None, vnl_matrixSL)
vnl_matrixSL.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___ne__, None, vnl_matrixSL)
vnl_matrixSL._print = new_instancemethod(_vnl_matrixPython.vnl_matrixSL__print, None, vnl_matrixSL)
vnl_matrixSL.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_clear, None, vnl_matrixSL)
vnl_matrixSL.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_set_size, None, vnl_matrixSL)
vnl_matrixSL_swigregister = _vnl_matrixPython.vnl_matrixSL_swigregister
vnl_matrixSL_swigregister(vnl_matrixSL)

def vnl_matrixSL_read(s: 'istream') -> "vnl_matrixSL":
    """vnl_matrixSL_read(istream s) -> vnl_matrixSL"""
    return _vnl_matrixPython.vnl_matrixSL_read(s)

class vnl_matrixSLL(object):
    """Proxy of C++ vnl_matrixSLL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_matrixSLL self) -> vnl_matrixSLL
        __init__(vnl_matrixSLL self, unsigned int r, unsigned int c) -> vnl_matrixSLL
        __init__(vnl_matrixSLL self, unsigned int r, unsigned int c, long long const & v0) -> vnl_matrixSLL
        __init__(vnl_matrixSLL self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixSLL
        __init__(vnl_matrixSLL self, unsigned int r, unsigned int c, unsigned int n, long long const * values) -> vnl_matrixSLL
        __init__(vnl_matrixSLL self, long long const * data_block, unsigned int r, unsigned int c) -> vnl_matrixSLL
        __init__(vnl_matrixSLL self, vnl_matrixSLL arg0) -> vnl_matrixSLL
        __init__(vnl_matrixSLL self, vnl_matrixSLL arg0, vnl_matrixSLL arg1, vnl_tag_add arg2) -> vnl_matrixSLL
        __init__(vnl_matrixSLL self, vnl_matrixSLL arg0, vnl_matrixSLL arg1, vnl_tag_sub arg2) -> vnl_matrixSLL
        __init__(vnl_matrixSLL self, vnl_matrixSLL arg0, long long arg1, vnl_tag_mul arg2) -> vnl_matrixSLL
        __init__(vnl_matrixSLL self, vnl_matrixSLL arg0, long long arg1, vnl_tag_div arg2) -> vnl_matrixSLL
        __init__(vnl_matrixSLL self, vnl_matrixSLL arg0, long long arg1, vnl_tag_add arg2) -> vnl_matrixSLL
        __init__(vnl_matrixSLL self, vnl_matrixSLL arg0, long long arg1, vnl_tag_sub arg2) -> vnl_matrixSLL
        __init__(vnl_matrixSLL self, vnl_matrixSLL arg0, vnl_matrixSLL arg1, vnl_tag_mul arg2) -> vnl_matrixSLL
        __init__(vnl_matrixSLL self, vnl_matrixSLL that, vnl_tag_grab arg1) -> vnl_matrixSLL
        """
        _vnl_matrixPython.vnl_matrixSLL_swiginit(self, _vnl_matrixPython.new_vnl_matrixSLL(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixSLL

    def size(self) -> "unsigned int":
        """size(vnl_matrixSLL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSLL_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrixSLL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSLL_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrixSLL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSLL_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrixSLL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSLL_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', arg2: 'long long const &') -> "void":
        """put(vnl_matrixSLL self, unsigned int r, unsigned int c, long long const & arg2)"""
        return _vnl_matrixPython.vnl_matrixSLL_put(self, r, c, arg2)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "long long":
        """get(vnl_matrixSLL self, unsigned int r, unsigned int c) -> long long"""
        return _vnl_matrixPython.vnl_matrixSLL_get(self, r, c)


    def __call__(self, *args) -> "long long const &":
        """
        __call__(vnl_matrixSLL self, unsigned int r, unsigned int c) -> long long
        __call__(vnl_matrixSLL self, unsigned int r, unsigned int c) -> long long const &
        """
        return _vnl_matrixPython.vnl_matrixSLL___call__(self, *args)


    def fill(self, arg0: 'long long const &') -> "vnl_matrixSLL &":
        """fill(vnl_matrixSLL self, long long const & arg0) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_fill(self, arg0)


    def fill_diagonal(self, arg0: 'long long const &') -> "vnl_matrixSLL &":
        """fill_diagonal(vnl_matrixSLL self, long long const & arg0) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorSLL') -> "vnl_matrixSLL &":
        """set_diagonal(vnl_matrixSLL self, vnl_vectorSLL arg0) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'long long const *') -> "vnl_matrixSLL &":
        """copy_in(vnl_matrixSLL self, long long const * arg0) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_copy_in(self, arg0)


    def set(self, d: 'long long const *') -> "vnl_matrixSLL &":
        """set(vnl_matrixSLL self, long long const * d) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_set(self, d)


    def copy_out(self, arg0: 'long long *') -> "void":
        """copy_out(vnl_matrixSLL self, long long * arg0)"""
        return _vnl_matrixPython.vnl_matrixSLL_copy_out(self, arg0)


    def __idiv__(self, value: 'long long') -> "vnl_matrixSLL &":
        """__idiv__(vnl_matrixSLL self, long long value) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL___idiv__(self, value)


    def __iadd__(self, *args) -> "vnl_matrixSLL &":
        """
        __iadd__(vnl_matrixSLL self, long long value) -> vnl_matrixSLL
        __iadd__(vnl_matrixSLL self, vnl_matrixSLL arg0) -> vnl_matrixSLL
        """
        return _vnl_matrixPython.vnl_matrixSLL___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrixSLL &":
        """
        __isub__(vnl_matrixSLL self, long long value) -> vnl_matrixSLL
        __isub__(vnl_matrixSLL self, vnl_matrixSLL arg0) -> vnl_matrixSLL
        """
        return _vnl_matrixPython.vnl_matrixSLL___isub__(self, *args)


    def __imul__(self, *args) -> "vnl_matrixSLL &":
        """
        __imul__(vnl_matrixSLL self, long long value) -> vnl_matrixSLL
        __imul__(vnl_matrixSLL self, vnl_matrixSLL rhs) -> vnl_matrixSLL
        """
        return _vnl_matrixPython.vnl_matrixSLL___imul__(self, *args)


    def __neg__(self) -> "vnl_matrixSLL":
        """__neg__(vnl_matrixSLL self) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL___neg__(self)


    def __div__(self, v: 'long long const &') -> "vnl_matrixSLL":
        """__div__(vnl_matrixSLL self, long long const & v) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL___div__(self, v)


    def __add__(self, *args) -> "vnl_matrixSLL":
        """
        __add__(vnl_matrixSLL self, long long const & v) -> vnl_matrixSLL
        __add__(vnl_matrixSLL self, vnl_matrixSLL rhs) -> vnl_matrixSLL
        """
        return _vnl_matrixPython.vnl_matrixSLL___add__(self, *args)


    def __sub__(self, *args) -> "vnl_matrixSLL":
        """
        __sub__(vnl_matrixSLL self, long long const & v) -> vnl_matrixSLL
        __sub__(vnl_matrixSLL self, vnl_matrixSLL rhs) -> vnl_matrixSLL
        """
        return _vnl_matrixPython.vnl_matrixSLL___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_matrixSLL":
        """
        __mul__(vnl_matrixSLL self, long long const & v) -> vnl_matrixSLL
        __mul__(vnl_matrixSLL self, vnl_matrixSLL rhs) -> vnl_matrixSLL
        """
        return _vnl_matrixPython.vnl_matrixSLL___mul__(self, *args)


    def transpose(self) -> "vnl_matrixSLL":
        """transpose(vnl_matrixSLL self) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrixSLL":
        """conjugate_transpose(vnl_matrixSLL self) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixSLL', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrixSLL &":
        """
        update(vnl_matrixSLL self, vnl_matrixSLL arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrixSLL
        update(vnl_matrixSLL self, vnl_matrixSLL arg0, unsigned int top=0) -> vnl_matrixSLL
        update(vnl_matrixSLL self, vnl_matrixSLL arg0) -> vnl_matrixSLL
        """
        return _vnl_matrixPython.vnl_matrixSLL_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrixSLL &":
        """
        set_column(vnl_matrixSLL self, unsigned int i, long long const * v) -> vnl_matrixSLL
        set_column(vnl_matrixSLL self, unsigned int i, long long value) -> vnl_matrixSLL
        set_column(vnl_matrixSLL self, unsigned int j, vnl_vectorSLL v) -> vnl_matrixSLL
        """
        return _vnl_matrixPython.vnl_matrixSLL_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixSLL') -> "vnl_matrixSLL &":
        """set_columns(vnl_matrixSLL self, unsigned int starting_column, vnl_matrixSLL M) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrixSLL &":
        """
        set_row(vnl_matrixSLL self, unsigned int i, long long const * v) -> vnl_matrixSLL
        set_row(vnl_matrixSLL self, unsigned int i, long long value) -> vnl_matrixSLL
        set_row(vnl_matrixSLL self, unsigned int i, vnl_vectorSLL arg1) -> vnl_matrixSLL
        """
        return _vnl_matrixPython.vnl_matrixSLL_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrixSLL self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixSLL
        extract(vnl_matrixSLL self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixSLL
        extract(vnl_matrixSLL self, unsigned int r, unsigned int c) -> vnl_matrixSLL
        extract(vnl_matrixSLL self, vnl_matrixSLL sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrixSLL self, vnl_matrixSLL sub_matrix, unsigned int top=0)
        extract(vnl_matrixSLL self, vnl_matrixSLL sub_matrix)
        """
        return _vnl_matrixPython.vnl_matrixSLL_extract(self, *args)


    def get_row(self, r: 'unsigned int') -> "vnl_vectorSLL":
        """get_row(vnl_matrixSLL self, unsigned int r) -> vnl_vectorSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_get_row(self, r)


    def get_column(self, c: 'unsigned int') -> "vnl_vectorSLL":
        """get_column(vnl_matrixSLL self, unsigned int c) -> vnl_vectorSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_get_column(self, c)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixSLL":
        """get_rows(vnl_matrixSLL self, vnl_vectorUI i) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixSLL":
        """get_columns(vnl_matrixSLL self, vnl_vectorUI i) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixSLL":
        """get_n_rows(vnl_matrixSLL self, unsigned int rowstart, unsigned int n) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixSLL":
        """get_n_columns(vnl_matrixSLL self, unsigned int colstart, unsigned int n) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorSLL":
        """get_diagonal(vnl_matrixSLL self) -> vnl_vectorSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vectorSLL":
        """flatten_row_major(vnl_matrixSLL self) -> vnl_vectorSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vectorSLL":
        """flatten_column_major(vnl_matrixSLL self) -> vnl_vectorSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrixSLL &":
        """set_identity(vnl_matrixSLL self) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_set_identity(self)


    def inplace_transpose(self) -> "vnl_matrixSLL &":
        """inplace_transpose(vnl_matrixSLL self) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_inplace_transpose(self)


    def flipud(self) -> "vnl_matrixSLL &":
        """flipud(vnl_matrixSLL self) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_flipud(self)


    def fliplr(self) -> "vnl_matrixSLL &":
        """fliplr(vnl_matrixSLL self) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_fliplr(self)


    def normalize_rows(self) -> "vnl_matrixSLL &":
        """normalize_rows(vnl_matrixSLL self) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrixSLL &":
        """normalize_columns(vnl_matrixSLL self) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'long long') -> "vnl_matrixSLL &":
        """scale_row(vnl_matrixSLL self, unsigned int row, long long value) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'long long') -> "vnl_matrixSLL &":
        """scale_column(vnl_matrixSLL self, unsigned int col, long long value) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrixSLL') -> "void":
        """swap(vnl_matrixSLL self, vnl_matrixSLL that)"""
        return _vnl_matrixPython.vnl_matrixSLL_swap(self, that)


    def array_one_norm(self) -> "unsigned long long":
        """array_one_norm(vnl_matrixSLL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixSLL_array_one_norm(self)


    def array_two_norm(self) -> "unsigned long long":
        """array_two_norm(vnl_matrixSLL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixSLL_array_two_norm(self)


    def array_inf_norm(self) -> "unsigned long long":
        """array_inf_norm(vnl_matrixSLL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixSLL_array_inf_norm(self)


    def absolute_value_sum(self) -> "unsigned long long":
        """absolute_value_sum(vnl_matrixSLL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixSLL_absolute_value_sum(self)


    def absolute_value_max(self) -> "unsigned long long":
        """absolute_value_max(vnl_matrixSLL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixSLL_absolute_value_max(self)


    def operator_one_norm(self) -> "unsigned long long":
        """operator_one_norm(vnl_matrixSLL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixSLL_operator_one_norm(self)


    def operator_inf_norm(self) -> "unsigned long long":
        """operator_inf_norm(vnl_matrixSLL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixSLL_operator_inf_norm(self)


    def frobenius_norm(self) -> "unsigned long long":
        """frobenius_norm(vnl_matrixSLL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixSLL_frobenius_norm(self)


    def fro_norm(self) -> "unsigned long long":
        """fro_norm(vnl_matrixSLL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixSLL_fro_norm(self)


    def rms(self) -> "unsigned long long":
        """rms(vnl_matrixSLL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixSLL_rms(self)


    def min_value(self) -> "long long":
        """min_value(vnl_matrixSLL self) -> long long"""
        return _vnl_matrixPython.vnl_matrixSLL_min_value(self)


    def max_value(self) -> "long long":
        """max_value(vnl_matrixSLL self) -> long long"""
        return _vnl_matrixPython.vnl_matrixSLL_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrixSLL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSLL_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrixSLL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSLL_arg_max(self)


    def mean(self) -> "long long":
        """mean(vnl_matrixSLL self) -> long long"""
        return _vnl_matrixPython.vnl_matrixSLL_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrixSLL self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSLL_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrixSLL self) -> bool
        is_identity(vnl_matrixSLL self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSLL_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrixSLL self) -> bool
        is_zero(vnl_matrixSLL self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSLL_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrixSLL', tol: 'double') -> "bool":
        """is_equal(vnl_matrixSLL self, vnl_matrixSLL rhs, double tol) -> bool"""
        return _vnl_matrixPython.vnl_matrixSLL_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrixSLL self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSLL_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrixSLL self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSLL_has_nans(self)


    def assert_size(self, r: 'unsigned int', c: 'unsigned int') -> "void":
        """assert_size(vnl_matrixSLL self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixSLL_assert_size(self, r, c)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrixSLL self)"""
        return _vnl_matrixPython.vnl_matrixSLL_assert_finite(self)


    def read(s: 'istream') -> "vnl_matrixSLL":
        """read(istream s) -> vnl_matrixSLL"""
        return _vnl_matrixPython.vnl_matrixSLL_read(s)

    read = staticmethod(read)

    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrixSLL self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixSLL_read_ascii(self, s)


    def data_block(self, *args) -> "long long *":
        """
        data_block(vnl_matrixSLL self) -> long long const
        data_block(vnl_matrixSLL self) -> long long *
        """
        return _vnl_matrixPython.vnl_matrixSLL_data_block(self, *args)


    def data_array(self, *args) -> "long long **":
        """
        data_array(vnl_matrixSLL self) -> long long const
        data_array(vnl_matrixSLL self) -> long long **
        """
        return _vnl_matrixPython.vnl_matrixSLL_data_array(self, *args)


    def begin(self, *args) -> "long long const *":
        """
        begin(vnl_matrixSLL self) -> long long
        begin(vnl_matrixSLL self) -> long long const *
        """
        return _vnl_matrixPython.vnl_matrixSLL_begin(self, *args)


    def end(self, *args) -> "long long const *":
        """
        end(vnl_matrixSLL self) -> long long
        end(vnl_matrixSLL self) -> long long const *
        """
        return _vnl_matrixPython.vnl_matrixSLL_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrixSLL') -> "bool":
        """operator_eq(vnl_matrixSLL self, vnl_matrixSLL rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixSLL_operator_eq(self, rhs)


    def __eq__(self, that: 'vnl_matrixSLL') -> "bool":
        """__eq__(vnl_matrixSLL self, vnl_matrixSLL that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSLL___eq__(self, that)


    def __ne__(self, that: 'vnl_matrixSLL') -> "bool":
        """__ne__(vnl_matrixSLL self, vnl_matrixSLL that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSLL___ne__(self, that)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrixSLL self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixSLL__print(self, os)


    def clear(self) -> "void":
        """clear(vnl_matrixSLL self)"""
        return _vnl_matrixPython.vnl_matrixSLL_clear(self)


    def set_size(self, r: 'unsigned int', c: 'unsigned int') -> "bool":
        """set_size(vnl_matrixSLL self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixSLL_set_size(self, r, c)

vnl_matrixSLL.size = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_size, None, vnl_matrixSLL)
vnl_matrixSLL.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_rows, None, vnl_matrixSLL)
vnl_matrixSLL.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_cols, None, vnl_matrixSLL)
vnl_matrixSLL.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_columns, None, vnl_matrixSLL)
vnl_matrixSLL.put = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_put, None, vnl_matrixSLL)
vnl_matrixSLL.get = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_get, None, vnl_matrixSLL)
vnl_matrixSLL.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL___call__, None, vnl_matrixSLL)
vnl_matrixSLL.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_fill, None, vnl_matrixSLL)
vnl_matrixSLL.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_fill_diagonal, None, vnl_matrixSLL)
vnl_matrixSLL.set_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_set_diagonal, None, vnl_matrixSLL)
vnl_matrixSLL.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_copy_in, None, vnl_matrixSLL)
vnl_matrixSLL.set = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_set, None, vnl_matrixSLL)
vnl_matrixSLL.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_copy_out, None, vnl_matrixSLL)
vnl_matrixSLL.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL___idiv__, None, vnl_matrixSLL)
vnl_matrixSLL.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL___iadd__, None, vnl_matrixSLL)
vnl_matrixSLL.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL___isub__, None, vnl_matrixSLL)
vnl_matrixSLL.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL___imul__, None, vnl_matrixSLL)
vnl_matrixSLL.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL___neg__, None, vnl_matrixSLL)
vnl_matrixSLL.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL___div__, None, vnl_matrixSLL)
vnl_matrixSLL.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL___add__, None, vnl_matrixSLL)
vnl_matrixSLL.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL___sub__, None, vnl_matrixSLL)
vnl_matrixSLL.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL___mul__, None, vnl_matrixSLL)
vnl_matrixSLL.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_transpose, None, vnl_matrixSLL)
vnl_matrixSLL.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_conjugate_transpose, None, vnl_matrixSLL)
vnl_matrixSLL.update = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_update, None, vnl_matrixSLL)
vnl_matrixSLL.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_set_column, None, vnl_matrixSLL)
vnl_matrixSLL.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_set_columns, None, vnl_matrixSLL)
vnl_matrixSLL.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_set_row, None, vnl_matrixSLL)
vnl_matrixSLL.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_extract, None, vnl_matrixSLL)
vnl_matrixSLL.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_get_row, None, vnl_matrixSLL)
vnl_matrixSLL.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_get_column, None, vnl_matrixSLL)
vnl_matrixSLL.get_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_get_rows, None, vnl_matrixSLL)
vnl_matrixSLL.get_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_get_columns, None, vnl_matrixSLL)
vnl_matrixSLL.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_get_n_rows, None, vnl_matrixSLL)
vnl_matrixSLL.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_get_n_columns, None, vnl_matrixSLL)
vnl_matrixSLL.get_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_get_diagonal, None, vnl_matrixSLL)
vnl_matrixSLL.flatten_row_major = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_flatten_row_major, None, vnl_matrixSLL)
vnl_matrixSLL.flatten_column_major = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_flatten_column_major, None, vnl_matrixSLL)
vnl_matrixSLL.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_set_identity, None, vnl_matrixSLL)
vnl_matrixSLL.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_inplace_transpose, None, vnl_matrixSLL)
vnl_matrixSLL.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_flipud, None, vnl_matrixSLL)
vnl_matrixSLL.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_fliplr, None, vnl_matrixSLL)
vnl_matrixSLL.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_normalize_rows, None, vnl_matrixSLL)
vnl_matrixSLL.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_normalize_columns, None, vnl_matrixSLL)
vnl_matrixSLL.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_scale_row, None, vnl_matrixSLL)
vnl_matrixSLL.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_scale_column, None, vnl_matrixSLL)
vnl_matrixSLL.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_swap, None, vnl_matrixSLL)
vnl_matrixSLL.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_array_one_norm, None, vnl_matrixSLL)
vnl_matrixSLL.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_array_two_norm, None, vnl_matrixSLL)
vnl_matrixSLL.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_array_inf_norm, None, vnl_matrixSLL)
vnl_matrixSLL.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_absolute_value_sum, None, vnl_matrixSLL)
vnl_matrixSLL.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_absolute_value_max, None, vnl_matrixSLL)
vnl_matrixSLL.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_operator_one_norm, None, vnl_matrixSLL)
vnl_matrixSLL.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_operator_inf_norm, None, vnl_matrixSLL)
vnl_matrixSLL.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_frobenius_norm, None, vnl_matrixSLL)
vnl_matrixSLL.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_fro_norm, None, vnl_matrixSLL)
vnl_matrixSLL.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_rms, None, vnl_matrixSLL)
vnl_matrixSLL.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_min_value, None, vnl_matrixSLL)
vnl_matrixSLL.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_max_value, None, vnl_matrixSLL)
vnl_matrixSLL.arg_min = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_arg_min, None, vnl_matrixSLL)
vnl_matrixSLL.arg_max = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_arg_max, None, vnl_matrixSLL)
vnl_matrixSLL.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_mean, None, vnl_matrixSLL)
vnl_matrixSLL.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_empty, None, vnl_matrixSLL)
vnl_matrixSLL.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_is_identity, None, vnl_matrixSLL)
vnl_matrixSLL.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_is_zero, None, vnl_matrixSLL)
vnl_matrixSLL.is_equal = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_is_equal, None, vnl_matrixSLL)
vnl_matrixSLL.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_is_finite, None, vnl_matrixSLL)
vnl_matrixSLL.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_has_nans, None, vnl_matrixSLL)
vnl_matrixSLL.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_assert_size, None, vnl_matrixSLL)
vnl_matrixSLL.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_assert_finite, None, vnl_matrixSLL)
vnl_matrixSLL.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_read_ascii, None, vnl_matrixSLL)
vnl_matrixSLL.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_data_block, None, vnl_matrixSLL)
vnl_matrixSLL.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_data_array, None, vnl_matrixSLL)
vnl_matrixSLL.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_begin, None, vnl_matrixSLL)
vnl_matrixSLL.end = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_end, None, vnl_matrixSLL)
vnl_matrixSLL.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_operator_eq, None, vnl_matrixSLL)
vnl_matrixSLL.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL___eq__, None, vnl_matrixSLL)
vnl_matrixSLL.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL___ne__, None, vnl_matrixSLL)
vnl_matrixSLL._print = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL__print, None, vnl_matrixSLL)
vnl_matrixSLL.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_clear, None, vnl_matrixSLL)
vnl_matrixSLL.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSLL_set_size, None, vnl_matrixSLL)
vnl_matrixSLL_swigregister = _vnl_matrixPython.vnl_matrixSLL_swigregister
vnl_matrixSLL_swigregister(vnl_matrixSLL)

def vnl_matrixSLL_read(s: 'istream') -> "vnl_matrixSLL":
    """vnl_matrixSLL_read(istream s) -> vnl_matrixSLL"""
    return _vnl_matrixPython.vnl_matrixSLL_read(s)

class vnl_matrixSS(object):
    """Proxy of C++ vnl_matrixSS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_matrixSS self) -> vnl_matrixSS
        __init__(vnl_matrixSS self, unsigned int r, unsigned int c) -> vnl_matrixSS
        __init__(vnl_matrixSS self, unsigned int r, unsigned int c, short const & v0) -> vnl_matrixSS
        __init__(vnl_matrixSS self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixSS
        __init__(vnl_matrixSS self, unsigned int r, unsigned int c, unsigned int n, short const * values) -> vnl_matrixSS
        __init__(vnl_matrixSS self, short const * data_block, unsigned int r, unsigned int c) -> vnl_matrixSS
        __init__(vnl_matrixSS self, vnl_matrixSS arg0) -> vnl_matrixSS
        __init__(vnl_matrixSS self, vnl_matrixSS arg0, vnl_matrixSS arg1, vnl_tag_add arg2) -> vnl_matrixSS
        __init__(vnl_matrixSS self, vnl_matrixSS arg0, vnl_matrixSS arg1, vnl_tag_sub arg2) -> vnl_matrixSS
        __init__(vnl_matrixSS self, vnl_matrixSS arg0, short arg1, vnl_tag_mul arg2) -> vnl_matrixSS
        __init__(vnl_matrixSS self, vnl_matrixSS arg0, short arg1, vnl_tag_div arg2) -> vnl_matrixSS
        __init__(vnl_matrixSS self, vnl_matrixSS arg0, short arg1, vnl_tag_add arg2) -> vnl_matrixSS
        __init__(vnl_matrixSS self, vnl_matrixSS arg0, short arg1, vnl_tag_sub arg2) -> vnl_matrixSS
        __init__(vnl_matrixSS self, vnl_matrixSS arg0, vnl_matrixSS arg1, vnl_tag_mul arg2) -> vnl_matrixSS
        __init__(vnl_matrixSS self, vnl_matrixSS that, vnl_tag_grab arg1) -> vnl_matrixSS
        """
        _vnl_matrixPython.vnl_matrixSS_swiginit(self, _vnl_matrixPython.new_vnl_matrixSS(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixSS

    def size(self) -> "unsigned int":
        """size(vnl_matrixSS self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSS_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrixSS self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSS_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrixSS self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSS_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrixSS self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSS_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', arg2: 'short const &') -> "void":
        """put(vnl_matrixSS self, unsigned int r, unsigned int c, short const & arg2)"""
        return _vnl_matrixPython.vnl_matrixSS_put(self, r, c, arg2)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "short":
        """get(vnl_matrixSS self, unsigned int r, unsigned int c) -> short"""
        return _vnl_matrixPython.vnl_matrixSS_get(self, r, c)


    def __call__(self, *args) -> "short const &":
        """
        __call__(vnl_matrixSS self, unsigned int r, unsigned int c) -> short
        __call__(vnl_matrixSS self, unsigned int r, unsigned int c) -> short const &
        """
        return _vnl_matrixPython.vnl_matrixSS___call__(self, *args)


    def fill(self, arg0: 'short const &') -> "vnl_matrixSS &":
        """fill(vnl_matrixSS self, short const & arg0) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_fill(self, arg0)


    def fill_diagonal(self, arg0: 'short const &') -> "vnl_matrixSS &":
        """fill_diagonal(vnl_matrixSS self, short const & arg0) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorSS') -> "vnl_matrixSS &":
        """set_diagonal(vnl_matrixSS self, vnl_vectorSS arg0) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'short const *') -> "vnl_matrixSS &":
        """copy_in(vnl_matrixSS self, short const * arg0) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_copy_in(self, arg0)


    def set(self, d: 'short const *') -> "vnl_matrixSS &":
        """set(vnl_matrixSS self, short const * d) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_set(self, d)


    def copy_out(self, arg0: 'short *') -> "void":
        """copy_out(vnl_matrixSS self, short * arg0)"""
        return _vnl_matrixPython.vnl_matrixSS_copy_out(self, arg0)


    def __idiv__(self, value: 'short') -> "vnl_matrixSS &":
        """__idiv__(vnl_matrixSS self, short value) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS___idiv__(self, value)


    def __iadd__(self, *args) -> "vnl_matrixSS &":
        """
        __iadd__(vnl_matrixSS self, short value) -> vnl_matrixSS
        __iadd__(vnl_matrixSS self, vnl_matrixSS arg0) -> vnl_matrixSS
        """
        return _vnl_matrixPython.vnl_matrixSS___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrixSS &":
        """
        __isub__(vnl_matrixSS self, short value) -> vnl_matrixSS
        __isub__(vnl_matrixSS self, vnl_matrixSS arg0) -> vnl_matrixSS
        """
        return _vnl_matrixPython.vnl_matrixSS___isub__(self, *args)


    def __imul__(self, *args) -> "vnl_matrixSS &":
        """
        __imul__(vnl_matrixSS self, short value) -> vnl_matrixSS
        __imul__(vnl_matrixSS self, vnl_matrixSS rhs) -> vnl_matrixSS
        """
        return _vnl_matrixPython.vnl_matrixSS___imul__(self, *args)


    def __neg__(self) -> "vnl_matrixSS":
        """__neg__(vnl_matrixSS self) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS___neg__(self)


    def __div__(self, v: 'short const &') -> "vnl_matrixSS":
        """__div__(vnl_matrixSS self, short const & v) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS___div__(self, v)


    def __add__(self, *args) -> "vnl_matrixSS":
        """
        __add__(vnl_matrixSS self, short const & v) -> vnl_matrixSS
        __add__(vnl_matrixSS self, vnl_matrixSS rhs) -> vnl_matrixSS
        """
        return _vnl_matrixPython.vnl_matrixSS___add__(self, *args)


    def __sub__(self, *args) -> "vnl_matrixSS":
        """
        __sub__(vnl_matrixSS self, short const & v) -> vnl_matrixSS
        __sub__(vnl_matrixSS self, vnl_matrixSS rhs) -> vnl_matrixSS
        """
        return _vnl_matrixPython.vnl_matrixSS___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_matrixSS":
        """
        __mul__(vnl_matrixSS self, short const & v) -> vnl_matrixSS
        __mul__(vnl_matrixSS self, vnl_matrixSS rhs) -> vnl_matrixSS
        """
        return _vnl_matrixPython.vnl_matrixSS___mul__(self, *args)


    def transpose(self) -> "vnl_matrixSS":
        """transpose(vnl_matrixSS self) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrixSS":
        """conjugate_transpose(vnl_matrixSS self) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixSS', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrixSS &":
        """
        update(vnl_matrixSS self, vnl_matrixSS arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrixSS
        update(vnl_matrixSS self, vnl_matrixSS arg0, unsigned int top=0) -> vnl_matrixSS
        update(vnl_matrixSS self, vnl_matrixSS arg0) -> vnl_matrixSS
        """
        return _vnl_matrixPython.vnl_matrixSS_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrixSS &":
        """
        set_column(vnl_matrixSS self, unsigned int i, short const * v) -> vnl_matrixSS
        set_column(vnl_matrixSS self, unsigned int i, short value) -> vnl_matrixSS
        set_column(vnl_matrixSS self, unsigned int j, vnl_vectorSS v) -> vnl_matrixSS
        """
        return _vnl_matrixPython.vnl_matrixSS_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixSS') -> "vnl_matrixSS &":
        """set_columns(vnl_matrixSS self, unsigned int starting_column, vnl_matrixSS M) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrixSS &":
        """
        set_row(vnl_matrixSS self, unsigned int i, short const * v) -> vnl_matrixSS
        set_row(vnl_matrixSS self, unsigned int i, short value) -> vnl_matrixSS
        set_row(vnl_matrixSS self, unsigned int i, vnl_vectorSS arg1) -> vnl_matrixSS
        """
        return _vnl_matrixPython.vnl_matrixSS_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrixSS self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixSS
        extract(vnl_matrixSS self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixSS
        extract(vnl_matrixSS self, unsigned int r, unsigned int c) -> vnl_matrixSS
        extract(vnl_matrixSS self, vnl_matrixSS sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrixSS self, vnl_matrixSS sub_matrix, unsigned int top=0)
        extract(vnl_matrixSS self, vnl_matrixSS sub_matrix)
        """
        return _vnl_matrixPython.vnl_matrixSS_extract(self, *args)


    def get_row(self, r: 'unsigned int') -> "vnl_vectorSS":
        """get_row(vnl_matrixSS self, unsigned int r) -> vnl_vectorSS"""
        return _vnl_matrixPython.vnl_matrixSS_get_row(self, r)


    def get_column(self, c: 'unsigned int') -> "vnl_vectorSS":
        """get_column(vnl_matrixSS self, unsigned int c) -> vnl_vectorSS"""
        return _vnl_matrixPython.vnl_matrixSS_get_column(self, c)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixSS":
        """get_rows(vnl_matrixSS self, vnl_vectorUI i) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixSS":
        """get_columns(vnl_matrixSS self, vnl_vectorUI i) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixSS":
        """get_n_rows(vnl_matrixSS self, unsigned int rowstart, unsigned int n) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixSS":
        """get_n_columns(vnl_matrixSS self, unsigned int colstart, unsigned int n) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorSS":
        """get_diagonal(vnl_matrixSS self) -> vnl_vectorSS"""
        return _vnl_matrixPython.vnl_matrixSS_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vectorSS":
        """flatten_row_major(vnl_matrixSS self) -> vnl_vectorSS"""
        return _vnl_matrixPython.vnl_matrixSS_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vectorSS":
        """flatten_column_major(vnl_matrixSS self) -> vnl_vectorSS"""
        return _vnl_matrixPython.vnl_matrixSS_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrixSS &":
        """set_identity(vnl_matrixSS self) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_set_identity(self)


    def inplace_transpose(self) -> "vnl_matrixSS &":
        """inplace_transpose(vnl_matrixSS self) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_inplace_transpose(self)


    def flipud(self) -> "vnl_matrixSS &":
        """flipud(vnl_matrixSS self) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_flipud(self)


    def fliplr(self) -> "vnl_matrixSS &":
        """fliplr(vnl_matrixSS self) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_fliplr(self)


    def normalize_rows(self) -> "vnl_matrixSS &":
        """normalize_rows(vnl_matrixSS self) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrixSS &":
        """normalize_columns(vnl_matrixSS self) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'short') -> "vnl_matrixSS &":
        """scale_row(vnl_matrixSS self, unsigned int row, short value) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'short') -> "vnl_matrixSS &":
        """scale_column(vnl_matrixSS self, unsigned int col, short value) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrixSS') -> "void":
        """swap(vnl_matrixSS self, vnl_matrixSS that)"""
        return _vnl_matrixPython.vnl_matrixSS_swap(self, that)


    def array_one_norm(self) -> "unsigned short":
        """array_one_norm(vnl_matrixSS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixSS_array_one_norm(self)


    def array_two_norm(self) -> "unsigned short":
        """array_two_norm(vnl_matrixSS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixSS_array_two_norm(self)


    def array_inf_norm(self) -> "unsigned short":
        """array_inf_norm(vnl_matrixSS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixSS_array_inf_norm(self)


    def absolute_value_sum(self) -> "unsigned short":
        """absolute_value_sum(vnl_matrixSS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixSS_absolute_value_sum(self)


    def absolute_value_max(self) -> "unsigned short":
        """absolute_value_max(vnl_matrixSS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixSS_absolute_value_max(self)


    def operator_one_norm(self) -> "unsigned short":
        """operator_one_norm(vnl_matrixSS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixSS_operator_one_norm(self)


    def operator_inf_norm(self) -> "unsigned short":
        """operator_inf_norm(vnl_matrixSS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixSS_operator_inf_norm(self)


    def frobenius_norm(self) -> "unsigned short":
        """frobenius_norm(vnl_matrixSS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixSS_frobenius_norm(self)


    def fro_norm(self) -> "unsigned short":
        """fro_norm(vnl_matrixSS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixSS_fro_norm(self)


    def rms(self) -> "unsigned short":
        """rms(vnl_matrixSS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixSS_rms(self)


    def min_value(self) -> "short":
        """min_value(vnl_matrixSS self) -> short"""
        return _vnl_matrixPython.vnl_matrixSS_min_value(self)


    def max_value(self) -> "short":
        """max_value(vnl_matrixSS self) -> short"""
        return _vnl_matrixPython.vnl_matrixSS_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrixSS self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSS_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrixSS self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSS_arg_max(self)


    def mean(self) -> "short":
        """mean(vnl_matrixSS self) -> short"""
        return _vnl_matrixPython.vnl_matrixSS_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrixSS self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSS_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrixSS self) -> bool
        is_identity(vnl_matrixSS self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSS_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrixSS self) -> bool
        is_zero(vnl_matrixSS self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSS_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrixSS', tol: 'double') -> "bool":
        """is_equal(vnl_matrixSS self, vnl_matrixSS rhs, double tol) -> bool"""
        return _vnl_matrixPython.vnl_matrixSS_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrixSS self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSS_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrixSS self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSS_has_nans(self)


    def assert_size(self, r: 'unsigned int', c: 'unsigned int') -> "void":
        """assert_size(vnl_matrixSS self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixSS_assert_size(self, r, c)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrixSS self)"""
        return _vnl_matrixPython.vnl_matrixSS_assert_finite(self)


    def read(s: 'istream') -> "vnl_matrixSS":
        """read(istream s) -> vnl_matrixSS"""
        return _vnl_matrixPython.vnl_matrixSS_read(s)

    read = staticmethod(read)

    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrixSS self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixSS_read_ascii(self, s)


    def data_block(self, *args) -> "short *":
        """
        data_block(vnl_matrixSS self) -> short const
        data_block(vnl_matrixSS self) -> short *
        """
        return _vnl_matrixPython.vnl_matrixSS_data_block(self, *args)


    def data_array(self, *args) -> "short **":
        """
        data_array(vnl_matrixSS self) -> short const
        data_array(vnl_matrixSS self) -> short **
        """
        return _vnl_matrixPython.vnl_matrixSS_data_array(self, *args)


    def begin(self, *args) -> "short const *":
        """
        begin(vnl_matrixSS self) -> short
        begin(vnl_matrixSS self) -> short const *
        """
        return _vnl_matrixPython.vnl_matrixSS_begin(self, *args)


    def end(self, *args) -> "short const *":
        """
        end(vnl_matrixSS self) -> short
        end(vnl_matrixSS self) -> short const *
        """
        return _vnl_matrixPython.vnl_matrixSS_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrixSS') -> "bool":
        """operator_eq(vnl_matrixSS self, vnl_matrixSS rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixSS_operator_eq(self, rhs)


    def __eq__(self, that: 'vnl_matrixSS') -> "bool":
        """__eq__(vnl_matrixSS self, vnl_matrixSS that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSS___eq__(self, that)


    def __ne__(self, that: 'vnl_matrixSS') -> "bool":
        """__ne__(vnl_matrixSS self, vnl_matrixSS that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSS___ne__(self, that)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrixSS self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixSS__print(self, os)


    def clear(self) -> "void":
        """clear(vnl_matrixSS self)"""
        return _vnl_matrixPython.vnl_matrixSS_clear(self)


    def set_size(self, r: 'unsigned int', c: 'unsigned int') -> "bool":
        """set_size(vnl_matrixSS self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixSS_set_size(self, r, c)

vnl_matrixSS.size = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_size, None, vnl_matrixSS)
vnl_matrixSS.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_rows, None, vnl_matrixSS)
vnl_matrixSS.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_cols, None, vnl_matrixSS)
vnl_matrixSS.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_columns, None, vnl_matrixSS)
vnl_matrixSS.put = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_put, None, vnl_matrixSS)
vnl_matrixSS.get = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_get, None, vnl_matrixSS)
vnl_matrixSS.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSS___call__, None, vnl_matrixSS)
vnl_matrixSS.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_fill, None, vnl_matrixSS)
vnl_matrixSS.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_fill_diagonal, None, vnl_matrixSS)
vnl_matrixSS.set_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_set_diagonal, None, vnl_matrixSS)
vnl_matrixSS.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_copy_in, None, vnl_matrixSS)
vnl_matrixSS.set = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_set, None, vnl_matrixSS)
vnl_matrixSS.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_copy_out, None, vnl_matrixSS)
vnl_matrixSS.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSS___idiv__, None, vnl_matrixSS)
vnl_matrixSS.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSS___iadd__, None, vnl_matrixSS)
vnl_matrixSS.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSS___isub__, None, vnl_matrixSS)
vnl_matrixSS.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSS___imul__, None, vnl_matrixSS)
vnl_matrixSS.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSS___neg__, None, vnl_matrixSS)
vnl_matrixSS.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSS___div__, None, vnl_matrixSS)
vnl_matrixSS.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSS___add__, None, vnl_matrixSS)
vnl_matrixSS.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSS___sub__, None, vnl_matrixSS)
vnl_matrixSS.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSS___mul__, None, vnl_matrixSS)
vnl_matrixSS.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_transpose, None, vnl_matrixSS)
vnl_matrixSS.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_conjugate_transpose, None, vnl_matrixSS)
vnl_matrixSS.update = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_update, None, vnl_matrixSS)
vnl_matrixSS.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_set_column, None, vnl_matrixSS)
vnl_matrixSS.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_set_columns, None, vnl_matrixSS)
vnl_matrixSS.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_set_row, None, vnl_matrixSS)
vnl_matrixSS.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_extract, None, vnl_matrixSS)
vnl_matrixSS.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_get_row, None, vnl_matrixSS)
vnl_matrixSS.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_get_column, None, vnl_matrixSS)
vnl_matrixSS.get_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_get_rows, None, vnl_matrixSS)
vnl_matrixSS.get_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_get_columns, None, vnl_matrixSS)
vnl_matrixSS.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_get_n_rows, None, vnl_matrixSS)
vnl_matrixSS.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_get_n_columns, None, vnl_matrixSS)
vnl_matrixSS.get_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_get_diagonal, None, vnl_matrixSS)
vnl_matrixSS.flatten_row_major = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_flatten_row_major, None, vnl_matrixSS)
vnl_matrixSS.flatten_column_major = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_flatten_column_major, None, vnl_matrixSS)
vnl_matrixSS.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_set_identity, None, vnl_matrixSS)
vnl_matrixSS.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_inplace_transpose, None, vnl_matrixSS)
vnl_matrixSS.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_flipud, None, vnl_matrixSS)
vnl_matrixSS.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_fliplr, None, vnl_matrixSS)
vnl_matrixSS.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_normalize_rows, None, vnl_matrixSS)
vnl_matrixSS.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_normalize_columns, None, vnl_matrixSS)
vnl_matrixSS.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_scale_row, None, vnl_matrixSS)
vnl_matrixSS.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_scale_column, None, vnl_matrixSS)
vnl_matrixSS.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_swap, None, vnl_matrixSS)
vnl_matrixSS.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_array_one_norm, None, vnl_matrixSS)
vnl_matrixSS.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_array_two_norm, None, vnl_matrixSS)
vnl_matrixSS.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_array_inf_norm, None, vnl_matrixSS)
vnl_matrixSS.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_absolute_value_sum, None, vnl_matrixSS)
vnl_matrixSS.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_absolute_value_max, None, vnl_matrixSS)
vnl_matrixSS.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_operator_one_norm, None, vnl_matrixSS)
vnl_matrixSS.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_operator_inf_norm, None, vnl_matrixSS)
vnl_matrixSS.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_frobenius_norm, None, vnl_matrixSS)
vnl_matrixSS.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_fro_norm, None, vnl_matrixSS)
vnl_matrixSS.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_rms, None, vnl_matrixSS)
vnl_matrixSS.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_min_value, None, vnl_matrixSS)
vnl_matrixSS.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_max_value, None, vnl_matrixSS)
vnl_matrixSS.arg_min = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_arg_min, None, vnl_matrixSS)
vnl_matrixSS.arg_max = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_arg_max, None, vnl_matrixSS)
vnl_matrixSS.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_mean, None, vnl_matrixSS)
vnl_matrixSS.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_empty, None, vnl_matrixSS)
vnl_matrixSS.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_is_identity, None, vnl_matrixSS)
vnl_matrixSS.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_is_zero, None, vnl_matrixSS)
vnl_matrixSS.is_equal = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_is_equal, None, vnl_matrixSS)
vnl_matrixSS.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_is_finite, None, vnl_matrixSS)
vnl_matrixSS.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_has_nans, None, vnl_matrixSS)
vnl_matrixSS.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_assert_size, None, vnl_matrixSS)
vnl_matrixSS.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_assert_finite, None, vnl_matrixSS)
vnl_matrixSS.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_read_ascii, None, vnl_matrixSS)
vnl_matrixSS.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_data_block, None, vnl_matrixSS)
vnl_matrixSS.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_data_array, None, vnl_matrixSS)
vnl_matrixSS.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_begin, None, vnl_matrixSS)
vnl_matrixSS.end = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_end, None, vnl_matrixSS)
vnl_matrixSS.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_operator_eq, None, vnl_matrixSS)
vnl_matrixSS.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSS___eq__, None, vnl_matrixSS)
vnl_matrixSS.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSS___ne__, None, vnl_matrixSS)
vnl_matrixSS._print = new_instancemethod(_vnl_matrixPython.vnl_matrixSS__print, None, vnl_matrixSS)
vnl_matrixSS.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_clear, None, vnl_matrixSS)
vnl_matrixSS.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSS_set_size, None, vnl_matrixSS)
vnl_matrixSS_swigregister = _vnl_matrixPython.vnl_matrixSS_swigregister
vnl_matrixSS_swigregister(vnl_matrixSS)

def vnl_matrixSS_read(s: 'istream') -> "vnl_matrixSS":
    """vnl_matrixSS_read(istream s) -> vnl_matrixSS"""
    return _vnl_matrixPython.vnl_matrixSS_read(s)

class vnl_matrixUC(object):
    """Proxy of C++ vnl_matrixUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_matrixUC self) -> vnl_matrixUC
        __init__(vnl_matrixUC self, unsigned int r, unsigned int c) -> vnl_matrixUC
        __init__(vnl_matrixUC self, unsigned int r, unsigned int c, unsigned char const & v0) -> vnl_matrixUC
        __init__(vnl_matrixUC self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixUC
        __init__(vnl_matrixUC self, unsigned int r, unsigned int c, unsigned int n, unsigned char const * values) -> vnl_matrixUC
        __init__(vnl_matrixUC self, unsigned char const * data_block, unsigned int r, unsigned int c) -> vnl_matrixUC
        __init__(vnl_matrixUC self, vnl_matrixUC arg0) -> vnl_matrixUC
        __init__(vnl_matrixUC self, vnl_matrixUC arg0, vnl_matrixUC arg1, vnl_tag_add arg2) -> vnl_matrixUC
        __init__(vnl_matrixUC self, vnl_matrixUC arg0, vnl_matrixUC arg1, vnl_tag_sub arg2) -> vnl_matrixUC
        __init__(vnl_matrixUC self, vnl_matrixUC arg0, unsigned char arg1, vnl_tag_mul arg2) -> vnl_matrixUC
        __init__(vnl_matrixUC self, vnl_matrixUC arg0, unsigned char arg1, vnl_tag_div arg2) -> vnl_matrixUC
        __init__(vnl_matrixUC self, vnl_matrixUC arg0, unsigned char arg1, vnl_tag_add arg2) -> vnl_matrixUC
        __init__(vnl_matrixUC self, vnl_matrixUC arg0, unsigned char arg1, vnl_tag_sub arg2) -> vnl_matrixUC
        __init__(vnl_matrixUC self, vnl_matrixUC arg0, vnl_matrixUC arg1, vnl_tag_mul arg2) -> vnl_matrixUC
        __init__(vnl_matrixUC self, vnl_matrixUC that, vnl_tag_grab arg1) -> vnl_matrixUC
        """
        _vnl_matrixPython.vnl_matrixUC_swiginit(self, _vnl_matrixPython.new_vnl_matrixUC(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixUC

    def size(self) -> "unsigned int":
        """size(vnl_matrixUC self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUC_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrixUC self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUC_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrixUC self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUC_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrixUC self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUC_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', arg2: 'unsigned char const &') -> "void":
        """put(vnl_matrixUC self, unsigned int r, unsigned int c, unsigned char const & arg2)"""
        return _vnl_matrixPython.vnl_matrixUC_put(self, r, c, arg2)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "unsigned char":
        """get(vnl_matrixUC self, unsigned int r, unsigned int c) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_get(self, r, c)


    def __call__(self, *args) -> "unsigned char const &":
        """
        __call__(vnl_matrixUC self, unsigned int r, unsigned int c) -> unsigned char
        __call__(vnl_matrixUC self, unsigned int r, unsigned int c) -> unsigned char const &
        """
        return _vnl_matrixPython.vnl_matrixUC___call__(self, *args)


    def fill(self, arg0: 'unsigned char const &') -> "vnl_matrixUC &":
        """fill(vnl_matrixUC self, unsigned char const & arg0) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_fill(self, arg0)


    def fill_diagonal(self, arg0: 'unsigned char const &') -> "vnl_matrixUC &":
        """fill_diagonal(vnl_matrixUC self, unsigned char const & arg0) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorUC') -> "vnl_matrixUC &":
        """set_diagonal(vnl_matrixUC self, vnl_vectorUC arg0) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'unsigned char const *') -> "vnl_matrixUC &":
        """copy_in(vnl_matrixUC self, unsigned char const * arg0) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_copy_in(self, arg0)


    def set(self, d: 'unsigned char const *') -> "vnl_matrixUC &":
        """set(vnl_matrixUC self, unsigned char const * d) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_set(self, d)


    def copy_out(self, arg0: 'unsigned char *') -> "void":
        """copy_out(vnl_matrixUC self, unsigned char * arg0)"""
        return _vnl_matrixPython.vnl_matrixUC_copy_out(self, arg0)


    def __idiv__(self, value: 'unsigned char') -> "vnl_matrixUC &":
        """__idiv__(vnl_matrixUC self, unsigned char value) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC___idiv__(self, value)


    def __iadd__(self, *args) -> "vnl_matrixUC &":
        """
        __iadd__(vnl_matrixUC self, unsigned char value) -> vnl_matrixUC
        __iadd__(vnl_matrixUC self, vnl_matrixUC arg0) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrixUC &":
        """
        __isub__(vnl_matrixUC self, unsigned char value) -> vnl_matrixUC
        __isub__(vnl_matrixUC self, vnl_matrixUC arg0) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC___isub__(self, *args)


    def __imul__(self, *args) -> "vnl_matrixUC &":
        """
        __imul__(vnl_matrixUC self, unsigned char value) -> vnl_matrixUC
        __imul__(vnl_matrixUC self, vnl_matrixUC rhs) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC___imul__(self, *args)


    def __neg__(self) -> "vnl_matrixUC":
        """__neg__(vnl_matrixUC self) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC___neg__(self)


    def __div__(self, v: 'unsigned char const &') -> "vnl_matrixUC":
        """__div__(vnl_matrixUC self, unsigned char const & v) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC___div__(self, v)


    def __add__(self, *args) -> "vnl_matrixUC":
        """
        __add__(vnl_matrixUC self, unsigned char const & v) -> vnl_matrixUC
        __add__(vnl_matrixUC self, vnl_matrixUC rhs) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC___add__(self, *args)


    def __sub__(self, *args) -> "vnl_matrixUC":
        """
        __sub__(vnl_matrixUC self, unsigned char const & v) -> vnl_matrixUC
        __sub__(vnl_matrixUC self, vnl_matrixUC rhs) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_matrixUC":
        """
        __mul__(vnl_matrixUC self, unsigned char const & v) -> vnl_matrixUC
        __mul__(vnl_matrixUC self, vnl_matrixUC rhs) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC___mul__(self, *args)


    def transpose(self) -> "vnl_matrixUC":
        """transpose(vnl_matrixUC self) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrixUC":
        """conjugate_transpose(vnl_matrixUC self) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixUC', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrixUC &":
        """
        update(vnl_matrixUC self, vnl_matrixUC arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrixUC
        update(vnl_matrixUC self, vnl_matrixUC arg0, unsigned int top=0) -> vnl_matrixUC
        update(vnl_matrixUC self, vnl_matrixUC arg0) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrixUC &":
        """
        set_column(vnl_matrixUC self, unsigned int i, unsigned char const * v) -> vnl_matrixUC
        set_column(vnl_matrixUC self, unsigned int i, unsigned char value) -> vnl_matrixUC
        set_column(vnl_matrixUC self, unsigned int j, vnl_vectorUC v) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixUC') -> "vnl_matrixUC &":
        """set_columns(vnl_matrixUC self, unsigned int starting_column, vnl_matrixUC M) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrixUC &":
        """
        set_row(vnl_matrixUC self, unsigned int i, unsigned char const * v) -> vnl_matrixUC
        set_row(vnl_matrixUC self, unsigned int i, unsigned char value) -> vnl_matrixUC
        set_row(vnl_matrixUC self, unsigned int i, vnl_vectorUC arg1) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrixUC self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixUC
        extract(vnl_matrixUC self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixUC
        extract(vnl_matrixUC self, unsigned int r, unsigned int c) -> vnl_matrixUC
        extract(vnl_matrixUC self, vnl_matrixUC sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrixUC self, vnl_matrixUC sub_matrix, unsigned int top=0)
        extract(vnl_matrixUC self, vnl_matrixUC sub_matrix)
        """
        return _vnl_matrixPython.vnl_matrixUC_extract(self, *args)


    def get_row(self, r: 'unsigned int') -> "vnl_vectorUC":
        """get_row(vnl_matrixUC self, unsigned int r) -> vnl_vectorUC"""
        return _vnl_matrixPython.vnl_matrixUC_get_row(self, r)


    def get_column(self, c: 'unsigned int') -> "vnl_vectorUC":
        """get_column(vnl_matrixUC self, unsigned int c) -> vnl_vectorUC"""
        return _vnl_matrixPython.vnl_matrixUC_get_column(self, c)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixUC":
        """get_rows(vnl_matrixUC self, vnl_vectorUI i) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixUC":
        """get_columns(vnl_matrixUC self, vnl_vectorUI i) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixUC":
        """get_n_rows(vnl_matrixUC self, unsigned int rowstart, unsigned int n) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixUC":
        """get_n_columns(vnl_matrixUC self, unsigned int colstart, unsigned int n) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorUC":
        """get_diagonal(vnl_matrixUC self) -> vnl_vectorUC"""
        return _vnl_matrixPython.vnl_matrixUC_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vectorUC":
        """flatten_row_major(vnl_matrixUC self) -> vnl_vectorUC"""
        return _vnl_matrixPython.vnl_matrixUC_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vectorUC":
        """flatten_column_major(vnl_matrixUC self) -> vnl_vectorUC"""
        return _vnl_matrixPython.vnl_matrixUC_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrixUC &":
        """set_identity(vnl_matrixUC self) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_set_identity(self)


    def inplace_transpose(self) -> "vnl_matrixUC &":
        """inplace_transpose(vnl_matrixUC self) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_inplace_transpose(self)


    def flipud(self) -> "vnl_matrixUC &":
        """flipud(vnl_matrixUC self) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_flipud(self)


    def fliplr(self) -> "vnl_matrixUC &":
        """fliplr(vnl_matrixUC self) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_fliplr(self)


    def normalize_rows(self) -> "vnl_matrixUC &":
        """normalize_rows(vnl_matrixUC self) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrixUC &":
        """normalize_columns(vnl_matrixUC self) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'unsigned char') -> "vnl_matrixUC &":
        """scale_row(vnl_matrixUC self, unsigned int row, unsigned char value) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'unsigned char') -> "vnl_matrixUC &":
        """scale_column(vnl_matrixUC self, unsigned int col, unsigned char value) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrixUC') -> "void":
        """swap(vnl_matrixUC self, vnl_matrixUC that)"""
        return _vnl_matrixPython.vnl_matrixUC_swap(self, that)


    def array_one_norm(self) -> "unsigned char":
        """array_one_norm(vnl_matrixUC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_array_one_norm(self)


    def array_two_norm(self) -> "unsigned char":
        """array_two_norm(vnl_matrixUC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_array_two_norm(self)


    def array_inf_norm(self) -> "unsigned char":
        """array_inf_norm(vnl_matrixUC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_array_inf_norm(self)


    def absolute_value_sum(self) -> "unsigned char":
        """absolute_value_sum(vnl_matrixUC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_absolute_value_sum(self)


    def absolute_value_max(self) -> "unsigned char":
        """absolute_value_max(vnl_matrixUC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_absolute_value_max(self)


    def operator_one_norm(self) -> "unsigned char":
        """operator_one_norm(vnl_matrixUC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_operator_one_norm(self)


    def operator_inf_norm(self) -> "unsigned char":
        """operator_inf_norm(vnl_matrixUC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_operator_inf_norm(self)


    def frobenius_norm(self) -> "unsigned char":
        """frobenius_norm(vnl_matrixUC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_frobenius_norm(self)


    def fro_norm(self) -> "unsigned char":
        """fro_norm(vnl_matrixUC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_fro_norm(self)


    def rms(self) -> "unsigned char":
        """rms(vnl_matrixUC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_rms(self)


    def min_value(self) -> "unsigned char":
        """min_value(vnl_matrixUC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_min_value(self)


    def max_value(self) -> "unsigned char":
        """max_value(vnl_matrixUC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrixUC self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUC_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrixUC self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUC_arg_max(self)


    def mean(self) -> "unsigned char":
        """mean(vnl_matrixUC self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrixUC self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrixUC self) -> bool
        is_identity(vnl_matrixUC self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixUC_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrixUC self) -> bool
        is_zero(vnl_matrixUC self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixUC_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrixUC', tol: 'double') -> "bool":
        """is_equal(vnl_matrixUC self, vnl_matrixUC rhs, double tol) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrixUC self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrixUC self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC_has_nans(self)


    def assert_size(self, r: 'unsigned int', c: 'unsigned int') -> "void":
        """assert_size(vnl_matrixUC self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixUC_assert_size(self, r, c)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrixUC self)"""
        return _vnl_matrixPython.vnl_matrixUC_assert_finite(self)


    def read(s: 'istream') -> "vnl_matrixUC":
        """read(istream s) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_read(s)

    read = staticmethod(read)

    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrixUC self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC_read_ascii(self, s)


    def data_block(self, *args) -> "unsigned char *":
        """
        data_block(vnl_matrixUC self) -> unsigned char const
        data_block(vnl_matrixUC self) -> unsigned char *
        """
        return _vnl_matrixPython.vnl_matrixUC_data_block(self, *args)


    def data_array(self, *args) -> "unsigned char **":
        """
        data_array(vnl_matrixUC self) -> unsigned char const
        data_array(vnl_matrixUC self) -> unsigned char **
        """
        return _vnl_matrixPython.vnl_matrixUC_data_array(self, *args)


    def begin(self, *args) -> "unsigned char const *":
        """
        begin(vnl_matrixUC self) -> unsigned char
        begin(vnl_matrixUC self) -> unsigned char const *
        """
        return _vnl_matrixPython.vnl_matrixUC_begin(self, *args)


    def end(self, *args) -> "unsigned char const *":
        """
        end(vnl_matrixUC self) -> unsigned char
        end(vnl_matrixUC self) -> unsigned char const *
        """
        return _vnl_matrixPython.vnl_matrixUC_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrixUC') -> "bool":
        """operator_eq(vnl_matrixUC self, vnl_matrixUC rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC_operator_eq(self, rhs)


    def __eq__(self, that: 'vnl_matrixUC') -> "bool":
        """__eq__(vnl_matrixUC self, vnl_matrixUC that) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC___eq__(self, that)


    def __ne__(self, that: 'vnl_matrixUC') -> "bool":
        """__ne__(vnl_matrixUC self, vnl_matrixUC that) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC___ne__(self, that)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrixUC self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixUC__print(self, os)


    def clear(self) -> "void":
        """clear(vnl_matrixUC self)"""
        return _vnl_matrixPython.vnl_matrixUC_clear(self)


    def set_size(self, r: 'unsigned int', c: 'unsigned int') -> "bool":
        """set_size(vnl_matrixUC self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC_set_size(self, r, c)

vnl_matrixUC.size = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_size, None, vnl_matrixUC)
vnl_matrixUC.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_rows, None, vnl_matrixUC)
vnl_matrixUC.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_cols, None, vnl_matrixUC)
vnl_matrixUC.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_columns, None, vnl_matrixUC)
vnl_matrixUC.put = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_put, None, vnl_matrixUC)
vnl_matrixUC.get = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_get, None, vnl_matrixUC)
vnl_matrixUC.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___call__, None, vnl_matrixUC)
vnl_matrixUC.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_fill, None, vnl_matrixUC)
vnl_matrixUC.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_fill_diagonal, None, vnl_matrixUC)
vnl_matrixUC.set_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_set_diagonal, None, vnl_matrixUC)
vnl_matrixUC.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_copy_in, None, vnl_matrixUC)
vnl_matrixUC.set = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_set, None, vnl_matrixUC)
vnl_matrixUC.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_copy_out, None, vnl_matrixUC)
vnl_matrixUC.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___idiv__, None, vnl_matrixUC)
vnl_matrixUC.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___iadd__, None, vnl_matrixUC)
vnl_matrixUC.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___isub__, None, vnl_matrixUC)
vnl_matrixUC.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___imul__, None, vnl_matrixUC)
vnl_matrixUC.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___neg__, None, vnl_matrixUC)
vnl_matrixUC.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___div__, None, vnl_matrixUC)
vnl_matrixUC.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___add__, None, vnl_matrixUC)
vnl_matrixUC.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___sub__, None, vnl_matrixUC)
vnl_matrixUC.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___mul__, None, vnl_matrixUC)
vnl_matrixUC.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_transpose, None, vnl_matrixUC)
vnl_matrixUC.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_conjugate_transpose, None, vnl_matrixUC)
vnl_matrixUC.update = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_update, None, vnl_matrixUC)
vnl_matrixUC.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_set_column, None, vnl_matrixUC)
vnl_matrixUC.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_set_columns, None, vnl_matrixUC)
vnl_matrixUC.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_set_row, None, vnl_matrixUC)
vnl_matrixUC.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_extract, None, vnl_matrixUC)
vnl_matrixUC.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_get_row, None, vnl_matrixUC)
vnl_matrixUC.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_get_column, None, vnl_matrixUC)
vnl_matrixUC.get_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_get_rows, None, vnl_matrixUC)
vnl_matrixUC.get_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_get_columns, None, vnl_matrixUC)
vnl_matrixUC.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_get_n_rows, None, vnl_matrixUC)
vnl_matrixUC.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_get_n_columns, None, vnl_matrixUC)
vnl_matrixUC.get_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_get_diagonal, None, vnl_matrixUC)
vnl_matrixUC.flatten_row_major = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_flatten_row_major, None, vnl_matrixUC)
vnl_matrixUC.flatten_column_major = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_flatten_column_major, None, vnl_matrixUC)
vnl_matrixUC.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_set_identity, None, vnl_matrixUC)
vnl_matrixUC.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_inplace_transpose, None, vnl_matrixUC)
vnl_matrixUC.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_flipud, None, vnl_matrixUC)
vnl_matrixUC.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_fliplr, None, vnl_matrixUC)
vnl_matrixUC.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_normalize_rows, None, vnl_matrixUC)
vnl_matrixUC.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_normalize_columns, None, vnl_matrixUC)
vnl_matrixUC.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_scale_row, None, vnl_matrixUC)
vnl_matrixUC.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_scale_column, None, vnl_matrixUC)
vnl_matrixUC.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_swap, None, vnl_matrixUC)
vnl_matrixUC.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_array_one_norm, None, vnl_matrixUC)
vnl_matrixUC.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_array_two_norm, None, vnl_matrixUC)
vnl_matrixUC.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_array_inf_norm, None, vnl_matrixUC)
vnl_matrixUC.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_absolute_value_sum, None, vnl_matrixUC)
vnl_matrixUC.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_absolute_value_max, None, vnl_matrixUC)
vnl_matrixUC.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_operator_one_norm, None, vnl_matrixUC)
vnl_matrixUC.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_operator_inf_norm, None, vnl_matrixUC)
vnl_matrixUC.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_frobenius_norm, None, vnl_matrixUC)
vnl_matrixUC.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_fro_norm, None, vnl_matrixUC)
vnl_matrixUC.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_rms, None, vnl_matrixUC)
vnl_matrixUC.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_min_value, None, vnl_matrixUC)
vnl_matrixUC.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_max_value, None, vnl_matrixUC)
vnl_matrixUC.arg_min = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_arg_min, None, vnl_matrixUC)
vnl_matrixUC.arg_max = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_arg_max, None, vnl_matrixUC)
vnl_matrixUC.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_mean, None, vnl_matrixUC)
vnl_matrixUC.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_empty, None, vnl_matrixUC)
vnl_matrixUC.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_is_identity, None, vnl_matrixUC)
vnl_matrixUC.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_is_zero, None, vnl_matrixUC)
vnl_matrixUC.is_equal = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_is_equal, None, vnl_matrixUC)
vnl_matrixUC.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_is_finite, None, vnl_matrixUC)
vnl_matrixUC.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_has_nans, None, vnl_matrixUC)
vnl_matrixUC.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_assert_size, None, vnl_matrixUC)
vnl_matrixUC.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_assert_finite, None, vnl_matrixUC)
vnl_matrixUC.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_read_ascii, None, vnl_matrixUC)
vnl_matrixUC.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_data_block, None, vnl_matrixUC)
vnl_matrixUC.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_data_array, None, vnl_matrixUC)
vnl_matrixUC.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_begin, None, vnl_matrixUC)
vnl_matrixUC.end = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_end, None, vnl_matrixUC)
vnl_matrixUC.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_operator_eq, None, vnl_matrixUC)
vnl_matrixUC.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___eq__, None, vnl_matrixUC)
vnl_matrixUC.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___ne__, None, vnl_matrixUC)
vnl_matrixUC._print = new_instancemethod(_vnl_matrixPython.vnl_matrixUC__print, None, vnl_matrixUC)
vnl_matrixUC.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_clear, None, vnl_matrixUC)
vnl_matrixUC.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_set_size, None, vnl_matrixUC)
vnl_matrixUC_swigregister = _vnl_matrixPython.vnl_matrixUC_swigregister
vnl_matrixUC_swigregister(vnl_matrixUC)

def vnl_matrixUC_read(s: 'istream') -> "vnl_matrixUC":
    """vnl_matrixUC_read(istream s) -> vnl_matrixUC"""
    return _vnl_matrixPython.vnl_matrixUC_read(s)

class vnl_matrixUI(object):
    """Proxy of C++ vnl_matrixUI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_matrixUI self) -> vnl_matrixUI
        __init__(vnl_matrixUI self, unsigned int r, unsigned int c) -> vnl_matrixUI
        __init__(vnl_matrixUI self, unsigned int r, unsigned int c, unsigned int const & v0) -> vnl_matrixUI
        __init__(vnl_matrixUI self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixUI
        __init__(vnl_matrixUI self, unsigned int r, unsigned int c, unsigned int n, unsigned int const * values) -> vnl_matrixUI
        __init__(vnl_matrixUI self, unsigned int const * data_block, unsigned int r, unsigned int c) -> vnl_matrixUI
        __init__(vnl_matrixUI self, vnl_matrixUI arg0) -> vnl_matrixUI
        __init__(vnl_matrixUI self, vnl_matrixUI arg0, vnl_matrixUI arg1, vnl_tag_add arg2) -> vnl_matrixUI
        __init__(vnl_matrixUI self, vnl_matrixUI arg0, vnl_matrixUI arg1, vnl_tag_sub arg2) -> vnl_matrixUI
        __init__(vnl_matrixUI self, vnl_matrixUI arg0, unsigned int arg1, vnl_tag_mul arg2) -> vnl_matrixUI
        __init__(vnl_matrixUI self, vnl_matrixUI arg0, unsigned int arg1, vnl_tag_div arg2) -> vnl_matrixUI
        __init__(vnl_matrixUI self, vnl_matrixUI arg0, unsigned int arg1, vnl_tag_add arg2) -> vnl_matrixUI
        __init__(vnl_matrixUI self, vnl_matrixUI arg0, unsigned int arg1, vnl_tag_sub arg2) -> vnl_matrixUI
        __init__(vnl_matrixUI self, vnl_matrixUI arg0, vnl_matrixUI arg1, vnl_tag_mul arg2) -> vnl_matrixUI
        __init__(vnl_matrixUI self, vnl_matrixUI that, vnl_tag_grab arg1) -> vnl_matrixUI
        """
        _vnl_matrixPython.vnl_matrixUI_swiginit(self, _vnl_matrixPython.new_vnl_matrixUI(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixUI

    def size(self) -> "unsigned int":
        """size(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', arg2: 'unsigned int const &') -> "void":
        """put(vnl_matrixUI self, unsigned int r, unsigned int c, unsigned int const & arg2)"""
        return _vnl_matrixPython.vnl_matrixUI_put(self, r, c, arg2)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "unsigned int":
        """get(vnl_matrixUI self, unsigned int r, unsigned int c) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_get(self, r, c)


    def __call__(self, *args) -> "unsigned int const &":
        """
        __call__(vnl_matrixUI self, unsigned int r, unsigned int c) -> unsigned int
        __call__(vnl_matrixUI self, unsigned int r, unsigned int c) -> unsigned int const &
        """
        return _vnl_matrixPython.vnl_matrixUI___call__(self, *args)


    def fill(self, arg0: 'unsigned int const &') -> "vnl_matrixUI &":
        """fill(vnl_matrixUI self, unsigned int const & arg0) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_fill(self, arg0)


    def fill_diagonal(self, arg0: 'unsigned int const &') -> "vnl_matrixUI &":
        """fill_diagonal(vnl_matrixUI self, unsigned int const & arg0) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorUI') -> "vnl_matrixUI &":
        """set_diagonal(vnl_matrixUI self, vnl_vectorUI arg0) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'unsigned int const *') -> "vnl_matrixUI &":
        """copy_in(vnl_matrixUI self, unsigned int const * arg0) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_copy_in(self, arg0)


    def set(self, d: 'unsigned int const *') -> "vnl_matrixUI &":
        """set(vnl_matrixUI self, unsigned int const * d) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_set(self, d)


    def copy_out(self, arg0: 'unsigned int *') -> "void":
        """copy_out(vnl_matrixUI self, unsigned int * arg0)"""
        return _vnl_matrixPython.vnl_matrixUI_copy_out(self, arg0)


    def __idiv__(self, value: 'unsigned int') -> "vnl_matrixUI &":
        """__idiv__(vnl_matrixUI self, unsigned int value) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI___idiv__(self, value)


    def __iadd__(self, *args) -> "vnl_matrixUI &":
        """
        __iadd__(vnl_matrixUI self, unsigned int value) -> vnl_matrixUI
        __iadd__(vnl_matrixUI self, vnl_matrixUI arg0) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrixUI &":
        """
        __isub__(vnl_matrixUI self, unsigned int value) -> vnl_matrixUI
        __isub__(vnl_matrixUI self, vnl_matrixUI arg0) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI___isub__(self, *args)


    def __imul__(self, *args) -> "vnl_matrixUI &":
        """
        __imul__(vnl_matrixUI self, unsigned int value) -> vnl_matrixUI
        __imul__(vnl_matrixUI self, vnl_matrixUI rhs) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI___imul__(self, *args)


    def __neg__(self) -> "vnl_matrixUI":
        """__neg__(vnl_matrixUI self) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI___neg__(self)


    def __div__(self, v: 'unsigned int const &') -> "vnl_matrixUI":
        """__div__(vnl_matrixUI self, unsigned int const & v) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI___div__(self, v)


    def __add__(self, *args) -> "vnl_matrixUI":
        """
        __add__(vnl_matrixUI self, unsigned int const & v) -> vnl_matrixUI
        __add__(vnl_matrixUI self, vnl_matrixUI rhs) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI___add__(self, *args)


    def __sub__(self, *args) -> "vnl_matrixUI":
        """
        __sub__(vnl_matrixUI self, unsigned int const & v) -> vnl_matrixUI
        __sub__(vnl_matrixUI self, vnl_matrixUI rhs) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_matrixUI":
        """
        __mul__(vnl_matrixUI self, unsigned int const & v) -> vnl_matrixUI
        __mul__(vnl_matrixUI self, vnl_matrixUI rhs) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI___mul__(self, *args)


    def transpose(self) -> "vnl_matrixUI":
        """transpose(vnl_matrixUI self) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrixUI":
        """conjugate_transpose(vnl_matrixUI self) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixUI', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrixUI &":
        """
        update(vnl_matrixUI self, vnl_matrixUI arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrixUI
        update(vnl_matrixUI self, vnl_matrixUI arg0, unsigned int top=0) -> vnl_matrixUI
        update(vnl_matrixUI self, vnl_matrixUI arg0) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrixUI &":
        """
        set_column(vnl_matrixUI self, unsigned int i, unsigned int const * v) -> vnl_matrixUI
        set_column(vnl_matrixUI self, unsigned int i, unsigned int value) -> vnl_matrixUI
        set_column(vnl_matrixUI self, unsigned int j, vnl_vectorUI v) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixUI') -> "vnl_matrixUI &":
        """set_columns(vnl_matrixUI self, unsigned int starting_column, vnl_matrixUI M) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrixUI &":
        """
        set_row(vnl_matrixUI self, unsigned int i, unsigned int const * v) -> vnl_matrixUI
        set_row(vnl_matrixUI self, unsigned int i, unsigned int value) -> vnl_matrixUI
        set_row(vnl_matrixUI self, unsigned int i, vnl_vectorUI arg1) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrixUI self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixUI
        extract(vnl_matrixUI self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixUI
        extract(vnl_matrixUI self, unsigned int r, unsigned int c) -> vnl_matrixUI
        extract(vnl_matrixUI self, vnl_matrixUI sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrixUI self, vnl_matrixUI sub_matrix, unsigned int top=0)
        extract(vnl_matrixUI self, vnl_matrixUI sub_matrix)
        """
        return _vnl_matrixPython.vnl_matrixUI_extract(self, *args)


    def get_row(self, r: 'unsigned int') -> "vnl_vectorUI":
        """get_row(vnl_matrixUI self, unsigned int r) -> vnl_vectorUI"""
        return _vnl_matrixPython.vnl_matrixUI_get_row(self, r)


    def get_column(self, c: 'unsigned int') -> "vnl_vectorUI":
        """get_column(vnl_matrixUI self, unsigned int c) -> vnl_vectorUI"""
        return _vnl_matrixPython.vnl_matrixUI_get_column(self, c)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixUI":
        """get_rows(vnl_matrixUI self, vnl_vectorUI i) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixUI":
        """get_columns(vnl_matrixUI self, vnl_vectorUI i) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixUI":
        """get_n_rows(vnl_matrixUI self, unsigned int rowstart, unsigned int n) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixUI":
        """get_n_columns(vnl_matrixUI self, unsigned int colstart, unsigned int n) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorUI":
        """get_diagonal(vnl_matrixUI self) -> vnl_vectorUI"""
        return _vnl_matrixPython.vnl_matrixUI_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vectorUI":
        """flatten_row_major(vnl_matrixUI self) -> vnl_vectorUI"""
        return _vnl_matrixPython.vnl_matrixUI_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vectorUI":
        """flatten_column_major(vnl_matrixUI self) -> vnl_vectorUI"""
        return _vnl_matrixPython.vnl_matrixUI_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrixUI &":
        """set_identity(vnl_matrixUI self) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_set_identity(self)


    def inplace_transpose(self) -> "vnl_matrixUI &":
        """inplace_transpose(vnl_matrixUI self) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_inplace_transpose(self)


    def flipud(self) -> "vnl_matrixUI &":
        """flipud(vnl_matrixUI self) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_flipud(self)


    def fliplr(self) -> "vnl_matrixUI &":
        """fliplr(vnl_matrixUI self) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_fliplr(self)


    def normalize_rows(self) -> "vnl_matrixUI &":
        """normalize_rows(vnl_matrixUI self) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrixUI &":
        """normalize_columns(vnl_matrixUI self) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'unsigned int') -> "vnl_matrixUI &":
        """scale_row(vnl_matrixUI self, unsigned int row, unsigned int value) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'unsigned int') -> "vnl_matrixUI &":
        """scale_column(vnl_matrixUI self, unsigned int col, unsigned int value) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrixUI') -> "void":
        """swap(vnl_matrixUI self, vnl_matrixUI that)"""
        return _vnl_matrixPython.vnl_matrixUI_swap(self, that)


    def array_one_norm(self) -> "unsigned int":
        """array_one_norm(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_array_one_norm(self)


    def array_two_norm(self) -> "unsigned int":
        """array_two_norm(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_array_two_norm(self)


    def array_inf_norm(self) -> "unsigned int":
        """array_inf_norm(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_array_inf_norm(self)


    def absolute_value_sum(self) -> "unsigned int":
        """absolute_value_sum(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_absolute_value_sum(self)


    def absolute_value_max(self) -> "unsigned int":
        """absolute_value_max(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_absolute_value_max(self)


    def operator_one_norm(self) -> "unsigned int":
        """operator_one_norm(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_operator_one_norm(self)


    def operator_inf_norm(self) -> "unsigned int":
        """operator_inf_norm(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_operator_inf_norm(self)


    def frobenius_norm(self) -> "unsigned int":
        """frobenius_norm(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_frobenius_norm(self)


    def fro_norm(self) -> "unsigned int":
        """fro_norm(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_fro_norm(self)


    def rms(self) -> "unsigned int":
        """rms(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_rms(self)


    def min_value(self) -> "unsigned int":
        """min_value(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_min_value(self)


    def max_value(self) -> "unsigned int":
        """max_value(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_arg_max(self)


    def mean(self) -> "unsigned int":
        """mean(vnl_matrixUI self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrixUI self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrixUI self) -> bool
        is_identity(vnl_matrixUI self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixUI_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrixUI self) -> bool
        is_zero(vnl_matrixUI self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixUI_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrixUI', tol: 'double') -> "bool":
        """is_equal(vnl_matrixUI self, vnl_matrixUI rhs, double tol) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrixUI self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrixUI self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI_has_nans(self)


    def assert_size(self, r: 'unsigned int', c: 'unsigned int') -> "void":
        """assert_size(vnl_matrixUI self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixUI_assert_size(self, r, c)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrixUI self)"""
        return _vnl_matrixPython.vnl_matrixUI_assert_finite(self)


    def read(s: 'istream') -> "vnl_matrixUI":
        """read(istream s) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_read(s)

    read = staticmethod(read)

    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrixUI self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI_read_ascii(self, s)


    def data_block(self, *args) -> "unsigned int *":
        """
        data_block(vnl_matrixUI self) -> unsigned int const
        data_block(vnl_matrixUI self) -> unsigned int *
        """
        return _vnl_matrixPython.vnl_matrixUI_data_block(self, *args)


    def data_array(self, *args) -> "unsigned int **":
        """
        data_array(vnl_matrixUI self) -> unsigned int const
        data_array(vnl_matrixUI self) -> unsigned int **
        """
        return _vnl_matrixPython.vnl_matrixUI_data_array(self, *args)


    def begin(self, *args) -> "unsigned int const *":
        """
        begin(vnl_matrixUI self) -> unsigned int
        begin(vnl_matrixUI self) -> unsigned int const *
        """
        return _vnl_matrixPython.vnl_matrixUI_begin(self, *args)


    def end(self, *args) -> "unsigned int const *":
        """
        end(vnl_matrixUI self) -> unsigned int
        end(vnl_matrixUI self) -> unsigned int const *
        """
        return _vnl_matrixPython.vnl_matrixUI_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrixUI') -> "bool":
        """operator_eq(vnl_matrixUI self, vnl_matrixUI rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI_operator_eq(self, rhs)


    def __eq__(self, that: 'vnl_matrixUI') -> "bool":
        """__eq__(vnl_matrixUI self, vnl_matrixUI that) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI___eq__(self, that)


    def __ne__(self, that: 'vnl_matrixUI') -> "bool":
        """__ne__(vnl_matrixUI self, vnl_matrixUI that) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI___ne__(self, that)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrixUI self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixUI__print(self, os)


    def clear(self) -> "void":
        """clear(vnl_matrixUI self)"""
        return _vnl_matrixPython.vnl_matrixUI_clear(self)


    def set_size(self, r: 'unsigned int', c: 'unsigned int') -> "bool":
        """set_size(vnl_matrixUI self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI_set_size(self, r, c)

vnl_matrixUI.size = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_size, None, vnl_matrixUI)
vnl_matrixUI.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_rows, None, vnl_matrixUI)
vnl_matrixUI.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_cols, None, vnl_matrixUI)
vnl_matrixUI.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_columns, None, vnl_matrixUI)
vnl_matrixUI.put = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_put, None, vnl_matrixUI)
vnl_matrixUI.get = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_get, None, vnl_matrixUI)
vnl_matrixUI.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___call__, None, vnl_matrixUI)
vnl_matrixUI.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_fill, None, vnl_matrixUI)
vnl_matrixUI.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_fill_diagonal, None, vnl_matrixUI)
vnl_matrixUI.set_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_set_diagonal, None, vnl_matrixUI)
vnl_matrixUI.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_copy_in, None, vnl_matrixUI)
vnl_matrixUI.set = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_set, None, vnl_matrixUI)
vnl_matrixUI.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_copy_out, None, vnl_matrixUI)
vnl_matrixUI.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___idiv__, None, vnl_matrixUI)
vnl_matrixUI.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___iadd__, None, vnl_matrixUI)
vnl_matrixUI.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___isub__, None, vnl_matrixUI)
vnl_matrixUI.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___imul__, None, vnl_matrixUI)
vnl_matrixUI.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___neg__, None, vnl_matrixUI)
vnl_matrixUI.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___div__, None, vnl_matrixUI)
vnl_matrixUI.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___add__, None, vnl_matrixUI)
vnl_matrixUI.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___sub__, None, vnl_matrixUI)
vnl_matrixUI.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___mul__, None, vnl_matrixUI)
vnl_matrixUI.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_transpose, None, vnl_matrixUI)
vnl_matrixUI.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_conjugate_transpose, None, vnl_matrixUI)
vnl_matrixUI.update = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_update, None, vnl_matrixUI)
vnl_matrixUI.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_set_column, None, vnl_matrixUI)
vnl_matrixUI.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_set_columns, None, vnl_matrixUI)
vnl_matrixUI.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_set_row, None, vnl_matrixUI)
vnl_matrixUI.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_extract, None, vnl_matrixUI)
vnl_matrixUI.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_get_row, None, vnl_matrixUI)
vnl_matrixUI.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_get_column, None, vnl_matrixUI)
vnl_matrixUI.get_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_get_rows, None, vnl_matrixUI)
vnl_matrixUI.get_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_get_columns, None, vnl_matrixUI)
vnl_matrixUI.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_get_n_rows, None, vnl_matrixUI)
vnl_matrixUI.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_get_n_columns, None, vnl_matrixUI)
vnl_matrixUI.get_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_get_diagonal, None, vnl_matrixUI)
vnl_matrixUI.flatten_row_major = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_flatten_row_major, None, vnl_matrixUI)
vnl_matrixUI.flatten_column_major = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_flatten_column_major, None, vnl_matrixUI)
vnl_matrixUI.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_set_identity, None, vnl_matrixUI)
vnl_matrixUI.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_inplace_transpose, None, vnl_matrixUI)
vnl_matrixUI.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_flipud, None, vnl_matrixUI)
vnl_matrixUI.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_fliplr, None, vnl_matrixUI)
vnl_matrixUI.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_normalize_rows, None, vnl_matrixUI)
vnl_matrixUI.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_normalize_columns, None, vnl_matrixUI)
vnl_matrixUI.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_scale_row, None, vnl_matrixUI)
vnl_matrixUI.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_scale_column, None, vnl_matrixUI)
vnl_matrixUI.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_swap, None, vnl_matrixUI)
vnl_matrixUI.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_array_one_norm, None, vnl_matrixUI)
vnl_matrixUI.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_array_two_norm, None, vnl_matrixUI)
vnl_matrixUI.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_array_inf_norm, None, vnl_matrixUI)
vnl_matrixUI.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_absolute_value_sum, None, vnl_matrixUI)
vnl_matrixUI.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_absolute_value_max, None, vnl_matrixUI)
vnl_matrixUI.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_operator_one_norm, None, vnl_matrixUI)
vnl_matrixUI.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_operator_inf_norm, None, vnl_matrixUI)
vnl_matrixUI.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_frobenius_norm, None, vnl_matrixUI)
vnl_matrixUI.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_fro_norm, None, vnl_matrixUI)
vnl_matrixUI.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_rms, None, vnl_matrixUI)
vnl_matrixUI.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_min_value, None, vnl_matrixUI)
vnl_matrixUI.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_max_value, None, vnl_matrixUI)
vnl_matrixUI.arg_min = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_arg_min, None, vnl_matrixUI)
vnl_matrixUI.arg_max = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_arg_max, None, vnl_matrixUI)
vnl_matrixUI.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_mean, None, vnl_matrixUI)
vnl_matrixUI.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_empty, None, vnl_matrixUI)
vnl_matrixUI.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_is_identity, None, vnl_matrixUI)
vnl_matrixUI.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_is_zero, None, vnl_matrixUI)
vnl_matrixUI.is_equal = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_is_equal, None, vnl_matrixUI)
vnl_matrixUI.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_is_finite, None, vnl_matrixUI)
vnl_matrixUI.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_has_nans, None, vnl_matrixUI)
vnl_matrixUI.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_assert_size, None, vnl_matrixUI)
vnl_matrixUI.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_assert_finite, None, vnl_matrixUI)
vnl_matrixUI.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_read_ascii, None, vnl_matrixUI)
vnl_matrixUI.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_data_block, None, vnl_matrixUI)
vnl_matrixUI.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_data_array, None, vnl_matrixUI)
vnl_matrixUI.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_begin, None, vnl_matrixUI)
vnl_matrixUI.end = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_end, None, vnl_matrixUI)
vnl_matrixUI.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_operator_eq, None, vnl_matrixUI)
vnl_matrixUI.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___eq__, None, vnl_matrixUI)
vnl_matrixUI.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___ne__, None, vnl_matrixUI)
vnl_matrixUI._print = new_instancemethod(_vnl_matrixPython.vnl_matrixUI__print, None, vnl_matrixUI)
vnl_matrixUI.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_clear, None, vnl_matrixUI)
vnl_matrixUI.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_set_size, None, vnl_matrixUI)
vnl_matrixUI_swigregister = _vnl_matrixPython.vnl_matrixUI_swigregister
vnl_matrixUI_swigregister(vnl_matrixUI)

def vnl_matrixUI_read(s: 'istream') -> "vnl_matrixUI":
    """vnl_matrixUI_read(istream s) -> vnl_matrixUI"""
    return _vnl_matrixPython.vnl_matrixUI_read(s)

class vnl_matrixUL(object):
    """Proxy of C++ vnl_matrixUL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_matrixUL self) -> vnl_matrixUL
        __init__(vnl_matrixUL self, unsigned int r, unsigned int c) -> vnl_matrixUL
        __init__(vnl_matrixUL self, unsigned int r, unsigned int c, unsigned long const & v0) -> vnl_matrixUL
        __init__(vnl_matrixUL self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixUL
        __init__(vnl_matrixUL self, unsigned int r, unsigned int c, unsigned int n, unsigned long const * values) -> vnl_matrixUL
        __init__(vnl_matrixUL self, unsigned long const * data_block, unsigned int r, unsigned int c) -> vnl_matrixUL
        __init__(vnl_matrixUL self, vnl_matrixUL arg0) -> vnl_matrixUL
        __init__(vnl_matrixUL self, vnl_matrixUL arg0, vnl_matrixUL arg1, vnl_tag_add arg2) -> vnl_matrixUL
        __init__(vnl_matrixUL self, vnl_matrixUL arg0, vnl_matrixUL arg1, vnl_tag_sub arg2) -> vnl_matrixUL
        __init__(vnl_matrixUL self, vnl_matrixUL arg0, unsigned long arg1, vnl_tag_mul arg2) -> vnl_matrixUL
        __init__(vnl_matrixUL self, vnl_matrixUL arg0, unsigned long arg1, vnl_tag_div arg2) -> vnl_matrixUL
        __init__(vnl_matrixUL self, vnl_matrixUL arg0, unsigned long arg1, vnl_tag_add arg2) -> vnl_matrixUL
        __init__(vnl_matrixUL self, vnl_matrixUL arg0, unsigned long arg1, vnl_tag_sub arg2) -> vnl_matrixUL
        __init__(vnl_matrixUL self, vnl_matrixUL arg0, vnl_matrixUL arg1, vnl_tag_mul arg2) -> vnl_matrixUL
        __init__(vnl_matrixUL self, vnl_matrixUL that, vnl_tag_grab arg1) -> vnl_matrixUL
        """
        _vnl_matrixPython.vnl_matrixUL_swiginit(self, _vnl_matrixPython.new_vnl_matrixUL(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixUL

    def size(self) -> "unsigned int":
        """size(vnl_matrixUL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUL_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrixUL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUL_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrixUL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUL_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrixUL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUL_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', arg2: 'unsigned long const &') -> "void":
        """put(vnl_matrixUL self, unsigned int r, unsigned int c, unsigned long const & arg2)"""
        return _vnl_matrixPython.vnl_matrixUL_put(self, r, c, arg2)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "unsigned long":
        """get(vnl_matrixUL self, unsigned int r, unsigned int c) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_get(self, r, c)


    def __call__(self, *args) -> "unsigned long const &":
        """
        __call__(vnl_matrixUL self, unsigned int r, unsigned int c) -> unsigned long
        __call__(vnl_matrixUL self, unsigned int r, unsigned int c) -> unsigned long const &
        """
        return _vnl_matrixPython.vnl_matrixUL___call__(self, *args)


    def fill(self, arg0: 'unsigned long const &') -> "vnl_matrixUL &":
        """fill(vnl_matrixUL self, unsigned long const & arg0) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_fill(self, arg0)


    def fill_diagonal(self, arg0: 'unsigned long const &') -> "vnl_matrixUL &":
        """fill_diagonal(vnl_matrixUL self, unsigned long const & arg0) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorUL') -> "vnl_matrixUL &":
        """set_diagonal(vnl_matrixUL self, vnl_vectorUL arg0) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'unsigned long const *') -> "vnl_matrixUL &":
        """copy_in(vnl_matrixUL self, unsigned long const * arg0) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_copy_in(self, arg0)


    def set(self, d: 'unsigned long const *') -> "vnl_matrixUL &":
        """set(vnl_matrixUL self, unsigned long const * d) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_set(self, d)


    def copy_out(self, arg0: 'unsigned long *') -> "void":
        """copy_out(vnl_matrixUL self, unsigned long * arg0)"""
        return _vnl_matrixPython.vnl_matrixUL_copy_out(self, arg0)


    def __idiv__(self, value: 'unsigned long') -> "vnl_matrixUL &":
        """__idiv__(vnl_matrixUL self, unsigned long value) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL___idiv__(self, value)


    def __iadd__(self, *args) -> "vnl_matrixUL &":
        """
        __iadd__(vnl_matrixUL self, unsigned long value) -> vnl_matrixUL
        __iadd__(vnl_matrixUL self, vnl_matrixUL arg0) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrixUL &":
        """
        __isub__(vnl_matrixUL self, unsigned long value) -> vnl_matrixUL
        __isub__(vnl_matrixUL self, vnl_matrixUL arg0) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL___isub__(self, *args)


    def __imul__(self, *args) -> "vnl_matrixUL &":
        """
        __imul__(vnl_matrixUL self, unsigned long value) -> vnl_matrixUL
        __imul__(vnl_matrixUL self, vnl_matrixUL rhs) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL___imul__(self, *args)


    def __neg__(self) -> "vnl_matrixUL":
        """__neg__(vnl_matrixUL self) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL___neg__(self)


    def __div__(self, v: 'unsigned long const &') -> "vnl_matrixUL":
        """__div__(vnl_matrixUL self, unsigned long const & v) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL___div__(self, v)


    def __add__(self, *args) -> "vnl_matrixUL":
        """
        __add__(vnl_matrixUL self, unsigned long const & v) -> vnl_matrixUL
        __add__(vnl_matrixUL self, vnl_matrixUL rhs) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL___add__(self, *args)


    def __sub__(self, *args) -> "vnl_matrixUL":
        """
        __sub__(vnl_matrixUL self, unsigned long const & v) -> vnl_matrixUL
        __sub__(vnl_matrixUL self, vnl_matrixUL rhs) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_matrixUL":
        """
        __mul__(vnl_matrixUL self, unsigned long const & v) -> vnl_matrixUL
        __mul__(vnl_matrixUL self, vnl_matrixUL rhs) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL___mul__(self, *args)


    def transpose(self) -> "vnl_matrixUL":
        """transpose(vnl_matrixUL self) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrixUL":
        """conjugate_transpose(vnl_matrixUL self) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixUL', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrixUL &":
        """
        update(vnl_matrixUL self, vnl_matrixUL arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrixUL
        update(vnl_matrixUL self, vnl_matrixUL arg0, unsigned int top=0) -> vnl_matrixUL
        update(vnl_matrixUL self, vnl_matrixUL arg0) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrixUL &":
        """
        set_column(vnl_matrixUL self, unsigned int i, unsigned long const * v) -> vnl_matrixUL
        set_column(vnl_matrixUL self, unsigned int i, unsigned long value) -> vnl_matrixUL
        set_column(vnl_matrixUL self, unsigned int j, vnl_vectorUL v) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixUL') -> "vnl_matrixUL &":
        """set_columns(vnl_matrixUL self, unsigned int starting_column, vnl_matrixUL M) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrixUL &":
        """
        set_row(vnl_matrixUL self, unsigned int i, unsigned long const * v) -> vnl_matrixUL
        set_row(vnl_matrixUL self, unsigned int i, unsigned long value) -> vnl_matrixUL
        set_row(vnl_matrixUL self, unsigned int i, vnl_vectorUL arg1) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrixUL self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixUL
        extract(vnl_matrixUL self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixUL
        extract(vnl_matrixUL self, unsigned int r, unsigned int c) -> vnl_matrixUL
        extract(vnl_matrixUL self, vnl_matrixUL sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrixUL self, vnl_matrixUL sub_matrix, unsigned int top=0)
        extract(vnl_matrixUL self, vnl_matrixUL sub_matrix)
        """
        return _vnl_matrixPython.vnl_matrixUL_extract(self, *args)


    def get_row(self, r: 'unsigned int') -> "vnl_vectorUL":
        """get_row(vnl_matrixUL self, unsigned int r) -> vnl_vectorUL"""
        return _vnl_matrixPython.vnl_matrixUL_get_row(self, r)


    def get_column(self, c: 'unsigned int') -> "vnl_vectorUL":
        """get_column(vnl_matrixUL self, unsigned int c) -> vnl_vectorUL"""
        return _vnl_matrixPython.vnl_matrixUL_get_column(self, c)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixUL":
        """get_rows(vnl_matrixUL self, vnl_vectorUI i) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixUL":
        """get_columns(vnl_matrixUL self, vnl_vectorUI i) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixUL":
        """get_n_rows(vnl_matrixUL self, unsigned int rowstart, unsigned int n) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixUL":
        """get_n_columns(vnl_matrixUL self, unsigned int colstart, unsigned int n) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorUL":
        """get_diagonal(vnl_matrixUL self) -> vnl_vectorUL"""
        return _vnl_matrixPython.vnl_matrixUL_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vectorUL":
        """flatten_row_major(vnl_matrixUL self) -> vnl_vectorUL"""
        return _vnl_matrixPython.vnl_matrixUL_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vectorUL":
        """flatten_column_major(vnl_matrixUL self) -> vnl_vectorUL"""
        return _vnl_matrixPython.vnl_matrixUL_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrixUL &":
        """set_identity(vnl_matrixUL self) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_set_identity(self)


    def inplace_transpose(self) -> "vnl_matrixUL &":
        """inplace_transpose(vnl_matrixUL self) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_inplace_transpose(self)


    def flipud(self) -> "vnl_matrixUL &":
        """flipud(vnl_matrixUL self) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_flipud(self)


    def fliplr(self) -> "vnl_matrixUL &":
        """fliplr(vnl_matrixUL self) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_fliplr(self)


    def normalize_rows(self) -> "vnl_matrixUL &":
        """normalize_rows(vnl_matrixUL self) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrixUL &":
        """normalize_columns(vnl_matrixUL self) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'unsigned long') -> "vnl_matrixUL &":
        """scale_row(vnl_matrixUL self, unsigned int row, unsigned long value) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'unsigned long') -> "vnl_matrixUL &":
        """scale_column(vnl_matrixUL self, unsigned int col, unsigned long value) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrixUL') -> "void":
        """swap(vnl_matrixUL self, vnl_matrixUL that)"""
        return _vnl_matrixPython.vnl_matrixUL_swap(self, that)


    def array_one_norm(self) -> "unsigned long":
        """array_one_norm(vnl_matrixUL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_array_one_norm(self)


    def array_two_norm(self) -> "unsigned long":
        """array_two_norm(vnl_matrixUL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_array_two_norm(self)


    def array_inf_norm(self) -> "unsigned long":
        """array_inf_norm(vnl_matrixUL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_array_inf_norm(self)


    def absolute_value_sum(self) -> "unsigned long":
        """absolute_value_sum(vnl_matrixUL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_absolute_value_sum(self)


    def absolute_value_max(self) -> "unsigned long":
        """absolute_value_max(vnl_matrixUL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_absolute_value_max(self)


    def operator_one_norm(self) -> "unsigned long":
        """operator_one_norm(vnl_matrixUL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_operator_one_norm(self)


    def operator_inf_norm(self) -> "unsigned long":
        """operator_inf_norm(vnl_matrixUL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_operator_inf_norm(self)


    def frobenius_norm(self) -> "unsigned long":
        """frobenius_norm(vnl_matrixUL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_frobenius_norm(self)


    def fro_norm(self) -> "unsigned long":
        """fro_norm(vnl_matrixUL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_fro_norm(self)


    def rms(self) -> "unsigned long":
        """rms(vnl_matrixUL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_rms(self)


    def min_value(self) -> "unsigned long":
        """min_value(vnl_matrixUL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_min_value(self)


    def max_value(self) -> "unsigned long":
        """max_value(vnl_matrixUL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrixUL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUL_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrixUL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUL_arg_max(self)


    def mean(self) -> "unsigned long":
        """mean(vnl_matrixUL self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrixUL self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrixUL self) -> bool
        is_identity(vnl_matrixUL self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixUL_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrixUL self) -> bool
        is_zero(vnl_matrixUL self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixUL_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrixUL', tol: 'double') -> "bool":
        """is_equal(vnl_matrixUL self, vnl_matrixUL rhs, double tol) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrixUL self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrixUL self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL_has_nans(self)


    def assert_size(self, r: 'unsigned int', c: 'unsigned int') -> "void":
        """assert_size(vnl_matrixUL self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixUL_assert_size(self, r, c)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrixUL self)"""
        return _vnl_matrixPython.vnl_matrixUL_assert_finite(self)


    def read(s: 'istream') -> "vnl_matrixUL":
        """read(istream s) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_read(s)

    read = staticmethod(read)

    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrixUL self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL_read_ascii(self, s)


    def data_block(self, *args) -> "unsigned long *":
        """
        data_block(vnl_matrixUL self) -> unsigned long const
        data_block(vnl_matrixUL self) -> unsigned long *
        """
        return _vnl_matrixPython.vnl_matrixUL_data_block(self, *args)


    def data_array(self, *args) -> "unsigned long **":
        """
        data_array(vnl_matrixUL self) -> unsigned long const
        data_array(vnl_matrixUL self) -> unsigned long **
        """
        return _vnl_matrixPython.vnl_matrixUL_data_array(self, *args)


    def begin(self, *args) -> "unsigned long const *":
        """
        begin(vnl_matrixUL self) -> unsigned long
        begin(vnl_matrixUL self) -> unsigned long const *
        """
        return _vnl_matrixPython.vnl_matrixUL_begin(self, *args)


    def end(self, *args) -> "unsigned long const *":
        """
        end(vnl_matrixUL self) -> unsigned long
        end(vnl_matrixUL self) -> unsigned long const *
        """
        return _vnl_matrixPython.vnl_matrixUL_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrixUL') -> "bool":
        """operator_eq(vnl_matrixUL self, vnl_matrixUL rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL_operator_eq(self, rhs)


    def __eq__(self, that: 'vnl_matrixUL') -> "bool":
        """__eq__(vnl_matrixUL self, vnl_matrixUL that) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL___eq__(self, that)


    def __ne__(self, that: 'vnl_matrixUL') -> "bool":
        """__ne__(vnl_matrixUL self, vnl_matrixUL that) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL___ne__(self, that)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrixUL self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixUL__print(self, os)


    def clear(self) -> "void":
        """clear(vnl_matrixUL self)"""
        return _vnl_matrixPython.vnl_matrixUL_clear(self)


    def set_size(self, r: 'unsigned int', c: 'unsigned int') -> "bool":
        """set_size(vnl_matrixUL self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL_set_size(self, r, c)

vnl_matrixUL.size = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_size, None, vnl_matrixUL)
vnl_matrixUL.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_rows, None, vnl_matrixUL)
vnl_matrixUL.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_cols, None, vnl_matrixUL)
vnl_matrixUL.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_columns, None, vnl_matrixUL)
vnl_matrixUL.put = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_put, None, vnl_matrixUL)
vnl_matrixUL.get = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_get, None, vnl_matrixUL)
vnl_matrixUL.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___call__, None, vnl_matrixUL)
vnl_matrixUL.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_fill, None, vnl_matrixUL)
vnl_matrixUL.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_fill_diagonal, None, vnl_matrixUL)
vnl_matrixUL.set_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_set_diagonal, None, vnl_matrixUL)
vnl_matrixUL.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_copy_in, None, vnl_matrixUL)
vnl_matrixUL.set = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_set, None, vnl_matrixUL)
vnl_matrixUL.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_copy_out, None, vnl_matrixUL)
vnl_matrixUL.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___idiv__, None, vnl_matrixUL)
vnl_matrixUL.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___iadd__, None, vnl_matrixUL)
vnl_matrixUL.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___isub__, None, vnl_matrixUL)
vnl_matrixUL.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___imul__, None, vnl_matrixUL)
vnl_matrixUL.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___neg__, None, vnl_matrixUL)
vnl_matrixUL.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___div__, None, vnl_matrixUL)
vnl_matrixUL.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___add__, None, vnl_matrixUL)
vnl_matrixUL.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___sub__, None, vnl_matrixUL)
vnl_matrixUL.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___mul__, None, vnl_matrixUL)
vnl_matrixUL.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_transpose, None, vnl_matrixUL)
vnl_matrixUL.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_conjugate_transpose, None, vnl_matrixUL)
vnl_matrixUL.update = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_update, None, vnl_matrixUL)
vnl_matrixUL.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_set_column, None, vnl_matrixUL)
vnl_matrixUL.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_set_columns, None, vnl_matrixUL)
vnl_matrixUL.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_set_row, None, vnl_matrixUL)
vnl_matrixUL.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_extract, None, vnl_matrixUL)
vnl_matrixUL.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_get_row, None, vnl_matrixUL)
vnl_matrixUL.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_get_column, None, vnl_matrixUL)
vnl_matrixUL.get_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_get_rows, None, vnl_matrixUL)
vnl_matrixUL.get_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_get_columns, None, vnl_matrixUL)
vnl_matrixUL.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_get_n_rows, None, vnl_matrixUL)
vnl_matrixUL.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_get_n_columns, None, vnl_matrixUL)
vnl_matrixUL.get_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_get_diagonal, None, vnl_matrixUL)
vnl_matrixUL.flatten_row_major = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_flatten_row_major, None, vnl_matrixUL)
vnl_matrixUL.flatten_column_major = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_flatten_column_major, None, vnl_matrixUL)
vnl_matrixUL.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_set_identity, None, vnl_matrixUL)
vnl_matrixUL.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_inplace_transpose, None, vnl_matrixUL)
vnl_matrixUL.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_flipud, None, vnl_matrixUL)
vnl_matrixUL.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_fliplr, None, vnl_matrixUL)
vnl_matrixUL.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_normalize_rows, None, vnl_matrixUL)
vnl_matrixUL.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_normalize_columns, None, vnl_matrixUL)
vnl_matrixUL.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_scale_row, None, vnl_matrixUL)
vnl_matrixUL.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_scale_column, None, vnl_matrixUL)
vnl_matrixUL.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_swap, None, vnl_matrixUL)
vnl_matrixUL.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_array_one_norm, None, vnl_matrixUL)
vnl_matrixUL.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_array_two_norm, None, vnl_matrixUL)
vnl_matrixUL.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_array_inf_norm, None, vnl_matrixUL)
vnl_matrixUL.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_absolute_value_sum, None, vnl_matrixUL)
vnl_matrixUL.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_absolute_value_max, None, vnl_matrixUL)
vnl_matrixUL.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_operator_one_norm, None, vnl_matrixUL)
vnl_matrixUL.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_operator_inf_norm, None, vnl_matrixUL)
vnl_matrixUL.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_frobenius_norm, None, vnl_matrixUL)
vnl_matrixUL.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_fro_norm, None, vnl_matrixUL)
vnl_matrixUL.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_rms, None, vnl_matrixUL)
vnl_matrixUL.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_min_value, None, vnl_matrixUL)
vnl_matrixUL.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_max_value, None, vnl_matrixUL)
vnl_matrixUL.arg_min = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_arg_min, None, vnl_matrixUL)
vnl_matrixUL.arg_max = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_arg_max, None, vnl_matrixUL)
vnl_matrixUL.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_mean, None, vnl_matrixUL)
vnl_matrixUL.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_empty, None, vnl_matrixUL)
vnl_matrixUL.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_is_identity, None, vnl_matrixUL)
vnl_matrixUL.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_is_zero, None, vnl_matrixUL)
vnl_matrixUL.is_equal = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_is_equal, None, vnl_matrixUL)
vnl_matrixUL.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_is_finite, None, vnl_matrixUL)
vnl_matrixUL.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_has_nans, None, vnl_matrixUL)
vnl_matrixUL.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_assert_size, None, vnl_matrixUL)
vnl_matrixUL.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_assert_finite, None, vnl_matrixUL)
vnl_matrixUL.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_read_ascii, None, vnl_matrixUL)
vnl_matrixUL.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_data_block, None, vnl_matrixUL)
vnl_matrixUL.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_data_array, None, vnl_matrixUL)
vnl_matrixUL.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_begin, None, vnl_matrixUL)
vnl_matrixUL.end = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_end, None, vnl_matrixUL)
vnl_matrixUL.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_operator_eq, None, vnl_matrixUL)
vnl_matrixUL.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___eq__, None, vnl_matrixUL)
vnl_matrixUL.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___ne__, None, vnl_matrixUL)
vnl_matrixUL._print = new_instancemethod(_vnl_matrixPython.vnl_matrixUL__print, None, vnl_matrixUL)
vnl_matrixUL.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_clear, None, vnl_matrixUL)
vnl_matrixUL.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_set_size, None, vnl_matrixUL)
vnl_matrixUL_swigregister = _vnl_matrixPython.vnl_matrixUL_swigregister
vnl_matrixUL_swigregister(vnl_matrixUL)

def vnl_matrixUL_read(s: 'istream') -> "vnl_matrixUL":
    """vnl_matrixUL_read(istream s) -> vnl_matrixUL"""
    return _vnl_matrixPython.vnl_matrixUL_read(s)

class vnl_matrixULL(object):
    """Proxy of C++ vnl_matrixULL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_matrixULL self) -> vnl_matrixULL
        __init__(vnl_matrixULL self, unsigned int r, unsigned int c) -> vnl_matrixULL
        __init__(vnl_matrixULL self, unsigned int r, unsigned int c, unsigned long long const & v0) -> vnl_matrixULL
        __init__(vnl_matrixULL self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixULL
        __init__(vnl_matrixULL self, unsigned int r, unsigned int c, unsigned int n, unsigned long long const * values) -> vnl_matrixULL
        __init__(vnl_matrixULL self, unsigned long long const * data_block, unsigned int r, unsigned int c) -> vnl_matrixULL
        __init__(vnl_matrixULL self, vnl_matrixULL arg0) -> vnl_matrixULL
        __init__(vnl_matrixULL self, vnl_matrixULL arg0, vnl_matrixULL arg1, vnl_tag_add arg2) -> vnl_matrixULL
        __init__(vnl_matrixULL self, vnl_matrixULL arg0, vnl_matrixULL arg1, vnl_tag_sub arg2) -> vnl_matrixULL
        __init__(vnl_matrixULL self, vnl_matrixULL arg0, unsigned long long arg1, vnl_tag_mul arg2) -> vnl_matrixULL
        __init__(vnl_matrixULL self, vnl_matrixULL arg0, unsigned long long arg1, vnl_tag_div arg2) -> vnl_matrixULL
        __init__(vnl_matrixULL self, vnl_matrixULL arg0, unsigned long long arg1, vnl_tag_add arg2) -> vnl_matrixULL
        __init__(vnl_matrixULL self, vnl_matrixULL arg0, unsigned long long arg1, vnl_tag_sub arg2) -> vnl_matrixULL
        __init__(vnl_matrixULL self, vnl_matrixULL arg0, vnl_matrixULL arg1, vnl_tag_mul arg2) -> vnl_matrixULL
        __init__(vnl_matrixULL self, vnl_matrixULL that, vnl_tag_grab arg1) -> vnl_matrixULL
        """
        _vnl_matrixPython.vnl_matrixULL_swiginit(self, _vnl_matrixPython.new_vnl_matrixULL(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixULL

    def size(self) -> "unsigned int":
        """size(vnl_matrixULL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixULL_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrixULL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixULL_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrixULL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixULL_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrixULL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixULL_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', arg2: 'unsigned long long const &') -> "void":
        """put(vnl_matrixULL self, unsigned int r, unsigned int c, unsigned long long const & arg2)"""
        return _vnl_matrixPython.vnl_matrixULL_put(self, r, c, arg2)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "unsigned long long":
        """get(vnl_matrixULL self, unsigned int r, unsigned int c) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixULL_get(self, r, c)


    def __call__(self, *args) -> "unsigned long long const &":
        """
        __call__(vnl_matrixULL self, unsigned int r, unsigned int c) -> unsigned long long
        __call__(vnl_matrixULL self, unsigned int r, unsigned int c) -> unsigned long long const &
        """
        return _vnl_matrixPython.vnl_matrixULL___call__(self, *args)


    def fill(self, arg0: 'unsigned long long const &') -> "vnl_matrixULL &":
        """fill(vnl_matrixULL self, unsigned long long const & arg0) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_fill(self, arg0)


    def fill_diagonal(self, arg0: 'unsigned long long const &') -> "vnl_matrixULL &":
        """fill_diagonal(vnl_matrixULL self, unsigned long long const & arg0) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorULL') -> "vnl_matrixULL &":
        """set_diagonal(vnl_matrixULL self, vnl_vectorULL arg0) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'unsigned long long const *') -> "vnl_matrixULL &":
        """copy_in(vnl_matrixULL self, unsigned long long const * arg0) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_copy_in(self, arg0)


    def set(self, d: 'unsigned long long const *') -> "vnl_matrixULL &":
        """set(vnl_matrixULL self, unsigned long long const * d) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_set(self, d)


    def copy_out(self, arg0: 'unsigned long long *') -> "void":
        """copy_out(vnl_matrixULL self, unsigned long long * arg0)"""
        return _vnl_matrixPython.vnl_matrixULL_copy_out(self, arg0)


    def __idiv__(self, value: 'unsigned long long') -> "vnl_matrixULL &":
        """__idiv__(vnl_matrixULL self, unsigned long long value) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL___idiv__(self, value)


    def __iadd__(self, *args) -> "vnl_matrixULL &":
        """
        __iadd__(vnl_matrixULL self, unsigned long long value) -> vnl_matrixULL
        __iadd__(vnl_matrixULL self, vnl_matrixULL arg0) -> vnl_matrixULL
        """
        return _vnl_matrixPython.vnl_matrixULL___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrixULL &":
        """
        __isub__(vnl_matrixULL self, unsigned long long value) -> vnl_matrixULL
        __isub__(vnl_matrixULL self, vnl_matrixULL arg0) -> vnl_matrixULL
        """
        return _vnl_matrixPython.vnl_matrixULL___isub__(self, *args)


    def __imul__(self, *args) -> "vnl_matrixULL &":
        """
        __imul__(vnl_matrixULL self, unsigned long long value) -> vnl_matrixULL
        __imul__(vnl_matrixULL self, vnl_matrixULL rhs) -> vnl_matrixULL
        """
        return _vnl_matrixPython.vnl_matrixULL___imul__(self, *args)


    def __neg__(self) -> "vnl_matrixULL":
        """__neg__(vnl_matrixULL self) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL___neg__(self)


    def __div__(self, v: 'unsigned long long const &') -> "vnl_matrixULL":
        """__div__(vnl_matrixULL self, unsigned long long const & v) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL___div__(self, v)


    def __add__(self, *args) -> "vnl_matrixULL":
        """
        __add__(vnl_matrixULL self, unsigned long long const & v) -> vnl_matrixULL
        __add__(vnl_matrixULL self, vnl_matrixULL rhs) -> vnl_matrixULL
        """
        return _vnl_matrixPython.vnl_matrixULL___add__(self, *args)


    def __sub__(self, *args) -> "vnl_matrixULL":
        """
        __sub__(vnl_matrixULL self, unsigned long long const & v) -> vnl_matrixULL
        __sub__(vnl_matrixULL self, vnl_matrixULL rhs) -> vnl_matrixULL
        """
        return _vnl_matrixPython.vnl_matrixULL___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_matrixULL":
        """
        __mul__(vnl_matrixULL self, unsigned long long const & v) -> vnl_matrixULL
        __mul__(vnl_matrixULL self, vnl_matrixULL rhs) -> vnl_matrixULL
        """
        return _vnl_matrixPython.vnl_matrixULL___mul__(self, *args)


    def transpose(self) -> "vnl_matrixULL":
        """transpose(vnl_matrixULL self) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrixULL":
        """conjugate_transpose(vnl_matrixULL self) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixULL', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrixULL &":
        """
        update(vnl_matrixULL self, vnl_matrixULL arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrixULL
        update(vnl_matrixULL self, vnl_matrixULL arg0, unsigned int top=0) -> vnl_matrixULL
        update(vnl_matrixULL self, vnl_matrixULL arg0) -> vnl_matrixULL
        """
        return _vnl_matrixPython.vnl_matrixULL_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrixULL &":
        """
        set_column(vnl_matrixULL self, unsigned int i, unsigned long long const * v) -> vnl_matrixULL
        set_column(vnl_matrixULL self, unsigned int i, unsigned long long value) -> vnl_matrixULL
        set_column(vnl_matrixULL self, unsigned int j, vnl_vectorULL v) -> vnl_matrixULL
        """
        return _vnl_matrixPython.vnl_matrixULL_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixULL') -> "vnl_matrixULL &":
        """set_columns(vnl_matrixULL self, unsigned int starting_column, vnl_matrixULL M) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrixULL &":
        """
        set_row(vnl_matrixULL self, unsigned int i, unsigned long long const * v) -> vnl_matrixULL
        set_row(vnl_matrixULL self, unsigned int i, unsigned long long value) -> vnl_matrixULL
        set_row(vnl_matrixULL self, unsigned int i, vnl_vectorULL arg1) -> vnl_matrixULL
        """
        return _vnl_matrixPython.vnl_matrixULL_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrixULL self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixULL
        extract(vnl_matrixULL self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixULL
        extract(vnl_matrixULL self, unsigned int r, unsigned int c) -> vnl_matrixULL
        extract(vnl_matrixULL self, vnl_matrixULL sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrixULL self, vnl_matrixULL sub_matrix, unsigned int top=0)
        extract(vnl_matrixULL self, vnl_matrixULL sub_matrix)
        """
        return _vnl_matrixPython.vnl_matrixULL_extract(self, *args)


    def get_row(self, r: 'unsigned int') -> "vnl_vectorULL":
        """get_row(vnl_matrixULL self, unsigned int r) -> vnl_vectorULL"""
        return _vnl_matrixPython.vnl_matrixULL_get_row(self, r)


    def get_column(self, c: 'unsigned int') -> "vnl_vectorULL":
        """get_column(vnl_matrixULL self, unsigned int c) -> vnl_vectorULL"""
        return _vnl_matrixPython.vnl_matrixULL_get_column(self, c)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixULL":
        """get_rows(vnl_matrixULL self, vnl_vectorUI i) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixULL":
        """get_columns(vnl_matrixULL self, vnl_vectorUI i) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixULL":
        """get_n_rows(vnl_matrixULL self, unsigned int rowstart, unsigned int n) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixULL":
        """get_n_columns(vnl_matrixULL self, unsigned int colstart, unsigned int n) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorULL":
        """get_diagonal(vnl_matrixULL self) -> vnl_vectorULL"""
        return _vnl_matrixPython.vnl_matrixULL_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vectorULL":
        """flatten_row_major(vnl_matrixULL self) -> vnl_vectorULL"""
        return _vnl_matrixPython.vnl_matrixULL_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vectorULL":
        """flatten_column_major(vnl_matrixULL self) -> vnl_vectorULL"""
        return _vnl_matrixPython.vnl_matrixULL_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrixULL &":
        """set_identity(vnl_matrixULL self) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_set_identity(self)


    def inplace_transpose(self) -> "vnl_matrixULL &":
        """inplace_transpose(vnl_matrixULL self) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_inplace_transpose(self)


    def flipud(self) -> "vnl_matrixULL &":
        """flipud(vnl_matrixULL self) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_flipud(self)


    def fliplr(self) -> "vnl_matrixULL &":
        """fliplr(vnl_matrixULL self) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_fliplr(self)


    def normalize_rows(self) -> "vnl_matrixULL &":
        """normalize_rows(vnl_matrixULL self) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrixULL &":
        """normalize_columns(vnl_matrixULL self) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'unsigned long long') -> "vnl_matrixULL &":
        """scale_row(vnl_matrixULL self, unsigned int row, unsigned long long value) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'unsigned long long') -> "vnl_matrixULL &":
        """scale_column(vnl_matrixULL self, unsigned int col, unsigned long long value) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrixULL') -> "void":
        """swap(vnl_matrixULL self, vnl_matrixULL that)"""
        return _vnl_matrixPython.vnl_matrixULL_swap(self, that)


    def array_one_norm(self) -> "unsigned long long":
        """array_one_norm(vnl_matrixULL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixULL_array_one_norm(self)


    def array_two_norm(self) -> "unsigned long long":
        """array_two_norm(vnl_matrixULL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixULL_array_two_norm(self)


    def array_inf_norm(self) -> "unsigned long long":
        """array_inf_norm(vnl_matrixULL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixULL_array_inf_norm(self)


    def absolute_value_sum(self) -> "unsigned long long":
        """absolute_value_sum(vnl_matrixULL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixULL_absolute_value_sum(self)


    def absolute_value_max(self) -> "unsigned long long":
        """absolute_value_max(vnl_matrixULL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixULL_absolute_value_max(self)


    def operator_one_norm(self) -> "unsigned long long":
        """operator_one_norm(vnl_matrixULL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixULL_operator_one_norm(self)


    def operator_inf_norm(self) -> "unsigned long long":
        """operator_inf_norm(vnl_matrixULL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixULL_operator_inf_norm(self)


    def frobenius_norm(self) -> "unsigned long long":
        """frobenius_norm(vnl_matrixULL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixULL_frobenius_norm(self)


    def fro_norm(self) -> "unsigned long long":
        """fro_norm(vnl_matrixULL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixULL_fro_norm(self)


    def rms(self) -> "unsigned long long":
        """rms(vnl_matrixULL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixULL_rms(self)


    def min_value(self) -> "unsigned long long":
        """min_value(vnl_matrixULL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixULL_min_value(self)


    def max_value(self) -> "unsigned long long":
        """max_value(vnl_matrixULL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixULL_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrixULL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixULL_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrixULL self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixULL_arg_max(self)


    def mean(self) -> "unsigned long long":
        """mean(vnl_matrixULL self) -> unsigned long long"""
        return _vnl_matrixPython.vnl_matrixULL_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrixULL self) -> bool"""
        return _vnl_matrixPython.vnl_matrixULL_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrixULL self) -> bool
        is_identity(vnl_matrixULL self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixULL_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrixULL self) -> bool
        is_zero(vnl_matrixULL self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixULL_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrixULL', tol: 'double') -> "bool":
        """is_equal(vnl_matrixULL self, vnl_matrixULL rhs, double tol) -> bool"""
        return _vnl_matrixPython.vnl_matrixULL_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrixULL self) -> bool"""
        return _vnl_matrixPython.vnl_matrixULL_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrixULL self) -> bool"""
        return _vnl_matrixPython.vnl_matrixULL_has_nans(self)


    def assert_size(self, r: 'unsigned int', c: 'unsigned int') -> "void":
        """assert_size(vnl_matrixULL self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixULL_assert_size(self, r, c)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrixULL self)"""
        return _vnl_matrixPython.vnl_matrixULL_assert_finite(self)


    def read(s: 'istream') -> "vnl_matrixULL":
        """read(istream s) -> vnl_matrixULL"""
        return _vnl_matrixPython.vnl_matrixULL_read(s)

    read = staticmethod(read)

    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrixULL self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixULL_read_ascii(self, s)


    def data_block(self, *args) -> "unsigned long long *":
        """
        data_block(vnl_matrixULL self) -> unsigned long long const
        data_block(vnl_matrixULL self) -> unsigned long long *
        """
        return _vnl_matrixPython.vnl_matrixULL_data_block(self, *args)


    def data_array(self, *args) -> "unsigned long long **":
        """
        data_array(vnl_matrixULL self) -> unsigned long long const
        data_array(vnl_matrixULL self) -> unsigned long long **
        """
        return _vnl_matrixPython.vnl_matrixULL_data_array(self, *args)


    def begin(self, *args) -> "unsigned long long const *":
        """
        begin(vnl_matrixULL self) -> unsigned long long
        begin(vnl_matrixULL self) -> unsigned long long const *
        """
        return _vnl_matrixPython.vnl_matrixULL_begin(self, *args)


    def end(self, *args) -> "unsigned long long const *":
        """
        end(vnl_matrixULL self) -> unsigned long long
        end(vnl_matrixULL self) -> unsigned long long const *
        """
        return _vnl_matrixPython.vnl_matrixULL_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrixULL') -> "bool":
        """operator_eq(vnl_matrixULL self, vnl_matrixULL rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixULL_operator_eq(self, rhs)


    def __eq__(self, that: 'vnl_matrixULL') -> "bool":
        """__eq__(vnl_matrixULL self, vnl_matrixULL that) -> bool"""
        return _vnl_matrixPython.vnl_matrixULL___eq__(self, that)


    def __ne__(self, that: 'vnl_matrixULL') -> "bool":
        """__ne__(vnl_matrixULL self, vnl_matrixULL that) -> bool"""
        return _vnl_matrixPython.vnl_matrixULL___ne__(self, that)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrixULL self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixULL__print(self, os)


    def clear(self) -> "void":
        """clear(vnl_matrixULL self)"""
        return _vnl_matrixPython.vnl_matrixULL_clear(self)


    def set_size(self, r: 'unsigned int', c: 'unsigned int') -> "bool":
        """set_size(vnl_matrixULL self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixULL_set_size(self, r, c)

vnl_matrixULL.size = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_size, None, vnl_matrixULL)
vnl_matrixULL.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_rows, None, vnl_matrixULL)
vnl_matrixULL.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_cols, None, vnl_matrixULL)
vnl_matrixULL.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_columns, None, vnl_matrixULL)
vnl_matrixULL.put = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_put, None, vnl_matrixULL)
vnl_matrixULL.get = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_get, None, vnl_matrixULL)
vnl_matrixULL.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixULL___call__, None, vnl_matrixULL)
vnl_matrixULL.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_fill, None, vnl_matrixULL)
vnl_matrixULL.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_fill_diagonal, None, vnl_matrixULL)
vnl_matrixULL.set_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_set_diagonal, None, vnl_matrixULL)
vnl_matrixULL.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_copy_in, None, vnl_matrixULL)
vnl_matrixULL.set = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_set, None, vnl_matrixULL)
vnl_matrixULL.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_copy_out, None, vnl_matrixULL)
vnl_matrixULL.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixULL___idiv__, None, vnl_matrixULL)
vnl_matrixULL.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixULL___iadd__, None, vnl_matrixULL)
vnl_matrixULL.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixULL___isub__, None, vnl_matrixULL)
vnl_matrixULL.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixULL___imul__, None, vnl_matrixULL)
vnl_matrixULL.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixULL___neg__, None, vnl_matrixULL)
vnl_matrixULL.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixULL___div__, None, vnl_matrixULL)
vnl_matrixULL.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixULL___add__, None, vnl_matrixULL)
vnl_matrixULL.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixULL___sub__, None, vnl_matrixULL)
vnl_matrixULL.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixULL___mul__, None, vnl_matrixULL)
vnl_matrixULL.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_transpose, None, vnl_matrixULL)
vnl_matrixULL.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_conjugate_transpose, None, vnl_matrixULL)
vnl_matrixULL.update = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_update, None, vnl_matrixULL)
vnl_matrixULL.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_set_column, None, vnl_matrixULL)
vnl_matrixULL.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_set_columns, None, vnl_matrixULL)
vnl_matrixULL.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_set_row, None, vnl_matrixULL)
vnl_matrixULL.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_extract, None, vnl_matrixULL)
vnl_matrixULL.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_get_row, None, vnl_matrixULL)
vnl_matrixULL.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_get_column, None, vnl_matrixULL)
vnl_matrixULL.get_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_get_rows, None, vnl_matrixULL)
vnl_matrixULL.get_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_get_columns, None, vnl_matrixULL)
vnl_matrixULL.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_get_n_rows, None, vnl_matrixULL)
vnl_matrixULL.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_get_n_columns, None, vnl_matrixULL)
vnl_matrixULL.get_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_get_diagonal, None, vnl_matrixULL)
vnl_matrixULL.flatten_row_major = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_flatten_row_major, None, vnl_matrixULL)
vnl_matrixULL.flatten_column_major = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_flatten_column_major, None, vnl_matrixULL)
vnl_matrixULL.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_set_identity, None, vnl_matrixULL)
vnl_matrixULL.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_inplace_transpose, None, vnl_matrixULL)
vnl_matrixULL.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_flipud, None, vnl_matrixULL)
vnl_matrixULL.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_fliplr, None, vnl_matrixULL)
vnl_matrixULL.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_normalize_rows, None, vnl_matrixULL)
vnl_matrixULL.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_normalize_columns, None, vnl_matrixULL)
vnl_matrixULL.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_scale_row, None, vnl_matrixULL)
vnl_matrixULL.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_scale_column, None, vnl_matrixULL)
vnl_matrixULL.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_swap, None, vnl_matrixULL)
vnl_matrixULL.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_array_one_norm, None, vnl_matrixULL)
vnl_matrixULL.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_array_two_norm, None, vnl_matrixULL)
vnl_matrixULL.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_array_inf_norm, None, vnl_matrixULL)
vnl_matrixULL.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_absolute_value_sum, None, vnl_matrixULL)
vnl_matrixULL.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_absolute_value_max, None, vnl_matrixULL)
vnl_matrixULL.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_operator_one_norm, None, vnl_matrixULL)
vnl_matrixULL.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_operator_inf_norm, None, vnl_matrixULL)
vnl_matrixULL.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_frobenius_norm, None, vnl_matrixULL)
vnl_matrixULL.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_fro_norm, None, vnl_matrixULL)
vnl_matrixULL.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_rms, None, vnl_matrixULL)
vnl_matrixULL.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_min_value, None, vnl_matrixULL)
vnl_matrixULL.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_max_value, None, vnl_matrixULL)
vnl_matrixULL.arg_min = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_arg_min, None, vnl_matrixULL)
vnl_matrixULL.arg_max = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_arg_max, None, vnl_matrixULL)
vnl_matrixULL.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_mean, None, vnl_matrixULL)
vnl_matrixULL.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_empty, None, vnl_matrixULL)
vnl_matrixULL.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_is_identity, None, vnl_matrixULL)
vnl_matrixULL.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_is_zero, None, vnl_matrixULL)
vnl_matrixULL.is_equal = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_is_equal, None, vnl_matrixULL)
vnl_matrixULL.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_is_finite, None, vnl_matrixULL)
vnl_matrixULL.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_has_nans, None, vnl_matrixULL)
vnl_matrixULL.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_assert_size, None, vnl_matrixULL)
vnl_matrixULL.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_assert_finite, None, vnl_matrixULL)
vnl_matrixULL.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_read_ascii, None, vnl_matrixULL)
vnl_matrixULL.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_data_block, None, vnl_matrixULL)
vnl_matrixULL.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_data_array, None, vnl_matrixULL)
vnl_matrixULL.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_begin, None, vnl_matrixULL)
vnl_matrixULL.end = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_end, None, vnl_matrixULL)
vnl_matrixULL.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_operator_eq, None, vnl_matrixULL)
vnl_matrixULL.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixULL___eq__, None, vnl_matrixULL)
vnl_matrixULL.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixULL___ne__, None, vnl_matrixULL)
vnl_matrixULL._print = new_instancemethod(_vnl_matrixPython.vnl_matrixULL__print, None, vnl_matrixULL)
vnl_matrixULL.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_clear, None, vnl_matrixULL)
vnl_matrixULL.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixULL_set_size, None, vnl_matrixULL)
vnl_matrixULL_swigregister = _vnl_matrixPython.vnl_matrixULL_swigregister
vnl_matrixULL_swigregister(vnl_matrixULL)

def vnl_matrixULL_read(s: 'istream') -> "vnl_matrixULL":
    """vnl_matrixULL_read(istream s) -> vnl_matrixULL"""
    return _vnl_matrixPython.vnl_matrixULL_read(s)

class vnl_matrixUS(object):
    """Proxy of C++ vnl_matrixUS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_matrixUS self) -> vnl_matrixUS
        __init__(vnl_matrixUS self, unsigned int r, unsigned int c) -> vnl_matrixUS
        __init__(vnl_matrixUS self, unsigned int r, unsigned int c, unsigned short const & v0) -> vnl_matrixUS
        __init__(vnl_matrixUS self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixUS
        __init__(vnl_matrixUS self, unsigned int r, unsigned int c, unsigned int n, unsigned short const * values) -> vnl_matrixUS
        __init__(vnl_matrixUS self, unsigned short const * data_block, unsigned int r, unsigned int c) -> vnl_matrixUS
        __init__(vnl_matrixUS self, vnl_matrixUS arg0) -> vnl_matrixUS
        __init__(vnl_matrixUS self, vnl_matrixUS arg0, vnl_matrixUS arg1, vnl_tag_add arg2) -> vnl_matrixUS
        __init__(vnl_matrixUS self, vnl_matrixUS arg0, vnl_matrixUS arg1, vnl_tag_sub arg2) -> vnl_matrixUS
        __init__(vnl_matrixUS self, vnl_matrixUS arg0, unsigned short arg1, vnl_tag_mul arg2) -> vnl_matrixUS
        __init__(vnl_matrixUS self, vnl_matrixUS arg0, unsigned short arg1, vnl_tag_div arg2) -> vnl_matrixUS
        __init__(vnl_matrixUS self, vnl_matrixUS arg0, unsigned short arg1, vnl_tag_add arg2) -> vnl_matrixUS
        __init__(vnl_matrixUS self, vnl_matrixUS arg0, unsigned short arg1, vnl_tag_sub arg2) -> vnl_matrixUS
        __init__(vnl_matrixUS self, vnl_matrixUS arg0, vnl_matrixUS arg1, vnl_tag_mul arg2) -> vnl_matrixUS
        __init__(vnl_matrixUS self, vnl_matrixUS that, vnl_tag_grab arg1) -> vnl_matrixUS
        """
        _vnl_matrixPython.vnl_matrixUS_swiginit(self, _vnl_matrixPython.new_vnl_matrixUS(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixUS

    def size(self) -> "unsigned int":
        """size(vnl_matrixUS self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUS_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrixUS self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUS_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrixUS self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUS_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrixUS self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUS_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', arg2: 'unsigned short const &') -> "void":
        """put(vnl_matrixUS self, unsigned int r, unsigned int c, unsigned short const & arg2)"""
        return _vnl_matrixPython.vnl_matrixUS_put(self, r, c, arg2)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "unsigned short":
        """get(vnl_matrixUS self, unsigned int r, unsigned int c) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixUS_get(self, r, c)


    def __call__(self, *args) -> "unsigned short const &":
        """
        __call__(vnl_matrixUS self, unsigned int r, unsigned int c) -> unsigned short
        __call__(vnl_matrixUS self, unsigned int r, unsigned int c) -> unsigned short const &
        """
        return _vnl_matrixPython.vnl_matrixUS___call__(self, *args)


    def fill(self, arg0: 'unsigned short const &') -> "vnl_matrixUS &":
        """fill(vnl_matrixUS self, unsigned short const & arg0) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_fill(self, arg0)


    def fill_diagonal(self, arg0: 'unsigned short const &') -> "vnl_matrixUS &":
        """fill_diagonal(vnl_matrixUS self, unsigned short const & arg0) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorUS') -> "vnl_matrixUS &":
        """set_diagonal(vnl_matrixUS self, vnl_vectorUS arg0) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'unsigned short const *') -> "vnl_matrixUS &":
        """copy_in(vnl_matrixUS self, unsigned short const * arg0) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_copy_in(self, arg0)


    def set(self, d: 'unsigned short const *') -> "vnl_matrixUS &":
        """set(vnl_matrixUS self, unsigned short const * d) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_set(self, d)


    def copy_out(self, arg0: 'unsigned short *') -> "void":
        """copy_out(vnl_matrixUS self, unsigned short * arg0)"""
        return _vnl_matrixPython.vnl_matrixUS_copy_out(self, arg0)


    def __idiv__(self, value: 'unsigned short') -> "vnl_matrixUS &":
        """__idiv__(vnl_matrixUS self, unsigned short value) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS___idiv__(self, value)


    def __iadd__(self, *args) -> "vnl_matrixUS &":
        """
        __iadd__(vnl_matrixUS self, unsigned short value) -> vnl_matrixUS
        __iadd__(vnl_matrixUS self, vnl_matrixUS arg0) -> vnl_matrixUS
        """
        return _vnl_matrixPython.vnl_matrixUS___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrixUS &":
        """
        __isub__(vnl_matrixUS self, unsigned short value) -> vnl_matrixUS
        __isub__(vnl_matrixUS self, vnl_matrixUS arg0) -> vnl_matrixUS
        """
        return _vnl_matrixPython.vnl_matrixUS___isub__(self, *args)


    def __imul__(self, *args) -> "vnl_matrixUS &":
        """
        __imul__(vnl_matrixUS self, unsigned short value) -> vnl_matrixUS
        __imul__(vnl_matrixUS self, vnl_matrixUS rhs) -> vnl_matrixUS
        """
        return _vnl_matrixPython.vnl_matrixUS___imul__(self, *args)


    def __neg__(self) -> "vnl_matrixUS":
        """__neg__(vnl_matrixUS self) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS___neg__(self)


    def __div__(self, v: 'unsigned short const &') -> "vnl_matrixUS":
        """__div__(vnl_matrixUS self, unsigned short const & v) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS___div__(self, v)


    def __add__(self, *args) -> "vnl_matrixUS":
        """
        __add__(vnl_matrixUS self, unsigned short const & v) -> vnl_matrixUS
        __add__(vnl_matrixUS self, vnl_matrixUS rhs) -> vnl_matrixUS
        """
        return _vnl_matrixPython.vnl_matrixUS___add__(self, *args)


    def __sub__(self, *args) -> "vnl_matrixUS":
        """
        __sub__(vnl_matrixUS self, unsigned short const & v) -> vnl_matrixUS
        __sub__(vnl_matrixUS self, vnl_matrixUS rhs) -> vnl_matrixUS
        """
        return _vnl_matrixPython.vnl_matrixUS___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_matrixUS":
        """
        __mul__(vnl_matrixUS self, unsigned short const & v) -> vnl_matrixUS
        __mul__(vnl_matrixUS self, vnl_matrixUS rhs) -> vnl_matrixUS
        """
        return _vnl_matrixPython.vnl_matrixUS___mul__(self, *args)


    def transpose(self) -> "vnl_matrixUS":
        """transpose(vnl_matrixUS self) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrixUS":
        """conjugate_transpose(vnl_matrixUS self) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixUS', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrixUS &":
        """
        update(vnl_matrixUS self, vnl_matrixUS arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrixUS
        update(vnl_matrixUS self, vnl_matrixUS arg0, unsigned int top=0) -> vnl_matrixUS
        update(vnl_matrixUS self, vnl_matrixUS arg0) -> vnl_matrixUS
        """
        return _vnl_matrixPython.vnl_matrixUS_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrixUS &":
        """
        set_column(vnl_matrixUS self, unsigned int i, unsigned short const * v) -> vnl_matrixUS
        set_column(vnl_matrixUS self, unsigned int i, unsigned short value) -> vnl_matrixUS
        set_column(vnl_matrixUS self, unsigned int j, vnl_vectorUS v) -> vnl_matrixUS
        """
        return _vnl_matrixPython.vnl_matrixUS_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixUS') -> "vnl_matrixUS &":
        """set_columns(vnl_matrixUS self, unsigned int starting_column, vnl_matrixUS M) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrixUS &":
        """
        set_row(vnl_matrixUS self, unsigned int i, unsigned short const * v) -> vnl_matrixUS
        set_row(vnl_matrixUS self, unsigned int i, unsigned short value) -> vnl_matrixUS
        set_row(vnl_matrixUS self, unsigned int i, vnl_vectorUS arg1) -> vnl_matrixUS
        """
        return _vnl_matrixPython.vnl_matrixUS_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrixUS self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixUS
        extract(vnl_matrixUS self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixUS
        extract(vnl_matrixUS self, unsigned int r, unsigned int c) -> vnl_matrixUS
        extract(vnl_matrixUS self, vnl_matrixUS sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrixUS self, vnl_matrixUS sub_matrix, unsigned int top=0)
        extract(vnl_matrixUS self, vnl_matrixUS sub_matrix)
        """
        return _vnl_matrixPython.vnl_matrixUS_extract(self, *args)


    def get_row(self, r: 'unsigned int') -> "vnl_vectorUS":
        """get_row(vnl_matrixUS self, unsigned int r) -> vnl_vectorUS"""
        return _vnl_matrixPython.vnl_matrixUS_get_row(self, r)


    def get_column(self, c: 'unsigned int') -> "vnl_vectorUS":
        """get_column(vnl_matrixUS self, unsigned int c) -> vnl_vectorUS"""
        return _vnl_matrixPython.vnl_matrixUS_get_column(self, c)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixUS":
        """get_rows(vnl_matrixUS self, vnl_vectorUI i) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixUS":
        """get_columns(vnl_matrixUS self, vnl_vectorUI i) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixUS":
        """get_n_rows(vnl_matrixUS self, unsigned int rowstart, unsigned int n) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixUS":
        """get_n_columns(vnl_matrixUS self, unsigned int colstart, unsigned int n) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorUS":
        """get_diagonal(vnl_matrixUS self) -> vnl_vectorUS"""
        return _vnl_matrixPython.vnl_matrixUS_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vectorUS":
        """flatten_row_major(vnl_matrixUS self) -> vnl_vectorUS"""
        return _vnl_matrixPython.vnl_matrixUS_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vectorUS":
        """flatten_column_major(vnl_matrixUS self) -> vnl_vectorUS"""
        return _vnl_matrixPython.vnl_matrixUS_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrixUS &":
        """set_identity(vnl_matrixUS self) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_set_identity(self)


    def inplace_transpose(self) -> "vnl_matrixUS &":
        """inplace_transpose(vnl_matrixUS self) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_inplace_transpose(self)


    def flipud(self) -> "vnl_matrixUS &":
        """flipud(vnl_matrixUS self) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_flipud(self)


    def fliplr(self) -> "vnl_matrixUS &":
        """fliplr(vnl_matrixUS self) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_fliplr(self)


    def normalize_rows(self) -> "vnl_matrixUS &":
        """normalize_rows(vnl_matrixUS self) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrixUS &":
        """normalize_columns(vnl_matrixUS self) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'unsigned short') -> "vnl_matrixUS &":
        """scale_row(vnl_matrixUS self, unsigned int row, unsigned short value) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'unsigned short') -> "vnl_matrixUS &":
        """scale_column(vnl_matrixUS self, unsigned int col, unsigned short value) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrixUS') -> "void":
        """swap(vnl_matrixUS self, vnl_matrixUS that)"""
        return _vnl_matrixPython.vnl_matrixUS_swap(self, that)


    def array_one_norm(self) -> "unsigned short":
        """array_one_norm(vnl_matrixUS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixUS_array_one_norm(self)


    def array_two_norm(self) -> "unsigned short":
        """array_two_norm(vnl_matrixUS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixUS_array_two_norm(self)


    def array_inf_norm(self) -> "unsigned short":
        """array_inf_norm(vnl_matrixUS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixUS_array_inf_norm(self)


    def absolute_value_sum(self) -> "unsigned short":
        """absolute_value_sum(vnl_matrixUS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixUS_absolute_value_sum(self)


    def absolute_value_max(self) -> "unsigned short":
        """absolute_value_max(vnl_matrixUS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixUS_absolute_value_max(self)


    def operator_one_norm(self) -> "unsigned short":
        """operator_one_norm(vnl_matrixUS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixUS_operator_one_norm(self)


    def operator_inf_norm(self) -> "unsigned short":
        """operator_inf_norm(vnl_matrixUS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixUS_operator_inf_norm(self)


    def frobenius_norm(self) -> "unsigned short":
        """frobenius_norm(vnl_matrixUS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixUS_frobenius_norm(self)


    def fro_norm(self) -> "unsigned short":
        """fro_norm(vnl_matrixUS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixUS_fro_norm(self)


    def rms(self) -> "unsigned short":
        """rms(vnl_matrixUS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixUS_rms(self)


    def min_value(self) -> "unsigned short":
        """min_value(vnl_matrixUS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixUS_min_value(self)


    def max_value(self) -> "unsigned short":
        """max_value(vnl_matrixUS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixUS_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrixUS self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUS_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrixUS self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUS_arg_max(self)


    def mean(self) -> "unsigned short":
        """mean(vnl_matrixUS self) -> unsigned short"""
        return _vnl_matrixPython.vnl_matrixUS_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrixUS self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUS_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrixUS self) -> bool
        is_identity(vnl_matrixUS self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixUS_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrixUS self) -> bool
        is_zero(vnl_matrixUS self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixUS_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrixUS', tol: 'double') -> "bool":
        """is_equal(vnl_matrixUS self, vnl_matrixUS rhs, double tol) -> bool"""
        return _vnl_matrixPython.vnl_matrixUS_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrixUS self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUS_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrixUS self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUS_has_nans(self)


    def assert_size(self, r: 'unsigned int', c: 'unsigned int') -> "void":
        """assert_size(vnl_matrixUS self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixUS_assert_size(self, r, c)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrixUS self)"""
        return _vnl_matrixPython.vnl_matrixUS_assert_finite(self)


    def read(s: 'istream') -> "vnl_matrixUS":
        """read(istream s) -> vnl_matrixUS"""
        return _vnl_matrixPython.vnl_matrixUS_read(s)

    read = staticmethod(read)

    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrixUS self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixUS_read_ascii(self, s)


    def data_block(self, *args) -> "unsigned short *":
        """
        data_block(vnl_matrixUS self) -> unsigned short const
        data_block(vnl_matrixUS self) -> unsigned short *
        """
        return _vnl_matrixPython.vnl_matrixUS_data_block(self, *args)


    def data_array(self, *args) -> "unsigned short **":
        """
        data_array(vnl_matrixUS self) -> unsigned short const
        data_array(vnl_matrixUS self) -> unsigned short **
        """
        return _vnl_matrixPython.vnl_matrixUS_data_array(self, *args)


    def begin(self, *args) -> "unsigned short const *":
        """
        begin(vnl_matrixUS self) -> unsigned short
        begin(vnl_matrixUS self) -> unsigned short const *
        """
        return _vnl_matrixPython.vnl_matrixUS_begin(self, *args)


    def end(self, *args) -> "unsigned short const *":
        """
        end(vnl_matrixUS self) -> unsigned short
        end(vnl_matrixUS self) -> unsigned short const *
        """
        return _vnl_matrixPython.vnl_matrixUS_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrixUS') -> "bool":
        """operator_eq(vnl_matrixUS self, vnl_matrixUS rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixUS_operator_eq(self, rhs)


    def __eq__(self, that: 'vnl_matrixUS') -> "bool":
        """__eq__(vnl_matrixUS self, vnl_matrixUS that) -> bool"""
        return _vnl_matrixPython.vnl_matrixUS___eq__(self, that)


    def __ne__(self, that: 'vnl_matrixUS') -> "bool":
        """__ne__(vnl_matrixUS self, vnl_matrixUS that) -> bool"""
        return _vnl_matrixPython.vnl_matrixUS___ne__(self, that)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrixUS self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixUS__print(self, os)


    def clear(self) -> "void":
        """clear(vnl_matrixUS self)"""
        return _vnl_matrixPython.vnl_matrixUS_clear(self)


    def set_size(self, r: 'unsigned int', c: 'unsigned int') -> "bool":
        """set_size(vnl_matrixUS self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixUS_set_size(self, r, c)

vnl_matrixUS.size = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_size, None, vnl_matrixUS)
vnl_matrixUS.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_rows, None, vnl_matrixUS)
vnl_matrixUS.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_cols, None, vnl_matrixUS)
vnl_matrixUS.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_columns, None, vnl_matrixUS)
vnl_matrixUS.put = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_put, None, vnl_matrixUS)
vnl_matrixUS.get = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_get, None, vnl_matrixUS)
vnl_matrixUS.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUS___call__, None, vnl_matrixUS)
vnl_matrixUS.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_fill, None, vnl_matrixUS)
vnl_matrixUS.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_fill_diagonal, None, vnl_matrixUS)
vnl_matrixUS.set_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_set_diagonal, None, vnl_matrixUS)
vnl_matrixUS.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_copy_in, None, vnl_matrixUS)
vnl_matrixUS.set = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_set, None, vnl_matrixUS)
vnl_matrixUS.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_copy_out, None, vnl_matrixUS)
vnl_matrixUS.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUS___idiv__, None, vnl_matrixUS)
vnl_matrixUS.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUS___iadd__, None, vnl_matrixUS)
vnl_matrixUS.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUS___isub__, None, vnl_matrixUS)
vnl_matrixUS.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUS___imul__, None, vnl_matrixUS)
vnl_matrixUS.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUS___neg__, None, vnl_matrixUS)
vnl_matrixUS.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUS___div__, None, vnl_matrixUS)
vnl_matrixUS.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUS___add__, None, vnl_matrixUS)
vnl_matrixUS.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUS___sub__, None, vnl_matrixUS)
vnl_matrixUS.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUS___mul__, None, vnl_matrixUS)
vnl_matrixUS.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_transpose, None, vnl_matrixUS)
vnl_matrixUS.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_conjugate_transpose, None, vnl_matrixUS)
vnl_matrixUS.update = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_update, None, vnl_matrixUS)
vnl_matrixUS.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_set_column, None, vnl_matrixUS)
vnl_matrixUS.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_set_columns, None, vnl_matrixUS)
vnl_matrixUS.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_set_row, None, vnl_matrixUS)
vnl_matrixUS.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_extract, None, vnl_matrixUS)
vnl_matrixUS.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_get_row, None, vnl_matrixUS)
vnl_matrixUS.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_get_column, None, vnl_matrixUS)
vnl_matrixUS.get_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_get_rows, None, vnl_matrixUS)
vnl_matrixUS.get_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_get_columns, None, vnl_matrixUS)
vnl_matrixUS.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_get_n_rows, None, vnl_matrixUS)
vnl_matrixUS.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_get_n_columns, None, vnl_matrixUS)
vnl_matrixUS.get_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_get_diagonal, None, vnl_matrixUS)
vnl_matrixUS.flatten_row_major = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_flatten_row_major, None, vnl_matrixUS)
vnl_matrixUS.flatten_column_major = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_flatten_column_major, None, vnl_matrixUS)
vnl_matrixUS.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_set_identity, None, vnl_matrixUS)
vnl_matrixUS.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_inplace_transpose, None, vnl_matrixUS)
vnl_matrixUS.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_flipud, None, vnl_matrixUS)
vnl_matrixUS.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_fliplr, None, vnl_matrixUS)
vnl_matrixUS.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_normalize_rows, None, vnl_matrixUS)
vnl_matrixUS.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_normalize_columns, None, vnl_matrixUS)
vnl_matrixUS.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_scale_row, None, vnl_matrixUS)
vnl_matrixUS.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_scale_column, None, vnl_matrixUS)
vnl_matrixUS.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_swap, None, vnl_matrixUS)
vnl_matrixUS.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_array_one_norm, None, vnl_matrixUS)
vnl_matrixUS.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_array_two_norm, None, vnl_matrixUS)
vnl_matrixUS.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_array_inf_norm, None, vnl_matrixUS)
vnl_matrixUS.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_absolute_value_sum, None, vnl_matrixUS)
vnl_matrixUS.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_absolute_value_max, None, vnl_matrixUS)
vnl_matrixUS.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_operator_one_norm, None, vnl_matrixUS)
vnl_matrixUS.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_operator_inf_norm, None, vnl_matrixUS)
vnl_matrixUS.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_frobenius_norm, None, vnl_matrixUS)
vnl_matrixUS.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_fro_norm, None, vnl_matrixUS)
vnl_matrixUS.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_rms, None, vnl_matrixUS)
vnl_matrixUS.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_min_value, None, vnl_matrixUS)
vnl_matrixUS.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_max_value, None, vnl_matrixUS)
vnl_matrixUS.arg_min = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_arg_min, None, vnl_matrixUS)
vnl_matrixUS.arg_max = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_arg_max, None, vnl_matrixUS)
vnl_matrixUS.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_mean, None, vnl_matrixUS)
vnl_matrixUS.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_empty, None, vnl_matrixUS)
vnl_matrixUS.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_is_identity, None, vnl_matrixUS)
vnl_matrixUS.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_is_zero, None, vnl_matrixUS)
vnl_matrixUS.is_equal = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_is_equal, None, vnl_matrixUS)
vnl_matrixUS.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_is_finite, None, vnl_matrixUS)
vnl_matrixUS.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_has_nans, None, vnl_matrixUS)
vnl_matrixUS.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_assert_size, None, vnl_matrixUS)
vnl_matrixUS.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_assert_finite, None, vnl_matrixUS)
vnl_matrixUS.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_read_ascii, None, vnl_matrixUS)
vnl_matrixUS.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_data_block, None, vnl_matrixUS)
vnl_matrixUS.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_data_array, None, vnl_matrixUS)
vnl_matrixUS.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_begin, None, vnl_matrixUS)
vnl_matrixUS.end = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_end, None, vnl_matrixUS)
vnl_matrixUS.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_operator_eq, None, vnl_matrixUS)
vnl_matrixUS.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUS___eq__, None, vnl_matrixUS)
vnl_matrixUS.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUS___ne__, None, vnl_matrixUS)
vnl_matrixUS._print = new_instancemethod(_vnl_matrixPython.vnl_matrixUS__print, None, vnl_matrixUS)
vnl_matrixUS.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_clear, None, vnl_matrixUS)
vnl_matrixUS.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixUS_set_size, None, vnl_matrixUS)
vnl_matrixUS_swigregister = _vnl_matrixPython.vnl_matrixUS_swigregister
vnl_matrixUS_swigregister(vnl_matrixUS)

def vnl_matrixUS_read(s: 'istream') -> "vnl_matrixUS":
    """vnl_matrixUS_read(istream s) -> vnl_matrixUS"""
    return _vnl_matrixPython.vnl_matrixUS_read(s)



