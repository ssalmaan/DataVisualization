# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkDemonsImageToImageMetricv4Python.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkDemonsImageToImageMetricv4Python', [dirname(__file__)])
        except ImportError:
            import _itkDemonsImageToImageMetricv4Python
            return _itkDemonsImageToImageMetricv4Python
        if fp is not None:
            try:
                _mod = imp.load_module('_itkDemonsImageToImageMetricv4Python', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkDemonsImageToImageMetricv4Python = swig_import_helper()
    del swig_import_helper
else:
    import _itkDemonsImageToImageMetricv4Python
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageMetricv4Python
import itkImageRegionPython
import itkIndexPython
import itkSizePython
import pyBasePython
import itkOffsetPython
import ITKCommonBasePython
import itkTransformBasePython
import itkCovariantVectorPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import itkVariableLengthVectorPython
import itkArray2DPython
import itkPointPython
import itkOptimizerParametersPython
import itkArrayPython
import vnl_matrix_fixedPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkDiffusionTensor3DPython
import itkInterpolateImageFunctionPython
import itkImageFunctionBasePython
import itkFunctionBasePython
import itkContinuousIndexPython
import itkImagePython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkSpatialObjectBasePython
import itkSpatialObjectPropertyPython
import itkBoundingBoxPython
import itkMapContainerPython
import itkVectorContainerPython
import itkAffineTransformPython
import itkMatrixOffsetTransformBasePython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkImageToImageFilterCommonPython
import itkDisplacementFieldTransformPython
import itkPointSetPython
import itkObjectToObjectMetricBasePython
import itkSingleValuedCostFunctionv4Python
import itkCostFunctionPython

def itkDemonsImageToImageMetricv4IF3IF3_New():
  return itkDemonsImageToImageMetricv4IF3IF3.New()


def itkDemonsImageToImageMetricv4IF2IF2_New():
  return itkDemonsImageToImageMetricv4IF2IF2.New()

class itkDemonsImageToImageMetricv4IF2IF2(itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2):
    """Proxy of C++ itkDemonsImageToImageMetricv4IF2IF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDemonsImageToImageMetricv4IF2IF2_Pointer":
        """__New_orig__() -> itkDemonsImageToImageMetricv4IF2IF2_Pointer"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDemonsImageToImageMetricv4IF2IF2_Pointer":
        """Clone(itkDemonsImageToImageMetricv4IF2IF2 self) -> itkDemonsImageToImageMetricv4IF2IF2_Pointer"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_Clone(self)


    def GetIntensityDifferenceThreshold(self) -> "double":
        """GetIntensityDifferenceThreshold(itkDemonsImageToImageMetricv4IF2IF2 self) -> double"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_GetIntensityDifferenceThreshold(self)


    def SetIntensityDifferenceThreshold(self, _arg: 'double const') -> "void":
        """SetIntensityDifferenceThreshold(itkDemonsImageToImageMetricv4IF2IF2 self, double const _arg)"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_SetIntensityDifferenceThreshold(self, _arg)


    def GetDenominatorThreshold(self) -> "double":
        """GetDenominatorThreshold(itkDemonsImageToImageMetricv4IF2IF2 self) -> double"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_GetDenominatorThreshold(self)

    __swig_destroy__ = _itkDemonsImageToImageMetricv4Python.delete_itkDemonsImageToImageMetricv4IF2IF2

    def cast(obj: 'itkLightObject') -> "itkDemonsImageToImageMetricv4IF2IF2 *":
        """cast(itkLightObject obj) -> itkDemonsImageToImageMetricv4IF2IF2"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDemonsImageToImageMetricv4IF2IF2

        Create a new object of the class itkDemonsImageToImageMetricv4IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsImageToImageMetricv4IF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDemonsImageToImageMetricv4IF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDemonsImageToImageMetricv4IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDemonsImageToImageMetricv4IF2IF2.Clone = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_Clone, None, itkDemonsImageToImageMetricv4IF2IF2)
itkDemonsImageToImageMetricv4IF2IF2.GetIntensityDifferenceThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_GetIntensityDifferenceThreshold, None, itkDemonsImageToImageMetricv4IF2IF2)
itkDemonsImageToImageMetricv4IF2IF2.SetIntensityDifferenceThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_SetIntensityDifferenceThreshold, None, itkDemonsImageToImageMetricv4IF2IF2)
itkDemonsImageToImageMetricv4IF2IF2.GetDenominatorThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_GetDenominatorThreshold, None, itkDemonsImageToImageMetricv4IF2IF2)
itkDemonsImageToImageMetricv4IF2IF2_swigregister = _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_swigregister
itkDemonsImageToImageMetricv4IF2IF2_swigregister(itkDemonsImageToImageMetricv4IF2IF2)

def itkDemonsImageToImageMetricv4IF2IF2___New_orig__() -> "itkDemonsImageToImageMetricv4IF2IF2_Pointer":
    """itkDemonsImageToImageMetricv4IF2IF2___New_orig__() -> itkDemonsImageToImageMetricv4IF2IF2_Pointer"""
    return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2___New_orig__()

def itkDemonsImageToImageMetricv4IF2IF2_cast(obj: 'itkLightObject') -> "itkDemonsImageToImageMetricv4IF2IF2 *":
    """itkDemonsImageToImageMetricv4IF2IF2_cast(itkLightObject obj) -> itkDemonsImageToImageMetricv4IF2IF2"""
    return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF2IF2_cast(obj)

class itkDemonsImageToImageMetricv4IF3IF3(itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3):
    """Proxy of C++ itkDemonsImageToImageMetricv4IF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDemonsImageToImageMetricv4IF3IF3_Pointer":
        """__New_orig__() -> itkDemonsImageToImageMetricv4IF3IF3_Pointer"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDemonsImageToImageMetricv4IF3IF3_Pointer":
        """Clone(itkDemonsImageToImageMetricv4IF3IF3 self) -> itkDemonsImageToImageMetricv4IF3IF3_Pointer"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_Clone(self)


    def GetIntensityDifferenceThreshold(self) -> "double":
        """GetIntensityDifferenceThreshold(itkDemonsImageToImageMetricv4IF3IF3 self) -> double"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_GetIntensityDifferenceThreshold(self)


    def SetIntensityDifferenceThreshold(self, _arg: 'double const') -> "void":
        """SetIntensityDifferenceThreshold(itkDemonsImageToImageMetricv4IF3IF3 self, double const _arg)"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_SetIntensityDifferenceThreshold(self, _arg)


    def GetDenominatorThreshold(self) -> "double":
        """GetDenominatorThreshold(itkDemonsImageToImageMetricv4IF3IF3 self) -> double"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_GetDenominatorThreshold(self)

    __swig_destroy__ = _itkDemonsImageToImageMetricv4Python.delete_itkDemonsImageToImageMetricv4IF3IF3

    def cast(obj: 'itkLightObject') -> "itkDemonsImageToImageMetricv4IF3IF3 *":
        """cast(itkLightObject obj) -> itkDemonsImageToImageMetricv4IF3IF3"""
        return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDemonsImageToImageMetricv4IF3IF3

        Create a new object of the class itkDemonsImageToImageMetricv4IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsImageToImageMetricv4IF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDemonsImageToImageMetricv4IF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDemonsImageToImageMetricv4IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDemonsImageToImageMetricv4IF3IF3.Clone = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_Clone, None, itkDemonsImageToImageMetricv4IF3IF3)
itkDemonsImageToImageMetricv4IF3IF3.GetIntensityDifferenceThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_GetIntensityDifferenceThreshold, None, itkDemonsImageToImageMetricv4IF3IF3)
itkDemonsImageToImageMetricv4IF3IF3.SetIntensityDifferenceThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_SetIntensityDifferenceThreshold, None, itkDemonsImageToImageMetricv4IF3IF3)
itkDemonsImageToImageMetricv4IF3IF3.GetDenominatorThreshold = new_instancemethod(_itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_GetDenominatorThreshold, None, itkDemonsImageToImageMetricv4IF3IF3)
itkDemonsImageToImageMetricv4IF3IF3_swigregister = _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_swigregister
itkDemonsImageToImageMetricv4IF3IF3_swigregister(itkDemonsImageToImageMetricv4IF3IF3)

def itkDemonsImageToImageMetricv4IF3IF3___New_orig__() -> "itkDemonsImageToImageMetricv4IF3IF3_Pointer":
    """itkDemonsImageToImageMetricv4IF3IF3___New_orig__() -> itkDemonsImageToImageMetricv4IF3IF3_Pointer"""
    return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3___New_orig__()

def itkDemonsImageToImageMetricv4IF3IF3_cast(obj: 'itkLightObject') -> "itkDemonsImageToImageMetricv4IF3IF3 *":
    """itkDemonsImageToImageMetricv4IF3IF3_cast(itkLightObject obj) -> itkDemonsImageToImageMetricv4IF3IF3"""
    return _itkDemonsImageToImageMetricv4Python.itkDemonsImageToImageMetricv4IF3IF3_cast(obj)



