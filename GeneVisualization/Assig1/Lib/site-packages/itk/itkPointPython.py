# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkPointPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkPointPython', [dirname(__file__)])
        except ImportError:
            import _itkPointPython
            return _itkPointPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkPointPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkPointPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkPointPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vnl_vector_refPython
import stdcomplexPython
import pyBasePython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
class vectoritkPointF2(object):
    """Proxy of C++ std::vector<(itkPointF2)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkPointF2 self) -> SwigPyIterator"""
        return _itkPointPython.vectoritkPointF2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkPointF2 self) -> bool"""
        return _itkPointPython.vectoritkPointF2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkPointF2 self) -> bool"""
        return _itkPointPython.vectoritkPointF2___bool__(self)


    def __len__(self) -> "std::vector< itkPointF2 >::size_type":
        """__len__(vectoritkPointF2 self) -> std::vector< itkPointF2 >::size_type"""
        return _itkPointPython.vectoritkPointF2___len__(self)


    def __getslice__(self, i: 'std::vector< itkPointF2 >::difference_type', j: 'std::vector< itkPointF2 >::difference_type') -> "std::vector< itkPointF2,std::allocator< itkPointF2 > > *":
        """__getslice__(vectoritkPointF2 self, std::vector< itkPointF2 >::difference_type i, std::vector< itkPointF2 >::difference_type j) -> vectoritkPointF2"""
        return _itkPointPython.vectoritkPointF2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkPointF2 self, std::vector< itkPointF2 >::difference_type i, std::vector< itkPointF2 >::difference_type j)
        __setslice__(vectoritkPointF2 self, std::vector< itkPointF2 >::difference_type i, std::vector< itkPointF2 >::difference_type j, vectoritkPointF2 v)
        """
        return _itkPointPython.vectoritkPointF2___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkPointF2 >::difference_type', j: 'std::vector< itkPointF2 >::difference_type') -> "void":
        """__delslice__(vectoritkPointF2 self, std::vector< itkPointF2 >::difference_type i, std::vector< itkPointF2 >::difference_type j)"""
        return _itkPointPython.vectoritkPointF2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkPointF2 self, std::vector< itkPointF2 >::difference_type i)
        __delitem__(vectoritkPointF2 self, PySliceObject * slice)
        """
        return _itkPointPython.vectoritkPointF2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkPointF2 >::value_type const &":
        """
        __getitem__(vectoritkPointF2 self, PySliceObject * slice) -> vectoritkPointF2
        __getitem__(vectoritkPointF2 self, std::vector< itkPointF2 >::difference_type i) -> itkPointF2
        """
        return _itkPointPython.vectoritkPointF2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkPointF2 self, PySliceObject * slice, vectoritkPointF2 v)
        __setitem__(vectoritkPointF2 self, PySliceObject * slice)
        __setitem__(vectoritkPointF2 self, std::vector< itkPointF2 >::difference_type i, itkPointF2 x)
        """
        return _itkPointPython.vectoritkPointF2___setitem__(self, *args)


    def pop(self) -> "std::vector< itkPointF2 >::value_type":
        """pop(vectoritkPointF2 self) -> itkPointF2"""
        return _itkPointPython.vectoritkPointF2_pop(self)


    def append(self, x: 'itkPointF2') -> "void":
        """append(vectoritkPointF2 self, itkPointF2 x)"""
        return _itkPointPython.vectoritkPointF2_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkPointF2 self) -> bool"""
        return _itkPointPython.vectoritkPointF2_empty(self)


    def size(self) -> "std::vector< itkPointF2 >::size_type":
        """size(vectoritkPointF2 self) -> std::vector< itkPointF2 >::size_type"""
        return _itkPointPython.vectoritkPointF2_size(self)


    def swap(self, v: 'vectoritkPointF2') -> "void":
        """swap(vectoritkPointF2 self, vectoritkPointF2 v)"""
        return _itkPointPython.vectoritkPointF2_swap(self, v)


    def begin(self) -> "std::vector< itkPointF2 >::iterator":
        """begin(vectoritkPointF2 self) -> std::vector< itkPointF2 >::iterator"""
        return _itkPointPython.vectoritkPointF2_begin(self)


    def end(self) -> "std::vector< itkPointF2 >::iterator":
        """end(vectoritkPointF2 self) -> std::vector< itkPointF2 >::iterator"""
        return _itkPointPython.vectoritkPointF2_end(self)


    def rbegin(self) -> "std::vector< itkPointF2 >::reverse_iterator":
        """rbegin(vectoritkPointF2 self) -> std::vector< itkPointF2 >::reverse_iterator"""
        return _itkPointPython.vectoritkPointF2_rbegin(self)


    def rend(self) -> "std::vector< itkPointF2 >::reverse_iterator":
        """rend(vectoritkPointF2 self) -> std::vector< itkPointF2 >::reverse_iterator"""
        return _itkPointPython.vectoritkPointF2_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkPointF2 self)"""
        return _itkPointPython.vectoritkPointF2_clear(self)


    def get_allocator(self) -> "std::vector< itkPointF2 >::allocator_type":
        """get_allocator(vectoritkPointF2 self) -> std::vector< itkPointF2 >::allocator_type"""
        return _itkPointPython.vectoritkPointF2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkPointF2 self)"""
        return _itkPointPython.vectoritkPointF2_pop_back(self)


    def erase(self, *args) -> "std::vector< itkPointF2 >::iterator":
        """
        erase(vectoritkPointF2 self, std::vector< itkPointF2 >::iterator pos) -> std::vector< itkPointF2 >::iterator
        erase(vectoritkPointF2 self, std::vector< itkPointF2 >::iterator first, std::vector< itkPointF2 >::iterator last) -> std::vector< itkPointF2 >::iterator
        """
        return _itkPointPython.vectoritkPointF2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkPointF2)> self) -> vectoritkPointF2
        __init__(std::vector<(itkPointF2)> self, vectoritkPointF2 arg2) -> vectoritkPointF2
        __init__(std::vector<(itkPointF2)> self, std::vector< itkPointF2 >::size_type size) -> vectoritkPointF2
        __init__(std::vector<(itkPointF2)> self, std::vector< itkPointF2 >::size_type size, itkPointF2 value) -> vectoritkPointF2
        """
        _itkPointPython.vectoritkPointF2_swiginit(self, _itkPointPython.new_vectoritkPointF2(*args))

    def push_back(self, x: 'itkPointF2') -> "void":
        """push_back(vectoritkPointF2 self, itkPointF2 x)"""
        return _itkPointPython.vectoritkPointF2_push_back(self, x)


    def front(self) -> "std::vector< itkPointF2 >::value_type const &":
        """front(vectoritkPointF2 self) -> itkPointF2"""
        return _itkPointPython.vectoritkPointF2_front(self)


    def back(self) -> "std::vector< itkPointF2 >::value_type const &":
        """back(vectoritkPointF2 self) -> itkPointF2"""
        return _itkPointPython.vectoritkPointF2_back(self)


    def assign(self, n: 'std::vector< itkPointF2 >::size_type', x: 'itkPointF2') -> "void":
        """assign(vectoritkPointF2 self, std::vector< itkPointF2 >::size_type n, itkPointF2 x)"""
        return _itkPointPython.vectoritkPointF2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkPointF2 self, std::vector< itkPointF2 >::size_type new_size)
        resize(vectoritkPointF2 self, std::vector< itkPointF2 >::size_type new_size, itkPointF2 x)
        """
        return _itkPointPython.vectoritkPointF2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkPointF2 self, std::vector< itkPointF2 >::iterator pos, itkPointF2 x) -> std::vector< itkPointF2 >::iterator
        insert(vectoritkPointF2 self, std::vector< itkPointF2 >::iterator pos, std::vector< itkPointF2 >::size_type n, itkPointF2 x)
        """
        return _itkPointPython.vectoritkPointF2_insert(self, *args)


    def reserve(self, n: 'std::vector< itkPointF2 >::size_type') -> "void":
        """reserve(vectoritkPointF2 self, std::vector< itkPointF2 >::size_type n)"""
        return _itkPointPython.vectoritkPointF2_reserve(self, n)


    def capacity(self) -> "std::vector< itkPointF2 >::size_type":
        """capacity(vectoritkPointF2 self) -> std::vector< itkPointF2 >::size_type"""
        return _itkPointPython.vectoritkPointF2_capacity(self)

    __swig_destroy__ = _itkPointPython.delete_vectoritkPointF2
vectoritkPointF2.iterator = new_instancemethod(_itkPointPython.vectoritkPointF2_iterator, None, vectoritkPointF2)
vectoritkPointF2.__nonzero__ = new_instancemethod(_itkPointPython.vectoritkPointF2___nonzero__, None, vectoritkPointF2)
vectoritkPointF2.__bool__ = new_instancemethod(_itkPointPython.vectoritkPointF2___bool__, None, vectoritkPointF2)
vectoritkPointF2.__len__ = new_instancemethod(_itkPointPython.vectoritkPointF2___len__, None, vectoritkPointF2)
vectoritkPointF2.__getslice__ = new_instancemethod(_itkPointPython.vectoritkPointF2___getslice__, None, vectoritkPointF2)
vectoritkPointF2.__setslice__ = new_instancemethod(_itkPointPython.vectoritkPointF2___setslice__, None, vectoritkPointF2)
vectoritkPointF2.__delslice__ = new_instancemethod(_itkPointPython.vectoritkPointF2___delslice__, None, vectoritkPointF2)
vectoritkPointF2.__delitem__ = new_instancemethod(_itkPointPython.vectoritkPointF2___delitem__, None, vectoritkPointF2)
vectoritkPointF2.__getitem__ = new_instancemethod(_itkPointPython.vectoritkPointF2___getitem__, None, vectoritkPointF2)
vectoritkPointF2.__setitem__ = new_instancemethod(_itkPointPython.vectoritkPointF2___setitem__, None, vectoritkPointF2)
vectoritkPointF2.pop = new_instancemethod(_itkPointPython.vectoritkPointF2_pop, None, vectoritkPointF2)
vectoritkPointF2.append = new_instancemethod(_itkPointPython.vectoritkPointF2_append, None, vectoritkPointF2)
vectoritkPointF2.empty = new_instancemethod(_itkPointPython.vectoritkPointF2_empty, None, vectoritkPointF2)
vectoritkPointF2.size = new_instancemethod(_itkPointPython.vectoritkPointF2_size, None, vectoritkPointF2)
vectoritkPointF2.swap = new_instancemethod(_itkPointPython.vectoritkPointF2_swap, None, vectoritkPointF2)
vectoritkPointF2.begin = new_instancemethod(_itkPointPython.vectoritkPointF2_begin, None, vectoritkPointF2)
vectoritkPointF2.end = new_instancemethod(_itkPointPython.vectoritkPointF2_end, None, vectoritkPointF2)
vectoritkPointF2.rbegin = new_instancemethod(_itkPointPython.vectoritkPointF2_rbegin, None, vectoritkPointF2)
vectoritkPointF2.rend = new_instancemethod(_itkPointPython.vectoritkPointF2_rend, None, vectoritkPointF2)
vectoritkPointF2.clear = new_instancemethod(_itkPointPython.vectoritkPointF2_clear, None, vectoritkPointF2)
vectoritkPointF2.get_allocator = new_instancemethod(_itkPointPython.vectoritkPointF2_get_allocator, None, vectoritkPointF2)
vectoritkPointF2.pop_back = new_instancemethod(_itkPointPython.vectoritkPointF2_pop_back, None, vectoritkPointF2)
vectoritkPointF2.erase = new_instancemethod(_itkPointPython.vectoritkPointF2_erase, None, vectoritkPointF2)
vectoritkPointF2.push_back = new_instancemethod(_itkPointPython.vectoritkPointF2_push_back, None, vectoritkPointF2)
vectoritkPointF2.front = new_instancemethod(_itkPointPython.vectoritkPointF2_front, None, vectoritkPointF2)
vectoritkPointF2.back = new_instancemethod(_itkPointPython.vectoritkPointF2_back, None, vectoritkPointF2)
vectoritkPointF2.assign = new_instancemethod(_itkPointPython.vectoritkPointF2_assign, None, vectoritkPointF2)
vectoritkPointF2.resize = new_instancemethod(_itkPointPython.vectoritkPointF2_resize, None, vectoritkPointF2)
vectoritkPointF2.insert = new_instancemethod(_itkPointPython.vectoritkPointF2_insert, None, vectoritkPointF2)
vectoritkPointF2.reserve = new_instancemethod(_itkPointPython.vectoritkPointF2_reserve, None, vectoritkPointF2)
vectoritkPointF2.capacity = new_instancemethod(_itkPointPython.vectoritkPointF2_capacity, None, vectoritkPointF2)
vectoritkPointF2_swigregister = _itkPointPython.vectoritkPointF2_swigregister
vectoritkPointF2_swigregister(vectoritkPointF2)

class vectoritkPointD2(object):
    """Proxy of C++ std::vector<(itkPointD2)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkPointD2 self) -> SwigPyIterator"""
        return _itkPointPython.vectoritkPointD2_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkPointD2 self) -> bool"""
        return _itkPointPython.vectoritkPointD2___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkPointD2 self) -> bool"""
        return _itkPointPython.vectoritkPointD2___bool__(self)


    def __len__(self) -> "std::vector< itkPointD2 >::size_type":
        """__len__(vectoritkPointD2 self) -> std::vector< itkPointD2 >::size_type"""
        return _itkPointPython.vectoritkPointD2___len__(self)


    def __getslice__(self, i: 'std::vector< itkPointD2 >::difference_type', j: 'std::vector< itkPointD2 >::difference_type') -> "std::vector< itkPointD2,std::allocator< itkPointD2 > > *":
        """__getslice__(vectoritkPointD2 self, std::vector< itkPointD2 >::difference_type i, std::vector< itkPointD2 >::difference_type j) -> vectoritkPointD2"""
        return _itkPointPython.vectoritkPointD2___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkPointD2 self, std::vector< itkPointD2 >::difference_type i, std::vector< itkPointD2 >::difference_type j)
        __setslice__(vectoritkPointD2 self, std::vector< itkPointD2 >::difference_type i, std::vector< itkPointD2 >::difference_type j, vectoritkPointD2 v)
        """
        return _itkPointPython.vectoritkPointD2___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkPointD2 >::difference_type', j: 'std::vector< itkPointD2 >::difference_type') -> "void":
        """__delslice__(vectoritkPointD2 self, std::vector< itkPointD2 >::difference_type i, std::vector< itkPointD2 >::difference_type j)"""
        return _itkPointPython.vectoritkPointD2___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkPointD2 self, std::vector< itkPointD2 >::difference_type i)
        __delitem__(vectoritkPointD2 self, PySliceObject * slice)
        """
        return _itkPointPython.vectoritkPointD2___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkPointD2 >::value_type const &":
        """
        __getitem__(vectoritkPointD2 self, PySliceObject * slice) -> vectoritkPointD2
        __getitem__(vectoritkPointD2 self, std::vector< itkPointD2 >::difference_type i) -> itkPointD2
        """
        return _itkPointPython.vectoritkPointD2___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkPointD2 self, PySliceObject * slice, vectoritkPointD2 v)
        __setitem__(vectoritkPointD2 self, PySliceObject * slice)
        __setitem__(vectoritkPointD2 self, std::vector< itkPointD2 >::difference_type i, itkPointD2 x)
        """
        return _itkPointPython.vectoritkPointD2___setitem__(self, *args)


    def pop(self) -> "std::vector< itkPointD2 >::value_type":
        """pop(vectoritkPointD2 self) -> itkPointD2"""
        return _itkPointPython.vectoritkPointD2_pop(self)


    def append(self, x: 'itkPointD2') -> "void":
        """append(vectoritkPointD2 self, itkPointD2 x)"""
        return _itkPointPython.vectoritkPointD2_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkPointD2 self) -> bool"""
        return _itkPointPython.vectoritkPointD2_empty(self)


    def size(self) -> "std::vector< itkPointD2 >::size_type":
        """size(vectoritkPointD2 self) -> std::vector< itkPointD2 >::size_type"""
        return _itkPointPython.vectoritkPointD2_size(self)


    def swap(self, v: 'vectoritkPointD2') -> "void":
        """swap(vectoritkPointD2 self, vectoritkPointD2 v)"""
        return _itkPointPython.vectoritkPointD2_swap(self, v)


    def begin(self) -> "std::vector< itkPointD2 >::iterator":
        """begin(vectoritkPointD2 self) -> std::vector< itkPointD2 >::iterator"""
        return _itkPointPython.vectoritkPointD2_begin(self)


    def end(self) -> "std::vector< itkPointD2 >::iterator":
        """end(vectoritkPointD2 self) -> std::vector< itkPointD2 >::iterator"""
        return _itkPointPython.vectoritkPointD2_end(self)


    def rbegin(self) -> "std::vector< itkPointD2 >::reverse_iterator":
        """rbegin(vectoritkPointD2 self) -> std::vector< itkPointD2 >::reverse_iterator"""
        return _itkPointPython.vectoritkPointD2_rbegin(self)


    def rend(self) -> "std::vector< itkPointD2 >::reverse_iterator":
        """rend(vectoritkPointD2 self) -> std::vector< itkPointD2 >::reverse_iterator"""
        return _itkPointPython.vectoritkPointD2_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkPointD2 self)"""
        return _itkPointPython.vectoritkPointD2_clear(self)


    def get_allocator(self) -> "std::vector< itkPointD2 >::allocator_type":
        """get_allocator(vectoritkPointD2 self) -> std::vector< itkPointD2 >::allocator_type"""
        return _itkPointPython.vectoritkPointD2_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkPointD2 self)"""
        return _itkPointPython.vectoritkPointD2_pop_back(self)


    def erase(self, *args) -> "std::vector< itkPointD2 >::iterator":
        """
        erase(vectoritkPointD2 self, std::vector< itkPointD2 >::iterator pos) -> std::vector< itkPointD2 >::iterator
        erase(vectoritkPointD2 self, std::vector< itkPointD2 >::iterator first, std::vector< itkPointD2 >::iterator last) -> std::vector< itkPointD2 >::iterator
        """
        return _itkPointPython.vectoritkPointD2_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkPointD2)> self) -> vectoritkPointD2
        __init__(std::vector<(itkPointD2)> self, vectoritkPointD2 arg2) -> vectoritkPointD2
        __init__(std::vector<(itkPointD2)> self, std::vector< itkPointD2 >::size_type size) -> vectoritkPointD2
        __init__(std::vector<(itkPointD2)> self, std::vector< itkPointD2 >::size_type size, itkPointD2 value) -> vectoritkPointD2
        """
        _itkPointPython.vectoritkPointD2_swiginit(self, _itkPointPython.new_vectoritkPointD2(*args))

    def push_back(self, x: 'itkPointD2') -> "void":
        """push_back(vectoritkPointD2 self, itkPointD2 x)"""
        return _itkPointPython.vectoritkPointD2_push_back(self, x)


    def front(self) -> "std::vector< itkPointD2 >::value_type const &":
        """front(vectoritkPointD2 self) -> itkPointD2"""
        return _itkPointPython.vectoritkPointD2_front(self)


    def back(self) -> "std::vector< itkPointD2 >::value_type const &":
        """back(vectoritkPointD2 self) -> itkPointD2"""
        return _itkPointPython.vectoritkPointD2_back(self)


    def assign(self, n: 'std::vector< itkPointD2 >::size_type', x: 'itkPointD2') -> "void":
        """assign(vectoritkPointD2 self, std::vector< itkPointD2 >::size_type n, itkPointD2 x)"""
        return _itkPointPython.vectoritkPointD2_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkPointD2 self, std::vector< itkPointD2 >::size_type new_size)
        resize(vectoritkPointD2 self, std::vector< itkPointD2 >::size_type new_size, itkPointD2 x)
        """
        return _itkPointPython.vectoritkPointD2_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkPointD2 self, std::vector< itkPointD2 >::iterator pos, itkPointD2 x) -> std::vector< itkPointD2 >::iterator
        insert(vectoritkPointD2 self, std::vector< itkPointD2 >::iterator pos, std::vector< itkPointD2 >::size_type n, itkPointD2 x)
        """
        return _itkPointPython.vectoritkPointD2_insert(self, *args)


    def reserve(self, n: 'std::vector< itkPointD2 >::size_type') -> "void":
        """reserve(vectoritkPointD2 self, std::vector< itkPointD2 >::size_type n)"""
        return _itkPointPython.vectoritkPointD2_reserve(self, n)


    def capacity(self) -> "std::vector< itkPointD2 >::size_type":
        """capacity(vectoritkPointD2 self) -> std::vector< itkPointD2 >::size_type"""
        return _itkPointPython.vectoritkPointD2_capacity(self)

    __swig_destroy__ = _itkPointPython.delete_vectoritkPointD2
vectoritkPointD2.iterator = new_instancemethod(_itkPointPython.vectoritkPointD2_iterator, None, vectoritkPointD2)
vectoritkPointD2.__nonzero__ = new_instancemethod(_itkPointPython.vectoritkPointD2___nonzero__, None, vectoritkPointD2)
vectoritkPointD2.__bool__ = new_instancemethod(_itkPointPython.vectoritkPointD2___bool__, None, vectoritkPointD2)
vectoritkPointD2.__len__ = new_instancemethod(_itkPointPython.vectoritkPointD2___len__, None, vectoritkPointD2)
vectoritkPointD2.__getslice__ = new_instancemethod(_itkPointPython.vectoritkPointD2___getslice__, None, vectoritkPointD2)
vectoritkPointD2.__setslice__ = new_instancemethod(_itkPointPython.vectoritkPointD2___setslice__, None, vectoritkPointD2)
vectoritkPointD2.__delslice__ = new_instancemethod(_itkPointPython.vectoritkPointD2___delslice__, None, vectoritkPointD2)
vectoritkPointD2.__delitem__ = new_instancemethod(_itkPointPython.vectoritkPointD2___delitem__, None, vectoritkPointD2)
vectoritkPointD2.__getitem__ = new_instancemethod(_itkPointPython.vectoritkPointD2___getitem__, None, vectoritkPointD2)
vectoritkPointD2.__setitem__ = new_instancemethod(_itkPointPython.vectoritkPointD2___setitem__, None, vectoritkPointD2)
vectoritkPointD2.pop = new_instancemethod(_itkPointPython.vectoritkPointD2_pop, None, vectoritkPointD2)
vectoritkPointD2.append = new_instancemethod(_itkPointPython.vectoritkPointD2_append, None, vectoritkPointD2)
vectoritkPointD2.empty = new_instancemethod(_itkPointPython.vectoritkPointD2_empty, None, vectoritkPointD2)
vectoritkPointD2.size = new_instancemethod(_itkPointPython.vectoritkPointD2_size, None, vectoritkPointD2)
vectoritkPointD2.swap = new_instancemethod(_itkPointPython.vectoritkPointD2_swap, None, vectoritkPointD2)
vectoritkPointD2.begin = new_instancemethod(_itkPointPython.vectoritkPointD2_begin, None, vectoritkPointD2)
vectoritkPointD2.end = new_instancemethod(_itkPointPython.vectoritkPointD2_end, None, vectoritkPointD2)
vectoritkPointD2.rbegin = new_instancemethod(_itkPointPython.vectoritkPointD2_rbegin, None, vectoritkPointD2)
vectoritkPointD2.rend = new_instancemethod(_itkPointPython.vectoritkPointD2_rend, None, vectoritkPointD2)
vectoritkPointD2.clear = new_instancemethod(_itkPointPython.vectoritkPointD2_clear, None, vectoritkPointD2)
vectoritkPointD2.get_allocator = new_instancemethod(_itkPointPython.vectoritkPointD2_get_allocator, None, vectoritkPointD2)
vectoritkPointD2.pop_back = new_instancemethod(_itkPointPython.vectoritkPointD2_pop_back, None, vectoritkPointD2)
vectoritkPointD2.erase = new_instancemethod(_itkPointPython.vectoritkPointD2_erase, None, vectoritkPointD2)
vectoritkPointD2.push_back = new_instancemethod(_itkPointPython.vectoritkPointD2_push_back, None, vectoritkPointD2)
vectoritkPointD2.front = new_instancemethod(_itkPointPython.vectoritkPointD2_front, None, vectoritkPointD2)
vectoritkPointD2.back = new_instancemethod(_itkPointPython.vectoritkPointD2_back, None, vectoritkPointD2)
vectoritkPointD2.assign = new_instancemethod(_itkPointPython.vectoritkPointD2_assign, None, vectoritkPointD2)
vectoritkPointD2.resize = new_instancemethod(_itkPointPython.vectoritkPointD2_resize, None, vectoritkPointD2)
vectoritkPointD2.insert = new_instancemethod(_itkPointPython.vectoritkPointD2_insert, None, vectoritkPointD2)
vectoritkPointD2.reserve = new_instancemethod(_itkPointPython.vectoritkPointD2_reserve, None, vectoritkPointD2)
vectoritkPointD2.capacity = new_instancemethod(_itkPointPython.vectoritkPointD2_capacity, None, vectoritkPointD2)
vectoritkPointD2_swigregister = _itkPointPython.vectoritkPointD2_swigregister
vectoritkPointD2_swigregister(vectoritkPointD2)

class vectoritkPointF3(object):
    """Proxy of C++ std::vector<(itkPointF3)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkPointF3 self) -> SwigPyIterator"""
        return _itkPointPython.vectoritkPointF3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkPointF3 self) -> bool"""
        return _itkPointPython.vectoritkPointF3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkPointF3 self) -> bool"""
        return _itkPointPython.vectoritkPointF3___bool__(self)


    def __len__(self) -> "std::vector< itkPointF3 >::size_type":
        """__len__(vectoritkPointF3 self) -> std::vector< itkPointF3 >::size_type"""
        return _itkPointPython.vectoritkPointF3___len__(self)


    def __getslice__(self, i: 'std::vector< itkPointF3 >::difference_type', j: 'std::vector< itkPointF3 >::difference_type') -> "std::vector< itkPointF3,std::allocator< itkPointF3 > > *":
        """__getslice__(vectoritkPointF3 self, std::vector< itkPointF3 >::difference_type i, std::vector< itkPointF3 >::difference_type j) -> vectoritkPointF3"""
        return _itkPointPython.vectoritkPointF3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkPointF3 self, std::vector< itkPointF3 >::difference_type i, std::vector< itkPointF3 >::difference_type j)
        __setslice__(vectoritkPointF3 self, std::vector< itkPointF3 >::difference_type i, std::vector< itkPointF3 >::difference_type j, vectoritkPointF3 v)
        """
        return _itkPointPython.vectoritkPointF3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkPointF3 >::difference_type', j: 'std::vector< itkPointF3 >::difference_type') -> "void":
        """__delslice__(vectoritkPointF3 self, std::vector< itkPointF3 >::difference_type i, std::vector< itkPointF3 >::difference_type j)"""
        return _itkPointPython.vectoritkPointF3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkPointF3 self, std::vector< itkPointF3 >::difference_type i)
        __delitem__(vectoritkPointF3 self, PySliceObject * slice)
        """
        return _itkPointPython.vectoritkPointF3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkPointF3 >::value_type const &":
        """
        __getitem__(vectoritkPointF3 self, PySliceObject * slice) -> vectoritkPointF3
        __getitem__(vectoritkPointF3 self, std::vector< itkPointF3 >::difference_type i) -> itkPointF3
        """
        return _itkPointPython.vectoritkPointF3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkPointF3 self, PySliceObject * slice, vectoritkPointF3 v)
        __setitem__(vectoritkPointF3 self, PySliceObject * slice)
        __setitem__(vectoritkPointF3 self, std::vector< itkPointF3 >::difference_type i, itkPointF3 x)
        """
        return _itkPointPython.vectoritkPointF3___setitem__(self, *args)


    def pop(self) -> "std::vector< itkPointF3 >::value_type":
        """pop(vectoritkPointF3 self) -> itkPointF3"""
        return _itkPointPython.vectoritkPointF3_pop(self)


    def append(self, x: 'itkPointF3') -> "void":
        """append(vectoritkPointF3 self, itkPointF3 x)"""
        return _itkPointPython.vectoritkPointF3_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkPointF3 self) -> bool"""
        return _itkPointPython.vectoritkPointF3_empty(self)


    def size(self) -> "std::vector< itkPointF3 >::size_type":
        """size(vectoritkPointF3 self) -> std::vector< itkPointF3 >::size_type"""
        return _itkPointPython.vectoritkPointF3_size(self)


    def swap(self, v: 'vectoritkPointF3') -> "void":
        """swap(vectoritkPointF3 self, vectoritkPointF3 v)"""
        return _itkPointPython.vectoritkPointF3_swap(self, v)


    def begin(self) -> "std::vector< itkPointF3 >::iterator":
        """begin(vectoritkPointF3 self) -> std::vector< itkPointF3 >::iterator"""
        return _itkPointPython.vectoritkPointF3_begin(self)


    def end(self) -> "std::vector< itkPointF3 >::iterator":
        """end(vectoritkPointF3 self) -> std::vector< itkPointF3 >::iterator"""
        return _itkPointPython.vectoritkPointF3_end(self)


    def rbegin(self) -> "std::vector< itkPointF3 >::reverse_iterator":
        """rbegin(vectoritkPointF3 self) -> std::vector< itkPointF3 >::reverse_iterator"""
        return _itkPointPython.vectoritkPointF3_rbegin(self)


    def rend(self) -> "std::vector< itkPointF3 >::reverse_iterator":
        """rend(vectoritkPointF3 self) -> std::vector< itkPointF3 >::reverse_iterator"""
        return _itkPointPython.vectoritkPointF3_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkPointF3 self)"""
        return _itkPointPython.vectoritkPointF3_clear(self)


    def get_allocator(self) -> "std::vector< itkPointF3 >::allocator_type":
        """get_allocator(vectoritkPointF3 self) -> std::vector< itkPointF3 >::allocator_type"""
        return _itkPointPython.vectoritkPointF3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkPointF3 self)"""
        return _itkPointPython.vectoritkPointF3_pop_back(self)


    def erase(self, *args) -> "std::vector< itkPointF3 >::iterator":
        """
        erase(vectoritkPointF3 self, std::vector< itkPointF3 >::iterator pos) -> std::vector< itkPointF3 >::iterator
        erase(vectoritkPointF3 self, std::vector< itkPointF3 >::iterator first, std::vector< itkPointF3 >::iterator last) -> std::vector< itkPointF3 >::iterator
        """
        return _itkPointPython.vectoritkPointF3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkPointF3)> self) -> vectoritkPointF3
        __init__(std::vector<(itkPointF3)> self, vectoritkPointF3 arg2) -> vectoritkPointF3
        __init__(std::vector<(itkPointF3)> self, std::vector< itkPointF3 >::size_type size) -> vectoritkPointF3
        __init__(std::vector<(itkPointF3)> self, std::vector< itkPointF3 >::size_type size, itkPointF3 value) -> vectoritkPointF3
        """
        _itkPointPython.vectoritkPointF3_swiginit(self, _itkPointPython.new_vectoritkPointF3(*args))

    def push_back(self, x: 'itkPointF3') -> "void":
        """push_back(vectoritkPointF3 self, itkPointF3 x)"""
        return _itkPointPython.vectoritkPointF3_push_back(self, x)


    def front(self) -> "std::vector< itkPointF3 >::value_type const &":
        """front(vectoritkPointF3 self) -> itkPointF3"""
        return _itkPointPython.vectoritkPointF3_front(self)


    def back(self) -> "std::vector< itkPointF3 >::value_type const &":
        """back(vectoritkPointF3 self) -> itkPointF3"""
        return _itkPointPython.vectoritkPointF3_back(self)


    def assign(self, n: 'std::vector< itkPointF3 >::size_type', x: 'itkPointF3') -> "void":
        """assign(vectoritkPointF3 self, std::vector< itkPointF3 >::size_type n, itkPointF3 x)"""
        return _itkPointPython.vectoritkPointF3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkPointF3 self, std::vector< itkPointF3 >::size_type new_size)
        resize(vectoritkPointF3 self, std::vector< itkPointF3 >::size_type new_size, itkPointF3 x)
        """
        return _itkPointPython.vectoritkPointF3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkPointF3 self, std::vector< itkPointF3 >::iterator pos, itkPointF3 x) -> std::vector< itkPointF3 >::iterator
        insert(vectoritkPointF3 self, std::vector< itkPointF3 >::iterator pos, std::vector< itkPointF3 >::size_type n, itkPointF3 x)
        """
        return _itkPointPython.vectoritkPointF3_insert(self, *args)


    def reserve(self, n: 'std::vector< itkPointF3 >::size_type') -> "void":
        """reserve(vectoritkPointF3 self, std::vector< itkPointF3 >::size_type n)"""
        return _itkPointPython.vectoritkPointF3_reserve(self, n)


    def capacity(self) -> "std::vector< itkPointF3 >::size_type":
        """capacity(vectoritkPointF3 self) -> std::vector< itkPointF3 >::size_type"""
        return _itkPointPython.vectoritkPointF3_capacity(self)

    __swig_destroy__ = _itkPointPython.delete_vectoritkPointF3
vectoritkPointF3.iterator = new_instancemethod(_itkPointPython.vectoritkPointF3_iterator, None, vectoritkPointF3)
vectoritkPointF3.__nonzero__ = new_instancemethod(_itkPointPython.vectoritkPointF3___nonzero__, None, vectoritkPointF3)
vectoritkPointF3.__bool__ = new_instancemethod(_itkPointPython.vectoritkPointF3___bool__, None, vectoritkPointF3)
vectoritkPointF3.__len__ = new_instancemethod(_itkPointPython.vectoritkPointF3___len__, None, vectoritkPointF3)
vectoritkPointF3.__getslice__ = new_instancemethod(_itkPointPython.vectoritkPointF3___getslice__, None, vectoritkPointF3)
vectoritkPointF3.__setslice__ = new_instancemethod(_itkPointPython.vectoritkPointF3___setslice__, None, vectoritkPointF3)
vectoritkPointF3.__delslice__ = new_instancemethod(_itkPointPython.vectoritkPointF3___delslice__, None, vectoritkPointF3)
vectoritkPointF3.__delitem__ = new_instancemethod(_itkPointPython.vectoritkPointF3___delitem__, None, vectoritkPointF3)
vectoritkPointF3.__getitem__ = new_instancemethod(_itkPointPython.vectoritkPointF3___getitem__, None, vectoritkPointF3)
vectoritkPointF3.__setitem__ = new_instancemethod(_itkPointPython.vectoritkPointF3___setitem__, None, vectoritkPointF3)
vectoritkPointF3.pop = new_instancemethod(_itkPointPython.vectoritkPointF3_pop, None, vectoritkPointF3)
vectoritkPointF3.append = new_instancemethod(_itkPointPython.vectoritkPointF3_append, None, vectoritkPointF3)
vectoritkPointF3.empty = new_instancemethod(_itkPointPython.vectoritkPointF3_empty, None, vectoritkPointF3)
vectoritkPointF3.size = new_instancemethod(_itkPointPython.vectoritkPointF3_size, None, vectoritkPointF3)
vectoritkPointF3.swap = new_instancemethod(_itkPointPython.vectoritkPointF3_swap, None, vectoritkPointF3)
vectoritkPointF3.begin = new_instancemethod(_itkPointPython.vectoritkPointF3_begin, None, vectoritkPointF3)
vectoritkPointF3.end = new_instancemethod(_itkPointPython.vectoritkPointF3_end, None, vectoritkPointF3)
vectoritkPointF3.rbegin = new_instancemethod(_itkPointPython.vectoritkPointF3_rbegin, None, vectoritkPointF3)
vectoritkPointF3.rend = new_instancemethod(_itkPointPython.vectoritkPointF3_rend, None, vectoritkPointF3)
vectoritkPointF3.clear = new_instancemethod(_itkPointPython.vectoritkPointF3_clear, None, vectoritkPointF3)
vectoritkPointF3.get_allocator = new_instancemethod(_itkPointPython.vectoritkPointF3_get_allocator, None, vectoritkPointF3)
vectoritkPointF3.pop_back = new_instancemethod(_itkPointPython.vectoritkPointF3_pop_back, None, vectoritkPointF3)
vectoritkPointF3.erase = new_instancemethod(_itkPointPython.vectoritkPointF3_erase, None, vectoritkPointF3)
vectoritkPointF3.push_back = new_instancemethod(_itkPointPython.vectoritkPointF3_push_back, None, vectoritkPointF3)
vectoritkPointF3.front = new_instancemethod(_itkPointPython.vectoritkPointF3_front, None, vectoritkPointF3)
vectoritkPointF3.back = new_instancemethod(_itkPointPython.vectoritkPointF3_back, None, vectoritkPointF3)
vectoritkPointF3.assign = new_instancemethod(_itkPointPython.vectoritkPointF3_assign, None, vectoritkPointF3)
vectoritkPointF3.resize = new_instancemethod(_itkPointPython.vectoritkPointF3_resize, None, vectoritkPointF3)
vectoritkPointF3.insert = new_instancemethod(_itkPointPython.vectoritkPointF3_insert, None, vectoritkPointF3)
vectoritkPointF3.reserve = new_instancemethod(_itkPointPython.vectoritkPointF3_reserve, None, vectoritkPointF3)
vectoritkPointF3.capacity = new_instancemethod(_itkPointPython.vectoritkPointF3_capacity, None, vectoritkPointF3)
vectoritkPointF3_swigregister = _itkPointPython.vectoritkPointF3_swigregister
vectoritkPointF3_swigregister(vectoritkPointF3)

class vectoritkPointD3(object):
    """Proxy of C++ std::vector<(itkPointD3)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkPointD3 self) -> SwigPyIterator"""
        return _itkPointPython.vectoritkPointD3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkPointD3 self) -> bool"""
        return _itkPointPython.vectoritkPointD3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkPointD3 self) -> bool"""
        return _itkPointPython.vectoritkPointD3___bool__(self)


    def __len__(self) -> "std::vector< itkPointD3 >::size_type":
        """__len__(vectoritkPointD3 self) -> std::vector< itkPointD3 >::size_type"""
        return _itkPointPython.vectoritkPointD3___len__(self)


    def __getslice__(self, i: 'std::vector< itkPointD3 >::difference_type', j: 'std::vector< itkPointD3 >::difference_type') -> "std::vector< itkPointD3,std::allocator< itkPointD3 > > *":
        """__getslice__(vectoritkPointD3 self, std::vector< itkPointD3 >::difference_type i, std::vector< itkPointD3 >::difference_type j) -> vectoritkPointD3"""
        return _itkPointPython.vectoritkPointD3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkPointD3 self, std::vector< itkPointD3 >::difference_type i, std::vector< itkPointD3 >::difference_type j)
        __setslice__(vectoritkPointD3 self, std::vector< itkPointD3 >::difference_type i, std::vector< itkPointD3 >::difference_type j, vectoritkPointD3 v)
        """
        return _itkPointPython.vectoritkPointD3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkPointD3 >::difference_type', j: 'std::vector< itkPointD3 >::difference_type') -> "void":
        """__delslice__(vectoritkPointD3 self, std::vector< itkPointD3 >::difference_type i, std::vector< itkPointD3 >::difference_type j)"""
        return _itkPointPython.vectoritkPointD3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkPointD3 self, std::vector< itkPointD3 >::difference_type i)
        __delitem__(vectoritkPointD3 self, PySliceObject * slice)
        """
        return _itkPointPython.vectoritkPointD3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkPointD3 >::value_type const &":
        """
        __getitem__(vectoritkPointD3 self, PySliceObject * slice) -> vectoritkPointD3
        __getitem__(vectoritkPointD3 self, std::vector< itkPointD3 >::difference_type i) -> itkPointD3
        """
        return _itkPointPython.vectoritkPointD3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkPointD3 self, PySliceObject * slice, vectoritkPointD3 v)
        __setitem__(vectoritkPointD3 self, PySliceObject * slice)
        __setitem__(vectoritkPointD3 self, std::vector< itkPointD3 >::difference_type i, itkPointD3 x)
        """
        return _itkPointPython.vectoritkPointD3___setitem__(self, *args)


    def pop(self) -> "std::vector< itkPointD3 >::value_type":
        """pop(vectoritkPointD3 self) -> itkPointD3"""
        return _itkPointPython.vectoritkPointD3_pop(self)


    def append(self, x: 'itkPointD3') -> "void":
        """append(vectoritkPointD3 self, itkPointD3 x)"""
        return _itkPointPython.vectoritkPointD3_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkPointD3 self) -> bool"""
        return _itkPointPython.vectoritkPointD3_empty(self)


    def size(self) -> "std::vector< itkPointD3 >::size_type":
        """size(vectoritkPointD3 self) -> std::vector< itkPointD3 >::size_type"""
        return _itkPointPython.vectoritkPointD3_size(self)


    def swap(self, v: 'vectoritkPointD3') -> "void":
        """swap(vectoritkPointD3 self, vectoritkPointD3 v)"""
        return _itkPointPython.vectoritkPointD3_swap(self, v)


    def begin(self) -> "std::vector< itkPointD3 >::iterator":
        """begin(vectoritkPointD3 self) -> std::vector< itkPointD3 >::iterator"""
        return _itkPointPython.vectoritkPointD3_begin(self)


    def end(self) -> "std::vector< itkPointD3 >::iterator":
        """end(vectoritkPointD3 self) -> std::vector< itkPointD3 >::iterator"""
        return _itkPointPython.vectoritkPointD3_end(self)


    def rbegin(self) -> "std::vector< itkPointD3 >::reverse_iterator":
        """rbegin(vectoritkPointD3 self) -> std::vector< itkPointD3 >::reverse_iterator"""
        return _itkPointPython.vectoritkPointD3_rbegin(self)


    def rend(self) -> "std::vector< itkPointD3 >::reverse_iterator":
        """rend(vectoritkPointD3 self) -> std::vector< itkPointD3 >::reverse_iterator"""
        return _itkPointPython.vectoritkPointD3_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkPointD3 self)"""
        return _itkPointPython.vectoritkPointD3_clear(self)


    def get_allocator(self) -> "std::vector< itkPointD3 >::allocator_type":
        """get_allocator(vectoritkPointD3 self) -> std::vector< itkPointD3 >::allocator_type"""
        return _itkPointPython.vectoritkPointD3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkPointD3 self)"""
        return _itkPointPython.vectoritkPointD3_pop_back(self)


    def erase(self, *args) -> "std::vector< itkPointD3 >::iterator":
        """
        erase(vectoritkPointD3 self, std::vector< itkPointD3 >::iterator pos) -> std::vector< itkPointD3 >::iterator
        erase(vectoritkPointD3 self, std::vector< itkPointD3 >::iterator first, std::vector< itkPointD3 >::iterator last) -> std::vector< itkPointD3 >::iterator
        """
        return _itkPointPython.vectoritkPointD3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkPointD3)> self) -> vectoritkPointD3
        __init__(std::vector<(itkPointD3)> self, vectoritkPointD3 arg2) -> vectoritkPointD3
        __init__(std::vector<(itkPointD3)> self, std::vector< itkPointD3 >::size_type size) -> vectoritkPointD3
        __init__(std::vector<(itkPointD3)> self, std::vector< itkPointD3 >::size_type size, itkPointD3 value) -> vectoritkPointD3
        """
        _itkPointPython.vectoritkPointD3_swiginit(self, _itkPointPython.new_vectoritkPointD3(*args))

    def push_back(self, x: 'itkPointD3') -> "void":
        """push_back(vectoritkPointD3 self, itkPointD3 x)"""
        return _itkPointPython.vectoritkPointD3_push_back(self, x)


    def front(self) -> "std::vector< itkPointD3 >::value_type const &":
        """front(vectoritkPointD3 self) -> itkPointD3"""
        return _itkPointPython.vectoritkPointD3_front(self)


    def back(self) -> "std::vector< itkPointD3 >::value_type const &":
        """back(vectoritkPointD3 self) -> itkPointD3"""
        return _itkPointPython.vectoritkPointD3_back(self)


    def assign(self, n: 'std::vector< itkPointD3 >::size_type', x: 'itkPointD3') -> "void":
        """assign(vectoritkPointD3 self, std::vector< itkPointD3 >::size_type n, itkPointD3 x)"""
        return _itkPointPython.vectoritkPointD3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkPointD3 self, std::vector< itkPointD3 >::size_type new_size)
        resize(vectoritkPointD3 self, std::vector< itkPointD3 >::size_type new_size, itkPointD3 x)
        """
        return _itkPointPython.vectoritkPointD3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkPointD3 self, std::vector< itkPointD3 >::iterator pos, itkPointD3 x) -> std::vector< itkPointD3 >::iterator
        insert(vectoritkPointD3 self, std::vector< itkPointD3 >::iterator pos, std::vector< itkPointD3 >::size_type n, itkPointD3 x)
        """
        return _itkPointPython.vectoritkPointD3_insert(self, *args)


    def reserve(self, n: 'std::vector< itkPointD3 >::size_type') -> "void":
        """reserve(vectoritkPointD3 self, std::vector< itkPointD3 >::size_type n)"""
        return _itkPointPython.vectoritkPointD3_reserve(self, n)


    def capacity(self) -> "std::vector< itkPointD3 >::size_type":
        """capacity(vectoritkPointD3 self) -> std::vector< itkPointD3 >::size_type"""
        return _itkPointPython.vectoritkPointD3_capacity(self)

    __swig_destroy__ = _itkPointPython.delete_vectoritkPointD3
vectoritkPointD3.iterator = new_instancemethod(_itkPointPython.vectoritkPointD3_iterator, None, vectoritkPointD3)
vectoritkPointD3.__nonzero__ = new_instancemethod(_itkPointPython.vectoritkPointD3___nonzero__, None, vectoritkPointD3)
vectoritkPointD3.__bool__ = new_instancemethod(_itkPointPython.vectoritkPointD3___bool__, None, vectoritkPointD3)
vectoritkPointD3.__len__ = new_instancemethod(_itkPointPython.vectoritkPointD3___len__, None, vectoritkPointD3)
vectoritkPointD3.__getslice__ = new_instancemethod(_itkPointPython.vectoritkPointD3___getslice__, None, vectoritkPointD3)
vectoritkPointD3.__setslice__ = new_instancemethod(_itkPointPython.vectoritkPointD3___setslice__, None, vectoritkPointD3)
vectoritkPointD3.__delslice__ = new_instancemethod(_itkPointPython.vectoritkPointD3___delslice__, None, vectoritkPointD3)
vectoritkPointD3.__delitem__ = new_instancemethod(_itkPointPython.vectoritkPointD3___delitem__, None, vectoritkPointD3)
vectoritkPointD3.__getitem__ = new_instancemethod(_itkPointPython.vectoritkPointD3___getitem__, None, vectoritkPointD3)
vectoritkPointD3.__setitem__ = new_instancemethod(_itkPointPython.vectoritkPointD3___setitem__, None, vectoritkPointD3)
vectoritkPointD3.pop = new_instancemethod(_itkPointPython.vectoritkPointD3_pop, None, vectoritkPointD3)
vectoritkPointD3.append = new_instancemethod(_itkPointPython.vectoritkPointD3_append, None, vectoritkPointD3)
vectoritkPointD3.empty = new_instancemethod(_itkPointPython.vectoritkPointD3_empty, None, vectoritkPointD3)
vectoritkPointD3.size = new_instancemethod(_itkPointPython.vectoritkPointD3_size, None, vectoritkPointD3)
vectoritkPointD3.swap = new_instancemethod(_itkPointPython.vectoritkPointD3_swap, None, vectoritkPointD3)
vectoritkPointD3.begin = new_instancemethod(_itkPointPython.vectoritkPointD3_begin, None, vectoritkPointD3)
vectoritkPointD3.end = new_instancemethod(_itkPointPython.vectoritkPointD3_end, None, vectoritkPointD3)
vectoritkPointD3.rbegin = new_instancemethod(_itkPointPython.vectoritkPointD3_rbegin, None, vectoritkPointD3)
vectoritkPointD3.rend = new_instancemethod(_itkPointPython.vectoritkPointD3_rend, None, vectoritkPointD3)
vectoritkPointD3.clear = new_instancemethod(_itkPointPython.vectoritkPointD3_clear, None, vectoritkPointD3)
vectoritkPointD3.get_allocator = new_instancemethod(_itkPointPython.vectoritkPointD3_get_allocator, None, vectoritkPointD3)
vectoritkPointD3.pop_back = new_instancemethod(_itkPointPython.vectoritkPointD3_pop_back, None, vectoritkPointD3)
vectoritkPointD3.erase = new_instancemethod(_itkPointPython.vectoritkPointD3_erase, None, vectoritkPointD3)
vectoritkPointD3.push_back = new_instancemethod(_itkPointPython.vectoritkPointD3_push_back, None, vectoritkPointD3)
vectoritkPointD3.front = new_instancemethod(_itkPointPython.vectoritkPointD3_front, None, vectoritkPointD3)
vectoritkPointD3.back = new_instancemethod(_itkPointPython.vectoritkPointD3_back, None, vectoritkPointD3)
vectoritkPointD3.assign = new_instancemethod(_itkPointPython.vectoritkPointD3_assign, None, vectoritkPointD3)
vectoritkPointD3.resize = new_instancemethod(_itkPointPython.vectoritkPointD3_resize, None, vectoritkPointD3)
vectoritkPointD3.insert = new_instancemethod(_itkPointPython.vectoritkPointD3_insert, None, vectoritkPointD3)
vectoritkPointD3.reserve = new_instancemethod(_itkPointPython.vectoritkPointD3_reserve, None, vectoritkPointD3)
vectoritkPointD3.capacity = new_instancemethod(_itkPointPython.vectoritkPointD3_capacity, None, vectoritkPointD3)
vectoritkPointD3_swigregister = _itkPointPython.vectoritkPointD3_swigregister
vectoritkPointD3_swigregister(vectoritkPointD3)

class vectoritkPointF4(object):
    """Proxy of C++ std::vector<(itkPointF4)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkPointF4 self) -> SwigPyIterator"""
        return _itkPointPython.vectoritkPointF4_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkPointF4 self) -> bool"""
        return _itkPointPython.vectoritkPointF4___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkPointF4 self) -> bool"""
        return _itkPointPython.vectoritkPointF4___bool__(self)


    def __len__(self) -> "std::vector< itkPointF4 >::size_type":
        """__len__(vectoritkPointF4 self) -> std::vector< itkPointF4 >::size_type"""
        return _itkPointPython.vectoritkPointF4___len__(self)


    def __getslice__(self, i: 'std::vector< itkPointF4 >::difference_type', j: 'std::vector< itkPointF4 >::difference_type') -> "std::vector< itkPointF4,std::allocator< itkPointF4 > > *":
        """__getslice__(vectoritkPointF4 self, std::vector< itkPointF4 >::difference_type i, std::vector< itkPointF4 >::difference_type j) -> vectoritkPointF4"""
        return _itkPointPython.vectoritkPointF4___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkPointF4 self, std::vector< itkPointF4 >::difference_type i, std::vector< itkPointF4 >::difference_type j)
        __setslice__(vectoritkPointF4 self, std::vector< itkPointF4 >::difference_type i, std::vector< itkPointF4 >::difference_type j, vectoritkPointF4 v)
        """
        return _itkPointPython.vectoritkPointF4___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkPointF4 >::difference_type', j: 'std::vector< itkPointF4 >::difference_type') -> "void":
        """__delslice__(vectoritkPointF4 self, std::vector< itkPointF4 >::difference_type i, std::vector< itkPointF4 >::difference_type j)"""
        return _itkPointPython.vectoritkPointF4___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkPointF4 self, std::vector< itkPointF4 >::difference_type i)
        __delitem__(vectoritkPointF4 self, PySliceObject * slice)
        """
        return _itkPointPython.vectoritkPointF4___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkPointF4 >::value_type const &":
        """
        __getitem__(vectoritkPointF4 self, PySliceObject * slice) -> vectoritkPointF4
        __getitem__(vectoritkPointF4 self, std::vector< itkPointF4 >::difference_type i) -> itkPointF4
        """
        return _itkPointPython.vectoritkPointF4___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkPointF4 self, PySliceObject * slice, vectoritkPointF4 v)
        __setitem__(vectoritkPointF4 self, PySliceObject * slice)
        __setitem__(vectoritkPointF4 self, std::vector< itkPointF4 >::difference_type i, itkPointF4 x)
        """
        return _itkPointPython.vectoritkPointF4___setitem__(self, *args)


    def pop(self) -> "std::vector< itkPointF4 >::value_type":
        """pop(vectoritkPointF4 self) -> itkPointF4"""
        return _itkPointPython.vectoritkPointF4_pop(self)


    def append(self, x: 'itkPointF4') -> "void":
        """append(vectoritkPointF4 self, itkPointF4 x)"""
        return _itkPointPython.vectoritkPointF4_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkPointF4 self) -> bool"""
        return _itkPointPython.vectoritkPointF4_empty(self)


    def size(self) -> "std::vector< itkPointF4 >::size_type":
        """size(vectoritkPointF4 self) -> std::vector< itkPointF4 >::size_type"""
        return _itkPointPython.vectoritkPointF4_size(self)


    def swap(self, v: 'vectoritkPointF4') -> "void":
        """swap(vectoritkPointF4 self, vectoritkPointF4 v)"""
        return _itkPointPython.vectoritkPointF4_swap(self, v)


    def begin(self) -> "std::vector< itkPointF4 >::iterator":
        """begin(vectoritkPointF4 self) -> std::vector< itkPointF4 >::iterator"""
        return _itkPointPython.vectoritkPointF4_begin(self)


    def end(self) -> "std::vector< itkPointF4 >::iterator":
        """end(vectoritkPointF4 self) -> std::vector< itkPointF4 >::iterator"""
        return _itkPointPython.vectoritkPointF4_end(self)


    def rbegin(self) -> "std::vector< itkPointF4 >::reverse_iterator":
        """rbegin(vectoritkPointF4 self) -> std::vector< itkPointF4 >::reverse_iterator"""
        return _itkPointPython.vectoritkPointF4_rbegin(self)


    def rend(self) -> "std::vector< itkPointF4 >::reverse_iterator":
        """rend(vectoritkPointF4 self) -> std::vector< itkPointF4 >::reverse_iterator"""
        return _itkPointPython.vectoritkPointF4_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkPointF4 self)"""
        return _itkPointPython.vectoritkPointF4_clear(self)


    def get_allocator(self) -> "std::vector< itkPointF4 >::allocator_type":
        """get_allocator(vectoritkPointF4 self) -> std::vector< itkPointF4 >::allocator_type"""
        return _itkPointPython.vectoritkPointF4_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkPointF4 self)"""
        return _itkPointPython.vectoritkPointF4_pop_back(self)


    def erase(self, *args) -> "std::vector< itkPointF4 >::iterator":
        """
        erase(vectoritkPointF4 self, std::vector< itkPointF4 >::iterator pos) -> std::vector< itkPointF4 >::iterator
        erase(vectoritkPointF4 self, std::vector< itkPointF4 >::iterator first, std::vector< itkPointF4 >::iterator last) -> std::vector< itkPointF4 >::iterator
        """
        return _itkPointPython.vectoritkPointF4_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkPointF4)> self) -> vectoritkPointF4
        __init__(std::vector<(itkPointF4)> self, vectoritkPointF4 arg2) -> vectoritkPointF4
        __init__(std::vector<(itkPointF4)> self, std::vector< itkPointF4 >::size_type size) -> vectoritkPointF4
        __init__(std::vector<(itkPointF4)> self, std::vector< itkPointF4 >::size_type size, itkPointF4 value) -> vectoritkPointF4
        """
        _itkPointPython.vectoritkPointF4_swiginit(self, _itkPointPython.new_vectoritkPointF4(*args))

    def push_back(self, x: 'itkPointF4') -> "void":
        """push_back(vectoritkPointF4 self, itkPointF4 x)"""
        return _itkPointPython.vectoritkPointF4_push_back(self, x)


    def front(self) -> "std::vector< itkPointF4 >::value_type const &":
        """front(vectoritkPointF4 self) -> itkPointF4"""
        return _itkPointPython.vectoritkPointF4_front(self)


    def back(self) -> "std::vector< itkPointF4 >::value_type const &":
        """back(vectoritkPointF4 self) -> itkPointF4"""
        return _itkPointPython.vectoritkPointF4_back(self)


    def assign(self, n: 'std::vector< itkPointF4 >::size_type', x: 'itkPointF4') -> "void":
        """assign(vectoritkPointF4 self, std::vector< itkPointF4 >::size_type n, itkPointF4 x)"""
        return _itkPointPython.vectoritkPointF4_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkPointF4 self, std::vector< itkPointF4 >::size_type new_size)
        resize(vectoritkPointF4 self, std::vector< itkPointF4 >::size_type new_size, itkPointF4 x)
        """
        return _itkPointPython.vectoritkPointF4_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkPointF4 self, std::vector< itkPointF4 >::iterator pos, itkPointF4 x) -> std::vector< itkPointF4 >::iterator
        insert(vectoritkPointF4 self, std::vector< itkPointF4 >::iterator pos, std::vector< itkPointF4 >::size_type n, itkPointF4 x)
        """
        return _itkPointPython.vectoritkPointF4_insert(self, *args)


    def reserve(self, n: 'std::vector< itkPointF4 >::size_type') -> "void":
        """reserve(vectoritkPointF4 self, std::vector< itkPointF4 >::size_type n)"""
        return _itkPointPython.vectoritkPointF4_reserve(self, n)


    def capacity(self) -> "std::vector< itkPointF4 >::size_type":
        """capacity(vectoritkPointF4 self) -> std::vector< itkPointF4 >::size_type"""
        return _itkPointPython.vectoritkPointF4_capacity(self)

    __swig_destroy__ = _itkPointPython.delete_vectoritkPointF4
vectoritkPointF4.iterator = new_instancemethod(_itkPointPython.vectoritkPointF4_iterator, None, vectoritkPointF4)
vectoritkPointF4.__nonzero__ = new_instancemethod(_itkPointPython.vectoritkPointF4___nonzero__, None, vectoritkPointF4)
vectoritkPointF4.__bool__ = new_instancemethod(_itkPointPython.vectoritkPointF4___bool__, None, vectoritkPointF4)
vectoritkPointF4.__len__ = new_instancemethod(_itkPointPython.vectoritkPointF4___len__, None, vectoritkPointF4)
vectoritkPointF4.__getslice__ = new_instancemethod(_itkPointPython.vectoritkPointF4___getslice__, None, vectoritkPointF4)
vectoritkPointF4.__setslice__ = new_instancemethod(_itkPointPython.vectoritkPointF4___setslice__, None, vectoritkPointF4)
vectoritkPointF4.__delslice__ = new_instancemethod(_itkPointPython.vectoritkPointF4___delslice__, None, vectoritkPointF4)
vectoritkPointF4.__delitem__ = new_instancemethod(_itkPointPython.vectoritkPointF4___delitem__, None, vectoritkPointF4)
vectoritkPointF4.__getitem__ = new_instancemethod(_itkPointPython.vectoritkPointF4___getitem__, None, vectoritkPointF4)
vectoritkPointF4.__setitem__ = new_instancemethod(_itkPointPython.vectoritkPointF4___setitem__, None, vectoritkPointF4)
vectoritkPointF4.pop = new_instancemethod(_itkPointPython.vectoritkPointF4_pop, None, vectoritkPointF4)
vectoritkPointF4.append = new_instancemethod(_itkPointPython.vectoritkPointF4_append, None, vectoritkPointF4)
vectoritkPointF4.empty = new_instancemethod(_itkPointPython.vectoritkPointF4_empty, None, vectoritkPointF4)
vectoritkPointF4.size = new_instancemethod(_itkPointPython.vectoritkPointF4_size, None, vectoritkPointF4)
vectoritkPointF4.swap = new_instancemethod(_itkPointPython.vectoritkPointF4_swap, None, vectoritkPointF4)
vectoritkPointF4.begin = new_instancemethod(_itkPointPython.vectoritkPointF4_begin, None, vectoritkPointF4)
vectoritkPointF4.end = new_instancemethod(_itkPointPython.vectoritkPointF4_end, None, vectoritkPointF4)
vectoritkPointF4.rbegin = new_instancemethod(_itkPointPython.vectoritkPointF4_rbegin, None, vectoritkPointF4)
vectoritkPointF4.rend = new_instancemethod(_itkPointPython.vectoritkPointF4_rend, None, vectoritkPointF4)
vectoritkPointF4.clear = new_instancemethod(_itkPointPython.vectoritkPointF4_clear, None, vectoritkPointF4)
vectoritkPointF4.get_allocator = new_instancemethod(_itkPointPython.vectoritkPointF4_get_allocator, None, vectoritkPointF4)
vectoritkPointF4.pop_back = new_instancemethod(_itkPointPython.vectoritkPointF4_pop_back, None, vectoritkPointF4)
vectoritkPointF4.erase = new_instancemethod(_itkPointPython.vectoritkPointF4_erase, None, vectoritkPointF4)
vectoritkPointF4.push_back = new_instancemethod(_itkPointPython.vectoritkPointF4_push_back, None, vectoritkPointF4)
vectoritkPointF4.front = new_instancemethod(_itkPointPython.vectoritkPointF4_front, None, vectoritkPointF4)
vectoritkPointF4.back = new_instancemethod(_itkPointPython.vectoritkPointF4_back, None, vectoritkPointF4)
vectoritkPointF4.assign = new_instancemethod(_itkPointPython.vectoritkPointF4_assign, None, vectoritkPointF4)
vectoritkPointF4.resize = new_instancemethod(_itkPointPython.vectoritkPointF4_resize, None, vectoritkPointF4)
vectoritkPointF4.insert = new_instancemethod(_itkPointPython.vectoritkPointF4_insert, None, vectoritkPointF4)
vectoritkPointF4.reserve = new_instancemethod(_itkPointPython.vectoritkPointF4_reserve, None, vectoritkPointF4)
vectoritkPointF4.capacity = new_instancemethod(_itkPointPython.vectoritkPointF4_capacity, None, vectoritkPointF4)
vectoritkPointF4_swigregister = _itkPointPython.vectoritkPointF4_swigregister
vectoritkPointF4_swigregister(vectoritkPointF4)

class vectoritkPointD4(object):
    """Proxy of C++ std::vector<(itkPointD4)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkPointD4 self) -> SwigPyIterator"""
        return _itkPointPython.vectoritkPointD4_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkPointD4 self) -> bool"""
        return _itkPointPython.vectoritkPointD4___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkPointD4 self) -> bool"""
        return _itkPointPython.vectoritkPointD4___bool__(self)


    def __len__(self) -> "std::vector< itkPointD4 >::size_type":
        """__len__(vectoritkPointD4 self) -> std::vector< itkPointD4 >::size_type"""
        return _itkPointPython.vectoritkPointD4___len__(self)


    def __getslice__(self, i: 'std::vector< itkPointD4 >::difference_type', j: 'std::vector< itkPointD4 >::difference_type') -> "std::vector< itkPointD4,std::allocator< itkPointD4 > > *":
        """__getslice__(vectoritkPointD4 self, std::vector< itkPointD4 >::difference_type i, std::vector< itkPointD4 >::difference_type j) -> vectoritkPointD4"""
        return _itkPointPython.vectoritkPointD4___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkPointD4 self, std::vector< itkPointD4 >::difference_type i, std::vector< itkPointD4 >::difference_type j)
        __setslice__(vectoritkPointD4 self, std::vector< itkPointD4 >::difference_type i, std::vector< itkPointD4 >::difference_type j, vectoritkPointD4 v)
        """
        return _itkPointPython.vectoritkPointD4___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkPointD4 >::difference_type', j: 'std::vector< itkPointD4 >::difference_type') -> "void":
        """__delslice__(vectoritkPointD4 self, std::vector< itkPointD4 >::difference_type i, std::vector< itkPointD4 >::difference_type j)"""
        return _itkPointPython.vectoritkPointD4___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkPointD4 self, std::vector< itkPointD4 >::difference_type i)
        __delitem__(vectoritkPointD4 self, PySliceObject * slice)
        """
        return _itkPointPython.vectoritkPointD4___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkPointD4 >::value_type const &":
        """
        __getitem__(vectoritkPointD4 self, PySliceObject * slice) -> vectoritkPointD4
        __getitem__(vectoritkPointD4 self, std::vector< itkPointD4 >::difference_type i) -> itkPointD4
        """
        return _itkPointPython.vectoritkPointD4___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkPointD4 self, PySliceObject * slice, vectoritkPointD4 v)
        __setitem__(vectoritkPointD4 self, PySliceObject * slice)
        __setitem__(vectoritkPointD4 self, std::vector< itkPointD4 >::difference_type i, itkPointD4 x)
        """
        return _itkPointPython.vectoritkPointD4___setitem__(self, *args)


    def pop(self) -> "std::vector< itkPointD4 >::value_type":
        """pop(vectoritkPointD4 self) -> itkPointD4"""
        return _itkPointPython.vectoritkPointD4_pop(self)


    def append(self, x: 'itkPointD4') -> "void":
        """append(vectoritkPointD4 self, itkPointD4 x)"""
        return _itkPointPython.vectoritkPointD4_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkPointD4 self) -> bool"""
        return _itkPointPython.vectoritkPointD4_empty(self)


    def size(self) -> "std::vector< itkPointD4 >::size_type":
        """size(vectoritkPointD4 self) -> std::vector< itkPointD4 >::size_type"""
        return _itkPointPython.vectoritkPointD4_size(self)


    def swap(self, v: 'vectoritkPointD4') -> "void":
        """swap(vectoritkPointD4 self, vectoritkPointD4 v)"""
        return _itkPointPython.vectoritkPointD4_swap(self, v)


    def begin(self) -> "std::vector< itkPointD4 >::iterator":
        """begin(vectoritkPointD4 self) -> std::vector< itkPointD4 >::iterator"""
        return _itkPointPython.vectoritkPointD4_begin(self)


    def end(self) -> "std::vector< itkPointD4 >::iterator":
        """end(vectoritkPointD4 self) -> std::vector< itkPointD4 >::iterator"""
        return _itkPointPython.vectoritkPointD4_end(self)


    def rbegin(self) -> "std::vector< itkPointD4 >::reverse_iterator":
        """rbegin(vectoritkPointD4 self) -> std::vector< itkPointD4 >::reverse_iterator"""
        return _itkPointPython.vectoritkPointD4_rbegin(self)


    def rend(self) -> "std::vector< itkPointD4 >::reverse_iterator":
        """rend(vectoritkPointD4 self) -> std::vector< itkPointD4 >::reverse_iterator"""
        return _itkPointPython.vectoritkPointD4_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkPointD4 self)"""
        return _itkPointPython.vectoritkPointD4_clear(self)


    def get_allocator(self) -> "std::vector< itkPointD4 >::allocator_type":
        """get_allocator(vectoritkPointD4 self) -> std::vector< itkPointD4 >::allocator_type"""
        return _itkPointPython.vectoritkPointD4_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkPointD4 self)"""
        return _itkPointPython.vectoritkPointD4_pop_back(self)


    def erase(self, *args) -> "std::vector< itkPointD4 >::iterator":
        """
        erase(vectoritkPointD4 self, std::vector< itkPointD4 >::iterator pos) -> std::vector< itkPointD4 >::iterator
        erase(vectoritkPointD4 self, std::vector< itkPointD4 >::iterator first, std::vector< itkPointD4 >::iterator last) -> std::vector< itkPointD4 >::iterator
        """
        return _itkPointPython.vectoritkPointD4_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkPointD4)> self) -> vectoritkPointD4
        __init__(std::vector<(itkPointD4)> self, vectoritkPointD4 arg2) -> vectoritkPointD4
        __init__(std::vector<(itkPointD4)> self, std::vector< itkPointD4 >::size_type size) -> vectoritkPointD4
        __init__(std::vector<(itkPointD4)> self, std::vector< itkPointD4 >::size_type size, itkPointD4 value) -> vectoritkPointD4
        """
        _itkPointPython.vectoritkPointD4_swiginit(self, _itkPointPython.new_vectoritkPointD4(*args))

    def push_back(self, x: 'itkPointD4') -> "void":
        """push_back(vectoritkPointD4 self, itkPointD4 x)"""
        return _itkPointPython.vectoritkPointD4_push_back(self, x)


    def front(self) -> "std::vector< itkPointD4 >::value_type const &":
        """front(vectoritkPointD4 self) -> itkPointD4"""
        return _itkPointPython.vectoritkPointD4_front(self)


    def back(self) -> "std::vector< itkPointD4 >::value_type const &":
        """back(vectoritkPointD4 self) -> itkPointD4"""
        return _itkPointPython.vectoritkPointD4_back(self)


    def assign(self, n: 'std::vector< itkPointD4 >::size_type', x: 'itkPointD4') -> "void":
        """assign(vectoritkPointD4 self, std::vector< itkPointD4 >::size_type n, itkPointD4 x)"""
        return _itkPointPython.vectoritkPointD4_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkPointD4 self, std::vector< itkPointD4 >::size_type new_size)
        resize(vectoritkPointD4 self, std::vector< itkPointD4 >::size_type new_size, itkPointD4 x)
        """
        return _itkPointPython.vectoritkPointD4_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkPointD4 self, std::vector< itkPointD4 >::iterator pos, itkPointD4 x) -> std::vector< itkPointD4 >::iterator
        insert(vectoritkPointD4 self, std::vector< itkPointD4 >::iterator pos, std::vector< itkPointD4 >::size_type n, itkPointD4 x)
        """
        return _itkPointPython.vectoritkPointD4_insert(self, *args)


    def reserve(self, n: 'std::vector< itkPointD4 >::size_type') -> "void":
        """reserve(vectoritkPointD4 self, std::vector< itkPointD4 >::size_type n)"""
        return _itkPointPython.vectoritkPointD4_reserve(self, n)


    def capacity(self) -> "std::vector< itkPointD4 >::size_type":
        """capacity(vectoritkPointD4 self) -> std::vector< itkPointD4 >::size_type"""
        return _itkPointPython.vectoritkPointD4_capacity(self)

    __swig_destroy__ = _itkPointPython.delete_vectoritkPointD4
vectoritkPointD4.iterator = new_instancemethod(_itkPointPython.vectoritkPointD4_iterator, None, vectoritkPointD4)
vectoritkPointD4.__nonzero__ = new_instancemethod(_itkPointPython.vectoritkPointD4___nonzero__, None, vectoritkPointD4)
vectoritkPointD4.__bool__ = new_instancemethod(_itkPointPython.vectoritkPointD4___bool__, None, vectoritkPointD4)
vectoritkPointD4.__len__ = new_instancemethod(_itkPointPython.vectoritkPointD4___len__, None, vectoritkPointD4)
vectoritkPointD4.__getslice__ = new_instancemethod(_itkPointPython.vectoritkPointD4___getslice__, None, vectoritkPointD4)
vectoritkPointD4.__setslice__ = new_instancemethod(_itkPointPython.vectoritkPointD4___setslice__, None, vectoritkPointD4)
vectoritkPointD4.__delslice__ = new_instancemethod(_itkPointPython.vectoritkPointD4___delslice__, None, vectoritkPointD4)
vectoritkPointD4.__delitem__ = new_instancemethod(_itkPointPython.vectoritkPointD4___delitem__, None, vectoritkPointD4)
vectoritkPointD4.__getitem__ = new_instancemethod(_itkPointPython.vectoritkPointD4___getitem__, None, vectoritkPointD4)
vectoritkPointD4.__setitem__ = new_instancemethod(_itkPointPython.vectoritkPointD4___setitem__, None, vectoritkPointD4)
vectoritkPointD4.pop = new_instancemethod(_itkPointPython.vectoritkPointD4_pop, None, vectoritkPointD4)
vectoritkPointD4.append = new_instancemethod(_itkPointPython.vectoritkPointD4_append, None, vectoritkPointD4)
vectoritkPointD4.empty = new_instancemethod(_itkPointPython.vectoritkPointD4_empty, None, vectoritkPointD4)
vectoritkPointD4.size = new_instancemethod(_itkPointPython.vectoritkPointD4_size, None, vectoritkPointD4)
vectoritkPointD4.swap = new_instancemethod(_itkPointPython.vectoritkPointD4_swap, None, vectoritkPointD4)
vectoritkPointD4.begin = new_instancemethod(_itkPointPython.vectoritkPointD4_begin, None, vectoritkPointD4)
vectoritkPointD4.end = new_instancemethod(_itkPointPython.vectoritkPointD4_end, None, vectoritkPointD4)
vectoritkPointD4.rbegin = new_instancemethod(_itkPointPython.vectoritkPointD4_rbegin, None, vectoritkPointD4)
vectoritkPointD4.rend = new_instancemethod(_itkPointPython.vectoritkPointD4_rend, None, vectoritkPointD4)
vectoritkPointD4.clear = new_instancemethod(_itkPointPython.vectoritkPointD4_clear, None, vectoritkPointD4)
vectoritkPointD4.get_allocator = new_instancemethod(_itkPointPython.vectoritkPointD4_get_allocator, None, vectoritkPointD4)
vectoritkPointD4.pop_back = new_instancemethod(_itkPointPython.vectoritkPointD4_pop_back, None, vectoritkPointD4)
vectoritkPointD4.erase = new_instancemethod(_itkPointPython.vectoritkPointD4_erase, None, vectoritkPointD4)
vectoritkPointD4.push_back = new_instancemethod(_itkPointPython.vectoritkPointD4_push_back, None, vectoritkPointD4)
vectoritkPointD4.front = new_instancemethod(_itkPointPython.vectoritkPointD4_front, None, vectoritkPointD4)
vectoritkPointD4.back = new_instancemethod(_itkPointPython.vectoritkPointD4_back, None, vectoritkPointD4)
vectoritkPointD4.assign = new_instancemethod(_itkPointPython.vectoritkPointD4_assign, None, vectoritkPointD4)
vectoritkPointD4.resize = new_instancemethod(_itkPointPython.vectoritkPointD4_resize, None, vectoritkPointD4)
vectoritkPointD4.insert = new_instancemethod(_itkPointPython.vectoritkPointD4_insert, None, vectoritkPointD4)
vectoritkPointD4.reserve = new_instancemethod(_itkPointPython.vectoritkPointD4_reserve, None, vectoritkPointD4)
vectoritkPointD4.capacity = new_instancemethod(_itkPointPython.vectoritkPointD4_capacity, None, vectoritkPointD4)
vectoritkPointD4_swigregister = _itkPointPython.vectoritkPointD4_swigregister
vectoritkPointD4_swigregister(vectoritkPointD4)

class itkPointD2(itkFixedArrayPython.itkFixedArrayD2):
    """Proxy of C++ itkPointD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetPointDimension() -> "unsigned int":
        """GetPointDimension() -> unsigned int"""
        return _itkPointPython.itkPointD2_GetPointDimension()

    GetPointDimension = staticmethod(GetPointDimension)
    __swig_destroy__ = _itkPointPython.delete_itkPointD2

    def __init__(self, *args):
        """
        __init__(itkPointD2 self) -> itkPointD2
        __init__(itkPointD2 self, itkPointD2 arg0) -> itkPointD2
        __init__(itkPointD2 self, double const * r) -> itkPointD2
        __init__(itkPointD2 self, double const & v) -> itkPointD2
        __init__(itkPointD2 self, std::array< double,2 > const & stdArray) -> itkPointD2
        """
        _itkPointPython.itkPointD2_swiginit(self, _itkPointPython.new_itkPointD2(*args))

    def __eq__(self, pt: 'itkPointD2') -> "bool":
        """__eq__(itkPointD2 self, itkPointD2 pt) -> bool"""
        return _itkPointPython.itkPointD2___eq__(self, pt)


    def __ne__(self, pt: 'itkPointD2') -> "bool":
        """__ne__(itkPointD2 self, itkPointD2 pt) -> bool"""
        return _itkPointPython.itkPointD2___ne__(self, pt)


    def __iadd__(self, vec: 'itkVectorD2') -> "itkPointD2 const &":
        """__iadd__(itkPointD2 self, itkVectorD2 vec) -> itkPointD2"""
        return _itkPointPython.itkPointD2___iadd__(self, vec)


    def __isub__(self, vec: 'itkVectorD2') -> "itkPointD2 const &":
        """__isub__(itkPointD2 self, itkVectorD2 vec) -> itkPointD2"""
        return _itkPointPython.itkPointD2___isub__(self, vec)


    def __add__(self, vec: 'itkVectorD2') -> "itkPointD2":
        """__add__(itkPointD2 self, itkVectorD2 vec) -> itkPointD2"""
        return _itkPointPython.itkPointD2___add__(self, vec)


    def __sub__(self, *args) -> "itkPointD2":
        """
        __sub__(itkPointD2 self, itkPointD2 pnt) -> itkVectorD2
        __sub__(itkPointD2 self, itkVectorD2 vec) -> itkPointD2
        """
        return _itkPointPython.itkPointD2___sub__(self, *args)


    def GetVectorFromOrigin(self) -> "itkVectorD2":
        """GetVectorFromOrigin(itkPointD2 self) -> itkVectorD2"""
        return _itkPointPython.itkPointD2_GetVectorFromOrigin(self)


    def GetVnlVector(self, *args) -> "vnl_vectorD":
        """
        GetVnlVector(itkPointD2 self) -> vnl_vector_refD
        GetVnlVector(itkPointD2 self) -> vnl_vectorD
        """
        return _itkPointPython.itkPointD2_GetVnlVector(self, *args)


    def SetToMidPoint(self, arg0: 'itkPointD2', arg1: 'itkPointD2') -> "void":
        """SetToMidPoint(itkPointD2 self, itkPointD2 arg0, itkPointD2 arg1)"""
        return _itkPointPython.itkPointD2_SetToMidPoint(self, arg0, arg1)


    def SetToBarycentricCombination(self, *args) -> "void":
        """
        SetToBarycentricCombination(itkPointD2 self, itkPointD2 A, itkPointD2 B, double alpha)
        SetToBarycentricCombination(itkPointD2 self, itkPointD2 A, itkPointD2 B, itkPointD2 C, double weightA, double weightB)
        SetToBarycentricCombination(itkPointD2 self, itkPointD2 P, double const * weights, unsigned int N)
        """
        return _itkPointPython.itkPointD2_SetToBarycentricCombination(self, *args)


    def __getitem__(self, d: 'unsigned long') -> "double":
        """__getitem__(itkPointD2 self, unsigned long d) -> double"""
        return _itkPointPython.itkPointD2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'double') -> "void":
        """__setitem__(itkPointD2 self, unsigned long d, double v)"""
        return _itkPointPython.itkPointD2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkPointPython.itkPointD2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkPointD2 self) -> std::string"""
        return _itkPointPython.itkPointD2___repr__(self)

itkPointD2.__eq__ = new_instancemethod(_itkPointPython.itkPointD2___eq__, None, itkPointD2)
itkPointD2.__ne__ = new_instancemethod(_itkPointPython.itkPointD2___ne__, None, itkPointD2)
itkPointD2.__iadd__ = new_instancemethod(_itkPointPython.itkPointD2___iadd__, None, itkPointD2)
itkPointD2.__isub__ = new_instancemethod(_itkPointPython.itkPointD2___isub__, None, itkPointD2)
itkPointD2.__add__ = new_instancemethod(_itkPointPython.itkPointD2___add__, None, itkPointD2)
itkPointD2.__sub__ = new_instancemethod(_itkPointPython.itkPointD2___sub__, None, itkPointD2)
itkPointD2.GetVectorFromOrigin = new_instancemethod(_itkPointPython.itkPointD2_GetVectorFromOrigin, None, itkPointD2)
itkPointD2.GetVnlVector = new_instancemethod(_itkPointPython.itkPointD2_GetVnlVector, None, itkPointD2)
itkPointD2.SetToMidPoint = new_instancemethod(_itkPointPython.itkPointD2_SetToMidPoint, None, itkPointD2)
itkPointD2.SetToBarycentricCombination = new_instancemethod(_itkPointPython.itkPointD2_SetToBarycentricCombination, None, itkPointD2)
itkPointD2.__getitem__ = new_instancemethod(_itkPointPython.itkPointD2___getitem__, None, itkPointD2)
itkPointD2.__setitem__ = new_instancemethod(_itkPointPython.itkPointD2___setitem__, None, itkPointD2)
itkPointD2.__repr__ = new_instancemethod(_itkPointPython.itkPointD2___repr__, None, itkPointD2)
itkPointD2_swigregister = _itkPointPython.itkPointD2_swigregister
itkPointD2_swigregister(itkPointD2)

def itkPointD2_GetPointDimension() -> "unsigned int":
    """itkPointD2_GetPointDimension() -> unsigned int"""
    return _itkPointPython.itkPointD2_GetPointDimension()

def itkPointD2___len__() -> "unsigned int":
    """itkPointD2___len__() -> unsigned int"""
    return _itkPointPython.itkPointD2___len__()

class itkPointD3(itkFixedArrayPython.itkFixedArrayD3):
    """Proxy of C++ itkPointD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetPointDimension() -> "unsigned int":
        """GetPointDimension() -> unsigned int"""
        return _itkPointPython.itkPointD3_GetPointDimension()

    GetPointDimension = staticmethod(GetPointDimension)
    __swig_destroy__ = _itkPointPython.delete_itkPointD3

    def __init__(self, *args):
        """
        __init__(itkPointD3 self) -> itkPointD3
        __init__(itkPointD3 self, itkPointD3 arg0) -> itkPointD3
        __init__(itkPointD3 self, double const * r) -> itkPointD3
        __init__(itkPointD3 self, double const & v) -> itkPointD3
        __init__(itkPointD3 self, std::array< double,3 > const & stdArray) -> itkPointD3
        """
        _itkPointPython.itkPointD3_swiginit(self, _itkPointPython.new_itkPointD3(*args))

    def __eq__(self, pt: 'itkPointD3') -> "bool":
        """__eq__(itkPointD3 self, itkPointD3 pt) -> bool"""
        return _itkPointPython.itkPointD3___eq__(self, pt)


    def __ne__(self, pt: 'itkPointD3') -> "bool":
        """__ne__(itkPointD3 self, itkPointD3 pt) -> bool"""
        return _itkPointPython.itkPointD3___ne__(self, pt)


    def __iadd__(self, vec: 'itkVectorD3') -> "itkPointD3 const &":
        """__iadd__(itkPointD3 self, itkVectorD3 vec) -> itkPointD3"""
        return _itkPointPython.itkPointD3___iadd__(self, vec)


    def __isub__(self, vec: 'itkVectorD3') -> "itkPointD3 const &":
        """__isub__(itkPointD3 self, itkVectorD3 vec) -> itkPointD3"""
        return _itkPointPython.itkPointD3___isub__(self, vec)


    def __add__(self, vec: 'itkVectorD3') -> "itkPointD3":
        """__add__(itkPointD3 self, itkVectorD3 vec) -> itkPointD3"""
        return _itkPointPython.itkPointD3___add__(self, vec)


    def __sub__(self, *args) -> "itkPointD3":
        """
        __sub__(itkPointD3 self, itkPointD3 pnt) -> itkVectorD3
        __sub__(itkPointD3 self, itkVectorD3 vec) -> itkPointD3
        """
        return _itkPointPython.itkPointD3___sub__(self, *args)


    def GetVectorFromOrigin(self) -> "itkVectorD3":
        """GetVectorFromOrigin(itkPointD3 self) -> itkVectorD3"""
        return _itkPointPython.itkPointD3_GetVectorFromOrigin(self)


    def GetVnlVector(self, *args) -> "vnl_vectorD":
        """
        GetVnlVector(itkPointD3 self) -> vnl_vector_refD
        GetVnlVector(itkPointD3 self) -> vnl_vectorD
        """
        return _itkPointPython.itkPointD3_GetVnlVector(self, *args)


    def SetToMidPoint(self, arg0: 'itkPointD3', arg1: 'itkPointD3') -> "void":
        """SetToMidPoint(itkPointD3 self, itkPointD3 arg0, itkPointD3 arg1)"""
        return _itkPointPython.itkPointD3_SetToMidPoint(self, arg0, arg1)


    def SetToBarycentricCombination(self, *args) -> "void":
        """
        SetToBarycentricCombination(itkPointD3 self, itkPointD3 A, itkPointD3 B, double alpha)
        SetToBarycentricCombination(itkPointD3 self, itkPointD3 A, itkPointD3 B, itkPointD3 C, double weightA, double weightB)
        SetToBarycentricCombination(itkPointD3 self, itkPointD3 P, double const * weights, unsigned int N)
        """
        return _itkPointPython.itkPointD3_SetToBarycentricCombination(self, *args)


    def __getitem__(self, d: 'unsigned long') -> "double":
        """__getitem__(itkPointD3 self, unsigned long d) -> double"""
        return _itkPointPython.itkPointD3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'double') -> "void":
        """__setitem__(itkPointD3 self, unsigned long d, double v)"""
        return _itkPointPython.itkPointD3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkPointPython.itkPointD3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkPointD3 self) -> std::string"""
        return _itkPointPython.itkPointD3___repr__(self)

itkPointD3.__eq__ = new_instancemethod(_itkPointPython.itkPointD3___eq__, None, itkPointD3)
itkPointD3.__ne__ = new_instancemethod(_itkPointPython.itkPointD3___ne__, None, itkPointD3)
itkPointD3.__iadd__ = new_instancemethod(_itkPointPython.itkPointD3___iadd__, None, itkPointD3)
itkPointD3.__isub__ = new_instancemethod(_itkPointPython.itkPointD3___isub__, None, itkPointD3)
itkPointD3.__add__ = new_instancemethod(_itkPointPython.itkPointD3___add__, None, itkPointD3)
itkPointD3.__sub__ = new_instancemethod(_itkPointPython.itkPointD3___sub__, None, itkPointD3)
itkPointD3.GetVectorFromOrigin = new_instancemethod(_itkPointPython.itkPointD3_GetVectorFromOrigin, None, itkPointD3)
itkPointD3.GetVnlVector = new_instancemethod(_itkPointPython.itkPointD3_GetVnlVector, None, itkPointD3)
itkPointD3.SetToMidPoint = new_instancemethod(_itkPointPython.itkPointD3_SetToMidPoint, None, itkPointD3)
itkPointD3.SetToBarycentricCombination = new_instancemethod(_itkPointPython.itkPointD3_SetToBarycentricCombination, None, itkPointD3)
itkPointD3.__getitem__ = new_instancemethod(_itkPointPython.itkPointD3___getitem__, None, itkPointD3)
itkPointD3.__setitem__ = new_instancemethod(_itkPointPython.itkPointD3___setitem__, None, itkPointD3)
itkPointD3.__repr__ = new_instancemethod(_itkPointPython.itkPointD3___repr__, None, itkPointD3)
itkPointD3_swigregister = _itkPointPython.itkPointD3_swigregister
itkPointD3_swigregister(itkPointD3)

def itkPointD3_GetPointDimension() -> "unsigned int":
    """itkPointD3_GetPointDimension() -> unsigned int"""
    return _itkPointPython.itkPointD3_GetPointDimension()

def itkPointD3___len__() -> "unsigned int":
    """itkPointD3___len__() -> unsigned int"""
    return _itkPointPython.itkPointD3___len__()

class itkPointD4(itkFixedArrayPython.itkFixedArrayD4):
    """Proxy of C++ itkPointD4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetPointDimension() -> "unsigned int":
        """GetPointDimension() -> unsigned int"""
        return _itkPointPython.itkPointD4_GetPointDimension()

    GetPointDimension = staticmethod(GetPointDimension)
    __swig_destroy__ = _itkPointPython.delete_itkPointD4

    def __init__(self, *args):
        """
        __init__(itkPointD4 self) -> itkPointD4
        __init__(itkPointD4 self, itkPointD4 arg0) -> itkPointD4
        __init__(itkPointD4 self, double const * r) -> itkPointD4
        __init__(itkPointD4 self, double const & v) -> itkPointD4
        __init__(itkPointD4 self, std::array< double,4 > const & stdArray) -> itkPointD4
        """
        _itkPointPython.itkPointD4_swiginit(self, _itkPointPython.new_itkPointD4(*args))

    def __eq__(self, pt: 'itkPointD4') -> "bool":
        """__eq__(itkPointD4 self, itkPointD4 pt) -> bool"""
        return _itkPointPython.itkPointD4___eq__(self, pt)


    def __ne__(self, pt: 'itkPointD4') -> "bool":
        """__ne__(itkPointD4 self, itkPointD4 pt) -> bool"""
        return _itkPointPython.itkPointD4___ne__(self, pt)


    def __iadd__(self, vec: 'itkVectorD4') -> "itkPointD4 const &":
        """__iadd__(itkPointD4 self, itkVectorD4 vec) -> itkPointD4"""
        return _itkPointPython.itkPointD4___iadd__(self, vec)


    def __isub__(self, vec: 'itkVectorD4') -> "itkPointD4 const &":
        """__isub__(itkPointD4 self, itkVectorD4 vec) -> itkPointD4"""
        return _itkPointPython.itkPointD4___isub__(self, vec)


    def __add__(self, vec: 'itkVectorD4') -> "itkPointD4":
        """__add__(itkPointD4 self, itkVectorD4 vec) -> itkPointD4"""
        return _itkPointPython.itkPointD4___add__(self, vec)


    def __sub__(self, *args) -> "itkPointD4":
        """
        __sub__(itkPointD4 self, itkPointD4 pnt) -> itkVectorD4
        __sub__(itkPointD4 self, itkVectorD4 vec) -> itkPointD4
        """
        return _itkPointPython.itkPointD4___sub__(self, *args)


    def GetVectorFromOrigin(self) -> "itkVectorD4":
        """GetVectorFromOrigin(itkPointD4 self) -> itkVectorD4"""
        return _itkPointPython.itkPointD4_GetVectorFromOrigin(self)


    def GetVnlVector(self, *args) -> "vnl_vectorD":
        """
        GetVnlVector(itkPointD4 self) -> vnl_vector_refD
        GetVnlVector(itkPointD4 self) -> vnl_vectorD
        """
        return _itkPointPython.itkPointD4_GetVnlVector(self, *args)


    def SetToMidPoint(self, arg0: 'itkPointD4', arg1: 'itkPointD4') -> "void":
        """SetToMidPoint(itkPointD4 self, itkPointD4 arg0, itkPointD4 arg1)"""
        return _itkPointPython.itkPointD4_SetToMidPoint(self, arg0, arg1)


    def SetToBarycentricCombination(self, *args) -> "void":
        """
        SetToBarycentricCombination(itkPointD4 self, itkPointD4 A, itkPointD4 B, double alpha)
        SetToBarycentricCombination(itkPointD4 self, itkPointD4 A, itkPointD4 B, itkPointD4 C, double weightA, double weightB)
        SetToBarycentricCombination(itkPointD4 self, itkPointD4 P, double const * weights, unsigned int N)
        """
        return _itkPointPython.itkPointD4_SetToBarycentricCombination(self, *args)


    def __getitem__(self, d: 'unsigned long') -> "double":
        """__getitem__(itkPointD4 self, unsigned long d) -> double"""
        return _itkPointPython.itkPointD4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'double') -> "void":
        """__setitem__(itkPointD4 self, unsigned long d, double v)"""
        return _itkPointPython.itkPointD4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkPointPython.itkPointD4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkPointD4 self) -> std::string"""
        return _itkPointPython.itkPointD4___repr__(self)

itkPointD4.__eq__ = new_instancemethod(_itkPointPython.itkPointD4___eq__, None, itkPointD4)
itkPointD4.__ne__ = new_instancemethod(_itkPointPython.itkPointD4___ne__, None, itkPointD4)
itkPointD4.__iadd__ = new_instancemethod(_itkPointPython.itkPointD4___iadd__, None, itkPointD4)
itkPointD4.__isub__ = new_instancemethod(_itkPointPython.itkPointD4___isub__, None, itkPointD4)
itkPointD4.__add__ = new_instancemethod(_itkPointPython.itkPointD4___add__, None, itkPointD4)
itkPointD4.__sub__ = new_instancemethod(_itkPointPython.itkPointD4___sub__, None, itkPointD4)
itkPointD4.GetVectorFromOrigin = new_instancemethod(_itkPointPython.itkPointD4_GetVectorFromOrigin, None, itkPointD4)
itkPointD4.GetVnlVector = new_instancemethod(_itkPointPython.itkPointD4_GetVnlVector, None, itkPointD4)
itkPointD4.SetToMidPoint = new_instancemethod(_itkPointPython.itkPointD4_SetToMidPoint, None, itkPointD4)
itkPointD4.SetToBarycentricCombination = new_instancemethod(_itkPointPython.itkPointD4_SetToBarycentricCombination, None, itkPointD4)
itkPointD4.__getitem__ = new_instancemethod(_itkPointPython.itkPointD4___getitem__, None, itkPointD4)
itkPointD4.__setitem__ = new_instancemethod(_itkPointPython.itkPointD4___setitem__, None, itkPointD4)
itkPointD4.__repr__ = new_instancemethod(_itkPointPython.itkPointD4___repr__, None, itkPointD4)
itkPointD4_swigregister = _itkPointPython.itkPointD4_swigregister
itkPointD4_swigregister(itkPointD4)

def itkPointD4_GetPointDimension() -> "unsigned int":
    """itkPointD4_GetPointDimension() -> unsigned int"""
    return _itkPointPython.itkPointD4_GetPointDimension()

def itkPointD4___len__() -> "unsigned int":
    """itkPointD4___len__() -> unsigned int"""
    return _itkPointPython.itkPointD4___len__()

class itkPointF2(itkFixedArrayPython.itkFixedArrayF2):
    """Proxy of C++ itkPointF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetPointDimension() -> "unsigned int":
        """GetPointDimension() -> unsigned int"""
        return _itkPointPython.itkPointF2_GetPointDimension()

    GetPointDimension = staticmethod(GetPointDimension)
    __swig_destroy__ = _itkPointPython.delete_itkPointF2

    def __init__(self, *args):
        """
        __init__(itkPointF2 self) -> itkPointF2
        __init__(itkPointF2 self, itkPointF2 arg0) -> itkPointF2
        __init__(itkPointF2 self, float const * r) -> itkPointF2
        __init__(itkPointF2 self, float const & v) -> itkPointF2
        __init__(itkPointF2 self, std::array< float,2 > const & stdArray) -> itkPointF2
        """
        _itkPointPython.itkPointF2_swiginit(self, _itkPointPython.new_itkPointF2(*args))

    def __eq__(self, pt: 'itkPointF2') -> "bool":
        """__eq__(itkPointF2 self, itkPointF2 pt) -> bool"""
        return _itkPointPython.itkPointF2___eq__(self, pt)


    def __ne__(self, pt: 'itkPointF2') -> "bool":
        """__ne__(itkPointF2 self, itkPointF2 pt) -> bool"""
        return _itkPointPython.itkPointF2___ne__(self, pt)


    def __iadd__(self, vec: 'itkVectorF2') -> "itkPointF2 const &":
        """__iadd__(itkPointF2 self, itkVectorF2 vec) -> itkPointF2"""
        return _itkPointPython.itkPointF2___iadd__(self, vec)


    def __isub__(self, vec: 'itkVectorF2') -> "itkPointF2 const &":
        """__isub__(itkPointF2 self, itkVectorF2 vec) -> itkPointF2"""
        return _itkPointPython.itkPointF2___isub__(self, vec)


    def __add__(self, vec: 'itkVectorF2') -> "itkPointF2":
        """__add__(itkPointF2 self, itkVectorF2 vec) -> itkPointF2"""
        return _itkPointPython.itkPointF2___add__(self, vec)


    def __sub__(self, *args) -> "itkPointF2":
        """
        __sub__(itkPointF2 self, itkPointF2 pnt) -> itkVectorF2
        __sub__(itkPointF2 self, itkVectorF2 vec) -> itkPointF2
        """
        return _itkPointPython.itkPointF2___sub__(self, *args)


    def GetVectorFromOrigin(self) -> "itkVectorF2":
        """GetVectorFromOrigin(itkPointF2 self) -> itkVectorF2"""
        return _itkPointPython.itkPointF2_GetVectorFromOrigin(self)


    def GetVnlVector(self, *args) -> "vnl_vectorF":
        """
        GetVnlVector(itkPointF2 self) -> vnl_vector_refF
        GetVnlVector(itkPointF2 self) -> vnl_vectorF
        """
        return _itkPointPython.itkPointF2_GetVnlVector(self, *args)


    def SetToMidPoint(self, arg0: 'itkPointF2', arg1: 'itkPointF2') -> "void":
        """SetToMidPoint(itkPointF2 self, itkPointF2 arg0, itkPointF2 arg1)"""
        return _itkPointPython.itkPointF2_SetToMidPoint(self, arg0, arg1)


    def SetToBarycentricCombination(self, *args) -> "void":
        """
        SetToBarycentricCombination(itkPointF2 self, itkPointF2 A, itkPointF2 B, double alpha)
        SetToBarycentricCombination(itkPointF2 self, itkPointF2 A, itkPointF2 B, itkPointF2 C, double weightA, double weightB)
        SetToBarycentricCombination(itkPointF2 self, itkPointF2 P, double const * weights, unsigned int N)
        """
        return _itkPointPython.itkPointF2_SetToBarycentricCombination(self, *args)


    def __getitem__(self, d: 'unsigned long') -> "float":
        """__getitem__(itkPointF2 self, unsigned long d) -> float"""
        return _itkPointPython.itkPointF2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'float') -> "void":
        """__setitem__(itkPointF2 self, unsigned long d, float v)"""
        return _itkPointPython.itkPointF2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkPointPython.itkPointF2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkPointF2 self) -> std::string"""
        return _itkPointPython.itkPointF2___repr__(self)

itkPointF2.__eq__ = new_instancemethod(_itkPointPython.itkPointF2___eq__, None, itkPointF2)
itkPointF2.__ne__ = new_instancemethod(_itkPointPython.itkPointF2___ne__, None, itkPointF2)
itkPointF2.__iadd__ = new_instancemethod(_itkPointPython.itkPointF2___iadd__, None, itkPointF2)
itkPointF2.__isub__ = new_instancemethod(_itkPointPython.itkPointF2___isub__, None, itkPointF2)
itkPointF2.__add__ = new_instancemethod(_itkPointPython.itkPointF2___add__, None, itkPointF2)
itkPointF2.__sub__ = new_instancemethod(_itkPointPython.itkPointF2___sub__, None, itkPointF2)
itkPointF2.GetVectorFromOrigin = new_instancemethod(_itkPointPython.itkPointF2_GetVectorFromOrigin, None, itkPointF2)
itkPointF2.GetVnlVector = new_instancemethod(_itkPointPython.itkPointF2_GetVnlVector, None, itkPointF2)
itkPointF2.SetToMidPoint = new_instancemethod(_itkPointPython.itkPointF2_SetToMidPoint, None, itkPointF2)
itkPointF2.SetToBarycentricCombination = new_instancemethod(_itkPointPython.itkPointF2_SetToBarycentricCombination, None, itkPointF2)
itkPointF2.__getitem__ = new_instancemethod(_itkPointPython.itkPointF2___getitem__, None, itkPointF2)
itkPointF2.__setitem__ = new_instancemethod(_itkPointPython.itkPointF2___setitem__, None, itkPointF2)
itkPointF2.__repr__ = new_instancemethod(_itkPointPython.itkPointF2___repr__, None, itkPointF2)
itkPointF2_swigregister = _itkPointPython.itkPointF2_swigregister
itkPointF2_swigregister(itkPointF2)

def itkPointF2_GetPointDimension() -> "unsigned int":
    """itkPointF2_GetPointDimension() -> unsigned int"""
    return _itkPointPython.itkPointF2_GetPointDimension()

def itkPointF2___len__() -> "unsigned int":
    """itkPointF2___len__() -> unsigned int"""
    return _itkPointPython.itkPointF2___len__()

class itkPointF3(itkFixedArrayPython.itkFixedArrayF3):
    """Proxy of C++ itkPointF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetPointDimension() -> "unsigned int":
        """GetPointDimension() -> unsigned int"""
        return _itkPointPython.itkPointF3_GetPointDimension()

    GetPointDimension = staticmethod(GetPointDimension)
    __swig_destroy__ = _itkPointPython.delete_itkPointF3

    def __init__(self, *args):
        """
        __init__(itkPointF3 self) -> itkPointF3
        __init__(itkPointF3 self, itkPointF3 arg0) -> itkPointF3
        __init__(itkPointF3 self, float const * r) -> itkPointF3
        __init__(itkPointF3 self, float const & v) -> itkPointF3
        __init__(itkPointF3 self, std::array< float,3 > const & stdArray) -> itkPointF3
        """
        _itkPointPython.itkPointF3_swiginit(self, _itkPointPython.new_itkPointF3(*args))

    def __eq__(self, pt: 'itkPointF3') -> "bool":
        """__eq__(itkPointF3 self, itkPointF3 pt) -> bool"""
        return _itkPointPython.itkPointF3___eq__(self, pt)


    def __ne__(self, pt: 'itkPointF3') -> "bool":
        """__ne__(itkPointF3 self, itkPointF3 pt) -> bool"""
        return _itkPointPython.itkPointF3___ne__(self, pt)


    def __iadd__(self, vec: 'itkVectorF3') -> "itkPointF3 const &":
        """__iadd__(itkPointF3 self, itkVectorF3 vec) -> itkPointF3"""
        return _itkPointPython.itkPointF3___iadd__(self, vec)


    def __isub__(self, vec: 'itkVectorF3') -> "itkPointF3 const &":
        """__isub__(itkPointF3 self, itkVectorF3 vec) -> itkPointF3"""
        return _itkPointPython.itkPointF3___isub__(self, vec)


    def __add__(self, vec: 'itkVectorF3') -> "itkPointF3":
        """__add__(itkPointF3 self, itkVectorF3 vec) -> itkPointF3"""
        return _itkPointPython.itkPointF3___add__(self, vec)


    def __sub__(self, *args) -> "itkPointF3":
        """
        __sub__(itkPointF3 self, itkPointF3 pnt) -> itkVectorF3
        __sub__(itkPointF3 self, itkVectorF3 vec) -> itkPointF3
        """
        return _itkPointPython.itkPointF3___sub__(self, *args)


    def GetVectorFromOrigin(self) -> "itkVectorF3":
        """GetVectorFromOrigin(itkPointF3 self) -> itkVectorF3"""
        return _itkPointPython.itkPointF3_GetVectorFromOrigin(self)


    def GetVnlVector(self, *args) -> "vnl_vectorF":
        """
        GetVnlVector(itkPointF3 self) -> vnl_vector_refF
        GetVnlVector(itkPointF3 self) -> vnl_vectorF
        """
        return _itkPointPython.itkPointF3_GetVnlVector(self, *args)


    def SetToMidPoint(self, arg0: 'itkPointF3', arg1: 'itkPointF3') -> "void":
        """SetToMidPoint(itkPointF3 self, itkPointF3 arg0, itkPointF3 arg1)"""
        return _itkPointPython.itkPointF3_SetToMidPoint(self, arg0, arg1)


    def SetToBarycentricCombination(self, *args) -> "void":
        """
        SetToBarycentricCombination(itkPointF3 self, itkPointF3 A, itkPointF3 B, double alpha)
        SetToBarycentricCombination(itkPointF3 self, itkPointF3 A, itkPointF3 B, itkPointF3 C, double weightA, double weightB)
        SetToBarycentricCombination(itkPointF3 self, itkPointF3 P, double const * weights, unsigned int N)
        """
        return _itkPointPython.itkPointF3_SetToBarycentricCombination(self, *args)


    def __getitem__(self, d: 'unsigned long') -> "float":
        """__getitem__(itkPointF3 self, unsigned long d) -> float"""
        return _itkPointPython.itkPointF3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'float') -> "void":
        """__setitem__(itkPointF3 self, unsigned long d, float v)"""
        return _itkPointPython.itkPointF3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkPointPython.itkPointF3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkPointF3 self) -> std::string"""
        return _itkPointPython.itkPointF3___repr__(self)

itkPointF3.__eq__ = new_instancemethod(_itkPointPython.itkPointF3___eq__, None, itkPointF3)
itkPointF3.__ne__ = new_instancemethod(_itkPointPython.itkPointF3___ne__, None, itkPointF3)
itkPointF3.__iadd__ = new_instancemethod(_itkPointPython.itkPointF3___iadd__, None, itkPointF3)
itkPointF3.__isub__ = new_instancemethod(_itkPointPython.itkPointF3___isub__, None, itkPointF3)
itkPointF3.__add__ = new_instancemethod(_itkPointPython.itkPointF3___add__, None, itkPointF3)
itkPointF3.__sub__ = new_instancemethod(_itkPointPython.itkPointF3___sub__, None, itkPointF3)
itkPointF3.GetVectorFromOrigin = new_instancemethod(_itkPointPython.itkPointF3_GetVectorFromOrigin, None, itkPointF3)
itkPointF3.GetVnlVector = new_instancemethod(_itkPointPython.itkPointF3_GetVnlVector, None, itkPointF3)
itkPointF3.SetToMidPoint = new_instancemethod(_itkPointPython.itkPointF3_SetToMidPoint, None, itkPointF3)
itkPointF3.SetToBarycentricCombination = new_instancemethod(_itkPointPython.itkPointF3_SetToBarycentricCombination, None, itkPointF3)
itkPointF3.__getitem__ = new_instancemethod(_itkPointPython.itkPointF3___getitem__, None, itkPointF3)
itkPointF3.__setitem__ = new_instancemethod(_itkPointPython.itkPointF3___setitem__, None, itkPointF3)
itkPointF3.__repr__ = new_instancemethod(_itkPointPython.itkPointF3___repr__, None, itkPointF3)
itkPointF3_swigregister = _itkPointPython.itkPointF3_swigregister
itkPointF3_swigregister(itkPointF3)

def itkPointF3_GetPointDimension() -> "unsigned int":
    """itkPointF3_GetPointDimension() -> unsigned int"""
    return _itkPointPython.itkPointF3_GetPointDimension()

def itkPointF3___len__() -> "unsigned int":
    """itkPointF3___len__() -> unsigned int"""
    return _itkPointPython.itkPointF3___len__()

class itkPointF4(itkFixedArrayPython.itkFixedArrayF4):
    """Proxy of C++ itkPointF4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetPointDimension() -> "unsigned int":
        """GetPointDimension() -> unsigned int"""
        return _itkPointPython.itkPointF4_GetPointDimension()

    GetPointDimension = staticmethod(GetPointDimension)
    __swig_destroy__ = _itkPointPython.delete_itkPointF4

    def __init__(self, *args):
        """
        __init__(itkPointF4 self) -> itkPointF4
        __init__(itkPointF4 self, itkPointF4 arg0) -> itkPointF4
        __init__(itkPointF4 self, float const * r) -> itkPointF4
        __init__(itkPointF4 self, float const & v) -> itkPointF4
        __init__(itkPointF4 self, std::array< float,4 > const & stdArray) -> itkPointF4
        """
        _itkPointPython.itkPointF4_swiginit(self, _itkPointPython.new_itkPointF4(*args))

    def __eq__(self, pt: 'itkPointF4') -> "bool":
        """__eq__(itkPointF4 self, itkPointF4 pt) -> bool"""
        return _itkPointPython.itkPointF4___eq__(self, pt)


    def __ne__(self, pt: 'itkPointF4') -> "bool":
        """__ne__(itkPointF4 self, itkPointF4 pt) -> bool"""
        return _itkPointPython.itkPointF4___ne__(self, pt)


    def __iadd__(self, vec: 'itkVectorF4') -> "itkPointF4 const &":
        """__iadd__(itkPointF4 self, itkVectorF4 vec) -> itkPointF4"""
        return _itkPointPython.itkPointF4___iadd__(self, vec)


    def __isub__(self, vec: 'itkVectorF4') -> "itkPointF4 const &":
        """__isub__(itkPointF4 self, itkVectorF4 vec) -> itkPointF4"""
        return _itkPointPython.itkPointF4___isub__(self, vec)


    def __add__(self, vec: 'itkVectorF4') -> "itkPointF4":
        """__add__(itkPointF4 self, itkVectorF4 vec) -> itkPointF4"""
        return _itkPointPython.itkPointF4___add__(self, vec)


    def __sub__(self, *args) -> "itkPointF4":
        """
        __sub__(itkPointF4 self, itkPointF4 pnt) -> itkVectorF4
        __sub__(itkPointF4 self, itkVectorF4 vec) -> itkPointF4
        """
        return _itkPointPython.itkPointF4___sub__(self, *args)


    def GetVectorFromOrigin(self) -> "itkVectorF4":
        """GetVectorFromOrigin(itkPointF4 self) -> itkVectorF4"""
        return _itkPointPython.itkPointF4_GetVectorFromOrigin(self)


    def GetVnlVector(self, *args) -> "vnl_vectorF":
        """
        GetVnlVector(itkPointF4 self) -> vnl_vector_refF
        GetVnlVector(itkPointF4 self) -> vnl_vectorF
        """
        return _itkPointPython.itkPointF4_GetVnlVector(self, *args)


    def SetToMidPoint(self, arg0: 'itkPointF4', arg1: 'itkPointF4') -> "void":
        """SetToMidPoint(itkPointF4 self, itkPointF4 arg0, itkPointF4 arg1)"""
        return _itkPointPython.itkPointF4_SetToMidPoint(self, arg0, arg1)


    def SetToBarycentricCombination(self, *args) -> "void":
        """
        SetToBarycentricCombination(itkPointF4 self, itkPointF4 A, itkPointF4 B, double alpha)
        SetToBarycentricCombination(itkPointF4 self, itkPointF4 A, itkPointF4 B, itkPointF4 C, double weightA, double weightB)
        SetToBarycentricCombination(itkPointF4 self, itkPointF4 P, double const * weights, unsigned int N)
        """
        return _itkPointPython.itkPointF4_SetToBarycentricCombination(self, *args)


    def __getitem__(self, d: 'unsigned long') -> "float":
        """__getitem__(itkPointF4 self, unsigned long d) -> float"""
        return _itkPointPython.itkPointF4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'float') -> "void":
        """__setitem__(itkPointF4 self, unsigned long d, float v)"""
        return _itkPointPython.itkPointF4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkPointPython.itkPointF4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkPointF4 self) -> std::string"""
        return _itkPointPython.itkPointF4___repr__(self)

itkPointF4.__eq__ = new_instancemethod(_itkPointPython.itkPointF4___eq__, None, itkPointF4)
itkPointF4.__ne__ = new_instancemethod(_itkPointPython.itkPointF4___ne__, None, itkPointF4)
itkPointF4.__iadd__ = new_instancemethod(_itkPointPython.itkPointF4___iadd__, None, itkPointF4)
itkPointF4.__isub__ = new_instancemethod(_itkPointPython.itkPointF4___isub__, None, itkPointF4)
itkPointF4.__add__ = new_instancemethod(_itkPointPython.itkPointF4___add__, None, itkPointF4)
itkPointF4.__sub__ = new_instancemethod(_itkPointPython.itkPointF4___sub__, None, itkPointF4)
itkPointF4.GetVectorFromOrigin = new_instancemethod(_itkPointPython.itkPointF4_GetVectorFromOrigin, None, itkPointF4)
itkPointF4.GetVnlVector = new_instancemethod(_itkPointPython.itkPointF4_GetVnlVector, None, itkPointF4)
itkPointF4.SetToMidPoint = new_instancemethod(_itkPointPython.itkPointF4_SetToMidPoint, None, itkPointF4)
itkPointF4.SetToBarycentricCombination = new_instancemethod(_itkPointPython.itkPointF4_SetToBarycentricCombination, None, itkPointF4)
itkPointF4.__getitem__ = new_instancemethod(_itkPointPython.itkPointF4___getitem__, None, itkPointF4)
itkPointF4.__setitem__ = new_instancemethod(_itkPointPython.itkPointF4___setitem__, None, itkPointF4)
itkPointF4.__repr__ = new_instancemethod(_itkPointPython.itkPointF4___repr__, None, itkPointF4)
itkPointF4_swigregister = _itkPointPython.itkPointF4_swigregister
itkPointF4_swigregister(itkPointF4)

def itkPointF4_GetPointDimension() -> "unsigned int":
    """itkPointF4_GetPointDimension() -> unsigned int"""
    return _itkPointPython.itkPointF4_GetPointDimension()

def itkPointF4___len__() -> "unsigned int":
    """itkPointF4___len__() -> unsigned int"""
    return _itkPointPython.itkPointF4___len__()



