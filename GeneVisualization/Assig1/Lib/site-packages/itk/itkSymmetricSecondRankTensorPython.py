# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSymmetricSecondRankTensorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSymmetricSecondRankTensorPython', [dirname(__file__)])
        except ImportError:
            import _itkSymmetricSecondRankTensorPython
            return _itkSymmetricSecondRankTensorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSymmetricSecondRankTensorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSymmetricSecondRankTensorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSymmetricSecondRankTensorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkFixedArrayPython
import pyBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import vnl_matrixPython
import vnl_vectorPython
import stdcomplexPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import itkCovariantVectorPython
class itkSymmetricSecondRankTensorD2(itkFixedArrayPython.itkFixedArrayD3):
    """Proxy of C++ itkSymmetricSecondRankTensorD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkSymmetricSecondRankTensorPython.delete_itkSymmetricSecondRankTensorD2

    def __init__(self, *args):
        """
        __init__(itkSymmetricSecondRankTensorD2 self) -> itkSymmetricSecondRankTensorD2
        __init__(itkSymmetricSecondRankTensorD2 self, itkSymmetricSecondRankTensorD2 arg0) -> itkSymmetricSecondRankTensorD2
        __init__(itkSymmetricSecondRankTensorD2 self, double const & r) -> itkSymmetricSecondRankTensorD2
        __init__(itkSymmetricSecondRankTensorD2 self, double const * r) -> itkSymmetricSecondRankTensorD2
        """
        _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_swiginit(self, _itkSymmetricSecondRankTensorPython.new_itkSymmetricSecondRankTensorD2(*args))

    def __add__(self, vec: 'itkSymmetricSecondRankTensorD2') -> "itkSymmetricSecondRankTensorD2":
        """__add__(itkSymmetricSecondRankTensorD2 self, itkSymmetricSecondRankTensorD2 vec) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___add__(self, vec)


    def __sub__(self, vec: 'itkSymmetricSecondRankTensorD2') -> "itkSymmetricSecondRankTensorD2":
        """__sub__(itkSymmetricSecondRankTensorD2 self, itkSymmetricSecondRankTensorD2 vec) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___sub__(self, vec)


    def __iadd__(self, vec: 'itkSymmetricSecondRankTensorD2') -> "itkSymmetricSecondRankTensorD2 const &":
        """__iadd__(itkSymmetricSecondRankTensorD2 self, itkSymmetricSecondRankTensorD2 vec) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___iadd__(self, vec)


    def __isub__(self, vec: 'itkSymmetricSecondRankTensorD2') -> "itkSymmetricSecondRankTensorD2 const &":
        """__isub__(itkSymmetricSecondRankTensorD2 self, itkSymmetricSecondRankTensorD2 vec) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___isub__(self, vec)


    def __mul__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorD2":
        """__mul__(itkSymmetricSecondRankTensorD2 self, double const & scalar) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___mul__(self, scalar)


    def __div__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorD2":
        """__div__(itkSymmetricSecondRankTensorD2 self, double const & scalar) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___div__(self, scalar)


    def __imul__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorD2 const &":
        """__imul__(itkSymmetricSecondRankTensorD2 self, double const & scalar) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___imul__(self, scalar)


    def __idiv__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorD2 const &":
        """__idiv__(itkSymmetricSecondRankTensorD2 self, double const & scalar) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___idiv__(self, scalar)


    def GetNumberOfComponents() -> "unsigned int":
        """GetNumberOfComponents() -> unsigned int"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)

    def GetNthComponent(self, c: 'int') -> "double":
        """GetNthComponent(itkSymmetricSecondRankTensorD2 self, int c) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetNthComponent(self, c)


    def SetNthComponent(self, c: 'int', v: 'double const &') -> "void":
        """SetNthComponent(itkSymmetricSecondRankTensorD2 self, int c, double const & v)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_SetNthComponent(self, c, v)


    def __call__(self, *args) -> "double const &":
        """
        __call__(itkSymmetricSecondRankTensorD2 self, unsigned int row, unsigned int col) -> double
        __call__(itkSymmetricSecondRankTensorD2 self, unsigned int row, unsigned int col) -> double const &
        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___call__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkSymmetricSecondRankTensorD2 self)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_SetIdentity(self)


    def GetTrace(self) -> "double":
        """GetTrace(itkSymmetricSecondRankTensorD2 self) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetTrace(self)


    def ComputeEigenValues(self, eigenValues: 'itkFixedArrayD2') -> "void":
        """ComputeEigenValues(itkSymmetricSecondRankTensorD2 self, itkFixedArrayD2 eigenValues)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_ComputeEigenValues(self, eigenValues)


    def ComputeEigenAnalysis(self, eigenValues: 'itkFixedArrayD2', eigenVectors: 'itkMatrixD22') -> "void":
        """ComputeEigenAnalysis(itkSymmetricSecondRankTensorD2 self, itkFixedArrayD2 eigenValues, itkMatrixD22 eigenVectors)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_ComputeEigenAnalysis(self, eigenValues, eigenVectors)


    def PreMultiply(self, m: 'itkMatrixD22') -> "itkMatrixD22":
        """PreMultiply(itkSymmetricSecondRankTensorD2 self, itkMatrixD22 m) -> itkMatrixD22"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_PreMultiply(self, m)


    def PostMultiply(self, m: 'itkMatrixD22') -> "itkMatrixD22":
        """PostMultiply(itkSymmetricSecondRankTensorD2 self, itkMatrixD22 m) -> itkMatrixD22"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_PostMultiply(self, m)

itkSymmetricSecondRankTensorD2.__add__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___add__, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__sub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___sub__, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__iadd__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___iadd__, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__isub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___isub__, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__mul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___mul__, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__div__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___div__, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__imul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___imul__, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__idiv__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___idiv__, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.GetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetNthComponent, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.SetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_SetNthComponent, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__call__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___call__, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.SetIdentity = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_SetIdentity, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.GetTrace = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetTrace, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.ComputeEigenValues = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_ComputeEigenValues, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.ComputeEigenAnalysis = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_ComputeEigenAnalysis, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.PreMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_PreMultiply, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.PostMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_PostMultiply, None, itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2_swigregister = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_swigregister
itkSymmetricSecondRankTensorD2_swigregister(itkSymmetricSecondRankTensorD2)

def itkSymmetricSecondRankTensorD2_GetNumberOfComponents() -> "unsigned int":
    """itkSymmetricSecondRankTensorD2_GetNumberOfComponents() -> unsigned int"""
    return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetNumberOfComponents()

class itkSymmetricSecondRankTensorD3(itkFixedArrayPython.itkFixedArrayD6):
    """Proxy of C++ itkSymmetricSecondRankTensorD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkSymmetricSecondRankTensorPython.delete_itkSymmetricSecondRankTensorD3

    def __init__(self, *args):
        """
        __init__(itkSymmetricSecondRankTensorD3 self) -> itkSymmetricSecondRankTensorD3
        __init__(itkSymmetricSecondRankTensorD3 self, itkSymmetricSecondRankTensorD3 arg0) -> itkSymmetricSecondRankTensorD3
        __init__(itkSymmetricSecondRankTensorD3 self, double const & r) -> itkSymmetricSecondRankTensorD3
        __init__(itkSymmetricSecondRankTensorD3 self, double const * r) -> itkSymmetricSecondRankTensorD3
        """
        _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_swiginit(self, _itkSymmetricSecondRankTensorPython.new_itkSymmetricSecondRankTensorD3(*args))

    def __add__(self, vec: 'itkSymmetricSecondRankTensorD3') -> "itkSymmetricSecondRankTensorD3":
        """__add__(itkSymmetricSecondRankTensorD3 self, itkSymmetricSecondRankTensorD3 vec) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___add__(self, vec)


    def __sub__(self, vec: 'itkSymmetricSecondRankTensorD3') -> "itkSymmetricSecondRankTensorD3":
        """__sub__(itkSymmetricSecondRankTensorD3 self, itkSymmetricSecondRankTensorD3 vec) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___sub__(self, vec)


    def __iadd__(self, vec: 'itkSymmetricSecondRankTensorD3') -> "itkSymmetricSecondRankTensorD3 const &":
        """__iadd__(itkSymmetricSecondRankTensorD3 self, itkSymmetricSecondRankTensorD3 vec) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___iadd__(self, vec)


    def __isub__(self, vec: 'itkSymmetricSecondRankTensorD3') -> "itkSymmetricSecondRankTensorD3 const &":
        """__isub__(itkSymmetricSecondRankTensorD3 self, itkSymmetricSecondRankTensorD3 vec) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___isub__(self, vec)


    def __mul__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorD3":
        """__mul__(itkSymmetricSecondRankTensorD3 self, double const & scalar) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___mul__(self, scalar)


    def __div__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorD3":
        """__div__(itkSymmetricSecondRankTensorD3 self, double const & scalar) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___div__(self, scalar)


    def __imul__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorD3 const &":
        """__imul__(itkSymmetricSecondRankTensorD3 self, double const & scalar) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___imul__(self, scalar)


    def __idiv__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorD3 const &":
        """__idiv__(itkSymmetricSecondRankTensorD3 self, double const & scalar) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___idiv__(self, scalar)


    def GetNumberOfComponents() -> "unsigned int":
        """GetNumberOfComponents() -> unsigned int"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)

    def GetNthComponent(self, c: 'int') -> "double":
        """GetNthComponent(itkSymmetricSecondRankTensorD3 self, int c) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetNthComponent(self, c)


    def SetNthComponent(self, c: 'int', v: 'double const &') -> "void":
        """SetNthComponent(itkSymmetricSecondRankTensorD3 self, int c, double const & v)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_SetNthComponent(self, c, v)


    def __call__(self, *args) -> "double const &":
        """
        __call__(itkSymmetricSecondRankTensorD3 self, unsigned int row, unsigned int col) -> double
        __call__(itkSymmetricSecondRankTensorD3 self, unsigned int row, unsigned int col) -> double const &
        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___call__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkSymmetricSecondRankTensorD3 self)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_SetIdentity(self)


    def GetTrace(self) -> "double":
        """GetTrace(itkSymmetricSecondRankTensorD3 self) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetTrace(self)


    def ComputeEigenValues(self, eigenValues: 'itkFixedArrayD3') -> "void":
        """ComputeEigenValues(itkSymmetricSecondRankTensorD3 self, itkFixedArrayD3 eigenValues)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_ComputeEigenValues(self, eigenValues)


    def ComputeEigenAnalysis(self, eigenValues: 'itkFixedArrayD3', eigenVectors: 'itkMatrixD33') -> "void":
        """ComputeEigenAnalysis(itkSymmetricSecondRankTensorD3 self, itkFixedArrayD3 eigenValues, itkMatrixD33 eigenVectors)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_ComputeEigenAnalysis(self, eigenValues, eigenVectors)


    def PreMultiply(self, m: 'itkMatrixD33') -> "itkMatrixD33":
        """PreMultiply(itkSymmetricSecondRankTensorD3 self, itkMatrixD33 m) -> itkMatrixD33"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_PreMultiply(self, m)


    def PostMultiply(self, m: 'itkMatrixD33') -> "itkMatrixD33":
        """PostMultiply(itkSymmetricSecondRankTensorD3 self, itkMatrixD33 m) -> itkMatrixD33"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_PostMultiply(self, m)

itkSymmetricSecondRankTensorD3.__add__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___add__, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__sub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___sub__, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__iadd__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___iadd__, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__isub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___isub__, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__mul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___mul__, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__div__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___div__, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__imul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___imul__, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__idiv__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___idiv__, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.GetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetNthComponent, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.SetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_SetNthComponent, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__call__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___call__, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.SetIdentity = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_SetIdentity, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.GetTrace = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetTrace, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.ComputeEigenValues = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_ComputeEigenValues, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.ComputeEigenAnalysis = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_ComputeEigenAnalysis, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.PreMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_PreMultiply, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.PostMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_PostMultiply, None, itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3_swigregister = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_swigregister
itkSymmetricSecondRankTensorD3_swigregister(itkSymmetricSecondRankTensorD3)

def itkSymmetricSecondRankTensorD3_GetNumberOfComponents() -> "unsigned int":
    """itkSymmetricSecondRankTensorD3_GetNumberOfComponents() -> unsigned int"""
    return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetNumberOfComponents()

class itkSymmetricSecondRankTensorF2(itkFixedArrayPython.itkFixedArrayF3):
    """Proxy of C++ itkSymmetricSecondRankTensorF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkSymmetricSecondRankTensorPython.delete_itkSymmetricSecondRankTensorF2

    def __init__(self, *args):
        """
        __init__(itkSymmetricSecondRankTensorF2 self) -> itkSymmetricSecondRankTensorF2
        __init__(itkSymmetricSecondRankTensorF2 self, itkSymmetricSecondRankTensorF2 arg0) -> itkSymmetricSecondRankTensorF2
        __init__(itkSymmetricSecondRankTensorF2 self, float const & r) -> itkSymmetricSecondRankTensorF2
        __init__(itkSymmetricSecondRankTensorF2 self, float const * r) -> itkSymmetricSecondRankTensorF2
        """
        _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_swiginit(self, _itkSymmetricSecondRankTensorPython.new_itkSymmetricSecondRankTensorF2(*args))

    def __add__(self, vec: 'itkSymmetricSecondRankTensorF2') -> "itkSymmetricSecondRankTensorF2":
        """__add__(itkSymmetricSecondRankTensorF2 self, itkSymmetricSecondRankTensorF2 vec) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___add__(self, vec)


    def __sub__(self, vec: 'itkSymmetricSecondRankTensorF2') -> "itkSymmetricSecondRankTensorF2":
        """__sub__(itkSymmetricSecondRankTensorF2 self, itkSymmetricSecondRankTensorF2 vec) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___sub__(self, vec)


    def __iadd__(self, vec: 'itkSymmetricSecondRankTensorF2') -> "itkSymmetricSecondRankTensorF2 const &":
        """__iadd__(itkSymmetricSecondRankTensorF2 self, itkSymmetricSecondRankTensorF2 vec) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___iadd__(self, vec)


    def __isub__(self, vec: 'itkSymmetricSecondRankTensorF2') -> "itkSymmetricSecondRankTensorF2 const &":
        """__isub__(itkSymmetricSecondRankTensorF2 self, itkSymmetricSecondRankTensorF2 vec) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___isub__(self, vec)


    def __mul__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorF2":
        """__mul__(itkSymmetricSecondRankTensorF2 self, double const & scalar) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___mul__(self, scalar)


    def __div__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorF2":
        """__div__(itkSymmetricSecondRankTensorF2 self, double const & scalar) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___div__(self, scalar)


    def __imul__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorF2 const &":
        """__imul__(itkSymmetricSecondRankTensorF2 self, double const & scalar) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___imul__(self, scalar)


    def __idiv__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorF2 const &":
        """__idiv__(itkSymmetricSecondRankTensorF2 self, double const & scalar) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___idiv__(self, scalar)


    def GetNumberOfComponents() -> "unsigned int":
        """GetNumberOfComponents() -> unsigned int"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)

    def GetNthComponent(self, c: 'int') -> "float":
        """GetNthComponent(itkSymmetricSecondRankTensorF2 self, int c) -> float"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetNthComponent(self, c)


    def SetNthComponent(self, c: 'int', v: 'float const &') -> "void":
        """SetNthComponent(itkSymmetricSecondRankTensorF2 self, int c, float const & v)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_SetNthComponent(self, c, v)


    def __call__(self, *args) -> "float const &":
        """
        __call__(itkSymmetricSecondRankTensorF2 self, unsigned int row, unsigned int col) -> float
        __call__(itkSymmetricSecondRankTensorF2 self, unsigned int row, unsigned int col) -> float const &
        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___call__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkSymmetricSecondRankTensorF2 self)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_SetIdentity(self)


    def GetTrace(self) -> "double":
        """GetTrace(itkSymmetricSecondRankTensorF2 self) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetTrace(self)


    def ComputeEigenValues(self, eigenValues: 'itkFixedArrayF2') -> "void":
        """ComputeEigenValues(itkSymmetricSecondRankTensorF2 self, itkFixedArrayF2 eigenValues)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_ComputeEigenValues(self, eigenValues)


    def ComputeEigenAnalysis(self, eigenValues: 'itkFixedArrayF2', eigenVectors: 'itkMatrixF22') -> "void":
        """ComputeEigenAnalysis(itkSymmetricSecondRankTensorF2 self, itkFixedArrayF2 eigenValues, itkMatrixF22 eigenVectors)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_ComputeEigenAnalysis(self, eigenValues, eigenVectors)


    def PreMultiply(self, m: 'itkMatrixF22') -> "itkMatrixF22":
        """PreMultiply(itkSymmetricSecondRankTensorF2 self, itkMatrixF22 m) -> itkMatrixF22"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_PreMultiply(self, m)


    def PostMultiply(self, m: 'itkMatrixF22') -> "itkMatrixF22":
        """PostMultiply(itkSymmetricSecondRankTensorF2 self, itkMatrixF22 m) -> itkMatrixF22"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_PostMultiply(self, m)

itkSymmetricSecondRankTensorF2.__add__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___add__, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__sub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___sub__, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__iadd__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___iadd__, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__isub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___isub__, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__mul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___mul__, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__div__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___div__, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__imul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___imul__, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__idiv__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___idiv__, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.GetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetNthComponent, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.SetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_SetNthComponent, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__call__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___call__, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.SetIdentity = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_SetIdentity, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.GetTrace = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetTrace, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.ComputeEigenValues = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_ComputeEigenValues, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.ComputeEigenAnalysis = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_ComputeEigenAnalysis, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.PreMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_PreMultiply, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.PostMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_PostMultiply, None, itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2_swigregister = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_swigregister
itkSymmetricSecondRankTensorF2_swigregister(itkSymmetricSecondRankTensorF2)

def itkSymmetricSecondRankTensorF2_GetNumberOfComponents() -> "unsigned int":
    """itkSymmetricSecondRankTensorF2_GetNumberOfComponents() -> unsigned int"""
    return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetNumberOfComponents()

class itkSymmetricSecondRankTensorF3(itkFixedArrayPython.itkFixedArrayF6):
    """Proxy of C++ itkSymmetricSecondRankTensorF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkSymmetricSecondRankTensorPython.delete_itkSymmetricSecondRankTensorF3

    def __init__(self, *args):
        """
        __init__(itkSymmetricSecondRankTensorF3 self) -> itkSymmetricSecondRankTensorF3
        __init__(itkSymmetricSecondRankTensorF3 self, itkSymmetricSecondRankTensorF3 arg0) -> itkSymmetricSecondRankTensorF3
        __init__(itkSymmetricSecondRankTensorF3 self, float const & r) -> itkSymmetricSecondRankTensorF3
        __init__(itkSymmetricSecondRankTensorF3 self, float const * r) -> itkSymmetricSecondRankTensorF3
        """
        _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_swiginit(self, _itkSymmetricSecondRankTensorPython.new_itkSymmetricSecondRankTensorF3(*args))

    def __add__(self, vec: 'itkSymmetricSecondRankTensorF3') -> "itkSymmetricSecondRankTensorF3":
        """__add__(itkSymmetricSecondRankTensorF3 self, itkSymmetricSecondRankTensorF3 vec) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___add__(self, vec)


    def __sub__(self, vec: 'itkSymmetricSecondRankTensorF3') -> "itkSymmetricSecondRankTensorF3":
        """__sub__(itkSymmetricSecondRankTensorF3 self, itkSymmetricSecondRankTensorF3 vec) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___sub__(self, vec)


    def __iadd__(self, vec: 'itkSymmetricSecondRankTensorF3') -> "itkSymmetricSecondRankTensorF3 const &":
        """__iadd__(itkSymmetricSecondRankTensorF3 self, itkSymmetricSecondRankTensorF3 vec) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___iadd__(self, vec)


    def __isub__(self, vec: 'itkSymmetricSecondRankTensorF3') -> "itkSymmetricSecondRankTensorF3 const &":
        """__isub__(itkSymmetricSecondRankTensorF3 self, itkSymmetricSecondRankTensorF3 vec) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___isub__(self, vec)


    def __mul__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorF3":
        """__mul__(itkSymmetricSecondRankTensorF3 self, double const & scalar) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___mul__(self, scalar)


    def __div__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorF3":
        """__div__(itkSymmetricSecondRankTensorF3 self, double const & scalar) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___div__(self, scalar)


    def __imul__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorF3 const &":
        """__imul__(itkSymmetricSecondRankTensorF3 self, double const & scalar) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___imul__(self, scalar)


    def __idiv__(self, scalar: 'double const &') -> "itkSymmetricSecondRankTensorF3 const &":
        """__idiv__(itkSymmetricSecondRankTensorF3 self, double const & scalar) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___idiv__(self, scalar)


    def GetNumberOfComponents() -> "unsigned int":
        """GetNumberOfComponents() -> unsigned int"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)

    def GetNthComponent(self, c: 'int') -> "float":
        """GetNthComponent(itkSymmetricSecondRankTensorF3 self, int c) -> float"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetNthComponent(self, c)


    def SetNthComponent(self, c: 'int', v: 'float const &') -> "void":
        """SetNthComponent(itkSymmetricSecondRankTensorF3 self, int c, float const & v)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_SetNthComponent(self, c, v)


    def __call__(self, *args) -> "float const &":
        """
        __call__(itkSymmetricSecondRankTensorF3 self, unsigned int row, unsigned int col) -> float
        __call__(itkSymmetricSecondRankTensorF3 self, unsigned int row, unsigned int col) -> float const &
        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___call__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkSymmetricSecondRankTensorF3 self)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_SetIdentity(self)


    def GetTrace(self) -> "double":
        """GetTrace(itkSymmetricSecondRankTensorF3 self) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetTrace(self)


    def ComputeEigenValues(self, eigenValues: 'itkFixedArrayF3') -> "void":
        """ComputeEigenValues(itkSymmetricSecondRankTensorF3 self, itkFixedArrayF3 eigenValues)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_ComputeEigenValues(self, eigenValues)


    def ComputeEigenAnalysis(self, eigenValues: 'itkFixedArrayF3', eigenVectors: 'itkMatrixF33') -> "void":
        """ComputeEigenAnalysis(itkSymmetricSecondRankTensorF3 self, itkFixedArrayF3 eigenValues, itkMatrixF33 eigenVectors)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_ComputeEigenAnalysis(self, eigenValues, eigenVectors)


    def PreMultiply(self, m: 'itkMatrixF33') -> "itkMatrixF33":
        """PreMultiply(itkSymmetricSecondRankTensorF3 self, itkMatrixF33 m) -> itkMatrixF33"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_PreMultiply(self, m)


    def PostMultiply(self, m: 'itkMatrixF33') -> "itkMatrixF33":
        """PostMultiply(itkSymmetricSecondRankTensorF3 self, itkMatrixF33 m) -> itkMatrixF33"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_PostMultiply(self, m)

itkSymmetricSecondRankTensorF3.__add__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___add__, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__sub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___sub__, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__iadd__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___iadd__, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__isub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___isub__, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__mul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___mul__, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__div__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___div__, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__imul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___imul__, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__idiv__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___idiv__, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.GetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetNthComponent, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.SetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_SetNthComponent, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__call__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___call__, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.SetIdentity = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_SetIdentity, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.GetTrace = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetTrace, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.ComputeEigenValues = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_ComputeEigenValues, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.ComputeEigenAnalysis = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_ComputeEigenAnalysis, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.PreMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_PreMultiply, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.PostMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_PostMultiply, None, itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3_swigregister = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_swigregister
itkSymmetricSecondRankTensorF3_swigregister(itkSymmetricSecondRankTensorF3)

def itkSymmetricSecondRankTensorF3_GetNumberOfComponents() -> "unsigned int":
    """itkSymmetricSecondRankTensorF3_GetNumberOfComponents() -> unsigned int"""
    return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetNumberOfComponents()



