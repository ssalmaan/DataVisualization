# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkFunctionBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkFunctionBasePython', [dirname(__file__)])
        except ImportError:
            import _itkFunctionBasePython
            return _itkFunctionBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkFunctionBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkFunctionBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkFunctionBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkContinuousIndexPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import itkFixedArrayPython
import itkImagePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import ITKCommonBasePython
import itkImageRegionPython
import itkRGBPixelPython
import itkRGBAPixelPython

def itkFunctionBaseFF_New():
  return itkFunctionBaseFF.New()


def itkFunctionBasePD3RGBAD_New():
  return itkFunctionBasePD3RGBAD.New()


def itkFunctionBasePD3RGBD_New():
  return itkFunctionBasePD3RGBD.New()


def itkFunctionBasePD3RGBAUC_New():
  return itkFunctionBasePD3RGBAUC.New()


def itkFunctionBasePD3RGBUC_New():
  return itkFunctionBasePD3RGBUC.New()


def itkFunctionBaseVF3D_New():
  return itkFunctionBaseVF3D.New()


def itkFunctionBasePD3CVD3_New():
  return itkFunctionBasePD3CVD3.New()


def itkFunctionBasePD3VD3_New():
  return itkFunctionBasePD3VD3.New()


def itkFunctionBaseCID3AD_New():
  return itkFunctionBaseCID3AD.New()


def itkFunctionBaseCIF3AD_New():
  return itkFunctionBaseCIF3AD.New()


def itkFunctionBasePF3F_New():
  return itkFunctionBasePF3F.New()


def itkFunctionBasePD3F_New():
  return itkFunctionBasePD3F.New()


def itkFunctionBasePF3D_New():
  return itkFunctionBasePF3D.New()


def itkFunctionBasePD3D_New():
  return itkFunctionBasePD3D.New()


def itkFunctionBaseIUS3D_New():
  return itkFunctionBaseIUS3D.New()


def itkFunctionBaseIF3D_New():
  return itkFunctionBaseIF3D.New()


def itkFunctionBasePD2RGBAD_New():
  return itkFunctionBasePD2RGBAD.New()


def itkFunctionBasePD2RGBD_New():
  return itkFunctionBasePD2RGBD.New()


def itkFunctionBasePD2RGBAUC_New():
  return itkFunctionBasePD2RGBAUC.New()


def itkFunctionBasePD2RGBUC_New():
  return itkFunctionBasePD2RGBUC.New()


def itkFunctionBaseVF2D_New():
  return itkFunctionBaseVF2D.New()


def itkFunctionBasePD2CVD2_New():
  return itkFunctionBasePD2CVD2.New()


def itkFunctionBasePD2VD2_New():
  return itkFunctionBasePD2VD2.New()


def itkFunctionBaseCID2AD_New():
  return itkFunctionBaseCID2AD.New()


def itkFunctionBaseCIF2AD_New():
  return itkFunctionBaseCIF2AD.New()


def itkFunctionBasePF2F_New():
  return itkFunctionBasePF2F.New()


def itkFunctionBasePD2F_New():
  return itkFunctionBasePD2F.New()


def itkFunctionBasePF2D_New():
  return itkFunctionBasePF2D.New()


def itkFunctionBasePD2D_New():
  return itkFunctionBasePD2D.New()


def itkFunctionBaseIUS2D_New():
  return itkFunctionBaseIUS2D.New()


def itkFunctionBaseIF2D_New():
  return itkFunctionBaseIF2D.New()

class itkFunctionBaseCID2AD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseCID2AD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkContinuousIndexD2') -> "itkArrayD":
        """Evaluate(itkFunctionBaseCID2AD self, itkContinuousIndexD2 input) -> itkArrayD"""
        return _itkFunctionBasePython.itkFunctionBaseCID2AD_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseCID2AD

    def cast(obj: 'itkLightObject') -> "itkFunctionBaseCID2AD *":
        """cast(itkLightObject obj) -> itkFunctionBaseCID2AD"""
        return _itkFunctionBasePython.itkFunctionBaseCID2AD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseCID2AD

        Create a new object of the class itkFunctionBaseCID2AD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBaseCID2AD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBaseCID2AD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseCID2AD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseCID2AD.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseCID2AD_Evaluate, None, itkFunctionBaseCID2AD)
itkFunctionBaseCID2AD_swigregister = _itkFunctionBasePython.itkFunctionBaseCID2AD_swigregister
itkFunctionBaseCID2AD_swigregister(itkFunctionBaseCID2AD)

def itkFunctionBaseCID2AD_cast(obj: 'itkLightObject') -> "itkFunctionBaseCID2AD *":
    """itkFunctionBaseCID2AD_cast(itkLightObject obj) -> itkFunctionBaseCID2AD"""
    return _itkFunctionBasePython.itkFunctionBaseCID2AD_cast(obj)

class itkFunctionBaseCID3AD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseCID3AD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkContinuousIndexD3') -> "itkArrayD":
        """Evaluate(itkFunctionBaseCID3AD self, itkContinuousIndexD3 input) -> itkArrayD"""
        return _itkFunctionBasePython.itkFunctionBaseCID3AD_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseCID3AD

    def cast(obj: 'itkLightObject') -> "itkFunctionBaseCID3AD *":
        """cast(itkLightObject obj) -> itkFunctionBaseCID3AD"""
        return _itkFunctionBasePython.itkFunctionBaseCID3AD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseCID3AD

        Create a new object of the class itkFunctionBaseCID3AD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBaseCID3AD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBaseCID3AD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseCID3AD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseCID3AD.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseCID3AD_Evaluate, None, itkFunctionBaseCID3AD)
itkFunctionBaseCID3AD_swigregister = _itkFunctionBasePython.itkFunctionBaseCID3AD_swigregister
itkFunctionBaseCID3AD_swigregister(itkFunctionBaseCID3AD)

def itkFunctionBaseCID3AD_cast(obj: 'itkLightObject') -> "itkFunctionBaseCID3AD *":
    """itkFunctionBaseCID3AD_cast(itkLightObject obj) -> itkFunctionBaseCID3AD"""
    return _itkFunctionBasePython.itkFunctionBaseCID3AD_cast(obj)

class itkFunctionBaseCIF2AD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseCIF2AD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkContinuousIndexF2') -> "itkArrayD":
        """Evaluate(itkFunctionBaseCIF2AD self, itkContinuousIndexF2 input) -> itkArrayD"""
        return _itkFunctionBasePython.itkFunctionBaseCIF2AD_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseCIF2AD

    def cast(obj: 'itkLightObject') -> "itkFunctionBaseCIF2AD *":
        """cast(itkLightObject obj) -> itkFunctionBaseCIF2AD"""
        return _itkFunctionBasePython.itkFunctionBaseCIF2AD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseCIF2AD

        Create a new object of the class itkFunctionBaseCIF2AD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBaseCIF2AD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBaseCIF2AD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseCIF2AD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseCIF2AD.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseCIF2AD_Evaluate, None, itkFunctionBaseCIF2AD)
itkFunctionBaseCIF2AD_swigregister = _itkFunctionBasePython.itkFunctionBaseCIF2AD_swigregister
itkFunctionBaseCIF2AD_swigregister(itkFunctionBaseCIF2AD)

def itkFunctionBaseCIF2AD_cast(obj: 'itkLightObject') -> "itkFunctionBaseCIF2AD *":
    """itkFunctionBaseCIF2AD_cast(itkLightObject obj) -> itkFunctionBaseCIF2AD"""
    return _itkFunctionBasePython.itkFunctionBaseCIF2AD_cast(obj)

class itkFunctionBaseCIF3AD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseCIF3AD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkContinuousIndexF3') -> "itkArrayD":
        """Evaluate(itkFunctionBaseCIF3AD self, itkContinuousIndexF3 input) -> itkArrayD"""
        return _itkFunctionBasePython.itkFunctionBaseCIF3AD_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseCIF3AD

    def cast(obj: 'itkLightObject') -> "itkFunctionBaseCIF3AD *":
        """cast(itkLightObject obj) -> itkFunctionBaseCIF3AD"""
        return _itkFunctionBasePython.itkFunctionBaseCIF3AD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseCIF3AD

        Create a new object of the class itkFunctionBaseCIF3AD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBaseCIF3AD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBaseCIF3AD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseCIF3AD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseCIF3AD.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseCIF3AD_Evaluate, None, itkFunctionBaseCIF3AD)
itkFunctionBaseCIF3AD_swigregister = _itkFunctionBasePython.itkFunctionBaseCIF3AD_swigregister
itkFunctionBaseCIF3AD_swigregister(itkFunctionBaseCIF3AD)

def itkFunctionBaseCIF3AD_cast(obj: 'itkLightObject') -> "itkFunctionBaseCIF3AD *":
    """itkFunctionBaseCIF3AD_cast(itkLightObject obj) -> itkFunctionBaseCIF3AD"""
    return _itkFunctionBasePython.itkFunctionBaseCIF3AD_cast(obj)

class itkFunctionBaseFF(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseFF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'float const &') -> "float":
        """Evaluate(itkFunctionBaseFF self, float const & input) -> float"""
        return _itkFunctionBasePython.itkFunctionBaseFF_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseFF

    def cast(obj: 'itkLightObject') -> "itkFunctionBaseFF *":
        """cast(itkLightObject obj) -> itkFunctionBaseFF"""
        return _itkFunctionBasePython.itkFunctionBaseFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseFF

        Create a new object of the class itkFunctionBaseFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBaseFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBaseFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseFF.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseFF_Evaluate, None, itkFunctionBaseFF)
itkFunctionBaseFF_swigregister = _itkFunctionBasePython.itkFunctionBaseFF_swigregister
itkFunctionBaseFF_swigregister(itkFunctionBaseFF)

def itkFunctionBaseFF_cast(obj: 'itkLightObject') -> "itkFunctionBaseFF *":
    """itkFunctionBaseFF_cast(itkLightObject obj) -> itkFunctionBaseFF"""
    return _itkFunctionBasePython.itkFunctionBaseFF_cast(obj)

class itkFunctionBaseIF2D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseIF2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkImageF2') -> "double":
        """Evaluate(itkFunctionBaseIF2D self, itkImageF2 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBaseIF2D_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseIF2D

    def cast(obj: 'itkLightObject') -> "itkFunctionBaseIF2D *":
        """cast(itkLightObject obj) -> itkFunctionBaseIF2D"""
        return _itkFunctionBasePython.itkFunctionBaseIF2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseIF2D

        Create a new object of the class itkFunctionBaseIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBaseIF2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBaseIF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseIF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseIF2D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseIF2D_Evaluate, None, itkFunctionBaseIF2D)
itkFunctionBaseIF2D_swigregister = _itkFunctionBasePython.itkFunctionBaseIF2D_swigregister
itkFunctionBaseIF2D_swigregister(itkFunctionBaseIF2D)

def itkFunctionBaseIF2D_cast(obj: 'itkLightObject') -> "itkFunctionBaseIF2D *":
    """itkFunctionBaseIF2D_cast(itkLightObject obj) -> itkFunctionBaseIF2D"""
    return _itkFunctionBasePython.itkFunctionBaseIF2D_cast(obj)

class itkFunctionBaseIF3D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseIF3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkImageF3') -> "double":
        """Evaluate(itkFunctionBaseIF3D self, itkImageF3 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBaseIF3D_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseIF3D

    def cast(obj: 'itkLightObject') -> "itkFunctionBaseIF3D *":
        """cast(itkLightObject obj) -> itkFunctionBaseIF3D"""
        return _itkFunctionBasePython.itkFunctionBaseIF3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseIF3D

        Create a new object of the class itkFunctionBaseIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBaseIF3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBaseIF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseIF3D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseIF3D_Evaluate, None, itkFunctionBaseIF3D)
itkFunctionBaseIF3D_swigregister = _itkFunctionBasePython.itkFunctionBaseIF3D_swigregister
itkFunctionBaseIF3D_swigregister(itkFunctionBaseIF3D)

def itkFunctionBaseIF3D_cast(obj: 'itkLightObject') -> "itkFunctionBaseIF3D *":
    """itkFunctionBaseIF3D_cast(itkLightObject obj) -> itkFunctionBaseIF3D"""
    return _itkFunctionBasePython.itkFunctionBaseIF3D_cast(obj)

class itkFunctionBaseIUS2D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseIUS2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkImageUS2') -> "double":
        """Evaluate(itkFunctionBaseIUS2D self, itkImageUS2 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBaseIUS2D_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseIUS2D

    def cast(obj: 'itkLightObject') -> "itkFunctionBaseIUS2D *":
        """cast(itkLightObject obj) -> itkFunctionBaseIUS2D"""
        return _itkFunctionBasePython.itkFunctionBaseIUS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseIUS2D

        Create a new object of the class itkFunctionBaseIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBaseIUS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBaseIUS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseIUS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseIUS2D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseIUS2D_Evaluate, None, itkFunctionBaseIUS2D)
itkFunctionBaseIUS2D_swigregister = _itkFunctionBasePython.itkFunctionBaseIUS2D_swigregister
itkFunctionBaseIUS2D_swigregister(itkFunctionBaseIUS2D)

def itkFunctionBaseIUS2D_cast(obj: 'itkLightObject') -> "itkFunctionBaseIUS2D *":
    """itkFunctionBaseIUS2D_cast(itkLightObject obj) -> itkFunctionBaseIUS2D"""
    return _itkFunctionBasePython.itkFunctionBaseIUS2D_cast(obj)

class itkFunctionBaseIUS3D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseIUS3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkImageUS3') -> "double":
        """Evaluate(itkFunctionBaseIUS3D self, itkImageUS3 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBaseIUS3D_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseIUS3D

    def cast(obj: 'itkLightObject') -> "itkFunctionBaseIUS3D *":
        """cast(itkLightObject obj) -> itkFunctionBaseIUS3D"""
        return _itkFunctionBasePython.itkFunctionBaseIUS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseIUS3D

        Create a new object of the class itkFunctionBaseIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBaseIUS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBaseIUS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseIUS3D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseIUS3D_Evaluate, None, itkFunctionBaseIUS3D)
itkFunctionBaseIUS3D_swigregister = _itkFunctionBasePython.itkFunctionBaseIUS3D_swigregister
itkFunctionBaseIUS3D_swigregister(itkFunctionBaseIUS3D)

def itkFunctionBaseIUS3D_cast(obj: 'itkLightObject') -> "itkFunctionBaseIUS3D *":
    """itkFunctionBaseIUS3D_cast(itkLightObject obj) -> itkFunctionBaseIUS3D"""
    return _itkFunctionBasePython.itkFunctionBaseIUS3D_cast(obj)

class itkFunctionBasePD2CVD2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD2CVD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD2') -> "itkCovariantVectorD2":
        """Evaluate(itkFunctionBasePD2CVD2 self, itkPointD2 input) -> itkCovariantVectorD2"""
        return _itkFunctionBasePython.itkFunctionBasePD2CVD2_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD2CVD2

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD2CVD2 *":
        """cast(itkLightObject obj) -> itkFunctionBasePD2CVD2"""
        return _itkFunctionBasePython.itkFunctionBasePD2CVD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD2CVD2

        Create a new object of the class itkFunctionBasePD2CVD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD2CVD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD2CVD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD2CVD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD2CVD2.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD2CVD2_Evaluate, None, itkFunctionBasePD2CVD2)
itkFunctionBasePD2CVD2_swigregister = _itkFunctionBasePython.itkFunctionBasePD2CVD2_swigregister
itkFunctionBasePD2CVD2_swigregister(itkFunctionBasePD2CVD2)

def itkFunctionBasePD2CVD2_cast(obj: 'itkLightObject') -> "itkFunctionBasePD2CVD2 *":
    """itkFunctionBasePD2CVD2_cast(itkLightObject obj) -> itkFunctionBasePD2CVD2"""
    return _itkFunctionBasePython.itkFunctionBasePD2CVD2_cast(obj)

class itkFunctionBasePD2D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD2') -> "double":
        """Evaluate(itkFunctionBasePD2D self, itkPointD2 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBasePD2D_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD2D

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD2D *":
        """cast(itkLightObject obj) -> itkFunctionBasePD2D"""
        return _itkFunctionBasePython.itkFunctionBasePD2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD2D

        Create a new object of the class itkFunctionBasePD2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD2D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD2D_Evaluate, None, itkFunctionBasePD2D)
itkFunctionBasePD2D_swigregister = _itkFunctionBasePython.itkFunctionBasePD2D_swigregister
itkFunctionBasePD2D_swigregister(itkFunctionBasePD2D)

def itkFunctionBasePD2D_cast(obj: 'itkLightObject') -> "itkFunctionBasePD2D *":
    """itkFunctionBasePD2D_cast(itkLightObject obj) -> itkFunctionBasePD2D"""
    return _itkFunctionBasePython.itkFunctionBasePD2D_cast(obj)

class itkFunctionBasePD2F(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD2F class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD2') -> "float":
        """Evaluate(itkFunctionBasePD2F self, itkPointD2 input) -> float"""
        return _itkFunctionBasePython.itkFunctionBasePD2F_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD2F

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD2F *":
        """cast(itkLightObject obj) -> itkFunctionBasePD2F"""
        return _itkFunctionBasePython.itkFunctionBasePD2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD2F

        Create a new object of the class itkFunctionBasePD2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD2F.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD2F_Evaluate, None, itkFunctionBasePD2F)
itkFunctionBasePD2F_swigregister = _itkFunctionBasePython.itkFunctionBasePD2F_swigregister
itkFunctionBasePD2F_swigregister(itkFunctionBasePD2F)

def itkFunctionBasePD2F_cast(obj: 'itkLightObject') -> "itkFunctionBasePD2F *":
    """itkFunctionBasePD2F_cast(itkLightObject obj) -> itkFunctionBasePD2F"""
    return _itkFunctionBasePython.itkFunctionBasePD2F_cast(obj)

class itkFunctionBasePD2RGBAD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD2RGBAD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD2') -> "itkRGBAPixelD":
        """Evaluate(itkFunctionBasePD2RGBAD self, itkPointD2 input) -> itkRGBAPixelD"""
        return _itkFunctionBasePython.itkFunctionBasePD2RGBAD_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD2RGBAD

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD2RGBAD *":
        """cast(itkLightObject obj) -> itkFunctionBasePD2RGBAD"""
        return _itkFunctionBasePython.itkFunctionBasePD2RGBAD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD2RGBAD

        Create a new object of the class itkFunctionBasePD2RGBAD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD2RGBAD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD2RGBAD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD2RGBAD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD2RGBAD.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD2RGBAD_Evaluate, None, itkFunctionBasePD2RGBAD)
itkFunctionBasePD2RGBAD_swigregister = _itkFunctionBasePython.itkFunctionBasePD2RGBAD_swigregister
itkFunctionBasePD2RGBAD_swigregister(itkFunctionBasePD2RGBAD)

def itkFunctionBasePD2RGBAD_cast(obj: 'itkLightObject') -> "itkFunctionBasePD2RGBAD *":
    """itkFunctionBasePD2RGBAD_cast(itkLightObject obj) -> itkFunctionBasePD2RGBAD"""
    return _itkFunctionBasePython.itkFunctionBasePD2RGBAD_cast(obj)

class itkFunctionBasePD2RGBAUC(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD2RGBAUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD2') -> "itkRGBAPixelUC":
        """Evaluate(itkFunctionBasePD2RGBAUC self, itkPointD2 input) -> itkRGBAPixelUC"""
        return _itkFunctionBasePython.itkFunctionBasePD2RGBAUC_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD2RGBAUC

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD2RGBAUC *":
        """cast(itkLightObject obj) -> itkFunctionBasePD2RGBAUC"""
        return _itkFunctionBasePython.itkFunctionBasePD2RGBAUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD2RGBAUC

        Create a new object of the class itkFunctionBasePD2RGBAUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD2RGBAUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD2RGBAUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD2RGBAUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD2RGBAUC.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD2RGBAUC_Evaluate, None, itkFunctionBasePD2RGBAUC)
itkFunctionBasePD2RGBAUC_swigregister = _itkFunctionBasePython.itkFunctionBasePD2RGBAUC_swigregister
itkFunctionBasePD2RGBAUC_swigregister(itkFunctionBasePD2RGBAUC)

def itkFunctionBasePD2RGBAUC_cast(obj: 'itkLightObject') -> "itkFunctionBasePD2RGBAUC *":
    """itkFunctionBasePD2RGBAUC_cast(itkLightObject obj) -> itkFunctionBasePD2RGBAUC"""
    return _itkFunctionBasePython.itkFunctionBasePD2RGBAUC_cast(obj)

class itkFunctionBasePD2RGBD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD2RGBD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD2') -> "itkRGBPixelD":
        """Evaluate(itkFunctionBasePD2RGBD self, itkPointD2 input) -> itkRGBPixelD"""
        return _itkFunctionBasePython.itkFunctionBasePD2RGBD_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD2RGBD

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD2RGBD *":
        """cast(itkLightObject obj) -> itkFunctionBasePD2RGBD"""
        return _itkFunctionBasePython.itkFunctionBasePD2RGBD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD2RGBD

        Create a new object of the class itkFunctionBasePD2RGBD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD2RGBD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD2RGBD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD2RGBD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD2RGBD.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD2RGBD_Evaluate, None, itkFunctionBasePD2RGBD)
itkFunctionBasePD2RGBD_swigregister = _itkFunctionBasePython.itkFunctionBasePD2RGBD_swigregister
itkFunctionBasePD2RGBD_swigregister(itkFunctionBasePD2RGBD)

def itkFunctionBasePD2RGBD_cast(obj: 'itkLightObject') -> "itkFunctionBasePD2RGBD *":
    """itkFunctionBasePD2RGBD_cast(itkLightObject obj) -> itkFunctionBasePD2RGBD"""
    return _itkFunctionBasePython.itkFunctionBasePD2RGBD_cast(obj)

class itkFunctionBasePD2RGBUC(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD2RGBUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD2') -> "itkRGBPixelUC":
        """Evaluate(itkFunctionBasePD2RGBUC self, itkPointD2 input) -> itkRGBPixelUC"""
        return _itkFunctionBasePython.itkFunctionBasePD2RGBUC_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD2RGBUC

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD2RGBUC *":
        """cast(itkLightObject obj) -> itkFunctionBasePD2RGBUC"""
        return _itkFunctionBasePython.itkFunctionBasePD2RGBUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD2RGBUC

        Create a new object of the class itkFunctionBasePD2RGBUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD2RGBUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD2RGBUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD2RGBUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD2RGBUC.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD2RGBUC_Evaluate, None, itkFunctionBasePD2RGBUC)
itkFunctionBasePD2RGBUC_swigregister = _itkFunctionBasePython.itkFunctionBasePD2RGBUC_swigregister
itkFunctionBasePD2RGBUC_swigregister(itkFunctionBasePD2RGBUC)

def itkFunctionBasePD2RGBUC_cast(obj: 'itkLightObject') -> "itkFunctionBasePD2RGBUC *":
    """itkFunctionBasePD2RGBUC_cast(itkLightObject obj) -> itkFunctionBasePD2RGBUC"""
    return _itkFunctionBasePython.itkFunctionBasePD2RGBUC_cast(obj)

class itkFunctionBasePD2VD2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD2VD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD2') -> "itkVectorD2":
        """Evaluate(itkFunctionBasePD2VD2 self, itkPointD2 input) -> itkVectorD2"""
        return _itkFunctionBasePython.itkFunctionBasePD2VD2_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD2VD2

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD2VD2 *":
        """cast(itkLightObject obj) -> itkFunctionBasePD2VD2"""
        return _itkFunctionBasePython.itkFunctionBasePD2VD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD2VD2

        Create a new object of the class itkFunctionBasePD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD2VD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD2VD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD2VD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD2VD2.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD2VD2_Evaluate, None, itkFunctionBasePD2VD2)
itkFunctionBasePD2VD2_swigregister = _itkFunctionBasePython.itkFunctionBasePD2VD2_swigregister
itkFunctionBasePD2VD2_swigregister(itkFunctionBasePD2VD2)

def itkFunctionBasePD2VD2_cast(obj: 'itkLightObject') -> "itkFunctionBasePD2VD2 *":
    """itkFunctionBasePD2VD2_cast(itkLightObject obj) -> itkFunctionBasePD2VD2"""
    return _itkFunctionBasePython.itkFunctionBasePD2VD2_cast(obj)

class itkFunctionBasePD3CVD3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD3CVD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD3') -> "itkCovariantVectorD3":
        """Evaluate(itkFunctionBasePD3CVD3 self, itkPointD3 input) -> itkCovariantVectorD3"""
        return _itkFunctionBasePython.itkFunctionBasePD3CVD3_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD3CVD3

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD3CVD3 *":
        """cast(itkLightObject obj) -> itkFunctionBasePD3CVD3"""
        return _itkFunctionBasePython.itkFunctionBasePD3CVD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD3CVD3

        Create a new object of the class itkFunctionBasePD3CVD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD3CVD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD3CVD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD3CVD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD3CVD3.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD3CVD3_Evaluate, None, itkFunctionBasePD3CVD3)
itkFunctionBasePD3CVD3_swigregister = _itkFunctionBasePython.itkFunctionBasePD3CVD3_swigregister
itkFunctionBasePD3CVD3_swigregister(itkFunctionBasePD3CVD3)

def itkFunctionBasePD3CVD3_cast(obj: 'itkLightObject') -> "itkFunctionBasePD3CVD3 *":
    """itkFunctionBasePD3CVD3_cast(itkLightObject obj) -> itkFunctionBasePD3CVD3"""
    return _itkFunctionBasePython.itkFunctionBasePD3CVD3_cast(obj)

class itkFunctionBasePD3D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD3') -> "double":
        """Evaluate(itkFunctionBasePD3D self, itkPointD3 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBasePD3D_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD3D

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD3D *":
        """cast(itkLightObject obj) -> itkFunctionBasePD3D"""
        return _itkFunctionBasePython.itkFunctionBasePD3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD3D

        Create a new object of the class itkFunctionBasePD3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD3D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD3D_Evaluate, None, itkFunctionBasePD3D)
itkFunctionBasePD3D_swigregister = _itkFunctionBasePython.itkFunctionBasePD3D_swigregister
itkFunctionBasePD3D_swigregister(itkFunctionBasePD3D)

def itkFunctionBasePD3D_cast(obj: 'itkLightObject') -> "itkFunctionBasePD3D *":
    """itkFunctionBasePD3D_cast(itkLightObject obj) -> itkFunctionBasePD3D"""
    return _itkFunctionBasePython.itkFunctionBasePD3D_cast(obj)

class itkFunctionBasePD3F(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD3F class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD3') -> "float":
        """Evaluate(itkFunctionBasePD3F self, itkPointD3 input) -> float"""
        return _itkFunctionBasePython.itkFunctionBasePD3F_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD3F

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD3F *":
        """cast(itkLightObject obj) -> itkFunctionBasePD3F"""
        return _itkFunctionBasePython.itkFunctionBasePD3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD3F

        Create a new object of the class itkFunctionBasePD3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD3F.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD3F_Evaluate, None, itkFunctionBasePD3F)
itkFunctionBasePD3F_swigregister = _itkFunctionBasePython.itkFunctionBasePD3F_swigregister
itkFunctionBasePD3F_swigregister(itkFunctionBasePD3F)

def itkFunctionBasePD3F_cast(obj: 'itkLightObject') -> "itkFunctionBasePD3F *":
    """itkFunctionBasePD3F_cast(itkLightObject obj) -> itkFunctionBasePD3F"""
    return _itkFunctionBasePython.itkFunctionBasePD3F_cast(obj)

class itkFunctionBasePD3RGBAD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD3RGBAD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD3') -> "itkRGBAPixelD":
        """Evaluate(itkFunctionBasePD3RGBAD self, itkPointD3 input) -> itkRGBAPixelD"""
        return _itkFunctionBasePython.itkFunctionBasePD3RGBAD_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD3RGBAD

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD3RGBAD *":
        """cast(itkLightObject obj) -> itkFunctionBasePD3RGBAD"""
        return _itkFunctionBasePython.itkFunctionBasePD3RGBAD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD3RGBAD

        Create a new object of the class itkFunctionBasePD3RGBAD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD3RGBAD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD3RGBAD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD3RGBAD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD3RGBAD.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD3RGBAD_Evaluate, None, itkFunctionBasePD3RGBAD)
itkFunctionBasePD3RGBAD_swigregister = _itkFunctionBasePython.itkFunctionBasePD3RGBAD_swigregister
itkFunctionBasePD3RGBAD_swigregister(itkFunctionBasePD3RGBAD)

def itkFunctionBasePD3RGBAD_cast(obj: 'itkLightObject') -> "itkFunctionBasePD3RGBAD *":
    """itkFunctionBasePD3RGBAD_cast(itkLightObject obj) -> itkFunctionBasePD3RGBAD"""
    return _itkFunctionBasePython.itkFunctionBasePD3RGBAD_cast(obj)

class itkFunctionBasePD3RGBAUC(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD3RGBAUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD3') -> "itkRGBAPixelUC":
        """Evaluate(itkFunctionBasePD3RGBAUC self, itkPointD3 input) -> itkRGBAPixelUC"""
        return _itkFunctionBasePython.itkFunctionBasePD3RGBAUC_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD3RGBAUC

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD3RGBAUC *":
        """cast(itkLightObject obj) -> itkFunctionBasePD3RGBAUC"""
        return _itkFunctionBasePython.itkFunctionBasePD3RGBAUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD3RGBAUC

        Create a new object of the class itkFunctionBasePD3RGBAUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD3RGBAUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD3RGBAUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD3RGBAUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD3RGBAUC.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD3RGBAUC_Evaluate, None, itkFunctionBasePD3RGBAUC)
itkFunctionBasePD3RGBAUC_swigregister = _itkFunctionBasePython.itkFunctionBasePD3RGBAUC_swigregister
itkFunctionBasePD3RGBAUC_swigregister(itkFunctionBasePD3RGBAUC)

def itkFunctionBasePD3RGBAUC_cast(obj: 'itkLightObject') -> "itkFunctionBasePD3RGBAUC *":
    """itkFunctionBasePD3RGBAUC_cast(itkLightObject obj) -> itkFunctionBasePD3RGBAUC"""
    return _itkFunctionBasePython.itkFunctionBasePD3RGBAUC_cast(obj)

class itkFunctionBasePD3RGBD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD3RGBD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD3') -> "itkRGBPixelD":
        """Evaluate(itkFunctionBasePD3RGBD self, itkPointD3 input) -> itkRGBPixelD"""
        return _itkFunctionBasePython.itkFunctionBasePD3RGBD_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD3RGBD

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD3RGBD *":
        """cast(itkLightObject obj) -> itkFunctionBasePD3RGBD"""
        return _itkFunctionBasePython.itkFunctionBasePD3RGBD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD3RGBD

        Create a new object of the class itkFunctionBasePD3RGBD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD3RGBD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD3RGBD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD3RGBD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD3RGBD.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD3RGBD_Evaluate, None, itkFunctionBasePD3RGBD)
itkFunctionBasePD3RGBD_swigregister = _itkFunctionBasePython.itkFunctionBasePD3RGBD_swigregister
itkFunctionBasePD3RGBD_swigregister(itkFunctionBasePD3RGBD)

def itkFunctionBasePD3RGBD_cast(obj: 'itkLightObject') -> "itkFunctionBasePD3RGBD *":
    """itkFunctionBasePD3RGBD_cast(itkLightObject obj) -> itkFunctionBasePD3RGBD"""
    return _itkFunctionBasePython.itkFunctionBasePD3RGBD_cast(obj)

class itkFunctionBasePD3RGBUC(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD3RGBUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD3') -> "itkRGBPixelUC":
        """Evaluate(itkFunctionBasePD3RGBUC self, itkPointD3 input) -> itkRGBPixelUC"""
        return _itkFunctionBasePython.itkFunctionBasePD3RGBUC_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD3RGBUC

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD3RGBUC *":
        """cast(itkLightObject obj) -> itkFunctionBasePD3RGBUC"""
        return _itkFunctionBasePython.itkFunctionBasePD3RGBUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD3RGBUC

        Create a new object of the class itkFunctionBasePD3RGBUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD3RGBUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD3RGBUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD3RGBUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD3RGBUC.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD3RGBUC_Evaluate, None, itkFunctionBasePD3RGBUC)
itkFunctionBasePD3RGBUC_swigregister = _itkFunctionBasePython.itkFunctionBasePD3RGBUC_swigregister
itkFunctionBasePD3RGBUC_swigregister(itkFunctionBasePD3RGBUC)

def itkFunctionBasePD3RGBUC_cast(obj: 'itkLightObject') -> "itkFunctionBasePD3RGBUC *":
    """itkFunctionBasePD3RGBUC_cast(itkLightObject obj) -> itkFunctionBasePD3RGBUC"""
    return _itkFunctionBasePython.itkFunctionBasePD3RGBUC_cast(obj)

class itkFunctionBasePD3VD3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD3VD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointD3') -> "itkVectorD3":
        """Evaluate(itkFunctionBasePD3VD3 self, itkPointD3 input) -> itkVectorD3"""
        return _itkFunctionBasePython.itkFunctionBasePD3VD3_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD3VD3

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePD3VD3 *":
        """cast(itkLightObject obj) -> itkFunctionBasePD3VD3"""
        return _itkFunctionBasePython.itkFunctionBasePD3VD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD3VD3

        Create a new object of the class itkFunctionBasePD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePD3VD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePD3VD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD3VD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD3VD3.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD3VD3_Evaluate, None, itkFunctionBasePD3VD3)
itkFunctionBasePD3VD3_swigregister = _itkFunctionBasePython.itkFunctionBasePD3VD3_swigregister
itkFunctionBasePD3VD3_swigregister(itkFunctionBasePD3VD3)

def itkFunctionBasePD3VD3_cast(obj: 'itkLightObject') -> "itkFunctionBasePD3VD3 *":
    """itkFunctionBasePD3VD3_cast(itkLightObject obj) -> itkFunctionBasePD3VD3"""
    return _itkFunctionBasePython.itkFunctionBasePD3VD3_cast(obj)

class itkFunctionBasePF2D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePF2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointF2') -> "double":
        """Evaluate(itkFunctionBasePF2D self, itkPointF2 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBasePF2D_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePF2D

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePF2D *":
        """cast(itkLightObject obj) -> itkFunctionBasePF2D"""
        return _itkFunctionBasePython.itkFunctionBasePF2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePF2D

        Create a new object of the class itkFunctionBasePF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePF2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePF2D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePF2D_Evaluate, None, itkFunctionBasePF2D)
itkFunctionBasePF2D_swigregister = _itkFunctionBasePython.itkFunctionBasePF2D_swigregister
itkFunctionBasePF2D_swigregister(itkFunctionBasePF2D)

def itkFunctionBasePF2D_cast(obj: 'itkLightObject') -> "itkFunctionBasePF2D *":
    """itkFunctionBasePF2D_cast(itkLightObject obj) -> itkFunctionBasePF2D"""
    return _itkFunctionBasePython.itkFunctionBasePF2D_cast(obj)

class itkFunctionBasePF2F(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePF2F class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointF2') -> "float":
        """Evaluate(itkFunctionBasePF2F self, itkPointF2 input) -> float"""
        return _itkFunctionBasePython.itkFunctionBasePF2F_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePF2F

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePF2F *":
        """cast(itkLightObject obj) -> itkFunctionBasePF2F"""
        return _itkFunctionBasePython.itkFunctionBasePF2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePF2F

        Create a new object of the class itkFunctionBasePF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePF2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePF2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePF2F.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePF2F_Evaluate, None, itkFunctionBasePF2F)
itkFunctionBasePF2F_swigregister = _itkFunctionBasePython.itkFunctionBasePF2F_swigregister
itkFunctionBasePF2F_swigregister(itkFunctionBasePF2F)

def itkFunctionBasePF2F_cast(obj: 'itkLightObject') -> "itkFunctionBasePF2F *":
    """itkFunctionBasePF2F_cast(itkLightObject obj) -> itkFunctionBasePF2F"""
    return _itkFunctionBasePython.itkFunctionBasePF2F_cast(obj)

class itkFunctionBasePF3D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePF3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointF3') -> "double":
        """Evaluate(itkFunctionBasePF3D self, itkPointF3 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBasePF3D_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePF3D

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePF3D *":
        """cast(itkLightObject obj) -> itkFunctionBasePF3D"""
        return _itkFunctionBasePython.itkFunctionBasePF3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePF3D

        Create a new object of the class itkFunctionBasePF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePF3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePF3D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePF3D_Evaluate, None, itkFunctionBasePF3D)
itkFunctionBasePF3D_swigregister = _itkFunctionBasePython.itkFunctionBasePF3D_swigregister
itkFunctionBasePF3D_swigregister(itkFunctionBasePF3D)

def itkFunctionBasePF3D_cast(obj: 'itkLightObject') -> "itkFunctionBasePF3D *":
    """itkFunctionBasePF3D_cast(itkLightObject obj) -> itkFunctionBasePF3D"""
    return _itkFunctionBasePython.itkFunctionBasePF3D_cast(obj)

class itkFunctionBasePF3F(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePF3F class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkPointF3') -> "float":
        """Evaluate(itkFunctionBasePF3F self, itkPointF3 input) -> float"""
        return _itkFunctionBasePython.itkFunctionBasePF3F_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePF3F

    def cast(obj: 'itkLightObject') -> "itkFunctionBasePF3F *":
        """cast(itkLightObject obj) -> itkFunctionBasePF3F"""
        return _itkFunctionBasePython.itkFunctionBasePF3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePF3F

        Create a new object of the class itkFunctionBasePF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBasePF3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBasePF3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePF3F.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePF3F_Evaluate, None, itkFunctionBasePF3F)
itkFunctionBasePF3F_swigregister = _itkFunctionBasePython.itkFunctionBasePF3F_swigregister
itkFunctionBasePF3F_swigregister(itkFunctionBasePF3F)

def itkFunctionBasePF3F_cast(obj: 'itkLightObject') -> "itkFunctionBasePF3F *":
    """itkFunctionBasePF3F_cast(itkLightObject obj) -> itkFunctionBasePF3F"""
    return _itkFunctionBasePython.itkFunctionBasePF3F_cast(obj)

class itkFunctionBaseVF2D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseVF2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkVectorF2') -> "double":
        """Evaluate(itkFunctionBaseVF2D self, itkVectorF2 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBaseVF2D_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseVF2D

    def cast(obj: 'itkLightObject') -> "itkFunctionBaseVF2D *":
        """cast(itkLightObject obj) -> itkFunctionBaseVF2D"""
        return _itkFunctionBasePython.itkFunctionBaseVF2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseVF2D

        Create a new object of the class itkFunctionBaseVF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBaseVF2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBaseVF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseVF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseVF2D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseVF2D_Evaluate, None, itkFunctionBaseVF2D)
itkFunctionBaseVF2D_swigregister = _itkFunctionBasePython.itkFunctionBaseVF2D_swigregister
itkFunctionBaseVF2D_swigregister(itkFunctionBaseVF2D)

def itkFunctionBaseVF2D_cast(obj: 'itkLightObject') -> "itkFunctionBaseVF2D *":
    """itkFunctionBaseVF2D_cast(itkLightObject obj) -> itkFunctionBaseVF2D"""
    return _itkFunctionBasePython.itkFunctionBaseVF2D_cast(obj)

class itkFunctionBaseVF3D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseVF3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input: 'itkVectorF3') -> "double":
        """Evaluate(itkFunctionBaseVF3D self, itkVectorF3 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBaseVF3D_Evaluate(self, input)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseVF3D

    def cast(obj: 'itkLightObject') -> "itkFunctionBaseVF3D *":
        """cast(itkLightObject obj) -> itkFunctionBaseVF3D"""
        return _itkFunctionBasePython.itkFunctionBaseVF3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseVF3D

        Create a new object of the class itkFunctionBaseVF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFunctionBaseVF3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFunctionBaseVF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseVF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseVF3D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseVF3D_Evaluate, None, itkFunctionBaseVF3D)
itkFunctionBaseVF3D_swigregister = _itkFunctionBasePython.itkFunctionBaseVF3D_swigregister
itkFunctionBaseVF3D_swigregister(itkFunctionBaseVF3D)

def itkFunctionBaseVF3D_cast(obj: 'itkLightObject') -> "itkFunctionBaseVF3D *":
    """itkFunctionBaseVF3D_cast(itkLightObject obj) -> itkFunctionBaseVF3D"""
    return _itkFunctionBasePython.itkFunctionBaseVF3D_cast(obj)



