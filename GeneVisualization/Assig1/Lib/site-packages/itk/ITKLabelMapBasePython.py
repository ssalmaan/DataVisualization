# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ITKLabelMapBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ITKLabelMapBasePython', [dirname(__file__)])
        except ImportError:
            import _ITKLabelMapBasePython
            return _ITKLabelMapBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_ITKLabelMapBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ITKLabelMapBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _ITKLabelMapBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageSourceCommonPython
import ITKCommonBasePython
import pyBasePython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImagePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkStatisticsLabelObjectPython
import itkShapeLabelObjectPython
import itkLabelObjectPython
import itkLabelObjectLinePython
import itkAffineTransformPython
import itkTransformBasePython
import itkVariableLengthVectorPython
import itkArray2DPython
import itkOptimizerParametersPython
import itkArrayPython
import itkDiffusionTensor3DPython
import itkMatrixOffsetTransformBasePython
import itkHistogramPython
import itkSamplePython
import itkImageSourcePython
import itkVectorImagePython
import itkImageToImageFilterCommonPython

def itkImageToImageFilterLM3IRGBUC3_New():
  return itkImageToImageFilterLM3IRGBUC3.New()


def itkImageToImageFilterLM3IF3_New():
  return itkImageToImageFilterLM3IF3.New()


def itkImageToImageFilterIF3LM3_New():
  return itkImageToImageFilterIF3LM3.New()


def itkImageToImageFilterLM3IUS3_New():
  return itkImageToImageFilterLM3IUS3.New()


def itkImageToImageFilterIUS3LM3_New():
  return itkImageToImageFilterIUS3LM3.New()


def itkImageToImageFilterLM3IUC3_New():
  return itkImageToImageFilterLM3IUC3.New()


def itkImageToImageFilterIUC3LM3_New():
  return itkImageToImageFilterIUC3LM3.New()


def itkImageToImageFilterLM3ISS3_New():
  return itkImageToImageFilterLM3ISS3.New()


def itkImageToImageFilterISS3LM3_New():
  return itkImageToImageFilterISS3LM3.New()


def itkImageToImageFilterLM3LM3_New():
  return itkImageToImageFilterLM3LM3.New()


def itkImageToImageFilterLM2IRGBUC2_New():
  return itkImageToImageFilterLM2IRGBUC2.New()


def itkImageToImageFilterLM2IF2_New():
  return itkImageToImageFilterLM2IF2.New()


def itkImageToImageFilterIF2LM2_New():
  return itkImageToImageFilterIF2LM2.New()


def itkImageToImageFilterLM2IUS2_New():
  return itkImageToImageFilterLM2IUS2.New()


def itkImageToImageFilterIUS2LM2_New():
  return itkImageToImageFilterIUS2LM2.New()


def itkImageToImageFilterLM2IUC2_New():
  return itkImageToImageFilterLM2IUC2.New()


def itkImageToImageFilterIUC2LM2_New():
  return itkImageToImageFilterIUC2LM2.New()


def itkImageToImageFilterLM2ISS2_New():
  return itkImageToImageFilterLM2ISS2.New()


def itkImageToImageFilterISS2LM2_New():
  return itkImageToImageFilterISS2LM2.New()


def itkImageToImageFilterLM2LM2_New():
  return itkImageToImageFilterLM2LM2.New()


def itkImageSourceLM3_New():
  return itkImageSourceLM3.New()


def itkImageSourceLM2_New():
  return itkImageSourceLM2.New()


def itkLabelMap3_New():
  return itkLabelMap3.New()


def itkLabelMap2_New():
  return itkLabelMap2.New()


def itkLabelMap2_New():
  return itkLabelMap2.New()

class itkImageSourceLM2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkImageSourceLM2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args) -> "itkLabelMap2 *":
        """
        GetOutput(itkImageSourceLM2 self) -> itkLabelMap2
        GetOutput(itkImageSourceLM2 self) -> itkLabelMap2
        GetOutput(itkImageSourceLM2 self, unsigned int idx) -> itkLabelMap2
        """
        return _ITKLabelMapBasePython.itkImageSourceLM2_GetOutput(self, *args)


    def GraftOutput(self, *args) -> "void":
        """
        GraftOutput(itkImageSourceLM2 self, itkDataObject output)
        GraftOutput(itkImageSourceLM2 self, std::string const & key, itkDataObject output)
        """
        return _ITKLabelMapBasePython.itkImageSourceLM2_GraftOutput(self, *args)


    def GraftNthOutput(self, idx: 'unsigned int', output: 'itkDataObject') -> "void":
        """GraftNthOutput(itkImageSourceLM2 self, unsigned int idx, itkDataObject output)"""
        return _ITKLabelMapBasePython.itkImageSourceLM2_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args) -> "itkDataObject_Pointer":
        """
        MakeOutput(itkImageSourceLM2 self, unsigned long long idx) -> itkDataObject_Pointer
        MakeOutput(itkImageSourceLM2 self, std::string const & arg0) -> itkDataObject_Pointer
        """
        return _ITKLabelMapBasePython.itkImageSourceLM2_MakeOutput(self, *args)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageSourceLM2

    def cast(obj: 'itkLightObject') -> "itkImageSourceLM2 *":
        """cast(itkLightObject obj) -> itkImageSourceLM2"""
        return _ITKLabelMapBasePython.itkImageSourceLM2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceLM2

        Create a new object of the class itkImageSourceLM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceLM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceLM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceLM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSourceLM2.GetOutput = new_instancemethod(_ITKLabelMapBasePython.itkImageSourceLM2_GetOutput, None, itkImageSourceLM2)
itkImageSourceLM2.GraftOutput = new_instancemethod(_ITKLabelMapBasePython.itkImageSourceLM2_GraftOutput, None, itkImageSourceLM2)
itkImageSourceLM2.GraftNthOutput = new_instancemethod(_ITKLabelMapBasePython.itkImageSourceLM2_GraftNthOutput, None, itkImageSourceLM2)
itkImageSourceLM2.MakeOutput = new_instancemethod(_ITKLabelMapBasePython.itkImageSourceLM2_MakeOutput, None, itkImageSourceLM2)
itkImageSourceLM2_swigregister = _ITKLabelMapBasePython.itkImageSourceLM2_swigregister
itkImageSourceLM2_swigregister(itkImageSourceLM2)

def itkImageSourceLM2_cast(obj: 'itkLightObject') -> "itkImageSourceLM2 *":
    """itkImageSourceLM2_cast(itkLightObject obj) -> itkImageSourceLM2"""
    return _ITKLabelMapBasePython.itkImageSourceLM2_cast(obj)

class itkImageSourceLM3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkImageSourceLM3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args) -> "itkLabelMap3 *":
        """
        GetOutput(itkImageSourceLM3 self) -> itkLabelMap3
        GetOutput(itkImageSourceLM3 self) -> itkLabelMap3
        GetOutput(itkImageSourceLM3 self, unsigned int idx) -> itkLabelMap3
        """
        return _ITKLabelMapBasePython.itkImageSourceLM3_GetOutput(self, *args)


    def GraftOutput(self, *args) -> "void":
        """
        GraftOutput(itkImageSourceLM3 self, itkDataObject output)
        GraftOutput(itkImageSourceLM3 self, std::string const & key, itkDataObject output)
        """
        return _ITKLabelMapBasePython.itkImageSourceLM3_GraftOutput(self, *args)


    def GraftNthOutput(self, idx: 'unsigned int', output: 'itkDataObject') -> "void":
        """GraftNthOutput(itkImageSourceLM3 self, unsigned int idx, itkDataObject output)"""
        return _ITKLabelMapBasePython.itkImageSourceLM3_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args) -> "itkDataObject_Pointer":
        """
        MakeOutput(itkImageSourceLM3 self, unsigned long long idx) -> itkDataObject_Pointer
        MakeOutput(itkImageSourceLM3 self, std::string const & arg0) -> itkDataObject_Pointer
        """
        return _ITKLabelMapBasePython.itkImageSourceLM3_MakeOutput(self, *args)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageSourceLM3

    def cast(obj: 'itkLightObject') -> "itkImageSourceLM3 *":
        """cast(itkLightObject obj) -> itkImageSourceLM3"""
        return _ITKLabelMapBasePython.itkImageSourceLM3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceLM3

        Create a new object of the class itkImageSourceLM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceLM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceLM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceLM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSourceLM3.GetOutput = new_instancemethod(_ITKLabelMapBasePython.itkImageSourceLM3_GetOutput, None, itkImageSourceLM3)
itkImageSourceLM3.GraftOutput = new_instancemethod(_ITKLabelMapBasePython.itkImageSourceLM3_GraftOutput, None, itkImageSourceLM3)
itkImageSourceLM3.GraftNthOutput = new_instancemethod(_ITKLabelMapBasePython.itkImageSourceLM3_GraftNthOutput, None, itkImageSourceLM3)
itkImageSourceLM3.MakeOutput = new_instancemethod(_ITKLabelMapBasePython.itkImageSourceLM3_MakeOutput, None, itkImageSourceLM3)
itkImageSourceLM3_swigregister = _ITKLabelMapBasePython.itkImageSourceLM3_swigregister
itkImageSourceLM3_swigregister(itkImageSourceLM3)

def itkImageSourceLM3_cast(obj: 'itkLightObject') -> "itkImageSourceLM3 *":
    """itkImageSourceLM3_cast(itkLightObject obj) -> itkImageSourceLM3"""
    return _ITKLabelMapBasePython.itkImageSourceLM3_cast(obj)

class itkImageToImageFilterIF2LM2(itkImageSourceLM2):
    """Proxy of C++ itkImageToImageFilterIF2LM2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterIF2LM2 self, itkImageF2 image)
        SetInput(itkImageToImageFilterIF2LM2 self, unsigned int arg0, itkImageF2 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageF2 const *":
        """
        GetInput(itkImageToImageFilterIF2LM2 self) -> itkImageF2
        GetInput(itkImageToImageFilterIF2LM2 self, unsigned int idx) -> itkImageF2
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_GetInput(self, *args)


    def PushBackInput(self, image: 'itkImageF2') -> "void":
        """PushBackInput(itkImageToImageFilterIF2LM2 self, itkImageF2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterIF2LM2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PopBackInput(self)


    def PushFrontInput(self, image: 'itkImageF2') -> "void":
        """PushFrontInput(itkImageToImageFilterIF2LM2 self, itkImageF2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterIF2LM2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterIF2LM2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterIF2LM2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterIF2LM2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterIF2LM2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIF2LM2

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterIF2LM2 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterIF2LM2"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2LM2

        Create a new object of the class itkImageToImageFilterIF2LM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2LM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2LM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2LM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIF2LM2.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_SetInput, None, itkImageToImageFilterIF2LM2)
itkImageToImageFilterIF2LM2.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_GetInput, None, itkImageToImageFilterIF2LM2)
itkImageToImageFilterIF2LM2.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PushBackInput, None, itkImageToImageFilterIF2LM2)
itkImageToImageFilterIF2LM2.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PopBackInput, None, itkImageToImageFilterIF2LM2)
itkImageToImageFilterIF2LM2.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PushFrontInput, None, itkImageToImageFilterIF2LM2)
itkImageToImageFilterIF2LM2.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PopFrontInput, None, itkImageToImageFilterIF2LM2)
itkImageToImageFilterIF2LM2.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_SetCoordinateTolerance, None, itkImageToImageFilterIF2LM2)
itkImageToImageFilterIF2LM2.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_GetCoordinateTolerance, None, itkImageToImageFilterIF2LM2)
itkImageToImageFilterIF2LM2.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_SetDirectionTolerance, None, itkImageToImageFilterIF2LM2)
itkImageToImageFilterIF2LM2.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_GetDirectionTolerance, None, itkImageToImageFilterIF2LM2)
itkImageToImageFilterIF2LM2_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_swigregister
itkImageToImageFilterIF2LM2_swigregister(itkImageToImageFilterIF2LM2)

def itkImageToImageFilterIF2LM2_cast(obj: 'itkLightObject') -> "itkImageToImageFilterIF2LM2 *":
    """itkImageToImageFilterIF2LM2_cast(itkLightObject obj) -> itkImageToImageFilterIF2LM2"""
    return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_cast(obj)

class itkImageToImageFilterIF3LM3(itkImageSourceLM3):
    """Proxy of C++ itkImageToImageFilterIF3LM3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterIF3LM3 self, itkImageF3 image)
        SetInput(itkImageToImageFilterIF3LM3 self, unsigned int arg0, itkImageF3 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageF3 const *":
        """
        GetInput(itkImageToImageFilterIF3LM3 self) -> itkImageF3
        GetInput(itkImageToImageFilterIF3LM3 self, unsigned int idx) -> itkImageF3
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_GetInput(self, *args)


    def PushBackInput(self, image: 'itkImageF3') -> "void":
        """PushBackInput(itkImageToImageFilterIF3LM3 self, itkImageF3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterIF3LM3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PopBackInput(self)


    def PushFrontInput(self, image: 'itkImageF3') -> "void":
        """PushFrontInput(itkImageToImageFilterIF3LM3 self, itkImageF3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterIF3LM3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterIF3LM3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterIF3LM3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterIF3LM3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterIF3LM3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIF3LM3

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterIF3LM3 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterIF3LM3"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3LM3

        Create a new object of the class itkImageToImageFilterIF3LM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3LM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3LM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3LM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIF3LM3.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_SetInput, None, itkImageToImageFilterIF3LM3)
itkImageToImageFilterIF3LM3.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_GetInput, None, itkImageToImageFilterIF3LM3)
itkImageToImageFilterIF3LM3.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PushBackInput, None, itkImageToImageFilterIF3LM3)
itkImageToImageFilterIF3LM3.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PopBackInput, None, itkImageToImageFilterIF3LM3)
itkImageToImageFilterIF3LM3.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PushFrontInput, None, itkImageToImageFilterIF3LM3)
itkImageToImageFilterIF3LM3.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PopFrontInput, None, itkImageToImageFilterIF3LM3)
itkImageToImageFilterIF3LM3.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_SetCoordinateTolerance, None, itkImageToImageFilterIF3LM3)
itkImageToImageFilterIF3LM3.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_GetCoordinateTolerance, None, itkImageToImageFilterIF3LM3)
itkImageToImageFilterIF3LM3.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_SetDirectionTolerance, None, itkImageToImageFilterIF3LM3)
itkImageToImageFilterIF3LM3.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_GetDirectionTolerance, None, itkImageToImageFilterIF3LM3)
itkImageToImageFilterIF3LM3_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_swigregister
itkImageToImageFilterIF3LM3_swigregister(itkImageToImageFilterIF3LM3)

def itkImageToImageFilterIF3LM3_cast(obj: 'itkLightObject') -> "itkImageToImageFilterIF3LM3 *":
    """itkImageToImageFilterIF3LM3_cast(itkLightObject obj) -> itkImageToImageFilterIF3LM3"""
    return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_cast(obj)

class itkImageToImageFilterISS2LM2(itkImageSourceLM2):
    """Proxy of C++ itkImageToImageFilterISS2LM2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterISS2LM2 self, itkImageSS2 image)
        SetInput(itkImageToImageFilterISS2LM2 self, unsigned int arg0, itkImageSS2 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageSS2 const *":
        """
        GetInput(itkImageToImageFilterISS2LM2 self) -> itkImageSS2
        GetInput(itkImageToImageFilterISS2LM2 self, unsigned int idx) -> itkImageSS2
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_GetInput(self, *args)


    def PushBackInput(self, image: 'itkImageSS2') -> "void":
        """PushBackInput(itkImageToImageFilterISS2LM2 self, itkImageSS2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterISS2LM2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PopBackInput(self)


    def PushFrontInput(self, image: 'itkImageSS2') -> "void":
        """PushFrontInput(itkImageToImageFilterISS2LM2 self, itkImageSS2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterISS2LM2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterISS2LM2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterISS2LM2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterISS2LM2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterISS2LM2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterISS2LM2

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterISS2LM2 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterISS2LM2"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2LM2

        Create a new object of the class itkImageToImageFilterISS2LM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2LM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2LM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2LM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterISS2LM2.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_SetInput, None, itkImageToImageFilterISS2LM2)
itkImageToImageFilterISS2LM2.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_GetInput, None, itkImageToImageFilterISS2LM2)
itkImageToImageFilterISS2LM2.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PushBackInput, None, itkImageToImageFilterISS2LM2)
itkImageToImageFilterISS2LM2.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PopBackInput, None, itkImageToImageFilterISS2LM2)
itkImageToImageFilterISS2LM2.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PushFrontInput, None, itkImageToImageFilterISS2LM2)
itkImageToImageFilterISS2LM2.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PopFrontInput, None, itkImageToImageFilterISS2LM2)
itkImageToImageFilterISS2LM2.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_SetCoordinateTolerance, None, itkImageToImageFilterISS2LM2)
itkImageToImageFilterISS2LM2.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_GetCoordinateTolerance, None, itkImageToImageFilterISS2LM2)
itkImageToImageFilterISS2LM2.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_SetDirectionTolerance, None, itkImageToImageFilterISS2LM2)
itkImageToImageFilterISS2LM2.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_GetDirectionTolerance, None, itkImageToImageFilterISS2LM2)
itkImageToImageFilterISS2LM2_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_swigregister
itkImageToImageFilterISS2LM2_swigregister(itkImageToImageFilterISS2LM2)

def itkImageToImageFilterISS2LM2_cast(obj: 'itkLightObject') -> "itkImageToImageFilterISS2LM2 *":
    """itkImageToImageFilterISS2LM2_cast(itkLightObject obj) -> itkImageToImageFilterISS2LM2"""
    return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_cast(obj)

class itkImageToImageFilterISS3LM3(itkImageSourceLM3):
    """Proxy of C++ itkImageToImageFilterISS3LM3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterISS3LM3 self, itkImageSS3 image)
        SetInput(itkImageToImageFilterISS3LM3 self, unsigned int arg0, itkImageSS3 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageSS3 const *":
        """
        GetInput(itkImageToImageFilterISS3LM3 self) -> itkImageSS3
        GetInput(itkImageToImageFilterISS3LM3 self, unsigned int idx) -> itkImageSS3
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_GetInput(self, *args)


    def PushBackInput(self, image: 'itkImageSS3') -> "void":
        """PushBackInput(itkImageToImageFilterISS3LM3 self, itkImageSS3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterISS3LM3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PopBackInput(self)


    def PushFrontInput(self, image: 'itkImageSS3') -> "void":
        """PushFrontInput(itkImageToImageFilterISS3LM3 self, itkImageSS3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterISS3LM3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterISS3LM3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterISS3LM3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterISS3LM3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterISS3LM3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterISS3LM3

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterISS3LM3 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterISS3LM3"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3LM3

        Create a new object of the class itkImageToImageFilterISS3LM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3LM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3LM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3LM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterISS3LM3.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_SetInput, None, itkImageToImageFilterISS3LM3)
itkImageToImageFilterISS3LM3.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_GetInput, None, itkImageToImageFilterISS3LM3)
itkImageToImageFilterISS3LM3.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PushBackInput, None, itkImageToImageFilterISS3LM3)
itkImageToImageFilterISS3LM3.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PopBackInput, None, itkImageToImageFilterISS3LM3)
itkImageToImageFilterISS3LM3.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PushFrontInput, None, itkImageToImageFilterISS3LM3)
itkImageToImageFilterISS3LM3.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PopFrontInput, None, itkImageToImageFilterISS3LM3)
itkImageToImageFilterISS3LM3.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_SetCoordinateTolerance, None, itkImageToImageFilterISS3LM3)
itkImageToImageFilterISS3LM3.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_GetCoordinateTolerance, None, itkImageToImageFilterISS3LM3)
itkImageToImageFilterISS3LM3.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_SetDirectionTolerance, None, itkImageToImageFilterISS3LM3)
itkImageToImageFilterISS3LM3.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_GetDirectionTolerance, None, itkImageToImageFilterISS3LM3)
itkImageToImageFilterISS3LM3_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_swigregister
itkImageToImageFilterISS3LM3_swigregister(itkImageToImageFilterISS3LM3)

def itkImageToImageFilterISS3LM3_cast(obj: 'itkLightObject') -> "itkImageToImageFilterISS3LM3 *":
    """itkImageToImageFilterISS3LM3_cast(itkLightObject obj) -> itkImageToImageFilterISS3LM3"""
    return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_cast(obj)

class itkImageToImageFilterIUC2LM2(itkImageSourceLM2):
    """Proxy of C++ itkImageToImageFilterIUC2LM2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterIUC2LM2 self, itkImageUC2 image)
        SetInput(itkImageToImageFilterIUC2LM2 self, unsigned int arg0, itkImageUC2 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageUC2 const *":
        """
        GetInput(itkImageToImageFilterIUC2LM2 self) -> itkImageUC2
        GetInput(itkImageToImageFilterIUC2LM2 self, unsigned int idx) -> itkImageUC2
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_GetInput(self, *args)


    def PushBackInput(self, image: 'itkImageUC2') -> "void":
        """PushBackInput(itkImageToImageFilterIUC2LM2 self, itkImageUC2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterIUC2LM2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PopBackInput(self)


    def PushFrontInput(self, image: 'itkImageUC2') -> "void":
        """PushFrontInput(itkImageToImageFilterIUC2LM2 self, itkImageUC2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterIUC2LM2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterIUC2LM2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterIUC2LM2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterIUC2LM2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterIUC2LM2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIUC2LM2

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterIUC2LM2 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterIUC2LM2"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2LM2

        Create a new object of the class itkImageToImageFilterIUC2LM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2LM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2LM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2LM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIUC2LM2.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_SetInput, None, itkImageToImageFilterIUC2LM2)
itkImageToImageFilterIUC2LM2.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_GetInput, None, itkImageToImageFilterIUC2LM2)
itkImageToImageFilterIUC2LM2.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PushBackInput, None, itkImageToImageFilterIUC2LM2)
itkImageToImageFilterIUC2LM2.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PopBackInput, None, itkImageToImageFilterIUC2LM2)
itkImageToImageFilterIUC2LM2.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PushFrontInput, None, itkImageToImageFilterIUC2LM2)
itkImageToImageFilterIUC2LM2.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PopFrontInput, None, itkImageToImageFilterIUC2LM2)
itkImageToImageFilterIUC2LM2.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_SetCoordinateTolerance, None, itkImageToImageFilterIUC2LM2)
itkImageToImageFilterIUC2LM2.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_GetCoordinateTolerance, None, itkImageToImageFilterIUC2LM2)
itkImageToImageFilterIUC2LM2.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_SetDirectionTolerance, None, itkImageToImageFilterIUC2LM2)
itkImageToImageFilterIUC2LM2.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_GetDirectionTolerance, None, itkImageToImageFilterIUC2LM2)
itkImageToImageFilterIUC2LM2_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_swigregister
itkImageToImageFilterIUC2LM2_swigregister(itkImageToImageFilterIUC2LM2)

def itkImageToImageFilterIUC2LM2_cast(obj: 'itkLightObject') -> "itkImageToImageFilterIUC2LM2 *":
    """itkImageToImageFilterIUC2LM2_cast(itkLightObject obj) -> itkImageToImageFilterIUC2LM2"""
    return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_cast(obj)

class itkImageToImageFilterIUC3LM3(itkImageSourceLM3):
    """Proxy of C++ itkImageToImageFilterIUC3LM3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterIUC3LM3 self, itkImageUC3 image)
        SetInput(itkImageToImageFilterIUC3LM3 self, unsigned int arg0, itkImageUC3 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageUC3 const *":
        """
        GetInput(itkImageToImageFilterIUC3LM3 self) -> itkImageUC3
        GetInput(itkImageToImageFilterIUC3LM3 self, unsigned int idx) -> itkImageUC3
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_GetInput(self, *args)


    def PushBackInput(self, image: 'itkImageUC3') -> "void":
        """PushBackInput(itkImageToImageFilterIUC3LM3 self, itkImageUC3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterIUC3LM3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PopBackInput(self)


    def PushFrontInput(self, image: 'itkImageUC3') -> "void":
        """PushFrontInput(itkImageToImageFilterIUC3LM3 self, itkImageUC3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterIUC3LM3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterIUC3LM3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterIUC3LM3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterIUC3LM3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterIUC3LM3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIUC3LM3

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterIUC3LM3 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterIUC3LM3"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3LM3

        Create a new object of the class itkImageToImageFilterIUC3LM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3LM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3LM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3LM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIUC3LM3.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_SetInput, None, itkImageToImageFilterIUC3LM3)
itkImageToImageFilterIUC3LM3.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_GetInput, None, itkImageToImageFilterIUC3LM3)
itkImageToImageFilterIUC3LM3.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PushBackInput, None, itkImageToImageFilterIUC3LM3)
itkImageToImageFilterIUC3LM3.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PopBackInput, None, itkImageToImageFilterIUC3LM3)
itkImageToImageFilterIUC3LM3.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PushFrontInput, None, itkImageToImageFilterIUC3LM3)
itkImageToImageFilterIUC3LM3.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PopFrontInput, None, itkImageToImageFilterIUC3LM3)
itkImageToImageFilterIUC3LM3.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_SetCoordinateTolerance, None, itkImageToImageFilterIUC3LM3)
itkImageToImageFilterIUC3LM3.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_GetCoordinateTolerance, None, itkImageToImageFilterIUC3LM3)
itkImageToImageFilterIUC3LM3.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_SetDirectionTolerance, None, itkImageToImageFilterIUC3LM3)
itkImageToImageFilterIUC3LM3.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_GetDirectionTolerance, None, itkImageToImageFilterIUC3LM3)
itkImageToImageFilterIUC3LM3_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_swigregister
itkImageToImageFilterIUC3LM3_swigregister(itkImageToImageFilterIUC3LM3)

def itkImageToImageFilterIUC3LM3_cast(obj: 'itkLightObject') -> "itkImageToImageFilterIUC3LM3 *":
    """itkImageToImageFilterIUC3LM3_cast(itkLightObject obj) -> itkImageToImageFilterIUC3LM3"""
    return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_cast(obj)

class itkImageToImageFilterIUS2LM2(itkImageSourceLM2):
    """Proxy of C++ itkImageToImageFilterIUS2LM2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterIUS2LM2 self, itkImageUS2 image)
        SetInput(itkImageToImageFilterIUS2LM2 self, unsigned int arg0, itkImageUS2 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageUS2 const *":
        """
        GetInput(itkImageToImageFilterIUS2LM2 self) -> itkImageUS2
        GetInput(itkImageToImageFilterIUS2LM2 self, unsigned int idx) -> itkImageUS2
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_GetInput(self, *args)


    def PushBackInput(self, image: 'itkImageUS2') -> "void":
        """PushBackInput(itkImageToImageFilterIUS2LM2 self, itkImageUS2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterIUS2LM2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PopBackInput(self)


    def PushFrontInput(self, image: 'itkImageUS2') -> "void":
        """PushFrontInput(itkImageToImageFilterIUS2LM2 self, itkImageUS2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterIUS2LM2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterIUS2LM2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterIUS2LM2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterIUS2LM2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterIUS2LM2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIUS2LM2

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterIUS2LM2 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterIUS2LM2"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2LM2

        Create a new object of the class itkImageToImageFilterIUS2LM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2LM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2LM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2LM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIUS2LM2.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_SetInput, None, itkImageToImageFilterIUS2LM2)
itkImageToImageFilterIUS2LM2.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_GetInput, None, itkImageToImageFilterIUS2LM2)
itkImageToImageFilterIUS2LM2.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PushBackInput, None, itkImageToImageFilterIUS2LM2)
itkImageToImageFilterIUS2LM2.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PopBackInput, None, itkImageToImageFilterIUS2LM2)
itkImageToImageFilterIUS2LM2.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PushFrontInput, None, itkImageToImageFilterIUS2LM2)
itkImageToImageFilterIUS2LM2.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PopFrontInput, None, itkImageToImageFilterIUS2LM2)
itkImageToImageFilterIUS2LM2.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_SetCoordinateTolerance, None, itkImageToImageFilterIUS2LM2)
itkImageToImageFilterIUS2LM2.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_GetCoordinateTolerance, None, itkImageToImageFilterIUS2LM2)
itkImageToImageFilterIUS2LM2.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_SetDirectionTolerance, None, itkImageToImageFilterIUS2LM2)
itkImageToImageFilterIUS2LM2.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_GetDirectionTolerance, None, itkImageToImageFilterIUS2LM2)
itkImageToImageFilterIUS2LM2_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_swigregister
itkImageToImageFilterIUS2LM2_swigregister(itkImageToImageFilterIUS2LM2)

def itkImageToImageFilterIUS2LM2_cast(obj: 'itkLightObject') -> "itkImageToImageFilterIUS2LM2 *":
    """itkImageToImageFilterIUS2LM2_cast(itkLightObject obj) -> itkImageToImageFilterIUS2LM2"""
    return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_cast(obj)

class itkImageToImageFilterIUS3LM3(itkImageSourceLM3):
    """Proxy of C++ itkImageToImageFilterIUS3LM3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterIUS3LM3 self, itkImageUS3 image)
        SetInput(itkImageToImageFilterIUS3LM3 self, unsigned int arg0, itkImageUS3 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkImageUS3 const *":
        """
        GetInput(itkImageToImageFilterIUS3LM3 self) -> itkImageUS3
        GetInput(itkImageToImageFilterIUS3LM3 self, unsigned int idx) -> itkImageUS3
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_GetInput(self, *args)


    def PushBackInput(self, image: 'itkImageUS3') -> "void":
        """PushBackInput(itkImageToImageFilterIUS3LM3 self, itkImageUS3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterIUS3LM3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PopBackInput(self)


    def PushFrontInput(self, image: 'itkImageUS3') -> "void":
        """PushFrontInput(itkImageToImageFilterIUS3LM3 self, itkImageUS3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterIUS3LM3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterIUS3LM3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterIUS3LM3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterIUS3LM3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterIUS3LM3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIUS3LM3

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterIUS3LM3 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterIUS3LM3"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3LM3

        Create a new object of the class itkImageToImageFilterIUS3LM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3LM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3LM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3LM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIUS3LM3.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_SetInput, None, itkImageToImageFilterIUS3LM3)
itkImageToImageFilterIUS3LM3.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_GetInput, None, itkImageToImageFilterIUS3LM3)
itkImageToImageFilterIUS3LM3.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PushBackInput, None, itkImageToImageFilterIUS3LM3)
itkImageToImageFilterIUS3LM3.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PopBackInput, None, itkImageToImageFilterIUS3LM3)
itkImageToImageFilterIUS3LM3.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PushFrontInput, None, itkImageToImageFilterIUS3LM3)
itkImageToImageFilterIUS3LM3.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PopFrontInput, None, itkImageToImageFilterIUS3LM3)
itkImageToImageFilterIUS3LM3.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_SetCoordinateTolerance, None, itkImageToImageFilterIUS3LM3)
itkImageToImageFilterIUS3LM3.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_GetCoordinateTolerance, None, itkImageToImageFilterIUS3LM3)
itkImageToImageFilterIUS3LM3.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_SetDirectionTolerance, None, itkImageToImageFilterIUS3LM3)
itkImageToImageFilterIUS3LM3.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_GetDirectionTolerance, None, itkImageToImageFilterIUS3LM3)
itkImageToImageFilterIUS3LM3_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_swigregister
itkImageToImageFilterIUS3LM3_swigregister(itkImageToImageFilterIUS3LM3)

def itkImageToImageFilterIUS3LM3_cast(obj: 'itkLightObject') -> "itkImageToImageFilterIUS3LM3 *":
    """itkImageToImageFilterIUS3LM3_cast(itkLightObject obj) -> itkImageToImageFilterIUS3LM3"""
    return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_cast(obj)

class itkImageToImageFilterLM2IF2(itkImageSourcePython.itkImageSourceIF2):
    """Proxy of C++ itkImageToImageFilterLM2IF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterLM2IF2 self, itkLabelMap2 image)
        SetInput(itkImageToImageFilterLM2IF2 self, unsigned int arg0, itkLabelMap2 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkLabelMap2 const *":
        """
        GetInput(itkImageToImageFilterLM2IF2 self) -> itkLabelMap2
        GetInput(itkImageToImageFilterLM2IF2 self, unsigned int idx) -> itkLabelMap2
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_GetInput(self, *args)


    def PushBackInput(self, image: 'itkLabelMap2') -> "void":
        """PushBackInput(itkImageToImageFilterLM2IF2 self, itkLabelMap2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterLM2IF2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PopBackInput(self)


    def PushFrontInput(self, image: 'itkLabelMap2') -> "void":
        """PushFrontInput(itkImageToImageFilterLM2IF2 self, itkLabelMap2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterLM2IF2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterLM2IF2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterLM2IF2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterLM2IF2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterLM2IF2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2IF2

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM2IF2 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterLM2IF2"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM2IF2

        Create a new object of the class itkImageToImageFilterLM2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterLM2IF2.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_SetInput, None, itkImageToImageFilterLM2IF2)
itkImageToImageFilterLM2IF2.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_GetInput, None, itkImageToImageFilterLM2IF2)
itkImageToImageFilterLM2IF2.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PushBackInput, None, itkImageToImageFilterLM2IF2)
itkImageToImageFilterLM2IF2.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PopBackInput, None, itkImageToImageFilterLM2IF2)
itkImageToImageFilterLM2IF2.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PushFrontInput, None, itkImageToImageFilterLM2IF2)
itkImageToImageFilterLM2IF2.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PopFrontInput, None, itkImageToImageFilterLM2IF2)
itkImageToImageFilterLM2IF2.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_SetCoordinateTolerance, None, itkImageToImageFilterLM2IF2)
itkImageToImageFilterLM2IF2.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_GetCoordinateTolerance, None, itkImageToImageFilterLM2IF2)
itkImageToImageFilterLM2IF2.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_SetDirectionTolerance, None, itkImageToImageFilterLM2IF2)
itkImageToImageFilterLM2IF2.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_GetDirectionTolerance, None, itkImageToImageFilterLM2IF2)
itkImageToImageFilterLM2IF2_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_swigregister
itkImageToImageFilterLM2IF2_swigregister(itkImageToImageFilterLM2IF2)

def itkImageToImageFilterLM2IF2_cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM2IF2 *":
    """itkImageToImageFilterLM2IF2_cast(itkLightObject obj) -> itkImageToImageFilterLM2IF2"""
    return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_cast(obj)

class itkImageToImageFilterLM2IRGBUC2(itkImageSourcePython.itkImageSourceIRGBUC2):
    """Proxy of C++ itkImageToImageFilterLM2IRGBUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterLM2IRGBUC2 self, itkLabelMap2 image)
        SetInput(itkImageToImageFilterLM2IRGBUC2 self, unsigned int arg0, itkLabelMap2 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkLabelMap2 const *":
        """
        GetInput(itkImageToImageFilterLM2IRGBUC2 self) -> itkLabelMap2
        GetInput(itkImageToImageFilterLM2IRGBUC2 self, unsigned int idx) -> itkLabelMap2
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_GetInput(self, *args)


    def PushBackInput(self, image: 'itkLabelMap2') -> "void":
        """PushBackInput(itkImageToImageFilterLM2IRGBUC2 self, itkLabelMap2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterLM2IRGBUC2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PopBackInput(self)


    def PushFrontInput(self, image: 'itkLabelMap2') -> "void":
        """PushFrontInput(itkImageToImageFilterLM2IRGBUC2 self, itkLabelMap2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterLM2IRGBUC2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterLM2IRGBUC2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterLM2IRGBUC2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterLM2IRGBUC2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterLM2IRGBUC2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2IRGBUC2

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM2IRGBUC2 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterLM2IRGBUC2"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM2IRGBUC2

        Create a new object of the class itkImageToImageFilterLM2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterLM2IRGBUC2.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_SetInput, None, itkImageToImageFilterLM2IRGBUC2)
itkImageToImageFilterLM2IRGBUC2.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_GetInput, None, itkImageToImageFilterLM2IRGBUC2)
itkImageToImageFilterLM2IRGBUC2.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PushBackInput, None, itkImageToImageFilterLM2IRGBUC2)
itkImageToImageFilterLM2IRGBUC2.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PopBackInput, None, itkImageToImageFilterLM2IRGBUC2)
itkImageToImageFilterLM2IRGBUC2.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PushFrontInput, None, itkImageToImageFilterLM2IRGBUC2)
itkImageToImageFilterLM2IRGBUC2.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PopFrontInput, None, itkImageToImageFilterLM2IRGBUC2)
itkImageToImageFilterLM2IRGBUC2.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_SetCoordinateTolerance, None, itkImageToImageFilterLM2IRGBUC2)
itkImageToImageFilterLM2IRGBUC2.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_GetCoordinateTolerance, None, itkImageToImageFilterLM2IRGBUC2)
itkImageToImageFilterLM2IRGBUC2.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_SetDirectionTolerance, None, itkImageToImageFilterLM2IRGBUC2)
itkImageToImageFilterLM2IRGBUC2.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_GetDirectionTolerance, None, itkImageToImageFilterLM2IRGBUC2)
itkImageToImageFilterLM2IRGBUC2_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_swigregister
itkImageToImageFilterLM2IRGBUC2_swigregister(itkImageToImageFilterLM2IRGBUC2)

def itkImageToImageFilterLM2IRGBUC2_cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM2IRGBUC2 *":
    """itkImageToImageFilterLM2IRGBUC2_cast(itkLightObject obj) -> itkImageToImageFilterLM2IRGBUC2"""
    return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_cast(obj)

class itkImageToImageFilterLM2ISS2(itkImageSourcePython.itkImageSourceISS2):
    """Proxy of C++ itkImageToImageFilterLM2ISS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterLM2ISS2 self, itkLabelMap2 image)
        SetInput(itkImageToImageFilterLM2ISS2 self, unsigned int arg0, itkLabelMap2 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkLabelMap2 const *":
        """
        GetInput(itkImageToImageFilterLM2ISS2 self) -> itkLabelMap2
        GetInput(itkImageToImageFilterLM2ISS2 self, unsigned int idx) -> itkLabelMap2
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_GetInput(self, *args)


    def PushBackInput(self, image: 'itkLabelMap2') -> "void":
        """PushBackInput(itkImageToImageFilterLM2ISS2 self, itkLabelMap2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterLM2ISS2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PopBackInput(self)


    def PushFrontInput(self, image: 'itkLabelMap2') -> "void":
        """PushFrontInput(itkImageToImageFilterLM2ISS2 self, itkLabelMap2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterLM2ISS2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterLM2ISS2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterLM2ISS2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterLM2ISS2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterLM2ISS2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2ISS2

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM2ISS2 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterLM2ISS2"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM2ISS2

        Create a new object of the class itkImageToImageFilterLM2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterLM2ISS2.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_SetInput, None, itkImageToImageFilterLM2ISS2)
itkImageToImageFilterLM2ISS2.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_GetInput, None, itkImageToImageFilterLM2ISS2)
itkImageToImageFilterLM2ISS2.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PushBackInput, None, itkImageToImageFilterLM2ISS2)
itkImageToImageFilterLM2ISS2.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PopBackInput, None, itkImageToImageFilterLM2ISS2)
itkImageToImageFilterLM2ISS2.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PushFrontInput, None, itkImageToImageFilterLM2ISS2)
itkImageToImageFilterLM2ISS2.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PopFrontInput, None, itkImageToImageFilterLM2ISS2)
itkImageToImageFilterLM2ISS2.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_SetCoordinateTolerance, None, itkImageToImageFilterLM2ISS2)
itkImageToImageFilterLM2ISS2.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_GetCoordinateTolerance, None, itkImageToImageFilterLM2ISS2)
itkImageToImageFilterLM2ISS2.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_SetDirectionTolerance, None, itkImageToImageFilterLM2ISS2)
itkImageToImageFilterLM2ISS2.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_GetDirectionTolerance, None, itkImageToImageFilterLM2ISS2)
itkImageToImageFilterLM2ISS2_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_swigregister
itkImageToImageFilterLM2ISS2_swigregister(itkImageToImageFilterLM2ISS2)

def itkImageToImageFilterLM2ISS2_cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM2ISS2 *":
    """itkImageToImageFilterLM2ISS2_cast(itkLightObject obj) -> itkImageToImageFilterLM2ISS2"""
    return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_cast(obj)

class itkImageToImageFilterLM2IUC2(itkImageSourcePython.itkImageSourceIUC2):
    """Proxy of C++ itkImageToImageFilterLM2IUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterLM2IUC2 self, itkLabelMap2 image)
        SetInput(itkImageToImageFilterLM2IUC2 self, unsigned int arg0, itkLabelMap2 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkLabelMap2 const *":
        """
        GetInput(itkImageToImageFilterLM2IUC2 self) -> itkLabelMap2
        GetInput(itkImageToImageFilterLM2IUC2 self, unsigned int idx) -> itkLabelMap2
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_GetInput(self, *args)


    def PushBackInput(self, image: 'itkLabelMap2') -> "void":
        """PushBackInput(itkImageToImageFilterLM2IUC2 self, itkLabelMap2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterLM2IUC2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PopBackInput(self)


    def PushFrontInput(self, image: 'itkLabelMap2') -> "void":
        """PushFrontInput(itkImageToImageFilterLM2IUC2 self, itkLabelMap2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterLM2IUC2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterLM2IUC2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterLM2IUC2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterLM2IUC2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterLM2IUC2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2IUC2

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM2IUC2 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterLM2IUC2"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM2IUC2

        Create a new object of the class itkImageToImageFilterLM2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterLM2IUC2.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_SetInput, None, itkImageToImageFilterLM2IUC2)
itkImageToImageFilterLM2IUC2.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_GetInput, None, itkImageToImageFilterLM2IUC2)
itkImageToImageFilterLM2IUC2.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PushBackInput, None, itkImageToImageFilterLM2IUC2)
itkImageToImageFilterLM2IUC2.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PopBackInput, None, itkImageToImageFilterLM2IUC2)
itkImageToImageFilterLM2IUC2.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PushFrontInput, None, itkImageToImageFilterLM2IUC2)
itkImageToImageFilterLM2IUC2.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PopFrontInput, None, itkImageToImageFilterLM2IUC2)
itkImageToImageFilterLM2IUC2.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_SetCoordinateTolerance, None, itkImageToImageFilterLM2IUC2)
itkImageToImageFilterLM2IUC2.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_GetCoordinateTolerance, None, itkImageToImageFilterLM2IUC2)
itkImageToImageFilterLM2IUC2.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_SetDirectionTolerance, None, itkImageToImageFilterLM2IUC2)
itkImageToImageFilterLM2IUC2.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_GetDirectionTolerance, None, itkImageToImageFilterLM2IUC2)
itkImageToImageFilterLM2IUC2_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_swigregister
itkImageToImageFilterLM2IUC2_swigregister(itkImageToImageFilterLM2IUC2)

def itkImageToImageFilterLM2IUC2_cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM2IUC2 *":
    """itkImageToImageFilterLM2IUC2_cast(itkLightObject obj) -> itkImageToImageFilterLM2IUC2"""
    return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_cast(obj)

class itkImageToImageFilterLM2IUS2(itkImageSourcePython.itkImageSourceIUS2):
    """Proxy of C++ itkImageToImageFilterLM2IUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterLM2IUS2 self, itkLabelMap2 image)
        SetInput(itkImageToImageFilterLM2IUS2 self, unsigned int arg0, itkLabelMap2 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkLabelMap2 const *":
        """
        GetInput(itkImageToImageFilterLM2IUS2 self) -> itkLabelMap2
        GetInput(itkImageToImageFilterLM2IUS2 self, unsigned int idx) -> itkLabelMap2
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_GetInput(self, *args)


    def PushBackInput(self, image: 'itkLabelMap2') -> "void":
        """PushBackInput(itkImageToImageFilterLM2IUS2 self, itkLabelMap2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterLM2IUS2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PopBackInput(self)


    def PushFrontInput(self, image: 'itkLabelMap2') -> "void":
        """PushFrontInput(itkImageToImageFilterLM2IUS2 self, itkLabelMap2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterLM2IUS2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterLM2IUS2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterLM2IUS2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterLM2IUS2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterLM2IUS2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2IUS2

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM2IUS2 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterLM2IUS2"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM2IUS2

        Create a new object of the class itkImageToImageFilterLM2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterLM2IUS2.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_SetInput, None, itkImageToImageFilterLM2IUS2)
itkImageToImageFilterLM2IUS2.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_GetInput, None, itkImageToImageFilterLM2IUS2)
itkImageToImageFilterLM2IUS2.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PushBackInput, None, itkImageToImageFilterLM2IUS2)
itkImageToImageFilterLM2IUS2.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PopBackInput, None, itkImageToImageFilterLM2IUS2)
itkImageToImageFilterLM2IUS2.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PushFrontInput, None, itkImageToImageFilterLM2IUS2)
itkImageToImageFilterLM2IUS2.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PopFrontInput, None, itkImageToImageFilterLM2IUS2)
itkImageToImageFilterLM2IUS2.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_SetCoordinateTolerance, None, itkImageToImageFilterLM2IUS2)
itkImageToImageFilterLM2IUS2.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_GetCoordinateTolerance, None, itkImageToImageFilterLM2IUS2)
itkImageToImageFilterLM2IUS2.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_SetDirectionTolerance, None, itkImageToImageFilterLM2IUS2)
itkImageToImageFilterLM2IUS2.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_GetDirectionTolerance, None, itkImageToImageFilterLM2IUS2)
itkImageToImageFilterLM2IUS2_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_swigregister
itkImageToImageFilterLM2IUS2_swigregister(itkImageToImageFilterLM2IUS2)

def itkImageToImageFilterLM2IUS2_cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM2IUS2 *":
    """itkImageToImageFilterLM2IUS2_cast(itkLightObject obj) -> itkImageToImageFilterLM2IUS2"""
    return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_cast(obj)

class itkImageToImageFilterLM2LM2(itkImageSourceLM2):
    """Proxy of C++ itkImageToImageFilterLM2LM2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterLM2LM2 self, itkLabelMap2 image)
        SetInput(itkImageToImageFilterLM2LM2 self, unsigned int arg0, itkLabelMap2 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_SetInput(self, *args)


    def GetInput(self, *args) -> "itkLabelMap2 const *":
        """
        GetInput(itkImageToImageFilterLM2LM2 self) -> itkLabelMap2
        GetInput(itkImageToImageFilterLM2LM2 self, unsigned int idx) -> itkLabelMap2
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_GetInput(self, *args)


    def PushBackInput(self, image: 'itkLabelMap2') -> "void":
        """PushBackInput(itkImageToImageFilterLM2LM2 self, itkLabelMap2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterLM2LM2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PopBackInput(self)


    def PushFrontInput(self, image: 'itkLabelMap2') -> "void":
        """PushFrontInput(itkImageToImageFilterLM2LM2 self, itkLabelMap2 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterLM2LM2 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterLM2LM2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterLM2LM2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterLM2LM2 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterLM2LM2 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2LM2

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM2LM2 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterLM2LM2"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM2LM2

        Create a new object of the class itkImageToImageFilterLM2LM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM2LM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM2LM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM2LM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterLM2LM2.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_SetInput, None, itkImageToImageFilterLM2LM2)
itkImageToImageFilterLM2LM2.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_GetInput, None, itkImageToImageFilterLM2LM2)
itkImageToImageFilterLM2LM2.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PushBackInput, None, itkImageToImageFilterLM2LM2)
itkImageToImageFilterLM2LM2.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PopBackInput, None, itkImageToImageFilterLM2LM2)
itkImageToImageFilterLM2LM2.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PushFrontInput, None, itkImageToImageFilterLM2LM2)
itkImageToImageFilterLM2LM2.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PopFrontInput, None, itkImageToImageFilterLM2LM2)
itkImageToImageFilterLM2LM2.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_SetCoordinateTolerance, None, itkImageToImageFilterLM2LM2)
itkImageToImageFilterLM2LM2.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_GetCoordinateTolerance, None, itkImageToImageFilterLM2LM2)
itkImageToImageFilterLM2LM2.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_SetDirectionTolerance, None, itkImageToImageFilterLM2LM2)
itkImageToImageFilterLM2LM2.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_GetDirectionTolerance, None, itkImageToImageFilterLM2LM2)
itkImageToImageFilterLM2LM2_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_swigregister
itkImageToImageFilterLM2LM2_swigregister(itkImageToImageFilterLM2LM2)

def itkImageToImageFilterLM2LM2_cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM2LM2 *":
    """itkImageToImageFilterLM2LM2_cast(itkLightObject obj) -> itkImageToImageFilterLM2LM2"""
    return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_cast(obj)

class itkImageToImageFilterLM3IF3(itkImageSourcePython.itkImageSourceIF3):
    """Proxy of C++ itkImageToImageFilterLM3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterLM3IF3 self, itkLabelMap3 image)
        SetInput(itkImageToImageFilterLM3IF3 self, unsigned int arg0, itkLabelMap3 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkLabelMap3 const *":
        """
        GetInput(itkImageToImageFilterLM3IF3 self) -> itkLabelMap3
        GetInput(itkImageToImageFilterLM3IF3 self, unsigned int idx) -> itkLabelMap3
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_GetInput(self, *args)


    def PushBackInput(self, image: 'itkLabelMap3') -> "void":
        """PushBackInput(itkImageToImageFilterLM3IF3 self, itkLabelMap3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterLM3IF3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PopBackInput(self)


    def PushFrontInput(self, image: 'itkLabelMap3') -> "void":
        """PushFrontInput(itkImageToImageFilterLM3IF3 self, itkLabelMap3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterLM3IF3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterLM3IF3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterLM3IF3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterLM3IF3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterLM3IF3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3IF3

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM3IF3 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterLM3IF3"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM3IF3

        Create a new object of the class itkImageToImageFilterLM3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterLM3IF3.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_SetInput, None, itkImageToImageFilterLM3IF3)
itkImageToImageFilterLM3IF3.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_GetInput, None, itkImageToImageFilterLM3IF3)
itkImageToImageFilterLM3IF3.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PushBackInput, None, itkImageToImageFilterLM3IF3)
itkImageToImageFilterLM3IF3.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PopBackInput, None, itkImageToImageFilterLM3IF3)
itkImageToImageFilterLM3IF3.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PushFrontInput, None, itkImageToImageFilterLM3IF3)
itkImageToImageFilterLM3IF3.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PopFrontInput, None, itkImageToImageFilterLM3IF3)
itkImageToImageFilterLM3IF3.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_SetCoordinateTolerance, None, itkImageToImageFilterLM3IF3)
itkImageToImageFilterLM3IF3.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_GetCoordinateTolerance, None, itkImageToImageFilterLM3IF3)
itkImageToImageFilterLM3IF3.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_SetDirectionTolerance, None, itkImageToImageFilterLM3IF3)
itkImageToImageFilterLM3IF3.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_GetDirectionTolerance, None, itkImageToImageFilterLM3IF3)
itkImageToImageFilterLM3IF3_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_swigregister
itkImageToImageFilterLM3IF3_swigregister(itkImageToImageFilterLM3IF3)

def itkImageToImageFilterLM3IF3_cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM3IF3 *":
    """itkImageToImageFilterLM3IF3_cast(itkLightObject obj) -> itkImageToImageFilterLM3IF3"""
    return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_cast(obj)

class itkImageToImageFilterLM3IRGBUC3(itkImageSourcePython.itkImageSourceIRGBUC3):
    """Proxy of C++ itkImageToImageFilterLM3IRGBUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterLM3IRGBUC3 self, itkLabelMap3 image)
        SetInput(itkImageToImageFilterLM3IRGBUC3 self, unsigned int arg0, itkLabelMap3 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkLabelMap3 const *":
        """
        GetInput(itkImageToImageFilterLM3IRGBUC3 self) -> itkLabelMap3
        GetInput(itkImageToImageFilterLM3IRGBUC3 self, unsigned int idx) -> itkLabelMap3
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_GetInput(self, *args)


    def PushBackInput(self, image: 'itkLabelMap3') -> "void":
        """PushBackInput(itkImageToImageFilterLM3IRGBUC3 self, itkLabelMap3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterLM3IRGBUC3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PopBackInput(self)


    def PushFrontInput(self, image: 'itkLabelMap3') -> "void":
        """PushFrontInput(itkImageToImageFilterLM3IRGBUC3 self, itkLabelMap3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterLM3IRGBUC3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterLM3IRGBUC3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterLM3IRGBUC3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterLM3IRGBUC3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterLM3IRGBUC3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3IRGBUC3

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM3IRGBUC3 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterLM3IRGBUC3"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM3IRGBUC3

        Create a new object of the class itkImageToImageFilterLM3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterLM3IRGBUC3.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_SetInput, None, itkImageToImageFilterLM3IRGBUC3)
itkImageToImageFilterLM3IRGBUC3.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_GetInput, None, itkImageToImageFilterLM3IRGBUC3)
itkImageToImageFilterLM3IRGBUC3.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PushBackInput, None, itkImageToImageFilterLM3IRGBUC3)
itkImageToImageFilterLM3IRGBUC3.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PopBackInput, None, itkImageToImageFilterLM3IRGBUC3)
itkImageToImageFilterLM3IRGBUC3.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PushFrontInput, None, itkImageToImageFilterLM3IRGBUC3)
itkImageToImageFilterLM3IRGBUC3.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PopFrontInput, None, itkImageToImageFilterLM3IRGBUC3)
itkImageToImageFilterLM3IRGBUC3.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_SetCoordinateTolerance, None, itkImageToImageFilterLM3IRGBUC3)
itkImageToImageFilterLM3IRGBUC3.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_GetCoordinateTolerance, None, itkImageToImageFilterLM3IRGBUC3)
itkImageToImageFilterLM3IRGBUC3.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_SetDirectionTolerance, None, itkImageToImageFilterLM3IRGBUC3)
itkImageToImageFilterLM3IRGBUC3.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_GetDirectionTolerance, None, itkImageToImageFilterLM3IRGBUC3)
itkImageToImageFilterLM3IRGBUC3_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_swigregister
itkImageToImageFilterLM3IRGBUC3_swigregister(itkImageToImageFilterLM3IRGBUC3)

def itkImageToImageFilterLM3IRGBUC3_cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM3IRGBUC3 *":
    """itkImageToImageFilterLM3IRGBUC3_cast(itkLightObject obj) -> itkImageToImageFilterLM3IRGBUC3"""
    return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_cast(obj)

class itkImageToImageFilterLM3ISS3(itkImageSourcePython.itkImageSourceISS3):
    """Proxy of C++ itkImageToImageFilterLM3ISS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterLM3ISS3 self, itkLabelMap3 image)
        SetInput(itkImageToImageFilterLM3ISS3 self, unsigned int arg0, itkLabelMap3 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkLabelMap3 const *":
        """
        GetInput(itkImageToImageFilterLM3ISS3 self) -> itkLabelMap3
        GetInput(itkImageToImageFilterLM3ISS3 self, unsigned int idx) -> itkLabelMap3
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_GetInput(self, *args)


    def PushBackInput(self, image: 'itkLabelMap3') -> "void":
        """PushBackInput(itkImageToImageFilterLM3ISS3 self, itkLabelMap3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterLM3ISS3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PopBackInput(self)


    def PushFrontInput(self, image: 'itkLabelMap3') -> "void":
        """PushFrontInput(itkImageToImageFilterLM3ISS3 self, itkLabelMap3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterLM3ISS3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterLM3ISS3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterLM3ISS3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterLM3ISS3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterLM3ISS3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3ISS3

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM3ISS3 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterLM3ISS3"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM3ISS3

        Create a new object of the class itkImageToImageFilterLM3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterLM3ISS3.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_SetInput, None, itkImageToImageFilterLM3ISS3)
itkImageToImageFilterLM3ISS3.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_GetInput, None, itkImageToImageFilterLM3ISS3)
itkImageToImageFilterLM3ISS3.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PushBackInput, None, itkImageToImageFilterLM3ISS3)
itkImageToImageFilterLM3ISS3.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PopBackInput, None, itkImageToImageFilterLM3ISS3)
itkImageToImageFilterLM3ISS3.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PushFrontInput, None, itkImageToImageFilterLM3ISS3)
itkImageToImageFilterLM3ISS3.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PopFrontInput, None, itkImageToImageFilterLM3ISS3)
itkImageToImageFilterLM3ISS3.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_SetCoordinateTolerance, None, itkImageToImageFilterLM3ISS3)
itkImageToImageFilterLM3ISS3.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_GetCoordinateTolerance, None, itkImageToImageFilterLM3ISS3)
itkImageToImageFilterLM3ISS3.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_SetDirectionTolerance, None, itkImageToImageFilterLM3ISS3)
itkImageToImageFilterLM3ISS3.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_GetDirectionTolerance, None, itkImageToImageFilterLM3ISS3)
itkImageToImageFilterLM3ISS3_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_swigregister
itkImageToImageFilterLM3ISS3_swigregister(itkImageToImageFilterLM3ISS3)

def itkImageToImageFilterLM3ISS3_cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM3ISS3 *":
    """itkImageToImageFilterLM3ISS3_cast(itkLightObject obj) -> itkImageToImageFilterLM3ISS3"""
    return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_cast(obj)

class itkImageToImageFilterLM3IUC3(itkImageSourcePython.itkImageSourceIUC3):
    """Proxy of C++ itkImageToImageFilterLM3IUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterLM3IUC3 self, itkLabelMap3 image)
        SetInput(itkImageToImageFilterLM3IUC3 self, unsigned int arg0, itkLabelMap3 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkLabelMap3 const *":
        """
        GetInput(itkImageToImageFilterLM3IUC3 self) -> itkLabelMap3
        GetInput(itkImageToImageFilterLM3IUC3 self, unsigned int idx) -> itkLabelMap3
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_GetInput(self, *args)


    def PushBackInput(self, image: 'itkLabelMap3') -> "void":
        """PushBackInput(itkImageToImageFilterLM3IUC3 self, itkLabelMap3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterLM3IUC3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PopBackInput(self)


    def PushFrontInput(self, image: 'itkLabelMap3') -> "void":
        """PushFrontInput(itkImageToImageFilterLM3IUC3 self, itkLabelMap3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterLM3IUC3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterLM3IUC3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterLM3IUC3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterLM3IUC3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterLM3IUC3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3IUC3

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM3IUC3 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterLM3IUC3"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM3IUC3

        Create a new object of the class itkImageToImageFilterLM3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterLM3IUC3.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_SetInput, None, itkImageToImageFilterLM3IUC3)
itkImageToImageFilterLM3IUC3.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_GetInput, None, itkImageToImageFilterLM3IUC3)
itkImageToImageFilterLM3IUC3.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PushBackInput, None, itkImageToImageFilterLM3IUC3)
itkImageToImageFilterLM3IUC3.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PopBackInput, None, itkImageToImageFilterLM3IUC3)
itkImageToImageFilterLM3IUC3.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PushFrontInput, None, itkImageToImageFilterLM3IUC3)
itkImageToImageFilterLM3IUC3.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PopFrontInput, None, itkImageToImageFilterLM3IUC3)
itkImageToImageFilterLM3IUC3.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_SetCoordinateTolerance, None, itkImageToImageFilterLM3IUC3)
itkImageToImageFilterLM3IUC3.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_GetCoordinateTolerance, None, itkImageToImageFilterLM3IUC3)
itkImageToImageFilterLM3IUC3.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_SetDirectionTolerance, None, itkImageToImageFilterLM3IUC3)
itkImageToImageFilterLM3IUC3.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_GetDirectionTolerance, None, itkImageToImageFilterLM3IUC3)
itkImageToImageFilterLM3IUC3_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_swigregister
itkImageToImageFilterLM3IUC3_swigregister(itkImageToImageFilterLM3IUC3)

def itkImageToImageFilterLM3IUC3_cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM3IUC3 *":
    """itkImageToImageFilterLM3IUC3_cast(itkLightObject obj) -> itkImageToImageFilterLM3IUC3"""
    return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_cast(obj)

class itkImageToImageFilterLM3IUS3(itkImageSourcePython.itkImageSourceIUS3):
    """Proxy of C++ itkImageToImageFilterLM3IUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterLM3IUS3 self, itkLabelMap3 image)
        SetInput(itkImageToImageFilterLM3IUS3 self, unsigned int arg0, itkLabelMap3 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkLabelMap3 const *":
        """
        GetInput(itkImageToImageFilterLM3IUS3 self) -> itkLabelMap3
        GetInput(itkImageToImageFilterLM3IUS3 self, unsigned int idx) -> itkLabelMap3
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_GetInput(self, *args)


    def PushBackInput(self, image: 'itkLabelMap3') -> "void":
        """PushBackInput(itkImageToImageFilterLM3IUS3 self, itkLabelMap3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterLM3IUS3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PopBackInput(self)


    def PushFrontInput(self, image: 'itkLabelMap3') -> "void":
        """PushFrontInput(itkImageToImageFilterLM3IUS3 self, itkLabelMap3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterLM3IUS3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterLM3IUS3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterLM3IUS3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterLM3IUS3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterLM3IUS3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3IUS3

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM3IUS3 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterLM3IUS3"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM3IUS3

        Create a new object of the class itkImageToImageFilterLM3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterLM3IUS3.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_SetInput, None, itkImageToImageFilterLM3IUS3)
itkImageToImageFilterLM3IUS3.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_GetInput, None, itkImageToImageFilterLM3IUS3)
itkImageToImageFilterLM3IUS3.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PushBackInput, None, itkImageToImageFilterLM3IUS3)
itkImageToImageFilterLM3IUS3.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PopBackInput, None, itkImageToImageFilterLM3IUS3)
itkImageToImageFilterLM3IUS3.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PushFrontInput, None, itkImageToImageFilterLM3IUS3)
itkImageToImageFilterLM3IUS3.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PopFrontInput, None, itkImageToImageFilterLM3IUS3)
itkImageToImageFilterLM3IUS3.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_SetCoordinateTolerance, None, itkImageToImageFilterLM3IUS3)
itkImageToImageFilterLM3IUS3.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_GetCoordinateTolerance, None, itkImageToImageFilterLM3IUS3)
itkImageToImageFilterLM3IUS3.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_SetDirectionTolerance, None, itkImageToImageFilterLM3IUS3)
itkImageToImageFilterLM3IUS3.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_GetDirectionTolerance, None, itkImageToImageFilterLM3IUS3)
itkImageToImageFilterLM3IUS3_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_swigregister
itkImageToImageFilterLM3IUS3_swigregister(itkImageToImageFilterLM3IUS3)

def itkImageToImageFilterLM3IUS3_cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM3IUS3 *":
    """itkImageToImageFilterLM3IUS3_cast(itkLightObject obj) -> itkImageToImageFilterLM3IUS3"""
    return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_cast(obj)

class itkImageToImageFilterLM3LM3(itkImageSourceLM3):
    """Proxy of C++ itkImageToImageFilterLM3LM3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args) -> "void":
        """
        SetInput(itkImageToImageFilterLM3LM3 self, itkLabelMap3 image)
        SetInput(itkImageToImageFilterLM3LM3 self, unsigned int arg0, itkLabelMap3 image)
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_SetInput(self, *args)


    def GetInput(self, *args) -> "itkLabelMap3 const *":
        """
        GetInput(itkImageToImageFilterLM3LM3 self) -> itkLabelMap3
        GetInput(itkImageToImageFilterLM3LM3 self, unsigned int idx) -> itkLabelMap3
        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_GetInput(self, *args)


    def PushBackInput(self, image: 'itkLabelMap3') -> "void":
        """PushBackInput(itkImageToImageFilterLM3LM3 self, itkLabelMap3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PushBackInput(self, image)


    def PopBackInput(self) -> "void":
        """PopBackInput(itkImageToImageFilterLM3LM3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PopBackInput(self)


    def PushFrontInput(self, image: 'itkLabelMap3') -> "void":
        """PushFrontInput(itkImageToImageFilterLM3LM3 self, itkLabelMap3 image)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PushFrontInput(self, image)


    def PopFrontInput(self) -> "void":
        """PopFrontInput(itkImageToImageFilterLM3LM3 self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """SetCoordinateTolerance(itkImageToImageFilterLM3LM3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkImageToImageFilterLM3LM3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """SetDirectionTolerance(itkImageToImageFilterLM3LM3 self, double const _arg)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkImageToImageFilterLM3LM3 self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_GetDirectionTolerance(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3LM3

    def cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM3LM3 *":
        """cast(itkLightObject obj) -> itkImageToImageFilterLM3LM3"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM3LM3

        Create a new object of the class itkImageToImageFilterLM3LM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM3LM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM3LM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM3LM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterLM3LM3.SetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_SetInput, None, itkImageToImageFilterLM3LM3)
itkImageToImageFilterLM3LM3.GetInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_GetInput, None, itkImageToImageFilterLM3LM3)
itkImageToImageFilterLM3LM3.PushBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PushBackInput, None, itkImageToImageFilterLM3LM3)
itkImageToImageFilterLM3LM3.PopBackInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PopBackInput, None, itkImageToImageFilterLM3LM3)
itkImageToImageFilterLM3LM3.PushFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PushFrontInput, None, itkImageToImageFilterLM3LM3)
itkImageToImageFilterLM3LM3.PopFrontInput = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PopFrontInput, None, itkImageToImageFilterLM3LM3)
itkImageToImageFilterLM3LM3.SetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_SetCoordinateTolerance, None, itkImageToImageFilterLM3LM3)
itkImageToImageFilterLM3LM3.GetCoordinateTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_GetCoordinateTolerance, None, itkImageToImageFilterLM3LM3)
itkImageToImageFilterLM3LM3.SetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_SetDirectionTolerance, None, itkImageToImageFilterLM3LM3)
itkImageToImageFilterLM3LM3.GetDirectionTolerance = new_instancemethod(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_GetDirectionTolerance, None, itkImageToImageFilterLM3LM3)
itkImageToImageFilterLM3LM3_swigregister = _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_swigregister
itkImageToImageFilterLM3LM3_swigregister(itkImageToImageFilterLM3LM3)

def itkImageToImageFilterLM3LM3_cast(obj: 'itkLightObject') -> "itkImageToImageFilterLM3LM3 *":
    """itkImageToImageFilterLM3LM3_cast(itkLightObject obj) -> itkImageToImageFilterLM3LM3"""
    return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_cast(obj)

class itkLabelMap2(itkImagePython.itkImageBase2):
    """Proxy of C++ itkLabelMap2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLabelMap2_Pointer":
        """__New_orig__() -> itkLabelMap2_Pointer"""
        return _ITKLabelMapBasePython.itkLabelMap2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLabelMap2_Pointer":
        """Clone(itkLabelMap2 self) -> itkLabelMap2_Pointer"""
        return _ITKLabelMapBasePython.itkLabelMap2_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkLabelMap2 self, bool initialize=False)
        Allocate(itkLabelMap2 self)
        """
        return _ITKLabelMapBasePython.itkLabelMap2_Allocate(self, initialize)


    def Graft(self, imgData: 'itkLabelMap2') -> "void":
        """Graft(itkLabelMap2 self, itkLabelMap2 imgData)"""
        return _ITKLabelMapBasePython.itkLabelMap2_Graft(self, imgData)


    def HasLabel(self, label: 'unsigned long const') -> "bool":
        """HasLabel(itkLabelMap2 self, unsigned long const label) -> bool"""
        return _ITKLabelMapBasePython.itkLabelMap2_HasLabel(self, label)


    def GetNthLabelObject(self, *args) -> "itkStatisticsLabelObjectUL2 const *":
        """
        GetNthLabelObject(itkLabelMap2 self, unsigned long long const & pos) -> itkStatisticsLabelObjectUL2
        GetNthLabelObject(itkLabelMap2 self, unsigned long long const & pos) -> itkStatisticsLabelObjectUL2
        """
        return _ITKLabelMapBasePython.itkLabelMap2_GetNthLabelObject(self, *args)


    def GetPixel(self, idx: 'itkIndex2') -> "unsigned long const &":
        """GetPixel(itkLabelMap2 self, itkIndex2 idx) -> unsigned long const &"""
        return _ITKLabelMapBasePython.itkLabelMap2_GetPixel(self, idx)


    def SetPixel(self, idx: 'itkIndex2', label: 'unsigned long const &') -> "void":
        """SetPixel(itkLabelMap2 self, itkIndex2 idx, unsigned long const & label)"""
        return _ITKLabelMapBasePython.itkLabelMap2_SetPixel(self, idx, label)


    def AddPixel(self, idx: 'itkIndex2', label: 'unsigned long const &') -> "void":
        """AddPixel(itkLabelMap2 self, itkIndex2 idx, unsigned long const & label)"""
        return _ITKLabelMapBasePython.itkLabelMap2_AddPixel(self, idx, label)


    def RemovePixel(self, idx: 'itkIndex2', label: 'unsigned long const &') -> "void":
        """RemovePixel(itkLabelMap2 self, itkIndex2 idx, unsigned long const & label)"""
        return _ITKLabelMapBasePython.itkLabelMap2_RemovePixel(self, idx, label)


    def SetLine(self, idx: 'itkIndex2', length: 'unsigned long long const &', label: 'unsigned long const &') -> "void":
        """SetLine(itkLabelMap2 self, itkIndex2 idx, unsigned long long const & length, unsigned long const & label)"""
        return _ITKLabelMapBasePython.itkLabelMap2_SetLine(self, idx, length, label)


    def GetLabelObject(self, *args) -> "itkStatisticsLabelObjectUL2 *":
        """
        GetLabelObject(itkLabelMap2 self, unsigned long const & label) -> itkStatisticsLabelObjectUL2
        GetLabelObject(itkLabelMap2 self, unsigned long const & label) -> itkStatisticsLabelObjectUL2
        GetLabelObject(itkLabelMap2 self, itkIndex2 idx) -> itkStatisticsLabelObjectUL2
        """
        return _ITKLabelMapBasePython.itkLabelMap2_GetLabelObject(self, *args)


    def AddLabelObject(self, labelObject: 'itkStatisticsLabelObjectUL2') -> "void":
        """AddLabelObject(itkLabelMap2 self, itkStatisticsLabelObjectUL2 labelObject)"""
        return _ITKLabelMapBasePython.itkLabelMap2_AddLabelObject(self, labelObject)


    def PushLabelObject(self, labelObject: 'itkStatisticsLabelObjectUL2') -> "void":
        """PushLabelObject(itkLabelMap2 self, itkStatisticsLabelObjectUL2 labelObject)"""
        return _ITKLabelMapBasePython.itkLabelMap2_PushLabelObject(self, labelObject)


    def RemoveLabelObject(self, labelObject: 'itkStatisticsLabelObjectUL2') -> "void":
        """RemoveLabelObject(itkLabelMap2 self, itkStatisticsLabelObjectUL2 labelObject)"""
        return _ITKLabelMapBasePython.itkLabelMap2_RemoveLabelObject(self, labelObject)


    def RemoveLabel(self, label: 'unsigned long const &') -> "void":
        """RemoveLabel(itkLabelMap2 self, unsigned long const & label)"""
        return _ITKLabelMapBasePython.itkLabelMap2_RemoveLabel(self, label)


    def ClearLabels(self) -> "void":
        """ClearLabels(itkLabelMap2 self)"""
        return _ITKLabelMapBasePython.itkLabelMap2_ClearLabels(self)


    def GetNumberOfLabelObjects(self) -> "unsigned long long":
        """GetNumberOfLabelObjects(itkLabelMap2 self) -> unsigned long long"""
        return _ITKLabelMapBasePython.itkLabelMap2_GetNumberOfLabelObjects(self)


    def GetLabels(self) -> "std::vector< unsigned long,std::allocator< unsigned long > >":
        """GetLabels(itkLabelMap2 self) -> vectorUL"""
        return _ITKLabelMapBasePython.itkLabelMap2_GetLabels(self)


    def GetLabelObjects(self) -> "std::vector< itkStatisticsLabelObjectUL2_Pointer,std::allocator< itkStatisticsLabelObjectUL2_Pointer > >":
        """GetLabelObjects(itkLabelMap2 self) -> vectoritkStatisticsLabelObjectUL2"""
        return _ITKLabelMapBasePython.itkLabelMap2_GetLabelObjects(self)


    def GetBackgroundValue(self) -> "unsigned long":
        """GetBackgroundValue(itkLabelMap2 self) -> unsigned long"""
        return _ITKLabelMapBasePython.itkLabelMap2_GetBackgroundValue(self)


    def SetBackgroundValue(self, _arg: 'unsigned long const') -> "void":
        """SetBackgroundValue(itkLabelMap2 self, unsigned long const _arg)"""
        return _ITKLabelMapBasePython.itkLabelMap2_SetBackgroundValue(self, _arg)


    def PrintLabelObjects(self, *args) -> "void":
        """
        PrintLabelObjects(itkLabelMap2 self, ostream os)
        PrintLabelObjects(itkLabelMap2 self)
        """
        return _ITKLabelMapBasePython.itkLabelMap2_PrintLabelObjects(self, *args)


    def Optimize(self) -> "void":
        """Optimize(itkLabelMap2 self)"""
        return _ITKLabelMapBasePython.itkLabelMap2_Optimize(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkLabelMap2

    def cast(obj: 'itkLightObject') -> "itkLabelMap2 *":
        """cast(itkLightObject obj) -> itkLabelMap2"""
        return _ITKLabelMapBasePython.itkLabelMap2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLabelMap2

        Create a new object of the class itkLabelMap2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMap2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLabelMap2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLabelMap2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def __len__(self):
        return self.GetNumberOfLabelObjects()
    def __getitem__(self, label):
        return self.GetLabelObject(label)
    def __iter__(self):
        labels = self.GetLabels()
        for label in labels:
            yield self.GetLabelObject(label)


    def New(*args, **kargs):
        """New() -> itkLabelMap2

        Create a new object of the class itkLabelMap2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMap2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLabelMap2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLabelMap2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def __len__(self):
        return self.GetNumberOfLabelObjects()
    def __getitem__(self, label):
        return self.GetLabelObject(label)
    def __iter__(self):
        labels = self.GetLabels()
        for label in labels:
            yield self.GetLabelObject(label)

itkLabelMap2.Clone = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_Clone, None, itkLabelMap2)
itkLabelMap2.Allocate = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_Allocate, None, itkLabelMap2)
itkLabelMap2.Graft = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_Graft, None, itkLabelMap2)
itkLabelMap2.HasLabel = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_HasLabel, None, itkLabelMap2)
itkLabelMap2.GetNthLabelObject = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_GetNthLabelObject, None, itkLabelMap2)
itkLabelMap2.GetPixel = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_GetPixel, None, itkLabelMap2)
itkLabelMap2.SetPixel = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_SetPixel, None, itkLabelMap2)
itkLabelMap2.AddPixel = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_AddPixel, None, itkLabelMap2)
itkLabelMap2.RemovePixel = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_RemovePixel, None, itkLabelMap2)
itkLabelMap2.SetLine = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_SetLine, None, itkLabelMap2)
itkLabelMap2.GetLabelObject = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_GetLabelObject, None, itkLabelMap2)
itkLabelMap2.AddLabelObject = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_AddLabelObject, None, itkLabelMap2)
itkLabelMap2.PushLabelObject = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_PushLabelObject, None, itkLabelMap2)
itkLabelMap2.RemoveLabelObject = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_RemoveLabelObject, None, itkLabelMap2)
itkLabelMap2.RemoveLabel = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_RemoveLabel, None, itkLabelMap2)
itkLabelMap2.ClearLabels = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_ClearLabels, None, itkLabelMap2)
itkLabelMap2.GetNumberOfLabelObjects = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_GetNumberOfLabelObjects, None, itkLabelMap2)
itkLabelMap2.GetLabels = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_GetLabels, None, itkLabelMap2)
itkLabelMap2.GetLabelObjects = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_GetLabelObjects, None, itkLabelMap2)
itkLabelMap2.GetBackgroundValue = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_GetBackgroundValue, None, itkLabelMap2)
itkLabelMap2.SetBackgroundValue = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_SetBackgroundValue, None, itkLabelMap2)
itkLabelMap2.PrintLabelObjects = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_PrintLabelObjects, None, itkLabelMap2)
itkLabelMap2.Optimize = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap2_Optimize, None, itkLabelMap2)
itkLabelMap2_swigregister = _ITKLabelMapBasePython.itkLabelMap2_swigregister
itkLabelMap2_swigregister(itkLabelMap2)

def itkLabelMap2___New_orig__() -> "itkLabelMap2_Pointer":
    """itkLabelMap2___New_orig__() -> itkLabelMap2_Pointer"""
    return _ITKLabelMapBasePython.itkLabelMap2___New_orig__()

def itkLabelMap2_cast(obj: 'itkLightObject') -> "itkLabelMap2 *":
    """itkLabelMap2_cast(itkLightObject obj) -> itkLabelMap2"""
    return _ITKLabelMapBasePython.itkLabelMap2_cast(obj)

class itkLabelMap3(itkImagePython.itkImageBase3):
    """Proxy of C++ itkLabelMap3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLabelMap3_Pointer":
        """__New_orig__() -> itkLabelMap3_Pointer"""
        return _ITKLabelMapBasePython.itkLabelMap3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLabelMap3_Pointer":
        """Clone(itkLabelMap3 self) -> itkLabelMap3_Pointer"""
        return _ITKLabelMapBasePython.itkLabelMap3_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkLabelMap3 self, bool initialize=False)
        Allocate(itkLabelMap3 self)
        """
        return _ITKLabelMapBasePython.itkLabelMap3_Allocate(self, initialize)


    def Graft(self, imgData: 'itkLabelMap3') -> "void":
        """Graft(itkLabelMap3 self, itkLabelMap3 imgData)"""
        return _ITKLabelMapBasePython.itkLabelMap3_Graft(self, imgData)


    def HasLabel(self, label: 'unsigned long const') -> "bool":
        """HasLabel(itkLabelMap3 self, unsigned long const label) -> bool"""
        return _ITKLabelMapBasePython.itkLabelMap3_HasLabel(self, label)


    def GetNthLabelObject(self, *args) -> "itkStatisticsLabelObjectUL3 const *":
        """
        GetNthLabelObject(itkLabelMap3 self, unsigned long long const & pos) -> itkStatisticsLabelObjectUL3
        GetNthLabelObject(itkLabelMap3 self, unsigned long long const & pos) -> itkStatisticsLabelObjectUL3
        """
        return _ITKLabelMapBasePython.itkLabelMap3_GetNthLabelObject(self, *args)


    def GetPixel(self, idx: 'itkIndex3') -> "unsigned long const &":
        """GetPixel(itkLabelMap3 self, itkIndex3 idx) -> unsigned long const &"""
        return _ITKLabelMapBasePython.itkLabelMap3_GetPixel(self, idx)


    def SetPixel(self, idx: 'itkIndex3', label: 'unsigned long const &') -> "void":
        """SetPixel(itkLabelMap3 self, itkIndex3 idx, unsigned long const & label)"""
        return _ITKLabelMapBasePython.itkLabelMap3_SetPixel(self, idx, label)


    def AddPixel(self, idx: 'itkIndex3', label: 'unsigned long const &') -> "void":
        """AddPixel(itkLabelMap3 self, itkIndex3 idx, unsigned long const & label)"""
        return _ITKLabelMapBasePython.itkLabelMap3_AddPixel(self, idx, label)


    def RemovePixel(self, idx: 'itkIndex3', label: 'unsigned long const &') -> "void":
        """RemovePixel(itkLabelMap3 self, itkIndex3 idx, unsigned long const & label)"""
        return _ITKLabelMapBasePython.itkLabelMap3_RemovePixel(self, idx, label)


    def SetLine(self, idx: 'itkIndex3', length: 'unsigned long long const &', label: 'unsigned long const &') -> "void":
        """SetLine(itkLabelMap3 self, itkIndex3 idx, unsigned long long const & length, unsigned long const & label)"""
        return _ITKLabelMapBasePython.itkLabelMap3_SetLine(self, idx, length, label)


    def GetLabelObject(self, *args) -> "itkStatisticsLabelObjectUL3 *":
        """
        GetLabelObject(itkLabelMap3 self, unsigned long const & label) -> itkStatisticsLabelObjectUL3
        GetLabelObject(itkLabelMap3 self, unsigned long const & label) -> itkStatisticsLabelObjectUL3
        GetLabelObject(itkLabelMap3 self, itkIndex3 idx) -> itkStatisticsLabelObjectUL3
        """
        return _ITKLabelMapBasePython.itkLabelMap3_GetLabelObject(self, *args)


    def AddLabelObject(self, labelObject: 'itkStatisticsLabelObjectUL3') -> "void":
        """AddLabelObject(itkLabelMap3 self, itkStatisticsLabelObjectUL3 labelObject)"""
        return _ITKLabelMapBasePython.itkLabelMap3_AddLabelObject(self, labelObject)


    def PushLabelObject(self, labelObject: 'itkStatisticsLabelObjectUL3') -> "void":
        """PushLabelObject(itkLabelMap3 self, itkStatisticsLabelObjectUL3 labelObject)"""
        return _ITKLabelMapBasePython.itkLabelMap3_PushLabelObject(self, labelObject)


    def RemoveLabelObject(self, labelObject: 'itkStatisticsLabelObjectUL3') -> "void":
        """RemoveLabelObject(itkLabelMap3 self, itkStatisticsLabelObjectUL3 labelObject)"""
        return _ITKLabelMapBasePython.itkLabelMap3_RemoveLabelObject(self, labelObject)


    def RemoveLabel(self, label: 'unsigned long const &') -> "void":
        """RemoveLabel(itkLabelMap3 self, unsigned long const & label)"""
        return _ITKLabelMapBasePython.itkLabelMap3_RemoveLabel(self, label)


    def ClearLabels(self) -> "void":
        """ClearLabels(itkLabelMap3 self)"""
        return _ITKLabelMapBasePython.itkLabelMap3_ClearLabels(self)


    def GetNumberOfLabelObjects(self) -> "unsigned long long":
        """GetNumberOfLabelObjects(itkLabelMap3 self) -> unsigned long long"""
        return _ITKLabelMapBasePython.itkLabelMap3_GetNumberOfLabelObjects(self)


    def GetLabels(self) -> "std::vector< unsigned long,std::allocator< unsigned long > >":
        """GetLabels(itkLabelMap3 self) -> vectorUL"""
        return _ITKLabelMapBasePython.itkLabelMap3_GetLabels(self)


    def GetLabelObjects(self) -> "std::vector< itkStatisticsLabelObjectUL3_Pointer,std::allocator< itkStatisticsLabelObjectUL3_Pointer > >":
        """GetLabelObjects(itkLabelMap3 self) -> vectoritkStatisticsLabelObjectUL3"""
        return _ITKLabelMapBasePython.itkLabelMap3_GetLabelObjects(self)


    def GetBackgroundValue(self) -> "unsigned long":
        """GetBackgroundValue(itkLabelMap3 self) -> unsigned long"""
        return _ITKLabelMapBasePython.itkLabelMap3_GetBackgroundValue(self)


    def SetBackgroundValue(self, _arg: 'unsigned long const') -> "void":
        """SetBackgroundValue(itkLabelMap3 self, unsigned long const _arg)"""
        return _ITKLabelMapBasePython.itkLabelMap3_SetBackgroundValue(self, _arg)


    def PrintLabelObjects(self, *args) -> "void":
        """
        PrintLabelObjects(itkLabelMap3 self, ostream os)
        PrintLabelObjects(itkLabelMap3 self)
        """
        return _ITKLabelMapBasePython.itkLabelMap3_PrintLabelObjects(self, *args)


    def Optimize(self) -> "void":
        """Optimize(itkLabelMap3 self)"""
        return _ITKLabelMapBasePython.itkLabelMap3_Optimize(self)

    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkLabelMap3

    def cast(obj: 'itkLightObject') -> "itkLabelMap3 *":
        """cast(itkLightObject obj) -> itkLabelMap3"""
        return _ITKLabelMapBasePython.itkLabelMap3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLabelMap3

        Create a new object of the class itkLabelMap3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMap3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLabelMap3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLabelMap3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def __len__(self):
        return self.GetNumberOfLabelObjects()
    def __getitem__(self, label):
        return self.GetLabelObject(label)
    def __iter__(self):
        labels = self.GetLabels()
        for label in labels:
            yield self.GetLabelObject(label)

itkLabelMap3.Clone = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_Clone, None, itkLabelMap3)
itkLabelMap3.Allocate = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_Allocate, None, itkLabelMap3)
itkLabelMap3.Graft = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_Graft, None, itkLabelMap3)
itkLabelMap3.HasLabel = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_HasLabel, None, itkLabelMap3)
itkLabelMap3.GetNthLabelObject = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_GetNthLabelObject, None, itkLabelMap3)
itkLabelMap3.GetPixel = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_GetPixel, None, itkLabelMap3)
itkLabelMap3.SetPixel = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_SetPixel, None, itkLabelMap3)
itkLabelMap3.AddPixel = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_AddPixel, None, itkLabelMap3)
itkLabelMap3.RemovePixel = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_RemovePixel, None, itkLabelMap3)
itkLabelMap3.SetLine = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_SetLine, None, itkLabelMap3)
itkLabelMap3.GetLabelObject = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_GetLabelObject, None, itkLabelMap3)
itkLabelMap3.AddLabelObject = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_AddLabelObject, None, itkLabelMap3)
itkLabelMap3.PushLabelObject = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_PushLabelObject, None, itkLabelMap3)
itkLabelMap3.RemoveLabelObject = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_RemoveLabelObject, None, itkLabelMap3)
itkLabelMap3.RemoveLabel = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_RemoveLabel, None, itkLabelMap3)
itkLabelMap3.ClearLabels = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_ClearLabels, None, itkLabelMap3)
itkLabelMap3.GetNumberOfLabelObjects = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_GetNumberOfLabelObjects, None, itkLabelMap3)
itkLabelMap3.GetLabels = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_GetLabels, None, itkLabelMap3)
itkLabelMap3.GetLabelObjects = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_GetLabelObjects, None, itkLabelMap3)
itkLabelMap3.GetBackgroundValue = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_GetBackgroundValue, None, itkLabelMap3)
itkLabelMap3.SetBackgroundValue = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_SetBackgroundValue, None, itkLabelMap3)
itkLabelMap3.PrintLabelObjects = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_PrintLabelObjects, None, itkLabelMap3)
itkLabelMap3.Optimize = new_instancemethod(_ITKLabelMapBasePython.itkLabelMap3_Optimize, None, itkLabelMap3)
itkLabelMap3_swigregister = _ITKLabelMapBasePython.itkLabelMap3_swigregister
itkLabelMap3_swigregister(itkLabelMap3)

def itkLabelMap3___New_orig__() -> "itkLabelMap3_Pointer":
    """itkLabelMap3___New_orig__() -> itkLabelMap3_Pointer"""
    return _ITKLabelMapBasePython.itkLabelMap3___New_orig__()

def itkLabelMap3_cast(obj: 'itkLightObject') -> "itkLabelMap3 *":
    """itkLabelMap3_cast(itkLightObject obj) -> itkLabelMap3"""
    return _ITKLabelMapBasePython.itkLabelMap3_cast(obj)


def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk
    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ImageToImageFilter, itkTemplate.itkTemplate):
        image_to_image_filter.__doc__ = itk.ImageToImageFilter.values()[0].__doc__
    else:
        image_to_image_filter.__doc__ = itk.ImageToImageFilter.__doc__

def image_source(*args, **kwargs):
    """Procedural interface for ImageSource"""
    import itk
    instance = itk.ImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def image_source_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ImageSource, itkTemplate.itkTemplate):
        image_source.__doc__ = itk.ImageSource.values()[0].__doc__
    else:
        image_source.__doc__ = itk.ImageSource.__doc__




