# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkAcosImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkAcosImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkAcosImageFilterPython
            return _itkAcosImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkAcosImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkAcosImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkAcosImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkUnaryGeneratorImageFilterPython
import itkInPlaceImageFilterBPython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython

def itkAcosImageFilterIF3IF3_New():
  return itkAcosImageFilterIF3IF3.New()


def itkAcosImageFilterIF2IF2_New():
  return itkAcosImageFilterIF2IF2.New()


def itkAcosImageFilterIUS3IUS3_New():
  return itkAcosImageFilterIUS3IUS3.New()


def itkAcosImageFilterIUS2IUS2_New():
  return itkAcosImageFilterIUS2IUS2.New()


def itkAcosImageFilterIUC3IUC3_New():
  return itkAcosImageFilterIUC3IUC3.New()


def itkAcosImageFilterIUC2IUC2_New():
  return itkAcosImageFilterIUC2IUC2.New()


def itkAcosImageFilterISS3ISS3_New():
  return itkAcosImageFilterISS3ISS3.New()


def itkAcosImageFilterISS2ISS2_New():
  return itkAcosImageFilterISS2ISS2.New()

class itkAcosImageFilterIF2IF2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    """Proxy of C++ itkAcosImageFilterIF2IF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAcosImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkAcosImageFilterIF2IF2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAcosImageFilterIF2IF2_Pointer":
        """Clone(itkAcosImageFilterIF2IF2 self) -> itkAcosImageFilterIF2IF2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIF2IF2_Clone(self)

    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIF2IF2_InputCovertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkAcosImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkAcosImageFilterIF2IF2"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIF2IF2

        Create a new object of the class itkAcosImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAcosImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAcosImageFilterIF2IF2.Clone = new_instancemethod(_itkAcosImageFilterPython.itkAcosImageFilterIF2IF2_Clone, None, itkAcosImageFilterIF2IF2)
itkAcosImageFilterIF2IF2_swigregister = _itkAcosImageFilterPython.itkAcosImageFilterIF2IF2_swigregister
itkAcosImageFilterIF2IF2_swigregister(itkAcosImageFilterIF2IF2)

def itkAcosImageFilterIF2IF2___New_orig__() -> "itkAcosImageFilterIF2IF2_Pointer":
    """itkAcosImageFilterIF2IF2___New_orig__() -> itkAcosImageFilterIF2IF2_Pointer"""
    return _itkAcosImageFilterPython.itkAcosImageFilterIF2IF2___New_orig__()

def itkAcosImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkAcosImageFilterIF2IF2 *":
    """itkAcosImageFilterIF2IF2_cast(itkLightObject obj) -> itkAcosImageFilterIF2IF2"""
    return _itkAcosImageFilterPython.itkAcosImageFilterIF2IF2_cast(obj)

class itkAcosImageFilterIF3IF3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    """Proxy of C++ itkAcosImageFilterIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAcosImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkAcosImageFilterIF3IF3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAcosImageFilterIF3IF3_Pointer":
        """Clone(itkAcosImageFilterIF3IF3 self) -> itkAcosImageFilterIF3IF3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIF3IF3_Clone(self)

    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIF3IF3_InputCovertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkAcosImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkAcosImageFilterIF3IF3"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIF3IF3

        Create a new object of the class itkAcosImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAcosImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAcosImageFilterIF3IF3.Clone = new_instancemethod(_itkAcosImageFilterPython.itkAcosImageFilterIF3IF3_Clone, None, itkAcosImageFilterIF3IF3)
itkAcosImageFilterIF3IF3_swigregister = _itkAcosImageFilterPython.itkAcosImageFilterIF3IF3_swigregister
itkAcosImageFilterIF3IF3_swigregister(itkAcosImageFilterIF3IF3)

def itkAcosImageFilterIF3IF3___New_orig__() -> "itkAcosImageFilterIF3IF3_Pointer":
    """itkAcosImageFilterIF3IF3___New_orig__() -> itkAcosImageFilterIF3IF3_Pointer"""
    return _itkAcosImageFilterPython.itkAcosImageFilterIF3IF3___New_orig__()

def itkAcosImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkAcosImageFilterIF3IF3 *":
    """itkAcosImageFilterIF3IF3_cast(itkLightObject obj) -> itkAcosImageFilterIF3IF3"""
    return _itkAcosImageFilterPython.itkAcosImageFilterIF3IF3_cast(obj)

class itkAcosImageFilterISS2ISS2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2):
    """Proxy of C++ itkAcosImageFilterISS2ISS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAcosImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkAcosImageFilterISS2ISS2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAcosImageFilterISS2ISS2_Pointer":
        """Clone(itkAcosImageFilterISS2ISS2 self) -> itkAcosImageFilterISS2ISS2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2_Clone(self)

    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2_InputCovertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkAcosImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkAcosImageFilterISS2ISS2"""
        return _itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterISS2ISS2

        Create a new object of the class itkAcosImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAcosImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAcosImageFilterISS2ISS2.Clone = new_instancemethod(_itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2_Clone, None, itkAcosImageFilterISS2ISS2)
itkAcosImageFilterISS2ISS2_swigregister = _itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2_swigregister
itkAcosImageFilterISS2ISS2_swigregister(itkAcosImageFilterISS2ISS2)

def itkAcosImageFilterISS2ISS2___New_orig__() -> "itkAcosImageFilterISS2ISS2_Pointer":
    """itkAcosImageFilterISS2ISS2___New_orig__() -> itkAcosImageFilterISS2ISS2_Pointer"""
    return _itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2___New_orig__()

def itkAcosImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkAcosImageFilterISS2ISS2 *":
    """itkAcosImageFilterISS2ISS2_cast(itkLightObject obj) -> itkAcosImageFilterISS2ISS2"""
    return _itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2_cast(obj)

class itkAcosImageFilterISS3ISS3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3):
    """Proxy of C++ itkAcosImageFilterISS3ISS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAcosImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkAcosImageFilterISS3ISS3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAcosImageFilterISS3ISS3_Pointer":
        """Clone(itkAcosImageFilterISS3ISS3 self) -> itkAcosImageFilterISS3ISS3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3_Clone(self)

    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3_InputCovertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkAcosImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkAcosImageFilterISS3ISS3"""
        return _itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterISS3ISS3

        Create a new object of the class itkAcosImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAcosImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAcosImageFilterISS3ISS3.Clone = new_instancemethod(_itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3_Clone, None, itkAcosImageFilterISS3ISS3)
itkAcosImageFilterISS3ISS3_swigregister = _itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3_swigregister
itkAcosImageFilterISS3ISS3_swigregister(itkAcosImageFilterISS3ISS3)

def itkAcosImageFilterISS3ISS3___New_orig__() -> "itkAcosImageFilterISS3ISS3_Pointer":
    """itkAcosImageFilterISS3ISS3___New_orig__() -> itkAcosImageFilterISS3ISS3_Pointer"""
    return _itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3___New_orig__()

def itkAcosImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkAcosImageFilterISS3ISS3 *":
    """itkAcosImageFilterISS3ISS3_cast(itkLightObject obj) -> itkAcosImageFilterISS3ISS3"""
    return _itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3_cast(obj)

class itkAcosImageFilterIUC2IUC2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2):
    """Proxy of C++ itkAcosImageFilterIUC2IUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAcosImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkAcosImageFilterIUC2IUC2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAcosImageFilterIUC2IUC2_Pointer":
        """Clone(itkAcosImageFilterIUC2IUC2 self) -> itkAcosImageFilterIUC2IUC2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2_Clone(self)

    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2_InputCovertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkAcosImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkAcosImageFilterIUC2IUC2"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIUC2IUC2

        Create a new object of the class itkAcosImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAcosImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAcosImageFilterIUC2IUC2.Clone = new_instancemethod(_itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2_Clone, None, itkAcosImageFilterIUC2IUC2)
itkAcosImageFilterIUC2IUC2_swigregister = _itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2_swigregister
itkAcosImageFilterIUC2IUC2_swigregister(itkAcosImageFilterIUC2IUC2)

def itkAcosImageFilterIUC2IUC2___New_orig__() -> "itkAcosImageFilterIUC2IUC2_Pointer":
    """itkAcosImageFilterIUC2IUC2___New_orig__() -> itkAcosImageFilterIUC2IUC2_Pointer"""
    return _itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2___New_orig__()

def itkAcosImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkAcosImageFilterIUC2IUC2 *":
    """itkAcosImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkAcosImageFilterIUC2IUC2"""
    return _itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2_cast(obj)

class itkAcosImageFilterIUC3IUC3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3):
    """Proxy of C++ itkAcosImageFilterIUC3IUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAcosImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkAcosImageFilterIUC3IUC3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAcosImageFilterIUC3IUC3_Pointer":
        """Clone(itkAcosImageFilterIUC3IUC3 self) -> itkAcosImageFilterIUC3IUC3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3_Clone(self)

    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3_InputCovertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkAcosImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkAcosImageFilterIUC3IUC3"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIUC3IUC3

        Create a new object of the class itkAcosImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAcosImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAcosImageFilterIUC3IUC3.Clone = new_instancemethod(_itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3_Clone, None, itkAcosImageFilterIUC3IUC3)
itkAcosImageFilterIUC3IUC3_swigregister = _itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3_swigregister
itkAcosImageFilterIUC3IUC3_swigregister(itkAcosImageFilterIUC3IUC3)

def itkAcosImageFilterIUC3IUC3___New_orig__() -> "itkAcosImageFilterIUC3IUC3_Pointer":
    """itkAcosImageFilterIUC3IUC3___New_orig__() -> itkAcosImageFilterIUC3IUC3_Pointer"""
    return _itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3___New_orig__()

def itkAcosImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkAcosImageFilterIUC3IUC3 *":
    """itkAcosImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkAcosImageFilterIUC3IUC3"""
    return _itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3_cast(obj)

class itkAcosImageFilterIUS2IUS2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2):
    """Proxy of C++ itkAcosImageFilterIUS2IUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAcosImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkAcosImageFilterIUS2IUS2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAcosImageFilterIUS2IUS2_Pointer":
        """Clone(itkAcosImageFilterIUS2IUS2 self) -> itkAcosImageFilterIUS2IUS2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2_Clone(self)

    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2_InputCovertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkAcosImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkAcosImageFilterIUS2IUS2"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIUS2IUS2

        Create a new object of the class itkAcosImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAcosImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAcosImageFilterIUS2IUS2.Clone = new_instancemethod(_itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2_Clone, None, itkAcosImageFilterIUS2IUS2)
itkAcosImageFilterIUS2IUS2_swigregister = _itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2_swigregister
itkAcosImageFilterIUS2IUS2_swigregister(itkAcosImageFilterIUS2IUS2)

def itkAcosImageFilterIUS2IUS2___New_orig__() -> "itkAcosImageFilterIUS2IUS2_Pointer":
    """itkAcosImageFilterIUS2IUS2___New_orig__() -> itkAcosImageFilterIUS2IUS2_Pointer"""
    return _itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2___New_orig__()

def itkAcosImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkAcosImageFilterIUS2IUS2 *":
    """itkAcosImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkAcosImageFilterIUS2IUS2"""
    return _itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2_cast(obj)

class itkAcosImageFilterIUS3IUS3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3):
    """Proxy of C++ itkAcosImageFilterIUS3IUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAcosImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkAcosImageFilterIUS3IUS3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAcosImageFilterIUS3IUS3_Pointer":
        """Clone(itkAcosImageFilterIUS3IUS3 self) -> itkAcosImageFilterIUS3IUS3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3_Clone(self)

    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3_InputCovertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkAcosImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkAcosImageFilterIUS3IUS3"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIUS3IUS3

        Create a new object of the class itkAcosImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAcosImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAcosImageFilterIUS3IUS3.Clone = new_instancemethod(_itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3_Clone, None, itkAcosImageFilterIUS3IUS3)
itkAcosImageFilterIUS3IUS3_swigregister = _itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3_swigregister
itkAcosImageFilterIUS3IUS3_swigregister(itkAcosImageFilterIUS3IUS3)

def itkAcosImageFilterIUS3IUS3___New_orig__() -> "itkAcosImageFilterIUS3IUS3_Pointer":
    """itkAcosImageFilterIUS3IUS3___New_orig__() -> itkAcosImageFilterIUS3IUS3_Pointer"""
    return _itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3___New_orig__()

def itkAcosImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkAcosImageFilterIUS3IUS3 *":
    """itkAcosImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkAcosImageFilterIUS3IUS3"""
    return _itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3_cast(obj)


def acos_image_filter(*args, **kwargs):
    """Procedural interface for AcosImageFilter"""
    import itk
    instance = itk.AcosImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def acos_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.AcosImageFilter, itkTemplate.itkTemplate):
        acos_image_filter.__doc__ = itk.AcosImageFilter.values()[0].__doc__
    else:
        acos_image_filter.__doc__ = itk.AcosImageFilter.__doc__




