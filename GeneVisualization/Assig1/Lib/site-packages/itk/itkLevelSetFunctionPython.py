# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkLevelSetFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkLevelSetFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkLevelSetFunctionPython
            return _itkLevelSetFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkLevelSetFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkLevelSetFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkLevelSetFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkFiniteDifferenceFunctionPython
import itkSizePython
import pyBasePython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import ITKCommonBasePython
import itkCovariantVectorPython

def itkLevelSetFunctionIF3_New():
  return itkLevelSetFunctionIF3.New()


def itkLevelSetFunctionIF2_New():
  return itkLevelSetFunctionIF2.New()

class itkLevelSetFunctionIF2(itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2):
    """Proxy of C++ itkLevelSetFunctionIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLevelSetFunctionIF2_Pointer":
        """__New_orig__() -> itkLevelSetFunctionIF2_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLevelSetFunctionIF2_Pointer":
        """Clone(itkLevelSetFunctionIF2 self) -> itkLevelSetFunctionIF2_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Clone(self)


    def AdvectionField(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', arg2: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "itkFixedArrayF2":
        """
        AdvectionField(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * arg2=None) -> itkFixedArrayF2
        AdvectionField(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> itkFixedArrayF2
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_AdvectionField(self, arg0, arg1, arg2)


    def PropagationSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', arg2: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "float":
        """
        PropagationSpeed(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * arg2=None) -> float
        PropagationSpeed(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_PropagationSpeed(self, arg0, arg1, arg2)


    def CurvatureSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', arg2: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "float":
        """
        CurvatureSpeed(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * arg2=None) -> float
        CurvatureSpeed(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_CurvatureSpeed(self, arg0, arg1, arg2)


    def LaplacianSmoothingSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', arg2: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "float":
        """
        LaplacianSmoothingSpeed(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * arg2=None) -> float
        LaplacianSmoothingSpeed(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_LaplacianSmoothingSpeed(self, arg0, arg1, arg2)


    def SetAdvectionWeight(self, a: 'float const') -> "void":
        """SetAdvectionWeight(itkLevelSetFunctionIF2 self, float const a)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetAdvectionWeight(self, a)


    def GetAdvectionWeight(self) -> "float":
        """GetAdvectionWeight(itkLevelSetFunctionIF2 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetAdvectionWeight(self)


    def SetPropagationWeight(self, p: 'float const') -> "void":
        """SetPropagationWeight(itkLevelSetFunctionIF2 self, float const p)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetPropagationWeight(self, p)


    def GetPropagationWeight(self) -> "float":
        """GetPropagationWeight(itkLevelSetFunctionIF2 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetPropagationWeight(self)


    def SetCurvatureWeight(self, c: 'float const') -> "void":
        """SetCurvatureWeight(itkLevelSetFunctionIF2 self, float const c)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetCurvatureWeight(self, c)


    def GetCurvatureWeight(self) -> "float":
        """GetCurvatureWeight(itkLevelSetFunctionIF2 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetCurvatureWeight(self)


    def SetLaplacianSmoothingWeight(self, c: 'float const') -> "void":
        """SetLaplacianSmoothingWeight(itkLevelSetFunctionIF2 self, float const c)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetLaplacianSmoothingWeight(self, c)


    def GetLaplacianSmoothingWeight(self) -> "float":
        """GetLaplacianSmoothingWeight(itkLevelSetFunctionIF2 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetLaplacianSmoothingWeight(self)


    def SetEpsilonMagnitude(self, e: 'float const') -> "void":
        """SetEpsilonMagnitude(itkLevelSetFunctionIF2 self, float const e)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetEpsilonMagnitude(self, e)


    def GetEpsilonMagnitude(self) -> "float":
        """GetEpsilonMagnitude(itkLevelSetFunctionIF2 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetEpsilonMagnitude(self)


    def ComputeUpdate(self, *args) -> "float":
        """
        ComputeUpdate(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & neighborhood, void * globalData, itkVectorF2 arg2) -> float
        ComputeUpdate(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & neighborhood, void * globalData) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeUpdate(self, *args)


    def Initialize(self, r: 'itkSize2') -> "void":
        """Initialize(itkLevelSetFunctionIF2 self, itkSize2 r)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Initialize(self, r)


    def ComputeCurvatureTerm(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', gd: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "float":
        """
        ComputeCurvatureTerm(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * gd=None) -> float
        ComputeCurvatureTerm(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeCurvatureTerm(self, arg0, arg1, gd)


    def ComputeMeanCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', gd: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "float":
        """
        ComputeMeanCurvature(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * gd=None) -> float
        ComputeMeanCurvature(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMeanCurvature(self, arg0, arg1, gd)


    def ComputeMinimalCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', gd: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "float":
        """
        ComputeMinimalCurvature(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * gd=None) -> float
        ComputeMinimalCurvature(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMinimalCurvature(self, arg0, arg1, gd)


    def Compute3DMinimalCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', gd: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "float":
        """
        Compute3DMinimalCurvature(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * gd=None) -> float
        Compute3DMinimalCurvature(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Compute3DMinimalCurvature(self, arg0, arg1, gd)


    def SetUseMinimalCurvature(self, b: 'bool') -> "void":
        """SetUseMinimalCurvature(itkLevelSetFunctionIF2 self, bool b)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetUseMinimalCurvature(self, b)


    def GetUseMinimalCurvature(self) -> "bool":
        """GetUseMinimalCurvature(itkLevelSetFunctionIF2 self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetUseMinimalCurvature(self)


    def UseMinimalCurvatureOn(self) -> "void":
        """UseMinimalCurvatureOn(itkLevelSetFunctionIF2 self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOn(self)


    def UseMinimalCurvatureOff(self) -> "void":
        """UseMinimalCurvatureOff(itkLevelSetFunctionIF2 self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOff(self)


    def SetMaximumCurvatureTimeStep(n: 'double') -> "void":
        """SetMaximumCurvatureTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep(n)

    SetMaximumCurvatureTimeStep = staticmethod(SetMaximumCurvatureTimeStep)

    def GetMaximumCurvatureTimeStep() -> "double":
        """GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep()

    GetMaximumCurvatureTimeStep = staticmethod(GetMaximumCurvatureTimeStep)

    def SetMaximumPropagationTimeStep(n: 'double') -> "void":
        """SetMaximumPropagationTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep(n)

    SetMaximumPropagationTimeStep = staticmethod(SetMaximumPropagationTimeStep)

    def GetMaximumPropagationTimeStep() -> "double":
        """GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep()

    GetMaximumPropagationTimeStep = staticmethod(GetMaximumPropagationTimeStep)
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionIF2

    def cast(obj: 'itkLightObject') -> "itkLevelSetFunctionIF2 *":
        """cast(itkLightObject obj) -> itkLevelSetFunctionIF2"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionIF2

        Create a new object of the class itkLevelSetFunctionIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevelSetFunctionIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevelSetFunctionIF2.Clone = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Clone, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.AdvectionField = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_AdvectionField, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.PropagationSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_PropagationSpeed, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.CurvatureSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_CurvatureSpeed, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.LaplacianSmoothingSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_LaplacianSmoothingSpeed, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetAdvectionWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetAdvectionWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetPropagationWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetPropagationWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetCurvatureWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetCurvatureWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetLaplacianSmoothingWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetLaplacianSmoothingWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetEpsilonMagnitude, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetEpsilonMagnitude, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.ComputeUpdate = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeUpdate, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.Initialize = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Initialize, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.ComputeCurvatureTerm = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeCurvatureTerm, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.ComputeMeanCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMeanCurvature, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.ComputeMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMinimalCurvature, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.Compute3DMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Compute3DMinimalCurvature, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetUseMinimalCurvature, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetUseMinimalCurvature, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.UseMinimalCurvatureOn = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOn, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.UseMinimalCurvatureOff = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOff, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2_swigregister = _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_swigregister
itkLevelSetFunctionIF2_swigregister(itkLevelSetFunctionIF2)

def itkLevelSetFunctionIF2___New_orig__() -> "itkLevelSetFunctionIF2_Pointer":
    """itkLevelSetFunctionIF2___New_orig__() -> itkLevelSetFunctionIF2_Pointer"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2___New_orig__()

def itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep(n: 'double') -> "void":
    """itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep(double n)"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep(n)

def itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep() -> "double":
    """itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep() -> double"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep()

def itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep(n: 'double') -> "void":
    """itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep(double n)"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep(n)

def itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep() -> "double":
    """itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep() -> double"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep()

def itkLevelSetFunctionIF2_cast(obj: 'itkLightObject') -> "itkLevelSetFunctionIF2 *":
    """itkLevelSetFunctionIF2_cast(itkLightObject obj) -> itkLevelSetFunctionIF2"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_cast(obj)

class itkLevelSetFunctionIF3(itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3):
    """Proxy of C++ itkLevelSetFunctionIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLevelSetFunctionIF3_Pointer":
        """__New_orig__() -> itkLevelSetFunctionIF3_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLevelSetFunctionIF3_Pointer":
        """Clone(itkLevelSetFunctionIF3 self) -> itkLevelSetFunctionIF3_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Clone(self)


    def AdvectionField(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', arg2: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "itkFixedArrayF3":
        """
        AdvectionField(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * arg2=None) -> itkFixedArrayF3
        AdvectionField(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> itkFixedArrayF3
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_AdvectionField(self, arg0, arg1, arg2)


    def PropagationSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', arg2: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "float":
        """
        PropagationSpeed(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * arg2=None) -> float
        PropagationSpeed(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_PropagationSpeed(self, arg0, arg1, arg2)


    def CurvatureSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', arg2: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "float":
        """
        CurvatureSpeed(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * arg2=None) -> float
        CurvatureSpeed(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_CurvatureSpeed(self, arg0, arg1, arg2)


    def LaplacianSmoothingSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', arg2: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "float":
        """
        LaplacianSmoothingSpeed(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * arg2=None) -> float
        LaplacianSmoothingSpeed(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_LaplacianSmoothingSpeed(self, arg0, arg1, arg2)


    def SetAdvectionWeight(self, a: 'float const') -> "void":
        """SetAdvectionWeight(itkLevelSetFunctionIF3 self, float const a)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetAdvectionWeight(self, a)


    def GetAdvectionWeight(self) -> "float":
        """GetAdvectionWeight(itkLevelSetFunctionIF3 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetAdvectionWeight(self)


    def SetPropagationWeight(self, p: 'float const') -> "void":
        """SetPropagationWeight(itkLevelSetFunctionIF3 self, float const p)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetPropagationWeight(self, p)


    def GetPropagationWeight(self) -> "float":
        """GetPropagationWeight(itkLevelSetFunctionIF3 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetPropagationWeight(self)


    def SetCurvatureWeight(self, c: 'float const') -> "void":
        """SetCurvatureWeight(itkLevelSetFunctionIF3 self, float const c)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetCurvatureWeight(self, c)


    def GetCurvatureWeight(self) -> "float":
        """GetCurvatureWeight(itkLevelSetFunctionIF3 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetCurvatureWeight(self)


    def SetLaplacianSmoothingWeight(self, c: 'float const') -> "void":
        """SetLaplacianSmoothingWeight(itkLevelSetFunctionIF3 self, float const c)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetLaplacianSmoothingWeight(self, c)


    def GetLaplacianSmoothingWeight(self) -> "float":
        """GetLaplacianSmoothingWeight(itkLevelSetFunctionIF3 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetLaplacianSmoothingWeight(self)


    def SetEpsilonMagnitude(self, e: 'float const') -> "void":
        """SetEpsilonMagnitude(itkLevelSetFunctionIF3 self, float const e)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetEpsilonMagnitude(self, e)


    def GetEpsilonMagnitude(self) -> "float":
        """GetEpsilonMagnitude(itkLevelSetFunctionIF3 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetEpsilonMagnitude(self)


    def ComputeUpdate(self, *args) -> "float":
        """
        ComputeUpdate(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & neighborhood, void * globalData, itkVectorF3 arg2) -> float
        ComputeUpdate(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & neighborhood, void * globalData) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeUpdate(self, *args)


    def Initialize(self, r: 'itkSize3') -> "void":
        """Initialize(itkLevelSetFunctionIF3 self, itkSize3 r)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Initialize(self, r)


    def ComputeCurvatureTerm(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', gd: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "float":
        """
        ComputeCurvatureTerm(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * gd=None) -> float
        ComputeCurvatureTerm(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeCurvatureTerm(self, arg0, arg1, gd)


    def ComputeMeanCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', gd: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "float":
        """
        ComputeMeanCurvature(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * gd=None) -> float
        ComputeMeanCurvature(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMeanCurvature(self, arg0, arg1, gd)


    def ComputeMinimalCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', gd: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "float":
        """
        ComputeMinimalCurvature(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * gd=None) -> float
        ComputeMinimalCurvature(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMinimalCurvature(self, arg0, arg1, gd)


    def Compute3DMinimalCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', gd: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "float":
        """
        Compute3DMinimalCurvature(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * gd=None) -> float
        Compute3DMinimalCurvature(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Compute3DMinimalCurvature(self, arg0, arg1, gd)


    def SetUseMinimalCurvature(self, b: 'bool') -> "void":
        """SetUseMinimalCurvature(itkLevelSetFunctionIF3 self, bool b)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetUseMinimalCurvature(self, b)


    def GetUseMinimalCurvature(self) -> "bool":
        """GetUseMinimalCurvature(itkLevelSetFunctionIF3 self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetUseMinimalCurvature(self)


    def UseMinimalCurvatureOn(self) -> "void":
        """UseMinimalCurvatureOn(itkLevelSetFunctionIF3 self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOn(self)


    def UseMinimalCurvatureOff(self) -> "void":
        """UseMinimalCurvatureOff(itkLevelSetFunctionIF3 self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOff(self)


    def SetMaximumCurvatureTimeStep(n: 'double') -> "void":
        """SetMaximumCurvatureTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep(n)

    SetMaximumCurvatureTimeStep = staticmethod(SetMaximumCurvatureTimeStep)

    def GetMaximumCurvatureTimeStep() -> "double":
        """GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep()

    GetMaximumCurvatureTimeStep = staticmethod(GetMaximumCurvatureTimeStep)

    def SetMaximumPropagationTimeStep(n: 'double') -> "void":
        """SetMaximumPropagationTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep(n)

    SetMaximumPropagationTimeStep = staticmethod(SetMaximumPropagationTimeStep)

    def GetMaximumPropagationTimeStep() -> "double":
        """GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep()

    GetMaximumPropagationTimeStep = staticmethod(GetMaximumPropagationTimeStep)
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionIF3

    def cast(obj: 'itkLightObject') -> "itkLevelSetFunctionIF3 *":
        """cast(itkLightObject obj) -> itkLevelSetFunctionIF3"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionIF3

        Create a new object of the class itkLevelSetFunctionIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevelSetFunctionIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevelSetFunctionIF3.Clone = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Clone, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.AdvectionField = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_AdvectionField, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.PropagationSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_PropagationSpeed, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.CurvatureSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_CurvatureSpeed, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.LaplacianSmoothingSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_LaplacianSmoothingSpeed, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetAdvectionWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetAdvectionWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetPropagationWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetPropagationWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetCurvatureWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetCurvatureWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetLaplacianSmoothingWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetLaplacianSmoothingWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetEpsilonMagnitude, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetEpsilonMagnitude, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.ComputeUpdate = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeUpdate, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.Initialize = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Initialize, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.ComputeCurvatureTerm = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeCurvatureTerm, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.ComputeMeanCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMeanCurvature, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.ComputeMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMinimalCurvature, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.Compute3DMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Compute3DMinimalCurvature, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetUseMinimalCurvature, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetUseMinimalCurvature, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.UseMinimalCurvatureOn = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOn, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.UseMinimalCurvatureOff = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOff, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3_swigregister = _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_swigregister
itkLevelSetFunctionIF3_swigregister(itkLevelSetFunctionIF3)

def itkLevelSetFunctionIF3___New_orig__() -> "itkLevelSetFunctionIF3_Pointer":
    """itkLevelSetFunctionIF3___New_orig__() -> itkLevelSetFunctionIF3_Pointer"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3___New_orig__()

def itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep(n: 'double') -> "void":
    """itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep(double n)"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep(n)

def itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep() -> "double":
    """itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep() -> double"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep()

def itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep(n: 'double') -> "void":
    """itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep(double n)"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep(n)

def itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep() -> "double":
    """itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep() -> double"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep()

def itkLevelSetFunctionIF3_cast(obj: 'itkLightObject') -> "itkLevelSetFunctionIF3 *":
    """itkLevelSetFunctionIF3_cast(itkLightObject obj) -> itkLevelSetFunctionIF3"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_cast(obj)



