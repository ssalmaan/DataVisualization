# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkMatrixPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMatrixPython', [dirname(__file__)])
        except ImportError:
            import _itkMatrixPython
            return _itkMatrixPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMatrixPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMatrixPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMatrixPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vnl_matrix_fixedPython
import vnl_matrixPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import itkFixedArrayPython
import itkCovariantVectorPython

def itkMatrixF22_New():
  return itkMatrixF22.New()


def itkMatrixD22_New():
  return itkMatrixD22.New()


def itkMatrixF23_New():
  return itkMatrixF23.New()


def itkMatrixD23_New():
  return itkMatrixD23.New()


def itkMatrixF24_New():
  return itkMatrixF24.New()


def itkMatrixD24_New():
  return itkMatrixD24.New()


def itkMatrixF32_New():
  return itkMatrixF32.New()


def itkMatrixD32_New():
  return itkMatrixD32.New()


def itkMatrixF33_New():
  return itkMatrixF33.New()


def itkMatrixD33_New():
  return itkMatrixD33.New()


def itkMatrixF34_New():
  return itkMatrixF34.New()


def itkMatrixD34_New():
  return itkMatrixD34.New()


def itkMatrixF42_New():
  return itkMatrixF42.New()


def itkMatrixD42_New():
  return itkMatrixD42.New()


def itkMatrixF43_New():
  return itkMatrixF43.New()


def itkMatrixD43_New():
  return itkMatrixD43.New()


def itkMatrixF44_New():
  return itkMatrixF44.New()


def itkMatrixD44_New():
  return itkMatrixD44.New()

class itkMatrixD22(object):
    """Proxy of C++ itkMatrixD22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixD22') -> "itkMatrixD22":
        """__add__(itkMatrixD22 self, itkMatrixD22 matrix) -> itkMatrixD22"""
        return _itkMatrixPython.itkMatrixD22___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixD22') -> "itkMatrixD22 const &":
        """__iadd__(itkMatrixD22 self, itkMatrixD22 matrix) -> itkMatrixD22"""
        return _itkMatrixPython.itkMatrixD22___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixD22') -> "itkMatrixD22":
        """__sub__(itkMatrixD22 self, itkMatrixD22 matrix) -> itkMatrixD22"""
        return _itkMatrixPython.itkMatrixD22___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixD22') -> "itkMatrixD22 const &":
        """__isub__(itkMatrixD22 self, itkMatrixD22 matrix) -> itkMatrixD22"""
        return _itkMatrixPython.itkMatrixD22___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixD22 self, itkMatrixD22 matrix)
        __imul__(itkMatrixD22 self, vnl_matrixD matrix)
        __imul__(itkMatrixD22 self, double const & value)
        """
        return _itkMatrixPython.itkMatrixD22___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixD22":
        """
        __mul__(itkMatrixD22 self, itkVectorD2 vector) -> itkVectorD2
        __mul__(itkMatrixD22 self, itkPointD2 vector) -> itkPointD2
        __mul__(itkMatrixD22 self, itkCovariantVectorD2 vector) -> itkCovariantVectorD2
        __mul__(itkMatrixD22 self, vnl_vector_fixed< double,2 > const & vector) -> vnl_vector_fixed< double,2 >
        __mul__(itkMatrixD22 self, itkMatrixD22 matrix) -> itkMatrixD22
        __mul__(itkMatrixD22 self, vnl_matrixD matrix) -> vnl_matrixD
        __mul__(itkMatrixD22 self, vnl_vectorD matrix) -> vnl_vectorD
        __mul__(itkMatrixD22 self, double const & value) -> itkMatrixD22
        """
        return _itkMatrixPython.itkMatrixD22___mul__(self, *args)


    def __idiv__(self, value: 'double const &') -> "void":
        """__idiv__(itkMatrixD22 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD22___idiv__(self, value)


    def __div__(self, value: 'double const &') -> "itkMatrixD22":
        """__div__(itkMatrixD22 self, double const & value) -> itkMatrixD22"""
        return _itkMatrixPython.itkMatrixD22___div__(self, value)


    def __call__(self, *args) -> "double const &":
        """
        __call__(itkMatrixD22 self, unsigned int row, unsigned int col) -> double
        __call__(itkMatrixD22 self, unsigned int row, unsigned int col) -> double const &
        """
        return _itkMatrixPython.itkMatrixD22___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixedD_2_2 const &":
        """
        __GetVnlMatrix_orig__(itkMatrixD22 self) -> vnl_matrix_fixedD_2_2
        __GetVnlMatrix_orig__(itkMatrixD22 self) -> vnl_matrix_fixedD_2_2
        """
        return _itkMatrixPython.itkMatrixD22___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixD22 self)"""
        return _itkMatrixPython.itkMatrixD22_SetIdentity(self)


    def Fill(self, value: 'double const &') -> "void":
        """Fill(itkMatrixD22 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD22_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixD22') -> "bool":
        """__eq__(itkMatrixD22 self, itkMatrixD22 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD22___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixD22') -> "bool":
        """__ne__(itkMatrixD22 self, itkMatrixD22 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD22___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixedD_2_2":
        """GetInverse(itkMatrixD22 self) -> vnl_matrix_fixedD_2_2"""
        return _itkMatrixPython.itkMatrixD22_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixedD_2_2":
        """GetTranspose(itkMatrixD22 self) -> vnl_matrix_fixedD_2_2"""
        return _itkMatrixPython.itkMatrixD22_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixD22 self, vnl_matrixD matrix) -> itkMatrixD22
        __init__(itkMatrixD22 self, vnl_matrix_fixedD_2_2 matrix) -> itkMatrixD22
        __init__(itkMatrixD22 self) -> itkMatrixD22
        __init__(itkMatrixD22 self, itkMatrixD22 matrix) -> itkMatrixD22
        """
        _itkMatrixPython.itkMatrixD22_swiginit(self, _itkMatrixPython.new_itkMatrixD22(*args))

    def swap(self, other: 'itkMatrixD22') -> "void":
        """swap(itkMatrixD22 self, itkMatrixD22 other)"""
        return _itkMatrixPython.itkMatrixD22_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD22

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixD22.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixD22___add__, None, itkMatrixD22)
itkMatrixD22.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixD22___iadd__, None, itkMatrixD22)
itkMatrixD22.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixD22___sub__, None, itkMatrixD22)
itkMatrixD22.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixD22___isub__, None, itkMatrixD22)
itkMatrixD22.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixD22___imul__, None, itkMatrixD22)
itkMatrixD22.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixD22___mul__, None, itkMatrixD22)
itkMatrixD22.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixD22___idiv__, None, itkMatrixD22)
itkMatrixD22.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixD22___div__, None, itkMatrixD22)
itkMatrixD22.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixD22___call__, None, itkMatrixD22)
itkMatrixD22.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixD22___GetVnlMatrix_orig__, None, itkMatrixD22)
itkMatrixD22.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixD22_SetIdentity, None, itkMatrixD22)
itkMatrixD22.Fill = new_instancemethod(_itkMatrixPython.itkMatrixD22_Fill, None, itkMatrixD22)
itkMatrixD22.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixD22___eq__, None, itkMatrixD22)
itkMatrixD22.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixD22___ne__, None, itkMatrixD22)
itkMatrixD22.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixD22_GetInverse, None, itkMatrixD22)
itkMatrixD22.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixD22_GetTranspose, None, itkMatrixD22)
itkMatrixD22.swap = new_instancemethod(_itkMatrixPython.itkMatrixD22_swap, None, itkMatrixD22)
itkMatrixD22_swigregister = _itkMatrixPython.itkMatrixD22_swigregister
itkMatrixD22_swigregister(itkMatrixD22)

class itkMatrixD23(object):
    """Proxy of C++ itkMatrixD23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixD23') -> "itkMatrixD23":
        """__add__(itkMatrixD23 self, itkMatrixD23 matrix) -> itkMatrixD23"""
        return _itkMatrixPython.itkMatrixD23___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixD23') -> "itkMatrixD23 const &":
        """__iadd__(itkMatrixD23 self, itkMatrixD23 matrix) -> itkMatrixD23"""
        return _itkMatrixPython.itkMatrixD23___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixD23') -> "itkMatrixD23":
        """__sub__(itkMatrixD23 self, itkMatrixD23 matrix) -> itkMatrixD23"""
        return _itkMatrixPython.itkMatrixD23___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixD23') -> "itkMatrixD23 const &":
        """__isub__(itkMatrixD23 self, itkMatrixD23 matrix) -> itkMatrixD23"""
        return _itkMatrixPython.itkMatrixD23___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixD23 self, itkMatrixD33 matrix)
        __imul__(itkMatrixD23 self, vnl_matrixD matrix)
        __imul__(itkMatrixD23 self, double const & value)
        """
        return _itkMatrixPython.itkMatrixD23___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixD23":
        """
        __mul__(itkMatrixD23 self, itkVectorD3 vector) -> itkVectorD2
        __mul__(itkMatrixD23 self, itkPointD3 vector) -> itkPointD2
        __mul__(itkMatrixD23 self, itkCovariantVectorD3 vector) -> itkCovariantVectorD2
        __mul__(itkMatrixD23 self, vnl_vector_fixed< double,3 > const & vector) -> vnl_vector_fixed< double,2 >
        __mul__(itkMatrixD23 self, itkMatrixD33 matrix) -> itkMatrixD23
        __mul__(itkMatrixD23 self, vnl_matrixD matrix) -> vnl_matrixD
        __mul__(itkMatrixD23 self, vnl_vectorD matrix) -> vnl_vectorD
        __mul__(itkMatrixD23 self, double const & value) -> itkMatrixD23
        """
        return _itkMatrixPython.itkMatrixD23___mul__(self, *args)


    def __idiv__(self, value: 'double const &') -> "void":
        """__idiv__(itkMatrixD23 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD23___idiv__(self, value)


    def __div__(self, value: 'double const &') -> "itkMatrixD23":
        """__div__(itkMatrixD23 self, double const & value) -> itkMatrixD23"""
        return _itkMatrixPython.itkMatrixD23___div__(self, value)


    def __call__(self, *args) -> "double const &":
        """
        __call__(itkMatrixD23 self, unsigned int row, unsigned int col) -> double
        __call__(itkMatrixD23 self, unsigned int row, unsigned int col) -> double const &
        """
        return _itkMatrixPython.itkMatrixD23___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixedD_2_3 const &":
        """
        __GetVnlMatrix_orig__(itkMatrixD23 self) -> vnl_matrix_fixedD_2_3
        __GetVnlMatrix_orig__(itkMatrixD23 self) -> vnl_matrix_fixedD_2_3
        """
        return _itkMatrixPython.itkMatrixD23___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixD23 self)"""
        return _itkMatrixPython.itkMatrixD23_SetIdentity(self)


    def Fill(self, value: 'double const &') -> "void":
        """Fill(itkMatrixD23 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD23_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixD23') -> "bool":
        """__eq__(itkMatrixD23 self, itkMatrixD23 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD23___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixD23') -> "bool":
        """__ne__(itkMatrixD23 self, itkMatrixD23 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD23___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixed< double,3,2 >":
        """GetInverse(itkMatrixD23 self) -> vnl_matrix_fixed< double,3,2 >"""
        return _itkMatrixPython.itkMatrixD23_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixed< double,3,2 >":
        """GetTranspose(itkMatrixD23 self) -> vnl_matrix_fixed< double,3,2 >"""
        return _itkMatrixPython.itkMatrixD23_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixD23 self, vnl_matrixD matrix) -> itkMatrixD23
        __init__(itkMatrixD23 self, vnl_matrix_fixedD_2_3 matrix) -> itkMatrixD23
        __init__(itkMatrixD23 self) -> itkMatrixD23
        __init__(itkMatrixD23 self, itkMatrixD23 matrix) -> itkMatrixD23
        """
        _itkMatrixPython.itkMatrixD23_swiginit(self, _itkMatrixPython.new_itkMatrixD23(*args))

    def swap(self, other: 'itkMatrixD23') -> "void":
        """swap(itkMatrixD23 self, itkMatrixD23 other)"""
        return _itkMatrixPython.itkMatrixD23_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD23

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixD23.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixD23___add__, None, itkMatrixD23)
itkMatrixD23.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixD23___iadd__, None, itkMatrixD23)
itkMatrixD23.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixD23___sub__, None, itkMatrixD23)
itkMatrixD23.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixD23___isub__, None, itkMatrixD23)
itkMatrixD23.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixD23___imul__, None, itkMatrixD23)
itkMatrixD23.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixD23___mul__, None, itkMatrixD23)
itkMatrixD23.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixD23___idiv__, None, itkMatrixD23)
itkMatrixD23.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixD23___div__, None, itkMatrixD23)
itkMatrixD23.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixD23___call__, None, itkMatrixD23)
itkMatrixD23.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixD23___GetVnlMatrix_orig__, None, itkMatrixD23)
itkMatrixD23.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixD23_SetIdentity, None, itkMatrixD23)
itkMatrixD23.Fill = new_instancemethod(_itkMatrixPython.itkMatrixD23_Fill, None, itkMatrixD23)
itkMatrixD23.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixD23___eq__, None, itkMatrixD23)
itkMatrixD23.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixD23___ne__, None, itkMatrixD23)
itkMatrixD23.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixD23_GetInverse, None, itkMatrixD23)
itkMatrixD23.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixD23_GetTranspose, None, itkMatrixD23)
itkMatrixD23.swap = new_instancemethod(_itkMatrixPython.itkMatrixD23_swap, None, itkMatrixD23)
itkMatrixD23_swigregister = _itkMatrixPython.itkMatrixD23_swigregister
itkMatrixD23_swigregister(itkMatrixD23)

class itkMatrixD24(object):
    """Proxy of C++ itkMatrixD24 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixD24') -> "itkMatrixD24":
        """__add__(itkMatrixD24 self, itkMatrixD24 matrix) -> itkMatrixD24"""
        return _itkMatrixPython.itkMatrixD24___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixD24') -> "itkMatrixD24 const &":
        """__iadd__(itkMatrixD24 self, itkMatrixD24 matrix) -> itkMatrixD24"""
        return _itkMatrixPython.itkMatrixD24___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixD24') -> "itkMatrixD24":
        """__sub__(itkMatrixD24 self, itkMatrixD24 matrix) -> itkMatrixD24"""
        return _itkMatrixPython.itkMatrixD24___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixD24') -> "itkMatrixD24 const &":
        """__isub__(itkMatrixD24 self, itkMatrixD24 matrix) -> itkMatrixD24"""
        return _itkMatrixPython.itkMatrixD24___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixD24 self, itkMatrixD44 matrix)
        __imul__(itkMatrixD24 self, vnl_matrixD matrix)
        __imul__(itkMatrixD24 self, double const & value)
        """
        return _itkMatrixPython.itkMatrixD24___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixD24":
        """
        __mul__(itkMatrixD24 self, itkVectorD4 vector) -> itkVectorD2
        __mul__(itkMatrixD24 self, itkPointD4 vector) -> itkPointD2
        __mul__(itkMatrixD24 self, itkCovariantVectorD4 vector) -> itkCovariantVectorD2
        __mul__(itkMatrixD24 self, vnl_vector_fixed< double,4 > const & vector) -> vnl_vector_fixed< double,2 >
        __mul__(itkMatrixD24 self, itkMatrixD44 matrix) -> itkMatrixD24
        __mul__(itkMatrixD24 self, vnl_matrixD matrix) -> vnl_matrixD
        __mul__(itkMatrixD24 self, vnl_vectorD matrix) -> vnl_vectorD
        __mul__(itkMatrixD24 self, double const & value) -> itkMatrixD24
        """
        return _itkMatrixPython.itkMatrixD24___mul__(self, *args)


    def __idiv__(self, value: 'double const &') -> "void":
        """__idiv__(itkMatrixD24 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD24___idiv__(self, value)


    def __div__(self, value: 'double const &') -> "itkMatrixD24":
        """__div__(itkMatrixD24 self, double const & value) -> itkMatrixD24"""
        return _itkMatrixPython.itkMatrixD24___div__(self, value)


    def __call__(self, *args) -> "double const &":
        """
        __call__(itkMatrixD24 self, unsigned int row, unsigned int col) -> double
        __call__(itkMatrixD24 self, unsigned int row, unsigned int col) -> double const &
        """
        return _itkMatrixPython.itkMatrixD24___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixed< double,2,4 > const &":
        """
        __GetVnlMatrix_orig__(itkMatrixD24 self) -> vnl_matrix_fixed< double,2,4 >
        __GetVnlMatrix_orig__(itkMatrixD24 self) -> vnl_matrix_fixed< double,2,4 > const &
        """
        return _itkMatrixPython.itkMatrixD24___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixD24 self)"""
        return _itkMatrixPython.itkMatrixD24_SetIdentity(self)


    def Fill(self, value: 'double const &') -> "void":
        """Fill(itkMatrixD24 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD24_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixD24') -> "bool":
        """__eq__(itkMatrixD24 self, itkMatrixD24 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD24___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixD24') -> "bool":
        """__ne__(itkMatrixD24 self, itkMatrixD24 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD24___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixed< double,4,2 >":
        """GetInverse(itkMatrixD24 self) -> vnl_matrix_fixed< double,4,2 >"""
        return _itkMatrixPython.itkMatrixD24_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixed< double,4,2 >":
        """GetTranspose(itkMatrixD24 self) -> vnl_matrix_fixed< double,4,2 >"""
        return _itkMatrixPython.itkMatrixD24_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixD24 self, vnl_matrixD matrix) -> itkMatrixD24
        __init__(itkMatrixD24 self, vnl_matrix_fixed< double,2,4 > const & matrix) -> itkMatrixD24
        __init__(itkMatrixD24 self) -> itkMatrixD24
        __init__(itkMatrixD24 self, itkMatrixD24 matrix) -> itkMatrixD24
        """
        _itkMatrixPython.itkMatrixD24_swiginit(self, _itkMatrixPython.new_itkMatrixD24(*args))

    def swap(self, other: 'itkMatrixD24') -> "void":
        """swap(itkMatrixD24 self, itkMatrixD24 other)"""
        return _itkMatrixPython.itkMatrixD24_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD24

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixD24.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixD24___add__, None, itkMatrixD24)
itkMatrixD24.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixD24___iadd__, None, itkMatrixD24)
itkMatrixD24.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixD24___sub__, None, itkMatrixD24)
itkMatrixD24.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixD24___isub__, None, itkMatrixD24)
itkMatrixD24.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixD24___imul__, None, itkMatrixD24)
itkMatrixD24.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixD24___mul__, None, itkMatrixD24)
itkMatrixD24.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixD24___idiv__, None, itkMatrixD24)
itkMatrixD24.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixD24___div__, None, itkMatrixD24)
itkMatrixD24.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixD24___call__, None, itkMatrixD24)
itkMatrixD24.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixD24___GetVnlMatrix_orig__, None, itkMatrixD24)
itkMatrixD24.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixD24_SetIdentity, None, itkMatrixD24)
itkMatrixD24.Fill = new_instancemethod(_itkMatrixPython.itkMatrixD24_Fill, None, itkMatrixD24)
itkMatrixD24.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixD24___eq__, None, itkMatrixD24)
itkMatrixD24.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixD24___ne__, None, itkMatrixD24)
itkMatrixD24.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixD24_GetInverse, None, itkMatrixD24)
itkMatrixD24.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixD24_GetTranspose, None, itkMatrixD24)
itkMatrixD24.swap = new_instancemethod(_itkMatrixPython.itkMatrixD24_swap, None, itkMatrixD24)
itkMatrixD24_swigregister = _itkMatrixPython.itkMatrixD24_swigregister
itkMatrixD24_swigregister(itkMatrixD24)

class itkMatrixD32(object):
    """Proxy of C++ itkMatrixD32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixD32') -> "itkMatrixD32":
        """__add__(itkMatrixD32 self, itkMatrixD32 matrix) -> itkMatrixD32"""
        return _itkMatrixPython.itkMatrixD32___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixD32') -> "itkMatrixD32 const &":
        """__iadd__(itkMatrixD32 self, itkMatrixD32 matrix) -> itkMatrixD32"""
        return _itkMatrixPython.itkMatrixD32___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixD32') -> "itkMatrixD32":
        """__sub__(itkMatrixD32 self, itkMatrixD32 matrix) -> itkMatrixD32"""
        return _itkMatrixPython.itkMatrixD32___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixD32') -> "itkMatrixD32 const &":
        """__isub__(itkMatrixD32 self, itkMatrixD32 matrix) -> itkMatrixD32"""
        return _itkMatrixPython.itkMatrixD32___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixD32 self, itkMatrixD22 matrix)
        __imul__(itkMatrixD32 self, vnl_matrixD matrix)
        __imul__(itkMatrixD32 self, double const & value)
        """
        return _itkMatrixPython.itkMatrixD32___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixD32":
        """
        __mul__(itkMatrixD32 self, itkVectorD2 vector) -> itkVectorD3
        __mul__(itkMatrixD32 self, itkPointD2 vector) -> itkPointD3
        __mul__(itkMatrixD32 self, itkCovariantVectorD2 vector) -> itkCovariantVectorD3
        __mul__(itkMatrixD32 self, vnl_vector_fixed< double,2 > const & vector) -> vnl_vector_fixed< double,3 >
        __mul__(itkMatrixD32 self, itkMatrixD22 matrix) -> itkMatrixD32
        __mul__(itkMatrixD32 self, vnl_matrixD matrix) -> vnl_matrixD
        __mul__(itkMatrixD32 self, vnl_vectorD matrix) -> vnl_vectorD
        __mul__(itkMatrixD32 self, double const & value) -> itkMatrixD32
        """
        return _itkMatrixPython.itkMatrixD32___mul__(self, *args)


    def __idiv__(self, value: 'double const &') -> "void":
        """__idiv__(itkMatrixD32 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD32___idiv__(self, value)


    def __div__(self, value: 'double const &') -> "itkMatrixD32":
        """__div__(itkMatrixD32 self, double const & value) -> itkMatrixD32"""
        return _itkMatrixPython.itkMatrixD32___div__(self, value)


    def __call__(self, *args) -> "double const &":
        """
        __call__(itkMatrixD32 self, unsigned int row, unsigned int col) -> double
        __call__(itkMatrixD32 self, unsigned int row, unsigned int col) -> double const &
        """
        return _itkMatrixPython.itkMatrixD32___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixed< double,3,2 > const &":
        """
        __GetVnlMatrix_orig__(itkMatrixD32 self) -> vnl_matrix_fixed< double,3,2 >
        __GetVnlMatrix_orig__(itkMatrixD32 self) -> vnl_matrix_fixed< double,3,2 > const &
        """
        return _itkMatrixPython.itkMatrixD32___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixD32 self)"""
        return _itkMatrixPython.itkMatrixD32_SetIdentity(self)


    def Fill(self, value: 'double const &') -> "void":
        """Fill(itkMatrixD32 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD32_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixD32') -> "bool":
        """__eq__(itkMatrixD32 self, itkMatrixD32 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD32___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixD32') -> "bool":
        """__ne__(itkMatrixD32 self, itkMatrixD32 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD32___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixedD_2_3":
        """GetInverse(itkMatrixD32 self) -> vnl_matrix_fixedD_2_3"""
        return _itkMatrixPython.itkMatrixD32_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixedD_2_3":
        """GetTranspose(itkMatrixD32 self) -> vnl_matrix_fixedD_2_3"""
        return _itkMatrixPython.itkMatrixD32_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixD32 self, vnl_matrixD matrix) -> itkMatrixD32
        __init__(itkMatrixD32 self, vnl_matrix_fixed< double,3,2 > const & matrix) -> itkMatrixD32
        __init__(itkMatrixD32 self) -> itkMatrixD32
        __init__(itkMatrixD32 self, itkMatrixD32 matrix) -> itkMatrixD32
        """
        _itkMatrixPython.itkMatrixD32_swiginit(self, _itkMatrixPython.new_itkMatrixD32(*args))

    def swap(self, other: 'itkMatrixD32') -> "void":
        """swap(itkMatrixD32 self, itkMatrixD32 other)"""
        return _itkMatrixPython.itkMatrixD32_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD32

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixD32.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixD32___add__, None, itkMatrixD32)
itkMatrixD32.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixD32___iadd__, None, itkMatrixD32)
itkMatrixD32.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixD32___sub__, None, itkMatrixD32)
itkMatrixD32.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixD32___isub__, None, itkMatrixD32)
itkMatrixD32.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixD32___imul__, None, itkMatrixD32)
itkMatrixD32.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixD32___mul__, None, itkMatrixD32)
itkMatrixD32.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixD32___idiv__, None, itkMatrixD32)
itkMatrixD32.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixD32___div__, None, itkMatrixD32)
itkMatrixD32.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixD32___call__, None, itkMatrixD32)
itkMatrixD32.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixD32___GetVnlMatrix_orig__, None, itkMatrixD32)
itkMatrixD32.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixD32_SetIdentity, None, itkMatrixD32)
itkMatrixD32.Fill = new_instancemethod(_itkMatrixPython.itkMatrixD32_Fill, None, itkMatrixD32)
itkMatrixD32.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixD32___eq__, None, itkMatrixD32)
itkMatrixD32.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixD32___ne__, None, itkMatrixD32)
itkMatrixD32.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixD32_GetInverse, None, itkMatrixD32)
itkMatrixD32.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixD32_GetTranspose, None, itkMatrixD32)
itkMatrixD32.swap = new_instancemethod(_itkMatrixPython.itkMatrixD32_swap, None, itkMatrixD32)
itkMatrixD32_swigregister = _itkMatrixPython.itkMatrixD32_swigregister
itkMatrixD32_swigregister(itkMatrixD32)

class itkMatrixD33(object):
    """Proxy of C++ itkMatrixD33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixD33') -> "itkMatrixD33":
        """__add__(itkMatrixD33 self, itkMatrixD33 matrix) -> itkMatrixD33"""
        return _itkMatrixPython.itkMatrixD33___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixD33') -> "itkMatrixD33 const &":
        """__iadd__(itkMatrixD33 self, itkMatrixD33 matrix) -> itkMatrixD33"""
        return _itkMatrixPython.itkMatrixD33___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixD33') -> "itkMatrixD33":
        """__sub__(itkMatrixD33 self, itkMatrixD33 matrix) -> itkMatrixD33"""
        return _itkMatrixPython.itkMatrixD33___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixD33') -> "itkMatrixD33 const &":
        """__isub__(itkMatrixD33 self, itkMatrixD33 matrix) -> itkMatrixD33"""
        return _itkMatrixPython.itkMatrixD33___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixD33 self, itkMatrixD33 matrix)
        __imul__(itkMatrixD33 self, vnl_matrixD matrix)
        __imul__(itkMatrixD33 self, double const & value)
        """
        return _itkMatrixPython.itkMatrixD33___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixD33":
        """
        __mul__(itkMatrixD33 self, itkVectorD3 vector) -> itkVectorD3
        __mul__(itkMatrixD33 self, itkPointD3 vector) -> itkPointD3
        __mul__(itkMatrixD33 self, itkCovariantVectorD3 vector) -> itkCovariantVectorD3
        __mul__(itkMatrixD33 self, vnl_vector_fixed< double,3 > const & vector) -> vnl_vector_fixed< double,3 >
        __mul__(itkMatrixD33 self, itkMatrixD33 matrix) -> itkMatrixD33
        __mul__(itkMatrixD33 self, vnl_matrixD matrix) -> vnl_matrixD
        __mul__(itkMatrixD33 self, vnl_vectorD matrix) -> vnl_vectorD
        __mul__(itkMatrixD33 self, double const & value) -> itkMatrixD33
        """
        return _itkMatrixPython.itkMatrixD33___mul__(self, *args)


    def __idiv__(self, value: 'double const &') -> "void":
        """__idiv__(itkMatrixD33 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD33___idiv__(self, value)


    def __div__(self, value: 'double const &') -> "itkMatrixD33":
        """__div__(itkMatrixD33 self, double const & value) -> itkMatrixD33"""
        return _itkMatrixPython.itkMatrixD33___div__(self, value)


    def __call__(self, *args) -> "double const &":
        """
        __call__(itkMatrixD33 self, unsigned int row, unsigned int col) -> double
        __call__(itkMatrixD33 self, unsigned int row, unsigned int col) -> double const &
        """
        return _itkMatrixPython.itkMatrixD33___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixedD_3_3 const &":
        """
        __GetVnlMatrix_orig__(itkMatrixD33 self) -> vnl_matrix_fixedD_3_3
        __GetVnlMatrix_orig__(itkMatrixD33 self) -> vnl_matrix_fixedD_3_3
        """
        return _itkMatrixPython.itkMatrixD33___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixD33 self)"""
        return _itkMatrixPython.itkMatrixD33_SetIdentity(self)


    def Fill(self, value: 'double const &') -> "void":
        """Fill(itkMatrixD33 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD33_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixD33') -> "bool":
        """__eq__(itkMatrixD33 self, itkMatrixD33 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD33___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixD33') -> "bool":
        """__ne__(itkMatrixD33 self, itkMatrixD33 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD33___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixedD_3_3":
        """GetInverse(itkMatrixD33 self) -> vnl_matrix_fixedD_3_3"""
        return _itkMatrixPython.itkMatrixD33_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixedD_3_3":
        """GetTranspose(itkMatrixD33 self) -> vnl_matrix_fixedD_3_3"""
        return _itkMatrixPython.itkMatrixD33_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixD33 self, vnl_matrixD matrix) -> itkMatrixD33
        __init__(itkMatrixD33 self, vnl_matrix_fixedD_3_3 matrix) -> itkMatrixD33
        __init__(itkMatrixD33 self) -> itkMatrixD33
        __init__(itkMatrixD33 self, itkMatrixD33 matrix) -> itkMatrixD33
        """
        _itkMatrixPython.itkMatrixD33_swiginit(self, _itkMatrixPython.new_itkMatrixD33(*args))

    def swap(self, other: 'itkMatrixD33') -> "void":
        """swap(itkMatrixD33 self, itkMatrixD33 other)"""
        return _itkMatrixPython.itkMatrixD33_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD33

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixD33.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixD33___add__, None, itkMatrixD33)
itkMatrixD33.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixD33___iadd__, None, itkMatrixD33)
itkMatrixD33.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixD33___sub__, None, itkMatrixD33)
itkMatrixD33.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixD33___isub__, None, itkMatrixD33)
itkMatrixD33.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixD33___imul__, None, itkMatrixD33)
itkMatrixD33.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixD33___mul__, None, itkMatrixD33)
itkMatrixD33.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixD33___idiv__, None, itkMatrixD33)
itkMatrixD33.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixD33___div__, None, itkMatrixD33)
itkMatrixD33.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixD33___call__, None, itkMatrixD33)
itkMatrixD33.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixD33___GetVnlMatrix_orig__, None, itkMatrixD33)
itkMatrixD33.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixD33_SetIdentity, None, itkMatrixD33)
itkMatrixD33.Fill = new_instancemethod(_itkMatrixPython.itkMatrixD33_Fill, None, itkMatrixD33)
itkMatrixD33.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixD33___eq__, None, itkMatrixD33)
itkMatrixD33.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixD33___ne__, None, itkMatrixD33)
itkMatrixD33.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixD33_GetInverse, None, itkMatrixD33)
itkMatrixD33.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixD33_GetTranspose, None, itkMatrixD33)
itkMatrixD33.swap = new_instancemethod(_itkMatrixPython.itkMatrixD33_swap, None, itkMatrixD33)
itkMatrixD33_swigregister = _itkMatrixPython.itkMatrixD33_swigregister
itkMatrixD33_swigregister(itkMatrixD33)

class itkMatrixD34(object):
    """Proxy of C++ itkMatrixD34 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixD34') -> "itkMatrixD34":
        """__add__(itkMatrixD34 self, itkMatrixD34 matrix) -> itkMatrixD34"""
        return _itkMatrixPython.itkMatrixD34___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixD34') -> "itkMatrixD34 const &":
        """__iadd__(itkMatrixD34 self, itkMatrixD34 matrix) -> itkMatrixD34"""
        return _itkMatrixPython.itkMatrixD34___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixD34') -> "itkMatrixD34":
        """__sub__(itkMatrixD34 self, itkMatrixD34 matrix) -> itkMatrixD34"""
        return _itkMatrixPython.itkMatrixD34___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixD34') -> "itkMatrixD34 const &":
        """__isub__(itkMatrixD34 self, itkMatrixD34 matrix) -> itkMatrixD34"""
        return _itkMatrixPython.itkMatrixD34___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixD34 self, itkMatrixD44 matrix)
        __imul__(itkMatrixD34 self, vnl_matrixD matrix)
        __imul__(itkMatrixD34 self, double const & value)
        """
        return _itkMatrixPython.itkMatrixD34___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixD34":
        """
        __mul__(itkMatrixD34 self, itkVectorD4 vector) -> itkVectorD3
        __mul__(itkMatrixD34 self, itkPointD4 vector) -> itkPointD3
        __mul__(itkMatrixD34 self, itkCovariantVectorD4 vector) -> itkCovariantVectorD3
        __mul__(itkMatrixD34 self, vnl_vector_fixed< double,4 > const & vector) -> vnl_vector_fixed< double,3 >
        __mul__(itkMatrixD34 self, itkMatrixD44 matrix) -> itkMatrixD34
        __mul__(itkMatrixD34 self, vnl_matrixD matrix) -> vnl_matrixD
        __mul__(itkMatrixD34 self, vnl_vectorD matrix) -> vnl_vectorD
        __mul__(itkMatrixD34 self, double const & value) -> itkMatrixD34
        """
        return _itkMatrixPython.itkMatrixD34___mul__(self, *args)


    def __idiv__(self, value: 'double const &') -> "void":
        """__idiv__(itkMatrixD34 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD34___idiv__(self, value)


    def __div__(self, value: 'double const &') -> "itkMatrixD34":
        """__div__(itkMatrixD34 self, double const & value) -> itkMatrixD34"""
        return _itkMatrixPython.itkMatrixD34___div__(self, value)


    def __call__(self, *args) -> "double const &":
        """
        __call__(itkMatrixD34 self, unsigned int row, unsigned int col) -> double
        __call__(itkMatrixD34 self, unsigned int row, unsigned int col) -> double const &
        """
        return _itkMatrixPython.itkMatrixD34___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixedD_3_4 const &":
        """
        __GetVnlMatrix_orig__(itkMatrixD34 self) -> vnl_matrix_fixedD_3_4
        __GetVnlMatrix_orig__(itkMatrixD34 self) -> vnl_matrix_fixedD_3_4
        """
        return _itkMatrixPython.itkMatrixD34___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixD34 self)"""
        return _itkMatrixPython.itkMatrixD34_SetIdentity(self)


    def Fill(self, value: 'double const &') -> "void":
        """Fill(itkMatrixD34 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD34_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixD34') -> "bool":
        """__eq__(itkMatrixD34 self, itkMatrixD34 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD34___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixD34') -> "bool":
        """__ne__(itkMatrixD34 self, itkMatrixD34 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD34___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixedD_4_3":
        """GetInverse(itkMatrixD34 self) -> vnl_matrix_fixedD_4_3"""
        return _itkMatrixPython.itkMatrixD34_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixedD_4_3":
        """GetTranspose(itkMatrixD34 self) -> vnl_matrix_fixedD_4_3"""
        return _itkMatrixPython.itkMatrixD34_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixD34 self, vnl_matrixD matrix) -> itkMatrixD34
        __init__(itkMatrixD34 self, vnl_matrix_fixedD_3_4 matrix) -> itkMatrixD34
        __init__(itkMatrixD34 self) -> itkMatrixD34
        __init__(itkMatrixD34 self, itkMatrixD34 matrix) -> itkMatrixD34
        """
        _itkMatrixPython.itkMatrixD34_swiginit(self, _itkMatrixPython.new_itkMatrixD34(*args))

    def swap(self, other: 'itkMatrixD34') -> "void":
        """swap(itkMatrixD34 self, itkMatrixD34 other)"""
        return _itkMatrixPython.itkMatrixD34_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD34

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixD34.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixD34___add__, None, itkMatrixD34)
itkMatrixD34.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixD34___iadd__, None, itkMatrixD34)
itkMatrixD34.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixD34___sub__, None, itkMatrixD34)
itkMatrixD34.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixD34___isub__, None, itkMatrixD34)
itkMatrixD34.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixD34___imul__, None, itkMatrixD34)
itkMatrixD34.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixD34___mul__, None, itkMatrixD34)
itkMatrixD34.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixD34___idiv__, None, itkMatrixD34)
itkMatrixD34.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixD34___div__, None, itkMatrixD34)
itkMatrixD34.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixD34___call__, None, itkMatrixD34)
itkMatrixD34.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixD34___GetVnlMatrix_orig__, None, itkMatrixD34)
itkMatrixD34.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixD34_SetIdentity, None, itkMatrixD34)
itkMatrixD34.Fill = new_instancemethod(_itkMatrixPython.itkMatrixD34_Fill, None, itkMatrixD34)
itkMatrixD34.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixD34___eq__, None, itkMatrixD34)
itkMatrixD34.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixD34___ne__, None, itkMatrixD34)
itkMatrixD34.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixD34_GetInverse, None, itkMatrixD34)
itkMatrixD34.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixD34_GetTranspose, None, itkMatrixD34)
itkMatrixD34.swap = new_instancemethod(_itkMatrixPython.itkMatrixD34_swap, None, itkMatrixD34)
itkMatrixD34_swigregister = _itkMatrixPython.itkMatrixD34_swigregister
itkMatrixD34_swigregister(itkMatrixD34)

class itkMatrixD42(object):
    """Proxy of C++ itkMatrixD42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixD42') -> "itkMatrixD42":
        """__add__(itkMatrixD42 self, itkMatrixD42 matrix) -> itkMatrixD42"""
        return _itkMatrixPython.itkMatrixD42___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixD42') -> "itkMatrixD42 const &":
        """__iadd__(itkMatrixD42 self, itkMatrixD42 matrix) -> itkMatrixD42"""
        return _itkMatrixPython.itkMatrixD42___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixD42') -> "itkMatrixD42":
        """__sub__(itkMatrixD42 self, itkMatrixD42 matrix) -> itkMatrixD42"""
        return _itkMatrixPython.itkMatrixD42___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixD42') -> "itkMatrixD42 const &":
        """__isub__(itkMatrixD42 self, itkMatrixD42 matrix) -> itkMatrixD42"""
        return _itkMatrixPython.itkMatrixD42___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixD42 self, itkMatrixD22 matrix)
        __imul__(itkMatrixD42 self, vnl_matrixD matrix)
        __imul__(itkMatrixD42 self, double const & value)
        """
        return _itkMatrixPython.itkMatrixD42___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixD42":
        """
        __mul__(itkMatrixD42 self, itkVectorD2 vector) -> itkVectorD4
        __mul__(itkMatrixD42 self, itkPointD2 vector) -> itkPointD4
        __mul__(itkMatrixD42 self, itkCovariantVectorD2 vector) -> itkCovariantVectorD4
        __mul__(itkMatrixD42 self, vnl_vector_fixed< double,2 > const & vector) -> vnl_vector_fixed< double,4 >
        __mul__(itkMatrixD42 self, itkMatrixD22 matrix) -> itkMatrixD42
        __mul__(itkMatrixD42 self, vnl_matrixD matrix) -> vnl_matrixD
        __mul__(itkMatrixD42 self, vnl_vectorD matrix) -> vnl_vectorD
        __mul__(itkMatrixD42 self, double const & value) -> itkMatrixD42
        """
        return _itkMatrixPython.itkMatrixD42___mul__(self, *args)


    def __idiv__(self, value: 'double const &') -> "void":
        """__idiv__(itkMatrixD42 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD42___idiv__(self, value)


    def __div__(self, value: 'double const &') -> "itkMatrixD42":
        """__div__(itkMatrixD42 self, double const & value) -> itkMatrixD42"""
        return _itkMatrixPython.itkMatrixD42___div__(self, value)


    def __call__(self, *args) -> "double const &":
        """
        __call__(itkMatrixD42 self, unsigned int row, unsigned int col) -> double
        __call__(itkMatrixD42 self, unsigned int row, unsigned int col) -> double const &
        """
        return _itkMatrixPython.itkMatrixD42___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixed< double,4,2 > const &":
        """
        __GetVnlMatrix_orig__(itkMatrixD42 self) -> vnl_matrix_fixed< double,4,2 >
        __GetVnlMatrix_orig__(itkMatrixD42 self) -> vnl_matrix_fixed< double,4,2 > const &
        """
        return _itkMatrixPython.itkMatrixD42___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixD42 self)"""
        return _itkMatrixPython.itkMatrixD42_SetIdentity(self)


    def Fill(self, value: 'double const &') -> "void":
        """Fill(itkMatrixD42 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD42_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixD42') -> "bool":
        """__eq__(itkMatrixD42 self, itkMatrixD42 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD42___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixD42') -> "bool":
        """__ne__(itkMatrixD42 self, itkMatrixD42 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD42___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixed< double,2,4 >":
        """GetInverse(itkMatrixD42 self) -> vnl_matrix_fixed< double,2,4 >"""
        return _itkMatrixPython.itkMatrixD42_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixed< double,2,4 >":
        """GetTranspose(itkMatrixD42 self) -> vnl_matrix_fixed< double,2,4 >"""
        return _itkMatrixPython.itkMatrixD42_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixD42 self, vnl_matrixD matrix) -> itkMatrixD42
        __init__(itkMatrixD42 self, vnl_matrix_fixed< double,4,2 > const & matrix) -> itkMatrixD42
        __init__(itkMatrixD42 self) -> itkMatrixD42
        __init__(itkMatrixD42 self, itkMatrixD42 matrix) -> itkMatrixD42
        """
        _itkMatrixPython.itkMatrixD42_swiginit(self, _itkMatrixPython.new_itkMatrixD42(*args))

    def swap(self, other: 'itkMatrixD42') -> "void":
        """swap(itkMatrixD42 self, itkMatrixD42 other)"""
        return _itkMatrixPython.itkMatrixD42_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD42

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixD42.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixD42___add__, None, itkMatrixD42)
itkMatrixD42.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixD42___iadd__, None, itkMatrixD42)
itkMatrixD42.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixD42___sub__, None, itkMatrixD42)
itkMatrixD42.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixD42___isub__, None, itkMatrixD42)
itkMatrixD42.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixD42___imul__, None, itkMatrixD42)
itkMatrixD42.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixD42___mul__, None, itkMatrixD42)
itkMatrixD42.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixD42___idiv__, None, itkMatrixD42)
itkMatrixD42.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixD42___div__, None, itkMatrixD42)
itkMatrixD42.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixD42___call__, None, itkMatrixD42)
itkMatrixD42.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixD42___GetVnlMatrix_orig__, None, itkMatrixD42)
itkMatrixD42.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixD42_SetIdentity, None, itkMatrixD42)
itkMatrixD42.Fill = new_instancemethod(_itkMatrixPython.itkMatrixD42_Fill, None, itkMatrixD42)
itkMatrixD42.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixD42___eq__, None, itkMatrixD42)
itkMatrixD42.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixD42___ne__, None, itkMatrixD42)
itkMatrixD42.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixD42_GetInverse, None, itkMatrixD42)
itkMatrixD42.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixD42_GetTranspose, None, itkMatrixD42)
itkMatrixD42.swap = new_instancemethod(_itkMatrixPython.itkMatrixD42_swap, None, itkMatrixD42)
itkMatrixD42_swigregister = _itkMatrixPython.itkMatrixD42_swigregister
itkMatrixD42_swigregister(itkMatrixD42)

class itkMatrixD43(object):
    """Proxy of C++ itkMatrixD43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixD43') -> "itkMatrixD43":
        """__add__(itkMatrixD43 self, itkMatrixD43 matrix) -> itkMatrixD43"""
        return _itkMatrixPython.itkMatrixD43___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixD43') -> "itkMatrixD43 const &":
        """__iadd__(itkMatrixD43 self, itkMatrixD43 matrix) -> itkMatrixD43"""
        return _itkMatrixPython.itkMatrixD43___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixD43') -> "itkMatrixD43":
        """__sub__(itkMatrixD43 self, itkMatrixD43 matrix) -> itkMatrixD43"""
        return _itkMatrixPython.itkMatrixD43___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixD43') -> "itkMatrixD43 const &":
        """__isub__(itkMatrixD43 self, itkMatrixD43 matrix) -> itkMatrixD43"""
        return _itkMatrixPython.itkMatrixD43___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixD43 self, itkMatrixD33 matrix)
        __imul__(itkMatrixD43 self, vnl_matrixD matrix)
        __imul__(itkMatrixD43 self, double const & value)
        """
        return _itkMatrixPython.itkMatrixD43___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixD43":
        """
        __mul__(itkMatrixD43 self, itkVectorD3 vector) -> itkVectorD4
        __mul__(itkMatrixD43 self, itkPointD3 vector) -> itkPointD4
        __mul__(itkMatrixD43 self, itkCovariantVectorD3 vector) -> itkCovariantVectorD4
        __mul__(itkMatrixD43 self, vnl_vector_fixed< double,3 > const & vector) -> vnl_vector_fixed< double,4 >
        __mul__(itkMatrixD43 self, itkMatrixD33 matrix) -> itkMatrixD43
        __mul__(itkMatrixD43 self, vnl_matrixD matrix) -> vnl_matrixD
        __mul__(itkMatrixD43 self, vnl_vectorD matrix) -> vnl_vectorD
        __mul__(itkMatrixD43 self, double const & value) -> itkMatrixD43
        """
        return _itkMatrixPython.itkMatrixD43___mul__(self, *args)


    def __idiv__(self, value: 'double const &') -> "void":
        """__idiv__(itkMatrixD43 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD43___idiv__(self, value)


    def __div__(self, value: 'double const &') -> "itkMatrixD43":
        """__div__(itkMatrixD43 self, double const & value) -> itkMatrixD43"""
        return _itkMatrixPython.itkMatrixD43___div__(self, value)


    def __call__(self, *args) -> "double const &":
        """
        __call__(itkMatrixD43 self, unsigned int row, unsigned int col) -> double
        __call__(itkMatrixD43 self, unsigned int row, unsigned int col) -> double const &
        """
        return _itkMatrixPython.itkMatrixD43___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixedD_4_3 const &":
        """
        __GetVnlMatrix_orig__(itkMatrixD43 self) -> vnl_matrix_fixedD_4_3
        __GetVnlMatrix_orig__(itkMatrixD43 self) -> vnl_matrix_fixedD_4_3
        """
        return _itkMatrixPython.itkMatrixD43___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixD43 self)"""
        return _itkMatrixPython.itkMatrixD43_SetIdentity(self)


    def Fill(self, value: 'double const &') -> "void":
        """Fill(itkMatrixD43 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD43_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixD43') -> "bool":
        """__eq__(itkMatrixD43 self, itkMatrixD43 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD43___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixD43') -> "bool":
        """__ne__(itkMatrixD43 self, itkMatrixD43 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD43___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixedD_3_4":
        """GetInverse(itkMatrixD43 self) -> vnl_matrix_fixedD_3_4"""
        return _itkMatrixPython.itkMatrixD43_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixedD_3_4":
        """GetTranspose(itkMatrixD43 self) -> vnl_matrix_fixedD_3_4"""
        return _itkMatrixPython.itkMatrixD43_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixD43 self, vnl_matrixD matrix) -> itkMatrixD43
        __init__(itkMatrixD43 self, vnl_matrix_fixedD_4_3 matrix) -> itkMatrixD43
        __init__(itkMatrixD43 self) -> itkMatrixD43
        __init__(itkMatrixD43 self, itkMatrixD43 matrix) -> itkMatrixD43
        """
        _itkMatrixPython.itkMatrixD43_swiginit(self, _itkMatrixPython.new_itkMatrixD43(*args))

    def swap(self, other: 'itkMatrixD43') -> "void":
        """swap(itkMatrixD43 self, itkMatrixD43 other)"""
        return _itkMatrixPython.itkMatrixD43_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD43

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixD43.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixD43___add__, None, itkMatrixD43)
itkMatrixD43.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixD43___iadd__, None, itkMatrixD43)
itkMatrixD43.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixD43___sub__, None, itkMatrixD43)
itkMatrixD43.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixD43___isub__, None, itkMatrixD43)
itkMatrixD43.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixD43___imul__, None, itkMatrixD43)
itkMatrixD43.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixD43___mul__, None, itkMatrixD43)
itkMatrixD43.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixD43___idiv__, None, itkMatrixD43)
itkMatrixD43.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixD43___div__, None, itkMatrixD43)
itkMatrixD43.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixD43___call__, None, itkMatrixD43)
itkMatrixD43.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixD43___GetVnlMatrix_orig__, None, itkMatrixD43)
itkMatrixD43.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixD43_SetIdentity, None, itkMatrixD43)
itkMatrixD43.Fill = new_instancemethod(_itkMatrixPython.itkMatrixD43_Fill, None, itkMatrixD43)
itkMatrixD43.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixD43___eq__, None, itkMatrixD43)
itkMatrixD43.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixD43___ne__, None, itkMatrixD43)
itkMatrixD43.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixD43_GetInverse, None, itkMatrixD43)
itkMatrixD43.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixD43_GetTranspose, None, itkMatrixD43)
itkMatrixD43.swap = new_instancemethod(_itkMatrixPython.itkMatrixD43_swap, None, itkMatrixD43)
itkMatrixD43_swigregister = _itkMatrixPython.itkMatrixD43_swigregister
itkMatrixD43_swigregister(itkMatrixD43)

class itkMatrixD44(object):
    """Proxy of C++ itkMatrixD44 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixD44') -> "itkMatrixD44":
        """__add__(itkMatrixD44 self, itkMatrixD44 matrix) -> itkMatrixD44"""
        return _itkMatrixPython.itkMatrixD44___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixD44') -> "itkMatrixD44 const &":
        """__iadd__(itkMatrixD44 self, itkMatrixD44 matrix) -> itkMatrixD44"""
        return _itkMatrixPython.itkMatrixD44___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixD44') -> "itkMatrixD44":
        """__sub__(itkMatrixD44 self, itkMatrixD44 matrix) -> itkMatrixD44"""
        return _itkMatrixPython.itkMatrixD44___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixD44') -> "itkMatrixD44 const &":
        """__isub__(itkMatrixD44 self, itkMatrixD44 matrix) -> itkMatrixD44"""
        return _itkMatrixPython.itkMatrixD44___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixD44 self, itkMatrixD44 matrix)
        __imul__(itkMatrixD44 self, vnl_matrixD matrix)
        __imul__(itkMatrixD44 self, double const & value)
        """
        return _itkMatrixPython.itkMatrixD44___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixD44":
        """
        __mul__(itkMatrixD44 self, itkVectorD4 vector) -> itkVectorD4
        __mul__(itkMatrixD44 self, itkPointD4 vector) -> itkPointD4
        __mul__(itkMatrixD44 self, itkCovariantVectorD4 vector) -> itkCovariantVectorD4
        __mul__(itkMatrixD44 self, vnl_vector_fixed< double,4 > const & vector) -> vnl_vector_fixed< double,4 >
        __mul__(itkMatrixD44 self, itkMatrixD44 matrix) -> itkMatrixD44
        __mul__(itkMatrixD44 self, vnl_matrixD matrix) -> vnl_matrixD
        __mul__(itkMatrixD44 self, vnl_vectorD matrix) -> vnl_vectorD
        __mul__(itkMatrixD44 self, double const & value) -> itkMatrixD44
        """
        return _itkMatrixPython.itkMatrixD44___mul__(self, *args)


    def __idiv__(self, value: 'double const &') -> "void":
        """__idiv__(itkMatrixD44 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD44___idiv__(self, value)


    def __div__(self, value: 'double const &') -> "itkMatrixD44":
        """__div__(itkMatrixD44 self, double const & value) -> itkMatrixD44"""
        return _itkMatrixPython.itkMatrixD44___div__(self, value)


    def __call__(self, *args) -> "double const &":
        """
        __call__(itkMatrixD44 self, unsigned int row, unsigned int col) -> double
        __call__(itkMatrixD44 self, unsigned int row, unsigned int col) -> double const &
        """
        return _itkMatrixPython.itkMatrixD44___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixedD_4_4 const &":
        """
        __GetVnlMatrix_orig__(itkMatrixD44 self) -> vnl_matrix_fixedD_4_4
        __GetVnlMatrix_orig__(itkMatrixD44 self) -> vnl_matrix_fixedD_4_4
        """
        return _itkMatrixPython.itkMatrixD44___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixD44 self)"""
        return _itkMatrixPython.itkMatrixD44_SetIdentity(self)


    def Fill(self, value: 'double const &') -> "void":
        """Fill(itkMatrixD44 self, double const & value)"""
        return _itkMatrixPython.itkMatrixD44_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixD44') -> "bool":
        """__eq__(itkMatrixD44 self, itkMatrixD44 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD44___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixD44') -> "bool":
        """__ne__(itkMatrixD44 self, itkMatrixD44 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixD44___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixedD_4_4":
        """GetInverse(itkMatrixD44 self) -> vnl_matrix_fixedD_4_4"""
        return _itkMatrixPython.itkMatrixD44_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixedD_4_4":
        """GetTranspose(itkMatrixD44 self) -> vnl_matrix_fixedD_4_4"""
        return _itkMatrixPython.itkMatrixD44_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixD44 self, vnl_matrixD matrix) -> itkMatrixD44
        __init__(itkMatrixD44 self, vnl_matrix_fixedD_4_4 matrix) -> itkMatrixD44
        __init__(itkMatrixD44 self) -> itkMatrixD44
        __init__(itkMatrixD44 self, itkMatrixD44 matrix) -> itkMatrixD44
        """
        _itkMatrixPython.itkMatrixD44_swiginit(self, _itkMatrixPython.new_itkMatrixD44(*args))

    def swap(self, other: 'itkMatrixD44') -> "void":
        """swap(itkMatrixD44 self, itkMatrixD44 other)"""
        return _itkMatrixPython.itkMatrixD44_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD44

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixD44.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixD44___add__, None, itkMatrixD44)
itkMatrixD44.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixD44___iadd__, None, itkMatrixD44)
itkMatrixD44.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixD44___sub__, None, itkMatrixD44)
itkMatrixD44.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixD44___isub__, None, itkMatrixD44)
itkMatrixD44.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixD44___imul__, None, itkMatrixD44)
itkMatrixD44.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixD44___mul__, None, itkMatrixD44)
itkMatrixD44.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixD44___idiv__, None, itkMatrixD44)
itkMatrixD44.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixD44___div__, None, itkMatrixD44)
itkMatrixD44.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixD44___call__, None, itkMatrixD44)
itkMatrixD44.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixD44___GetVnlMatrix_orig__, None, itkMatrixD44)
itkMatrixD44.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixD44_SetIdentity, None, itkMatrixD44)
itkMatrixD44.Fill = new_instancemethod(_itkMatrixPython.itkMatrixD44_Fill, None, itkMatrixD44)
itkMatrixD44.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixD44___eq__, None, itkMatrixD44)
itkMatrixD44.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixD44___ne__, None, itkMatrixD44)
itkMatrixD44.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixD44_GetInverse, None, itkMatrixD44)
itkMatrixD44.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixD44_GetTranspose, None, itkMatrixD44)
itkMatrixD44.swap = new_instancemethod(_itkMatrixPython.itkMatrixD44_swap, None, itkMatrixD44)
itkMatrixD44_swigregister = _itkMatrixPython.itkMatrixD44_swigregister
itkMatrixD44_swigregister(itkMatrixD44)

class itkMatrixF22(object):
    """Proxy of C++ itkMatrixF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixF22') -> "itkMatrixF22":
        """__add__(itkMatrixF22 self, itkMatrixF22 matrix) -> itkMatrixF22"""
        return _itkMatrixPython.itkMatrixF22___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixF22') -> "itkMatrixF22 const &":
        """__iadd__(itkMatrixF22 self, itkMatrixF22 matrix) -> itkMatrixF22"""
        return _itkMatrixPython.itkMatrixF22___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixF22') -> "itkMatrixF22":
        """__sub__(itkMatrixF22 self, itkMatrixF22 matrix) -> itkMatrixF22"""
        return _itkMatrixPython.itkMatrixF22___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixF22') -> "itkMatrixF22 const &":
        """__isub__(itkMatrixF22 self, itkMatrixF22 matrix) -> itkMatrixF22"""
        return _itkMatrixPython.itkMatrixF22___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixF22 self, itkMatrixF22 matrix)
        __imul__(itkMatrixF22 self, vnl_matrixF matrix)
        __imul__(itkMatrixF22 self, float const & value)
        """
        return _itkMatrixPython.itkMatrixF22___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixF22":
        """
        __mul__(itkMatrixF22 self, itkVectorF2 vector) -> itkVectorF2
        __mul__(itkMatrixF22 self, itkPointF2 vector) -> itkPointF2
        __mul__(itkMatrixF22 self, itkCovariantVectorF2 vector) -> itkCovariantVectorF2
        __mul__(itkMatrixF22 self, vnl_vector_fixed< float,2 > const & vector) -> vnl_vector_fixed< float,2 >
        __mul__(itkMatrixF22 self, itkMatrixF22 matrix) -> itkMatrixF22
        __mul__(itkMatrixF22 self, vnl_matrixF matrix) -> vnl_matrixF
        __mul__(itkMatrixF22 self, vnl_vectorF matrix) -> vnl_vectorF
        __mul__(itkMatrixF22 self, float const & value) -> itkMatrixF22
        """
        return _itkMatrixPython.itkMatrixF22___mul__(self, *args)


    def __idiv__(self, value: 'float const &') -> "void":
        """__idiv__(itkMatrixF22 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF22___idiv__(self, value)


    def __div__(self, value: 'float const &') -> "itkMatrixF22":
        """__div__(itkMatrixF22 self, float const & value) -> itkMatrixF22"""
        return _itkMatrixPython.itkMatrixF22___div__(self, value)


    def __call__(self, *args) -> "float const &":
        """
        __call__(itkMatrixF22 self, unsigned int row, unsigned int col) -> float
        __call__(itkMatrixF22 self, unsigned int row, unsigned int col) -> float const &
        """
        return _itkMatrixPython.itkMatrixF22___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixed< float,2,2 > const &":
        """
        __GetVnlMatrix_orig__(itkMatrixF22 self) -> vnl_matrix_fixed< float,2,2 >
        __GetVnlMatrix_orig__(itkMatrixF22 self) -> vnl_matrix_fixed< float,2,2 > const &
        """
        return _itkMatrixPython.itkMatrixF22___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixF22 self)"""
        return _itkMatrixPython.itkMatrixF22_SetIdentity(self)


    def Fill(self, value: 'float const &') -> "void":
        """Fill(itkMatrixF22 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF22_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixF22') -> "bool":
        """__eq__(itkMatrixF22 self, itkMatrixF22 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF22___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixF22') -> "bool":
        """__ne__(itkMatrixF22 self, itkMatrixF22 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF22___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixed< float,2,2 >":
        """GetInverse(itkMatrixF22 self) -> vnl_matrix_fixed< float,2,2 >"""
        return _itkMatrixPython.itkMatrixF22_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixed< float,2,2 >":
        """GetTranspose(itkMatrixF22 self) -> vnl_matrix_fixed< float,2,2 >"""
        return _itkMatrixPython.itkMatrixF22_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixF22 self, vnl_matrixF matrix) -> itkMatrixF22
        __init__(itkMatrixF22 self, vnl_matrix_fixed< float,2,2 > const & matrix) -> itkMatrixF22
        __init__(itkMatrixF22 self) -> itkMatrixF22
        __init__(itkMatrixF22 self, itkMatrixF22 matrix) -> itkMatrixF22
        """
        _itkMatrixPython.itkMatrixF22_swiginit(self, _itkMatrixPython.new_itkMatrixF22(*args))

    def swap(self, other: 'itkMatrixF22') -> "void":
        """swap(itkMatrixF22 self, itkMatrixF22 other)"""
        return _itkMatrixPython.itkMatrixF22_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF22

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixF22.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixF22___add__, None, itkMatrixF22)
itkMatrixF22.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixF22___iadd__, None, itkMatrixF22)
itkMatrixF22.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixF22___sub__, None, itkMatrixF22)
itkMatrixF22.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixF22___isub__, None, itkMatrixF22)
itkMatrixF22.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixF22___imul__, None, itkMatrixF22)
itkMatrixF22.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixF22___mul__, None, itkMatrixF22)
itkMatrixF22.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixF22___idiv__, None, itkMatrixF22)
itkMatrixF22.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixF22___div__, None, itkMatrixF22)
itkMatrixF22.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixF22___call__, None, itkMatrixF22)
itkMatrixF22.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixF22___GetVnlMatrix_orig__, None, itkMatrixF22)
itkMatrixF22.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixF22_SetIdentity, None, itkMatrixF22)
itkMatrixF22.Fill = new_instancemethod(_itkMatrixPython.itkMatrixF22_Fill, None, itkMatrixF22)
itkMatrixF22.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixF22___eq__, None, itkMatrixF22)
itkMatrixF22.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixF22___ne__, None, itkMatrixF22)
itkMatrixF22.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixF22_GetInverse, None, itkMatrixF22)
itkMatrixF22.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixF22_GetTranspose, None, itkMatrixF22)
itkMatrixF22.swap = new_instancemethod(_itkMatrixPython.itkMatrixF22_swap, None, itkMatrixF22)
itkMatrixF22_swigregister = _itkMatrixPython.itkMatrixF22_swigregister
itkMatrixF22_swigregister(itkMatrixF22)

class itkMatrixF23(object):
    """Proxy of C++ itkMatrixF23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixF23') -> "itkMatrixF23":
        """__add__(itkMatrixF23 self, itkMatrixF23 matrix) -> itkMatrixF23"""
        return _itkMatrixPython.itkMatrixF23___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixF23') -> "itkMatrixF23 const &":
        """__iadd__(itkMatrixF23 self, itkMatrixF23 matrix) -> itkMatrixF23"""
        return _itkMatrixPython.itkMatrixF23___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixF23') -> "itkMatrixF23":
        """__sub__(itkMatrixF23 self, itkMatrixF23 matrix) -> itkMatrixF23"""
        return _itkMatrixPython.itkMatrixF23___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixF23') -> "itkMatrixF23 const &":
        """__isub__(itkMatrixF23 self, itkMatrixF23 matrix) -> itkMatrixF23"""
        return _itkMatrixPython.itkMatrixF23___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixF23 self, itkMatrixF33 matrix)
        __imul__(itkMatrixF23 self, vnl_matrixF matrix)
        __imul__(itkMatrixF23 self, float const & value)
        """
        return _itkMatrixPython.itkMatrixF23___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixF23":
        """
        __mul__(itkMatrixF23 self, itkVectorF3 vector) -> itkVectorF2
        __mul__(itkMatrixF23 self, itkPointF3 vector) -> itkPointF2
        __mul__(itkMatrixF23 self, itkCovariantVectorF3 vector) -> itkCovariantVectorF2
        __mul__(itkMatrixF23 self, vnl_vector_fixed< float,3 > const & vector) -> vnl_vector_fixed< float,2 >
        __mul__(itkMatrixF23 self, itkMatrixF33 matrix) -> itkMatrixF23
        __mul__(itkMatrixF23 self, vnl_matrixF matrix) -> vnl_matrixF
        __mul__(itkMatrixF23 self, vnl_vectorF matrix) -> vnl_vectorF
        __mul__(itkMatrixF23 self, float const & value) -> itkMatrixF23
        """
        return _itkMatrixPython.itkMatrixF23___mul__(self, *args)


    def __idiv__(self, value: 'float const &') -> "void":
        """__idiv__(itkMatrixF23 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF23___idiv__(self, value)


    def __div__(self, value: 'float const &') -> "itkMatrixF23":
        """__div__(itkMatrixF23 self, float const & value) -> itkMatrixF23"""
        return _itkMatrixPython.itkMatrixF23___div__(self, value)


    def __call__(self, *args) -> "float const &":
        """
        __call__(itkMatrixF23 self, unsigned int row, unsigned int col) -> float
        __call__(itkMatrixF23 self, unsigned int row, unsigned int col) -> float const &
        """
        return _itkMatrixPython.itkMatrixF23___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixed< float,2,3 > const &":
        """
        __GetVnlMatrix_orig__(itkMatrixF23 self) -> vnl_matrix_fixed< float,2,3 >
        __GetVnlMatrix_orig__(itkMatrixF23 self) -> vnl_matrix_fixed< float,2,3 > const &
        """
        return _itkMatrixPython.itkMatrixF23___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixF23 self)"""
        return _itkMatrixPython.itkMatrixF23_SetIdentity(self)


    def Fill(self, value: 'float const &') -> "void":
        """Fill(itkMatrixF23 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF23_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixF23') -> "bool":
        """__eq__(itkMatrixF23 self, itkMatrixF23 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF23___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixF23') -> "bool":
        """__ne__(itkMatrixF23 self, itkMatrixF23 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF23___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixed< float,3,2 >":
        """GetInverse(itkMatrixF23 self) -> vnl_matrix_fixed< float,3,2 >"""
        return _itkMatrixPython.itkMatrixF23_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixed< float,3,2 >":
        """GetTranspose(itkMatrixF23 self) -> vnl_matrix_fixed< float,3,2 >"""
        return _itkMatrixPython.itkMatrixF23_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixF23 self, vnl_matrixF matrix) -> itkMatrixF23
        __init__(itkMatrixF23 self, vnl_matrix_fixed< float,2,3 > const & matrix) -> itkMatrixF23
        __init__(itkMatrixF23 self) -> itkMatrixF23
        __init__(itkMatrixF23 self, itkMatrixF23 matrix) -> itkMatrixF23
        """
        _itkMatrixPython.itkMatrixF23_swiginit(self, _itkMatrixPython.new_itkMatrixF23(*args))

    def swap(self, other: 'itkMatrixF23') -> "void":
        """swap(itkMatrixF23 self, itkMatrixF23 other)"""
        return _itkMatrixPython.itkMatrixF23_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF23

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixF23.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixF23___add__, None, itkMatrixF23)
itkMatrixF23.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixF23___iadd__, None, itkMatrixF23)
itkMatrixF23.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixF23___sub__, None, itkMatrixF23)
itkMatrixF23.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixF23___isub__, None, itkMatrixF23)
itkMatrixF23.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixF23___imul__, None, itkMatrixF23)
itkMatrixF23.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixF23___mul__, None, itkMatrixF23)
itkMatrixF23.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixF23___idiv__, None, itkMatrixF23)
itkMatrixF23.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixF23___div__, None, itkMatrixF23)
itkMatrixF23.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixF23___call__, None, itkMatrixF23)
itkMatrixF23.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixF23___GetVnlMatrix_orig__, None, itkMatrixF23)
itkMatrixF23.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixF23_SetIdentity, None, itkMatrixF23)
itkMatrixF23.Fill = new_instancemethod(_itkMatrixPython.itkMatrixF23_Fill, None, itkMatrixF23)
itkMatrixF23.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixF23___eq__, None, itkMatrixF23)
itkMatrixF23.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixF23___ne__, None, itkMatrixF23)
itkMatrixF23.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixF23_GetInverse, None, itkMatrixF23)
itkMatrixF23.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixF23_GetTranspose, None, itkMatrixF23)
itkMatrixF23.swap = new_instancemethod(_itkMatrixPython.itkMatrixF23_swap, None, itkMatrixF23)
itkMatrixF23_swigregister = _itkMatrixPython.itkMatrixF23_swigregister
itkMatrixF23_swigregister(itkMatrixF23)

class itkMatrixF24(object):
    """Proxy of C++ itkMatrixF24 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixF24') -> "itkMatrixF24":
        """__add__(itkMatrixF24 self, itkMatrixF24 matrix) -> itkMatrixF24"""
        return _itkMatrixPython.itkMatrixF24___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixF24') -> "itkMatrixF24 const &":
        """__iadd__(itkMatrixF24 self, itkMatrixF24 matrix) -> itkMatrixF24"""
        return _itkMatrixPython.itkMatrixF24___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixF24') -> "itkMatrixF24":
        """__sub__(itkMatrixF24 self, itkMatrixF24 matrix) -> itkMatrixF24"""
        return _itkMatrixPython.itkMatrixF24___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixF24') -> "itkMatrixF24 const &":
        """__isub__(itkMatrixF24 self, itkMatrixF24 matrix) -> itkMatrixF24"""
        return _itkMatrixPython.itkMatrixF24___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixF24 self, itkMatrixF44 matrix)
        __imul__(itkMatrixF24 self, vnl_matrixF matrix)
        __imul__(itkMatrixF24 self, float const & value)
        """
        return _itkMatrixPython.itkMatrixF24___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixF24":
        """
        __mul__(itkMatrixF24 self, itkVectorF4 vector) -> itkVectorF2
        __mul__(itkMatrixF24 self, itkPointF4 vector) -> itkPointF2
        __mul__(itkMatrixF24 self, itkCovariantVectorF4 vector) -> itkCovariantVectorF2
        __mul__(itkMatrixF24 self, vnl_vector_fixed< float,4 > const & vector) -> vnl_vector_fixed< float,2 >
        __mul__(itkMatrixF24 self, itkMatrixF44 matrix) -> itkMatrixF24
        __mul__(itkMatrixF24 self, vnl_matrixF matrix) -> vnl_matrixF
        __mul__(itkMatrixF24 self, vnl_vectorF matrix) -> vnl_vectorF
        __mul__(itkMatrixF24 self, float const & value) -> itkMatrixF24
        """
        return _itkMatrixPython.itkMatrixF24___mul__(self, *args)


    def __idiv__(self, value: 'float const &') -> "void":
        """__idiv__(itkMatrixF24 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF24___idiv__(self, value)


    def __div__(self, value: 'float const &') -> "itkMatrixF24":
        """__div__(itkMatrixF24 self, float const & value) -> itkMatrixF24"""
        return _itkMatrixPython.itkMatrixF24___div__(self, value)


    def __call__(self, *args) -> "float const &":
        """
        __call__(itkMatrixF24 self, unsigned int row, unsigned int col) -> float
        __call__(itkMatrixF24 self, unsigned int row, unsigned int col) -> float const &
        """
        return _itkMatrixPython.itkMatrixF24___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixed< float,2,4 > const &":
        """
        __GetVnlMatrix_orig__(itkMatrixF24 self) -> vnl_matrix_fixed< float,2,4 >
        __GetVnlMatrix_orig__(itkMatrixF24 self) -> vnl_matrix_fixed< float,2,4 > const &
        """
        return _itkMatrixPython.itkMatrixF24___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixF24 self)"""
        return _itkMatrixPython.itkMatrixF24_SetIdentity(self)


    def Fill(self, value: 'float const &') -> "void":
        """Fill(itkMatrixF24 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF24_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixF24') -> "bool":
        """__eq__(itkMatrixF24 self, itkMatrixF24 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF24___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixF24') -> "bool":
        """__ne__(itkMatrixF24 self, itkMatrixF24 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF24___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixed< float,4,2 >":
        """GetInverse(itkMatrixF24 self) -> vnl_matrix_fixed< float,4,2 >"""
        return _itkMatrixPython.itkMatrixF24_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixed< float,4,2 >":
        """GetTranspose(itkMatrixF24 self) -> vnl_matrix_fixed< float,4,2 >"""
        return _itkMatrixPython.itkMatrixF24_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixF24 self, vnl_matrixF matrix) -> itkMatrixF24
        __init__(itkMatrixF24 self, vnl_matrix_fixed< float,2,4 > const & matrix) -> itkMatrixF24
        __init__(itkMatrixF24 self) -> itkMatrixF24
        __init__(itkMatrixF24 self, itkMatrixF24 matrix) -> itkMatrixF24
        """
        _itkMatrixPython.itkMatrixF24_swiginit(self, _itkMatrixPython.new_itkMatrixF24(*args))

    def swap(self, other: 'itkMatrixF24') -> "void":
        """swap(itkMatrixF24 self, itkMatrixF24 other)"""
        return _itkMatrixPython.itkMatrixF24_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF24

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixF24.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixF24___add__, None, itkMatrixF24)
itkMatrixF24.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixF24___iadd__, None, itkMatrixF24)
itkMatrixF24.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixF24___sub__, None, itkMatrixF24)
itkMatrixF24.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixF24___isub__, None, itkMatrixF24)
itkMatrixF24.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixF24___imul__, None, itkMatrixF24)
itkMatrixF24.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixF24___mul__, None, itkMatrixF24)
itkMatrixF24.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixF24___idiv__, None, itkMatrixF24)
itkMatrixF24.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixF24___div__, None, itkMatrixF24)
itkMatrixF24.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixF24___call__, None, itkMatrixF24)
itkMatrixF24.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixF24___GetVnlMatrix_orig__, None, itkMatrixF24)
itkMatrixF24.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixF24_SetIdentity, None, itkMatrixF24)
itkMatrixF24.Fill = new_instancemethod(_itkMatrixPython.itkMatrixF24_Fill, None, itkMatrixF24)
itkMatrixF24.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixF24___eq__, None, itkMatrixF24)
itkMatrixF24.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixF24___ne__, None, itkMatrixF24)
itkMatrixF24.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixF24_GetInverse, None, itkMatrixF24)
itkMatrixF24.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixF24_GetTranspose, None, itkMatrixF24)
itkMatrixF24.swap = new_instancemethod(_itkMatrixPython.itkMatrixF24_swap, None, itkMatrixF24)
itkMatrixF24_swigregister = _itkMatrixPython.itkMatrixF24_swigregister
itkMatrixF24_swigregister(itkMatrixF24)

class itkMatrixF32(object):
    """Proxy of C++ itkMatrixF32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixF32') -> "itkMatrixF32":
        """__add__(itkMatrixF32 self, itkMatrixF32 matrix) -> itkMatrixF32"""
        return _itkMatrixPython.itkMatrixF32___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixF32') -> "itkMatrixF32 const &":
        """__iadd__(itkMatrixF32 self, itkMatrixF32 matrix) -> itkMatrixF32"""
        return _itkMatrixPython.itkMatrixF32___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixF32') -> "itkMatrixF32":
        """__sub__(itkMatrixF32 self, itkMatrixF32 matrix) -> itkMatrixF32"""
        return _itkMatrixPython.itkMatrixF32___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixF32') -> "itkMatrixF32 const &":
        """__isub__(itkMatrixF32 self, itkMatrixF32 matrix) -> itkMatrixF32"""
        return _itkMatrixPython.itkMatrixF32___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixF32 self, itkMatrixF22 matrix)
        __imul__(itkMatrixF32 self, vnl_matrixF matrix)
        __imul__(itkMatrixF32 self, float const & value)
        """
        return _itkMatrixPython.itkMatrixF32___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixF32":
        """
        __mul__(itkMatrixF32 self, itkVectorF2 vector) -> itkVectorF3
        __mul__(itkMatrixF32 self, itkPointF2 vector) -> itkPointF3
        __mul__(itkMatrixF32 self, itkCovariantVectorF2 vector) -> itkCovariantVectorF3
        __mul__(itkMatrixF32 self, vnl_vector_fixed< float,2 > const & vector) -> vnl_vector_fixed< float,3 >
        __mul__(itkMatrixF32 self, itkMatrixF22 matrix) -> itkMatrixF32
        __mul__(itkMatrixF32 self, vnl_matrixF matrix) -> vnl_matrixF
        __mul__(itkMatrixF32 self, vnl_vectorF matrix) -> vnl_vectorF
        __mul__(itkMatrixF32 self, float const & value) -> itkMatrixF32
        """
        return _itkMatrixPython.itkMatrixF32___mul__(self, *args)


    def __idiv__(self, value: 'float const &') -> "void":
        """__idiv__(itkMatrixF32 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF32___idiv__(self, value)


    def __div__(self, value: 'float const &') -> "itkMatrixF32":
        """__div__(itkMatrixF32 self, float const & value) -> itkMatrixF32"""
        return _itkMatrixPython.itkMatrixF32___div__(self, value)


    def __call__(self, *args) -> "float const &":
        """
        __call__(itkMatrixF32 self, unsigned int row, unsigned int col) -> float
        __call__(itkMatrixF32 self, unsigned int row, unsigned int col) -> float const &
        """
        return _itkMatrixPython.itkMatrixF32___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixed< float,3,2 > const &":
        """
        __GetVnlMatrix_orig__(itkMatrixF32 self) -> vnl_matrix_fixed< float,3,2 >
        __GetVnlMatrix_orig__(itkMatrixF32 self) -> vnl_matrix_fixed< float,3,2 > const &
        """
        return _itkMatrixPython.itkMatrixF32___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixF32 self)"""
        return _itkMatrixPython.itkMatrixF32_SetIdentity(self)


    def Fill(self, value: 'float const &') -> "void":
        """Fill(itkMatrixF32 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF32_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixF32') -> "bool":
        """__eq__(itkMatrixF32 self, itkMatrixF32 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF32___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixF32') -> "bool":
        """__ne__(itkMatrixF32 self, itkMatrixF32 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF32___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixed< float,2,3 >":
        """GetInverse(itkMatrixF32 self) -> vnl_matrix_fixed< float,2,3 >"""
        return _itkMatrixPython.itkMatrixF32_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixed< float,2,3 >":
        """GetTranspose(itkMatrixF32 self) -> vnl_matrix_fixed< float,2,3 >"""
        return _itkMatrixPython.itkMatrixF32_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixF32 self, vnl_matrixF matrix) -> itkMatrixF32
        __init__(itkMatrixF32 self, vnl_matrix_fixed< float,3,2 > const & matrix) -> itkMatrixF32
        __init__(itkMatrixF32 self) -> itkMatrixF32
        __init__(itkMatrixF32 self, itkMatrixF32 matrix) -> itkMatrixF32
        """
        _itkMatrixPython.itkMatrixF32_swiginit(self, _itkMatrixPython.new_itkMatrixF32(*args))

    def swap(self, other: 'itkMatrixF32') -> "void":
        """swap(itkMatrixF32 self, itkMatrixF32 other)"""
        return _itkMatrixPython.itkMatrixF32_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF32

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixF32.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixF32___add__, None, itkMatrixF32)
itkMatrixF32.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixF32___iadd__, None, itkMatrixF32)
itkMatrixF32.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixF32___sub__, None, itkMatrixF32)
itkMatrixF32.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixF32___isub__, None, itkMatrixF32)
itkMatrixF32.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixF32___imul__, None, itkMatrixF32)
itkMatrixF32.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixF32___mul__, None, itkMatrixF32)
itkMatrixF32.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixF32___idiv__, None, itkMatrixF32)
itkMatrixF32.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixF32___div__, None, itkMatrixF32)
itkMatrixF32.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixF32___call__, None, itkMatrixF32)
itkMatrixF32.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixF32___GetVnlMatrix_orig__, None, itkMatrixF32)
itkMatrixF32.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixF32_SetIdentity, None, itkMatrixF32)
itkMatrixF32.Fill = new_instancemethod(_itkMatrixPython.itkMatrixF32_Fill, None, itkMatrixF32)
itkMatrixF32.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixF32___eq__, None, itkMatrixF32)
itkMatrixF32.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixF32___ne__, None, itkMatrixF32)
itkMatrixF32.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixF32_GetInverse, None, itkMatrixF32)
itkMatrixF32.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixF32_GetTranspose, None, itkMatrixF32)
itkMatrixF32.swap = new_instancemethod(_itkMatrixPython.itkMatrixF32_swap, None, itkMatrixF32)
itkMatrixF32_swigregister = _itkMatrixPython.itkMatrixF32_swigregister
itkMatrixF32_swigregister(itkMatrixF32)

class itkMatrixF33(object):
    """Proxy of C++ itkMatrixF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixF33') -> "itkMatrixF33":
        """__add__(itkMatrixF33 self, itkMatrixF33 matrix) -> itkMatrixF33"""
        return _itkMatrixPython.itkMatrixF33___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixF33') -> "itkMatrixF33 const &":
        """__iadd__(itkMatrixF33 self, itkMatrixF33 matrix) -> itkMatrixF33"""
        return _itkMatrixPython.itkMatrixF33___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixF33') -> "itkMatrixF33":
        """__sub__(itkMatrixF33 self, itkMatrixF33 matrix) -> itkMatrixF33"""
        return _itkMatrixPython.itkMatrixF33___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixF33') -> "itkMatrixF33 const &":
        """__isub__(itkMatrixF33 self, itkMatrixF33 matrix) -> itkMatrixF33"""
        return _itkMatrixPython.itkMatrixF33___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixF33 self, itkMatrixF33 matrix)
        __imul__(itkMatrixF33 self, vnl_matrixF matrix)
        __imul__(itkMatrixF33 self, float const & value)
        """
        return _itkMatrixPython.itkMatrixF33___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixF33":
        """
        __mul__(itkMatrixF33 self, itkVectorF3 vector) -> itkVectorF3
        __mul__(itkMatrixF33 self, itkPointF3 vector) -> itkPointF3
        __mul__(itkMatrixF33 self, itkCovariantVectorF3 vector) -> itkCovariantVectorF3
        __mul__(itkMatrixF33 self, vnl_vector_fixed< float,3 > const & vector) -> vnl_vector_fixed< float,3 >
        __mul__(itkMatrixF33 self, itkMatrixF33 matrix) -> itkMatrixF33
        __mul__(itkMatrixF33 self, vnl_matrixF matrix) -> vnl_matrixF
        __mul__(itkMatrixF33 self, vnl_vectorF matrix) -> vnl_vectorF
        __mul__(itkMatrixF33 self, float const & value) -> itkMatrixF33
        """
        return _itkMatrixPython.itkMatrixF33___mul__(self, *args)


    def __idiv__(self, value: 'float const &') -> "void":
        """__idiv__(itkMatrixF33 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF33___idiv__(self, value)


    def __div__(self, value: 'float const &') -> "itkMatrixF33":
        """__div__(itkMatrixF33 self, float const & value) -> itkMatrixF33"""
        return _itkMatrixPython.itkMatrixF33___div__(self, value)


    def __call__(self, *args) -> "float const &":
        """
        __call__(itkMatrixF33 self, unsigned int row, unsigned int col) -> float
        __call__(itkMatrixF33 self, unsigned int row, unsigned int col) -> float const &
        """
        return _itkMatrixPython.itkMatrixF33___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixedF_3_3 const &":
        """
        __GetVnlMatrix_orig__(itkMatrixF33 self) -> vnl_matrix_fixedF_3_3
        __GetVnlMatrix_orig__(itkMatrixF33 self) -> vnl_matrix_fixedF_3_3
        """
        return _itkMatrixPython.itkMatrixF33___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixF33 self)"""
        return _itkMatrixPython.itkMatrixF33_SetIdentity(self)


    def Fill(self, value: 'float const &') -> "void":
        """Fill(itkMatrixF33 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF33_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixF33') -> "bool":
        """__eq__(itkMatrixF33 self, itkMatrixF33 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF33___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixF33') -> "bool":
        """__ne__(itkMatrixF33 self, itkMatrixF33 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF33___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixedF_3_3":
        """GetInverse(itkMatrixF33 self) -> vnl_matrix_fixedF_3_3"""
        return _itkMatrixPython.itkMatrixF33_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixedF_3_3":
        """GetTranspose(itkMatrixF33 self) -> vnl_matrix_fixedF_3_3"""
        return _itkMatrixPython.itkMatrixF33_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixF33 self, vnl_matrixF matrix) -> itkMatrixF33
        __init__(itkMatrixF33 self, vnl_matrix_fixedF_3_3 matrix) -> itkMatrixF33
        __init__(itkMatrixF33 self) -> itkMatrixF33
        __init__(itkMatrixF33 self, itkMatrixF33 matrix) -> itkMatrixF33
        """
        _itkMatrixPython.itkMatrixF33_swiginit(self, _itkMatrixPython.new_itkMatrixF33(*args))

    def swap(self, other: 'itkMatrixF33') -> "void":
        """swap(itkMatrixF33 self, itkMatrixF33 other)"""
        return _itkMatrixPython.itkMatrixF33_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF33

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixF33.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixF33___add__, None, itkMatrixF33)
itkMatrixF33.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixF33___iadd__, None, itkMatrixF33)
itkMatrixF33.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixF33___sub__, None, itkMatrixF33)
itkMatrixF33.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixF33___isub__, None, itkMatrixF33)
itkMatrixF33.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixF33___imul__, None, itkMatrixF33)
itkMatrixF33.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixF33___mul__, None, itkMatrixF33)
itkMatrixF33.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixF33___idiv__, None, itkMatrixF33)
itkMatrixF33.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixF33___div__, None, itkMatrixF33)
itkMatrixF33.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixF33___call__, None, itkMatrixF33)
itkMatrixF33.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixF33___GetVnlMatrix_orig__, None, itkMatrixF33)
itkMatrixF33.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixF33_SetIdentity, None, itkMatrixF33)
itkMatrixF33.Fill = new_instancemethod(_itkMatrixPython.itkMatrixF33_Fill, None, itkMatrixF33)
itkMatrixF33.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixF33___eq__, None, itkMatrixF33)
itkMatrixF33.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixF33___ne__, None, itkMatrixF33)
itkMatrixF33.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixF33_GetInverse, None, itkMatrixF33)
itkMatrixF33.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixF33_GetTranspose, None, itkMatrixF33)
itkMatrixF33.swap = new_instancemethod(_itkMatrixPython.itkMatrixF33_swap, None, itkMatrixF33)
itkMatrixF33_swigregister = _itkMatrixPython.itkMatrixF33_swigregister
itkMatrixF33_swigregister(itkMatrixF33)

class itkMatrixF34(object):
    """Proxy of C++ itkMatrixF34 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixF34') -> "itkMatrixF34":
        """__add__(itkMatrixF34 self, itkMatrixF34 matrix) -> itkMatrixF34"""
        return _itkMatrixPython.itkMatrixF34___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixF34') -> "itkMatrixF34 const &":
        """__iadd__(itkMatrixF34 self, itkMatrixF34 matrix) -> itkMatrixF34"""
        return _itkMatrixPython.itkMatrixF34___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixF34') -> "itkMatrixF34":
        """__sub__(itkMatrixF34 self, itkMatrixF34 matrix) -> itkMatrixF34"""
        return _itkMatrixPython.itkMatrixF34___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixF34') -> "itkMatrixF34 const &":
        """__isub__(itkMatrixF34 self, itkMatrixF34 matrix) -> itkMatrixF34"""
        return _itkMatrixPython.itkMatrixF34___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixF34 self, itkMatrixF44 matrix)
        __imul__(itkMatrixF34 self, vnl_matrixF matrix)
        __imul__(itkMatrixF34 self, float const & value)
        """
        return _itkMatrixPython.itkMatrixF34___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixF34":
        """
        __mul__(itkMatrixF34 self, itkVectorF4 vector) -> itkVectorF3
        __mul__(itkMatrixF34 self, itkPointF4 vector) -> itkPointF3
        __mul__(itkMatrixF34 self, itkCovariantVectorF4 vector) -> itkCovariantVectorF3
        __mul__(itkMatrixF34 self, vnl_vector_fixed< float,4 > const & vector) -> vnl_vector_fixed< float,3 >
        __mul__(itkMatrixF34 self, itkMatrixF44 matrix) -> itkMatrixF34
        __mul__(itkMatrixF34 self, vnl_matrixF matrix) -> vnl_matrixF
        __mul__(itkMatrixF34 self, vnl_vectorF matrix) -> vnl_vectorF
        __mul__(itkMatrixF34 self, float const & value) -> itkMatrixF34
        """
        return _itkMatrixPython.itkMatrixF34___mul__(self, *args)


    def __idiv__(self, value: 'float const &') -> "void":
        """__idiv__(itkMatrixF34 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF34___idiv__(self, value)


    def __div__(self, value: 'float const &') -> "itkMatrixF34":
        """__div__(itkMatrixF34 self, float const & value) -> itkMatrixF34"""
        return _itkMatrixPython.itkMatrixF34___div__(self, value)


    def __call__(self, *args) -> "float const &":
        """
        __call__(itkMatrixF34 self, unsigned int row, unsigned int col) -> float
        __call__(itkMatrixF34 self, unsigned int row, unsigned int col) -> float const &
        """
        return _itkMatrixPython.itkMatrixF34___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixed< float,3,4 > const &":
        """
        __GetVnlMatrix_orig__(itkMatrixF34 self) -> vnl_matrix_fixed< float,3,4 >
        __GetVnlMatrix_orig__(itkMatrixF34 self) -> vnl_matrix_fixed< float,3,4 > const &
        """
        return _itkMatrixPython.itkMatrixF34___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixF34 self)"""
        return _itkMatrixPython.itkMatrixF34_SetIdentity(self)


    def Fill(self, value: 'float const &') -> "void":
        """Fill(itkMatrixF34 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF34_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixF34') -> "bool":
        """__eq__(itkMatrixF34 self, itkMatrixF34 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF34___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixF34') -> "bool":
        """__ne__(itkMatrixF34 self, itkMatrixF34 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF34___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixed< float,4,3 >":
        """GetInverse(itkMatrixF34 self) -> vnl_matrix_fixed< float,4,3 >"""
        return _itkMatrixPython.itkMatrixF34_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixed< float,4,3 >":
        """GetTranspose(itkMatrixF34 self) -> vnl_matrix_fixed< float,4,3 >"""
        return _itkMatrixPython.itkMatrixF34_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixF34 self, vnl_matrixF matrix) -> itkMatrixF34
        __init__(itkMatrixF34 self, vnl_matrix_fixed< float,3,4 > const & matrix) -> itkMatrixF34
        __init__(itkMatrixF34 self) -> itkMatrixF34
        __init__(itkMatrixF34 self, itkMatrixF34 matrix) -> itkMatrixF34
        """
        _itkMatrixPython.itkMatrixF34_swiginit(self, _itkMatrixPython.new_itkMatrixF34(*args))

    def swap(self, other: 'itkMatrixF34') -> "void":
        """swap(itkMatrixF34 self, itkMatrixF34 other)"""
        return _itkMatrixPython.itkMatrixF34_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF34

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixF34.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixF34___add__, None, itkMatrixF34)
itkMatrixF34.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixF34___iadd__, None, itkMatrixF34)
itkMatrixF34.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixF34___sub__, None, itkMatrixF34)
itkMatrixF34.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixF34___isub__, None, itkMatrixF34)
itkMatrixF34.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixF34___imul__, None, itkMatrixF34)
itkMatrixF34.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixF34___mul__, None, itkMatrixF34)
itkMatrixF34.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixF34___idiv__, None, itkMatrixF34)
itkMatrixF34.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixF34___div__, None, itkMatrixF34)
itkMatrixF34.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixF34___call__, None, itkMatrixF34)
itkMatrixF34.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixF34___GetVnlMatrix_orig__, None, itkMatrixF34)
itkMatrixF34.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixF34_SetIdentity, None, itkMatrixF34)
itkMatrixF34.Fill = new_instancemethod(_itkMatrixPython.itkMatrixF34_Fill, None, itkMatrixF34)
itkMatrixF34.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixF34___eq__, None, itkMatrixF34)
itkMatrixF34.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixF34___ne__, None, itkMatrixF34)
itkMatrixF34.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixF34_GetInverse, None, itkMatrixF34)
itkMatrixF34.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixF34_GetTranspose, None, itkMatrixF34)
itkMatrixF34.swap = new_instancemethod(_itkMatrixPython.itkMatrixF34_swap, None, itkMatrixF34)
itkMatrixF34_swigregister = _itkMatrixPython.itkMatrixF34_swigregister
itkMatrixF34_swigregister(itkMatrixF34)

class itkMatrixF42(object):
    """Proxy of C++ itkMatrixF42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixF42') -> "itkMatrixF42":
        """__add__(itkMatrixF42 self, itkMatrixF42 matrix) -> itkMatrixF42"""
        return _itkMatrixPython.itkMatrixF42___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixF42') -> "itkMatrixF42 const &":
        """__iadd__(itkMatrixF42 self, itkMatrixF42 matrix) -> itkMatrixF42"""
        return _itkMatrixPython.itkMatrixF42___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixF42') -> "itkMatrixF42":
        """__sub__(itkMatrixF42 self, itkMatrixF42 matrix) -> itkMatrixF42"""
        return _itkMatrixPython.itkMatrixF42___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixF42') -> "itkMatrixF42 const &":
        """__isub__(itkMatrixF42 self, itkMatrixF42 matrix) -> itkMatrixF42"""
        return _itkMatrixPython.itkMatrixF42___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixF42 self, itkMatrixF22 matrix)
        __imul__(itkMatrixF42 self, vnl_matrixF matrix)
        __imul__(itkMatrixF42 self, float const & value)
        """
        return _itkMatrixPython.itkMatrixF42___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixF42":
        """
        __mul__(itkMatrixF42 self, itkVectorF2 vector) -> itkVectorF4
        __mul__(itkMatrixF42 self, itkPointF2 vector) -> itkPointF4
        __mul__(itkMatrixF42 self, itkCovariantVectorF2 vector) -> itkCovariantVectorF4
        __mul__(itkMatrixF42 self, vnl_vector_fixed< float,2 > const & vector) -> vnl_vector_fixed< float,4 >
        __mul__(itkMatrixF42 self, itkMatrixF22 matrix) -> itkMatrixF42
        __mul__(itkMatrixF42 self, vnl_matrixF matrix) -> vnl_matrixF
        __mul__(itkMatrixF42 self, vnl_vectorF matrix) -> vnl_vectorF
        __mul__(itkMatrixF42 self, float const & value) -> itkMatrixF42
        """
        return _itkMatrixPython.itkMatrixF42___mul__(self, *args)


    def __idiv__(self, value: 'float const &') -> "void":
        """__idiv__(itkMatrixF42 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF42___idiv__(self, value)


    def __div__(self, value: 'float const &') -> "itkMatrixF42":
        """__div__(itkMatrixF42 self, float const & value) -> itkMatrixF42"""
        return _itkMatrixPython.itkMatrixF42___div__(self, value)


    def __call__(self, *args) -> "float const &":
        """
        __call__(itkMatrixF42 self, unsigned int row, unsigned int col) -> float
        __call__(itkMatrixF42 self, unsigned int row, unsigned int col) -> float const &
        """
        return _itkMatrixPython.itkMatrixF42___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixed< float,4,2 > const &":
        """
        __GetVnlMatrix_orig__(itkMatrixF42 self) -> vnl_matrix_fixed< float,4,2 >
        __GetVnlMatrix_orig__(itkMatrixF42 self) -> vnl_matrix_fixed< float,4,2 > const &
        """
        return _itkMatrixPython.itkMatrixF42___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixF42 self)"""
        return _itkMatrixPython.itkMatrixF42_SetIdentity(self)


    def Fill(self, value: 'float const &') -> "void":
        """Fill(itkMatrixF42 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF42_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixF42') -> "bool":
        """__eq__(itkMatrixF42 self, itkMatrixF42 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF42___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixF42') -> "bool":
        """__ne__(itkMatrixF42 self, itkMatrixF42 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF42___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixed< float,2,4 >":
        """GetInverse(itkMatrixF42 self) -> vnl_matrix_fixed< float,2,4 >"""
        return _itkMatrixPython.itkMatrixF42_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixed< float,2,4 >":
        """GetTranspose(itkMatrixF42 self) -> vnl_matrix_fixed< float,2,4 >"""
        return _itkMatrixPython.itkMatrixF42_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixF42 self, vnl_matrixF matrix) -> itkMatrixF42
        __init__(itkMatrixF42 self, vnl_matrix_fixed< float,4,2 > const & matrix) -> itkMatrixF42
        __init__(itkMatrixF42 self) -> itkMatrixF42
        __init__(itkMatrixF42 self, itkMatrixF42 matrix) -> itkMatrixF42
        """
        _itkMatrixPython.itkMatrixF42_swiginit(self, _itkMatrixPython.new_itkMatrixF42(*args))

    def swap(self, other: 'itkMatrixF42') -> "void":
        """swap(itkMatrixF42 self, itkMatrixF42 other)"""
        return _itkMatrixPython.itkMatrixF42_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF42

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixF42.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixF42___add__, None, itkMatrixF42)
itkMatrixF42.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixF42___iadd__, None, itkMatrixF42)
itkMatrixF42.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixF42___sub__, None, itkMatrixF42)
itkMatrixF42.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixF42___isub__, None, itkMatrixF42)
itkMatrixF42.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixF42___imul__, None, itkMatrixF42)
itkMatrixF42.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixF42___mul__, None, itkMatrixF42)
itkMatrixF42.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixF42___idiv__, None, itkMatrixF42)
itkMatrixF42.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixF42___div__, None, itkMatrixF42)
itkMatrixF42.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixF42___call__, None, itkMatrixF42)
itkMatrixF42.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixF42___GetVnlMatrix_orig__, None, itkMatrixF42)
itkMatrixF42.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixF42_SetIdentity, None, itkMatrixF42)
itkMatrixF42.Fill = new_instancemethod(_itkMatrixPython.itkMatrixF42_Fill, None, itkMatrixF42)
itkMatrixF42.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixF42___eq__, None, itkMatrixF42)
itkMatrixF42.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixF42___ne__, None, itkMatrixF42)
itkMatrixF42.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixF42_GetInverse, None, itkMatrixF42)
itkMatrixF42.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixF42_GetTranspose, None, itkMatrixF42)
itkMatrixF42.swap = new_instancemethod(_itkMatrixPython.itkMatrixF42_swap, None, itkMatrixF42)
itkMatrixF42_swigregister = _itkMatrixPython.itkMatrixF42_swigregister
itkMatrixF42_swigregister(itkMatrixF42)

class itkMatrixF43(object):
    """Proxy of C++ itkMatrixF43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixF43') -> "itkMatrixF43":
        """__add__(itkMatrixF43 self, itkMatrixF43 matrix) -> itkMatrixF43"""
        return _itkMatrixPython.itkMatrixF43___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixF43') -> "itkMatrixF43 const &":
        """__iadd__(itkMatrixF43 self, itkMatrixF43 matrix) -> itkMatrixF43"""
        return _itkMatrixPython.itkMatrixF43___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixF43') -> "itkMatrixF43":
        """__sub__(itkMatrixF43 self, itkMatrixF43 matrix) -> itkMatrixF43"""
        return _itkMatrixPython.itkMatrixF43___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixF43') -> "itkMatrixF43 const &":
        """__isub__(itkMatrixF43 self, itkMatrixF43 matrix) -> itkMatrixF43"""
        return _itkMatrixPython.itkMatrixF43___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixF43 self, itkMatrixF33 matrix)
        __imul__(itkMatrixF43 self, vnl_matrixF matrix)
        __imul__(itkMatrixF43 self, float const & value)
        """
        return _itkMatrixPython.itkMatrixF43___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixF43":
        """
        __mul__(itkMatrixF43 self, itkVectorF3 vector) -> itkVectorF4
        __mul__(itkMatrixF43 self, itkPointF3 vector) -> itkPointF4
        __mul__(itkMatrixF43 self, itkCovariantVectorF3 vector) -> itkCovariantVectorF4
        __mul__(itkMatrixF43 self, vnl_vector_fixed< float,3 > const & vector) -> vnl_vector_fixed< float,4 >
        __mul__(itkMatrixF43 self, itkMatrixF33 matrix) -> itkMatrixF43
        __mul__(itkMatrixF43 self, vnl_matrixF matrix) -> vnl_matrixF
        __mul__(itkMatrixF43 self, vnl_vectorF matrix) -> vnl_vectorF
        __mul__(itkMatrixF43 self, float const & value) -> itkMatrixF43
        """
        return _itkMatrixPython.itkMatrixF43___mul__(self, *args)


    def __idiv__(self, value: 'float const &') -> "void":
        """__idiv__(itkMatrixF43 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF43___idiv__(self, value)


    def __div__(self, value: 'float const &') -> "itkMatrixF43":
        """__div__(itkMatrixF43 self, float const & value) -> itkMatrixF43"""
        return _itkMatrixPython.itkMatrixF43___div__(self, value)


    def __call__(self, *args) -> "float const &":
        """
        __call__(itkMatrixF43 self, unsigned int row, unsigned int col) -> float
        __call__(itkMatrixF43 self, unsigned int row, unsigned int col) -> float const &
        """
        return _itkMatrixPython.itkMatrixF43___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixed< float,4,3 > const &":
        """
        __GetVnlMatrix_orig__(itkMatrixF43 self) -> vnl_matrix_fixed< float,4,3 >
        __GetVnlMatrix_orig__(itkMatrixF43 self) -> vnl_matrix_fixed< float,4,3 > const &
        """
        return _itkMatrixPython.itkMatrixF43___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixF43 self)"""
        return _itkMatrixPython.itkMatrixF43_SetIdentity(self)


    def Fill(self, value: 'float const &') -> "void":
        """Fill(itkMatrixF43 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF43_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixF43') -> "bool":
        """__eq__(itkMatrixF43 self, itkMatrixF43 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF43___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixF43') -> "bool":
        """__ne__(itkMatrixF43 self, itkMatrixF43 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF43___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixed< float,3,4 >":
        """GetInverse(itkMatrixF43 self) -> vnl_matrix_fixed< float,3,4 >"""
        return _itkMatrixPython.itkMatrixF43_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixed< float,3,4 >":
        """GetTranspose(itkMatrixF43 self) -> vnl_matrix_fixed< float,3,4 >"""
        return _itkMatrixPython.itkMatrixF43_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixF43 self, vnl_matrixF matrix) -> itkMatrixF43
        __init__(itkMatrixF43 self, vnl_matrix_fixed< float,4,3 > const & matrix) -> itkMatrixF43
        __init__(itkMatrixF43 self) -> itkMatrixF43
        __init__(itkMatrixF43 self, itkMatrixF43 matrix) -> itkMatrixF43
        """
        _itkMatrixPython.itkMatrixF43_swiginit(self, _itkMatrixPython.new_itkMatrixF43(*args))

    def swap(self, other: 'itkMatrixF43') -> "void":
        """swap(itkMatrixF43 self, itkMatrixF43 other)"""
        return _itkMatrixPython.itkMatrixF43_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF43

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixF43.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixF43___add__, None, itkMatrixF43)
itkMatrixF43.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixF43___iadd__, None, itkMatrixF43)
itkMatrixF43.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixF43___sub__, None, itkMatrixF43)
itkMatrixF43.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixF43___isub__, None, itkMatrixF43)
itkMatrixF43.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixF43___imul__, None, itkMatrixF43)
itkMatrixF43.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixF43___mul__, None, itkMatrixF43)
itkMatrixF43.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixF43___idiv__, None, itkMatrixF43)
itkMatrixF43.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixF43___div__, None, itkMatrixF43)
itkMatrixF43.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixF43___call__, None, itkMatrixF43)
itkMatrixF43.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixF43___GetVnlMatrix_orig__, None, itkMatrixF43)
itkMatrixF43.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixF43_SetIdentity, None, itkMatrixF43)
itkMatrixF43.Fill = new_instancemethod(_itkMatrixPython.itkMatrixF43_Fill, None, itkMatrixF43)
itkMatrixF43.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixF43___eq__, None, itkMatrixF43)
itkMatrixF43.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixF43___ne__, None, itkMatrixF43)
itkMatrixF43.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixF43_GetInverse, None, itkMatrixF43)
itkMatrixF43.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixF43_GetTranspose, None, itkMatrixF43)
itkMatrixF43.swap = new_instancemethod(_itkMatrixPython.itkMatrixF43_swap, None, itkMatrixF43)
itkMatrixF43_swigregister = _itkMatrixPython.itkMatrixF43_swigregister
itkMatrixF43_swigregister(itkMatrixF43)

class itkMatrixF44(object):
    """Proxy of C++ itkMatrixF44 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixF44') -> "itkMatrixF44":
        """__add__(itkMatrixF44 self, itkMatrixF44 matrix) -> itkMatrixF44"""
        return _itkMatrixPython.itkMatrixF44___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixF44') -> "itkMatrixF44 const &":
        """__iadd__(itkMatrixF44 self, itkMatrixF44 matrix) -> itkMatrixF44"""
        return _itkMatrixPython.itkMatrixF44___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixF44') -> "itkMatrixF44":
        """__sub__(itkMatrixF44 self, itkMatrixF44 matrix) -> itkMatrixF44"""
        return _itkMatrixPython.itkMatrixF44___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixF44') -> "itkMatrixF44 const &":
        """__isub__(itkMatrixF44 self, itkMatrixF44 matrix) -> itkMatrixF44"""
        return _itkMatrixPython.itkMatrixF44___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixF44 self, itkMatrixF44 matrix)
        __imul__(itkMatrixF44 self, vnl_matrixF matrix)
        __imul__(itkMatrixF44 self, float const & value)
        """
        return _itkMatrixPython.itkMatrixF44___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixF44":
        """
        __mul__(itkMatrixF44 self, itkVectorF4 vector) -> itkVectorF4
        __mul__(itkMatrixF44 self, itkPointF4 vector) -> itkPointF4
        __mul__(itkMatrixF44 self, itkCovariantVectorF4 vector) -> itkCovariantVectorF4
        __mul__(itkMatrixF44 self, vnl_vector_fixed< float,4 > const & vector) -> vnl_vector_fixed< float,4 >
        __mul__(itkMatrixF44 self, itkMatrixF44 matrix) -> itkMatrixF44
        __mul__(itkMatrixF44 self, vnl_matrixF matrix) -> vnl_matrixF
        __mul__(itkMatrixF44 self, vnl_vectorF matrix) -> vnl_vectorF
        __mul__(itkMatrixF44 self, float const & value) -> itkMatrixF44
        """
        return _itkMatrixPython.itkMatrixF44___mul__(self, *args)


    def __idiv__(self, value: 'float const &') -> "void":
        """__idiv__(itkMatrixF44 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF44___idiv__(self, value)


    def __div__(self, value: 'float const &') -> "itkMatrixF44":
        """__div__(itkMatrixF44 self, float const & value) -> itkMatrixF44"""
        return _itkMatrixPython.itkMatrixF44___div__(self, value)


    def __call__(self, *args) -> "float const &":
        """
        __call__(itkMatrixF44 self, unsigned int row, unsigned int col) -> float
        __call__(itkMatrixF44 self, unsigned int row, unsigned int col) -> float const &
        """
        return _itkMatrixPython.itkMatrixF44___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixed< float,4,4 > const &":
        """
        __GetVnlMatrix_orig__(itkMatrixF44 self) -> vnl_matrix_fixed< float,4,4 >
        __GetVnlMatrix_orig__(itkMatrixF44 self) -> vnl_matrix_fixed< float,4,4 > const &
        """
        return _itkMatrixPython.itkMatrixF44___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixF44 self)"""
        return _itkMatrixPython.itkMatrixF44_SetIdentity(self)


    def Fill(self, value: 'float const &') -> "void":
        """Fill(itkMatrixF44 self, float const & value)"""
        return _itkMatrixPython.itkMatrixF44_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixF44') -> "bool":
        """__eq__(itkMatrixF44 self, itkMatrixF44 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF44___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixF44') -> "bool":
        """__ne__(itkMatrixF44 self, itkMatrixF44 matrix) -> bool"""
        return _itkMatrixPython.itkMatrixF44___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixed< float,4,4 >":
        """GetInverse(itkMatrixF44 self) -> vnl_matrix_fixed< float,4,4 >"""
        return _itkMatrixPython.itkMatrixF44_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixed< float,4,4 >":
        """GetTranspose(itkMatrixF44 self) -> vnl_matrix_fixed< float,4,4 >"""
        return _itkMatrixPython.itkMatrixF44_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixF44 self, vnl_matrixF matrix) -> itkMatrixF44
        __init__(itkMatrixF44 self, vnl_matrix_fixed< float,4,4 > const & matrix) -> itkMatrixF44
        __init__(itkMatrixF44 self) -> itkMatrixF44
        __init__(itkMatrixF44 self, itkMatrixF44 matrix) -> itkMatrixF44
        """
        _itkMatrixPython.itkMatrixF44_swiginit(self, _itkMatrixPython.new_itkMatrixF44(*args))

    def swap(self, other: 'itkMatrixF44') -> "void":
        """swap(itkMatrixF44 self, itkMatrixF44 other)"""
        return _itkMatrixPython.itkMatrixF44_swap(self, other)

    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF44

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixF44.__add__ = new_instancemethod(_itkMatrixPython.itkMatrixF44___add__, None, itkMatrixF44)
itkMatrixF44.__iadd__ = new_instancemethod(_itkMatrixPython.itkMatrixF44___iadd__, None, itkMatrixF44)
itkMatrixF44.__sub__ = new_instancemethod(_itkMatrixPython.itkMatrixF44___sub__, None, itkMatrixF44)
itkMatrixF44.__isub__ = new_instancemethod(_itkMatrixPython.itkMatrixF44___isub__, None, itkMatrixF44)
itkMatrixF44.__imul__ = new_instancemethod(_itkMatrixPython.itkMatrixF44___imul__, None, itkMatrixF44)
itkMatrixF44.__mul__ = new_instancemethod(_itkMatrixPython.itkMatrixF44___mul__, None, itkMatrixF44)
itkMatrixF44.__idiv__ = new_instancemethod(_itkMatrixPython.itkMatrixF44___idiv__, None, itkMatrixF44)
itkMatrixF44.__div__ = new_instancemethod(_itkMatrixPython.itkMatrixF44___div__, None, itkMatrixF44)
itkMatrixF44.__call__ = new_instancemethod(_itkMatrixPython.itkMatrixF44___call__, None, itkMatrixF44)
itkMatrixF44.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixPython.itkMatrixF44___GetVnlMatrix_orig__, None, itkMatrixF44)
itkMatrixF44.SetIdentity = new_instancemethod(_itkMatrixPython.itkMatrixF44_SetIdentity, None, itkMatrixF44)
itkMatrixF44.Fill = new_instancemethod(_itkMatrixPython.itkMatrixF44_Fill, None, itkMatrixF44)
itkMatrixF44.__eq__ = new_instancemethod(_itkMatrixPython.itkMatrixF44___eq__, None, itkMatrixF44)
itkMatrixF44.__ne__ = new_instancemethod(_itkMatrixPython.itkMatrixF44___ne__, None, itkMatrixF44)
itkMatrixF44.GetInverse = new_instancemethod(_itkMatrixPython.itkMatrixF44_GetInverse, None, itkMatrixF44)
itkMatrixF44.GetTranspose = new_instancemethod(_itkMatrixPython.itkMatrixF44_GetTranspose, None, itkMatrixF44)
itkMatrixF44.swap = new_instancemethod(_itkMatrixPython.itkMatrixF44_swap, None, itkMatrixF44)
itkMatrixF44_swigregister = _itkMatrixPython.itkMatrixF44_swigregister
itkMatrixF44_swigregister(itkMatrixF44)



