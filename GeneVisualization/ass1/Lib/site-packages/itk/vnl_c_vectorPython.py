# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _vnl_c_vectorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vnl_c_vectorPython', [dirname(__file__)])
        except ImportError:
            import _vnl_c_vectorPython
            return _vnl_c_vectorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_vnl_c_vectorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vnl_c_vectorPython = swig_import_helper()
    del swig_import_helper
else:
    import _vnl_c_vectorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import stdcomplexPython
import pyBasePython
class vnl_c_vectorCF(object):
    """Proxy of C++ vnl_c_vectorCF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def sum(v: 'stdcomplexF', n: 'unsigned int') -> "stdcomplexF":
        """sum(stdcomplexF v, unsigned int n) -> stdcomplexF"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_sum(v, n)

    sum = staticmethod(sum)

    def squared_magnitude(p: 'stdcomplexF', n: 'unsigned int') -> "float":
        """squared_magnitude(stdcomplexF p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_squared_magnitude(p, n)

    squared_magnitude = staticmethod(squared_magnitude)

    def normalize(arg0: 'stdcomplexF', n: 'unsigned int') -> "void":
        """normalize(stdcomplexF arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_normalize(arg0, n)

    normalize = staticmethod(normalize)

    def copy(x: 'stdcomplexF', y: 'stdcomplexF', arg2: 'unsigned int') -> "void":
        """copy(stdcomplexF x, stdcomplexF y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_copy(x, y, arg2)

    copy = staticmethod(copy)

    def scale(x: 'stdcomplexF', y: 'stdcomplexF', arg2: 'unsigned int', arg3: 'stdcomplexF') -> "void":
        """scale(stdcomplexF x, stdcomplexF y, unsigned int arg2, stdcomplexF arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_scale(x, y, arg2, arg3)

    scale = staticmethod(scale)

    def add(*args) -> "void":
        """
        add(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
        add(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorCF_add(*args)

    add = staticmethod(add)

    def subtract(*args) -> "void":
        """
        subtract(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
        subtract(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorCF_subtract(*args)

    subtract = staticmethod(subtract)

    def multiply(*args) -> "void":
        """
        multiply(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
        multiply(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorCF_multiply(*args)

    multiply = staticmethod(multiply)

    def divide(*args) -> "void":
        """
        divide(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
        divide(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorCF_divide(*args)

    divide = staticmethod(divide)

    def negate(x: 'stdcomplexF', y: 'stdcomplexF', arg2: 'unsigned int') -> "void":
        """negate(stdcomplexF x, stdcomplexF y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_negate(x, y, arg2)

    negate = staticmethod(negate)

    def invert(x: 'stdcomplexF', y: 'stdcomplexF', arg2: 'unsigned int') -> "void":
        """invert(stdcomplexF x, stdcomplexF y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_invert(x, y, arg2)

    invert = staticmethod(invert)

    def saxpy(a: 'stdcomplexF', x: 'stdcomplexF', y: 'stdcomplexF', arg3: 'unsigned int') -> "void":
        """saxpy(stdcomplexF a, stdcomplexF x, stdcomplexF y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_saxpy(a, x, y, arg3)

    saxpy = staticmethod(saxpy)

    def fill(x: 'stdcomplexF', arg1: 'unsigned int', v: 'stdcomplexF') -> "void":
        """fill(stdcomplexF x, unsigned int arg1, stdcomplexF v)"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_fill(x, arg1, v)

    fill = staticmethod(fill)

    def reverse(x: 'stdcomplexF', arg1: 'unsigned int') -> "void":
        """reverse(stdcomplexF x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_reverse(x, arg1)

    reverse = staticmethod(reverse)

    def dot_product(arg0: 'stdcomplexF', arg1: 'stdcomplexF', arg2: 'unsigned int') -> "stdcomplexF":
        """dot_product(stdcomplexF arg0, stdcomplexF arg1, unsigned int arg2) -> stdcomplexF"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_dot_product(arg0, arg1, arg2)

    dot_product = staticmethod(dot_product)

    def inner_product(arg0: 'stdcomplexF', arg1: 'stdcomplexF', arg2: 'unsigned int') -> "stdcomplexF":
        """inner_product(stdcomplexF arg0, stdcomplexF arg1, unsigned int arg2) -> stdcomplexF"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_inner_product(arg0, arg1, arg2)

    inner_product = staticmethod(inner_product)

    def conjugate(arg0: 'stdcomplexF', arg1: 'stdcomplexF', arg2: 'unsigned int') -> "void":
        """conjugate(stdcomplexF arg0, stdcomplexF arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_conjugate(arg0, arg1, arg2)

    conjugate = staticmethod(conjugate)

    def max_value(arg0: 'stdcomplexF', arg1: 'unsigned int') -> "stdcomplexF":
        """max_value(stdcomplexF arg0, unsigned int arg1) -> stdcomplexF"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_max_value(arg0, arg1)

    max_value = staticmethod(max_value)

    def min_value(arg0: 'stdcomplexF', arg1: 'unsigned int') -> "stdcomplexF":
        """min_value(stdcomplexF arg0, unsigned int arg1) -> stdcomplexF"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_min_value(arg0, arg1)

    min_value = staticmethod(min_value)

    def arg_max(arg0: 'stdcomplexF', arg1: 'unsigned int') -> "unsigned int":
        """arg_max(stdcomplexF arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_arg_max(arg0, arg1)

    arg_max = staticmethod(arg_max)

    def arg_min(arg0: 'stdcomplexF', arg1: 'unsigned int') -> "unsigned int":
        """arg_min(stdcomplexF arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_arg_min(arg0, arg1)

    arg_min = staticmethod(arg_min)

    def mean(p: 'stdcomplexF', n: 'unsigned int') -> "stdcomplexF":
        """mean(stdcomplexF p, unsigned int n) -> stdcomplexF"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_mean(p, n)

    mean = staticmethod(mean)

    def std(p: 'stdcomplexF', n: 'unsigned int') -> "stdcomplexF":
        """std(stdcomplexF p, unsigned int n) -> stdcomplexF"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_std(p, n)

    std = staticmethod(std)

    def sum_sq_diff_means(v: 'stdcomplexF', n: 'unsigned int') -> "stdcomplexF":
        """sum_sq_diff_means(stdcomplexF v, unsigned int n) -> stdcomplexF"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_sum_sq_diff_means(v, n)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)

    def one_norm(p: 'stdcomplexF', n: 'unsigned int') -> "float":
        """one_norm(stdcomplexF p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_one_norm(p, n)

    one_norm = staticmethod(one_norm)

    def two_norm(p: 'stdcomplexF', n: 'unsigned int') -> "float":
        """two_norm(stdcomplexF p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_two_norm(p, n)

    two_norm = staticmethod(two_norm)

    def inf_norm(p: 'stdcomplexF', n: 'unsigned int') -> "float":
        """inf_norm(stdcomplexF p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_inf_norm(p, n)

    inf_norm = staticmethod(inf_norm)

    def two_nrm2(p: 'stdcomplexF', n: 'unsigned int') -> "float":
        """two_nrm2(stdcomplexF p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_two_nrm2(p, n)

    two_nrm2 = staticmethod(two_nrm2)

    def rms_norm(p: 'stdcomplexF', n: 'unsigned int') -> "float":
        """rms_norm(stdcomplexF p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_rms_norm(p, n)

    rms_norm = staticmethod(rms_norm)

    def euclid_dist_sq(arg0: 'stdcomplexF', arg1: 'stdcomplexF', arg2: 'unsigned int') -> "stdcomplexF":
        """euclid_dist_sq(stdcomplexF arg0, stdcomplexF arg1, unsigned int arg2) -> stdcomplexF"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_euclid_dist_sq(arg0, arg1, arg2)

    euclid_dist_sq = staticmethod(euclid_dist_sq)

    def allocate_Tptr(n: 'unsigned long long const') -> "stdcomplexF **":
        """allocate_Tptr(unsigned long long const n) -> stdcomplexF **"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_allocate_Tptr(n)

    allocate_Tptr = staticmethod(allocate_Tptr)

    def allocate_T(n: 'unsigned long long const') -> "stdcomplexF *":
        """allocate_T(unsigned long long const n) -> stdcomplexF"""
        return _vnl_c_vectorPython.vnl_c_vectorCF_allocate_T(n)

    allocate_T = staticmethod(allocate_T)

    def deallocate(*args) -> "void":
        """
        deallocate(stdcomplexF ** arg0, unsigned long long const n_when_allocated)
        deallocate(stdcomplexF arg0, unsigned long long const n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorCF_deallocate(*args)

    deallocate = staticmethod(deallocate)

    def __init__(self, *args):
        """
        __init__(vnl_c_vectorCF self) -> vnl_c_vectorCF
        __init__(vnl_c_vectorCF self, vnl_c_vectorCF arg0) -> vnl_c_vectorCF
        """
        _vnl_c_vectorPython.vnl_c_vectorCF_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorCF(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorCF
vnl_c_vectorCF_swigregister = _vnl_c_vectorPython.vnl_c_vectorCF_swigregister
vnl_c_vectorCF_swigregister(vnl_c_vectorCF)

def vnl_c_vectorCF_sum(v: 'stdcomplexF', n: 'unsigned int') -> "stdcomplexF":
    """vnl_c_vectorCF_sum(stdcomplexF v, unsigned int n) -> stdcomplexF"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_sum(v, n)

def vnl_c_vectorCF_squared_magnitude(p: 'stdcomplexF', n: 'unsigned int') -> "float":
    """vnl_c_vectorCF_squared_magnitude(stdcomplexF p, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_squared_magnitude(p, n)

def vnl_c_vectorCF_normalize(arg0: 'stdcomplexF', n: 'unsigned int') -> "void":
    """vnl_c_vectorCF_normalize(stdcomplexF arg0, unsigned int n)"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_normalize(arg0, n)

def vnl_c_vectorCF_copy(x: 'stdcomplexF', y: 'stdcomplexF', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorCF_copy(stdcomplexF x, stdcomplexF y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_copy(x, y, arg2)

def vnl_c_vectorCF_scale(x: 'stdcomplexF', y: 'stdcomplexF', arg2: 'unsigned int', arg3: 'stdcomplexF') -> "void":
    """vnl_c_vectorCF_scale(stdcomplexF x, stdcomplexF y, unsigned int arg2, stdcomplexF arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_scale(x, y, arg2, arg3)

def vnl_c_vectorCF_add(*args) -> "void":
    """
    add(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
    vnl_c_vectorCF_add(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorCF_add(*args)

def vnl_c_vectorCF_subtract(*args) -> "void":
    """
    subtract(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
    vnl_c_vectorCF_subtract(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorCF_subtract(*args)

def vnl_c_vectorCF_multiply(*args) -> "void":
    """
    multiply(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
    vnl_c_vectorCF_multiply(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorCF_multiply(*args)

def vnl_c_vectorCF_divide(*args) -> "void":
    """
    divide(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
    vnl_c_vectorCF_divide(stdcomplexF x, stdcomplexF y, stdcomplexF z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorCF_divide(*args)

def vnl_c_vectorCF_negate(x: 'stdcomplexF', y: 'stdcomplexF', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorCF_negate(stdcomplexF x, stdcomplexF y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_negate(x, y, arg2)

def vnl_c_vectorCF_invert(x: 'stdcomplexF', y: 'stdcomplexF', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorCF_invert(stdcomplexF x, stdcomplexF y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_invert(x, y, arg2)

def vnl_c_vectorCF_saxpy(a: 'stdcomplexF', x: 'stdcomplexF', y: 'stdcomplexF', arg3: 'unsigned int') -> "void":
    """vnl_c_vectorCF_saxpy(stdcomplexF a, stdcomplexF x, stdcomplexF y, unsigned int arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_saxpy(a, x, y, arg3)

def vnl_c_vectorCF_fill(x: 'stdcomplexF', arg1: 'unsigned int', v: 'stdcomplexF') -> "void":
    """vnl_c_vectorCF_fill(stdcomplexF x, unsigned int arg1, stdcomplexF v)"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_fill(x, arg1, v)

def vnl_c_vectorCF_reverse(x: 'stdcomplexF', arg1: 'unsigned int') -> "void":
    """vnl_c_vectorCF_reverse(stdcomplexF x, unsigned int arg1)"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_reverse(x, arg1)

def vnl_c_vectorCF_dot_product(arg0: 'stdcomplexF', arg1: 'stdcomplexF', arg2: 'unsigned int') -> "stdcomplexF":
    """vnl_c_vectorCF_dot_product(stdcomplexF arg0, stdcomplexF arg1, unsigned int arg2) -> stdcomplexF"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_dot_product(arg0, arg1, arg2)

def vnl_c_vectorCF_inner_product(arg0: 'stdcomplexF', arg1: 'stdcomplexF', arg2: 'unsigned int') -> "stdcomplexF":
    """vnl_c_vectorCF_inner_product(stdcomplexF arg0, stdcomplexF arg1, unsigned int arg2) -> stdcomplexF"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_inner_product(arg0, arg1, arg2)

def vnl_c_vectorCF_conjugate(arg0: 'stdcomplexF', arg1: 'stdcomplexF', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorCF_conjugate(stdcomplexF arg0, stdcomplexF arg1, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_conjugate(arg0, arg1, arg2)

def vnl_c_vectorCF_max_value(arg0: 'stdcomplexF', arg1: 'unsigned int') -> "stdcomplexF":
    """vnl_c_vectorCF_max_value(stdcomplexF arg0, unsigned int arg1) -> stdcomplexF"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_max_value(arg0, arg1)

def vnl_c_vectorCF_min_value(arg0: 'stdcomplexF', arg1: 'unsigned int') -> "stdcomplexF":
    """vnl_c_vectorCF_min_value(stdcomplexF arg0, unsigned int arg1) -> stdcomplexF"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_min_value(arg0, arg1)

def vnl_c_vectorCF_arg_max(arg0: 'stdcomplexF', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorCF_arg_max(stdcomplexF arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_arg_max(arg0, arg1)

def vnl_c_vectorCF_arg_min(arg0: 'stdcomplexF', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorCF_arg_min(stdcomplexF arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_arg_min(arg0, arg1)

def vnl_c_vectorCF_mean(p: 'stdcomplexF', n: 'unsigned int') -> "stdcomplexF":
    """vnl_c_vectorCF_mean(stdcomplexF p, unsigned int n) -> stdcomplexF"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_mean(p, n)

def vnl_c_vectorCF_std(p: 'stdcomplexF', n: 'unsigned int') -> "stdcomplexF":
    """vnl_c_vectorCF_std(stdcomplexF p, unsigned int n) -> stdcomplexF"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_std(p, n)

def vnl_c_vectorCF_sum_sq_diff_means(v: 'stdcomplexF', n: 'unsigned int') -> "stdcomplexF":
    """vnl_c_vectorCF_sum_sq_diff_means(stdcomplexF v, unsigned int n) -> stdcomplexF"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_sum_sq_diff_means(v, n)

def vnl_c_vectorCF_one_norm(p: 'stdcomplexF', n: 'unsigned int') -> "float":
    """vnl_c_vectorCF_one_norm(stdcomplexF p, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_one_norm(p, n)

def vnl_c_vectorCF_two_norm(p: 'stdcomplexF', n: 'unsigned int') -> "float":
    """vnl_c_vectorCF_two_norm(stdcomplexF p, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_two_norm(p, n)

def vnl_c_vectorCF_inf_norm(p: 'stdcomplexF', n: 'unsigned int') -> "float":
    """vnl_c_vectorCF_inf_norm(stdcomplexF p, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_inf_norm(p, n)

def vnl_c_vectorCF_two_nrm2(p: 'stdcomplexF', n: 'unsigned int') -> "float":
    """vnl_c_vectorCF_two_nrm2(stdcomplexF p, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_two_nrm2(p, n)

def vnl_c_vectorCF_rms_norm(p: 'stdcomplexF', n: 'unsigned int') -> "float":
    """vnl_c_vectorCF_rms_norm(stdcomplexF p, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_rms_norm(p, n)

def vnl_c_vectorCF_euclid_dist_sq(arg0: 'stdcomplexF', arg1: 'stdcomplexF', arg2: 'unsigned int') -> "stdcomplexF":
    """vnl_c_vectorCF_euclid_dist_sq(stdcomplexF arg0, stdcomplexF arg1, unsigned int arg2) -> stdcomplexF"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_euclid_dist_sq(arg0, arg1, arg2)

def vnl_c_vectorCF_allocate_Tptr(n: 'unsigned long long const') -> "stdcomplexF **":
    """vnl_c_vectorCF_allocate_Tptr(unsigned long long const n) -> stdcomplexF **"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_allocate_Tptr(n)

def vnl_c_vectorCF_allocate_T(n: 'unsigned long long const') -> "stdcomplexF *":
    """vnl_c_vectorCF_allocate_T(unsigned long long const n) -> stdcomplexF"""
    return _vnl_c_vectorPython.vnl_c_vectorCF_allocate_T(n)

def vnl_c_vectorCF_deallocate(*args) -> "void":
    """
    deallocate(stdcomplexF ** arg0, unsigned long long const n_when_allocated)
    vnl_c_vectorCF_deallocate(stdcomplexF arg0, unsigned long long const n_when_allocated)
    """
    return _vnl_c_vectorPython.vnl_c_vectorCF_deallocate(*args)

class vnl_c_vectorD(object):
    """Proxy of C++ vnl_c_vectorD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def sum(v: 'double const *', n: 'unsigned int') -> "double":
        """sum(double const * v, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_sum(v, n)

    sum = staticmethod(sum)

    def squared_magnitude(p: 'double const *', n: 'unsigned int') -> "double":
        """squared_magnitude(double const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_squared_magnitude(p, n)

    squared_magnitude = staticmethod(squared_magnitude)

    def normalize(arg0: 'double *', n: 'unsigned int') -> "void":
        """normalize(double * arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_normalize(arg0, n)

    normalize = staticmethod(normalize)

    def copy(x: 'double const *', y: 'double *', arg2: 'unsigned int') -> "void":
        """copy(double const * x, double * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_copy(x, y, arg2)

    copy = staticmethod(copy)

    def scale(x: 'double const *', y: 'double *', arg2: 'unsigned int', arg3: 'double const &') -> "void":
        """scale(double const * x, double * y, unsigned int arg2, double const & arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_scale(x, y, arg2, arg3)

    scale = staticmethod(scale)

    def add(*args) -> "void":
        """
        add(double const * x, double const * y, double * z, unsigned int arg3)
        add(double const * x, double const & y, double * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorD_add(*args)

    add = staticmethod(add)

    def subtract(*args) -> "void":
        """
        subtract(double const * x, double const * y, double * z, unsigned int arg3)
        subtract(double const * x, double const & y, double * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorD_subtract(*args)

    subtract = staticmethod(subtract)

    def multiply(*args) -> "void":
        """
        multiply(double const * x, double const * y, double * z, unsigned int arg3)
        multiply(double const * x, double const & y, double * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorD_multiply(*args)

    multiply = staticmethod(multiply)

    def divide(*args) -> "void":
        """
        divide(double const * x, double const * y, double * z, unsigned int arg3)
        divide(double const * x, double const & y, double * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorD_divide(*args)

    divide = staticmethod(divide)

    def negate(x: 'double const *', y: 'double *', arg2: 'unsigned int') -> "void":
        """negate(double const * x, double * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_negate(x, y, arg2)

    negate = staticmethod(negate)

    def invert(x: 'double const *', y: 'double *', arg2: 'unsigned int') -> "void":
        """invert(double const * x, double * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_invert(x, y, arg2)

    invert = staticmethod(invert)

    def saxpy(a: 'double const &', x: 'double const *', y: 'double *', arg3: 'unsigned int') -> "void":
        """saxpy(double const & a, double const * x, double * y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_saxpy(a, x, y, arg3)

    saxpy = staticmethod(saxpy)

    def fill(x: 'double *', arg1: 'unsigned int', v: 'double const &') -> "void":
        """fill(double * x, unsigned int arg1, double const & v)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_fill(x, arg1, v)

    fill = staticmethod(fill)

    def reverse(x: 'double *', arg1: 'unsigned int') -> "void":
        """reverse(double * x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_reverse(x, arg1)

    reverse = staticmethod(reverse)

    def dot_product(arg0: 'double const *', arg1: 'double const *', arg2: 'unsigned int') -> "double":
        """dot_product(double const * arg0, double const * arg1, unsigned int arg2) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_dot_product(arg0, arg1, arg2)

    dot_product = staticmethod(dot_product)

    def inner_product(arg0: 'double const *', arg1: 'double const *', arg2: 'unsigned int') -> "double":
        """inner_product(double const * arg0, double const * arg1, unsigned int arg2) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_inner_product(arg0, arg1, arg2)

    inner_product = staticmethod(inner_product)

    def conjugate(arg0: 'double const *', arg1: 'double *', arg2: 'unsigned int') -> "void":
        """conjugate(double const * arg0, double * arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_conjugate(arg0, arg1, arg2)

    conjugate = staticmethod(conjugate)

    def max_value(arg0: 'double const *', arg1: 'unsigned int') -> "double":
        """max_value(double const * arg0, unsigned int arg1) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_max_value(arg0, arg1)

    max_value = staticmethod(max_value)

    def min_value(arg0: 'double const *', arg1: 'unsigned int') -> "double":
        """min_value(double const * arg0, unsigned int arg1) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_min_value(arg0, arg1)

    min_value = staticmethod(min_value)

    def arg_max(arg0: 'double const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_max(double const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorD_arg_max(arg0, arg1)

    arg_max = staticmethod(arg_max)

    def arg_min(arg0: 'double const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_min(double const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorD_arg_min(arg0, arg1)

    arg_min = staticmethod(arg_min)

    def mean(p: 'double const *', n: 'unsigned int') -> "double":
        """mean(double const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_mean(p, n)

    mean = staticmethod(mean)

    def std(p: 'double const *', n: 'unsigned int') -> "double":
        """std(double const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_std(p, n)

    std = staticmethod(std)

    def sum_sq_diff_means(v: 'double const *', n: 'unsigned int') -> "double":
        """sum_sq_diff_means(double const * v, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_sum_sq_diff_means(v, n)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)

    def one_norm(p: 'double const *', n: 'unsigned int') -> "double":
        """one_norm(double const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_one_norm(p, n)

    one_norm = staticmethod(one_norm)

    def two_norm(p: 'double const *', n: 'unsigned int') -> "double":
        """two_norm(double const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_two_norm(p, n)

    two_norm = staticmethod(two_norm)

    def inf_norm(p: 'double const *', n: 'unsigned int') -> "double":
        """inf_norm(double const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_inf_norm(p, n)

    inf_norm = staticmethod(inf_norm)

    def two_nrm2(p: 'double const *', n: 'unsigned int') -> "double":
        """two_nrm2(double const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_two_nrm2(p, n)

    two_nrm2 = staticmethod(two_nrm2)

    def rms_norm(p: 'double const *', n: 'unsigned int') -> "double":
        """rms_norm(double const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_rms_norm(p, n)

    rms_norm = staticmethod(rms_norm)

    def euclid_dist_sq(arg0: 'double const *', arg1: 'double const *', arg2: 'unsigned int') -> "double":
        """euclid_dist_sq(double const * arg0, double const * arg1, unsigned int arg2) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_euclid_dist_sq(arg0, arg1, arg2)

    euclid_dist_sq = staticmethod(euclid_dist_sq)

    def allocate_Tptr(n: 'unsigned long long const') -> "double **":
        """allocate_Tptr(unsigned long long const n) -> double **"""
        return _vnl_c_vectorPython.vnl_c_vectorD_allocate_Tptr(n)

    allocate_Tptr = staticmethod(allocate_Tptr)

    def allocate_T(n: 'unsigned long long const') -> "double *":
        """allocate_T(unsigned long long const n) -> double *"""
        return _vnl_c_vectorPython.vnl_c_vectorD_allocate_T(n)

    allocate_T = staticmethod(allocate_T)

    def deallocate(*args) -> "void":
        """
        deallocate(double ** arg0, unsigned long long const n_when_allocated)
        deallocate(double * arg0, unsigned long long const n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorD_deallocate(*args)

    deallocate = staticmethod(deallocate)

    def __init__(self, *args):
        """
        __init__(vnl_c_vectorD self) -> vnl_c_vectorD
        __init__(vnl_c_vectorD self, vnl_c_vectorD arg0) -> vnl_c_vectorD
        """
        _vnl_c_vectorPython.vnl_c_vectorD_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorD(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorD
vnl_c_vectorD_swigregister = _vnl_c_vectorPython.vnl_c_vectorD_swigregister
vnl_c_vectorD_swigregister(vnl_c_vectorD)

def vnl_c_vectorD_sum(v: 'double const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorD_sum(double const * v, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_sum(v, n)

def vnl_c_vectorD_squared_magnitude(p: 'double const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorD_squared_magnitude(double const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_squared_magnitude(p, n)

def vnl_c_vectorD_normalize(arg0: 'double *', n: 'unsigned int') -> "void":
    """vnl_c_vectorD_normalize(double * arg0, unsigned int n)"""
    return _vnl_c_vectorPython.vnl_c_vectorD_normalize(arg0, n)

def vnl_c_vectorD_copy(x: 'double const *', y: 'double *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorD_copy(double const * x, double * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorD_copy(x, y, arg2)

def vnl_c_vectorD_scale(x: 'double const *', y: 'double *', arg2: 'unsigned int', arg3: 'double const &') -> "void":
    """vnl_c_vectorD_scale(double const * x, double * y, unsigned int arg2, double const & arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorD_scale(x, y, arg2, arg3)

def vnl_c_vectorD_add(*args) -> "void":
    """
    add(double const * x, double const * y, double * z, unsigned int arg3)
    vnl_c_vectorD_add(double const * x, double const & y, double * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorD_add(*args)

def vnl_c_vectorD_subtract(*args) -> "void":
    """
    subtract(double const * x, double const * y, double * z, unsigned int arg3)
    vnl_c_vectorD_subtract(double const * x, double const & y, double * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorD_subtract(*args)

def vnl_c_vectorD_multiply(*args) -> "void":
    """
    multiply(double const * x, double const * y, double * z, unsigned int arg3)
    vnl_c_vectorD_multiply(double const * x, double const & y, double * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorD_multiply(*args)

def vnl_c_vectorD_divide(*args) -> "void":
    """
    divide(double const * x, double const * y, double * z, unsigned int arg3)
    vnl_c_vectorD_divide(double const * x, double const & y, double * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorD_divide(*args)

def vnl_c_vectorD_negate(x: 'double const *', y: 'double *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorD_negate(double const * x, double * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorD_negate(x, y, arg2)

def vnl_c_vectorD_invert(x: 'double const *', y: 'double *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorD_invert(double const * x, double * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorD_invert(x, y, arg2)

def vnl_c_vectorD_saxpy(a: 'double const &', x: 'double const *', y: 'double *', arg3: 'unsigned int') -> "void":
    """vnl_c_vectorD_saxpy(double const & a, double const * x, double * y, unsigned int arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorD_saxpy(a, x, y, arg3)

def vnl_c_vectorD_fill(x: 'double *', arg1: 'unsigned int', v: 'double const &') -> "void":
    """vnl_c_vectorD_fill(double * x, unsigned int arg1, double const & v)"""
    return _vnl_c_vectorPython.vnl_c_vectorD_fill(x, arg1, v)

def vnl_c_vectorD_reverse(x: 'double *', arg1: 'unsigned int') -> "void":
    """vnl_c_vectorD_reverse(double * x, unsigned int arg1)"""
    return _vnl_c_vectorPython.vnl_c_vectorD_reverse(x, arg1)

def vnl_c_vectorD_dot_product(arg0: 'double const *', arg1: 'double const *', arg2: 'unsigned int') -> "double":
    """vnl_c_vectorD_dot_product(double const * arg0, double const * arg1, unsigned int arg2) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_dot_product(arg0, arg1, arg2)

def vnl_c_vectorD_inner_product(arg0: 'double const *', arg1: 'double const *', arg2: 'unsigned int') -> "double":
    """vnl_c_vectorD_inner_product(double const * arg0, double const * arg1, unsigned int arg2) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_inner_product(arg0, arg1, arg2)

def vnl_c_vectorD_conjugate(arg0: 'double const *', arg1: 'double *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorD_conjugate(double const * arg0, double * arg1, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorD_conjugate(arg0, arg1, arg2)

def vnl_c_vectorD_max_value(arg0: 'double const *', arg1: 'unsigned int') -> "double":
    """vnl_c_vectorD_max_value(double const * arg0, unsigned int arg1) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_max_value(arg0, arg1)

def vnl_c_vectorD_min_value(arg0: 'double const *', arg1: 'unsigned int') -> "double":
    """vnl_c_vectorD_min_value(double const * arg0, unsigned int arg1) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_min_value(arg0, arg1)

def vnl_c_vectorD_arg_max(arg0: 'double const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorD_arg_max(double const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorD_arg_max(arg0, arg1)

def vnl_c_vectorD_arg_min(arg0: 'double const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorD_arg_min(double const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorD_arg_min(arg0, arg1)

def vnl_c_vectorD_mean(p: 'double const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorD_mean(double const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_mean(p, n)

def vnl_c_vectorD_std(p: 'double const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorD_std(double const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_std(p, n)

def vnl_c_vectorD_sum_sq_diff_means(v: 'double const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorD_sum_sq_diff_means(double const * v, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_sum_sq_diff_means(v, n)

def vnl_c_vectorD_one_norm(p: 'double const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorD_one_norm(double const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_one_norm(p, n)

def vnl_c_vectorD_two_norm(p: 'double const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorD_two_norm(double const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_two_norm(p, n)

def vnl_c_vectorD_inf_norm(p: 'double const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorD_inf_norm(double const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_inf_norm(p, n)

def vnl_c_vectorD_two_nrm2(p: 'double const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorD_two_nrm2(double const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_two_nrm2(p, n)

def vnl_c_vectorD_rms_norm(p: 'double const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorD_rms_norm(double const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_rms_norm(p, n)

def vnl_c_vectorD_euclid_dist_sq(arg0: 'double const *', arg1: 'double const *', arg2: 'unsigned int') -> "double":
    """vnl_c_vectorD_euclid_dist_sq(double const * arg0, double const * arg1, unsigned int arg2) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorD_euclid_dist_sq(arg0, arg1, arg2)

def vnl_c_vectorD_allocate_Tptr(n: 'unsigned long long const') -> "double **":
    """vnl_c_vectorD_allocate_Tptr(unsigned long long const n) -> double **"""
    return _vnl_c_vectorPython.vnl_c_vectorD_allocate_Tptr(n)

def vnl_c_vectorD_allocate_T(n: 'unsigned long long const') -> "double *":
    """vnl_c_vectorD_allocate_T(unsigned long long const n) -> double *"""
    return _vnl_c_vectorPython.vnl_c_vectorD_allocate_T(n)

def vnl_c_vectorD_deallocate(*args) -> "void":
    """
    deallocate(double ** arg0, unsigned long long const n_when_allocated)
    vnl_c_vectorD_deallocate(double * arg0, unsigned long long const n_when_allocated)
    """
    return _vnl_c_vectorPython.vnl_c_vectorD_deallocate(*args)

class vnl_c_vectorF(object):
    """Proxy of C++ vnl_c_vectorF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def sum(v: 'float const *', n: 'unsigned int') -> "float":
        """sum(float const * v, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_sum(v, n)

    sum = staticmethod(sum)

    def squared_magnitude(p: 'float const *', n: 'unsigned int') -> "float":
        """squared_magnitude(float const * p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_squared_magnitude(p, n)

    squared_magnitude = staticmethod(squared_magnitude)

    def normalize(arg0: 'float *', n: 'unsigned int') -> "void":
        """normalize(float * arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_normalize(arg0, n)

    normalize = staticmethod(normalize)

    def copy(x: 'float const *', y: 'float *', arg2: 'unsigned int') -> "void":
        """copy(float const * x, float * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_copy(x, y, arg2)

    copy = staticmethod(copy)

    def scale(x: 'float const *', y: 'float *', arg2: 'unsigned int', arg3: 'float const &') -> "void":
        """scale(float const * x, float * y, unsigned int arg2, float const & arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_scale(x, y, arg2, arg3)

    scale = staticmethod(scale)

    def add(*args) -> "void":
        """
        add(float const * x, float const * y, float * z, unsigned int arg3)
        add(float const * x, float const & y, float * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorF_add(*args)

    add = staticmethod(add)

    def subtract(*args) -> "void":
        """
        subtract(float const * x, float const * y, float * z, unsigned int arg3)
        subtract(float const * x, float const & y, float * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorF_subtract(*args)

    subtract = staticmethod(subtract)

    def multiply(*args) -> "void":
        """
        multiply(float const * x, float const * y, float * z, unsigned int arg3)
        multiply(float const * x, float const & y, float * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorF_multiply(*args)

    multiply = staticmethod(multiply)

    def divide(*args) -> "void":
        """
        divide(float const * x, float const * y, float * z, unsigned int arg3)
        divide(float const * x, float const & y, float * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorF_divide(*args)

    divide = staticmethod(divide)

    def negate(x: 'float const *', y: 'float *', arg2: 'unsigned int') -> "void":
        """negate(float const * x, float * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_negate(x, y, arg2)

    negate = staticmethod(negate)

    def invert(x: 'float const *', y: 'float *', arg2: 'unsigned int') -> "void":
        """invert(float const * x, float * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_invert(x, y, arg2)

    invert = staticmethod(invert)

    def saxpy(a: 'float const &', x: 'float const *', y: 'float *', arg3: 'unsigned int') -> "void":
        """saxpy(float const & a, float const * x, float * y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_saxpy(a, x, y, arg3)

    saxpy = staticmethod(saxpy)

    def fill(x: 'float *', arg1: 'unsigned int', v: 'float const &') -> "void":
        """fill(float * x, unsigned int arg1, float const & v)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_fill(x, arg1, v)

    fill = staticmethod(fill)

    def reverse(x: 'float *', arg1: 'unsigned int') -> "void":
        """reverse(float * x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_reverse(x, arg1)

    reverse = staticmethod(reverse)

    def dot_product(arg0: 'float const *', arg1: 'float const *', arg2: 'unsigned int') -> "float":
        """dot_product(float const * arg0, float const * arg1, unsigned int arg2) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_dot_product(arg0, arg1, arg2)

    dot_product = staticmethod(dot_product)

    def inner_product(arg0: 'float const *', arg1: 'float const *', arg2: 'unsigned int') -> "float":
        """inner_product(float const * arg0, float const * arg1, unsigned int arg2) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_inner_product(arg0, arg1, arg2)

    inner_product = staticmethod(inner_product)

    def conjugate(arg0: 'float const *', arg1: 'float *', arg2: 'unsigned int') -> "void":
        """conjugate(float const * arg0, float * arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_conjugate(arg0, arg1, arg2)

    conjugate = staticmethod(conjugate)

    def max_value(arg0: 'float const *', arg1: 'unsigned int') -> "float":
        """max_value(float const * arg0, unsigned int arg1) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_max_value(arg0, arg1)

    max_value = staticmethod(max_value)

    def min_value(arg0: 'float const *', arg1: 'unsigned int') -> "float":
        """min_value(float const * arg0, unsigned int arg1) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_min_value(arg0, arg1)

    min_value = staticmethod(min_value)

    def arg_max(arg0: 'float const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_max(float const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorF_arg_max(arg0, arg1)

    arg_max = staticmethod(arg_max)

    def arg_min(arg0: 'float const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_min(float const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorF_arg_min(arg0, arg1)

    arg_min = staticmethod(arg_min)

    def mean(p: 'float const *', n: 'unsigned int') -> "float":
        """mean(float const * p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_mean(p, n)

    mean = staticmethod(mean)

    def std(p: 'float const *', n: 'unsigned int') -> "double":
        """std(float const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorF_std(p, n)

    std = staticmethod(std)

    def sum_sq_diff_means(v: 'float const *', n: 'unsigned int') -> "float":
        """sum_sq_diff_means(float const * v, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_sum_sq_diff_means(v, n)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)

    def one_norm(p: 'float const *', n: 'unsigned int') -> "float":
        """one_norm(float const * p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_one_norm(p, n)

    one_norm = staticmethod(one_norm)

    def two_norm(p: 'float const *', n: 'unsigned int') -> "float":
        """two_norm(float const * p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_two_norm(p, n)

    two_norm = staticmethod(two_norm)

    def inf_norm(p: 'float const *', n: 'unsigned int') -> "float":
        """inf_norm(float const * p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_inf_norm(p, n)

    inf_norm = staticmethod(inf_norm)

    def two_nrm2(p: 'float const *', n: 'unsigned int') -> "float":
        """two_nrm2(float const * p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_two_nrm2(p, n)

    two_nrm2 = staticmethod(two_nrm2)

    def rms_norm(p: 'float const *', n: 'unsigned int') -> "float":
        """rms_norm(float const * p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_rms_norm(p, n)

    rms_norm = staticmethod(rms_norm)

    def euclid_dist_sq(arg0: 'float const *', arg1: 'float const *', arg2: 'unsigned int') -> "float":
        """euclid_dist_sq(float const * arg0, float const * arg1, unsigned int arg2) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_euclid_dist_sq(arg0, arg1, arg2)

    euclid_dist_sq = staticmethod(euclid_dist_sq)

    def allocate_Tptr(n: 'unsigned long long const') -> "float **":
        """allocate_Tptr(unsigned long long const n) -> float **"""
        return _vnl_c_vectorPython.vnl_c_vectorF_allocate_Tptr(n)

    allocate_Tptr = staticmethod(allocate_Tptr)

    def allocate_T(n: 'unsigned long long const') -> "float *":
        """allocate_T(unsigned long long const n) -> float *"""
        return _vnl_c_vectorPython.vnl_c_vectorF_allocate_T(n)

    allocate_T = staticmethod(allocate_T)

    def deallocate(*args) -> "void":
        """
        deallocate(float ** arg0, unsigned long long const n_when_allocated)
        deallocate(float * arg0, unsigned long long const n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorF_deallocate(*args)

    deallocate = staticmethod(deallocate)

    def __init__(self, *args):
        """
        __init__(vnl_c_vectorF self) -> vnl_c_vectorF
        __init__(vnl_c_vectorF self, vnl_c_vectorF arg0) -> vnl_c_vectorF
        """
        _vnl_c_vectorPython.vnl_c_vectorF_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorF(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorF
vnl_c_vectorF_swigregister = _vnl_c_vectorPython.vnl_c_vectorF_swigregister
vnl_c_vectorF_swigregister(vnl_c_vectorF)

def vnl_c_vectorF_sum(v: 'float const *', n: 'unsigned int') -> "float":
    """vnl_c_vectorF_sum(float const * v, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorF_sum(v, n)

def vnl_c_vectorF_squared_magnitude(p: 'float const *', n: 'unsigned int') -> "float":
    """vnl_c_vectorF_squared_magnitude(float const * p, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorF_squared_magnitude(p, n)

def vnl_c_vectorF_normalize(arg0: 'float *', n: 'unsigned int') -> "void":
    """vnl_c_vectorF_normalize(float * arg0, unsigned int n)"""
    return _vnl_c_vectorPython.vnl_c_vectorF_normalize(arg0, n)

def vnl_c_vectorF_copy(x: 'float const *', y: 'float *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorF_copy(float const * x, float * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorF_copy(x, y, arg2)

def vnl_c_vectorF_scale(x: 'float const *', y: 'float *', arg2: 'unsigned int', arg3: 'float const &') -> "void":
    """vnl_c_vectorF_scale(float const * x, float * y, unsigned int arg2, float const & arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorF_scale(x, y, arg2, arg3)

def vnl_c_vectorF_add(*args) -> "void":
    """
    add(float const * x, float const * y, float * z, unsigned int arg3)
    vnl_c_vectorF_add(float const * x, float const & y, float * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorF_add(*args)

def vnl_c_vectorF_subtract(*args) -> "void":
    """
    subtract(float const * x, float const * y, float * z, unsigned int arg3)
    vnl_c_vectorF_subtract(float const * x, float const & y, float * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorF_subtract(*args)

def vnl_c_vectorF_multiply(*args) -> "void":
    """
    multiply(float const * x, float const * y, float * z, unsigned int arg3)
    vnl_c_vectorF_multiply(float const * x, float const & y, float * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorF_multiply(*args)

def vnl_c_vectorF_divide(*args) -> "void":
    """
    divide(float const * x, float const * y, float * z, unsigned int arg3)
    vnl_c_vectorF_divide(float const * x, float const & y, float * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorF_divide(*args)

def vnl_c_vectorF_negate(x: 'float const *', y: 'float *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorF_negate(float const * x, float * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorF_negate(x, y, arg2)

def vnl_c_vectorF_invert(x: 'float const *', y: 'float *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorF_invert(float const * x, float * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorF_invert(x, y, arg2)

def vnl_c_vectorF_saxpy(a: 'float const &', x: 'float const *', y: 'float *', arg3: 'unsigned int') -> "void":
    """vnl_c_vectorF_saxpy(float const & a, float const * x, float * y, unsigned int arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorF_saxpy(a, x, y, arg3)

def vnl_c_vectorF_fill(x: 'float *', arg1: 'unsigned int', v: 'float const &') -> "void":
    """vnl_c_vectorF_fill(float * x, unsigned int arg1, float const & v)"""
    return _vnl_c_vectorPython.vnl_c_vectorF_fill(x, arg1, v)

def vnl_c_vectorF_reverse(x: 'float *', arg1: 'unsigned int') -> "void":
    """vnl_c_vectorF_reverse(float * x, unsigned int arg1)"""
    return _vnl_c_vectorPython.vnl_c_vectorF_reverse(x, arg1)

def vnl_c_vectorF_dot_product(arg0: 'float const *', arg1: 'float const *', arg2: 'unsigned int') -> "float":
    """vnl_c_vectorF_dot_product(float const * arg0, float const * arg1, unsigned int arg2) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorF_dot_product(arg0, arg1, arg2)

def vnl_c_vectorF_inner_product(arg0: 'float const *', arg1: 'float const *', arg2: 'unsigned int') -> "float":
    """vnl_c_vectorF_inner_product(float const * arg0, float const * arg1, unsigned int arg2) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorF_inner_product(arg0, arg1, arg2)

def vnl_c_vectorF_conjugate(arg0: 'float const *', arg1: 'float *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorF_conjugate(float const * arg0, float * arg1, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorF_conjugate(arg0, arg1, arg2)

def vnl_c_vectorF_max_value(arg0: 'float const *', arg1: 'unsigned int') -> "float":
    """vnl_c_vectorF_max_value(float const * arg0, unsigned int arg1) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorF_max_value(arg0, arg1)

def vnl_c_vectorF_min_value(arg0: 'float const *', arg1: 'unsigned int') -> "float":
    """vnl_c_vectorF_min_value(float const * arg0, unsigned int arg1) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorF_min_value(arg0, arg1)

def vnl_c_vectorF_arg_max(arg0: 'float const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorF_arg_max(float const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorF_arg_max(arg0, arg1)

def vnl_c_vectorF_arg_min(arg0: 'float const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorF_arg_min(float const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorF_arg_min(arg0, arg1)

def vnl_c_vectorF_mean(p: 'float const *', n: 'unsigned int') -> "float":
    """vnl_c_vectorF_mean(float const * p, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorF_mean(p, n)

def vnl_c_vectorF_std(p: 'float const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorF_std(float const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorF_std(p, n)

def vnl_c_vectorF_sum_sq_diff_means(v: 'float const *', n: 'unsigned int') -> "float":
    """vnl_c_vectorF_sum_sq_diff_means(float const * v, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorF_sum_sq_diff_means(v, n)

def vnl_c_vectorF_one_norm(p: 'float const *', n: 'unsigned int') -> "float":
    """vnl_c_vectorF_one_norm(float const * p, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorF_one_norm(p, n)

def vnl_c_vectorF_two_norm(p: 'float const *', n: 'unsigned int') -> "float":
    """vnl_c_vectorF_two_norm(float const * p, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorF_two_norm(p, n)

def vnl_c_vectorF_inf_norm(p: 'float const *', n: 'unsigned int') -> "float":
    """vnl_c_vectorF_inf_norm(float const * p, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorF_inf_norm(p, n)

def vnl_c_vectorF_two_nrm2(p: 'float const *', n: 'unsigned int') -> "float":
    """vnl_c_vectorF_two_nrm2(float const * p, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorF_two_nrm2(p, n)

def vnl_c_vectorF_rms_norm(p: 'float const *', n: 'unsigned int') -> "float":
    """vnl_c_vectorF_rms_norm(float const * p, unsigned int n) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorF_rms_norm(p, n)

def vnl_c_vectorF_euclid_dist_sq(arg0: 'float const *', arg1: 'float const *', arg2: 'unsigned int') -> "float":
    """vnl_c_vectorF_euclid_dist_sq(float const * arg0, float const * arg1, unsigned int arg2) -> float"""
    return _vnl_c_vectorPython.vnl_c_vectorF_euclid_dist_sq(arg0, arg1, arg2)

def vnl_c_vectorF_allocate_Tptr(n: 'unsigned long long const') -> "float **":
    """vnl_c_vectorF_allocate_Tptr(unsigned long long const n) -> float **"""
    return _vnl_c_vectorPython.vnl_c_vectorF_allocate_Tptr(n)

def vnl_c_vectorF_allocate_T(n: 'unsigned long long const') -> "float *":
    """vnl_c_vectorF_allocate_T(unsigned long long const n) -> float *"""
    return _vnl_c_vectorPython.vnl_c_vectorF_allocate_T(n)

def vnl_c_vectorF_deallocate(*args) -> "void":
    """
    deallocate(float ** arg0, unsigned long long const n_when_allocated)
    vnl_c_vectorF_deallocate(float * arg0, unsigned long long const n_when_allocated)
    """
    return _vnl_c_vectorPython.vnl_c_vectorF_deallocate(*args)

class vnl_c_vectorLD(object):
    """Proxy of C++ vnl_c_vectorLD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def sum(v: 'long double const *', n: 'unsigned int') -> "long double":
        """sum(long double const * v, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_sum(v, n)

    sum = staticmethod(sum)

    def squared_magnitude(p: 'long double const *', n: 'unsigned int') -> "long double":
        """squared_magnitude(long double const * p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_squared_magnitude(p, n)

    squared_magnitude = staticmethod(squared_magnitude)

    def normalize(arg0: 'long double *', n: 'unsigned int') -> "void":
        """normalize(long double * arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_normalize(arg0, n)

    normalize = staticmethod(normalize)

    def copy(x: 'long double const *', y: 'long double *', arg2: 'unsigned int') -> "void":
        """copy(long double const * x, long double * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_copy(x, y, arg2)

    copy = staticmethod(copy)

    def scale(x: 'long double const *', y: 'long double *', arg2: 'unsigned int', arg3: 'long double const &') -> "void":
        """scale(long double const * x, long double * y, unsigned int arg2, long double const & arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_scale(x, y, arg2, arg3)

    scale = staticmethod(scale)

    def add(*args) -> "void":
        """
        add(long double const * x, long double const * y, long double * z, unsigned int arg3)
        add(long double const * x, long double const & y, long double * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorLD_add(*args)

    add = staticmethod(add)

    def subtract(*args) -> "void":
        """
        subtract(long double const * x, long double const * y, long double * z, unsigned int arg3)
        subtract(long double const * x, long double const & y, long double * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorLD_subtract(*args)

    subtract = staticmethod(subtract)

    def multiply(*args) -> "void":
        """
        multiply(long double const * x, long double const * y, long double * z, unsigned int arg3)
        multiply(long double const * x, long double const & y, long double * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorLD_multiply(*args)

    multiply = staticmethod(multiply)

    def divide(*args) -> "void":
        """
        divide(long double const * x, long double const * y, long double * z, unsigned int arg3)
        divide(long double const * x, long double const & y, long double * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorLD_divide(*args)

    divide = staticmethod(divide)

    def negate(x: 'long double const *', y: 'long double *', arg2: 'unsigned int') -> "void":
        """negate(long double const * x, long double * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_negate(x, y, arg2)

    negate = staticmethod(negate)

    def invert(x: 'long double const *', y: 'long double *', arg2: 'unsigned int') -> "void":
        """invert(long double const * x, long double * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_invert(x, y, arg2)

    invert = staticmethod(invert)

    def saxpy(a: 'long double const &', x: 'long double const *', y: 'long double *', arg3: 'unsigned int') -> "void":
        """saxpy(long double const & a, long double const * x, long double * y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_saxpy(a, x, y, arg3)

    saxpy = staticmethod(saxpy)

    def fill(x: 'long double *', arg1: 'unsigned int', v: 'long double const &') -> "void":
        """fill(long double * x, unsigned int arg1, long double const & v)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_fill(x, arg1, v)

    fill = staticmethod(fill)

    def reverse(x: 'long double *', arg1: 'unsigned int') -> "void":
        """reverse(long double * x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_reverse(x, arg1)

    reverse = staticmethod(reverse)

    def dot_product(arg0: 'long double const *', arg1: 'long double const *', arg2: 'unsigned int') -> "long double":
        """dot_product(long double const * arg0, long double const * arg1, unsigned int arg2) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_dot_product(arg0, arg1, arg2)

    dot_product = staticmethod(dot_product)

    def inner_product(arg0: 'long double const *', arg1: 'long double const *', arg2: 'unsigned int') -> "long double":
        """inner_product(long double const * arg0, long double const * arg1, unsigned int arg2) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_inner_product(arg0, arg1, arg2)

    inner_product = staticmethod(inner_product)

    def conjugate(arg0: 'long double const *', arg1: 'long double *', arg2: 'unsigned int') -> "void":
        """conjugate(long double const * arg0, long double * arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_conjugate(arg0, arg1, arg2)

    conjugate = staticmethod(conjugate)

    def max_value(arg0: 'long double const *', arg1: 'unsigned int') -> "long double":
        """max_value(long double const * arg0, unsigned int arg1) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_max_value(arg0, arg1)

    max_value = staticmethod(max_value)

    def min_value(arg0: 'long double const *', arg1: 'unsigned int') -> "long double":
        """min_value(long double const * arg0, unsigned int arg1) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_min_value(arg0, arg1)

    min_value = staticmethod(min_value)

    def arg_max(arg0: 'long double const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_max(long double const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_arg_max(arg0, arg1)

    arg_max = staticmethod(arg_max)

    def arg_min(arg0: 'long double const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_min(long double const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_arg_min(arg0, arg1)

    arg_min = staticmethod(arg_min)

    def mean(p: 'long double const *', n: 'unsigned int') -> "long double":
        """mean(long double const * p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_mean(p, n)

    mean = staticmethod(mean)

    def std(p: 'long double const *', n: 'unsigned int') -> "long double":
        """std(long double const * p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_std(p, n)

    std = staticmethod(std)

    def sum_sq_diff_means(v: 'long double const *', n: 'unsigned int') -> "long double":
        """sum_sq_diff_means(long double const * v, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_sum_sq_diff_means(v, n)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)

    def one_norm(p: 'long double const *', n: 'unsigned int') -> "long double":
        """one_norm(long double const * p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_one_norm(p, n)

    one_norm = staticmethod(one_norm)

    def two_norm(p: 'long double const *', n: 'unsigned int') -> "long double":
        """two_norm(long double const * p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_two_norm(p, n)

    two_norm = staticmethod(two_norm)

    def inf_norm(p: 'long double const *', n: 'unsigned int') -> "long double":
        """inf_norm(long double const * p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_inf_norm(p, n)

    inf_norm = staticmethod(inf_norm)

    def two_nrm2(p: 'long double const *', n: 'unsigned int') -> "long double":
        """two_nrm2(long double const * p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_two_nrm2(p, n)

    two_nrm2 = staticmethod(two_nrm2)

    def rms_norm(p: 'long double const *', n: 'unsigned int') -> "long double":
        """rms_norm(long double const * p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_rms_norm(p, n)

    rms_norm = staticmethod(rms_norm)

    def euclid_dist_sq(arg0: 'long double const *', arg1: 'long double const *', arg2: 'unsigned int') -> "long double":
        """euclid_dist_sq(long double const * arg0, long double const * arg1, unsigned int arg2) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_euclid_dist_sq(arg0, arg1, arg2)

    euclid_dist_sq = staticmethod(euclid_dist_sq)

    def allocate_Tptr(n: 'unsigned long long const') -> "long double **":
        """allocate_Tptr(unsigned long long const n) -> long double **"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_allocate_Tptr(n)

    allocate_Tptr = staticmethod(allocate_Tptr)

    def allocate_T(n: 'unsigned long long const') -> "long double *":
        """allocate_T(unsigned long long const n) -> long double *"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_allocate_T(n)

    allocate_T = staticmethod(allocate_T)

    def deallocate(*args) -> "void":
        """
        deallocate(long double ** arg0, unsigned long long const n_when_allocated)
        deallocate(long double * arg0, unsigned long long const n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorLD_deallocate(*args)

    deallocate = staticmethod(deallocate)

    def __init__(self, *args):
        """
        __init__(vnl_c_vectorLD self) -> vnl_c_vectorLD
        __init__(vnl_c_vectorLD self, vnl_c_vectorLD arg0) -> vnl_c_vectorLD
        """
        _vnl_c_vectorPython.vnl_c_vectorLD_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorLD(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorLD
vnl_c_vectorLD_swigregister = _vnl_c_vectorPython.vnl_c_vectorLD_swigregister
vnl_c_vectorLD_swigregister(vnl_c_vectorLD)

def vnl_c_vectorLD_sum(v: 'long double const *', n: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_sum(long double const * v, unsigned int n) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_sum(v, n)

def vnl_c_vectorLD_squared_magnitude(p: 'long double const *', n: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_squared_magnitude(long double const * p, unsigned int n) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_squared_magnitude(p, n)

def vnl_c_vectorLD_normalize(arg0: 'long double *', n: 'unsigned int') -> "void":
    """vnl_c_vectorLD_normalize(long double * arg0, unsigned int n)"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_normalize(arg0, n)

def vnl_c_vectorLD_copy(x: 'long double const *', y: 'long double *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorLD_copy(long double const * x, long double * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_copy(x, y, arg2)

def vnl_c_vectorLD_scale(x: 'long double const *', y: 'long double *', arg2: 'unsigned int', arg3: 'long double const &') -> "void":
    """vnl_c_vectorLD_scale(long double const * x, long double * y, unsigned int arg2, long double const & arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_scale(x, y, arg2, arg3)

def vnl_c_vectorLD_add(*args) -> "void":
    """
    add(long double const * x, long double const * y, long double * z, unsigned int arg3)
    vnl_c_vectorLD_add(long double const * x, long double const & y, long double * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorLD_add(*args)

def vnl_c_vectorLD_subtract(*args) -> "void":
    """
    subtract(long double const * x, long double const * y, long double * z, unsigned int arg3)
    vnl_c_vectorLD_subtract(long double const * x, long double const & y, long double * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorLD_subtract(*args)

def vnl_c_vectorLD_multiply(*args) -> "void":
    """
    multiply(long double const * x, long double const * y, long double * z, unsigned int arg3)
    vnl_c_vectorLD_multiply(long double const * x, long double const & y, long double * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorLD_multiply(*args)

def vnl_c_vectorLD_divide(*args) -> "void":
    """
    divide(long double const * x, long double const * y, long double * z, unsigned int arg3)
    vnl_c_vectorLD_divide(long double const * x, long double const & y, long double * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorLD_divide(*args)

def vnl_c_vectorLD_negate(x: 'long double const *', y: 'long double *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorLD_negate(long double const * x, long double * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_negate(x, y, arg2)

def vnl_c_vectorLD_invert(x: 'long double const *', y: 'long double *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorLD_invert(long double const * x, long double * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_invert(x, y, arg2)

def vnl_c_vectorLD_saxpy(a: 'long double const &', x: 'long double const *', y: 'long double *', arg3: 'unsigned int') -> "void":
    """vnl_c_vectorLD_saxpy(long double const & a, long double const * x, long double * y, unsigned int arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_saxpy(a, x, y, arg3)

def vnl_c_vectorLD_fill(x: 'long double *', arg1: 'unsigned int', v: 'long double const &') -> "void":
    """vnl_c_vectorLD_fill(long double * x, unsigned int arg1, long double const & v)"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_fill(x, arg1, v)

def vnl_c_vectorLD_reverse(x: 'long double *', arg1: 'unsigned int') -> "void":
    """vnl_c_vectorLD_reverse(long double * x, unsigned int arg1)"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_reverse(x, arg1)

def vnl_c_vectorLD_dot_product(arg0: 'long double const *', arg1: 'long double const *', arg2: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_dot_product(long double const * arg0, long double const * arg1, unsigned int arg2) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_dot_product(arg0, arg1, arg2)

def vnl_c_vectorLD_inner_product(arg0: 'long double const *', arg1: 'long double const *', arg2: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_inner_product(long double const * arg0, long double const * arg1, unsigned int arg2) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_inner_product(arg0, arg1, arg2)

def vnl_c_vectorLD_conjugate(arg0: 'long double const *', arg1: 'long double *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorLD_conjugate(long double const * arg0, long double * arg1, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_conjugate(arg0, arg1, arg2)

def vnl_c_vectorLD_max_value(arg0: 'long double const *', arg1: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_max_value(long double const * arg0, unsigned int arg1) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_max_value(arg0, arg1)

def vnl_c_vectorLD_min_value(arg0: 'long double const *', arg1: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_min_value(long double const * arg0, unsigned int arg1) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_min_value(arg0, arg1)

def vnl_c_vectorLD_arg_max(arg0: 'long double const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorLD_arg_max(long double const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_arg_max(arg0, arg1)

def vnl_c_vectorLD_arg_min(arg0: 'long double const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorLD_arg_min(long double const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_arg_min(arg0, arg1)

def vnl_c_vectorLD_mean(p: 'long double const *', n: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_mean(long double const * p, unsigned int n) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_mean(p, n)

def vnl_c_vectorLD_std(p: 'long double const *', n: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_std(long double const * p, unsigned int n) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_std(p, n)

def vnl_c_vectorLD_sum_sq_diff_means(v: 'long double const *', n: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_sum_sq_diff_means(long double const * v, unsigned int n) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_sum_sq_diff_means(v, n)

def vnl_c_vectorLD_one_norm(p: 'long double const *', n: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_one_norm(long double const * p, unsigned int n) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_one_norm(p, n)

def vnl_c_vectorLD_two_norm(p: 'long double const *', n: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_two_norm(long double const * p, unsigned int n) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_two_norm(p, n)

def vnl_c_vectorLD_inf_norm(p: 'long double const *', n: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_inf_norm(long double const * p, unsigned int n) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_inf_norm(p, n)

def vnl_c_vectorLD_two_nrm2(p: 'long double const *', n: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_two_nrm2(long double const * p, unsigned int n) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_two_nrm2(p, n)

def vnl_c_vectorLD_rms_norm(p: 'long double const *', n: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_rms_norm(long double const * p, unsigned int n) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_rms_norm(p, n)

def vnl_c_vectorLD_euclid_dist_sq(arg0: 'long double const *', arg1: 'long double const *', arg2: 'unsigned int') -> "long double":
    """vnl_c_vectorLD_euclid_dist_sq(long double const * arg0, long double const * arg1, unsigned int arg2) -> long double"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_euclid_dist_sq(arg0, arg1, arg2)

def vnl_c_vectorLD_allocate_Tptr(n: 'unsigned long long const') -> "long double **":
    """vnl_c_vectorLD_allocate_Tptr(unsigned long long const n) -> long double **"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_allocate_Tptr(n)

def vnl_c_vectorLD_allocate_T(n: 'unsigned long long const') -> "long double *":
    """vnl_c_vectorLD_allocate_T(unsigned long long const n) -> long double *"""
    return _vnl_c_vectorPython.vnl_c_vectorLD_allocate_T(n)

def vnl_c_vectorLD_deallocate(*args) -> "void":
    """
    deallocate(long double ** arg0, unsigned long long const n_when_allocated)
    vnl_c_vectorLD_deallocate(long double * arg0, unsigned long long const n_when_allocated)
    """
    return _vnl_c_vectorPython.vnl_c_vectorLD_deallocate(*args)

class vnl_c_vectorSC(object):
    """Proxy of C++ vnl_c_vectorSC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def sum(v: 'signed char const *', n: 'unsigned int') -> "signed char":
        """sum(signed char const * v, unsigned int n) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_sum(v, n)

    sum = staticmethod(sum)

    def squared_magnitude(p: 'signed char const *', n: 'unsigned int') -> "unsigned char":
        """squared_magnitude(signed char const * p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_squared_magnitude(p, n)

    squared_magnitude = staticmethod(squared_magnitude)

    def normalize(arg0: 'signed char *', n: 'unsigned int') -> "void":
        """normalize(signed char * arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_normalize(arg0, n)

    normalize = staticmethod(normalize)

    def copy(x: 'signed char const *', y: 'signed char *', arg2: 'unsigned int') -> "void":
        """copy(signed char const * x, signed char * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_copy(x, y, arg2)

    copy = staticmethod(copy)

    def scale(x: 'signed char const *', y: 'signed char *', arg2: 'unsigned int', arg3: 'signed char const &') -> "void":
        """scale(signed char const * x, signed char * y, unsigned int arg2, signed char const & arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_scale(x, y, arg2, arg3)

    scale = staticmethod(scale)

    def add(*args) -> "void":
        """
        add(signed char const * x, signed char const * y, signed char * z, unsigned int arg3)
        add(signed char const * x, signed char const & y, signed char * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSC_add(*args)

    add = staticmethod(add)

    def subtract(*args) -> "void":
        """
        subtract(signed char const * x, signed char const * y, signed char * z, unsigned int arg3)
        subtract(signed char const * x, signed char const & y, signed char * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSC_subtract(*args)

    subtract = staticmethod(subtract)

    def multiply(*args) -> "void":
        """
        multiply(signed char const * x, signed char const * y, signed char * z, unsigned int arg3)
        multiply(signed char const * x, signed char const & y, signed char * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSC_multiply(*args)

    multiply = staticmethod(multiply)

    def divide(*args) -> "void":
        """
        divide(signed char const * x, signed char const * y, signed char * z, unsigned int arg3)
        divide(signed char const * x, signed char const & y, signed char * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSC_divide(*args)

    divide = staticmethod(divide)

    def negate(x: 'signed char const *', y: 'signed char *', arg2: 'unsigned int') -> "void":
        """negate(signed char const * x, signed char * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_negate(x, y, arg2)

    negate = staticmethod(negate)

    def invert(x: 'signed char const *', y: 'signed char *', arg2: 'unsigned int') -> "void":
        """invert(signed char const * x, signed char * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_invert(x, y, arg2)

    invert = staticmethod(invert)

    def saxpy(a: 'signed char const &', x: 'signed char const *', y: 'signed char *', arg3: 'unsigned int') -> "void":
        """saxpy(signed char const & a, signed char const * x, signed char * y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_saxpy(a, x, y, arg3)

    saxpy = staticmethod(saxpy)

    def fill(x: 'signed char *', arg1: 'unsigned int', v: 'signed char const &') -> "void":
        """fill(signed char * x, unsigned int arg1, signed char const & v)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_fill(x, arg1, v)

    fill = staticmethod(fill)

    def reverse(x: 'signed char *', arg1: 'unsigned int') -> "void":
        """reverse(signed char * x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_reverse(x, arg1)

    reverse = staticmethod(reverse)

    def dot_product(arg0: 'signed char const *', arg1: 'signed char const *', arg2: 'unsigned int') -> "signed char":
        """dot_product(signed char const * arg0, signed char const * arg1, unsigned int arg2) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_dot_product(arg0, arg1, arg2)

    dot_product = staticmethod(dot_product)

    def inner_product(arg0: 'signed char const *', arg1: 'signed char const *', arg2: 'unsigned int') -> "signed char":
        """inner_product(signed char const * arg0, signed char const * arg1, unsigned int arg2) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_inner_product(arg0, arg1, arg2)

    inner_product = staticmethod(inner_product)

    def conjugate(arg0: 'signed char const *', arg1: 'signed char *', arg2: 'unsigned int') -> "void":
        """conjugate(signed char const * arg0, signed char * arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_conjugate(arg0, arg1, arg2)

    conjugate = staticmethod(conjugate)

    def max_value(arg0: 'signed char const *', arg1: 'unsigned int') -> "signed char":
        """max_value(signed char const * arg0, unsigned int arg1) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_max_value(arg0, arg1)

    max_value = staticmethod(max_value)

    def min_value(arg0: 'signed char const *', arg1: 'unsigned int') -> "signed char":
        """min_value(signed char const * arg0, unsigned int arg1) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_min_value(arg0, arg1)

    min_value = staticmethod(min_value)

    def arg_max(arg0: 'signed char const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_max(signed char const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_arg_max(arg0, arg1)

    arg_max = staticmethod(arg_max)

    def arg_min(arg0: 'signed char const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_min(signed char const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_arg_min(arg0, arg1)

    arg_min = staticmethod(arg_min)

    def mean(p: 'signed char const *', n: 'unsigned int') -> "signed char":
        """mean(signed char const * p, unsigned int n) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_mean(p, n)

    mean = staticmethod(mean)

    def std(p: 'signed char const *', n: 'unsigned int') -> "double":
        """std(signed char const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_std(p, n)

    std = staticmethod(std)

    def sum_sq_diff_means(v: 'signed char const *', n: 'unsigned int') -> "signed char":
        """sum_sq_diff_means(signed char const * v, unsigned int n) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_sum_sq_diff_means(v, n)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)

    def one_norm(p: 'signed char const *', n: 'unsigned int') -> "unsigned char":
        """one_norm(signed char const * p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_one_norm(p, n)

    one_norm = staticmethod(one_norm)

    def two_norm(p: 'signed char const *', n: 'unsigned int') -> "unsigned char":
        """two_norm(signed char const * p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_two_norm(p, n)

    two_norm = staticmethod(two_norm)

    def inf_norm(p: 'signed char const *', n: 'unsigned int') -> "unsigned char":
        """inf_norm(signed char const * p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_inf_norm(p, n)

    inf_norm = staticmethod(inf_norm)

    def two_nrm2(p: 'signed char const *', n: 'unsigned int') -> "unsigned char":
        """two_nrm2(signed char const * p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_two_nrm2(p, n)

    two_nrm2 = staticmethod(two_nrm2)

    def rms_norm(p: 'signed char const *', n: 'unsigned int') -> "unsigned char":
        """rms_norm(signed char const * p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_rms_norm(p, n)

    rms_norm = staticmethod(rms_norm)

    def euclid_dist_sq(arg0: 'signed char const *', arg1: 'signed char const *', arg2: 'unsigned int') -> "signed char":
        """euclid_dist_sq(signed char const * arg0, signed char const * arg1, unsigned int arg2) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_euclid_dist_sq(arg0, arg1, arg2)

    euclid_dist_sq = staticmethod(euclid_dist_sq)

    def allocate_Tptr(n: 'unsigned long long const') -> "signed char **":
        """allocate_Tptr(unsigned long long const n) -> signed char **"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_allocate_Tptr(n)

    allocate_Tptr = staticmethod(allocate_Tptr)

    def allocate_T(n: 'unsigned long long const') -> "signed char *":
        """allocate_T(unsigned long long const n) -> signed char *"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_allocate_T(n)

    allocate_T = staticmethod(allocate_T)

    def deallocate(*args) -> "void":
        """
        deallocate(signed char ** arg0, unsigned long long const n_when_allocated)
        deallocate(signed char * arg0, unsigned long long const n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSC_deallocate(*args)

    deallocate = staticmethod(deallocate)

    def __init__(self, *args):
        """
        __init__(vnl_c_vectorSC self) -> vnl_c_vectorSC
        __init__(vnl_c_vectorSC self, vnl_c_vectorSC arg0) -> vnl_c_vectorSC
        """
        _vnl_c_vectorPython.vnl_c_vectorSC_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorSC(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorSC
vnl_c_vectorSC_swigregister = _vnl_c_vectorPython.vnl_c_vectorSC_swigregister
vnl_c_vectorSC_swigregister(vnl_c_vectorSC)

def vnl_c_vectorSC_sum(v: 'signed char const *', n: 'unsigned int') -> "signed char":
    """vnl_c_vectorSC_sum(signed char const * v, unsigned int n) -> signed char"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_sum(v, n)

def vnl_c_vectorSC_squared_magnitude(p: 'signed char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorSC_squared_magnitude(signed char const * p, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_squared_magnitude(p, n)

def vnl_c_vectorSC_normalize(arg0: 'signed char *', n: 'unsigned int') -> "void":
    """vnl_c_vectorSC_normalize(signed char * arg0, unsigned int n)"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_normalize(arg0, n)

def vnl_c_vectorSC_copy(x: 'signed char const *', y: 'signed char *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSC_copy(signed char const * x, signed char * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_copy(x, y, arg2)

def vnl_c_vectorSC_scale(x: 'signed char const *', y: 'signed char *', arg2: 'unsigned int', arg3: 'signed char const &') -> "void":
    """vnl_c_vectorSC_scale(signed char const * x, signed char * y, unsigned int arg2, signed char const & arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_scale(x, y, arg2, arg3)

def vnl_c_vectorSC_add(*args) -> "void":
    """
    add(signed char const * x, signed char const * y, signed char * z, unsigned int arg3)
    vnl_c_vectorSC_add(signed char const * x, signed char const & y, signed char * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSC_add(*args)

def vnl_c_vectorSC_subtract(*args) -> "void":
    """
    subtract(signed char const * x, signed char const * y, signed char * z, unsigned int arg3)
    vnl_c_vectorSC_subtract(signed char const * x, signed char const & y, signed char * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSC_subtract(*args)

def vnl_c_vectorSC_multiply(*args) -> "void":
    """
    multiply(signed char const * x, signed char const * y, signed char * z, unsigned int arg3)
    vnl_c_vectorSC_multiply(signed char const * x, signed char const & y, signed char * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSC_multiply(*args)

def vnl_c_vectorSC_divide(*args) -> "void":
    """
    divide(signed char const * x, signed char const * y, signed char * z, unsigned int arg3)
    vnl_c_vectorSC_divide(signed char const * x, signed char const & y, signed char * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSC_divide(*args)

def vnl_c_vectorSC_negate(x: 'signed char const *', y: 'signed char *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSC_negate(signed char const * x, signed char * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_negate(x, y, arg2)

def vnl_c_vectorSC_invert(x: 'signed char const *', y: 'signed char *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSC_invert(signed char const * x, signed char * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_invert(x, y, arg2)

def vnl_c_vectorSC_saxpy(a: 'signed char const &', x: 'signed char const *', y: 'signed char *', arg3: 'unsigned int') -> "void":
    """vnl_c_vectorSC_saxpy(signed char const & a, signed char const * x, signed char * y, unsigned int arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_saxpy(a, x, y, arg3)

def vnl_c_vectorSC_fill(x: 'signed char *', arg1: 'unsigned int', v: 'signed char const &') -> "void":
    """vnl_c_vectorSC_fill(signed char * x, unsigned int arg1, signed char const & v)"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_fill(x, arg1, v)

def vnl_c_vectorSC_reverse(x: 'signed char *', arg1: 'unsigned int') -> "void":
    """vnl_c_vectorSC_reverse(signed char * x, unsigned int arg1)"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_reverse(x, arg1)

def vnl_c_vectorSC_dot_product(arg0: 'signed char const *', arg1: 'signed char const *', arg2: 'unsigned int') -> "signed char":
    """vnl_c_vectorSC_dot_product(signed char const * arg0, signed char const * arg1, unsigned int arg2) -> signed char"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_dot_product(arg0, arg1, arg2)

def vnl_c_vectorSC_inner_product(arg0: 'signed char const *', arg1: 'signed char const *', arg2: 'unsigned int') -> "signed char":
    """vnl_c_vectorSC_inner_product(signed char const * arg0, signed char const * arg1, unsigned int arg2) -> signed char"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_inner_product(arg0, arg1, arg2)

def vnl_c_vectorSC_conjugate(arg0: 'signed char const *', arg1: 'signed char *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSC_conjugate(signed char const * arg0, signed char * arg1, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_conjugate(arg0, arg1, arg2)

def vnl_c_vectorSC_max_value(arg0: 'signed char const *', arg1: 'unsigned int') -> "signed char":
    """vnl_c_vectorSC_max_value(signed char const * arg0, unsigned int arg1) -> signed char"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_max_value(arg0, arg1)

def vnl_c_vectorSC_min_value(arg0: 'signed char const *', arg1: 'unsigned int') -> "signed char":
    """vnl_c_vectorSC_min_value(signed char const * arg0, unsigned int arg1) -> signed char"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_min_value(arg0, arg1)

def vnl_c_vectorSC_arg_max(arg0: 'signed char const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorSC_arg_max(signed char const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_arg_max(arg0, arg1)

def vnl_c_vectorSC_arg_min(arg0: 'signed char const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorSC_arg_min(signed char const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_arg_min(arg0, arg1)

def vnl_c_vectorSC_mean(p: 'signed char const *', n: 'unsigned int') -> "signed char":
    """vnl_c_vectorSC_mean(signed char const * p, unsigned int n) -> signed char"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_mean(p, n)

def vnl_c_vectorSC_std(p: 'signed char const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorSC_std(signed char const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_std(p, n)

def vnl_c_vectorSC_sum_sq_diff_means(v: 'signed char const *', n: 'unsigned int') -> "signed char":
    """vnl_c_vectorSC_sum_sq_diff_means(signed char const * v, unsigned int n) -> signed char"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_sum_sq_diff_means(v, n)

def vnl_c_vectorSC_one_norm(p: 'signed char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorSC_one_norm(signed char const * p, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_one_norm(p, n)

def vnl_c_vectorSC_two_norm(p: 'signed char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorSC_two_norm(signed char const * p, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_two_norm(p, n)

def vnl_c_vectorSC_inf_norm(p: 'signed char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorSC_inf_norm(signed char const * p, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_inf_norm(p, n)

def vnl_c_vectorSC_two_nrm2(p: 'signed char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorSC_two_nrm2(signed char const * p, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_two_nrm2(p, n)

def vnl_c_vectorSC_rms_norm(p: 'signed char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorSC_rms_norm(signed char const * p, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_rms_norm(p, n)

def vnl_c_vectorSC_euclid_dist_sq(arg0: 'signed char const *', arg1: 'signed char const *', arg2: 'unsigned int') -> "signed char":
    """vnl_c_vectorSC_euclid_dist_sq(signed char const * arg0, signed char const * arg1, unsigned int arg2) -> signed char"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_euclid_dist_sq(arg0, arg1, arg2)

def vnl_c_vectorSC_allocate_Tptr(n: 'unsigned long long const') -> "signed char **":
    """vnl_c_vectorSC_allocate_Tptr(unsigned long long const n) -> signed char **"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_allocate_Tptr(n)

def vnl_c_vectorSC_allocate_T(n: 'unsigned long long const') -> "signed char *":
    """vnl_c_vectorSC_allocate_T(unsigned long long const n) -> signed char *"""
    return _vnl_c_vectorPython.vnl_c_vectorSC_allocate_T(n)

def vnl_c_vectorSC_deallocate(*args) -> "void":
    """
    deallocate(signed char ** arg0, unsigned long long const n_when_allocated)
    vnl_c_vectorSC_deallocate(signed char * arg0, unsigned long long const n_when_allocated)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSC_deallocate(*args)

class vnl_c_vectorSI(object):
    """Proxy of C++ vnl_c_vectorSI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def sum(v: 'int const *', n: 'unsigned int') -> "int":
        """sum(int const * v, unsigned int n) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_sum(v, n)

    sum = staticmethod(sum)

    def squared_magnitude(p: 'int const *', n: 'unsigned int') -> "unsigned int":
        """squared_magnitude(int const * p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_squared_magnitude(p, n)

    squared_magnitude = staticmethod(squared_magnitude)

    def normalize(arg0: 'int *', n: 'unsigned int') -> "void":
        """normalize(int * arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_normalize(arg0, n)

    normalize = staticmethod(normalize)

    def copy(x: 'int const *', y: 'int *', arg2: 'unsigned int') -> "void":
        """copy(int const * x, int * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_copy(x, y, arg2)

    copy = staticmethod(copy)

    def scale(x: 'int const *', y: 'int *', arg2: 'unsigned int', arg3: 'int const &') -> "void":
        """scale(int const * x, int * y, unsigned int arg2, int const & arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_scale(x, y, arg2, arg3)

    scale = staticmethod(scale)

    def add(*args) -> "void":
        """
        add(int const * x, int const * y, int * z, unsigned int arg3)
        add(int const * x, int const & y, int * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSI_add(*args)

    add = staticmethod(add)

    def subtract(*args) -> "void":
        """
        subtract(int const * x, int const * y, int * z, unsigned int arg3)
        subtract(int const * x, int const & y, int * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSI_subtract(*args)

    subtract = staticmethod(subtract)

    def multiply(*args) -> "void":
        """
        multiply(int const * x, int const * y, int * z, unsigned int arg3)
        multiply(int const * x, int const & y, int * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSI_multiply(*args)

    multiply = staticmethod(multiply)

    def divide(*args) -> "void":
        """
        divide(int const * x, int const * y, int * z, unsigned int arg3)
        divide(int const * x, int const & y, int * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSI_divide(*args)

    divide = staticmethod(divide)

    def negate(x: 'int const *', y: 'int *', arg2: 'unsigned int') -> "void":
        """negate(int const * x, int * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_negate(x, y, arg2)

    negate = staticmethod(negate)

    def invert(x: 'int const *', y: 'int *', arg2: 'unsigned int') -> "void":
        """invert(int const * x, int * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_invert(x, y, arg2)

    invert = staticmethod(invert)

    def saxpy(a: 'int const &', x: 'int const *', y: 'int *', arg3: 'unsigned int') -> "void":
        """saxpy(int const & a, int const * x, int * y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_saxpy(a, x, y, arg3)

    saxpy = staticmethod(saxpy)

    def fill(x: 'int *', arg1: 'unsigned int', v: 'int const &') -> "void":
        """fill(int * x, unsigned int arg1, int const & v)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_fill(x, arg1, v)

    fill = staticmethod(fill)

    def reverse(x: 'int *', arg1: 'unsigned int') -> "void":
        """reverse(int * x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_reverse(x, arg1)

    reverse = staticmethod(reverse)

    def dot_product(arg0: 'int const *', arg1: 'int const *', arg2: 'unsigned int') -> "int":
        """dot_product(int const * arg0, int const * arg1, unsigned int arg2) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_dot_product(arg0, arg1, arg2)

    dot_product = staticmethod(dot_product)

    def inner_product(arg0: 'int const *', arg1: 'int const *', arg2: 'unsigned int') -> "int":
        """inner_product(int const * arg0, int const * arg1, unsigned int arg2) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_inner_product(arg0, arg1, arg2)

    inner_product = staticmethod(inner_product)

    def conjugate(arg0: 'int const *', arg1: 'int *', arg2: 'unsigned int') -> "void":
        """conjugate(int const * arg0, int * arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_conjugate(arg0, arg1, arg2)

    conjugate = staticmethod(conjugate)

    def max_value(arg0: 'int const *', arg1: 'unsigned int') -> "int":
        """max_value(int const * arg0, unsigned int arg1) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_max_value(arg0, arg1)

    max_value = staticmethod(max_value)

    def min_value(arg0: 'int const *', arg1: 'unsigned int') -> "int":
        """min_value(int const * arg0, unsigned int arg1) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_min_value(arg0, arg1)

    min_value = staticmethod(min_value)

    def arg_max(arg0: 'int const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_max(int const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_arg_max(arg0, arg1)

    arg_max = staticmethod(arg_max)

    def arg_min(arg0: 'int const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_min(int const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_arg_min(arg0, arg1)

    arg_min = staticmethod(arg_min)

    def mean(p: 'int const *', n: 'unsigned int') -> "int":
        """mean(int const * p, unsigned int n) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_mean(p, n)

    mean = staticmethod(mean)

    def std(p: 'int const *', n: 'unsigned int') -> "double":
        """std(int const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_std(p, n)

    std = staticmethod(std)

    def sum_sq_diff_means(v: 'int const *', n: 'unsigned int') -> "int":
        """sum_sq_diff_means(int const * v, unsigned int n) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_sum_sq_diff_means(v, n)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)

    def one_norm(p: 'int const *', n: 'unsigned int') -> "unsigned int":
        """one_norm(int const * p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_one_norm(p, n)

    one_norm = staticmethod(one_norm)

    def two_norm(p: 'int const *', n: 'unsigned int') -> "unsigned int":
        """two_norm(int const * p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_two_norm(p, n)

    two_norm = staticmethod(two_norm)

    def inf_norm(p: 'int const *', n: 'unsigned int') -> "unsigned int":
        """inf_norm(int const * p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_inf_norm(p, n)

    inf_norm = staticmethod(inf_norm)

    def two_nrm2(p: 'int const *', n: 'unsigned int') -> "unsigned int":
        """two_nrm2(int const * p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_two_nrm2(p, n)

    two_nrm2 = staticmethod(two_nrm2)

    def rms_norm(p: 'int const *', n: 'unsigned int') -> "unsigned int":
        """rms_norm(int const * p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_rms_norm(p, n)

    rms_norm = staticmethod(rms_norm)

    def euclid_dist_sq(arg0: 'int const *', arg1: 'int const *', arg2: 'unsigned int') -> "int":
        """euclid_dist_sq(int const * arg0, int const * arg1, unsigned int arg2) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_euclid_dist_sq(arg0, arg1, arg2)

    euclid_dist_sq = staticmethod(euclid_dist_sq)

    def allocate_Tptr(n: 'unsigned long long const') -> "int **":
        """allocate_Tptr(unsigned long long const n) -> int **"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_allocate_Tptr(n)

    allocate_Tptr = staticmethod(allocate_Tptr)

    def allocate_T(n: 'unsigned long long const') -> "int *":
        """allocate_T(unsigned long long const n) -> int *"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_allocate_T(n)

    allocate_T = staticmethod(allocate_T)

    def deallocate(*args) -> "void":
        """
        deallocate(int ** arg0, unsigned long long const n_when_allocated)
        deallocate(int * arg0, unsigned long long const n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSI_deallocate(*args)

    deallocate = staticmethod(deallocate)

    def __init__(self, *args):
        """
        __init__(vnl_c_vectorSI self) -> vnl_c_vectorSI
        __init__(vnl_c_vectorSI self, vnl_c_vectorSI arg0) -> vnl_c_vectorSI
        """
        _vnl_c_vectorPython.vnl_c_vectorSI_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorSI(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorSI
vnl_c_vectorSI_swigregister = _vnl_c_vectorPython.vnl_c_vectorSI_swigregister
vnl_c_vectorSI_swigregister(vnl_c_vectorSI)

def vnl_c_vectorSI_sum(v: 'int const *', n: 'unsigned int') -> "int":
    """vnl_c_vectorSI_sum(int const * v, unsigned int n) -> int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_sum(v, n)

def vnl_c_vectorSI_squared_magnitude(p: 'int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorSI_squared_magnitude(int const * p, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_squared_magnitude(p, n)

def vnl_c_vectorSI_normalize(arg0: 'int *', n: 'unsigned int') -> "void":
    """vnl_c_vectorSI_normalize(int * arg0, unsigned int n)"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_normalize(arg0, n)

def vnl_c_vectorSI_copy(x: 'int const *', y: 'int *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSI_copy(int const * x, int * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_copy(x, y, arg2)

def vnl_c_vectorSI_scale(x: 'int const *', y: 'int *', arg2: 'unsigned int', arg3: 'int const &') -> "void":
    """vnl_c_vectorSI_scale(int const * x, int * y, unsigned int arg2, int const & arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_scale(x, y, arg2, arg3)

def vnl_c_vectorSI_add(*args) -> "void":
    """
    add(int const * x, int const * y, int * z, unsigned int arg3)
    vnl_c_vectorSI_add(int const * x, int const & y, int * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSI_add(*args)

def vnl_c_vectorSI_subtract(*args) -> "void":
    """
    subtract(int const * x, int const * y, int * z, unsigned int arg3)
    vnl_c_vectorSI_subtract(int const * x, int const & y, int * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSI_subtract(*args)

def vnl_c_vectorSI_multiply(*args) -> "void":
    """
    multiply(int const * x, int const * y, int * z, unsigned int arg3)
    vnl_c_vectorSI_multiply(int const * x, int const & y, int * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSI_multiply(*args)

def vnl_c_vectorSI_divide(*args) -> "void":
    """
    divide(int const * x, int const * y, int * z, unsigned int arg3)
    vnl_c_vectorSI_divide(int const * x, int const & y, int * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSI_divide(*args)

def vnl_c_vectorSI_negate(x: 'int const *', y: 'int *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSI_negate(int const * x, int * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_negate(x, y, arg2)

def vnl_c_vectorSI_invert(x: 'int const *', y: 'int *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSI_invert(int const * x, int * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_invert(x, y, arg2)

def vnl_c_vectorSI_saxpy(a: 'int const &', x: 'int const *', y: 'int *', arg3: 'unsigned int') -> "void":
    """vnl_c_vectorSI_saxpy(int const & a, int const * x, int * y, unsigned int arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_saxpy(a, x, y, arg3)

def vnl_c_vectorSI_fill(x: 'int *', arg1: 'unsigned int', v: 'int const &') -> "void":
    """vnl_c_vectorSI_fill(int * x, unsigned int arg1, int const & v)"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_fill(x, arg1, v)

def vnl_c_vectorSI_reverse(x: 'int *', arg1: 'unsigned int') -> "void":
    """vnl_c_vectorSI_reverse(int * x, unsigned int arg1)"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_reverse(x, arg1)

def vnl_c_vectorSI_dot_product(arg0: 'int const *', arg1: 'int const *', arg2: 'unsigned int') -> "int":
    """vnl_c_vectorSI_dot_product(int const * arg0, int const * arg1, unsigned int arg2) -> int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_dot_product(arg0, arg1, arg2)

def vnl_c_vectorSI_inner_product(arg0: 'int const *', arg1: 'int const *', arg2: 'unsigned int') -> "int":
    """vnl_c_vectorSI_inner_product(int const * arg0, int const * arg1, unsigned int arg2) -> int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_inner_product(arg0, arg1, arg2)

def vnl_c_vectorSI_conjugate(arg0: 'int const *', arg1: 'int *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSI_conjugate(int const * arg0, int * arg1, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_conjugate(arg0, arg1, arg2)

def vnl_c_vectorSI_max_value(arg0: 'int const *', arg1: 'unsigned int') -> "int":
    """vnl_c_vectorSI_max_value(int const * arg0, unsigned int arg1) -> int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_max_value(arg0, arg1)

def vnl_c_vectorSI_min_value(arg0: 'int const *', arg1: 'unsigned int') -> "int":
    """vnl_c_vectorSI_min_value(int const * arg0, unsigned int arg1) -> int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_min_value(arg0, arg1)

def vnl_c_vectorSI_arg_max(arg0: 'int const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorSI_arg_max(int const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_arg_max(arg0, arg1)

def vnl_c_vectorSI_arg_min(arg0: 'int const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorSI_arg_min(int const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_arg_min(arg0, arg1)

def vnl_c_vectorSI_mean(p: 'int const *', n: 'unsigned int') -> "int":
    """vnl_c_vectorSI_mean(int const * p, unsigned int n) -> int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_mean(p, n)

def vnl_c_vectorSI_std(p: 'int const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorSI_std(int const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_std(p, n)

def vnl_c_vectorSI_sum_sq_diff_means(v: 'int const *', n: 'unsigned int') -> "int":
    """vnl_c_vectorSI_sum_sq_diff_means(int const * v, unsigned int n) -> int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_sum_sq_diff_means(v, n)

def vnl_c_vectorSI_one_norm(p: 'int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorSI_one_norm(int const * p, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_one_norm(p, n)

def vnl_c_vectorSI_two_norm(p: 'int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorSI_two_norm(int const * p, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_two_norm(p, n)

def vnl_c_vectorSI_inf_norm(p: 'int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorSI_inf_norm(int const * p, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_inf_norm(p, n)

def vnl_c_vectorSI_two_nrm2(p: 'int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorSI_two_nrm2(int const * p, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_two_nrm2(p, n)

def vnl_c_vectorSI_rms_norm(p: 'int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorSI_rms_norm(int const * p, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_rms_norm(p, n)

def vnl_c_vectorSI_euclid_dist_sq(arg0: 'int const *', arg1: 'int const *', arg2: 'unsigned int') -> "int":
    """vnl_c_vectorSI_euclid_dist_sq(int const * arg0, int const * arg1, unsigned int arg2) -> int"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_euclid_dist_sq(arg0, arg1, arg2)

def vnl_c_vectorSI_allocate_Tptr(n: 'unsigned long long const') -> "int **":
    """vnl_c_vectorSI_allocate_Tptr(unsigned long long const n) -> int **"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_allocate_Tptr(n)

def vnl_c_vectorSI_allocate_T(n: 'unsigned long long const') -> "int *":
    """vnl_c_vectorSI_allocate_T(unsigned long long const n) -> int *"""
    return _vnl_c_vectorPython.vnl_c_vectorSI_allocate_T(n)

def vnl_c_vectorSI_deallocate(*args) -> "void":
    """
    deallocate(int ** arg0, unsigned long long const n_when_allocated)
    vnl_c_vectorSI_deallocate(int * arg0, unsigned long long const n_when_allocated)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSI_deallocate(*args)

class vnl_c_vectorSL(object):
    """Proxy of C++ vnl_c_vectorSL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def sum(v: 'long const *', n: 'unsigned int') -> "long":
        """sum(long const * v, unsigned int n) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_sum(v, n)

    sum = staticmethod(sum)

    def squared_magnitude(p: 'long const *', n: 'unsigned int') -> "unsigned long":
        """squared_magnitude(long const * p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_squared_magnitude(p, n)

    squared_magnitude = staticmethod(squared_magnitude)

    def normalize(arg0: 'long *', n: 'unsigned int') -> "void":
        """normalize(long * arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_normalize(arg0, n)

    normalize = staticmethod(normalize)

    def copy(x: 'long const *', y: 'long *', arg2: 'unsigned int') -> "void":
        """copy(long const * x, long * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_copy(x, y, arg2)

    copy = staticmethod(copy)

    def scale(x: 'long const *', y: 'long *', arg2: 'unsigned int', arg3: 'long const &') -> "void":
        """scale(long const * x, long * y, unsigned int arg2, long const & arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_scale(x, y, arg2, arg3)

    scale = staticmethod(scale)

    def add(*args) -> "void":
        """
        add(long const * x, long const * y, long * z, unsigned int arg3)
        add(long const * x, long const & y, long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSL_add(*args)

    add = staticmethod(add)

    def subtract(*args) -> "void":
        """
        subtract(long const * x, long const * y, long * z, unsigned int arg3)
        subtract(long const * x, long const & y, long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSL_subtract(*args)

    subtract = staticmethod(subtract)

    def multiply(*args) -> "void":
        """
        multiply(long const * x, long const * y, long * z, unsigned int arg3)
        multiply(long const * x, long const & y, long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSL_multiply(*args)

    multiply = staticmethod(multiply)

    def divide(*args) -> "void":
        """
        divide(long const * x, long const * y, long * z, unsigned int arg3)
        divide(long const * x, long const & y, long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSL_divide(*args)

    divide = staticmethod(divide)

    def negate(x: 'long const *', y: 'long *', arg2: 'unsigned int') -> "void":
        """negate(long const * x, long * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_negate(x, y, arg2)

    negate = staticmethod(negate)

    def invert(x: 'long const *', y: 'long *', arg2: 'unsigned int') -> "void":
        """invert(long const * x, long * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_invert(x, y, arg2)

    invert = staticmethod(invert)

    def saxpy(a: 'long const &', x: 'long const *', y: 'long *', arg3: 'unsigned int') -> "void":
        """saxpy(long const & a, long const * x, long * y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_saxpy(a, x, y, arg3)

    saxpy = staticmethod(saxpy)

    def fill(x: 'long *', arg1: 'unsigned int', v: 'long const &') -> "void":
        """fill(long * x, unsigned int arg1, long const & v)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_fill(x, arg1, v)

    fill = staticmethod(fill)

    def reverse(x: 'long *', arg1: 'unsigned int') -> "void":
        """reverse(long * x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_reverse(x, arg1)

    reverse = staticmethod(reverse)

    def dot_product(arg0: 'long const *', arg1: 'long const *', arg2: 'unsigned int') -> "long":
        """dot_product(long const * arg0, long const * arg1, unsigned int arg2) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_dot_product(arg0, arg1, arg2)

    dot_product = staticmethod(dot_product)

    def inner_product(arg0: 'long const *', arg1: 'long const *', arg2: 'unsigned int') -> "long":
        """inner_product(long const * arg0, long const * arg1, unsigned int arg2) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_inner_product(arg0, arg1, arg2)

    inner_product = staticmethod(inner_product)

    def conjugate(arg0: 'long const *', arg1: 'long *', arg2: 'unsigned int') -> "void":
        """conjugate(long const * arg0, long * arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_conjugate(arg0, arg1, arg2)

    conjugate = staticmethod(conjugate)

    def max_value(arg0: 'long const *', arg1: 'unsigned int') -> "long":
        """max_value(long const * arg0, unsigned int arg1) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_max_value(arg0, arg1)

    max_value = staticmethod(max_value)

    def min_value(arg0: 'long const *', arg1: 'unsigned int') -> "long":
        """min_value(long const * arg0, unsigned int arg1) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_min_value(arg0, arg1)

    min_value = staticmethod(min_value)

    def arg_max(arg0: 'long const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_max(long const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_arg_max(arg0, arg1)

    arg_max = staticmethod(arg_max)

    def arg_min(arg0: 'long const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_min(long const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_arg_min(arg0, arg1)

    arg_min = staticmethod(arg_min)

    def mean(p: 'long const *', n: 'unsigned int') -> "long":
        """mean(long const * p, unsigned int n) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_mean(p, n)

    mean = staticmethod(mean)

    def std(p: 'long const *', n: 'unsigned int') -> "double":
        """std(long const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_std(p, n)

    std = staticmethod(std)

    def sum_sq_diff_means(v: 'long const *', n: 'unsigned int') -> "long":
        """sum_sq_diff_means(long const * v, unsigned int n) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_sum_sq_diff_means(v, n)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)

    def one_norm(p: 'long const *', n: 'unsigned int') -> "unsigned long":
        """one_norm(long const * p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_one_norm(p, n)

    one_norm = staticmethod(one_norm)

    def two_norm(p: 'long const *', n: 'unsigned int') -> "unsigned long":
        """two_norm(long const * p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_two_norm(p, n)

    two_norm = staticmethod(two_norm)

    def inf_norm(p: 'long const *', n: 'unsigned int') -> "unsigned long":
        """inf_norm(long const * p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_inf_norm(p, n)

    inf_norm = staticmethod(inf_norm)

    def two_nrm2(p: 'long const *', n: 'unsigned int') -> "unsigned long":
        """two_nrm2(long const * p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_two_nrm2(p, n)

    two_nrm2 = staticmethod(two_nrm2)

    def rms_norm(p: 'long const *', n: 'unsigned int') -> "unsigned long":
        """rms_norm(long const * p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_rms_norm(p, n)

    rms_norm = staticmethod(rms_norm)

    def euclid_dist_sq(arg0: 'long const *', arg1: 'long const *', arg2: 'unsigned int') -> "long":
        """euclid_dist_sq(long const * arg0, long const * arg1, unsigned int arg2) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_euclid_dist_sq(arg0, arg1, arg2)

    euclid_dist_sq = staticmethod(euclid_dist_sq)

    def allocate_Tptr(n: 'unsigned long long const') -> "long **":
        """allocate_Tptr(unsigned long long const n) -> long **"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_allocate_Tptr(n)

    allocate_Tptr = staticmethod(allocate_Tptr)

    def allocate_T(n: 'unsigned long long const') -> "long *":
        """allocate_T(unsigned long long const n) -> long *"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_allocate_T(n)

    allocate_T = staticmethod(allocate_T)

    def deallocate(*args) -> "void":
        """
        deallocate(long ** arg0, unsigned long long const n_when_allocated)
        deallocate(long * arg0, unsigned long long const n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSL_deallocate(*args)

    deallocate = staticmethod(deallocate)

    def __init__(self, *args):
        """
        __init__(vnl_c_vectorSL self) -> vnl_c_vectorSL
        __init__(vnl_c_vectorSL self, vnl_c_vectorSL arg0) -> vnl_c_vectorSL
        """
        _vnl_c_vectorPython.vnl_c_vectorSL_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorSL(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorSL
vnl_c_vectorSL_swigregister = _vnl_c_vectorPython.vnl_c_vectorSL_swigregister
vnl_c_vectorSL_swigregister(vnl_c_vectorSL)

def vnl_c_vectorSL_sum(v: 'long const *', n: 'unsigned int') -> "long":
    """vnl_c_vectorSL_sum(long const * v, unsigned int n) -> long"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_sum(v, n)

def vnl_c_vectorSL_squared_magnitude(p: 'long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorSL_squared_magnitude(long const * p, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_squared_magnitude(p, n)

def vnl_c_vectorSL_normalize(arg0: 'long *', n: 'unsigned int') -> "void":
    """vnl_c_vectorSL_normalize(long * arg0, unsigned int n)"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_normalize(arg0, n)

def vnl_c_vectorSL_copy(x: 'long const *', y: 'long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSL_copy(long const * x, long * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_copy(x, y, arg2)

def vnl_c_vectorSL_scale(x: 'long const *', y: 'long *', arg2: 'unsigned int', arg3: 'long const &') -> "void":
    """vnl_c_vectorSL_scale(long const * x, long * y, unsigned int arg2, long const & arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_scale(x, y, arg2, arg3)

def vnl_c_vectorSL_add(*args) -> "void":
    """
    add(long const * x, long const * y, long * z, unsigned int arg3)
    vnl_c_vectorSL_add(long const * x, long const & y, long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSL_add(*args)

def vnl_c_vectorSL_subtract(*args) -> "void":
    """
    subtract(long const * x, long const * y, long * z, unsigned int arg3)
    vnl_c_vectorSL_subtract(long const * x, long const & y, long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSL_subtract(*args)

def vnl_c_vectorSL_multiply(*args) -> "void":
    """
    multiply(long const * x, long const * y, long * z, unsigned int arg3)
    vnl_c_vectorSL_multiply(long const * x, long const & y, long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSL_multiply(*args)

def vnl_c_vectorSL_divide(*args) -> "void":
    """
    divide(long const * x, long const * y, long * z, unsigned int arg3)
    vnl_c_vectorSL_divide(long const * x, long const & y, long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSL_divide(*args)

def vnl_c_vectorSL_negate(x: 'long const *', y: 'long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSL_negate(long const * x, long * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_negate(x, y, arg2)

def vnl_c_vectorSL_invert(x: 'long const *', y: 'long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSL_invert(long const * x, long * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_invert(x, y, arg2)

def vnl_c_vectorSL_saxpy(a: 'long const &', x: 'long const *', y: 'long *', arg3: 'unsigned int') -> "void":
    """vnl_c_vectorSL_saxpy(long const & a, long const * x, long * y, unsigned int arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_saxpy(a, x, y, arg3)

def vnl_c_vectorSL_fill(x: 'long *', arg1: 'unsigned int', v: 'long const &') -> "void":
    """vnl_c_vectorSL_fill(long * x, unsigned int arg1, long const & v)"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_fill(x, arg1, v)

def vnl_c_vectorSL_reverse(x: 'long *', arg1: 'unsigned int') -> "void":
    """vnl_c_vectorSL_reverse(long * x, unsigned int arg1)"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_reverse(x, arg1)

def vnl_c_vectorSL_dot_product(arg0: 'long const *', arg1: 'long const *', arg2: 'unsigned int') -> "long":
    """vnl_c_vectorSL_dot_product(long const * arg0, long const * arg1, unsigned int arg2) -> long"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_dot_product(arg0, arg1, arg2)

def vnl_c_vectorSL_inner_product(arg0: 'long const *', arg1: 'long const *', arg2: 'unsigned int') -> "long":
    """vnl_c_vectorSL_inner_product(long const * arg0, long const * arg1, unsigned int arg2) -> long"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_inner_product(arg0, arg1, arg2)

def vnl_c_vectorSL_conjugate(arg0: 'long const *', arg1: 'long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSL_conjugate(long const * arg0, long * arg1, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_conjugate(arg0, arg1, arg2)

def vnl_c_vectorSL_max_value(arg0: 'long const *', arg1: 'unsigned int') -> "long":
    """vnl_c_vectorSL_max_value(long const * arg0, unsigned int arg1) -> long"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_max_value(arg0, arg1)

def vnl_c_vectorSL_min_value(arg0: 'long const *', arg1: 'unsigned int') -> "long":
    """vnl_c_vectorSL_min_value(long const * arg0, unsigned int arg1) -> long"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_min_value(arg0, arg1)

def vnl_c_vectorSL_arg_max(arg0: 'long const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorSL_arg_max(long const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_arg_max(arg0, arg1)

def vnl_c_vectorSL_arg_min(arg0: 'long const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorSL_arg_min(long const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_arg_min(arg0, arg1)

def vnl_c_vectorSL_mean(p: 'long const *', n: 'unsigned int') -> "long":
    """vnl_c_vectorSL_mean(long const * p, unsigned int n) -> long"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_mean(p, n)

def vnl_c_vectorSL_std(p: 'long const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorSL_std(long const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_std(p, n)

def vnl_c_vectorSL_sum_sq_diff_means(v: 'long const *', n: 'unsigned int') -> "long":
    """vnl_c_vectorSL_sum_sq_diff_means(long const * v, unsigned int n) -> long"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_sum_sq_diff_means(v, n)

def vnl_c_vectorSL_one_norm(p: 'long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorSL_one_norm(long const * p, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_one_norm(p, n)

def vnl_c_vectorSL_two_norm(p: 'long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorSL_two_norm(long const * p, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_two_norm(p, n)

def vnl_c_vectorSL_inf_norm(p: 'long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorSL_inf_norm(long const * p, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_inf_norm(p, n)

def vnl_c_vectorSL_two_nrm2(p: 'long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorSL_two_nrm2(long const * p, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_two_nrm2(p, n)

def vnl_c_vectorSL_rms_norm(p: 'long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorSL_rms_norm(long const * p, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_rms_norm(p, n)

def vnl_c_vectorSL_euclid_dist_sq(arg0: 'long const *', arg1: 'long const *', arg2: 'unsigned int') -> "long":
    """vnl_c_vectorSL_euclid_dist_sq(long const * arg0, long const * arg1, unsigned int arg2) -> long"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_euclid_dist_sq(arg0, arg1, arg2)

def vnl_c_vectorSL_allocate_Tptr(n: 'unsigned long long const') -> "long **":
    """vnl_c_vectorSL_allocate_Tptr(unsigned long long const n) -> long **"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_allocate_Tptr(n)

def vnl_c_vectorSL_allocate_T(n: 'unsigned long long const') -> "long *":
    """vnl_c_vectorSL_allocate_T(unsigned long long const n) -> long *"""
    return _vnl_c_vectorPython.vnl_c_vectorSL_allocate_T(n)

def vnl_c_vectorSL_deallocate(*args) -> "void":
    """
    deallocate(long ** arg0, unsigned long long const n_when_allocated)
    vnl_c_vectorSL_deallocate(long * arg0, unsigned long long const n_when_allocated)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSL_deallocate(*args)

class vnl_c_vectorSLL(object):
    """Proxy of C++ vnl_c_vectorSLL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def sum(v: 'long long const *', n: 'unsigned int') -> "long long":
        """sum(long long const * v, unsigned int n) -> long long"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_sum(v, n)

    sum = staticmethod(sum)

    def squared_magnitude(p: 'long long const *', n: 'unsigned int') -> "unsigned long long":
        """squared_magnitude(long long const * p, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_squared_magnitude(p, n)

    squared_magnitude = staticmethod(squared_magnitude)

    def normalize(arg0: 'long long *', n: 'unsigned int') -> "void":
        """normalize(long long * arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_normalize(arg0, n)

    normalize = staticmethod(normalize)

    def copy(x: 'long long const *', y: 'long long *', arg2: 'unsigned int') -> "void":
        """copy(long long const * x, long long * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_copy(x, y, arg2)

    copy = staticmethod(copy)

    def scale(x: 'long long const *', y: 'long long *', arg2: 'unsigned int', arg3: 'long long const &') -> "void":
        """scale(long long const * x, long long * y, unsigned int arg2, long long const & arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_scale(x, y, arg2, arg3)

    scale = staticmethod(scale)

    def add(*args) -> "void":
        """
        add(long long const * x, long long const * y, long long * z, unsigned int arg3)
        add(long long const * x, long long const & y, long long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSLL_add(*args)

    add = staticmethod(add)

    def subtract(*args) -> "void":
        """
        subtract(long long const * x, long long const * y, long long * z, unsigned int arg3)
        subtract(long long const * x, long long const & y, long long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSLL_subtract(*args)

    subtract = staticmethod(subtract)

    def multiply(*args) -> "void":
        """
        multiply(long long const * x, long long const * y, long long * z, unsigned int arg3)
        multiply(long long const * x, long long const & y, long long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSLL_multiply(*args)

    multiply = staticmethod(multiply)

    def divide(*args) -> "void":
        """
        divide(long long const * x, long long const * y, long long * z, unsigned int arg3)
        divide(long long const * x, long long const & y, long long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSLL_divide(*args)

    divide = staticmethod(divide)

    def negate(x: 'long long const *', y: 'long long *', arg2: 'unsigned int') -> "void":
        """negate(long long const * x, long long * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_negate(x, y, arg2)

    negate = staticmethod(negate)

    def invert(x: 'long long const *', y: 'long long *', arg2: 'unsigned int') -> "void":
        """invert(long long const * x, long long * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_invert(x, y, arg2)

    invert = staticmethod(invert)

    def saxpy(a: 'long long const &', x: 'long long const *', y: 'long long *', arg3: 'unsigned int') -> "void":
        """saxpy(long long const & a, long long const * x, long long * y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_saxpy(a, x, y, arg3)

    saxpy = staticmethod(saxpy)

    def fill(x: 'long long *', arg1: 'unsigned int', v: 'long long const &') -> "void":
        """fill(long long * x, unsigned int arg1, long long const & v)"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_fill(x, arg1, v)

    fill = staticmethod(fill)

    def reverse(x: 'long long *', arg1: 'unsigned int') -> "void":
        """reverse(long long * x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_reverse(x, arg1)

    reverse = staticmethod(reverse)

    def dot_product(arg0: 'long long const *', arg1: 'long long const *', arg2: 'unsigned int') -> "long long":
        """dot_product(long long const * arg0, long long const * arg1, unsigned int arg2) -> long long"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_dot_product(arg0, arg1, arg2)

    dot_product = staticmethod(dot_product)

    def inner_product(arg0: 'long long const *', arg1: 'long long const *', arg2: 'unsigned int') -> "long long":
        """inner_product(long long const * arg0, long long const * arg1, unsigned int arg2) -> long long"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_inner_product(arg0, arg1, arg2)

    inner_product = staticmethod(inner_product)

    def conjugate(arg0: 'long long const *', arg1: 'long long *', arg2: 'unsigned int') -> "void":
        """conjugate(long long const * arg0, long long * arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_conjugate(arg0, arg1, arg2)

    conjugate = staticmethod(conjugate)

    def max_value(arg0: 'long long const *', arg1: 'unsigned int') -> "long long":
        """max_value(long long const * arg0, unsigned int arg1) -> long long"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_max_value(arg0, arg1)

    max_value = staticmethod(max_value)

    def min_value(arg0: 'long long const *', arg1: 'unsigned int') -> "long long":
        """min_value(long long const * arg0, unsigned int arg1) -> long long"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_min_value(arg0, arg1)

    min_value = staticmethod(min_value)

    def arg_max(arg0: 'long long const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_max(long long const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_arg_max(arg0, arg1)

    arg_max = staticmethod(arg_max)

    def arg_min(arg0: 'long long const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_min(long long const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_arg_min(arg0, arg1)

    arg_min = staticmethod(arg_min)

    def mean(p: 'long long const *', n: 'unsigned int') -> "long long":
        """mean(long long const * p, unsigned int n) -> long long"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_mean(p, n)

    mean = staticmethod(mean)

    def std(p: 'long long const *', n: 'unsigned int') -> "double":
        """std(long long const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_std(p, n)

    std = staticmethod(std)

    def sum_sq_diff_means(v: 'long long const *', n: 'unsigned int') -> "long long":
        """sum_sq_diff_means(long long const * v, unsigned int n) -> long long"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_sum_sq_diff_means(v, n)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)

    def one_norm(p: 'long long const *', n: 'unsigned int') -> "unsigned long long":
        """one_norm(long long const * p, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_one_norm(p, n)

    one_norm = staticmethod(one_norm)

    def two_norm(p: 'long long const *', n: 'unsigned int') -> "unsigned long long":
        """two_norm(long long const * p, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_two_norm(p, n)

    two_norm = staticmethod(two_norm)

    def inf_norm(p: 'long long const *', n: 'unsigned int') -> "unsigned long long":
        """inf_norm(long long const * p, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_inf_norm(p, n)

    inf_norm = staticmethod(inf_norm)

    def two_nrm2(p: 'long long const *', n: 'unsigned int') -> "unsigned long long":
        """two_nrm2(long long const * p, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_two_nrm2(p, n)

    two_nrm2 = staticmethod(two_nrm2)

    def rms_norm(p: 'long long const *', n: 'unsigned int') -> "unsigned long long":
        """rms_norm(long long const * p, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_rms_norm(p, n)

    rms_norm = staticmethod(rms_norm)

    def euclid_dist_sq(arg0: 'long long const *', arg1: 'long long const *', arg2: 'unsigned int') -> "long long":
        """euclid_dist_sq(long long const * arg0, long long const * arg1, unsigned int arg2) -> long long"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_euclid_dist_sq(arg0, arg1, arg2)

    euclid_dist_sq = staticmethod(euclid_dist_sq)

    def allocate_Tptr(n: 'unsigned long long const') -> "long long **":
        """allocate_Tptr(unsigned long long const n) -> long long **"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_allocate_Tptr(n)

    allocate_Tptr = staticmethod(allocate_Tptr)

    def allocate_T(n: 'unsigned long long const') -> "long long *":
        """allocate_T(unsigned long long const n) -> long long *"""
        return _vnl_c_vectorPython.vnl_c_vectorSLL_allocate_T(n)

    allocate_T = staticmethod(allocate_T)

    def deallocate(*args) -> "void":
        """
        deallocate(long long ** arg0, unsigned long long const n_when_allocated)
        deallocate(long long * arg0, unsigned long long const n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSLL_deallocate(*args)

    deallocate = staticmethod(deallocate)

    def __init__(self, *args):
        """
        __init__(vnl_c_vectorSLL self) -> vnl_c_vectorSLL
        __init__(vnl_c_vectorSLL self, vnl_c_vectorSLL arg0) -> vnl_c_vectorSLL
        """
        _vnl_c_vectorPython.vnl_c_vectorSLL_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorSLL(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorSLL
vnl_c_vectorSLL_swigregister = _vnl_c_vectorPython.vnl_c_vectorSLL_swigregister
vnl_c_vectorSLL_swigregister(vnl_c_vectorSLL)

def vnl_c_vectorSLL_sum(v: 'long long const *', n: 'unsigned int') -> "long long":
    """vnl_c_vectorSLL_sum(long long const * v, unsigned int n) -> long long"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_sum(v, n)

def vnl_c_vectorSLL_squared_magnitude(p: 'long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorSLL_squared_magnitude(long long const * p, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_squared_magnitude(p, n)

def vnl_c_vectorSLL_normalize(arg0: 'long long *', n: 'unsigned int') -> "void":
    """vnl_c_vectorSLL_normalize(long long * arg0, unsigned int n)"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_normalize(arg0, n)

def vnl_c_vectorSLL_copy(x: 'long long const *', y: 'long long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSLL_copy(long long const * x, long long * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_copy(x, y, arg2)

def vnl_c_vectorSLL_scale(x: 'long long const *', y: 'long long *', arg2: 'unsigned int', arg3: 'long long const &') -> "void":
    """vnl_c_vectorSLL_scale(long long const * x, long long * y, unsigned int arg2, long long const & arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_scale(x, y, arg2, arg3)

def vnl_c_vectorSLL_add(*args) -> "void":
    """
    add(long long const * x, long long const * y, long long * z, unsigned int arg3)
    vnl_c_vectorSLL_add(long long const * x, long long const & y, long long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSLL_add(*args)

def vnl_c_vectorSLL_subtract(*args) -> "void":
    """
    subtract(long long const * x, long long const * y, long long * z, unsigned int arg3)
    vnl_c_vectorSLL_subtract(long long const * x, long long const & y, long long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSLL_subtract(*args)

def vnl_c_vectorSLL_multiply(*args) -> "void":
    """
    multiply(long long const * x, long long const * y, long long * z, unsigned int arg3)
    vnl_c_vectorSLL_multiply(long long const * x, long long const & y, long long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSLL_multiply(*args)

def vnl_c_vectorSLL_divide(*args) -> "void":
    """
    divide(long long const * x, long long const * y, long long * z, unsigned int arg3)
    vnl_c_vectorSLL_divide(long long const * x, long long const & y, long long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSLL_divide(*args)

def vnl_c_vectorSLL_negate(x: 'long long const *', y: 'long long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSLL_negate(long long const * x, long long * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_negate(x, y, arg2)

def vnl_c_vectorSLL_invert(x: 'long long const *', y: 'long long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSLL_invert(long long const * x, long long * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_invert(x, y, arg2)

def vnl_c_vectorSLL_saxpy(a: 'long long const &', x: 'long long const *', y: 'long long *', arg3: 'unsigned int') -> "void":
    """vnl_c_vectorSLL_saxpy(long long const & a, long long const * x, long long * y, unsigned int arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_saxpy(a, x, y, arg3)

def vnl_c_vectorSLL_fill(x: 'long long *', arg1: 'unsigned int', v: 'long long const &') -> "void":
    """vnl_c_vectorSLL_fill(long long * x, unsigned int arg1, long long const & v)"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_fill(x, arg1, v)

def vnl_c_vectorSLL_reverse(x: 'long long *', arg1: 'unsigned int') -> "void":
    """vnl_c_vectorSLL_reverse(long long * x, unsigned int arg1)"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_reverse(x, arg1)

def vnl_c_vectorSLL_dot_product(arg0: 'long long const *', arg1: 'long long const *', arg2: 'unsigned int') -> "long long":
    """vnl_c_vectorSLL_dot_product(long long const * arg0, long long const * arg1, unsigned int arg2) -> long long"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_dot_product(arg0, arg1, arg2)

def vnl_c_vectorSLL_inner_product(arg0: 'long long const *', arg1: 'long long const *', arg2: 'unsigned int') -> "long long":
    """vnl_c_vectorSLL_inner_product(long long const * arg0, long long const * arg1, unsigned int arg2) -> long long"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_inner_product(arg0, arg1, arg2)

def vnl_c_vectorSLL_conjugate(arg0: 'long long const *', arg1: 'long long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorSLL_conjugate(long long const * arg0, long long * arg1, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_conjugate(arg0, arg1, arg2)

def vnl_c_vectorSLL_max_value(arg0: 'long long const *', arg1: 'unsigned int') -> "long long":
    """vnl_c_vectorSLL_max_value(long long const * arg0, unsigned int arg1) -> long long"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_max_value(arg0, arg1)

def vnl_c_vectorSLL_min_value(arg0: 'long long const *', arg1: 'unsigned int') -> "long long":
    """vnl_c_vectorSLL_min_value(long long const * arg0, unsigned int arg1) -> long long"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_min_value(arg0, arg1)

def vnl_c_vectorSLL_arg_max(arg0: 'long long const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorSLL_arg_max(long long const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_arg_max(arg0, arg1)

def vnl_c_vectorSLL_arg_min(arg0: 'long long const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorSLL_arg_min(long long const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_arg_min(arg0, arg1)

def vnl_c_vectorSLL_mean(p: 'long long const *', n: 'unsigned int') -> "long long":
    """vnl_c_vectorSLL_mean(long long const * p, unsigned int n) -> long long"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_mean(p, n)

def vnl_c_vectorSLL_std(p: 'long long const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorSLL_std(long long const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_std(p, n)

def vnl_c_vectorSLL_sum_sq_diff_means(v: 'long long const *', n: 'unsigned int') -> "long long":
    """vnl_c_vectorSLL_sum_sq_diff_means(long long const * v, unsigned int n) -> long long"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_sum_sq_diff_means(v, n)

def vnl_c_vectorSLL_one_norm(p: 'long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorSLL_one_norm(long long const * p, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_one_norm(p, n)

def vnl_c_vectorSLL_two_norm(p: 'long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorSLL_two_norm(long long const * p, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_two_norm(p, n)

def vnl_c_vectorSLL_inf_norm(p: 'long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorSLL_inf_norm(long long const * p, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_inf_norm(p, n)

def vnl_c_vectorSLL_two_nrm2(p: 'long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorSLL_two_nrm2(long long const * p, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_two_nrm2(p, n)

def vnl_c_vectorSLL_rms_norm(p: 'long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorSLL_rms_norm(long long const * p, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_rms_norm(p, n)

def vnl_c_vectorSLL_euclid_dist_sq(arg0: 'long long const *', arg1: 'long long const *', arg2: 'unsigned int') -> "long long":
    """vnl_c_vectorSLL_euclid_dist_sq(long long const * arg0, long long const * arg1, unsigned int arg2) -> long long"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_euclid_dist_sq(arg0, arg1, arg2)

def vnl_c_vectorSLL_allocate_Tptr(n: 'unsigned long long const') -> "long long **":
    """vnl_c_vectorSLL_allocate_Tptr(unsigned long long const n) -> long long **"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_allocate_Tptr(n)

def vnl_c_vectorSLL_allocate_T(n: 'unsigned long long const') -> "long long *":
    """vnl_c_vectorSLL_allocate_T(unsigned long long const n) -> long long *"""
    return _vnl_c_vectorPython.vnl_c_vectorSLL_allocate_T(n)

def vnl_c_vectorSLL_deallocate(*args) -> "void":
    """
    deallocate(long long ** arg0, unsigned long long const n_when_allocated)
    vnl_c_vectorSLL_deallocate(long long * arg0, unsigned long long const n_when_allocated)
    """
    return _vnl_c_vectorPython.vnl_c_vectorSLL_deallocate(*args)

class vnl_c_vectorUC(object):
    """Proxy of C++ vnl_c_vectorUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def sum(v: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
        """sum(unsigned char const * v, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_sum(v, n)

    sum = staticmethod(sum)

    def squared_magnitude(p: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
        """squared_magnitude(unsigned char const * p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_squared_magnitude(p, n)

    squared_magnitude = staticmethod(squared_magnitude)

    def normalize(arg0: 'unsigned char *', n: 'unsigned int') -> "void":
        """normalize(unsigned char * arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_normalize(arg0, n)

    normalize = staticmethod(normalize)

    def copy(x: 'unsigned char const *', y: 'unsigned char *', arg2: 'unsigned int') -> "void":
        """copy(unsigned char const * x, unsigned char * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_copy(x, y, arg2)

    copy = staticmethod(copy)

    def scale(x: 'unsigned char const *', y: 'unsigned char *', arg2: 'unsigned int', arg3: 'unsigned char const &') -> "void":
        """scale(unsigned char const * x, unsigned char * y, unsigned int arg2, unsigned char const & arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_scale(x, y, arg2, arg3)

    scale = staticmethod(scale)

    def add(*args) -> "void":
        """
        add(unsigned char const * x, unsigned char const * y, unsigned char * z, unsigned int arg3)
        add(unsigned char const * x, unsigned char const & y, unsigned char * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUC_add(*args)

    add = staticmethod(add)

    def subtract(*args) -> "void":
        """
        subtract(unsigned char const * x, unsigned char const * y, unsigned char * z, unsigned int arg3)
        subtract(unsigned char const * x, unsigned char const & y, unsigned char * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUC_subtract(*args)

    subtract = staticmethod(subtract)

    def multiply(*args) -> "void":
        """
        multiply(unsigned char const * x, unsigned char const * y, unsigned char * z, unsigned int arg3)
        multiply(unsigned char const * x, unsigned char const & y, unsigned char * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUC_multiply(*args)

    multiply = staticmethod(multiply)

    def divide(*args) -> "void":
        """
        divide(unsigned char const * x, unsigned char const * y, unsigned char * z, unsigned int arg3)
        divide(unsigned char const * x, unsigned char const & y, unsigned char * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUC_divide(*args)

    divide = staticmethod(divide)

    def negate(x: 'unsigned char const *', y: 'unsigned char *', arg2: 'unsigned int') -> "void":
        """negate(unsigned char const * x, unsigned char * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_negate(x, y, arg2)

    negate = staticmethod(negate)

    def invert(x: 'unsigned char const *', y: 'unsigned char *', arg2: 'unsigned int') -> "void":
        """invert(unsigned char const * x, unsigned char * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_invert(x, y, arg2)

    invert = staticmethod(invert)

    def saxpy(a: 'unsigned char const &', x: 'unsigned char const *', y: 'unsigned char *', arg3: 'unsigned int') -> "void":
        """saxpy(unsigned char const & a, unsigned char const * x, unsigned char * y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_saxpy(a, x, y, arg3)

    saxpy = staticmethod(saxpy)

    def fill(x: 'unsigned char *', arg1: 'unsigned int', v: 'unsigned char const &') -> "void":
        """fill(unsigned char * x, unsigned int arg1, unsigned char const & v)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_fill(x, arg1, v)

    fill = staticmethod(fill)

    def reverse(x: 'unsigned char *', arg1: 'unsigned int') -> "void":
        """reverse(unsigned char * x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_reverse(x, arg1)

    reverse = staticmethod(reverse)

    def dot_product(arg0: 'unsigned char const *', arg1: 'unsigned char const *', arg2: 'unsigned int') -> "unsigned char":
        """dot_product(unsigned char const * arg0, unsigned char const * arg1, unsigned int arg2) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_dot_product(arg0, arg1, arg2)

    dot_product = staticmethod(dot_product)

    def inner_product(arg0: 'unsigned char const *', arg1: 'unsigned char const *', arg2: 'unsigned int') -> "unsigned char":
        """inner_product(unsigned char const * arg0, unsigned char const * arg1, unsigned int arg2) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_inner_product(arg0, arg1, arg2)

    inner_product = staticmethod(inner_product)

    def conjugate(arg0: 'unsigned char const *', arg1: 'unsigned char *', arg2: 'unsigned int') -> "void":
        """conjugate(unsigned char const * arg0, unsigned char * arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_conjugate(arg0, arg1, arg2)

    conjugate = staticmethod(conjugate)

    def max_value(arg0: 'unsigned char const *', arg1: 'unsigned int') -> "unsigned char":
        """max_value(unsigned char const * arg0, unsigned int arg1) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_max_value(arg0, arg1)

    max_value = staticmethod(max_value)

    def min_value(arg0: 'unsigned char const *', arg1: 'unsigned int') -> "unsigned char":
        """min_value(unsigned char const * arg0, unsigned int arg1) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_min_value(arg0, arg1)

    min_value = staticmethod(min_value)

    def arg_max(arg0: 'unsigned char const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_max(unsigned char const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_arg_max(arg0, arg1)

    arg_max = staticmethod(arg_max)

    def arg_min(arg0: 'unsigned char const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_min(unsigned char const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_arg_min(arg0, arg1)

    arg_min = staticmethod(arg_min)

    def mean(p: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
        """mean(unsigned char const * p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_mean(p, n)

    mean = staticmethod(mean)

    def std(p: 'unsigned char const *', n: 'unsigned int') -> "double":
        """std(unsigned char const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_std(p, n)

    std = staticmethod(std)

    def sum_sq_diff_means(v: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
        """sum_sq_diff_means(unsigned char const * v, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_sum_sq_diff_means(v, n)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)

    def one_norm(p: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
        """one_norm(unsigned char const * p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_one_norm(p, n)

    one_norm = staticmethod(one_norm)

    def two_norm(p: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
        """two_norm(unsigned char const * p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_two_norm(p, n)

    two_norm = staticmethod(two_norm)

    def inf_norm(p: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
        """inf_norm(unsigned char const * p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_inf_norm(p, n)

    inf_norm = staticmethod(inf_norm)

    def two_nrm2(p: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
        """two_nrm2(unsigned char const * p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_two_nrm2(p, n)

    two_nrm2 = staticmethod(two_nrm2)

    def rms_norm(p: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
        """rms_norm(unsigned char const * p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_rms_norm(p, n)

    rms_norm = staticmethod(rms_norm)

    def euclid_dist_sq(arg0: 'unsigned char const *', arg1: 'unsigned char const *', arg2: 'unsigned int') -> "unsigned char":
        """euclid_dist_sq(unsigned char const * arg0, unsigned char const * arg1, unsigned int arg2) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_euclid_dist_sq(arg0, arg1, arg2)

    euclid_dist_sq = staticmethod(euclid_dist_sq)

    def allocate_Tptr(n: 'unsigned long long const') -> "unsigned char **":
        """allocate_Tptr(unsigned long long const n) -> unsigned char **"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_allocate_Tptr(n)

    allocate_Tptr = staticmethod(allocate_Tptr)

    def allocate_T(n: 'unsigned long long const') -> "unsigned char *":
        """allocate_T(unsigned long long const n) -> unsigned char *"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_allocate_T(n)

    allocate_T = staticmethod(allocate_T)

    def deallocate(*args) -> "void":
        """
        deallocate(unsigned char ** arg0, unsigned long long const n_when_allocated)
        deallocate(unsigned char * arg0, unsigned long long const n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUC_deallocate(*args)

    deallocate = staticmethod(deallocate)

    def __init__(self, *args):
        """
        __init__(vnl_c_vectorUC self) -> vnl_c_vectorUC
        __init__(vnl_c_vectorUC self, vnl_c_vectorUC arg0) -> vnl_c_vectorUC
        """
        _vnl_c_vectorPython.vnl_c_vectorUC_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorUC(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorUC
vnl_c_vectorUC_swigregister = _vnl_c_vectorPython.vnl_c_vectorUC_swigregister
vnl_c_vectorUC_swigregister(vnl_c_vectorUC)

def vnl_c_vectorUC_sum(v: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorUC_sum(unsigned char const * v, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_sum(v, n)

def vnl_c_vectorUC_squared_magnitude(p: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorUC_squared_magnitude(unsigned char const * p, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_squared_magnitude(p, n)

def vnl_c_vectorUC_normalize(arg0: 'unsigned char *', n: 'unsigned int') -> "void":
    """vnl_c_vectorUC_normalize(unsigned char * arg0, unsigned int n)"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_normalize(arg0, n)

def vnl_c_vectorUC_copy(x: 'unsigned char const *', y: 'unsigned char *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorUC_copy(unsigned char const * x, unsigned char * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_copy(x, y, arg2)

def vnl_c_vectorUC_scale(x: 'unsigned char const *', y: 'unsigned char *', arg2: 'unsigned int', arg3: 'unsigned char const &') -> "void":
    """vnl_c_vectorUC_scale(unsigned char const * x, unsigned char * y, unsigned int arg2, unsigned char const & arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_scale(x, y, arg2, arg3)

def vnl_c_vectorUC_add(*args) -> "void":
    """
    add(unsigned char const * x, unsigned char const * y, unsigned char * z, unsigned int arg3)
    vnl_c_vectorUC_add(unsigned char const * x, unsigned char const & y, unsigned char * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUC_add(*args)

def vnl_c_vectorUC_subtract(*args) -> "void":
    """
    subtract(unsigned char const * x, unsigned char const * y, unsigned char * z, unsigned int arg3)
    vnl_c_vectorUC_subtract(unsigned char const * x, unsigned char const & y, unsigned char * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUC_subtract(*args)

def vnl_c_vectorUC_multiply(*args) -> "void":
    """
    multiply(unsigned char const * x, unsigned char const * y, unsigned char * z, unsigned int arg3)
    vnl_c_vectorUC_multiply(unsigned char const * x, unsigned char const & y, unsigned char * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUC_multiply(*args)

def vnl_c_vectorUC_divide(*args) -> "void":
    """
    divide(unsigned char const * x, unsigned char const * y, unsigned char * z, unsigned int arg3)
    vnl_c_vectorUC_divide(unsigned char const * x, unsigned char const & y, unsigned char * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUC_divide(*args)

def vnl_c_vectorUC_negate(x: 'unsigned char const *', y: 'unsigned char *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorUC_negate(unsigned char const * x, unsigned char * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_negate(x, y, arg2)

def vnl_c_vectorUC_invert(x: 'unsigned char const *', y: 'unsigned char *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorUC_invert(unsigned char const * x, unsigned char * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_invert(x, y, arg2)

def vnl_c_vectorUC_saxpy(a: 'unsigned char const &', x: 'unsigned char const *', y: 'unsigned char *', arg3: 'unsigned int') -> "void":
    """vnl_c_vectorUC_saxpy(unsigned char const & a, unsigned char const * x, unsigned char * y, unsigned int arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_saxpy(a, x, y, arg3)

def vnl_c_vectorUC_fill(x: 'unsigned char *', arg1: 'unsigned int', v: 'unsigned char const &') -> "void":
    """vnl_c_vectorUC_fill(unsigned char * x, unsigned int arg1, unsigned char const & v)"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_fill(x, arg1, v)

def vnl_c_vectorUC_reverse(x: 'unsigned char *', arg1: 'unsigned int') -> "void":
    """vnl_c_vectorUC_reverse(unsigned char * x, unsigned int arg1)"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_reverse(x, arg1)

def vnl_c_vectorUC_dot_product(arg0: 'unsigned char const *', arg1: 'unsigned char const *', arg2: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorUC_dot_product(unsigned char const * arg0, unsigned char const * arg1, unsigned int arg2) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_dot_product(arg0, arg1, arg2)

def vnl_c_vectorUC_inner_product(arg0: 'unsigned char const *', arg1: 'unsigned char const *', arg2: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorUC_inner_product(unsigned char const * arg0, unsigned char const * arg1, unsigned int arg2) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_inner_product(arg0, arg1, arg2)

def vnl_c_vectorUC_conjugate(arg0: 'unsigned char const *', arg1: 'unsigned char *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorUC_conjugate(unsigned char const * arg0, unsigned char * arg1, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_conjugate(arg0, arg1, arg2)

def vnl_c_vectorUC_max_value(arg0: 'unsigned char const *', arg1: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorUC_max_value(unsigned char const * arg0, unsigned int arg1) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_max_value(arg0, arg1)

def vnl_c_vectorUC_min_value(arg0: 'unsigned char const *', arg1: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorUC_min_value(unsigned char const * arg0, unsigned int arg1) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_min_value(arg0, arg1)

def vnl_c_vectorUC_arg_max(arg0: 'unsigned char const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUC_arg_max(unsigned char const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_arg_max(arg0, arg1)

def vnl_c_vectorUC_arg_min(arg0: 'unsigned char const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUC_arg_min(unsigned char const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_arg_min(arg0, arg1)

def vnl_c_vectorUC_mean(p: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorUC_mean(unsigned char const * p, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_mean(p, n)

def vnl_c_vectorUC_std(p: 'unsigned char const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorUC_std(unsigned char const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_std(p, n)

def vnl_c_vectorUC_sum_sq_diff_means(v: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorUC_sum_sq_diff_means(unsigned char const * v, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_sum_sq_diff_means(v, n)

def vnl_c_vectorUC_one_norm(p: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorUC_one_norm(unsigned char const * p, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_one_norm(p, n)

def vnl_c_vectorUC_two_norm(p: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorUC_two_norm(unsigned char const * p, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_two_norm(p, n)

def vnl_c_vectorUC_inf_norm(p: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorUC_inf_norm(unsigned char const * p, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_inf_norm(p, n)

def vnl_c_vectorUC_two_nrm2(p: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorUC_two_nrm2(unsigned char const * p, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_two_nrm2(p, n)

def vnl_c_vectorUC_rms_norm(p: 'unsigned char const *', n: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorUC_rms_norm(unsigned char const * p, unsigned int n) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_rms_norm(p, n)

def vnl_c_vectorUC_euclid_dist_sq(arg0: 'unsigned char const *', arg1: 'unsigned char const *', arg2: 'unsigned int') -> "unsigned char":
    """vnl_c_vectorUC_euclid_dist_sq(unsigned char const * arg0, unsigned char const * arg1, unsigned int arg2) -> unsigned char"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_euclid_dist_sq(arg0, arg1, arg2)

def vnl_c_vectorUC_allocate_Tptr(n: 'unsigned long long const') -> "unsigned char **":
    """vnl_c_vectorUC_allocate_Tptr(unsigned long long const n) -> unsigned char **"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_allocate_Tptr(n)

def vnl_c_vectorUC_allocate_T(n: 'unsigned long long const') -> "unsigned char *":
    """vnl_c_vectorUC_allocate_T(unsigned long long const n) -> unsigned char *"""
    return _vnl_c_vectorPython.vnl_c_vectorUC_allocate_T(n)

def vnl_c_vectorUC_deallocate(*args) -> "void":
    """
    deallocate(unsigned char ** arg0, unsigned long long const n_when_allocated)
    vnl_c_vectorUC_deallocate(unsigned char * arg0, unsigned long long const n_when_allocated)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUC_deallocate(*args)

class vnl_c_vectorUI(object):
    """Proxy of C++ vnl_c_vectorUI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def sum(v: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
        """sum(unsigned int const * v, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_sum(v, n)

    sum = staticmethod(sum)

    def squared_magnitude(p: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
        """squared_magnitude(unsigned int const * p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_squared_magnitude(p, n)

    squared_magnitude = staticmethod(squared_magnitude)

    def normalize(arg0: 'unsigned int *', n: 'unsigned int') -> "void":
        """normalize(unsigned int * arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_normalize(arg0, n)

    normalize = staticmethod(normalize)

    def copy(x: 'unsigned int const *', y: 'unsigned int *', arg2: 'unsigned int') -> "void":
        """copy(unsigned int const * x, unsigned int * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_copy(x, y, arg2)

    copy = staticmethod(copy)

    def scale(x: 'unsigned int const *', y: 'unsigned int *', arg2: 'unsigned int', arg3: 'unsigned int const &') -> "void":
        """scale(unsigned int const * x, unsigned int * y, unsigned int arg2, unsigned int const & arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_scale(x, y, arg2, arg3)

    scale = staticmethod(scale)

    def add(*args) -> "void":
        """
        add(unsigned int const * x, unsigned int const * y, unsigned int * z, unsigned int arg3)
        add(unsigned int const * x, unsigned int const & y, unsigned int * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUI_add(*args)

    add = staticmethod(add)

    def subtract(*args) -> "void":
        """
        subtract(unsigned int const * x, unsigned int const * y, unsigned int * z, unsigned int arg3)
        subtract(unsigned int const * x, unsigned int const & y, unsigned int * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUI_subtract(*args)

    subtract = staticmethod(subtract)

    def multiply(*args) -> "void":
        """
        multiply(unsigned int const * x, unsigned int const * y, unsigned int * z, unsigned int arg3)
        multiply(unsigned int const * x, unsigned int const & y, unsigned int * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUI_multiply(*args)

    multiply = staticmethod(multiply)

    def divide(*args) -> "void":
        """
        divide(unsigned int const * x, unsigned int const * y, unsigned int * z, unsigned int arg3)
        divide(unsigned int const * x, unsigned int const & y, unsigned int * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUI_divide(*args)

    divide = staticmethod(divide)

    def negate(x: 'unsigned int const *', y: 'unsigned int *', arg2: 'unsigned int') -> "void":
        """negate(unsigned int const * x, unsigned int * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_negate(x, y, arg2)

    negate = staticmethod(negate)

    def invert(x: 'unsigned int const *', y: 'unsigned int *', arg2: 'unsigned int') -> "void":
        """invert(unsigned int const * x, unsigned int * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_invert(x, y, arg2)

    invert = staticmethod(invert)

    def saxpy(a: 'unsigned int const &', x: 'unsigned int const *', y: 'unsigned int *', arg3: 'unsigned int') -> "void":
        """saxpy(unsigned int const & a, unsigned int const * x, unsigned int * y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_saxpy(a, x, y, arg3)

    saxpy = staticmethod(saxpy)

    def fill(x: 'unsigned int *', arg1: 'unsigned int', v: 'unsigned int const &') -> "void":
        """fill(unsigned int * x, unsigned int arg1, unsigned int const & v)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_fill(x, arg1, v)

    fill = staticmethod(fill)

    def reverse(x: 'unsigned int *', arg1: 'unsigned int') -> "void":
        """reverse(unsigned int * x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_reverse(x, arg1)

    reverse = staticmethod(reverse)

    def dot_product(arg0: 'unsigned int const *', arg1: 'unsigned int const *', arg2: 'unsigned int') -> "unsigned int":
        """dot_product(unsigned int const * arg0, unsigned int const * arg1, unsigned int arg2) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_dot_product(arg0, arg1, arg2)

    dot_product = staticmethod(dot_product)

    def inner_product(arg0: 'unsigned int const *', arg1: 'unsigned int const *', arg2: 'unsigned int') -> "unsigned int":
        """inner_product(unsigned int const * arg0, unsigned int const * arg1, unsigned int arg2) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_inner_product(arg0, arg1, arg2)

    inner_product = staticmethod(inner_product)

    def conjugate(arg0: 'unsigned int const *', arg1: 'unsigned int *', arg2: 'unsigned int') -> "void":
        """conjugate(unsigned int const * arg0, unsigned int * arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_conjugate(arg0, arg1, arg2)

    conjugate = staticmethod(conjugate)

    def max_value(arg0: 'unsigned int const *', arg1: 'unsigned int') -> "unsigned int":
        """max_value(unsigned int const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_max_value(arg0, arg1)

    max_value = staticmethod(max_value)

    def min_value(arg0: 'unsigned int const *', arg1: 'unsigned int') -> "unsigned int":
        """min_value(unsigned int const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_min_value(arg0, arg1)

    min_value = staticmethod(min_value)

    def arg_max(arg0: 'unsigned int const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_max(unsigned int const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_arg_max(arg0, arg1)

    arg_max = staticmethod(arg_max)

    def arg_min(arg0: 'unsigned int const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_min(unsigned int const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_arg_min(arg0, arg1)

    arg_min = staticmethod(arg_min)

    def mean(p: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
        """mean(unsigned int const * p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_mean(p, n)

    mean = staticmethod(mean)

    def std(p: 'unsigned int const *', n: 'unsigned int') -> "double":
        """std(unsigned int const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_std(p, n)

    std = staticmethod(std)

    def sum_sq_diff_means(v: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
        """sum_sq_diff_means(unsigned int const * v, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_sum_sq_diff_means(v, n)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)

    def one_norm(p: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
        """one_norm(unsigned int const * p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_one_norm(p, n)

    one_norm = staticmethod(one_norm)

    def two_norm(p: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
        """two_norm(unsigned int const * p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_two_norm(p, n)

    two_norm = staticmethod(two_norm)

    def inf_norm(p: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
        """inf_norm(unsigned int const * p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_inf_norm(p, n)

    inf_norm = staticmethod(inf_norm)

    def two_nrm2(p: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
        """two_nrm2(unsigned int const * p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_two_nrm2(p, n)

    two_nrm2 = staticmethod(two_nrm2)

    def rms_norm(p: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
        """rms_norm(unsigned int const * p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_rms_norm(p, n)

    rms_norm = staticmethod(rms_norm)

    def euclid_dist_sq(arg0: 'unsigned int const *', arg1: 'unsigned int const *', arg2: 'unsigned int') -> "unsigned int":
        """euclid_dist_sq(unsigned int const * arg0, unsigned int const * arg1, unsigned int arg2) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_euclid_dist_sq(arg0, arg1, arg2)

    euclid_dist_sq = staticmethod(euclid_dist_sq)

    def allocate_Tptr(n: 'unsigned long long const') -> "unsigned int **":
        """allocate_Tptr(unsigned long long const n) -> unsigned int **"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_allocate_Tptr(n)

    allocate_Tptr = staticmethod(allocate_Tptr)

    def allocate_T(n: 'unsigned long long const') -> "unsigned int *":
        """allocate_T(unsigned long long const n) -> unsigned int *"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_allocate_T(n)

    allocate_T = staticmethod(allocate_T)

    def deallocate(*args) -> "void":
        """
        deallocate(unsigned int ** arg0, unsigned long long const n_when_allocated)
        deallocate(unsigned int * arg0, unsigned long long const n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUI_deallocate(*args)

    deallocate = staticmethod(deallocate)

    def __init__(self, *args):
        """
        __init__(vnl_c_vectorUI self) -> vnl_c_vectorUI
        __init__(vnl_c_vectorUI self, vnl_c_vectorUI arg0) -> vnl_c_vectorUI
        """
        _vnl_c_vectorPython.vnl_c_vectorUI_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorUI(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorUI
vnl_c_vectorUI_swigregister = _vnl_c_vectorPython.vnl_c_vectorUI_swigregister
vnl_c_vectorUI_swigregister(vnl_c_vectorUI)

def vnl_c_vectorUI_sum(v: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_sum(unsigned int const * v, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_sum(v, n)

def vnl_c_vectorUI_squared_magnitude(p: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_squared_magnitude(unsigned int const * p, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_squared_magnitude(p, n)

def vnl_c_vectorUI_normalize(arg0: 'unsigned int *', n: 'unsigned int') -> "void":
    """vnl_c_vectorUI_normalize(unsigned int * arg0, unsigned int n)"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_normalize(arg0, n)

def vnl_c_vectorUI_copy(x: 'unsigned int const *', y: 'unsigned int *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorUI_copy(unsigned int const * x, unsigned int * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_copy(x, y, arg2)

def vnl_c_vectorUI_scale(x: 'unsigned int const *', y: 'unsigned int *', arg2: 'unsigned int', arg3: 'unsigned int const &') -> "void":
    """vnl_c_vectorUI_scale(unsigned int const * x, unsigned int * y, unsigned int arg2, unsigned int const & arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_scale(x, y, arg2, arg3)

def vnl_c_vectorUI_add(*args) -> "void":
    """
    add(unsigned int const * x, unsigned int const * y, unsigned int * z, unsigned int arg3)
    vnl_c_vectorUI_add(unsigned int const * x, unsigned int const & y, unsigned int * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUI_add(*args)

def vnl_c_vectorUI_subtract(*args) -> "void":
    """
    subtract(unsigned int const * x, unsigned int const * y, unsigned int * z, unsigned int arg3)
    vnl_c_vectorUI_subtract(unsigned int const * x, unsigned int const & y, unsigned int * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUI_subtract(*args)

def vnl_c_vectorUI_multiply(*args) -> "void":
    """
    multiply(unsigned int const * x, unsigned int const * y, unsigned int * z, unsigned int arg3)
    vnl_c_vectorUI_multiply(unsigned int const * x, unsigned int const & y, unsigned int * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUI_multiply(*args)

def vnl_c_vectorUI_divide(*args) -> "void":
    """
    divide(unsigned int const * x, unsigned int const * y, unsigned int * z, unsigned int arg3)
    vnl_c_vectorUI_divide(unsigned int const * x, unsigned int const & y, unsigned int * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUI_divide(*args)

def vnl_c_vectorUI_negate(x: 'unsigned int const *', y: 'unsigned int *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorUI_negate(unsigned int const * x, unsigned int * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_negate(x, y, arg2)

def vnl_c_vectorUI_invert(x: 'unsigned int const *', y: 'unsigned int *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorUI_invert(unsigned int const * x, unsigned int * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_invert(x, y, arg2)

def vnl_c_vectorUI_saxpy(a: 'unsigned int const &', x: 'unsigned int const *', y: 'unsigned int *', arg3: 'unsigned int') -> "void":
    """vnl_c_vectorUI_saxpy(unsigned int const & a, unsigned int const * x, unsigned int * y, unsigned int arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_saxpy(a, x, y, arg3)

def vnl_c_vectorUI_fill(x: 'unsigned int *', arg1: 'unsigned int', v: 'unsigned int const &') -> "void":
    """vnl_c_vectorUI_fill(unsigned int * x, unsigned int arg1, unsigned int const & v)"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_fill(x, arg1, v)

def vnl_c_vectorUI_reverse(x: 'unsigned int *', arg1: 'unsigned int') -> "void":
    """vnl_c_vectorUI_reverse(unsigned int * x, unsigned int arg1)"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_reverse(x, arg1)

def vnl_c_vectorUI_dot_product(arg0: 'unsigned int const *', arg1: 'unsigned int const *', arg2: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_dot_product(unsigned int const * arg0, unsigned int const * arg1, unsigned int arg2) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_dot_product(arg0, arg1, arg2)

def vnl_c_vectorUI_inner_product(arg0: 'unsigned int const *', arg1: 'unsigned int const *', arg2: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_inner_product(unsigned int const * arg0, unsigned int const * arg1, unsigned int arg2) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_inner_product(arg0, arg1, arg2)

def vnl_c_vectorUI_conjugate(arg0: 'unsigned int const *', arg1: 'unsigned int *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorUI_conjugate(unsigned int const * arg0, unsigned int * arg1, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_conjugate(arg0, arg1, arg2)

def vnl_c_vectorUI_max_value(arg0: 'unsigned int const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_max_value(unsigned int const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_max_value(arg0, arg1)

def vnl_c_vectorUI_min_value(arg0: 'unsigned int const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_min_value(unsigned int const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_min_value(arg0, arg1)

def vnl_c_vectorUI_arg_max(arg0: 'unsigned int const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_arg_max(unsigned int const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_arg_max(arg0, arg1)

def vnl_c_vectorUI_arg_min(arg0: 'unsigned int const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_arg_min(unsigned int const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_arg_min(arg0, arg1)

def vnl_c_vectorUI_mean(p: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_mean(unsigned int const * p, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_mean(p, n)

def vnl_c_vectorUI_std(p: 'unsigned int const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorUI_std(unsigned int const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_std(p, n)

def vnl_c_vectorUI_sum_sq_diff_means(v: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_sum_sq_diff_means(unsigned int const * v, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_sum_sq_diff_means(v, n)

def vnl_c_vectorUI_one_norm(p: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_one_norm(unsigned int const * p, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_one_norm(p, n)

def vnl_c_vectorUI_two_norm(p: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_two_norm(unsigned int const * p, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_two_norm(p, n)

def vnl_c_vectorUI_inf_norm(p: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_inf_norm(unsigned int const * p, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_inf_norm(p, n)

def vnl_c_vectorUI_two_nrm2(p: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_two_nrm2(unsigned int const * p, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_two_nrm2(p, n)

def vnl_c_vectorUI_rms_norm(p: 'unsigned int const *', n: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_rms_norm(unsigned int const * p, unsigned int n) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_rms_norm(p, n)

def vnl_c_vectorUI_euclid_dist_sq(arg0: 'unsigned int const *', arg1: 'unsigned int const *', arg2: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUI_euclid_dist_sq(unsigned int const * arg0, unsigned int const * arg1, unsigned int arg2) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_euclid_dist_sq(arg0, arg1, arg2)

def vnl_c_vectorUI_allocate_Tptr(n: 'unsigned long long const') -> "unsigned int **":
    """vnl_c_vectorUI_allocate_Tptr(unsigned long long const n) -> unsigned int **"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_allocate_Tptr(n)

def vnl_c_vectorUI_allocate_T(n: 'unsigned long long const') -> "unsigned int *":
    """vnl_c_vectorUI_allocate_T(unsigned long long const n) -> unsigned int *"""
    return _vnl_c_vectorPython.vnl_c_vectorUI_allocate_T(n)

def vnl_c_vectorUI_deallocate(*args) -> "void":
    """
    deallocate(unsigned int ** arg0, unsigned long long const n_when_allocated)
    vnl_c_vectorUI_deallocate(unsigned int * arg0, unsigned long long const n_when_allocated)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUI_deallocate(*args)

class vnl_c_vectorUL(object):
    """Proxy of C++ vnl_c_vectorUL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def sum(v: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
        """sum(unsigned long const * v, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_sum(v, n)

    sum = staticmethod(sum)

    def squared_magnitude(p: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
        """squared_magnitude(unsigned long const * p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_squared_magnitude(p, n)

    squared_magnitude = staticmethod(squared_magnitude)

    def normalize(arg0: 'unsigned long *', n: 'unsigned int') -> "void":
        """normalize(unsigned long * arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_normalize(arg0, n)

    normalize = staticmethod(normalize)

    def copy(x: 'unsigned long const *', y: 'unsigned long *', arg2: 'unsigned int') -> "void":
        """copy(unsigned long const * x, unsigned long * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_copy(x, y, arg2)

    copy = staticmethod(copy)

    def scale(x: 'unsigned long const *', y: 'unsigned long *', arg2: 'unsigned int', arg3: 'unsigned long const &') -> "void":
        """scale(unsigned long const * x, unsigned long * y, unsigned int arg2, unsigned long const & arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_scale(x, y, arg2, arg3)

    scale = staticmethod(scale)

    def add(*args) -> "void":
        """
        add(unsigned long const * x, unsigned long const * y, unsigned long * z, unsigned int arg3)
        add(unsigned long const * x, unsigned long const & y, unsigned long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUL_add(*args)

    add = staticmethod(add)

    def subtract(*args) -> "void":
        """
        subtract(unsigned long const * x, unsigned long const * y, unsigned long * z, unsigned int arg3)
        subtract(unsigned long const * x, unsigned long const & y, unsigned long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUL_subtract(*args)

    subtract = staticmethod(subtract)

    def multiply(*args) -> "void":
        """
        multiply(unsigned long const * x, unsigned long const * y, unsigned long * z, unsigned int arg3)
        multiply(unsigned long const * x, unsigned long const & y, unsigned long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUL_multiply(*args)

    multiply = staticmethod(multiply)

    def divide(*args) -> "void":
        """
        divide(unsigned long const * x, unsigned long const * y, unsigned long * z, unsigned int arg3)
        divide(unsigned long const * x, unsigned long const & y, unsigned long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUL_divide(*args)

    divide = staticmethod(divide)

    def negate(x: 'unsigned long const *', y: 'unsigned long *', arg2: 'unsigned int') -> "void":
        """negate(unsigned long const * x, unsigned long * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_negate(x, y, arg2)

    negate = staticmethod(negate)

    def invert(x: 'unsigned long const *', y: 'unsigned long *', arg2: 'unsigned int') -> "void":
        """invert(unsigned long const * x, unsigned long * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_invert(x, y, arg2)

    invert = staticmethod(invert)

    def saxpy(a: 'unsigned long const &', x: 'unsigned long const *', y: 'unsigned long *', arg3: 'unsigned int') -> "void":
        """saxpy(unsigned long const & a, unsigned long const * x, unsigned long * y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_saxpy(a, x, y, arg3)

    saxpy = staticmethod(saxpy)

    def fill(x: 'unsigned long *', arg1: 'unsigned int', v: 'unsigned long const &') -> "void":
        """fill(unsigned long * x, unsigned int arg1, unsigned long const & v)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_fill(x, arg1, v)

    fill = staticmethod(fill)

    def reverse(x: 'unsigned long *', arg1: 'unsigned int') -> "void":
        """reverse(unsigned long * x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_reverse(x, arg1)

    reverse = staticmethod(reverse)

    def dot_product(arg0: 'unsigned long const *', arg1: 'unsigned long const *', arg2: 'unsigned int') -> "unsigned long":
        """dot_product(unsigned long const * arg0, unsigned long const * arg1, unsigned int arg2) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_dot_product(arg0, arg1, arg2)

    dot_product = staticmethod(dot_product)

    def inner_product(arg0: 'unsigned long const *', arg1: 'unsigned long const *', arg2: 'unsigned int') -> "unsigned long":
        """inner_product(unsigned long const * arg0, unsigned long const * arg1, unsigned int arg2) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_inner_product(arg0, arg1, arg2)

    inner_product = staticmethod(inner_product)

    def conjugate(arg0: 'unsigned long const *', arg1: 'unsigned long *', arg2: 'unsigned int') -> "void":
        """conjugate(unsigned long const * arg0, unsigned long * arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_conjugate(arg0, arg1, arg2)

    conjugate = staticmethod(conjugate)

    def max_value(arg0: 'unsigned long const *', arg1: 'unsigned int') -> "unsigned long":
        """max_value(unsigned long const * arg0, unsigned int arg1) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_max_value(arg0, arg1)

    max_value = staticmethod(max_value)

    def min_value(arg0: 'unsigned long const *', arg1: 'unsigned int') -> "unsigned long":
        """min_value(unsigned long const * arg0, unsigned int arg1) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_min_value(arg0, arg1)

    min_value = staticmethod(min_value)

    def arg_max(arg0: 'unsigned long const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_max(unsigned long const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_arg_max(arg0, arg1)

    arg_max = staticmethod(arg_max)

    def arg_min(arg0: 'unsigned long const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_min(unsigned long const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_arg_min(arg0, arg1)

    arg_min = staticmethod(arg_min)

    def mean(p: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
        """mean(unsigned long const * p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_mean(p, n)

    mean = staticmethod(mean)

    def std(p: 'unsigned long const *', n: 'unsigned int') -> "double":
        """std(unsigned long const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_std(p, n)

    std = staticmethod(std)

    def sum_sq_diff_means(v: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
        """sum_sq_diff_means(unsigned long const * v, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_sum_sq_diff_means(v, n)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)

    def one_norm(p: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
        """one_norm(unsigned long const * p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_one_norm(p, n)

    one_norm = staticmethod(one_norm)

    def two_norm(p: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
        """two_norm(unsigned long const * p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_two_norm(p, n)

    two_norm = staticmethod(two_norm)

    def inf_norm(p: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
        """inf_norm(unsigned long const * p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_inf_norm(p, n)

    inf_norm = staticmethod(inf_norm)

    def two_nrm2(p: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
        """two_nrm2(unsigned long const * p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_two_nrm2(p, n)

    two_nrm2 = staticmethod(two_nrm2)

    def rms_norm(p: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
        """rms_norm(unsigned long const * p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_rms_norm(p, n)

    rms_norm = staticmethod(rms_norm)

    def euclid_dist_sq(arg0: 'unsigned long const *', arg1: 'unsigned long const *', arg2: 'unsigned int') -> "unsigned long":
        """euclid_dist_sq(unsigned long const * arg0, unsigned long const * arg1, unsigned int arg2) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_euclid_dist_sq(arg0, arg1, arg2)

    euclid_dist_sq = staticmethod(euclid_dist_sq)

    def allocate_Tptr(n: 'unsigned long long const') -> "unsigned long **":
        """allocate_Tptr(unsigned long long const n) -> unsigned long **"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_allocate_Tptr(n)

    allocate_Tptr = staticmethod(allocate_Tptr)

    def allocate_T(n: 'unsigned long long const') -> "unsigned long *":
        """allocate_T(unsigned long long const n) -> unsigned long *"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_allocate_T(n)

    allocate_T = staticmethod(allocate_T)

    def deallocate(*args) -> "void":
        """
        deallocate(unsigned long ** arg0, unsigned long long const n_when_allocated)
        deallocate(unsigned long * arg0, unsigned long long const n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUL_deallocate(*args)

    deallocate = staticmethod(deallocate)

    def __init__(self, *args):
        """
        __init__(vnl_c_vectorUL self) -> vnl_c_vectorUL
        __init__(vnl_c_vectorUL self, vnl_c_vectorUL arg0) -> vnl_c_vectorUL
        """
        _vnl_c_vectorPython.vnl_c_vectorUL_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorUL(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorUL
vnl_c_vectorUL_swigregister = _vnl_c_vectorPython.vnl_c_vectorUL_swigregister
vnl_c_vectorUL_swigregister(vnl_c_vectorUL)

def vnl_c_vectorUL_sum(v: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorUL_sum(unsigned long const * v, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_sum(v, n)

def vnl_c_vectorUL_squared_magnitude(p: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorUL_squared_magnitude(unsigned long const * p, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_squared_magnitude(p, n)

def vnl_c_vectorUL_normalize(arg0: 'unsigned long *', n: 'unsigned int') -> "void":
    """vnl_c_vectorUL_normalize(unsigned long * arg0, unsigned int n)"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_normalize(arg0, n)

def vnl_c_vectorUL_copy(x: 'unsigned long const *', y: 'unsigned long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorUL_copy(unsigned long const * x, unsigned long * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_copy(x, y, arg2)

def vnl_c_vectorUL_scale(x: 'unsigned long const *', y: 'unsigned long *', arg2: 'unsigned int', arg3: 'unsigned long const &') -> "void":
    """vnl_c_vectorUL_scale(unsigned long const * x, unsigned long * y, unsigned int arg2, unsigned long const & arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_scale(x, y, arg2, arg3)

def vnl_c_vectorUL_add(*args) -> "void":
    """
    add(unsigned long const * x, unsigned long const * y, unsigned long * z, unsigned int arg3)
    vnl_c_vectorUL_add(unsigned long const * x, unsigned long const & y, unsigned long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUL_add(*args)

def vnl_c_vectorUL_subtract(*args) -> "void":
    """
    subtract(unsigned long const * x, unsigned long const * y, unsigned long * z, unsigned int arg3)
    vnl_c_vectorUL_subtract(unsigned long const * x, unsigned long const & y, unsigned long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUL_subtract(*args)

def vnl_c_vectorUL_multiply(*args) -> "void":
    """
    multiply(unsigned long const * x, unsigned long const * y, unsigned long * z, unsigned int arg3)
    vnl_c_vectorUL_multiply(unsigned long const * x, unsigned long const & y, unsigned long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUL_multiply(*args)

def vnl_c_vectorUL_divide(*args) -> "void":
    """
    divide(unsigned long const * x, unsigned long const * y, unsigned long * z, unsigned int arg3)
    vnl_c_vectorUL_divide(unsigned long const * x, unsigned long const & y, unsigned long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUL_divide(*args)

def vnl_c_vectorUL_negate(x: 'unsigned long const *', y: 'unsigned long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorUL_negate(unsigned long const * x, unsigned long * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_negate(x, y, arg2)

def vnl_c_vectorUL_invert(x: 'unsigned long const *', y: 'unsigned long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorUL_invert(unsigned long const * x, unsigned long * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_invert(x, y, arg2)

def vnl_c_vectorUL_saxpy(a: 'unsigned long const &', x: 'unsigned long const *', y: 'unsigned long *', arg3: 'unsigned int') -> "void":
    """vnl_c_vectorUL_saxpy(unsigned long const & a, unsigned long const * x, unsigned long * y, unsigned int arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_saxpy(a, x, y, arg3)

def vnl_c_vectorUL_fill(x: 'unsigned long *', arg1: 'unsigned int', v: 'unsigned long const &') -> "void":
    """vnl_c_vectorUL_fill(unsigned long * x, unsigned int arg1, unsigned long const & v)"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_fill(x, arg1, v)

def vnl_c_vectorUL_reverse(x: 'unsigned long *', arg1: 'unsigned int') -> "void":
    """vnl_c_vectorUL_reverse(unsigned long * x, unsigned int arg1)"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_reverse(x, arg1)

def vnl_c_vectorUL_dot_product(arg0: 'unsigned long const *', arg1: 'unsigned long const *', arg2: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorUL_dot_product(unsigned long const * arg0, unsigned long const * arg1, unsigned int arg2) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_dot_product(arg0, arg1, arg2)

def vnl_c_vectorUL_inner_product(arg0: 'unsigned long const *', arg1: 'unsigned long const *', arg2: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorUL_inner_product(unsigned long const * arg0, unsigned long const * arg1, unsigned int arg2) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_inner_product(arg0, arg1, arg2)

def vnl_c_vectorUL_conjugate(arg0: 'unsigned long const *', arg1: 'unsigned long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorUL_conjugate(unsigned long const * arg0, unsigned long * arg1, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_conjugate(arg0, arg1, arg2)

def vnl_c_vectorUL_max_value(arg0: 'unsigned long const *', arg1: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorUL_max_value(unsigned long const * arg0, unsigned int arg1) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_max_value(arg0, arg1)

def vnl_c_vectorUL_min_value(arg0: 'unsigned long const *', arg1: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorUL_min_value(unsigned long const * arg0, unsigned int arg1) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_min_value(arg0, arg1)

def vnl_c_vectorUL_arg_max(arg0: 'unsigned long const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUL_arg_max(unsigned long const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_arg_max(arg0, arg1)

def vnl_c_vectorUL_arg_min(arg0: 'unsigned long const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorUL_arg_min(unsigned long const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_arg_min(arg0, arg1)

def vnl_c_vectorUL_mean(p: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorUL_mean(unsigned long const * p, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_mean(p, n)

def vnl_c_vectorUL_std(p: 'unsigned long const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorUL_std(unsigned long const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_std(p, n)

def vnl_c_vectorUL_sum_sq_diff_means(v: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorUL_sum_sq_diff_means(unsigned long const * v, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_sum_sq_diff_means(v, n)

def vnl_c_vectorUL_one_norm(p: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorUL_one_norm(unsigned long const * p, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_one_norm(p, n)

def vnl_c_vectorUL_two_norm(p: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorUL_two_norm(unsigned long const * p, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_two_norm(p, n)

def vnl_c_vectorUL_inf_norm(p: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorUL_inf_norm(unsigned long const * p, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_inf_norm(p, n)

def vnl_c_vectorUL_two_nrm2(p: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorUL_two_nrm2(unsigned long const * p, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_two_nrm2(p, n)

def vnl_c_vectorUL_rms_norm(p: 'unsigned long const *', n: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorUL_rms_norm(unsigned long const * p, unsigned int n) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_rms_norm(p, n)

def vnl_c_vectorUL_euclid_dist_sq(arg0: 'unsigned long const *', arg1: 'unsigned long const *', arg2: 'unsigned int') -> "unsigned long":
    """vnl_c_vectorUL_euclid_dist_sq(unsigned long const * arg0, unsigned long const * arg1, unsigned int arg2) -> unsigned long"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_euclid_dist_sq(arg0, arg1, arg2)

def vnl_c_vectorUL_allocate_Tptr(n: 'unsigned long long const') -> "unsigned long **":
    """vnl_c_vectorUL_allocate_Tptr(unsigned long long const n) -> unsigned long **"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_allocate_Tptr(n)

def vnl_c_vectorUL_allocate_T(n: 'unsigned long long const') -> "unsigned long *":
    """vnl_c_vectorUL_allocate_T(unsigned long long const n) -> unsigned long *"""
    return _vnl_c_vectorPython.vnl_c_vectorUL_allocate_T(n)

def vnl_c_vectorUL_deallocate(*args) -> "void":
    """
    deallocate(unsigned long ** arg0, unsigned long long const n_when_allocated)
    vnl_c_vectorUL_deallocate(unsigned long * arg0, unsigned long long const n_when_allocated)
    """
    return _vnl_c_vectorPython.vnl_c_vectorUL_deallocate(*args)

class vnl_c_vectorULL(object):
    """Proxy of C++ vnl_c_vectorULL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def sum(v: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
        """sum(unsigned long long const * v, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_sum(v, n)

    sum = staticmethod(sum)

    def squared_magnitude(p: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
        """squared_magnitude(unsigned long long const * p, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_squared_magnitude(p, n)

    squared_magnitude = staticmethod(squared_magnitude)

    def normalize(arg0: 'unsigned long long *', n: 'unsigned int') -> "void":
        """normalize(unsigned long long * arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_normalize(arg0, n)

    normalize = staticmethod(normalize)

    def copy(x: 'unsigned long long const *', y: 'unsigned long long *', arg2: 'unsigned int') -> "void":
        """copy(unsigned long long const * x, unsigned long long * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_copy(x, y, arg2)

    copy = staticmethod(copy)

    def scale(x: 'unsigned long long const *', y: 'unsigned long long *', arg2: 'unsigned int', arg3: 'unsigned long long const &') -> "void":
        """scale(unsigned long long const * x, unsigned long long * y, unsigned int arg2, unsigned long long const & arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_scale(x, y, arg2, arg3)

    scale = staticmethod(scale)

    def add(*args) -> "void":
        """
        add(unsigned long long const * x, unsigned long long const * y, unsigned long long * z, unsigned int arg3)
        add(unsigned long long const * x, unsigned long long const & y, unsigned long long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorULL_add(*args)

    add = staticmethod(add)

    def subtract(*args) -> "void":
        """
        subtract(unsigned long long const * x, unsigned long long const * y, unsigned long long * z, unsigned int arg3)
        subtract(unsigned long long const * x, unsigned long long const & y, unsigned long long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorULL_subtract(*args)

    subtract = staticmethod(subtract)

    def multiply(*args) -> "void":
        """
        multiply(unsigned long long const * x, unsigned long long const * y, unsigned long long * z, unsigned int arg3)
        multiply(unsigned long long const * x, unsigned long long const & y, unsigned long long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorULL_multiply(*args)

    multiply = staticmethod(multiply)

    def divide(*args) -> "void":
        """
        divide(unsigned long long const * x, unsigned long long const * y, unsigned long long * z, unsigned int arg3)
        divide(unsigned long long const * x, unsigned long long const & y, unsigned long long * z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorULL_divide(*args)

    divide = staticmethod(divide)

    def negate(x: 'unsigned long long const *', y: 'unsigned long long *', arg2: 'unsigned int') -> "void":
        """negate(unsigned long long const * x, unsigned long long * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_negate(x, y, arg2)

    negate = staticmethod(negate)

    def invert(x: 'unsigned long long const *', y: 'unsigned long long *', arg2: 'unsigned int') -> "void":
        """invert(unsigned long long const * x, unsigned long long * y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_invert(x, y, arg2)

    invert = staticmethod(invert)

    def saxpy(a: 'unsigned long long const &', x: 'unsigned long long const *', y: 'unsigned long long *', arg3: 'unsigned int') -> "void":
        """saxpy(unsigned long long const & a, unsigned long long const * x, unsigned long long * y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_saxpy(a, x, y, arg3)

    saxpy = staticmethod(saxpy)

    def fill(x: 'unsigned long long *', arg1: 'unsigned int', v: 'unsigned long long const &') -> "void":
        """fill(unsigned long long * x, unsigned int arg1, unsigned long long const & v)"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_fill(x, arg1, v)

    fill = staticmethod(fill)

    def reverse(x: 'unsigned long long *', arg1: 'unsigned int') -> "void":
        """reverse(unsigned long long * x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_reverse(x, arg1)

    reverse = staticmethod(reverse)

    def dot_product(arg0: 'unsigned long long const *', arg1: 'unsigned long long const *', arg2: 'unsigned int') -> "unsigned long long":
        """dot_product(unsigned long long const * arg0, unsigned long long const * arg1, unsigned int arg2) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_dot_product(arg0, arg1, arg2)

    dot_product = staticmethod(dot_product)

    def inner_product(arg0: 'unsigned long long const *', arg1: 'unsigned long long const *', arg2: 'unsigned int') -> "unsigned long long":
        """inner_product(unsigned long long const * arg0, unsigned long long const * arg1, unsigned int arg2) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_inner_product(arg0, arg1, arg2)

    inner_product = staticmethod(inner_product)

    def conjugate(arg0: 'unsigned long long const *', arg1: 'unsigned long long *', arg2: 'unsigned int') -> "void":
        """conjugate(unsigned long long const * arg0, unsigned long long * arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_conjugate(arg0, arg1, arg2)

    conjugate = staticmethod(conjugate)

    def max_value(arg0: 'unsigned long long const *', arg1: 'unsigned int') -> "unsigned long long":
        """max_value(unsigned long long const * arg0, unsigned int arg1) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_max_value(arg0, arg1)

    max_value = staticmethod(max_value)

    def min_value(arg0: 'unsigned long long const *', arg1: 'unsigned int') -> "unsigned long long":
        """min_value(unsigned long long const * arg0, unsigned int arg1) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_min_value(arg0, arg1)

    min_value = staticmethod(min_value)

    def arg_max(arg0: 'unsigned long long const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_max(unsigned long long const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_arg_max(arg0, arg1)

    arg_max = staticmethod(arg_max)

    def arg_min(arg0: 'unsigned long long const *', arg1: 'unsigned int') -> "unsigned int":
        """arg_min(unsigned long long const * arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_arg_min(arg0, arg1)

    arg_min = staticmethod(arg_min)

    def mean(p: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
        """mean(unsigned long long const * p, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_mean(p, n)

    mean = staticmethod(mean)

    def std(p: 'unsigned long long const *', n: 'unsigned int') -> "double":
        """std(unsigned long long const * p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_std(p, n)

    std = staticmethod(std)

    def sum_sq_diff_means(v: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
        """sum_sq_diff_means(unsigned long long const * v, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_sum_sq_diff_means(v, n)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)

    def one_norm(p: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
        """one_norm(unsigned long long const * p, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_one_norm(p, n)

    one_norm = staticmethod(one_norm)

    def two_norm(p: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
        """two_norm(unsigned long long const * p, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_two_norm(p, n)

    two_norm = staticmethod(two_norm)

    def inf_norm(p: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
        """inf_norm(unsigned long long const * p, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_inf_norm(p, n)

    inf_norm = staticmethod(inf_norm)

    def two_nrm2(p: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
        """two_nrm2(unsigned long long const * p, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_two_nrm2(p, n)

    two_nrm2 = staticmethod(two_nrm2)

    def rms_norm(p: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
        """rms_norm(unsigned long long const * p, unsigned int n) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_rms_norm(p, n)

    rms_norm = staticmethod(rms_norm)

    def euclid_dist_sq(arg0: 'unsigned long long const *', arg1: 'unsigned long long const *', arg2: 'unsigned int') -> "unsigned long long":
        """euclid_dist_sq(unsigned long long const * arg0, unsigned long long const * arg1, unsigned int arg2) -> unsigned long long"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_euclid_dist_sq(arg0, arg1, arg2)

    euclid_dist_sq = staticmethod(euclid_dist_sq)

    def allocate_Tptr(n: 'unsigned long long const') -> "unsigned long long **":
        """allocate_Tptr(unsigned long long const n) -> unsigned long long **"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_allocate_Tptr(n)

    allocate_Tptr = staticmethod(allocate_Tptr)

    def allocate_T(n: 'unsigned long long const') -> "unsigned long long *":
        """allocate_T(unsigned long long const n) -> unsigned long long *"""
        return _vnl_c_vectorPython.vnl_c_vectorULL_allocate_T(n)

    allocate_T = staticmethod(allocate_T)

    def deallocate(*args) -> "void":
        """
        deallocate(unsigned long long ** arg0, unsigned long long const n_when_allocated)
        deallocate(unsigned long long * arg0, unsigned long long const n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorULL_deallocate(*args)

    deallocate = staticmethod(deallocate)

    def __init__(self, *args):
        """
        __init__(vnl_c_vectorULL self) -> vnl_c_vectorULL
        __init__(vnl_c_vectorULL self, vnl_c_vectorULL arg0) -> vnl_c_vectorULL
        """
        _vnl_c_vectorPython.vnl_c_vectorULL_swiginit(self, _vnl_c_vectorPython.new_vnl_c_vectorULL(*args))
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorULL
vnl_c_vectorULL_swigregister = _vnl_c_vectorPython.vnl_c_vectorULL_swigregister
vnl_c_vectorULL_swigregister(vnl_c_vectorULL)

def vnl_c_vectorULL_sum(v: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorULL_sum(unsigned long long const * v, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_sum(v, n)

def vnl_c_vectorULL_squared_magnitude(p: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorULL_squared_magnitude(unsigned long long const * p, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_squared_magnitude(p, n)

def vnl_c_vectorULL_normalize(arg0: 'unsigned long long *', n: 'unsigned int') -> "void":
    """vnl_c_vectorULL_normalize(unsigned long long * arg0, unsigned int n)"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_normalize(arg0, n)

def vnl_c_vectorULL_copy(x: 'unsigned long long const *', y: 'unsigned long long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorULL_copy(unsigned long long const * x, unsigned long long * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_copy(x, y, arg2)

def vnl_c_vectorULL_scale(x: 'unsigned long long const *', y: 'unsigned long long *', arg2: 'unsigned int', arg3: 'unsigned long long const &') -> "void":
    """vnl_c_vectorULL_scale(unsigned long long const * x, unsigned long long * y, unsigned int arg2, unsigned long long const & arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_scale(x, y, arg2, arg3)

def vnl_c_vectorULL_add(*args) -> "void":
    """
    add(unsigned long long const * x, unsigned long long const * y, unsigned long long * z, unsigned int arg3)
    vnl_c_vectorULL_add(unsigned long long const * x, unsigned long long const & y, unsigned long long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorULL_add(*args)

def vnl_c_vectorULL_subtract(*args) -> "void":
    """
    subtract(unsigned long long const * x, unsigned long long const * y, unsigned long long * z, unsigned int arg3)
    vnl_c_vectorULL_subtract(unsigned long long const * x, unsigned long long const & y, unsigned long long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorULL_subtract(*args)

def vnl_c_vectorULL_multiply(*args) -> "void":
    """
    multiply(unsigned long long const * x, unsigned long long const * y, unsigned long long * z, unsigned int arg3)
    vnl_c_vectorULL_multiply(unsigned long long const * x, unsigned long long const & y, unsigned long long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorULL_multiply(*args)

def vnl_c_vectorULL_divide(*args) -> "void":
    """
    divide(unsigned long long const * x, unsigned long long const * y, unsigned long long * z, unsigned int arg3)
    vnl_c_vectorULL_divide(unsigned long long const * x, unsigned long long const & y, unsigned long long * z, unsigned int arg3)
    """
    return _vnl_c_vectorPython.vnl_c_vectorULL_divide(*args)

def vnl_c_vectorULL_negate(x: 'unsigned long long const *', y: 'unsigned long long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorULL_negate(unsigned long long const * x, unsigned long long * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_negate(x, y, arg2)

def vnl_c_vectorULL_invert(x: 'unsigned long long const *', y: 'unsigned long long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorULL_invert(unsigned long long const * x, unsigned long long * y, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_invert(x, y, arg2)

def vnl_c_vectorULL_saxpy(a: 'unsigned long long const &', x: 'unsigned long long const *', y: 'unsigned long long *', arg3: 'unsigned int') -> "void":
    """vnl_c_vectorULL_saxpy(unsigned long long const & a, unsigned long long const * x, unsigned long long * y, unsigned int arg3)"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_saxpy(a, x, y, arg3)

def vnl_c_vectorULL_fill(x: 'unsigned long long *', arg1: 'unsigned int', v: 'unsigned long long const &') -> "void":
    """vnl_c_vectorULL_fill(unsigned long long * x, unsigned int arg1, unsigned long long const & v)"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_fill(x, arg1, v)

def vnl_c_vectorULL_reverse(x: 'unsigned long long *', arg1: 'unsigned int') -> "void":
    """vnl_c_vectorULL_reverse(unsigned long long * x, unsigned int arg1)"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_reverse(x, arg1)

def vnl_c_vectorULL_dot_product(arg0: 'unsigned long long const *', arg1: 'unsigned long long const *', arg2: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorULL_dot_product(unsigned long long const * arg0, unsigned long long const * arg1, unsigned int arg2) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_dot_product(arg0, arg1, arg2)

def vnl_c_vectorULL_inner_product(arg0: 'unsigned long long const *', arg1: 'unsigned long long const *', arg2: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorULL_inner_product(unsigned long long const * arg0, unsigned long long const * arg1, unsigned int arg2) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_inner_product(arg0, arg1, arg2)

def vnl_c_vectorULL_conjugate(arg0: 'unsigned long long const *', arg1: 'unsigned long long *', arg2: 'unsigned int') -> "void":
    """vnl_c_vectorULL_conjugate(unsigned long long const * arg0, unsigned long long * arg1, unsigned int arg2)"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_conjugate(arg0, arg1, arg2)

def vnl_c_vectorULL_max_value(arg0: 'unsigned long long const *', arg1: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorULL_max_value(unsigned long long const * arg0, unsigned int arg1) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_max_value(arg0, arg1)

def vnl_c_vectorULL_min_value(arg0: 'unsigned long long const *', arg1: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorULL_min_value(unsigned long long const * arg0, unsigned int arg1) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_min_value(arg0, arg1)

def vnl_c_vectorULL_arg_max(arg0: 'unsigned long long const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorULL_arg_max(unsigned long long const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_arg_max(arg0, arg1)

def vnl_c_vectorULL_arg_min(arg0: 'unsigned long long const *', arg1: 'unsigned int') -> "unsigned int":
    """vnl_c_vectorULL_arg_min(unsigned long long const * arg0, unsigned int arg1) -> unsigned int"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_arg_min(arg0, arg1)

def vnl_c_vectorULL_mean(p: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorULL_mean(unsigned long long const * p, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_mean(p, n)

def vnl_c_vectorULL_std(p: 'unsigned long long const *', n: 'unsigned int') -> "double":
    """vnl_c_vectorULL_std(unsigned long long const * p, unsigned int n) -> double"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_std(p, n)

def vnl_c_vectorULL_sum_sq_diff_means(v: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorULL_sum_sq_diff_means(unsigned long long const * v, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_sum_sq_diff_means(v, n)

def vnl_c_vectorULL_one_norm(p: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorULL_one_norm(unsigned long long const * p, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_one_norm(p, n)

def vnl_c_vectorULL_two_norm(p: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorULL_two_norm(unsigned long long const * p, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_two_norm(p, n)

def vnl_c_vectorULL_inf_norm(p: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorULL_inf_norm(unsigned long long const * p, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_inf_norm(p, n)

def vnl_c_vectorULL_two_nrm2(p: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorULL_two_nrm2(unsigned long long const * p, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_two_nrm2(p, n)

def vnl_c_vectorULL_rms_norm(p: 'unsigned long long const *', n: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorULL_rms_norm(unsigned long long const * p, unsigned int n) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_rms_norm(p, n)

def vnl_c_vectorULL_euclid_dist_sq(arg0: 'unsigned long long const *', arg1: 'unsigned long long const *', arg2: 'unsigned int') -> "unsigned long long":
    """vnl_c_vectorULL_euclid_dist_sq(unsigned long long const * arg0, unsigned long long const * arg1, unsigned int arg2) -> unsigned long long"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_euclid_dist_sq(arg0, arg1, arg2)

def vnl_c_vectorULL_allocate_Tptr(n: 'unsigned long long const') -> "unsigned long long **":
    """vnl_c_vectorULL_allocate_Tptr(unsigned long long const n) -> unsigned long long **"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_allocate_Tptr(n)

def vnl_c_vectorULL_allocate_T(n: 'unsigned long long const') -> "unsigned long long *":
    """vnl_c_vectorULL_allocate_T(unsigned long long const n) -> unsigned long long *"""
    return _vnl_c_vectorPython.vnl_c_vectorULL_allocate_T(n)

def vnl_c_vectorULL_deallocate(*args) -> "void":
    """
    deallocate(unsigned long long ** arg0, unsigned long long const n_when_allocated)
    vnl_c_vectorULL_deallocate(unsigned long long * arg0, unsigned long long const n_when_allocated)
    """
    return _vnl_c_vectorPython.vnl_c_vectorULL_deallocate(*args)



