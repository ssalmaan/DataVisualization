# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkAccumulateImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkAccumulateImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkAccumulateImageFilterPython
            return _itkAccumulateImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkAccumulateImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkAccumulateImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkAccumulateImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkAccumulateImageFilterIF3IF3_New():
  return itkAccumulateImageFilterIF3IF3.New()


def itkAccumulateImageFilterIF2IF2_New():
  return itkAccumulateImageFilterIF2IF2.New()


def itkAccumulateImageFilterIUS3IUS3_New():
  return itkAccumulateImageFilterIUS3IUS3.New()


def itkAccumulateImageFilterIUS2IUS2_New():
  return itkAccumulateImageFilterIUS2IUS2.New()


def itkAccumulateImageFilterIUC3IUC3_New():
  return itkAccumulateImageFilterIUC3IUC3.New()


def itkAccumulateImageFilterIUC2IUC2_New():
  return itkAccumulateImageFilterIUC2IUC2.New()


def itkAccumulateImageFilterISS3ISS3_New():
  return itkAccumulateImageFilterISS3ISS3.New()


def itkAccumulateImageFilterISS2ISS2_New():
  return itkAccumulateImageFilterISS2ISS2.New()

class itkAccumulateImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """Proxy of C++ itkAccumulateImageFilterIF2IF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAccumulateImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkAccumulateImageFilterIF2IF2_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAccumulateImageFilterIF2IF2_Pointer":
        """Clone(itkAccumulateImageFilterIF2IF2 self) -> itkAccumulateImageFilterIF2IF2_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_Clone(self)

    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_ImageDimensionCheck

    def GetAccumulateDimension(self) -> "unsigned int":
        """GetAccumulateDimension(itkAccumulateImageFilterIF2IF2 self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_GetAccumulateDimension(self)


    def SetAccumulateDimension(self, _arg: 'unsigned int const') -> "void":
        """SetAccumulateDimension(itkAccumulateImageFilterIF2IF2 self, unsigned int const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_SetAccumulateDimension(self, _arg)


    def SetAverage(self, _arg: 'bool const') -> "void":
        """SetAverage(itkAccumulateImageFilterIF2IF2 self, bool const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_SetAverage(self, _arg)


    def GetAverage(self) -> "bool":
        """GetAverage(itkAccumulateImageFilterIF2IF2 self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_GetAverage(self)


    def AverageOn(self) -> "void":
        """AverageOn(itkAccumulateImageFilterIF2IF2 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_AverageOn(self)


    def AverageOff(self) -> "void":
        """AverageOff(itkAccumulateImageFilterIF2IF2 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkAccumulateImageFilterIF2IF2"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIF2IF2

        Create a new object of the class itkAccumulateImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterIF2IF2.Clone = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_Clone, None, itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_GetAccumulateDimension, None, itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_SetAccumulateDimension, None, itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_SetAverage, None, itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_GetAverage, None, itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_AverageOn, None, itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_AverageOff, None, itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_swigregister
itkAccumulateImageFilterIF2IF2_swigregister(itkAccumulateImageFilterIF2IF2)

def itkAccumulateImageFilterIF2IF2___New_orig__() -> "itkAccumulateImageFilterIF2IF2_Pointer":
    """itkAccumulateImageFilterIF2IF2___New_orig__() -> itkAccumulateImageFilterIF2IF2_Pointer"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2___New_orig__()

def itkAccumulateImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterIF2IF2 *":
    """itkAccumulateImageFilterIF2IF2_cast(itkLightObject obj) -> itkAccumulateImageFilterIF2IF2"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_cast(obj)

class itkAccumulateImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """Proxy of C++ itkAccumulateImageFilterIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAccumulateImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkAccumulateImageFilterIF3IF3_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAccumulateImageFilterIF3IF3_Pointer":
        """Clone(itkAccumulateImageFilterIF3IF3 self) -> itkAccumulateImageFilterIF3IF3_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_Clone(self)

    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_ImageDimensionCheck

    def GetAccumulateDimension(self) -> "unsigned int":
        """GetAccumulateDimension(itkAccumulateImageFilterIF3IF3 self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_GetAccumulateDimension(self)


    def SetAccumulateDimension(self, _arg: 'unsigned int const') -> "void":
        """SetAccumulateDimension(itkAccumulateImageFilterIF3IF3 self, unsigned int const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_SetAccumulateDimension(self, _arg)


    def SetAverage(self, _arg: 'bool const') -> "void":
        """SetAverage(itkAccumulateImageFilterIF3IF3 self, bool const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_SetAverage(self, _arg)


    def GetAverage(self) -> "bool":
        """GetAverage(itkAccumulateImageFilterIF3IF3 self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_GetAverage(self)


    def AverageOn(self) -> "void":
        """AverageOn(itkAccumulateImageFilterIF3IF3 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_AverageOn(self)


    def AverageOff(self) -> "void":
        """AverageOff(itkAccumulateImageFilterIF3IF3 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkAccumulateImageFilterIF3IF3"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIF3IF3

        Create a new object of the class itkAccumulateImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterIF3IF3.Clone = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_Clone, None, itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_GetAccumulateDimension, None, itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_SetAccumulateDimension, None, itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_SetAverage, None, itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_GetAverage, None, itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_AverageOn, None, itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_AverageOff, None, itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_swigregister
itkAccumulateImageFilterIF3IF3_swigregister(itkAccumulateImageFilterIF3IF3)

def itkAccumulateImageFilterIF3IF3___New_orig__() -> "itkAccumulateImageFilterIF3IF3_Pointer":
    """itkAccumulateImageFilterIF3IF3___New_orig__() -> itkAccumulateImageFilterIF3IF3_Pointer"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3___New_orig__()

def itkAccumulateImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterIF3IF3 *":
    """itkAccumulateImageFilterIF3IF3_cast(itkLightObject obj) -> itkAccumulateImageFilterIF3IF3"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_cast(obj)

class itkAccumulateImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """Proxy of C++ itkAccumulateImageFilterISS2ISS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAccumulateImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkAccumulateImageFilterISS2ISS2_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAccumulateImageFilterISS2ISS2_Pointer":
        """Clone(itkAccumulateImageFilterISS2ISS2 self) -> itkAccumulateImageFilterISS2ISS2_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_Clone(self)

    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_ImageDimensionCheck

    def GetAccumulateDimension(self) -> "unsigned int":
        """GetAccumulateDimension(itkAccumulateImageFilterISS2ISS2 self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_GetAccumulateDimension(self)


    def SetAccumulateDimension(self, _arg: 'unsigned int const') -> "void":
        """SetAccumulateDimension(itkAccumulateImageFilterISS2ISS2 self, unsigned int const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_SetAccumulateDimension(self, _arg)


    def SetAverage(self, _arg: 'bool const') -> "void":
        """SetAverage(itkAccumulateImageFilterISS2ISS2 self, bool const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_SetAverage(self, _arg)


    def GetAverage(self) -> "bool":
        """GetAverage(itkAccumulateImageFilterISS2ISS2 self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_GetAverage(self)


    def AverageOn(self) -> "void":
        """AverageOn(itkAccumulateImageFilterISS2ISS2 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_AverageOn(self)


    def AverageOff(self) -> "void":
        """AverageOff(itkAccumulateImageFilterISS2ISS2 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkAccumulateImageFilterISS2ISS2"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterISS2ISS2

        Create a new object of the class itkAccumulateImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterISS2ISS2.Clone = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_Clone, None, itkAccumulateImageFilterISS2ISS2)
itkAccumulateImageFilterISS2ISS2.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_GetAccumulateDimension, None, itkAccumulateImageFilterISS2ISS2)
itkAccumulateImageFilterISS2ISS2.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_SetAccumulateDimension, None, itkAccumulateImageFilterISS2ISS2)
itkAccumulateImageFilterISS2ISS2.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_SetAverage, None, itkAccumulateImageFilterISS2ISS2)
itkAccumulateImageFilterISS2ISS2.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_GetAverage, None, itkAccumulateImageFilterISS2ISS2)
itkAccumulateImageFilterISS2ISS2.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_AverageOn, None, itkAccumulateImageFilterISS2ISS2)
itkAccumulateImageFilterISS2ISS2.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_AverageOff, None, itkAccumulateImageFilterISS2ISS2)
itkAccumulateImageFilterISS2ISS2_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_swigregister
itkAccumulateImageFilterISS2ISS2_swigregister(itkAccumulateImageFilterISS2ISS2)

def itkAccumulateImageFilterISS2ISS2___New_orig__() -> "itkAccumulateImageFilterISS2ISS2_Pointer":
    """itkAccumulateImageFilterISS2ISS2___New_orig__() -> itkAccumulateImageFilterISS2ISS2_Pointer"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2___New_orig__()

def itkAccumulateImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterISS2ISS2 *":
    """itkAccumulateImageFilterISS2ISS2_cast(itkLightObject obj) -> itkAccumulateImageFilterISS2ISS2"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_cast(obj)

class itkAccumulateImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """Proxy of C++ itkAccumulateImageFilterISS3ISS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAccumulateImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkAccumulateImageFilterISS3ISS3_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAccumulateImageFilterISS3ISS3_Pointer":
        """Clone(itkAccumulateImageFilterISS3ISS3 self) -> itkAccumulateImageFilterISS3ISS3_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_Clone(self)

    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_ImageDimensionCheck

    def GetAccumulateDimension(self) -> "unsigned int":
        """GetAccumulateDimension(itkAccumulateImageFilterISS3ISS3 self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_GetAccumulateDimension(self)


    def SetAccumulateDimension(self, _arg: 'unsigned int const') -> "void":
        """SetAccumulateDimension(itkAccumulateImageFilterISS3ISS3 self, unsigned int const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_SetAccumulateDimension(self, _arg)


    def SetAverage(self, _arg: 'bool const') -> "void":
        """SetAverage(itkAccumulateImageFilterISS3ISS3 self, bool const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_SetAverage(self, _arg)


    def GetAverage(self) -> "bool":
        """GetAverage(itkAccumulateImageFilterISS3ISS3 self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_GetAverage(self)


    def AverageOn(self) -> "void":
        """AverageOn(itkAccumulateImageFilterISS3ISS3 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_AverageOn(self)


    def AverageOff(self) -> "void":
        """AverageOff(itkAccumulateImageFilterISS3ISS3 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkAccumulateImageFilterISS3ISS3"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterISS3ISS3

        Create a new object of the class itkAccumulateImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterISS3ISS3.Clone = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_Clone, None, itkAccumulateImageFilterISS3ISS3)
itkAccumulateImageFilterISS3ISS3.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_GetAccumulateDimension, None, itkAccumulateImageFilterISS3ISS3)
itkAccumulateImageFilterISS3ISS3.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_SetAccumulateDimension, None, itkAccumulateImageFilterISS3ISS3)
itkAccumulateImageFilterISS3ISS3.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_SetAverage, None, itkAccumulateImageFilterISS3ISS3)
itkAccumulateImageFilterISS3ISS3.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_GetAverage, None, itkAccumulateImageFilterISS3ISS3)
itkAccumulateImageFilterISS3ISS3.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_AverageOn, None, itkAccumulateImageFilterISS3ISS3)
itkAccumulateImageFilterISS3ISS3.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_AverageOff, None, itkAccumulateImageFilterISS3ISS3)
itkAccumulateImageFilterISS3ISS3_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_swigregister
itkAccumulateImageFilterISS3ISS3_swigregister(itkAccumulateImageFilterISS3ISS3)

def itkAccumulateImageFilterISS3ISS3___New_orig__() -> "itkAccumulateImageFilterISS3ISS3_Pointer":
    """itkAccumulateImageFilterISS3ISS3___New_orig__() -> itkAccumulateImageFilterISS3ISS3_Pointer"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3___New_orig__()

def itkAccumulateImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterISS3ISS3 *":
    """itkAccumulateImageFilterISS3ISS3_cast(itkLightObject obj) -> itkAccumulateImageFilterISS3ISS3"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_cast(obj)

class itkAccumulateImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """Proxy of C++ itkAccumulateImageFilterIUC2IUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAccumulateImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkAccumulateImageFilterIUC2IUC2_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAccumulateImageFilterIUC2IUC2_Pointer":
        """Clone(itkAccumulateImageFilterIUC2IUC2 self) -> itkAccumulateImageFilterIUC2IUC2_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_Clone(self)

    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_ImageDimensionCheck

    def GetAccumulateDimension(self) -> "unsigned int":
        """GetAccumulateDimension(itkAccumulateImageFilterIUC2IUC2 self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_GetAccumulateDimension(self)


    def SetAccumulateDimension(self, _arg: 'unsigned int const') -> "void":
        """SetAccumulateDimension(itkAccumulateImageFilterIUC2IUC2 self, unsigned int const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_SetAccumulateDimension(self, _arg)


    def SetAverage(self, _arg: 'bool const') -> "void":
        """SetAverage(itkAccumulateImageFilterIUC2IUC2 self, bool const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_SetAverage(self, _arg)


    def GetAverage(self) -> "bool":
        """GetAverage(itkAccumulateImageFilterIUC2IUC2 self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_GetAverage(self)


    def AverageOn(self) -> "void":
        """AverageOn(itkAccumulateImageFilterIUC2IUC2 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_AverageOn(self)


    def AverageOff(self) -> "void":
        """AverageOff(itkAccumulateImageFilterIUC2IUC2 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkAccumulateImageFilterIUC2IUC2"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUC2IUC2

        Create a new object of the class itkAccumulateImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterIUC2IUC2.Clone = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_Clone, None, itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_GetAccumulateDimension, None, itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_SetAccumulateDimension, None, itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_SetAverage, None, itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_GetAverage, None, itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_AverageOn, None, itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_AverageOff, None, itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_swigregister
itkAccumulateImageFilterIUC2IUC2_swigregister(itkAccumulateImageFilterIUC2IUC2)

def itkAccumulateImageFilterIUC2IUC2___New_orig__() -> "itkAccumulateImageFilterIUC2IUC2_Pointer":
    """itkAccumulateImageFilterIUC2IUC2___New_orig__() -> itkAccumulateImageFilterIUC2IUC2_Pointer"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2___New_orig__()

def itkAccumulateImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterIUC2IUC2 *":
    """itkAccumulateImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkAccumulateImageFilterIUC2IUC2"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_cast(obj)

class itkAccumulateImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """Proxy of C++ itkAccumulateImageFilterIUC3IUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAccumulateImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkAccumulateImageFilterIUC3IUC3_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAccumulateImageFilterIUC3IUC3_Pointer":
        """Clone(itkAccumulateImageFilterIUC3IUC3 self) -> itkAccumulateImageFilterIUC3IUC3_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_Clone(self)

    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_ImageDimensionCheck

    def GetAccumulateDimension(self) -> "unsigned int":
        """GetAccumulateDimension(itkAccumulateImageFilterIUC3IUC3 self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_GetAccumulateDimension(self)


    def SetAccumulateDimension(self, _arg: 'unsigned int const') -> "void":
        """SetAccumulateDimension(itkAccumulateImageFilterIUC3IUC3 self, unsigned int const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_SetAccumulateDimension(self, _arg)


    def SetAverage(self, _arg: 'bool const') -> "void":
        """SetAverage(itkAccumulateImageFilterIUC3IUC3 self, bool const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_SetAverage(self, _arg)


    def GetAverage(self) -> "bool":
        """GetAverage(itkAccumulateImageFilterIUC3IUC3 self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_GetAverage(self)


    def AverageOn(self) -> "void":
        """AverageOn(itkAccumulateImageFilterIUC3IUC3 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_AverageOn(self)


    def AverageOff(self) -> "void":
        """AverageOff(itkAccumulateImageFilterIUC3IUC3 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkAccumulateImageFilterIUC3IUC3"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUC3IUC3

        Create a new object of the class itkAccumulateImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterIUC3IUC3.Clone = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_Clone, None, itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_GetAccumulateDimension, None, itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_SetAccumulateDimension, None, itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_SetAverage, None, itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_GetAverage, None, itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_AverageOn, None, itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_AverageOff, None, itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_swigregister
itkAccumulateImageFilterIUC3IUC3_swigregister(itkAccumulateImageFilterIUC3IUC3)

def itkAccumulateImageFilterIUC3IUC3___New_orig__() -> "itkAccumulateImageFilterIUC3IUC3_Pointer":
    """itkAccumulateImageFilterIUC3IUC3___New_orig__() -> itkAccumulateImageFilterIUC3IUC3_Pointer"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3___New_orig__()

def itkAccumulateImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterIUC3IUC3 *":
    """itkAccumulateImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkAccumulateImageFilterIUC3IUC3"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_cast(obj)

class itkAccumulateImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """Proxy of C++ itkAccumulateImageFilterIUS2IUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAccumulateImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkAccumulateImageFilterIUS2IUS2_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAccumulateImageFilterIUS2IUS2_Pointer":
        """Clone(itkAccumulateImageFilterIUS2IUS2 self) -> itkAccumulateImageFilterIUS2IUS2_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_Clone(self)

    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_ImageDimensionCheck

    def GetAccumulateDimension(self) -> "unsigned int":
        """GetAccumulateDimension(itkAccumulateImageFilterIUS2IUS2 self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_GetAccumulateDimension(self)


    def SetAccumulateDimension(self, _arg: 'unsigned int const') -> "void":
        """SetAccumulateDimension(itkAccumulateImageFilterIUS2IUS2 self, unsigned int const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_SetAccumulateDimension(self, _arg)


    def SetAverage(self, _arg: 'bool const') -> "void":
        """SetAverage(itkAccumulateImageFilterIUS2IUS2 self, bool const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_SetAverage(self, _arg)


    def GetAverage(self) -> "bool":
        """GetAverage(itkAccumulateImageFilterIUS2IUS2 self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_GetAverage(self)


    def AverageOn(self) -> "void":
        """AverageOn(itkAccumulateImageFilterIUS2IUS2 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_AverageOn(self)


    def AverageOff(self) -> "void":
        """AverageOff(itkAccumulateImageFilterIUS2IUS2 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkAccumulateImageFilterIUS2IUS2"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUS2IUS2

        Create a new object of the class itkAccumulateImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterIUS2IUS2.Clone = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_Clone, None, itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_GetAccumulateDimension, None, itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_SetAccumulateDimension, None, itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_SetAverage, None, itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_GetAverage, None, itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_AverageOn, None, itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_AverageOff, None, itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_swigregister
itkAccumulateImageFilterIUS2IUS2_swigregister(itkAccumulateImageFilterIUS2IUS2)

def itkAccumulateImageFilterIUS2IUS2___New_orig__() -> "itkAccumulateImageFilterIUS2IUS2_Pointer":
    """itkAccumulateImageFilterIUS2IUS2___New_orig__() -> itkAccumulateImageFilterIUS2IUS2_Pointer"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2___New_orig__()

def itkAccumulateImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterIUS2IUS2 *":
    """itkAccumulateImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkAccumulateImageFilterIUS2IUS2"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_cast(obj)

class itkAccumulateImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """Proxy of C++ itkAccumulateImageFilterIUS3IUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAccumulateImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkAccumulateImageFilterIUS3IUS3_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAccumulateImageFilterIUS3IUS3_Pointer":
        """Clone(itkAccumulateImageFilterIUS3IUS3 self) -> itkAccumulateImageFilterIUS3IUS3_Pointer"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_Clone(self)

    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_ImageDimensionCheck

    def GetAccumulateDimension(self) -> "unsigned int":
        """GetAccumulateDimension(itkAccumulateImageFilterIUS3IUS3 self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_GetAccumulateDimension(self)


    def SetAccumulateDimension(self, _arg: 'unsigned int const') -> "void":
        """SetAccumulateDimension(itkAccumulateImageFilterIUS3IUS3 self, unsigned int const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_SetAccumulateDimension(self, _arg)


    def SetAverage(self, _arg: 'bool const') -> "void":
        """SetAverage(itkAccumulateImageFilterIUS3IUS3 self, bool const _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_SetAverage(self, _arg)


    def GetAverage(self) -> "bool":
        """GetAverage(itkAccumulateImageFilterIUS3IUS3 self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_GetAverage(self)


    def AverageOn(self) -> "void":
        """AverageOn(itkAccumulateImageFilterIUS3IUS3 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_AverageOn(self)


    def AverageOff(self) -> "void":
        """AverageOff(itkAccumulateImageFilterIUS3IUS3 self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkAccumulateImageFilterIUS3IUS3"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUS3IUS3

        Create a new object of the class itkAccumulateImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterIUS3IUS3.Clone = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_Clone, None, itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_GetAccumulateDimension, None, itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_SetAccumulateDimension, None, itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_SetAverage, None, itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_GetAverage, None, itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_AverageOn, None, itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_AverageOff, None, itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_swigregister
itkAccumulateImageFilterIUS3IUS3_swigregister(itkAccumulateImageFilterIUS3IUS3)

def itkAccumulateImageFilterIUS3IUS3___New_orig__() -> "itkAccumulateImageFilterIUS3IUS3_Pointer":
    """itkAccumulateImageFilterIUS3IUS3___New_orig__() -> itkAccumulateImageFilterIUS3IUS3_Pointer"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3___New_orig__()

def itkAccumulateImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkAccumulateImageFilterIUS3IUS3 *":
    """itkAccumulateImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkAccumulateImageFilterIUS3IUS3"""
    return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_cast(obj)


def accumulate_image_filter(*args, **kwargs):
    """Procedural interface for AccumulateImageFilter"""
    import itk
    instance = itk.AccumulateImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def accumulate_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.AccumulateImageFilter, itkTemplate.itkTemplate):
        accumulate_image_filter.__doc__ = itk.AccumulateImageFilter.values()[0].__doc__
    else:
        accumulate_image_filter.__doc__ = itk.AccumulateImageFilter.__doc__




