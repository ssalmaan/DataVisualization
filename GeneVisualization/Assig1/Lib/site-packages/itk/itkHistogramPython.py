# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkHistogramPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkHistogramPython', [dirname(__file__)])
        except ImportError:
            import _itkHistogramPython
            return _itkHistogramPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkHistogramPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkHistogramPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkHistogramPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkSamplePython
import ITKCommonBasePython
import pyBasePython
import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython

def itkSimpleDataObjectDecoratorHD_New():
  return itkSimpleDataObjectDecoratorHD.New()


def itkSimpleDataObjectDecoratorHF_New():
  return itkSimpleDataObjectDecoratorHF.New()


def itkHistogramD_New():
  return itkHistogramD.New()


def itkHistogramF_New():
  return itkHistogramF.New()

class itkHistogramD(itkSamplePython.itkSampleAD):
    """Proxy of C++ itkHistogramD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramD_Pointer":
        """__New_orig__() -> itkHistogramD_Pointer"""
        return _itkHistogramPython.itkHistogramD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramD_Pointer":
        """Clone(itkHistogramD self) -> itkHistogramD_Pointer"""
        return _itkHistogramPython.itkHistogramD_Clone(self)


    def Initialize(self, *args) -> "void":
        """
        Initialize(itkHistogramD self, itkArrayULL size)
        Initialize(itkHistogramD self, itkArrayULL size, itkArrayD lowerBound, itkArrayD upperBound)
        """
        return _itkHistogramPython.itkHistogramD_Initialize(self, *args)


    def SetToZero(self) -> "void":
        """SetToZero(itkHistogramD self)"""
        return _itkHistogramPython.itkHistogramD_SetToZero(self)


    def GetIndex(self, *args) -> "itkArraySLL const &":
        """
        GetIndex(itkHistogramD self, itkArrayD measurement, itkArraySLL index) -> bool
        GetIndex(itkHistogramD self, unsigned long long id) -> itkArraySLL
        """
        return _itkHistogramPython.itkHistogramD_GetIndex(self, *args)


    def GetClipBinsAtEnds(self) -> "bool":
        """GetClipBinsAtEnds(itkHistogramD self) -> bool"""
        return _itkHistogramPython.itkHistogramD_GetClipBinsAtEnds(self)


    def SetClipBinsAtEnds(self, _arg: 'bool const') -> "void":
        """SetClipBinsAtEnds(itkHistogramD self, bool const _arg)"""
        return _itkHistogramPython.itkHistogramD_SetClipBinsAtEnds(self, _arg)


    def IsIndexOutOfBounds(self, index: 'itkArraySLL') -> "bool":
        """IsIndexOutOfBounds(itkHistogramD self, itkArraySLL index) -> bool"""
        return _itkHistogramPython.itkHistogramD_IsIndexOutOfBounds(self, index)


    def GetInstanceIdentifier(self, index: 'itkArraySLL') -> "unsigned long long":
        """GetInstanceIdentifier(itkHistogramD self, itkArraySLL index) -> unsigned long long"""
        return _itkHistogramPython.itkHistogramD_GetInstanceIdentifier(self, index)


    def GetSize(self, *args) -> "unsigned long long":
        """
        GetSize(itkHistogramD self) -> itkArrayULL
        GetSize(itkHistogramD self, unsigned int dimension) -> unsigned long long
        """
        return _itkHistogramPython.itkHistogramD_GetSize(self, *args)


    def GetBinMin(self, dimension: 'unsigned int', nbin: 'unsigned long long') -> "double const &":
        """GetBinMin(itkHistogramD self, unsigned int dimension, unsigned long long nbin) -> double const &"""
        return _itkHistogramPython.itkHistogramD_GetBinMin(self, dimension, nbin)


    def GetBinMax(self, dimension: 'unsigned int', nbin: 'unsigned long long') -> "double const &":
        """GetBinMax(itkHistogramD self, unsigned int dimension, unsigned long long nbin) -> double const &"""
        return _itkHistogramPython.itkHistogramD_GetBinMax(self, dimension, nbin)


    def SetBinMin(self, dimension: 'unsigned int', nbin: 'unsigned long long', min: 'double') -> "void":
        """SetBinMin(itkHistogramD self, unsigned int dimension, unsigned long long nbin, double min)"""
        return _itkHistogramPython.itkHistogramD_SetBinMin(self, dimension, nbin, min)


    def SetBinMax(self, dimension: 'unsigned int', nbin: 'unsigned long long', max: 'double') -> "void":
        """SetBinMax(itkHistogramD self, unsigned int dimension, unsigned long long nbin, double max)"""
        return _itkHistogramPython.itkHistogramD_SetBinMax(self, dimension, nbin, max)


    def GetBinMinFromValue(self, dimension: 'unsigned int', value: 'float') -> "double const &":
        """GetBinMinFromValue(itkHistogramD self, unsigned int dimension, float value) -> double const &"""
        return _itkHistogramPython.itkHistogramD_GetBinMinFromValue(self, dimension, value)


    def GetBinMaxFromValue(self, dimension: 'unsigned int', value: 'float') -> "double const &":
        """GetBinMaxFromValue(itkHistogramD self, unsigned int dimension, float value) -> double const &"""
        return _itkHistogramPython.itkHistogramD_GetBinMaxFromValue(self, dimension, value)


    def GetDimensionMins(self, dimension: 'unsigned int') -> "std::vector< double,std::allocator< double > > const &":
        """GetDimensionMins(itkHistogramD self, unsigned int dimension) -> vectorD"""
        return _itkHistogramPython.itkHistogramD_GetDimensionMins(self, dimension)


    def GetDimensionMaxs(self, dimension: 'unsigned int') -> "std::vector< double,std::allocator< double > > const &":
        """GetDimensionMaxs(itkHistogramD self, unsigned int dimension) -> vectorD"""
        return _itkHistogramPython.itkHistogramD_GetDimensionMaxs(self, dimension)


    def GetMins(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &":
        """GetMins(itkHistogramD self) -> vectorvectorD"""
        return _itkHistogramPython.itkHistogramD_GetMins(self)


    def GetMaxs(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &":
        """GetMaxs(itkHistogramD self) -> vectorvectorD"""
        return _itkHistogramPython.itkHistogramD_GetMaxs(self)


    def GetHistogramMinFromIndex(self, index: 'itkArraySLL') -> "itkArrayD const &":
        """GetHistogramMinFromIndex(itkHistogramD self, itkArraySLL index) -> itkArrayD"""
        return _itkHistogramPython.itkHistogramD_GetHistogramMinFromIndex(self, index)


    def GetHistogramMaxFromIndex(self, index: 'itkArraySLL') -> "itkArrayD const &":
        """GetHistogramMaxFromIndex(itkHistogramD self, itkArraySLL index) -> itkArrayD"""
        return _itkHistogramPython.itkHistogramD_GetHistogramMaxFromIndex(self, index)


    def SetFrequency(self, *args) -> "bool":
        """
        SetFrequency(itkHistogramD self, unsigned long long value)
        SetFrequency(itkHistogramD self, unsigned long long id, unsigned long long value) -> bool
        """
        return _itkHistogramPython.itkHistogramD_SetFrequency(self, *args)


    def SetFrequencyOfIndex(self, index: 'itkArraySLL', value: 'unsigned long long') -> "bool":
        """SetFrequencyOfIndex(itkHistogramD self, itkArraySLL index, unsigned long long value) -> bool"""
        return _itkHistogramPython.itkHistogramD_SetFrequencyOfIndex(self, index, value)


    def SetFrequencyOfMeasurement(self, measurement: 'itkArrayD', value: 'unsigned long long') -> "bool":
        """SetFrequencyOfMeasurement(itkHistogramD self, itkArrayD measurement, unsigned long long value) -> bool"""
        return _itkHistogramPython.itkHistogramD_SetFrequencyOfMeasurement(self, measurement, value)


    def IncreaseFrequency(self, id: 'unsigned long long', value: 'unsigned long long') -> "bool":
        """IncreaseFrequency(itkHistogramD self, unsigned long long id, unsigned long long value) -> bool"""
        return _itkHistogramPython.itkHistogramD_IncreaseFrequency(self, id, value)


    def IncreaseFrequencyOfIndex(self, index: 'itkArraySLL', value: 'unsigned long long') -> "bool":
        """IncreaseFrequencyOfIndex(itkHistogramD self, itkArraySLL index, unsigned long long value) -> bool"""
        return _itkHistogramPython.itkHistogramD_IncreaseFrequencyOfIndex(self, index, value)


    def IncreaseFrequencyOfMeasurement(self, measurement: 'itkArrayD', value: 'unsigned long long') -> "bool":
        """IncreaseFrequencyOfMeasurement(itkHistogramD self, itkArrayD measurement, unsigned long long value) -> bool"""
        return _itkHistogramPython.itkHistogramD_IncreaseFrequencyOfMeasurement(self, measurement, value)


    def GetMeasurementVector(self, *args) -> "itkArrayD const &":
        """
        GetMeasurementVector(itkHistogramD self, unsigned long long id) -> itkArrayD
        GetMeasurementVector(itkHistogramD self, itkArraySLL index) -> itkArrayD
        """
        return _itkHistogramPython.itkHistogramD_GetMeasurementVector(self, *args)


    def GetMeasurement(self, n: 'unsigned long long', dimension: 'unsigned int') -> "double":
        """GetMeasurement(itkHistogramD self, unsigned long long n, unsigned int dimension) -> double"""
        return _itkHistogramPython.itkHistogramD_GetMeasurement(self, n, dimension)


    def GetFrequency(self, *args) -> "unsigned long long":
        """
        GetFrequency(itkHistogramD self, unsigned long long id) -> unsigned long long
        GetFrequency(itkHistogramD self, itkArraySLL index) -> unsigned long long
        GetFrequency(itkHistogramD self, unsigned long long n, unsigned int dimension) -> unsigned long long
        """
        return _itkHistogramPython.itkHistogramD_GetFrequency(self, *args)


    def Quantile(self, dimension: 'unsigned int', p: 'double') -> "double":
        """Quantile(itkHistogramD self, unsigned int dimension, double p) -> double"""
        return _itkHistogramPython.itkHistogramD_Quantile(self, dimension, p)


    def Mean(self, dimension: 'unsigned int') -> "double":
        """Mean(itkHistogramD self, unsigned int dimension) -> double"""
        return _itkHistogramPython.itkHistogramD_Mean(self, dimension)

    __swig_destroy__ = _itkHistogramPython.delete_itkHistogramD

    def cast(obj: 'itkLightObject') -> "itkHistogramD *":
        """cast(itkLightObject obj) -> itkHistogramD"""
        return _itkHistogramPython.itkHistogramD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramD

        Create a new object of the class itkHistogramD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramD.Clone = new_instancemethod(_itkHistogramPython.itkHistogramD_Clone, None, itkHistogramD)
itkHistogramD.Initialize = new_instancemethod(_itkHistogramPython.itkHistogramD_Initialize, None, itkHistogramD)
itkHistogramD.SetToZero = new_instancemethod(_itkHistogramPython.itkHistogramD_SetToZero, None, itkHistogramD)
itkHistogramD.GetIndex = new_instancemethod(_itkHistogramPython.itkHistogramD_GetIndex, None, itkHistogramD)
itkHistogramD.GetClipBinsAtEnds = new_instancemethod(_itkHistogramPython.itkHistogramD_GetClipBinsAtEnds, None, itkHistogramD)
itkHistogramD.SetClipBinsAtEnds = new_instancemethod(_itkHistogramPython.itkHistogramD_SetClipBinsAtEnds, None, itkHistogramD)
itkHistogramD.IsIndexOutOfBounds = new_instancemethod(_itkHistogramPython.itkHistogramD_IsIndexOutOfBounds, None, itkHistogramD)
itkHistogramD.GetInstanceIdentifier = new_instancemethod(_itkHistogramPython.itkHistogramD_GetInstanceIdentifier, None, itkHistogramD)
itkHistogramD.GetSize = new_instancemethod(_itkHistogramPython.itkHistogramD_GetSize, None, itkHistogramD)
itkHistogramD.GetBinMin = new_instancemethod(_itkHistogramPython.itkHistogramD_GetBinMin, None, itkHistogramD)
itkHistogramD.GetBinMax = new_instancemethod(_itkHistogramPython.itkHistogramD_GetBinMax, None, itkHistogramD)
itkHistogramD.SetBinMin = new_instancemethod(_itkHistogramPython.itkHistogramD_SetBinMin, None, itkHistogramD)
itkHistogramD.SetBinMax = new_instancemethod(_itkHistogramPython.itkHistogramD_SetBinMax, None, itkHistogramD)
itkHistogramD.GetBinMinFromValue = new_instancemethod(_itkHistogramPython.itkHistogramD_GetBinMinFromValue, None, itkHistogramD)
itkHistogramD.GetBinMaxFromValue = new_instancemethod(_itkHistogramPython.itkHistogramD_GetBinMaxFromValue, None, itkHistogramD)
itkHistogramD.GetDimensionMins = new_instancemethod(_itkHistogramPython.itkHistogramD_GetDimensionMins, None, itkHistogramD)
itkHistogramD.GetDimensionMaxs = new_instancemethod(_itkHistogramPython.itkHistogramD_GetDimensionMaxs, None, itkHistogramD)
itkHistogramD.GetMins = new_instancemethod(_itkHistogramPython.itkHistogramD_GetMins, None, itkHistogramD)
itkHistogramD.GetMaxs = new_instancemethod(_itkHistogramPython.itkHistogramD_GetMaxs, None, itkHistogramD)
itkHistogramD.GetHistogramMinFromIndex = new_instancemethod(_itkHistogramPython.itkHistogramD_GetHistogramMinFromIndex, None, itkHistogramD)
itkHistogramD.GetHistogramMaxFromIndex = new_instancemethod(_itkHistogramPython.itkHistogramD_GetHistogramMaxFromIndex, None, itkHistogramD)
itkHistogramD.SetFrequency = new_instancemethod(_itkHistogramPython.itkHistogramD_SetFrequency, None, itkHistogramD)
itkHistogramD.SetFrequencyOfIndex = new_instancemethod(_itkHistogramPython.itkHistogramD_SetFrequencyOfIndex, None, itkHistogramD)
itkHistogramD.SetFrequencyOfMeasurement = new_instancemethod(_itkHistogramPython.itkHistogramD_SetFrequencyOfMeasurement, None, itkHistogramD)
itkHistogramD.IncreaseFrequency = new_instancemethod(_itkHistogramPython.itkHistogramD_IncreaseFrequency, None, itkHistogramD)
itkHistogramD.IncreaseFrequencyOfIndex = new_instancemethod(_itkHistogramPython.itkHistogramD_IncreaseFrequencyOfIndex, None, itkHistogramD)
itkHistogramD.IncreaseFrequencyOfMeasurement = new_instancemethod(_itkHistogramPython.itkHistogramD_IncreaseFrequencyOfMeasurement, None, itkHistogramD)
itkHistogramD.GetMeasurementVector = new_instancemethod(_itkHistogramPython.itkHistogramD_GetMeasurementVector, None, itkHistogramD)
itkHistogramD.GetMeasurement = new_instancemethod(_itkHistogramPython.itkHistogramD_GetMeasurement, None, itkHistogramD)
itkHistogramD.GetFrequency = new_instancemethod(_itkHistogramPython.itkHistogramD_GetFrequency, None, itkHistogramD)
itkHistogramD.Quantile = new_instancemethod(_itkHistogramPython.itkHistogramD_Quantile, None, itkHistogramD)
itkHistogramD.Mean = new_instancemethod(_itkHistogramPython.itkHistogramD_Mean, None, itkHistogramD)
itkHistogramD_swigregister = _itkHistogramPython.itkHistogramD_swigregister
itkHistogramD_swigregister(itkHistogramD)

def itkHistogramD___New_orig__() -> "itkHistogramD_Pointer":
    """itkHistogramD___New_orig__() -> itkHistogramD_Pointer"""
    return _itkHistogramPython.itkHistogramD___New_orig__()

def itkHistogramD_cast(obj: 'itkLightObject') -> "itkHistogramD *":
    """itkHistogramD_cast(itkLightObject obj) -> itkHistogramD"""
    return _itkHistogramPython.itkHistogramD_cast(obj)

class itkHistogramF(itkSamplePython.itkSampleAF):
    """Proxy of C++ itkHistogramF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHistogramF_Pointer":
        """__New_orig__() -> itkHistogramF_Pointer"""
        return _itkHistogramPython.itkHistogramF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHistogramF_Pointer":
        """Clone(itkHistogramF self) -> itkHistogramF_Pointer"""
        return _itkHistogramPython.itkHistogramF_Clone(self)


    def Initialize(self, *args) -> "void":
        """
        Initialize(itkHistogramF self, itkArrayULL size)
        Initialize(itkHistogramF self, itkArrayULL size, itkArrayF lowerBound, itkArrayF upperBound)
        """
        return _itkHistogramPython.itkHistogramF_Initialize(self, *args)


    def SetToZero(self) -> "void":
        """SetToZero(itkHistogramF self)"""
        return _itkHistogramPython.itkHistogramF_SetToZero(self)


    def GetIndex(self, *args) -> "itkArraySLL const &":
        """
        GetIndex(itkHistogramF self, itkArrayF measurement, itkArraySLL index) -> bool
        GetIndex(itkHistogramF self, unsigned long long id) -> itkArraySLL
        """
        return _itkHistogramPython.itkHistogramF_GetIndex(self, *args)


    def GetClipBinsAtEnds(self) -> "bool":
        """GetClipBinsAtEnds(itkHistogramF self) -> bool"""
        return _itkHistogramPython.itkHistogramF_GetClipBinsAtEnds(self)


    def SetClipBinsAtEnds(self, _arg: 'bool const') -> "void":
        """SetClipBinsAtEnds(itkHistogramF self, bool const _arg)"""
        return _itkHistogramPython.itkHistogramF_SetClipBinsAtEnds(self, _arg)


    def IsIndexOutOfBounds(self, index: 'itkArraySLL') -> "bool":
        """IsIndexOutOfBounds(itkHistogramF self, itkArraySLL index) -> bool"""
        return _itkHistogramPython.itkHistogramF_IsIndexOutOfBounds(self, index)


    def GetInstanceIdentifier(self, index: 'itkArraySLL') -> "unsigned long long":
        """GetInstanceIdentifier(itkHistogramF self, itkArraySLL index) -> unsigned long long"""
        return _itkHistogramPython.itkHistogramF_GetInstanceIdentifier(self, index)


    def GetSize(self, *args) -> "unsigned long long":
        """
        GetSize(itkHistogramF self) -> itkArrayULL
        GetSize(itkHistogramF self, unsigned int dimension) -> unsigned long long
        """
        return _itkHistogramPython.itkHistogramF_GetSize(self, *args)


    def GetBinMin(self, dimension: 'unsigned int', nbin: 'unsigned long long') -> "float const &":
        """GetBinMin(itkHistogramF self, unsigned int dimension, unsigned long long nbin) -> float const &"""
        return _itkHistogramPython.itkHistogramF_GetBinMin(self, dimension, nbin)


    def GetBinMax(self, dimension: 'unsigned int', nbin: 'unsigned long long') -> "float const &":
        """GetBinMax(itkHistogramF self, unsigned int dimension, unsigned long long nbin) -> float const &"""
        return _itkHistogramPython.itkHistogramF_GetBinMax(self, dimension, nbin)


    def SetBinMin(self, dimension: 'unsigned int', nbin: 'unsigned long long', min: 'float') -> "void":
        """SetBinMin(itkHistogramF self, unsigned int dimension, unsigned long long nbin, float min)"""
        return _itkHistogramPython.itkHistogramF_SetBinMin(self, dimension, nbin, min)


    def SetBinMax(self, dimension: 'unsigned int', nbin: 'unsigned long long', max: 'float') -> "void":
        """SetBinMax(itkHistogramF self, unsigned int dimension, unsigned long long nbin, float max)"""
        return _itkHistogramPython.itkHistogramF_SetBinMax(self, dimension, nbin, max)


    def GetBinMinFromValue(self, dimension: 'unsigned int', value: 'float') -> "float const &":
        """GetBinMinFromValue(itkHistogramF self, unsigned int dimension, float value) -> float const &"""
        return _itkHistogramPython.itkHistogramF_GetBinMinFromValue(self, dimension, value)


    def GetBinMaxFromValue(self, dimension: 'unsigned int', value: 'float') -> "float const &":
        """GetBinMaxFromValue(itkHistogramF self, unsigned int dimension, float value) -> float const &"""
        return _itkHistogramPython.itkHistogramF_GetBinMaxFromValue(self, dimension, value)


    def GetDimensionMins(self, dimension: 'unsigned int') -> "std::vector< float,std::allocator< float > > const &":
        """GetDimensionMins(itkHistogramF self, unsigned int dimension) -> vectorF"""
        return _itkHistogramPython.itkHistogramF_GetDimensionMins(self, dimension)


    def GetDimensionMaxs(self, dimension: 'unsigned int') -> "std::vector< float,std::allocator< float > > const &":
        """GetDimensionMaxs(itkHistogramF self, unsigned int dimension) -> vectorF"""
        return _itkHistogramPython.itkHistogramF_GetDimensionMaxs(self, dimension)


    def GetMins(self) -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &":
        """GetMins(itkHistogramF self) -> vectorvectorF"""
        return _itkHistogramPython.itkHistogramF_GetMins(self)


    def GetMaxs(self) -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &":
        """GetMaxs(itkHistogramF self) -> vectorvectorF"""
        return _itkHistogramPython.itkHistogramF_GetMaxs(self)


    def GetHistogramMinFromIndex(self, index: 'itkArraySLL') -> "itkArrayF const &":
        """GetHistogramMinFromIndex(itkHistogramF self, itkArraySLL index) -> itkArrayF"""
        return _itkHistogramPython.itkHistogramF_GetHistogramMinFromIndex(self, index)


    def GetHistogramMaxFromIndex(self, index: 'itkArraySLL') -> "itkArrayF const &":
        """GetHistogramMaxFromIndex(itkHistogramF self, itkArraySLL index) -> itkArrayF"""
        return _itkHistogramPython.itkHistogramF_GetHistogramMaxFromIndex(self, index)


    def SetFrequency(self, *args) -> "bool":
        """
        SetFrequency(itkHistogramF self, unsigned long long value)
        SetFrequency(itkHistogramF self, unsigned long long id, unsigned long long value) -> bool
        """
        return _itkHistogramPython.itkHistogramF_SetFrequency(self, *args)


    def SetFrequencyOfIndex(self, index: 'itkArraySLL', value: 'unsigned long long') -> "bool":
        """SetFrequencyOfIndex(itkHistogramF self, itkArraySLL index, unsigned long long value) -> bool"""
        return _itkHistogramPython.itkHistogramF_SetFrequencyOfIndex(self, index, value)


    def SetFrequencyOfMeasurement(self, measurement: 'itkArrayF', value: 'unsigned long long') -> "bool":
        """SetFrequencyOfMeasurement(itkHistogramF self, itkArrayF measurement, unsigned long long value) -> bool"""
        return _itkHistogramPython.itkHistogramF_SetFrequencyOfMeasurement(self, measurement, value)


    def IncreaseFrequency(self, id: 'unsigned long long', value: 'unsigned long long') -> "bool":
        """IncreaseFrequency(itkHistogramF self, unsigned long long id, unsigned long long value) -> bool"""
        return _itkHistogramPython.itkHistogramF_IncreaseFrequency(self, id, value)


    def IncreaseFrequencyOfIndex(self, index: 'itkArraySLL', value: 'unsigned long long') -> "bool":
        """IncreaseFrequencyOfIndex(itkHistogramF self, itkArraySLL index, unsigned long long value) -> bool"""
        return _itkHistogramPython.itkHistogramF_IncreaseFrequencyOfIndex(self, index, value)


    def IncreaseFrequencyOfMeasurement(self, measurement: 'itkArrayF', value: 'unsigned long long') -> "bool":
        """IncreaseFrequencyOfMeasurement(itkHistogramF self, itkArrayF measurement, unsigned long long value) -> bool"""
        return _itkHistogramPython.itkHistogramF_IncreaseFrequencyOfMeasurement(self, measurement, value)


    def GetMeasurementVector(self, *args) -> "itkArrayF const &":
        """
        GetMeasurementVector(itkHistogramF self, unsigned long long id) -> itkArrayF
        GetMeasurementVector(itkHistogramF self, itkArraySLL index) -> itkArrayF
        """
        return _itkHistogramPython.itkHistogramF_GetMeasurementVector(self, *args)


    def GetMeasurement(self, n: 'unsigned long long', dimension: 'unsigned int') -> "float":
        """GetMeasurement(itkHistogramF self, unsigned long long n, unsigned int dimension) -> float"""
        return _itkHistogramPython.itkHistogramF_GetMeasurement(self, n, dimension)


    def GetFrequency(self, *args) -> "unsigned long long":
        """
        GetFrequency(itkHistogramF self, unsigned long long id) -> unsigned long long
        GetFrequency(itkHistogramF self, itkArraySLL index) -> unsigned long long
        GetFrequency(itkHistogramF self, unsigned long long n, unsigned int dimension) -> unsigned long long
        """
        return _itkHistogramPython.itkHistogramF_GetFrequency(self, *args)


    def Quantile(self, dimension: 'unsigned int', p: 'double') -> "double":
        """Quantile(itkHistogramF self, unsigned int dimension, double p) -> double"""
        return _itkHistogramPython.itkHistogramF_Quantile(self, dimension, p)


    def Mean(self, dimension: 'unsigned int') -> "double":
        """Mean(itkHistogramF self, unsigned int dimension) -> double"""
        return _itkHistogramPython.itkHistogramF_Mean(self, dimension)

    __swig_destroy__ = _itkHistogramPython.delete_itkHistogramF

    def cast(obj: 'itkLightObject') -> "itkHistogramF *":
        """cast(itkLightObject obj) -> itkHistogramF"""
        return _itkHistogramPython.itkHistogramF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHistogramF

        Create a new object of the class itkHistogramF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHistogramF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramF.Clone = new_instancemethod(_itkHistogramPython.itkHistogramF_Clone, None, itkHistogramF)
itkHistogramF.Initialize = new_instancemethod(_itkHistogramPython.itkHistogramF_Initialize, None, itkHistogramF)
itkHistogramF.SetToZero = new_instancemethod(_itkHistogramPython.itkHistogramF_SetToZero, None, itkHistogramF)
itkHistogramF.GetIndex = new_instancemethod(_itkHistogramPython.itkHistogramF_GetIndex, None, itkHistogramF)
itkHistogramF.GetClipBinsAtEnds = new_instancemethod(_itkHistogramPython.itkHistogramF_GetClipBinsAtEnds, None, itkHistogramF)
itkHistogramF.SetClipBinsAtEnds = new_instancemethod(_itkHistogramPython.itkHistogramF_SetClipBinsAtEnds, None, itkHistogramF)
itkHistogramF.IsIndexOutOfBounds = new_instancemethod(_itkHistogramPython.itkHistogramF_IsIndexOutOfBounds, None, itkHistogramF)
itkHistogramF.GetInstanceIdentifier = new_instancemethod(_itkHistogramPython.itkHistogramF_GetInstanceIdentifier, None, itkHistogramF)
itkHistogramF.GetSize = new_instancemethod(_itkHistogramPython.itkHistogramF_GetSize, None, itkHistogramF)
itkHistogramF.GetBinMin = new_instancemethod(_itkHistogramPython.itkHistogramF_GetBinMin, None, itkHistogramF)
itkHistogramF.GetBinMax = new_instancemethod(_itkHistogramPython.itkHistogramF_GetBinMax, None, itkHistogramF)
itkHistogramF.SetBinMin = new_instancemethod(_itkHistogramPython.itkHistogramF_SetBinMin, None, itkHistogramF)
itkHistogramF.SetBinMax = new_instancemethod(_itkHistogramPython.itkHistogramF_SetBinMax, None, itkHistogramF)
itkHistogramF.GetBinMinFromValue = new_instancemethod(_itkHistogramPython.itkHistogramF_GetBinMinFromValue, None, itkHistogramF)
itkHistogramF.GetBinMaxFromValue = new_instancemethod(_itkHistogramPython.itkHistogramF_GetBinMaxFromValue, None, itkHistogramF)
itkHistogramF.GetDimensionMins = new_instancemethod(_itkHistogramPython.itkHistogramF_GetDimensionMins, None, itkHistogramF)
itkHistogramF.GetDimensionMaxs = new_instancemethod(_itkHistogramPython.itkHistogramF_GetDimensionMaxs, None, itkHistogramF)
itkHistogramF.GetMins = new_instancemethod(_itkHistogramPython.itkHistogramF_GetMins, None, itkHistogramF)
itkHistogramF.GetMaxs = new_instancemethod(_itkHistogramPython.itkHistogramF_GetMaxs, None, itkHistogramF)
itkHistogramF.GetHistogramMinFromIndex = new_instancemethod(_itkHistogramPython.itkHistogramF_GetHistogramMinFromIndex, None, itkHistogramF)
itkHistogramF.GetHistogramMaxFromIndex = new_instancemethod(_itkHistogramPython.itkHistogramF_GetHistogramMaxFromIndex, None, itkHistogramF)
itkHistogramF.SetFrequency = new_instancemethod(_itkHistogramPython.itkHistogramF_SetFrequency, None, itkHistogramF)
itkHistogramF.SetFrequencyOfIndex = new_instancemethod(_itkHistogramPython.itkHistogramF_SetFrequencyOfIndex, None, itkHistogramF)
itkHistogramF.SetFrequencyOfMeasurement = new_instancemethod(_itkHistogramPython.itkHistogramF_SetFrequencyOfMeasurement, None, itkHistogramF)
itkHistogramF.IncreaseFrequency = new_instancemethod(_itkHistogramPython.itkHistogramF_IncreaseFrequency, None, itkHistogramF)
itkHistogramF.IncreaseFrequencyOfIndex = new_instancemethod(_itkHistogramPython.itkHistogramF_IncreaseFrequencyOfIndex, None, itkHistogramF)
itkHistogramF.IncreaseFrequencyOfMeasurement = new_instancemethod(_itkHistogramPython.itkHistogramF_IncreaseFrequencyOfMeasurement, None, itkHistogramF)
itkHistogramF.GetMeasurementVector = new_instancemethod(_itkHistogramPython.itkHistogramF_GetMeasurementVector, None, itkHistogramF)
itkHistogramF.GetMeasurement = new_instancemethod(_itkHistogramPython.itkHistogramF_GetMeasurement, None, itkHistogramF)
itkHistogramF.GetFrequency = new_instancemethod(_itkHistogramPython.itkHistogramF_GetFrequency, None, itkHistogramF)
itkHistogramF.Quantile = new_instancemethod(_itkHistogramPython.itkHistogramF_Quantile, None, itkHistogramF)
itkHistogramF.Mean = new_instancemethod(_itkHistogramPython.itkHistogramF_Mean, None, itkHistogramF)
itkHistogramF_swigregister = _itkHistogramPython.itkHistogramF_swigregister
itkHistogramF_swigregister(itkHistogramF)

def itkHistogramF___New_orig__() -> "itkHistogramF_Pointer":
    """itkHistogramF___New_orig__() -> itkHistogramF_Pointer"""
    return _itkHistogramPython.itkHistogramF___New_orig__()

def itkHistogramF_cast(obj: 'itkLightObject') -> "itkHistogramF *":
    """itkHistogramF_cast(itkLightObject obj) -> itkHistogramF"""
    return _itkHistogramPython.itkHistogramF_cast(obj)

class itkSimpleDataObjectDecoratorHD(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkSimpleDataObjectDecoratorHD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSimpleDataObjectDecoratorHD_Pointer":
        """__New_orig__() -> itkSimpleDataObjectDecoratorHD_Pointer"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSimpleDataObjectDecoratorHD_Pointer":
        """Clone(itkSimpleDataObjectDecoratorHD self) -> itkSimpleDataObjectDecoratorHD_Pointer"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_Clone(self)


    def Set(self, val: 'itkHistogramD') -> "void":
        """Set(itkSimpleDataObjectDecoratorHD self, itkHistogramD val)"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_Set(self, val)


    def Get(self, *args) -> "itkHistogramD *const &":
        """
        Get(itkSimpleDataObjectDecoratorHD self) -> itkHistogramD
        Get(itkSimpleDataObjectDecoratorHD self) -> itkHistogramD
        """
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_Get(self, *args)

    __swig_destroy__ = _itkHistogramPython.delete_itkSimpleDataObjectDecoratorHD

    def cast(obj: 'itkLightObject') -> "itkSimpleDataObjectDecoratorHD *":
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorHD"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorHD

        Create a new object of the class itkSimpleDataObjectDecoratorHD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorHD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorHD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorHD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorHD.Clone = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHD_Clone, None, itkSimpleDataObjectDecoratorHD)
itkSimpleDataObjectDecoratorHD.Set = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHD_Set, None, itkSimpleDataObjectDecoratorHD)
itkSimpleDataObjectDecoratorHD.Get = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHD_Get, None, itkSimpleDataObjectDecoratorHD)
itkSimpleDataObjectDecoratorHD_swigregister = _itkHistogramPython.itkSimpleDataObjectDecoratorHD_swigregister
itkSimpleDataObjectDecoratorHD_swigregister(itkSimpleDataObjectDecoratorHD)

def itkSimpleDataObjectDecoratorHD___New_orig__() -> "itkSimpleDataObjectDecoratorHD_Pointer":
    """itkSimpleDataObjectDecoratorHD___New_orig__() -> itkSimpleDataObjectDecoratorHD_Pointer"""
    return _itkHistogramPython.itkSimpleDataObjectDecoratorHD___New_orig__()

def itkSimpleDataObjectDecoratorHD_cast(obj: 'itkLightObject') -> "itkSimpleDataObjectDecoratorHD *":
    """itkSimpleDataObjectDecoratorHD_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorHD"""
    return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_cast(obj)

class itkSimpleDataObjectDecoratorHF(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkSimpleDataObjectDecoratorHF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSimpleDataObjectDecoratorHF_Pointer":
        """__New_orig__() -> itkSimpleDataObjectDecoratorHF_Pointer"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSimpleDataObjectDecoratorHF_Pointer":
        """Clone(itkSimpleDataObjectDecoratorHF self) -> itkSimpleDataObjectDecoratorHF_Pointer"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_Clone(self)


    def Set(self, val: 'itkHistogramF') -> "void":
        """Set(itkSimpleDataObjectDecoratorHF self, itkHistogramF val)"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_Set(self, val)


    def Get(self, *args) -> "itkHistogramF *const &":
        """
        Get(itkSimpleDataObjectDecoratorHF self) -> itkHistogramF
        Get(itkSimpleDataObjectDecoratorHF self) -> itkHistogramF
        """
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_Get(self, *args)

    __swig_destroy__ = _itkHistogramPython.delete_itkSimpleDataObjectDecoratorHF

    def cast(obj: 'itkLightObject') -> "itkSimpleDataObjectDecoratorHF *":
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorHF"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorHF

        Create a new object of the class itkSimpleDataObjectDecoratorHF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorHF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorHF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorHF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorHF.Clone = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHF_Clone, None, itkSimpleDataObjectDecoratorHF)
itkSimpleDataObjectDecoratorHF.Set = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHF_Set, None, itkSimpleDataObjectDecoratorHF)
itkSimpleDataObjectDecoratorHF.Get = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHF_Get, None, itkSimpleDataObjectDecoratorHF)
itkSimpleDataObjectDecoratorHF_swigregister = _itkHistogramPython.itkSimpleDataObjectDecoratorHF_swigregister
itkSimpleDataObjectDecoratorHF_swigregister(itkSimpleDataObjectDecoratorHF)

def itkSimpleDataObjectDecoratorHF___New_orig__() -> "itkSimpleDataObjectDecoratorHF_Pointer":
    """itkSimpleDataObjectDecoratorHF___New_orig__() -> itkSimpleDataObjectDecoratorHF_Pointer"""
    return _itkHistogramPython.itkSimpleDataObjectDecoratorHF___New_orig__()

def itkSimpleDataObjectDecoratorHF_cast(obj: 'itkLightObject') -> "itkSimpleDataObjectDecoratorHF *":
    """itkSimpleDataObjectDecoratorHF_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorHF"""
    return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_cast(obj)



