# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _vnl_vectorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vnl_vectorPython', [dirname(__file__)])
        except ImportError:
            import _vnl_vectorPython
            return _vnl_vectorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_vnl_vectorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vnl_vectorPython = swig_import_helper()
    del swig_import_helper
else:
    import _vnl_vectorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vnl_matrixPython
import stdcomplexPython
import pyBasePython
class vnl_vectorCF(object):
    """Proxy of C++ vnl_vectorCF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vectorCF self) -> vnl_vectorCF
        __init__(vnl_vectorCF self, unsigned long long len) -> vnl_vectorCF
        __init__(vnl_vectorCF self, unsigned long long len, stdcomplexF v0) -> vnl_vectorCF
        __init__(vnl_vectorCF self, unsigned long long len, unsigned long long n, stdcomplexF values) -> vnl_vectorCF
        __init__(vnl_vectorCF self, stdcomplexF data_block, unsigned long long n) -> vnl_vectorCF
        __init__(vnl_vectorCF self, vnl_vectorCF arg0) -> vnl_vectorCF
        __init__(vnl_vectorCF self, vnl_vectorCF arg0, vnl_vectorCF arg1, vnl_tag_add arg2) -> vnl_vectorCF
        __init__(vnl_vectorCF self, vnl_vectorCF arg0, vnl_vectorCF arg1, vnl_tag_sub arg2) -> vnl_vectorCF
        __init__(vnl_vectorCF self, vnl_vectorCF arg0, stdcomplexF arg1, vnl_tag_mul arg2) -> vnl_vectorCF
        __init__(vnl_vectorCF self, vnl_vectorCF arg0, stdcomplexF arg1, vnl_tag_div arg2) -> vnl_vectorCF
        __init__(vnl_vectorCF self, vnl_vectorCF arg0, stdcomplexF arg1, vnl_tag_add arg2) -> vnl_vectorCF
        __init__(vnl_vectorCF self, vnl_vectorCF arg0, stdcomplexF arg1, vnl_tag_sub arg2) -> vnl_vectorCF
        __init__(vnl_vectorCF self, vnl_matrixCF arg0, vnl_vectorCF arg1, vnl_tag_mul arg2) -> vnl_vectorCF
        __init__(vnl_vectorCF self, vnl_vectorCF arg0, vnl_matrixCF arg1, vnl_tag_mul arg2) -> vnl_vectorCF
        __init__(vnl_vectorCF self, vnl_vectorCF that, vnl_tag_grab arg1) -> vnl_vectorCF
        """
        _vnl_vectorPython.vnl_vectorCF_swiginit(self, _vnl_vectorPython.new_vnl_vectorCF(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorCF

    def size(self) -> "unsigned long long":
        """size(vnl_vectorCF self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorCF_size(self)


    def put(self, i: 'unsigned long long', v: 'stdcomplexF') -> "void":
        """put(vnl_vectorCF self, unsigned long long i, stdcomplexF v)"""
        return _vnl_vectorPython.vnl_vectorCF_put(self, i, v)


    def get(self, i: 'unsigned long long') -> "stdcomplexF":
        """get(vnl_vectorCF self, unsigned long long i) -> stdcomplexF"""
        return _vnl_vectorPython.vnl_vectorCF_get(self, i)


    def fill(self, v: 'stdcomplexF') -> "vnl_vectorCF &":
        """fill(vnl_vectorCF self, stdcomplexF v) -> vnl_vectorCF"""
        return _vnl_vectorPython.vnl_vectorCF_fill(self, v)


    def copy_in(self, ptr: 'stdcomplexF') -> "vnl_vectorCF &":
        """copy_in(vnl_vectorCF self, stdcomplexF ptr) -> vnl_vectorCF"""
        return _vnl_vectorPython.vnl_vectorCF_copy_in(self, ptr)


    def copy_out(self, arg0: 'stdcomplexF') -> "void":
        """copy_out(vnl_vectorCF self, stdcomplexF arg0)"""
        return _vnl_vectorPython.vnl_vectorCF_copy_out(self, arg0)


    def set(self, ptr: 'stdcomplexF') -> "vnl_vectorCF &":
        """set(vnl_vectorCF self, stdcomplexF ptr) -> vnl_vectorCF"""
        return _vnl_vectorPython.vnl_vectorCF_set(self, ptr)


    def __call__(self, *args) -> "stdcomplexF const &":
        """
        __call__(vnl_vectorCF self, unsigned long long i) -> stdcomplexF
        __call__(vnl_vectorCF self, unsigned long long i) -> stdcomplexF
        """
        return _vnl_vectorPython.vnl_vectorCF___call__(self, *args)


    def __idiv__(self, arg0: 'stdcomplexF') -> "vnl_vectorCF &":
        """__idiv__(vnl_vectorCF self, stdcomplexF arg0) -> vnl_vectorCF"""
        return _vnl_vectorPython.vnl_vectorCF___idiv__(self, arg0)


    def __iadd__(self, *args) -> "vnl_vectorCF &":
        """
        __iadd__(vnl_vectorCF self, stdcomplexF arg0) -> vnl_vectorCF
        __iadd__(vnl_vectorCF self, vnl_vectorCF rhs) -> vnl_vectorCF
        """
        return _vnl_vectorPython.vnl_vectorCF___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_vectorCF &":
        """
        __isub__(vnl_vectorCF self, stdcomplexF value) -> vnl_vectorCF
        __isub__(vnl_vectorCF self, vnl_vectorCF rhs) -> vnl_vectorCF
        """
        return _vnl_vectorPython.vnl_vectorCF___isub__(self, *args)


    def pre_multiply(self, M: 'vnl_matrixCF') -> "vnl_vectorCF &":
        """pre_multiply(vnl_vectorCF self, vnl_matrixCF M) -> vnl_vectorCF"""
        return _vnl_vectorPython.vnl_vectorCF_pre_multiply(self, M)


    def post_multiply(self, M: 'vnl_matrixCF') -> "vnl_vectorCF &":
        """post_multiply(vnl_vectorCF self, vnl_matrixCF M) -> vnl_vectorCF"""
        return _vnl_vectorPython.vnl_vectorCF_post_multiply(self, M)


    def __imul__(self, *args) -> "vnl_vectorCF &":
        """
        __imul__(vnl_vectorCF self, stdcomplexF arg0) -> vnl_vectorCF
        __imul__(vnl_vectorCF self, vnl_matrixCF m) -> vnl_vectorCF
        """
        return _vnl_vectorPython.vnl_vectorCF___imul__(self, *args)


    def __pos__(self) -> "vnl_vectorCF":
        """__pos__(vnl_vectorCF self) -> vnl_vectorCF"""
        return _vnl_vectorPython.vnl_vectorCF___pos__(self)


    def __neg__(self) -> "vnl_vectorCF":
        """__neg__(vnl_vectorCF self) -> vnl_vectorCF"""
        return _vnl_vectorPython.vnl_vectorCF___neg__(self)


    def __div__(self, v: 'stdcomplexF') -> "vnl_vectorCF":
        """__div__(vnl_vectorCF self, stdcomplexF v) -> vnl_vectorCF"""
        return _vnl_vectorPython.vnl_vectorCF___div__(self, v)


    def __add__(self, *args) -> "vnl_vectorCF":
        """
        __add__(vnl_vectorCF self, stdcomplexF v) -> vnl_vectorCF
        __add__(vnl_vectorCF self, vnl_vectorCF v) -> vnl_vectorCF
        """
        return _vnl_vectorPython.vnl_vectorCF___add__(self, *args)


    def __sub__(self, *args) -> "vnl_vectorCF":
        """
        __sub__(vnl_vectorCF self, stdcomplexF v) -> vnl_vectorCF
        __sub__(vnl_vectorCF self, vnl_vectorCF v) -> vnl_vectorCF
        """
        return _vnl_vectorPython.vnl_vectorCF___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_vectorCF":
        """
        __mul__(vnl_vectorCF self, stdcomplexF v) -> vnl_vectorCF
        __mul__(vnl_vectorCF self, vnl_matrixCF M) -> vnl_vectorCF
        """
        return _vnl_vectorPython.vnl_vectorCF___mul__(self, *args)


    def data_block(self, *args) -> "stdcomplexF *":
        """
        data_block(vnl_vectorCF self) -> stdcomplexF
        data_block(vnl_vectorCF self) -> stdcomplexF
        """
        return _vnl_vectorPython.vnl_vectorCF_data_block(self, *args)


    def begin(self, *args) -> "stdcomplexF const *":
        """
        begin(vnl_vectorCF self) -> stdcomplexF
        begin(vnl_vectorCF self) -> stdcomplexF
        """
        return _vnl_vectorPython.vnl_vectorCF_begin(self, *args)


    def end(self, *args) -> "stdcomplexF const *":
        """
        end(vnl_vectorCF self) -> stdcomplexF
        end(vnl_vectorCF self) -> stdcomplexF
        """
        return _vnl_vectorPython.vnl_vectorCF_end(self, *args)


    def extract(self, len: 'unsigned long long', start: 'unsigned long long'=0) -> "vnl_vectorCF":
        """
        extract(vnl_vectorCF self, unsigned long long len, unsigned long long start=0) -> vnl_vectorCF
        extract(vnl_vectorCF self, unsigned long long len) -> vnl_vectorCF
        """
        return _vnl_vectorPython.vnl_vectorCF_extract(self, len, start)


    def update(self, arg0: 'vnl_vectorCF', start: 'unsigned long long'=0) -> "vnl_vectorCF &":
        """
        update(vnl_vectorCF self, vnl_vectorCF arg0, unsigned long long start=0) -> vnl_vectorCF
        update(vnl_vectorCF self, vnl_vectorCF arg0) -> vnl_vectorCF
        """
        return _vnl_vectorPython.vnl_vectorCF_update(self, arg0, start)


    def squared_magnitude(self) -> "float":
        """squared_magnitude(vnl_vectorCF self) -> float"""
        return _vnl_vectorPython.vnl_vectorCF_squared_magnitude(self)


    def magnitude(self) -> "float":
        """magnitude(vnl_vectorCF self) -> float"""
        return _vnl_vectorPython.vnl_vectorCF_magnitude(self)


    def one_norm(self) -> "float":
        """one_norm(vnl_vectorCF self) -> float"""
        return _vnl_vectorPython.vnl_vectorCF_one_norm(self)


    def two_norm(self) -> "float":
        """two_norm(vnl_vectorCF self) -> float"""
        return _vnl_vectorPython.vnl_vectorCF_two_norm(self)


    def inf_norm(self) -> "float":
        """inf_norm(vnl_vectorCF self) -> float"""
        return _vnl_vectorPython.vnl_vectorCF_inf_norm(self)


    def normalize(self) -> "vnl_vectorCF &":
        """normalize(vnl_vectorCF self) -> vnl_vectorCF"""
        return _vnl_vectorPython.vnl_vectorCF_normalize(self)


    def rms(self) -> "float":
        """rms(vnl_vectorCF self) -> float"""
        return _vnl_vectorPython.vnl_vectorCF_rms(self)


    def min_value(self) -> "stdcomplexF":
        """min_value(vnl_vectorCF self) -> stdcomplexF"""
        return _vnl_vectorPython.vnl_vectorCF_min_value(self)


    def max_value(self) -> "stdcomplexF":
        """max_value(vnl_vectorCF self) -> stdcomplexF"""
        return _vnl_vectorPython.vnl_vectorCF_max_value(self)


    def arg_min(self) -> "unsigned long long":
        """arg_min(vnl_vectorCF self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorCF_arg_min(self)


    def arg_max(self) -> "unsigned long long":
        """arg_max(vnl_vectorCF self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorCF_arg_max(self)


    def mean(self) -> "stdcomplexF":
        """mean(vnl_vectorCF self) -> stdcomplexF"""
        return _vnl_vectorPython.vnl_vectorCF_mean(self)


    def sum(self) -> "stdcomplexF":
        """sum(vnl_vectorCF self) -> stdcomplexF"""
        return _vnl_vectorPython.vnl_vectorCF_sum(self)


    def flip(self, *args) -> "vnl_vectorCF &":
        """
        flip(vnl_vectorCF self) -> vnl_vectorCF
        flip(vnl_vectorCF self, unsigned long long const & b, unsigned long long const & e) -> vnl_vectorCF
        """
        return _vnl_vectorPython.vnl_vectorCF_flip(self, *args)


    def roll(self, shift: 'int const &') -> "vnl_vectorCF":
        """roll(vnl_vectorCF self, int const & shift) -> vnl_vectorCF"""
        return _vnl_vectorPython.vnl_vectorCF_roll(self, shift)


    def roll_inplace(self, shift: 'int const &') -> "vnl_vectorCF &":
        """roll_inplace(vnl_vectorCF self, int const & shift) -> vnl_vectorCF"""
        return _vnl_vectorPython.vnl_vectorCF_roll_inplace(self, shift)


    def swap(self, that: 'vnl_vectorCF') -> "void":
        """swap(vnl_vectorCF self, vnl_vectorCF that)"""
        return _vnl_vectorPython.vnl_vectorCF_swap(self, that)


    def assert_size(self, sz: 'unsigned long long') -> "void":
        """assert_size(vnl_vectorCF self, unsigned long long sz)"""
        return _vnl_vectorPython.vnl_vectorCF_assert_size(self, sz)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_vectorCF self)"""
        return _vnl_vectorPython.vnl_vectorCF_assert_finite(self)


    def is_finite(self) -> "bool":
        """is_finite(vnl_vectorCF self) -> bool"""
        return _vnl_vectorPython.vnl_vectorCF_is_finite(self)


    def is_zero(self) -> "bool":
        """is_zero(vnl_vectorCF self) -> bool"""
        return _vnl_vectorPython.vnl_vectorCF_is_zero(self)


    def empty(self) -> "bool":
        """empty(vnl_vectorCF self) -> bool"""
        return _vnl_vectorPython.vnl_vectorCF_empty(self)


    def is_equal(self, rhs: 'vnl_vectorCF', tol: 'double') -> "bool":
        """is_equal(vnl_vectorCF self, vnl_vectorCF rhs, double tol) -> bool"""
        return _vnl_vectorPython.vnl_vectorCF_is_equal(self, rhs, tol)


    def operator_eq(self, v: 'vnl_vectorCF') -> "bool":
        """operator_eq(vnl_vectorCF self, vnl_vectorCF v) -> bool"""
        return _vnl_vectorPython.vnl_vectorCF_operator_eq(self, v)


    def __eq__(self, that: 'vnl_vectorCF') -> "bool":
        """__eq__(vnl_vectorCF self, vnl_vectorCF that) -> bool"""
        return _vnl_vectorPython.vnl_vectorCF___eq__(self, that)


    def __ne__(self, that: 'vnl_vectorCF') -> "bool":
        """__ne__(vnl_vectorCF self, vnl_vectorCF that) -> bool"""
        return _vnl_vectorPython.vnl_vectorCF___ne__(self, that)


    def set_size(self, n: 'unsigned long long') -> "bool":
        """set_size(vnl_vectorCF self, unsigned long long n) -> bool"""
        return _vnl_vectorPython.vnl_vectorCF_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_vectorCF self)"""
        return _vnl_vectorPython.vnl_vectorCF_clear(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_vectorCF self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorCF_read_ascii(self, s)


    def read(s: 'istream') -> "vnl_vectorCF":
        """read(istream s) -> vnl_vectorCF"""
        return _vnl_vectorPython.vnl_vectorCF_read(s)

    read = staticmethod(read)
vnl_vectorCF.size = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_size, None, vnl_vectorCF)
vnl_vectorCF.put = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_put, None, vnl_vectorCF)
vnl_vectorCF.get = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_get, None, vnl_vectorCF)
vnl_vectorCF.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_fill, None, vnl_vectorCF)
vnl_vectorCF.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_copy_in, None, vnl_vectorCF)
vnl_vectorCF.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_copy_out, None, vnl_vectorCF)
vnl_vectorCF.set = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_set, None, vnl_vectorCF)
vnl_vectorCF.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorCF___call__, None, vnl_vectorCF)
vnl_vectorCF.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorCF___idiv__, None, vnl_vectorCF)
vnl_vectorCF.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorCF___iadd__, None, vnl_vectorCF)
vnl_vectorCF.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorCF___isub__, None, vnl_vectorCF)
vnl_vectorCF.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_pre_multiply, None, vnl_vectorCF)
vnl_vectorCF.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_post_multiply, None, vnl_vectorCF)
vnl_vectorCF.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorCF___imul__, None, vnl_vectorCF)
vnl_vectorCF.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorCF___pos__, None, vnl_vectorCF)
vnl_vectorCF.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorCF___neg__, None, vnl_vectorCF)
vnl_vectorCF.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorCF___div__, None, vnl_vectorCF)
vnl_vectorCF.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorCF___add__, None, vnl_vectorCF)
vnl_vectorCF.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorCF___sub__, None, vnl_vectorCF)
vnl_vectorCF.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorCF___mul__, None, vnl_vectorCF)
vnl_vectorCF.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_data_block, None, vnl_vectorCF)
vnl_vectorCF.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_begin, None, vnl_vectorCF)
vnl_vectorCF.end = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_end, None, vnl_vectorCF)
vnl_vectorCF.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_extract, None, vnl_vectorCF)
vnl_vectorCF.update = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_update, None, vnl_vectorCF)
vnl_vectorCF.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_squared_magnitude, None, vnl_vectorCF)
vnl_vectorCF.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_magnitude, None, vnl_vectorCF)
vnl_vectorCF.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_one_norm, None, vnl_vectorCF)
vnl_vectorCF.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_two_norm, None, vnl_vectorCF)
vnl_vectorCF.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_inf_norm, None, vnl_vectorCF)
vnl_vectorCF.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_normalize, None, vnl_vectorCF)
vnl_vectorCF.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_rms, None, vnl_vectorCF)
vnl_vectorCF.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_min_value, None, vnl_vectorCF)
vnl_vectorCF.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_max_value, None, vnl_vectorCF)
vnl_vectorCF.arg_min = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_arg_min, None, vnl_vectorCF)
vnl_vectorCF.arg_max = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_arg_max, None, vnl_vectorCF)
vnl_vectorCF.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_mean, None, vnl_vectorCF)
vnl_vectorCF.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_sum, None, vnl_vectorCF)
vnl_vectorCF.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_flip, None, vnl_vectorCF)
vnl_vectorCF.roll = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_roll, None, vnl_vectorCF)
vnl_vectorCF.roll_inplace = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_roll_inplace, None, vnl_vectorCF)
vnl_vectorCF.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_swap, None, vnl_vectorCF)
vnl_vectorCF.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_assert_size, None, vnl_vectorCF)
vnl_vectorCF.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_assert_finite, None, vnl_vectorCF)
vnl_vectorCF.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_is_finite, None, vnl_vectorCF)
vnl_vectorCF.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_is_zero, None, vnl_vectorCF)
vnl_vectorCF.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_empty, None, vnl_vectorCF)
vnl_vectorCF.is_equal = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_is_equal, None, vnl_vectorCF)
vnl_vectorCF.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_operator_eq, None, vnl_vectorCF)
vnl_vectorCF.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorCF___eq__, None, vnl_vectorCF)
vnl_vectorCF.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorCF___ne__, None, vnl_vectorCF)
vnl_vectorCF.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_set_size, None, vnl_vectorCF)
vnl_vectorCF.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_clear, None, vnl_vectorCF)
vnl_vectorCF.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorCF_read_ascii, None, vnl_vectorCF)
vnl_vectorCF_swigregister = _vnl_vectorPython.vnl_vectorCF_swigregister
vnl_vectorCF_swigregister(vnl_vectorCF)

def vnl_vectorCF_read(s: 'istream') -> "vnl_vectorCF":
    """vnl_vectorCF_read(istream s) -> vnl_vectorCF"""
    return _vnl_vectorPython.vnl_vectorCF_read(s)

class vnl_vectorD(object):
    """Proxy of C++ vnl_vectorD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vectorD self) -> vnl_vectorD
        __init__(vnl_vectorD self, unsigned long long len) -> vnl_vectorD
        __init__(vnl_vectorD self, unsigned long long len, double const & v0) -> vnl_vectorD
        __init__(vnl_vectorD self, unsigned long long len, unsigned long long n, double const * values) -> vnl_vectorD
        __init__(vnl_vectorD self, double const * data_block, unsigned long long n) -> vnl_vectorD
        __init__(vnl_vectorD self, vnl_vectorD arg0) -> vnl_vectorD
        __init__(vnl_vectorD self, vnl_vectorD arg0, vnl_vectorD arg1, vnl_tag_add arg2) -> vnl_vectorD
        __init__(vnl_vectorD self, vnl_vectorD arg0, vnl_vectorD arg1, vnl_tag_sub arg2) -> vnl_vectorD
        __init__(vnl_vectorD self, vnl_vectorD arg0, double arg1, vnl_tag_mul arg2) -> vnl_vectorD
        __init__(vnl_vectorD self, vnl_vectorD arg0, double arg1, vnl_tag_div arg2) -> vnl_vectorD
        __init__(vnl_vectorD self, vnl_vectorD arg0, double arg1, vnl_tag_add arg2) -> vnl_vectorD
        __init__(vnl_vectorD self, vnl_vectorD arg0, double arg1, vnl_tag_sub arg2) -> vnl_vectorD
        __init__(vnl_vectorD self, vnl_matrixD arg0, vnl_vectorD arg1, vnl_tag_mul arg2) -> vnl_vectorD
        __init__(vnl_vectorD self, vnl_vectorD arg0, vnl_matrixD arg1, vnl_tag_mul arg2) -> vnl_vectorD
        __init__(vnl_vectorD self, vnl_vectorD that, vnl_tag_grab arg1) -> vnl_vectorD
        """
        _vnl_vectorPython.vnl_vectorD_swiginit(self, _vnl_vectorPython.new_vnl_vectorD(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorD

    def size(self) -> "unsigned long long":
        """size(vnl_vectorD self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorD_size(self)


    def put(self, i: 'unsigned long long', v: 'double const &') -> "void":
        """put(vnl_vectorD self, unsigned long long i, double const & v)"""
        return _vnl_vectorPython.vnl_vectorD_put(self, i, v)


    def get(self, i: 'unsigned long long') -> "double":
        """get(vnl_vectorD self, unsigned long long i) -> double"""
        return _vnl_vectorPython.vnl_vectorD_get(self, i)


    def fill(self, v: 'double const &') -> "vnl_vectorD &":
        """fill(vnl_vectorD self, double const & v) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD_fill(self, v)


    def copy_in(self, ptr: 'double const *') -> "vnl_vectorD &":
        """copy_in(vnl_vectorD self, double const * ptr) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD_copy_in(self, ptr)


    def copy_out(self, arg0: 'double *') -> "void":
        """copy_out(vnl_vectorD self, double * arg0)"""
        return _vnl_vectorPython.vnl_vectorD_copy_out(self, arg0)


    def set(self, ptr: 'double const *') -> "vnl_vectorD &":
        """set(vnl_vectorD self, double const * ptr) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD_set(self, ptr)


    def __call__(self, *args) -> "double const &":
        """
        __call__(vnl_vectorD self, unsigned long long i) -> double
        __call__(vnl_vectorD self, unsigned long long i) -> double const &
        """
        return _vnl_vectorPython.vnl_vectorD___call__(self, *args)


    def __idiv__(self, arg0: 'double') -> "vnl_vectorD &":
        """__idiv__(vnl_vectorD self, double arg0) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD___idiv__(self, arg0)


    def __iadd__(self, *args) -> "vnl_vectorD &":
        """
        __iadd__(vnl_vectorD self, double arg0) -> vnl_vectorD
        __iadd__(vnl_vectorD self, vnl_vectorD rhs) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_vectorD &":
        """
        __isub__(vnl_vectorD self, double value) -> vnl_vectorD
        __isub__(vnl_vectorD self, vnl_vectorD rhs) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD___isub__(self, *args)


    def pre_multiply(self, M: 'vnl_matrixD') -> "vnl_vectorD &":
        """pre_multiply(vnl_vectorD self, vnl_matrixD M) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD_pre_multiply(self, M)


    def post_multiply(self, M: 'vnl_matrixD') -> "vnl_vectorD &":
        """post_multiply(vnl_vectorD self, vnl_matrixD M) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD_post_multiply(self, M)


    def __imul__(self, *args) -> "vnl_vectorD &":
        """
        __imul__(vnl_vectorD self, double arg0) -> vnl_vectorD
        __imul__(vnl_vectorD self, vnl_matrixD m) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD___imul__(self, *args)


    def __pos__(self) -> "vnl_vectorD":
        """__pos__(vnl_vectorD self) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD___pos__(self)


    def __neg__(self) -> "vnl_vectorD":
        """__neg__(vnl_vectorD self) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD___neg__(self)


    def __div__(self, v: 'double') -> "vnl_vectorD":
        """__div__(vnl_vectorD self, double v) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD___div__(self, v)


    def __add__(self, *args) -> "vnl_vectorD":
        """
        __add__(vnl_vectorD self, double v) -> vnl_vectorD
        __add__(vnl_vectorD self, vnl_vectorD v) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD___add__(self, *args)


    def __sub__(self, *args) -> "vnl_vectorD":
        """
        __sub__(vnl_vectorD self, double v) -> vnl_vectorD
        __sub__(vnl_vectorD self, vnl_vectorD v) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_vectorD":
        """
        __mul__(vnl_vectorD self, double v) -> vnl_vectorD
        __mul__(vnl_vectorD self, vnl_matrixD M) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD___mul__(self, *args)


    def data_block(self, *args) -> "double *":
        """
        data_block(vnl_vectorD self) -> double const
        data_block(vnl_vectorD self) -> double *
        """
        return _vnl_vectorPython.vnl_vectorD_data_block(self, *args)


    def begin(self, *args) -> "double const *":
        """
        begin(vnl_vectorD self) -> double
        begin(vnl_vectorD self) -> double const *
        """
        return _vnl_vectorPython.vnl_vectorD_begin(self, *args)


    def end(self, *args) -> "double const *":
        """
        end(vnl_vectorD self) -> double
        end(vnl_vectorD self) -> double const *
        """
        return _vnl_vectorPython.vnl_vectorD_end(self, *args)


    def extract(self, len: 'unsigned long long', start: 'unsigned long long'=0) -> "vnl_vectorD":
        """
        extract(vnl_vectorD self, unsigned long long len, unsigned long long start=0) -> vnl_vectorD
        extract(vnl_vectorD self, unsigned long long len) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD_extract(self, len, start)


    def update(self, arg0: 'vnl_vectorD', start: 'unsigned long long'=0) -> "vnl_vectorD &":
        """
        update(vnl_vectorD self, vnl_vectorD arg0, unsigned long long start=0) -> vnl_vectorD
        update(vnl_vectorD self, vnl_vectorD arg0) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD_update(self, arg0, start)


    def squared_magnitude(self) -> "double":
        """squared_magnitude(vnl_vectorD self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_squared_magnitude(self)


    def magnitude(self) -> "double":
        """magnitude(vnl_vectorD self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_magnitude(self)


    def one_norm(self) -> "double":
        """one_norm(vnl_vectorD self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_one_norm(self)


    def two_norm(self) -> "double":
        """two_norm(vnl_vectorD self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_two_norm(self)


    def inf_norm(self) -> "double":
        """inf_norm(vnl_vectorD self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_inf_norm(self)


    def normalize(self) -> "vnl_vectorD &":
        """normalize(vnl_vectorD self) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD_normalize(self)


    def rms(self) -> "double":
        """rms(vnl_vectorD self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_rms(self)


    def min_value(self) -> "double":
        """min_value(vnl_vectorD self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_min_value(self)


    def max_value(self) -> "double":
        """max_value(vnl_vectorD self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_max_value(self)


    def arg_min(self) -> "unsigned long long":
        """arg_min(vnl_vectorD self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorD_arg_min(self)


    def arg_max(self) -> "unsigned long long":
        """arg_max(vnl_vectorD self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorD_arg_max(self)


    def mean(self) -> "double":
        """mean(vnl_vectorD self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_mean(self)


    def sum(self) -> "double":
        """sum(vnl_vectorD self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_sum(self)


    def flip(self, *args) -> "vnl_vectorD &":
        """
        flip(vnl_vectorD self) -> vnl_vectorD
        flip(vnl_vectorD self, unsigned long long const & b, unsigned long long const & e) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD_flip(self, *args)


    def roll(self, shift: 'int const &') -> "vnl_vectorD":
        """roll(vnl_vectorD self, int const & shift) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD_roll(self, shift)


    def roll_inplace(self, shift: 'int const &') -> "vnl_vectorD &":
        """roll_inplace(vnl_vectorD self, int const & shift) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD_roll_inplace(self, shift)


    def swap(self, that: 'vnl_vectorD') -> "void":
        """swap(vnl_vectorD self, vnl_vectorD that)"""
        return _vnl_vectorPython.vnl_vectorD_swap(self, that)


    def assert_size(self, sz: 'unsigned long long') -> "void":
        """assert_size(vnl_vectorD self, unsigned long long sz)"""
        return _vnl_vectorPython.vnl_vectorD_assert_size(self, sz)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_vectorD self)"""
        return _vnl_vectorPython.vnl_vectorD_assert_finite(self)


    def is_finite(self) -> "bool":
        """is_finite(vnl_vectorD self) -> bool"""
        return _vnl_vectorPython.vnl_vectorD_is_finite(self)


    def is_zero(self) -> "bool":
        """is_zero(vnl_vectorD self) -> bool"""
        return _vnl_vectorPython.vnl_vectorD_is_zero(self)


    def empty(self) -> "bool":
        """empty(vnl_vectorD self) -> bool"""
        return _vnl_vectorPython.vnl_vectorD_empty(self)


    def is_equal(self, rhs: 'vnl_vectorD', tol: 'double') -> "bool":
        """is_equal(vnl_vectorD self, vnl_vectorD rhs, double tol) -> bool"""
        return _vnl_vectorPython.vnl_vectorD_is_equal(self, rhs, tol)


    def operator_eq(self, v: 'vnl_vectorD') -> "bool":
        """operator_eq(vnl_vectorD self, vnl_vectorD v) -> bool"""
        return _vnl_vectorPython.vnl_vectorD_operator_eq(self, v)


    def __eq__(self, that: 'vnl_vectorD') -> "bool":
        """__eq__(vnl_vectorD self, vnl_vectorD that) -> bool"""
        return _vnl_vectorPython.vnl_vectorD___eq__(self, that)


    def __ne__(self, that: 'vnl_vectorD') -> "bool":
        """__ne__(vnl_vectorD self, vnl_vectorD that) -> bool"""
        return _vnl_vectorPython.vnl_vectorD___ne__(self, that)


    def set_size(self, n: 'unsigned long long') -> "bool":
        """set_size(vnl_vectorD self, unsigned long long n) -> bool"""
        return _vnl_vectorPython.vnl_vectorD_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_vectorD self)"""
        return _vnl_vectorPython.vnl_vectorD_clear(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_vectorD self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorD_read_ascii(self, s)


    def read(s: 'istream') -> "vnl_vectorD":
        """read(istream s) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD_read(s)

    read = staticmethod(read)
vnl_vectorD.size = new_instancemethod(_vnl_vectorPython.vnl_vectorD_size, None, vnl_vectorD)
vnl_vectorD.put = new_instancemethod(_vnl_vectorPython.vnl_vectorD_put, None, vnl_vectorD)
vnl_vectorD.get = new_instancemethod(_vnl_vectorPython.vnl_vectorD_get, None, vnl_vectorD)
vnl_vectorD.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorD_fill, None, vnl_vectorD)
vnl_vectorD.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorD_copy_in, None, vnl_vectorD)
vnl_vectorD.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorD_copy_out, None, vnl_vectorD)
vnl_vectorD.set = new_instancemethod(_vnl_vectorPython.vnl_vectorD_set, None, vnl_vectorD)
vnl_vectorD.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___call__, None, vnl_vectorD)
vnl_vectorD.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___idiv__, None, vnl_vectorD)
vnl_vectorD.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___iadd__, None, vnl_vectorD)
vnl_vectorD.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___isub__, None, vnl_vectorD)
vnl_vectorD.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorD_pre_multiply, None, vnl_vectorD)
vnl_vectorD.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorD_post_multiply, None, vnl_vectorD)
vnl_vectorD.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___imul__, None, vnl_vectorD)
vnl_vectorD.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___pos__, None, vnl_vectorD)
vnl_vectorD.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___neg__, None, vnl_vectorD)
vnl_vectorD.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___div__, None, vnl_vectorD)
vnl_vectorD.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___add__, None, vnl_vectorD)
vnl_vectorD.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___sub__, None, vnl_vectorD)
vnl_vectorD.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___mul__, None, vnl_vectorD)
vnl_vectorD.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorD_data_block, None, vnl_vectorD)
vnl_vectorD.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorD_begin, None, vnl_vectorD)
vnl_vectorD.end = new_instancemethod(_vnl_vectorPython.vnl_vectorD_end, None, vnl_vectorD)
vnl_vectorD.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorD_extract, None, vnl_vectorD)
vnl_vectorD.update = new_instancemethod(_vnl_vectorPython.vnl_vectorD_update, None, vnl_vectorD)
vnl_vectorD.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorD_squared_magnitude, None, vnl_vectorD)
vnl_vectorD.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorD_magnitude, None, vnl_vectorD)
vnl_vectorD.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorD_one_norm, None, vnl_vectorD)
vnl_vectorD.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorD_two_norm, None, vnl_vectorD)
vnl_vectorD.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorD_inf_norm, None, vnl_vectorD)
vnl_vectorD.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorD_normalize, None, vnl_vectorD)
vnl_vectorD.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorD_rms, None, vnl_vectorD)
vnl_vectorD.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorD_min_value, None, vnl_vectorD)
vnl_vectorD.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorD_max_value, None, vnl_vectorD)
vnl_vectorD.arg_min = new_instancemethod(_vnl_vectorPython.vnl_vectorD_arg_min, None, vnl_vectorD)
vnl_vectorD.arg_max = new_instancemethod(_vnl_vectorPython.vnl_vectorD_arg_max, None, vnl_vectorD)
vnl_vectorD.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorD_mean, None, vnl_vectorD)
vnl_vectorD.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorD_sum, None, vnl_vectorD)
vnl_vectorD.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorD_flip, None, vnl_vectorD)
vnl_vectorD.roll = new_instancemethod(_vnl_vectorPython.vnl_vectorD_roll, None, vnl_vectorD)
vnl_vectorD.roll_inplace = new_instancemethod(_vnl_vectorPython.vnl_vectorD_roll_inplace, None, vnl_vectorD)
vnl_vectorD.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorD_swap, None, vnl_vectorD)
vnl_vectorD.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorD_assert_size, None, vnl_vectorD)
vnl_vectorD.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorD_assert_finite, None, vnl_vectorD)
vnl_vectorD.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorD_is_finite, None, vnl_vectorD)
vnl_vectorD.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorD_is_zero, None, vnl_vectorD)
vnl_vectorD.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorD_empty, None, vnl_vectorD)
vnl_vectorD.is_equal = new_instancemethod(_vnl_vectorPython.vnl_vectorD_is_equal, None, vnl_vectorD)
vnl_vectorD.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorD_operator_eq, None, vnl_vectorD)
vnl_vectorD.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___eq__, None, vnl_vectorD)
vnl_vectorD.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___ne__, None, vnl_vectorD)
vnl_vectorD.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorD_set_size, None, vnl_vectorD)
vnl_vectorD.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorD_clear, None, vnl_vectorD)
vnl_vectorD.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorD_read_ascii, None, vnl_vectorD)
vnl_vectorD_swigregister = _vnl_vectorPython.vnl_vectorD_swigregister
vnl_vectorD_swigregister(vnl_vectorD)

def vnl_vectorD_read(s: 'istream') -> "vnl_vectorD":
    """vnl_vectorD_read(istream s) -> vnl_vectorD"""
    return _vnl_vectorPython.vnl_vectorD_read(s)

class vnl_vectorF(object):
    """Proxy of C++ vnl_vectorF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vectorF self) -> vnl_vectorF
        __init__(vnl_vectorF self, unsigned long long len) -> vnl_vectorF
        __init__(vnl_vectorF self, unsigned long long len, float const & v0) -> vnl_vectorF
        __init__(vnl_vectorF self, unsigned long long len, unsigned long long n, float const * values) -> vnl_vectorF
        __init__(vnl_vectorF self, float const * data_block, unsigned long long n) -> vnl_vectorF
        __init__(vnl_vectorF self, vnl_vectorF arg0) -> vnl_vectorF
        __init__(vnl_vectorF self, vnl_vectorF arg0, vnl_vectorF arg1, vnl_tag_add arg2) -> vnl_vectorF
        __init__(vnl_vectorF self, vnl_vectorF arg0, vnl_vectorF arg1, vnl_tag_sub arg2) -> vnl_vectorF
        __init__(vnl_vectorF self, vnl_vectorF arg0, float arg1, vnl_tag_mul arg2) -> vnl_vectorF
        __init__(vnl_vectorF self, vnl_vectorF arg0, float arg1, vnl_tag_div arg2) -> vnl_vectorF
        __init__(vnl_vectorF self, vnl_vectorF arg0, float arg1, vnl_tag_add arg2) -> vnl_vectorF
        __init__(vnl_vectorF self, vnl_vectorF arg0, float arg1, vnl_tag_sub arg2) -> vnl_vectorF
        __init__(vnl_vectorF self, vnl_matrixF arg0, vnl_vectorF arg1, vnl_tag_mul arg2) -> vnl_vectorF
        __init__(vnl_vectorF self, vnl_vectorF arg0, vnl_matrixF arg1, vnl_tag_mul arg2) -> vnl_vectorF
        __init__(vnl_vectorF self, vnl_vectorF that, vnl_tag_grab arg1) -> vnl_vectorF
        """
        _vnl_vectorPython.vnl_vectorF_swiginit(self, _vnl_vectorPython.new_vnl_vectorF(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorF

    def size(self) -> "unsigned long long":
        """size(vnl_vectorF self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorF_size(self)


    def put(self, i: 'unsigned long long', v: 'float const &') -> "void":
        """put(vnl_vectorF self, unsigned long long i, float const & v)"""
        return _vnl_vectorPython.vnl_vectorF_put(self, i, v)


    def get(self, i: 'unsigned long long') -> "float":
        """get(vnl_vectorF self, unsigned long long i) -> float"""
        return _vnl_vectorPython.vnl_vectorF_get(self, i)


    def fill(self, v: 'float const &') -> "vnl_vectorF &":
        """fill(vnl_vectorF self, float const & v) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF_fill(self, v)


    def copy_in(self, ptr: 'float const *') -> "vnl_vectorF &":
        """copy_in(vnl_vectorF self, float const * ptr) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF_copy_in(self, ptr)


    def copy_out(self, arg0: 'float *') -> "void":
        """copy_out(vnl_vectorF self, float * arg0)"""
        return _vnl_vectorPython.vnl_vectorF_copy_out(self, arg0)


    def set(self, ptr: 'float const *') -> "vnl_vectorF &":
        """set(vnl_vectorF self, float const * ptr) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF_set(self, ptr)


    def __call__(self, *args) -> "float const &":
        """
        __call__(vnl_vectorF self, unsigned long long i) -> float
        __call__(vnl_vectorF self, unsigned long long i) -> float const &
        """
        return _vnl_vectorPython.vnl_vectorF___call__(self, *args)


    def __idiv__(self, arg0: 'float') -> "vnl_vectorF &":
        """__idiv__(vnl_vectorF self, float arg0) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF___idiv__(self, arg0)


    def __iadd__(self, *args) -> "vnl_vectorF &":
        """
        __iadd__(vnl_vectorF self, float arg0) -> vnl_vectorF
        __iadd__(vnl_vectorF self, vnl_vectorF rhs) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_vectorF &":
        """
        __isub__(vnl_vectorF self, float value) -> vnl_vectorF
        __isub__(vnl_vectorF self, vnl_vectorF rhs) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF___isub__(self, *args)


    def pre_multiply(self, M: 'vnl_matrixF') -> "vnl_vectorF &":
        """pre_multiply(vnl_vectorF self, vnl_matrixF M) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF_pre_multiply(self, M)


    def post_multiply(self, M: 'vnl_matrixF') -> "vnl_vectorF &":
        """post_multiply(vnl_vectorF self, vnl_matrixF M) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF_post_multiply(self, M)


    def __imul__(self, *args) -> "vnl_vectorF &":
        """
        __imul__(vnl_vectorF self, float arg0) -> vnl_vectorF
        __imul__(vnl_vectorF self, vnl_matrixF m) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF___imul__(self, *args)


    def __pos__(self) -> "vnl_vectorF":
        """__pos__(vnl_vectorF self) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF___pos__(self)


    def __neg__(self) -> "vnl_vectorF":
        """__neg__(vnl_vectorF self) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF___neg__(self)


    def __div__(self, v: 'float') -> "vnl_vectorF":
        """__div__(vnl_vectorF self, float v) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF___div__(self, v)


    def __add__(self, *args) -> "vnl_vectorF":
        """
        __add__(vnl_vectorF self, float v) -> vnl_vectorF
        __add__(vnl_vectorF self, vnl_vectorF v) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF___add__(self, *args)


    def __sub__(self, *args) -> "vnl_vectorF":
        """
        __sub__(vnl_vectorF self, float v) -> vnl_vectorF
        __sub__(vnl_vectorF self, vnl_vectorF v) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_vectorF":
        """
        __mul__(vnl_vectorF self, float v) -> vnl_vectorF
        __mul__(vnl_vectorF self, vnl_matrixF M) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF___mul__(self, *args)


    def data_block(self, *args) -> "float *":
        """
        data_block(vnl_vectorF self) -> float const
        data_block(vnl_vectorF self) -> float *
        """
        return _vnl_vectorPython.vnl_vectorF_data_block(self, *args)


    def begin(self, *args) -> "float const *":
        """
        begin(vnl_vectorF self) -> float
        begin(vnl_vectorF self) -> float const *
        """
        return _vnl_vectorPython.vnl_vectorF_begin(self, *args)


    def end(self, *args) -> "float const *":
        """
        end(vnl_vectorF self) -> float
        end(vnl_vectorF self) -> float const *
        """
        return _vnl_vectorPython.vnl_vectorF_end(self, *args)


    def extract(self, len: 'unsigned long long', start: 'unsigned long long'=0) -> "vnl_vectorF":
        """
        extract(vnl_vectorF self, unsigned long long len, unsigned long long start=0) -> vnl_vectorF
        extract(vnl_vectorF self, unsigned long long len) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF_extract(self, len, start)


    def update(self, arg0: 'vnl_vectorF', start: 'unsigned long long'=0) -> "vnl_vectorF &":
        """
        update(vnl_vectorF self, vnl_vectorF arg0, unsigned long long start=0) -> vnl_vectorF
        update(vnl_vectorF self, vnl_vectorF arg0) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF_update(self, arg0, start)


    def squared_magnitude(self) -> "float":
        """squared_magnitude(vnl_vectorF self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_squared_magnitude(self)


    def magnitude(self) -> "float":
        """magnitude(vnl_vectorF self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_magnitude(self)


    def one_norm(self) -> "float":
        """one_norm(vnl_vectorF self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_one_norm(self)


    def two_norm(self) -> "float":
        """two_norm(vnl_vectorF self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_two_norm(self)


    def inf_norm(self) -> "float":
        """inf_norm(vnl_vectorF self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_inf_norm(self)


    def normalize(self) -> "vnl_vectorF &":
        """normalize(vnl_vectorF self) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF_normalize(self)


    def rms(self) -> "float":
        """rms(vnl_vectorF self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_rms(self)


    def min_value(self) -> "float":
        """min_value(vnl_vectorF self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_min_value(self)


    def max_value(self) -> "float":
        """max_value(vnl_vectorF self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_max_value(self)


    def arg_min(self) -> "unsigned long long":
        """arg_min(vnl_vectorF self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorF_arg_min(self)


    def arg_max(self) -> "unsigned long long":
        """arg_max(vnl_vectorF self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorF_arg_max(self)


    def mean(self) -> "float":
        """mean(vnl_vectorF self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_mean(self)


    def sum(self) -> "float":
        """sum(vnl_vectorF self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_sum(self)


    def flip(self, *args) -> "vnl_vectorF &":
        """
        flip(vnl_vectorF self) -> vnl_vectorF
        flip(vnl_vectorF self, unsigned long long const & b, unsigned long long const & e) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF_flip(self, *args)


    def roll(self, shift: 'int const &') -> "vnl_vectorF":
        """roll(vnl_vectorF self, int const & shift) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF_roll(self, shift)


    def roll_inplace(self, shift: 'int const &') -> "vnl_vectorF &":
        """roll_inplace(vnl_vectorF self, int const & shift) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF_roll_inplace(self, shift)


    def swap(self, that: 'vnl_vectorF') -> "void":
        """swap(vnl_vectorF self, vnl_vectorF that)"""
        return _vnl_vectorPython.vnl_vectorF_swap(self, that)


    def assert_size(self, sz: 'unsigned long long') -> "void":
        """assert_size(vnl_vectorF self, unsigned long long sz)"""
        return _vnl_vectorPython.vnl_vectorF_assert_size(self, sz)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_vectorF self)"""
        return _vnl_vectorPython.vnl_vectorF_assert_finite(self)


    def is_finite(self) -> "bool":
        """is_finite(vnl_vectorF self) -> bool"""
        return _vnl_vectorPython.vnl_vectorF_is_finite(self)


    def is_zero(self) -> "bool":
        """is_zero(vnl_vectorF self) -> bool"""
        return _vnl_vectorPython.vnl_vectorF_is_zero(self)


    def empty(self) -> "bool":
        """empty(vnl_vectorF self) -> bool"""
        return _vnl_vectorPython.vnl_vectorF_empty(self)


    def is_equal(self, rhs: 'vnl_vectorF', tol: 'double') -> "bool":
        """is_equal(vnl_vectorF self, vnl_vectorF rhs, double tol) -> bool"""
        return _vnl_vectorPython.vnl_vectorF_is_equal(self, rhs, tol)


    def operator_eq(self, v: 'vnl_vectorF') -> "bool":
        """operator_eq(vnl_vectorF self, vnl_vectorF v) -> bool"""
        return _vnl_vectorPython.vnl_vectorF_operator_eq(self, v)


    def __eq__(self, that: 'vnl_vectorF') -> "bool":
        """__eq__(vnl_vectorF self, vnl_vectorF that) -> bool"""
        return _vnl_vectorPython.vnl_vectorF___eq__(self, that)


    def __ne__(self, that: 'vnl_vectorF') -> "bool":
        """__ne__(vnl_vectorF self, vnl_vectorF that) -> bool"""
        return _vnl_vectorPython.vnl_vectorF___ne__(self, that)


    def set_size(self, n: 'unsigned long long') -> "bool":
        """set_size(vnl_vectorF self, unsigned long long n) -> bool"""
        return _vnl_vectorPython.vnl_vectorF_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_vectorF self)"""
        return _vnl_vectorPython.vnl_vectorF_clear(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_vectorF self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorF_read_ascii(self, s)


    def read(s: 'istream') -> "vnl_vectorF":
        """read(istream s) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF_read(s)

    read = staticmethod(read)
vnl_vectorF.size = new_instancemethod(_vnl_vectorPython.vnl_vectorF_size, None, vnl_vectorF)
vnl_vectorF.put = new_instancemethod(_vnl_vectorPython.vnl_vectorF_put, None, vnl_vectorF)
vnl_vectorF.get = new_instancemethod(_vnl_vectorPython.vnl_vectorF_get, None, vnl_vectorF)
vnl_vectorF.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorF_fill, None, vnl_vectorF)
vnl_vectorF.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorF_copy_in, None, vnl_vectorF)
vnl_vectorF.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorF_copy_out, None, vnl_vectorF)
vnl_vectorF.set = new_instancemethod(_vnl_vectorPython.vnl_vectorF_set, None, vnl_vectorF)
vnl_vectorF.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___call__, None, vnl_vectorF)
vnl_vectorF.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___idiv__, None, vnl_vectorF)
vnl_vectorF.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___iadd__, None, vnl_vectorF)
vnl_vectorF.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___isub__, None, vnl_vectorF)
vnl_vectorF.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorF_pre_multiply, None, vnl_vectorF)
vnl_vectorF.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorF_post_multiply, None, vnl_vectorF)
vnl_vectorF.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___imul__, None, vnl_vectorF)
vnl_vectorF.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___pos__, None, vnl_vectorF)
vnl_vectorF.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___neg__, None, vnl_vectorF)
vnl_vectorF.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___div__, None, vnl_vectorF)
vnl_vectorF.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___add__, None, vnl_vectorF)
vnl_vectorF.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___sub__, None, vnl_vectorF)
vnl_vectorF.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___mul__, None, vnl_vectorF)
vnl_vectorF.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorF_data_block, None, vnl_vectorF)
vnl_vectorF.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorF_begin, None, vnl_vectorF)
vnl_vectorF.end = new_instancemethod(_vnl_vectorPython.vnl_vectorF_end, None, vnl_vectorF)
vnl_vectorF.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorF_extract, None, vnl_vectorF)
vnl_vectorF.update = new_instancemethod(_vnl_vectorPython.vnl_vectorF_update, None, vnl_vectorF)
vnl_vectorF.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorF_squared_magnitude, None, vnl_vectorF)
vnl_vectorF.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorF_magnitude, None, vnl_vectorF)
vnl_vectorF.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorF_one_norm, None, vnl_vectorF)
vnl_vectorF.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorF_two_norm, None, vnl_vectorF)
vnl_vectorF.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorF_inf_norm, None, vnl_vectorF)
vnl_vectorF.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorF_normalize, None, vnl_vectorF)
vnl_vectorF.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorF_rms, None, vnl_vectorF)
vnl_vectorF.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorF_min_value, None, vnl_vectorF)
vnl_vectorF.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorF_max_value, None, vnl_vectorF)
vnl_vectorF.arg_min = new_instancemethod(_vnl_vectorPython.vnl_vectorF_arg_min, None, vnl_vectorF)
vnl_vectorF.arg_max = new_instancemethod(_vnl_vectorPython.vnl_vectorF_arg_max, None, vnl_vectorF)
vnl_vectorF.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorF_mean, None, vnl_vectorF)
vnl_vectorF.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorF_sum, None, vnl_vectorF)
vnl_vectorF.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorF_flip, None, vnl_vectorF)
vnl_vectorF.roll = new_instancemethod(_vnl_vectorPython.vnl_vectorF_roll, None, vnl_vectorF)
vnl_vectorF.roll_inplace = new_instancemethod(_vnl_vectorPython.vnl_vectorF_roll_inplace, None, vnl_vectorF)
vnl_vectorF.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorF_swap, None, vnl_vectorF)
vnl_vectorF.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorF_assert_size, None, vnl_vectorF)
vnl_vectorF.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorF_assert_finite, None, vnl_vectorF)
vnl_vectorF.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorF_is_finite, None, vnl_vectorF)
vnl_vectorF.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorF_is_zero, None, vnl_vectorF)
vnl_vectorF.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorF_empty, None, vnl_vectorF)
vnl_vectorF.is_equal = new_instancemethod(_vnl_vectorPython.vnl_vectorF_is_equal, None, vnl_vectorF)
vnl_vectorF.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorF_operator_eq, None, vnl_vectorF)
vnl_vectorF.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___eq__, None, vnl_vectorF)
vnl_vectorF.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___ne__, None, vnl_vectorF)
vnl_vectorF.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorF_set_size, None, vnl_vectorF)
vnl_vectorF.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorF_clear, None, vnl_vectorF)
vnl_vectorF.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorF_read_ascii, None, vnl_vectorF)
vnl_vectorF_swigregister = _vnl_vectorPython.vnl_vectorF_swigregister
vnl_vectorF_swigregister(vnl_vectorF)

def vnl_vectorF_read(s: 'istream') -> "vnl_vectorF":
    """vnl_vectorF_read(istream s) -> vnl_vectorF"""
    return _vnl_vectorPython.vnl_vectorF_read(s)

class vnl_vectorLD(object):
    """Proxy of C++ vnl_vectorLD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vectorLD self) -> vnl_vectorLD
        __init__(vnl_vectorLD self, unsigned long long len) -> vnl_vectorLD
        __init__(vnl_vectorLD self, unsigned long long len, long double const & v0) -> vnl_vectorLD
        __init__(vnl_vectorLD self, unsigned long long len, unsigned long long n, long double const * values) -> vnl_vectorLD
        __init__(vnl_vectorLD self, long double const * data_block, unsigned long long n) -> vnl_vectorLD
        __init__(vnl_vectorLD self, vnl_vectorLD arg0) -> vnl_vectorLD
        __init__(vnl_vectorLD self, vnl_vectorLD arg0, vnl_vectorLD arg1, vnl_tag_add arg2) -> vnl_vectorLD
        __init__(vnl_vectorLD self, vnl_vectorLD arg0, vnl_vectorLD arg1, vnl_tag_sub arg2) -> vnl_vectorLD
        __init__(vnl_vectorLD self, vnl_vectorLD arg0, long double arg1, vnl_tag_mul arg2) -> vnl_vectorLD
        __init__(vnl_vectorLD self, vnl_vectorLD arg0, long double arg1, vnl_tag_div arg2) -> vnl_vectorLD
        __init__(vnl_vectorLD self, vnl_vectorLD arg0, long double arg1, vnl_tag_add arg2) -> vnl_vectorLD
        __init__(vnl_vectorLD self, vnl_vectorLD arg0, long double arg1, vnl_tag_sub arg2) -> vnl_vectorLD
        __init__(vnl_vectorLD self, vnl_matrixLD arg0, vnl_vectorLD arg1, vnl_tag_mul arg2) -> vnl_vectorLD
        __init__(vnl_vectorLD self, vnl_vectorLD arg0, vnl_matrixLD arg1, vnl_tag_mul arg2) -> vnl_vectorLD
        __init__(vnl_vectorLD self, vnl_vectorLD that, vnl_tag_grab arg1) -> vnl_vectorLD
        """
        _vnl_vectorPython.vnl_vectorLD_swiginit(self, _vnl_vectorPython.new_vnl_vectorLD(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorLD

    def size(self) -> "unsigned long long":
        """size(vnl_vectorLD self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorLD_size(self)


    def put(self, i: 'unsigned long long', v: 'long double const &') -> "void":
        """put(vnl_vectorLD self, unsigned long long i, long double const & v)"""
        return _vnl_vectorPython.vnl_vectorLD_put(self, i, v)


    def get(self, i: 'unsigned long long') -> "long double":
        """get(vnl_vectorLD self, unsigned long long i) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_get(self, i)


    def fill(self, v: 'long double const &') -> "vnl_vectorLD &":
        """fill(vnl_vectorLD self, long double const & v) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD_fill(self, v)


    def copy_in(self, ptr: 'long double const *') -> "vnl_vectorLD &":
        """copy_in(vnl_vectorLD self, long double const * ptr) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD_copy_in(self, ptr)


    def copy_out(self, arg0: 'long double *') -> "void":
        """copy_out(vnl_vectorLD self, long double * arg0)"""
        return _vnl_vectorPython.vnl_vectorLD_copy_out(self, arg0)


    def set(self, ptr: 'long double const *') -> "vnl_vectorLD &":
        """set(vnl_vectorLD self, long double const * ptr) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD_set(self, ptr)


    def __call__(self, *args) -> "long double const &":
        """
        __call__(vnl_vectorLD self, unsigned long long i) -> long double
        __call__(vnl_vectorLD self, unsigned long long i) -> long double const &
        """
        return _vnl_vectorPython.vnl_vectorLD___call__(self, *args)


    def __idiv__(self, arg0: 'long double') -> "vnl_vectorLD &":
        """__idiv__(vnl_vectorLD self, long double arg0) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD___idiv__(self, arg0)


    def __iadd__(self, *args) -> "vnl_vectorLD &":
        """
        __iadd__(vnl_vectorLD self, long double arg0) -> vnl_vectorLD
        __iadd__(vnl_vectorLD self, vnl_vectorLD rhs) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_vectorLD &":
        """
        __isub__(vnl_vectorLD self, long double value) -> vnl_vectorLD
        __isub__(vnl_vectorLD self, vnl_vectorLD rhs) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD___isub__(self, *args)


    def pre_multiply(self, M: 'vnl_matrixLD') -> "vnl_vectorLD &":
        """pre_multiply(vnl_vectorLD self, vnl_matrixLD M) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD_pre_multiply(self, M)


    def post_multiply(self, M: 'vnl_matrixLD') -> "vnl_vectorLD &":
        """post_multiply(vnl_vectorLD self, vnl_matrixLD M) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD_post_multiply(self, M)


    def __imul__(self, *args) -> "vnl_vectorLD &":
        """
        __imul__(vnl_vectorLD self, long double arg0) -> vnl_vectorLD
        __imul__(vnl_vectorLD self, vnl_matrixLD m) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD___imul__(self, *args)


    def __pos__(self) -> "vnl_vectorLD":
        """__pos__(vnl_vectorLD self) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD___pos__(self)


    def __neg__(self) -> "vnl_vectorLD":
        """__neg__(vnl_vectorLD self) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD___neg__(self)


    def __div__(self, v: 'long double') -> "vnl_vectorLD":
        """__div__(vnl_vectorLD self, long double v) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD___div__(self, v)


    def __add__(self, *args) -> "vnl_vectorLD":
        """
        __add__(vnl_vectorLD self, long double v) -> vnl_vectorLD
        __add__(vnl_vectorLD self, vnl_vectorLD v) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD___add__(self, *args)


    def __sub__(self, *args) -> "vnl_vectorLD":
        """
        __sub__(vnl_vectorLD self, long double v) -> vnl_vectorLD
        __sub__(vnl_vectorLD self, vnl_vectorLD v) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_vectorLD":
        """
        __mul__(vnl_vectorLD self, long double v) -> vnl_vectorLD
        __mul__(vnl_vectorLD self, vnl_matrixLD M) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD___mul__(self, *args)


    def data_block(self, *args) -> "long double *":
        """
        data_block(vnl_vectorLD self) -> long double const
        data_block(vnl_vectorLD self) -> long double *
        """
        return _vnl_vectorPython.vnl_vectorLD_data_block(self, *args)


    def begin(self, *args) -> "long double const *":
        """
        begin(vnl_vectorLD self) -> long double
        begin(vnl_vectorLD self) -> long double const *
        """
        return _vnl_vectorPython.vnl_vectorLD_begin(self, *args)


    def end(self, *args) -> "long double const *":
        """
        end(vnl_vectorLD self) -> long double
        end(vnl_vectorLD self) -> long double const *
        """
        return _vnl_vectorPython.vnl_vectorLD_end(self, *args)


    def extract(self, len: 'unsigned long long', start: 'unsigned long long'=0) -> "vnl_vectorLD":
        """
        extract(vnl_vectorLD self, unsigned long long len, unsigned long long start=0) -> vnl_vectorLD
        extract(vnl_vectorLD self, unsigned long long len) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD_extract(self, len, start)


    def update(self, arg0: 'vnl_vectorLD', start: 'unsigned long long'=0) -> "vnl_vectorLD &":
        """
        update(vnl_vectorLD self, vnl_vectorLD arg0, unsigned long long start=0) -> vnl_vectorLD
        update(vnl_vectorLD self, vnl_vectorLD arg0) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD_update(self, arg0, start)


    def squared_magnitude(self) -> "long double":
        """squared_magnitude(vnl_vectorLD self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_squared_magnitude(self)


    def magnitude(self) -> "long double":
        """magnitude(vnl_vectorLD self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_magnitude(self)


    def one_norm(self) -> "long double":
        """one_norm(vnl_vectorLD self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_one_norm(self)


    def two_norm(self) -> "long double":
        """two_norm(vnl_vectorLD self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_two_norm(self)


    def inf_norm(self) -> "long double":
        """inf_norm(vnl_vectorLD self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_inf_norm(self)


    def normalize(self) -> "vnl_vectorLD &":
        """normalize(vnl_vectorLD self) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD_normalize(self)


    def rms(self) -> "long double":
        """rms(vnl_vectorLD self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_rms(self)


    def min_value(self) -> "long double":
        """min_value(vnl_vectorLD self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_min_value(self)


    def max_value(self) -> "long double":
        """max_value(vnl_vectorLD self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_max_value(self)


    def arg_min(self) -> "unsigned long long":
        """arg_min(vnl_vectorLD self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorLD_arg_min(self)


    def arg_max(self) -> "unsigned long long":
        """arg_max(vnl_vectorLD self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorLD_arg_max(self)


    def mean(self) -> "long double":
        """mean(vnl_vectorLD self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_mean(self)


    def sum(self) -> "long double":
        """sum(vnl_vectorLD self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_sum(self)


    def flip(self, *args) -> "vnl_vectorLD &":
        """
        flip(vnl_vectorLD self) -> vnl_vectorLD
        flip(vnl_vectorLD self, unsigned long long const & b, unsigned long long const & e) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD_flip(self, *args)


    def roll(self, shift: 'int const &') -> "vnl_vectorLD":
        """roll(vnl_vectorLD self, int const & shift) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD_roll(self, shift)


    def roll_inplace(self, shift: 'int const &') -> "vnl_vectorLD &":
        """roll_inplace(vnl_vectorLD self, int const & shift) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD_roll_inplace(self, shift)


    def swap(self, that: 'vnl_vectorLD') -> "void":
        """swap(vnl_vectorLD self, vnl_vectorLD that)"""
        return _vnl_vectorPython.vnl_vectorLD_swap(self, that)


    def assert_size(self, sz: 'unsigned long long') -> "void":
        """assert_size(vnl_vectorLD self, unsigned long long sz)"""
        return _vnl_vectorPython.vnl_vectorLD_assert_size(self, sz)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_vectorLD self)"""
        return _vnl_vectorPython.vnl_vectorLD_assert_finite(self)


    def is_finite(self) -> "bool":
        """is_finite(vnl_vectorLD self) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD_is_finite(self)


    def is_zero(self) -> "bool":
        """is_zero(vnl_vectorLD self) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD_is_zero(self)


    def empty(self) -> "bool":
        """empty(vnl_vectorLD self) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD_empty(self)


    def is_equal(self, rhs: 'vnl_vectorLD', tol: 'double') -> "bool":
        """is_equal(vnl_vectorLD self, vnl_vectorLD rhs, double tol) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD_is_equal(self, rhs, tol)


    def operator_eq(self, v: 'vnl_vectorLD') -> "bool":
        """operator_eq(vnl_vectorLD self, vnl_vectorLD v) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD_operator_eq(self, v)


    def __eq__(self, that: 'vnl_vectorLD') -> "bool":
        """__eq__(vnl_vectorLD self, vnl_vectorLD that) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD___eq__(self, that)


    def __ne__(self, that: 'vnl_vectorLD') -> "bool":
        """__ne__(vnl_vectorLD self, vnl_vectorLD that) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD___ne__(self, that)


    def set_size(self, n: 'unsigned long long') -> "bool":
        """set_size(vnl_vectorLD self, unsigned long long n) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_vectorLD self)"""
        return _vnl_vectorPython.vnl_vectorLD_clear(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_vectorLD self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD_read_ascii(self, s)


    def read(s: 'istream') -> "vnl_vectorLD":
        """read(istream s) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD_read(s)

    read = staticmethod(read)
vnl_vectorLD.size = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_size, None, vnl_vectorLD)
vnl_vectorLD.put = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_put, None, vnl_vectorLD)
vnl_vectorLD.get = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_get, None, vnl_vectorLD)
vnl_vectorLD.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_fill, None, vnl_vectorLD)
vnl_vectorLD.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_copy_in, None, vnl_vectorLD)
vnl_vectorLD.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_copy_out, None, vnl_vectorLD)
vnl_vectorLD.set = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_set, None, vnl_vectorLD)
vnl_vectorLD.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___call__, None, vnl_vectorLD)
vnl_vectorLD.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___idiv__, None, vnl_vectorLD)
vnl_vectorLD.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___iadd__, None, vnl_vectorLD)
vnl_vectorLD.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___isub__, None, vnl_vectorLD)
vnl_vectorLD.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_pre_multiply, None, vnl_vectorLD)
vnl_vectorLD.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_post_multiply, None, vnl_vectorLD)
vnl_vectorLD.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___imul__, None, vnl_vectorLD)
vnl_vectorLD.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___pos__, None, vnl_vectorLD)
vnl_vectorLD.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___neg__, None, vnl_vectorLD)
vnl_vectorLD.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___div__, None, vnl_vectorLD)
vnl_vectorLD.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___add__, None, vnl_vectorLD)
vnl_vectorLD.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___sub__, None, vnl_vectorLD)
vnl_vectorLD.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___mul__, None, vnl_vectorLD)
vnl_vectorLD.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_data_block, None, vnl_vectorLD)
vnl_vectorLD.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_begin, None, vnl_vectorLD)
vnl_vectorLD.end = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_end, None, vnl_vectorLD)
vnl_vectorLD.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_extract, None, vnl_vectorLD)
vnl_vectorLD.update = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_update, None, vnl_vectorLD)
vnl_vectorLD.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_squared_magnitude, None, vnl_vectorLD)
vnl_vectorLD.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_magnitude, None, vnl_vectorLD)
vnl_vectorLD.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_one_norm, None, vnl_vectorLD)
vnl_vectorLD.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_two_norm, None, vnl_vectorLD)
vnl_vectorLD.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_inf_norm, None, vnl_vectorLD)
vnl_vectorLD.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_normalize, None, vnl_vectorLD)
vnl_vectorLD.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_rms, None, vnl_vectorLD)
vnl_vectorLD.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_min_value, None, vnl_vectorLD)
vnl_vectorLD.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_max_value, None, vnl_vectorLD)
vnl_vectorLD.arg_min = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_arg_min, None, vnl_vectorLD)
vnl_vectorLD.arg_max = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_arg_max, None, vnl_vectorLD)
vnl_vectorLD.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_mean, None, vnl_vectorLD)
vnl_vectorLD.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_sum, None, vnl_vectorLD)
vnl_vectorLD.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_flip, None, vnl_vectorLD)
vnl_vectorLD.roll = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_roll, None, vnl_vectorLD)
vnl_vectorLD.roll_inplace = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_roll_inplace, None, vnl_vectorLD)
vnl_vectorLD.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_swap, None, vnl_vectorLD)
vnl_vectorLD.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_assert_size, None, vnl_vectorLD)
vnl_vectorLD.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_assert_finite, None, vnl_vectorLD)
vnl_vectorLD.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_is_finite, None, vnl_vectorLD)
vnl_vectorLD.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_is_zero, None, vnl_vectorLD)
vnl_vectorLD.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_empty, None, vnl_vectorLD)
vnl_vectorLD.is_equal = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_is_equal, None, vnl_vectorLD)
vnl_vectorLD.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_operator_eq, None, vnl_vectorLD)
vnl_vectorLD.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___eq__, None, vnl_vectorLD)
vnl_vectorLD.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___ne__, None, vnl_vectorLD)
vnl_vectorLD.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_set_size, None, vnl_vectorLD)
vnl_vectorLD.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_clear, None, vnl_vectorLD)
vnl_vectorLD.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_read_ascii, None, vnl_vectorLD)
vnl_vectorLD_swigregister = _vnl_vectorPython.vnl_vectorLD_swigregister
vnl_vectorLD_swigregister(vnl_vectorLD)

def vnl_vectorLD_read(s: 'istream') -> "vnl_vectorLD":
    """vnl_vectorLD_read(istream s) -> vnl_vectorLD"""
    return _vnl_vectorPython.vnl_vectorLD_read(s)

class vnl_vectorSC(object):
    """Proxy of C++ vnl_vectorSC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vectorSC self) -> vnl_vectorSC
        __init__(vnl_vectorSC self, unsigned long long len) -> vnl_vectorSC
        __init__(vnl_vectorSC self, unsigned long long len, signed char const & v0) -> vnl_vectorSC
        __init__(vnl_vectorSC self, unsigned long long len, unsigned long long n, signed char const * values) -> vnl_vectorSC
        __init__(vnl_vectorSC self, signed char const * data_block, unsigned long long n) -> vnl_vectorSC
        __init__(vnl_vectorSC self, vnl_vectorSC arg0) -> vnl_vectorSC
        __init__(vnl_vectorSC self, vnl_vectorSC arg0, vnl_vectorSC arg1, vnl_tag_add arg2) -> vnl_vectorSC
        __init__(vnl_vectorSC self, vnl_vectorSC arg0, vnl_vectorSC arg1, vnl_tag_sub arg2) -> vnl_vectorSC
        __init__(vnl_vectorSC self, vnl_vectorSC arg0, signed char arg1, vnl_tag_mul arg2) -> vnl_vectorSC
        __init__(vnl_vectorSC self, vnl_vectorSC arg0, signed char arg1, vnl_tag_div arg2) -> vnl_vectorSC
        __init__(vnl_vectorSC self, vnl_vectorSC arg0, signed char arg1, vnl_tag_add arg2) -> vnl_vectorSC
        __init__(vnl_vectorSC self, vnl_vectorSC arg0, signed char arg1, vnl_tag_sub arg2) -> vnl_vectorSC
        __init__(vnl_vectorSC self, vnl_matrixSC arg0, vnl_vectorSC arg1, vnl_tag_mul arg2) -> vnl_vectorSC
        __init__(vnl_vectorSC self, vnl_vectorSC arg0, vnl_matrixSC arg1, vnl_tag_mul arg2) -> vnl_vectorSC
        __init__(vnl_vectorSC self, vnl_vectorSC that, vnl_tag_grab arg1) -> vnl_vectorSC
        """
        _vnl_vectorPython.vnl_vectorSC_swiginit(self, _vnl_vectorPython.new_vnl_vectorSC(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorSC

    def size(self) -> "unsigned long long":
        """size(vnl_vectorSC self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSC_size(self)


    def put(self, i: 'unsigned long long', v: 'signed char const &') -> "void":
        """put(vnl_vectorSC self, unsigned long long i, signed char const & v)"""
        return _vnl_vectorPython.vnl_vectorSC_put(self, i, v)


    def get(self, i: 'unsigned long long') -> "signed char":
        """get(vnl_vectorSC self, unsigned long long i) -> signed char"""
        return _vnl_vectorPython.vnl_vectorSC_get(self, i)


    def fill(self, v: 'signed char const &') -> "vnl_vectorSC &":
        """fill(vnl_vectorSC self, signed char const & v) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC_fill(self, v)


    def copy_in(self, ptr: 'signed char const *') -> "vnl_vectorSC &":
        """copy_in(vnl_vectorSC self, signed char const * ptr) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC_copy_in(self, ptr)


    def copy_out(self, arg0: 'signed char *') -> "void":
        """copy_out(vnl_vectorSC self, signed char * arg0)"""
        return _vnl_vectorPython.vnl_vectorSC_copy_out(self, arg0)


    def set(self, ptr: 'signed char const *') -> "vnl_vectorSC &":
        """set(vnl_vectorSC self, signed char const * ptr) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC_set(self, ptr)


    def __call__(self, *args) -> "signed char const &":
        """
        __call__(vnl_vectorSC self, unsigned long long i) -> signed char
        __call__(vnl_vectorSC self, unsigned long long i) -> signed char const &
        """
        return _vnl_vectorPython.vnl_vectorSC___call__(self, *args)


    def __idiv__(self, arg0: 'signed char') -> "vnl_vectorSC &":
        """__idiv__(vnl_vectorSC self, signed char arg0) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC___idiv__(self, arg0)


    def __iadd__(self, *args) -> "vnl_vectorSC &":
        """
        __iadd__(vnl_vectorSC self, signed char arg0) -> vnl_vectorSC
        __iadd__(vnl_vectorSC self, vnl_vectorSC rhs) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_vectorSC &":
        """
        __isub__(vnl_vectorSC self, signed char value) -> vnl_vectorSC
        __isub__(vnl_vectorSC self, vnl_vectorSC rhs) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC___isub__(self, *args)


    def pre_multiply(self, M: 'vnl_matrixSC') -> "vnl_vectorSC &":
        """pre_multiply(vnl_vectorSC self, vnl_matrixSC M) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC_pre_multiply(self, M)


    def post_multiply(self, M: 'vnl_matrixSC') -> "vnl_vectorSC &":
        """post_multiply(vnl_vectorSC self, vnl_matrixSC M) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC_post_multiply(self, M)


    def __imul__(self, *args) -> "vnl_vectorSC &":
        """
        __imul__(vnl_vectorSC self, signed char arg0) -> vnl_vectorSC
        __imul__(vnl_vectorSC self, vnl_matrixSC m) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC___imul__(self, *args)


    def __pos__(self) -> "vnl_vectorSC":
        """__pos__(vnl_vectorSC self) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC___pos__(self)


    def __neg__(self) -> "vnl_vectorSC":
        """__neg__(vnl_vectorSC self) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC___neg__(self)


    def __div__(self, v: 'signed char') -> "vnl_vectorSC":
        """__div__(vnl_vectorSC self, signed char v) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC___div__(self, v)


    def __add__(self, *args) -> "vnl_vectorSC":
        """
        __add__(vnl_vectorSC self, signed char v) -> vnl_vectorSC
        __add__(vnl_vectorSC self, vnl_vectorSC v) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC___add__(self, *args)


    def __sub__(self, *args) -> "vnl_vectorSC":
        """
        __sub__(vnl_vectorSC self, signed char v) -> vnl_vectorSC
        __sub__(vnl_vectorSC self, vnl_vectorSC v) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_vectorSC":
        """
        __mul__(vnl_vectorSC self, signed char v) -> vnl_vectorSC
        __mul__(vnl_vectorSC self, vnl_matrixSC M) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC___mul__(self, *args)


    def data_block(self, *args) -> "signed char *":
        """
        data_block(vnl_vectorSC self) -> signed char const
        data_block(vnl_vectorSC self) -> signed char *
        """
        return _vnl_vectorPython.vnl_vectorSC_data_block(self, *args)


    def begin(self, *args) -> "signed char const *":
        """
        begin(vnl_vectorSC self) -> signed char
        begin(vnl_vectorSC self) -> signed char const *
        """
        return _vnl_vectorPython.vnl_vectorSC_begin(self, *args)


    def end(self, *args) -> "signed char const *":
        """
        end(vnl_vectorSC self) -> signed char
        end(vnl_vectorSC self) -> signed char const *
        """
        return _vnl_vectorPython.vnl_vectorSC_end(self, *args)


    def extract(self, len: 'unsigned long long', start: 'unsigned long long'=0) -> "vnl_vectorSC":
        """
        extract(vnl_vectorSC self, unsigned long long len, unsigned long long start=0) -> vnl_vectorSC
        extract(vnl_vectorSC self, unsigned long long len) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC_extract(self, len, start)


    def update(self, arg0: 'vnl_vectorSC', start: 'unsigned long long'=0) -> "vnl_vectorSC &":
        """
        update(vnl_vectorSC self, vnl_vectorSC arg0, unsigned long long start=0) -> vnl_vectorSC
        update(vnl_vectorSC self, vnl_vectorSC arg0) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC_update(self, arg0, start)


    def squared_magnitude(self) -> "unsigned char":
        """squared_magnitude(vnl_vectorSC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorSC_squared_magnitude(self)


    def magnitude(self) -> "unsigned char":
        """magnitude(vnl_vectorSC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorSC_magnitude(self)


    def one_norm(self) -> "unsigned char":
        """one_norm(vnl_vectorSC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorSC_one_norm(self)


    def two_norm(self) -> "unsigned char":
        """two_norm(vnl_vectorSC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorSC_two_norm(self)


    def inf_norm(self) -> "unsigned char":
        """inf_norm(vnl_vectorSC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorSC_inf_norm(self)


    def normalize(self) -> "vnl_vectorSC &":
        """normalize(vnl_vectorSC self) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC_normalize(self)


    def rms(self) -> "unsigned char":
        """rms(vnl_vectorSC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorSC_rms(self)


    def min_value(self) -> "signed char":
        """min_value(vnl_vectorSC self) -> signed char"""
        return _vnl_vectorPython.vnl_vectorSC_min_value(self)


    def max_value(self) -> "signed char":
        """max_value(vnl_vectorSC self) -> signed char"""
        return _vnl_vectorPython.vnl_vectorSC_max_value(self)


    def arg_min(self) -> "unsigned long long":
        """arg_min(vnl_vectorSC self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSC_arg_min(self)


    def arg_max(self) -> "unsigned long long":
        """arg_max(vnl_vectorSC self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSC_arg_max(self)


    def mean(self) -> "signed char":
        """mean(vnl_vectorSC self) -> signed char"""
        return _vnl_vectorPython.vnl_vectorSC_mean(self)


    def sum(self) -> "signed char":
        """sum(vnl_vectorSC self) -> signed char"""
        return _vnl_vectorPython.vnl_vectorSC_sum(self)


    def flip(self, *args) -> "vnl_vectorSC &":
        """
        flip(vnl_vectorSC self) -> vnl_vectorSC
        flip(vnl_vectorSC self, unsigned long long const & b, unsigned long long const & e) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC_flip(self, *args)


    def roll(self, shift: 'int const &') -> "vnl_vectorSC":
        """roll(vnl_vectorSC self, int const & shift) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC_roll(self, shift)


    def roll_inplace(self, shift: 'int const &') -> "vnl_vectorSC &":
        """roll_inplace(vnl_vectorSC self, int const & shift) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC_roll_inplace(self, shift)


    def swap(self, that: 'vnl_vectorSC') -> "void":
        """swap(vnl_vectorSC self, vnl_vectorSC that)"""
        return _vnl_vectorPython.vnl_vectorSC_swap(self, that)


    def assert_size(self, sz: 'unsigned long long') -> "void":
        """assert_size(vnl_vectorSC self, unsigned long long sz)"""
        return _vnl_vectorPython.vnl_vectorSC_assert_size(self, sz)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_vectorSC self)"""
        return _vnl_vectorPython.vnl_vectorSC_assert_finite(self)


    def is_finite(self) -> "bool":
        """is_finite(vnl_vectorSC self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC_is_finite(self)


    def is_zero(self) -> "bool":
        """is_zero(vnl_vectorSC self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC_is_zero(self)


    def empty(self) -> "bool":
        """empty(vnl_vectorSC self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC_empty(self)


    def is_equal(self, rhs: 'vnl_vectorSC', tol: 'double') -> "bool":
        """is_equal(vnl_vectorSC self, vnl_vectorSC rhs, double tol) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC_is_equal(self, rhs, tol)


    def operator_eq(self, v: 'vnl_vectorSC') -> "bool":
        """operator_eq(vnl_vectorSC self, vnl_vectorSC v) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC_operator_eq(self, v)


    def __eq__(self, that: 'vnl_vectorSC') -> "bool":
        """__eq__(vnl_vectorSC self, vnl_vectorSC that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC___eq__(self, that)


    def __ne__(self, that: 'vnl_vectorSC') -> "bool":
        """__ne__(vnl_vectorSC self, vnl_vectorSC that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC___ne__(self, that)


    def set_size(self, n: 'unsigned long long') -> "bool":
        """set_size(vnl_vectorSC self, unsigned long long n) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_vectorSC self)"""
        return _vnl_vectorPython.vnl_vectorSC_clear(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_vectorSC self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC_read_ascii(self, s)


    def read(s: 'istream') -> "vnl_vectorSC":
        """read(istream s) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC_read(s)

    read = staticmethod(read)
vnl_vectorSC.size = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_size, None, vnl_vectorSC)
vnl_vectorSC.put = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_put, None, vnl_vectorSC)
vnl_vectorSC.get = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_get, None, vnl_vectorSC)
vnl_vectorSC.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_fill, None, vnl_vectorSC)
vnl_vectorSC.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_copy_in, None, vnl_vectorSC)
vnl_vectorSC.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_copy_out, None, vnl_vectorSC)
vnl_vectorSC.set = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_set, None, vnl_vectorSC)
vnl_vectorSC.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___call__, None, vnl_vectorSC)
vnl_vectorSC.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___idiv__, None, vnl_vectorSC)
vnl_vectorSC.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___iadd__, None, vnl_vectorSC)
vnl_vectorSC.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___isub__, None, vnl_vectorSC)
vnl_vectorSC.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_pre_multiply, None, vnl_vectorSC)
vnl_vectorSC.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_post_multiply, None, vnl_vectorSC)
vnl_vectorSC.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___imul__, None, vnl_vectorSC)
vnl_vectorSC.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___pos__, None, vnl_vectorSC)
vnl_vectorSC.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___neg__, None, vnl_vectorSC)
vnl_vectorSC.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___div__, None, vnl_vectorSC)
vnl_vectorSC.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___add__, None, vnl_vectorSC)
vnl_vectorSC.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___sub__, None, vnl_vectorSC)
vnl_vectorSC.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___mul__, None, vnl_vectorSC)
vnl_vectorSC.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_data_block, None, vnl_vectorSC)
vnl_vectorSC.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_begin, None, vnl_vectorSC)
vnl_vectorSC.end = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_end, None, vnl_vectorSC)
vnl_vectorSC.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_extract, None, vnl_vectorSC)
vnl_vectorSC.update = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_update, None, vnl_vectorSC)
vnl_vectorSC.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_squared_magnitude, None, vnl_vectorSC)
vnl_vectorSC.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_magnitude, None, vnl_vectorSC)
vnl_vectorSC.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_one_norm, None, vnl_vectorSC)
vnl_vectorSC.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_two_norm, None, vnl_vectorSC)
vnl_vectorSC.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_inf_norm, None, vnl_vectorSC)
vnl_vectorSC.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_normalize, None, vnl_vectorSC)
vnl_vectorSC.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_rms, None, vnl_vectorSC)
vnl_vectorSC.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_min_value, None, vnl_vectorSC)
vnl_vectorSC.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_max_value, None, vnl_vectorSC)
vnl_vectorSC.arg_min = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_arg_min, None, vnl_vectorSC)
vnl_vectorSC.arg_max = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_arg_max, None, vnl_vectorSC)
vnl_vectorSC.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_mean, None, vnl_vectorSC)
vnl_vectorSC.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_sum, None, vnl_vectorSC)
vnl_vectorSC.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_flip, None, vnl_vectorSC)
vnl_vectorSC.roll = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_roll, None, vnl_vectorSC)
vnl_vectorSC.roll_inplace = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_roll_inplace, None, vnl_vectorSC)
vnl_vectorSC.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_swap, None, vnl_vectorSC)
vnl_vectorSC.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_assert_size, None, vnl_vectorSC)
vnl_vectorSC.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_assert_finite, None, vnl_vectorSC)
vnl_vectorSC.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_is_finite, None, vnl_vectorSC)
vnl_vectorSC.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_is_zero, None, vnl_vectorSC)
vnl_vectorSC.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_empty, None, vnl_vectorSC)
vnl_vectorSC.is_equal = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_is_equal, None, vnl_vectorSC)
vnl_vectorSC.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_operator_eq, None, vnl_vectorSC)
vnl_vectorSC.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___eq__, None, vnl_vectorSC)
vnl_vectorSC.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___ne__, None, vnl_vectorSC)
vnl_vectorSC.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_set_size, None, vnl_vectorSC)
vnl_vectorSC.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_clear, None, vnl_vectorSC)
vnl_vectorSC.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_read_ascii, None, vnl_vectorSC)
vnl_vectorSC_swigregister = _vnl_vectorPython.vnl_vectorSC_swigregister
vnl_vectorSC_swigregister(vnl_vectorSC)

def vnl_vectorSC_read(s: 'istream') -> "vnl_vectorSC":
    """vnl_vectorSC_read(istream s) -> vnl_vectorSC"""
    return _vnl_vectorPython.vnl_vectorSC_read(s)

class vnl_vectorSI(object):
    """Proxy of C++ vnl_vectorSI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vectorSI self) -> vnl_vectorSI
        __init__(vnl_vectorSI self, unsigned long long len) -> vnl_vectorSI
        __init__(vnl_vectorSI self, unsigned long long len, int const & v0) -> vnl_vectorSI
        __init__(vnl_vectorSI self, unsigned long long len, unsigned long long n, int const * values) -> vnl_vectorSI
        __init__(vnl_vectorSI self, int const * data_block, unsigned long long n) -> vnl_vectorSI
        __init__(vnl_vectorSI self, vnl_vectorSI arg0) -> vnl_vectorSI
        __init__(vnl_vectorSI self, vnl_vectorSI arg0, vnl_vectorSI arg1, vnl_tag_add arg2) -> vnl_vectorSI
        __init__(vnl_vectorSI self, vnl_vectorSI arg0, vnl_vectorSI arg1, vnl_tag_sub arg2) -> vnl_vectorSI
        __init__(vnl_vectorSI self, vnl_vectorSI arg0, int arg1, vnl_tag_mul arg2) -> vnl_vectorSI
        __init__(vnl_vectorSI self, vnl_vectorSI arg0, int arg1, vnl_tag_div arg2) -> vnl_vectorSI
        __init__(vnl_vectorSI self, vnl_vectorSI arg0, int arg1, vnl_tag_add arg2) -> vnl_vectorSI
        __init__(vnl_vectorSI self, vnl_vectorSI arg0, int arg1, vnl_tag_sub arg2) -> vnl_vectorSI
        __init__(vnl_vectorSI self, vnl_matrixSI arg0, vnl_vectorSI arg1, vnl_tag_mul arg2) -> vnl_vectorSI
        __init__(vnl_vectorSI self, vnl_vectorSI arg0, vnl_matrixSI arg1, vnl_tag_mul arg2) -> vnl_vectorSI
        __init__(vnl_vectorSI self, vnl_vectorSI that, vnl_tag_grab arg1) -> vnl_vectorSI
        """
        _vnl_vectorPython.vnl_vectorSI_swiginit(self, _vnl_vectorPython.new_vnl_vectorSI(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorSI

    def size(self) -> "unsigned long long":
        """size(vnl_vectorSI self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSI_size(self)


    def put(self, i: 'unsigned long long', v: 'int const &') -> "void":
        """put(vnl_vectorSI self, unsigned long long i, int const & v)"""
        return _vnl_vectorPython.vnl_vectorSI_put(self, i, v)


    def get(self, i: 'unsigned long long') -> "int":
        """get(vnl_vectorSI self, unsigned long long i) -> int"""
        return _vnl_vectorPython.vnl_vectorSI_get(self, i)


    def fill(self, v: 'int const &') -> "vnl_vectorSI &":
        """fill(vnl_vectorSI self, int const & v) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI_fill(self, v)


    def copy_in(self, ptr: 'int const *') -> "vnl_vectorSI &":
        """copy_in(vnl_vectorSI self, int const * ptr) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI_copy_in(self, ptr)


    def copy_out(self, arg0: 'int *') -> "void":
        """copy_out(vnl_vectorSI self, int * arg0)"""
        return _vnl_vectorPython.vnl_vectorSI_copy_out(self, arg0)


    def set(self, ptr: 'int const *') -> "vnl_vectorSI &":
        """set(vnl_vectorSI self, int const * ptr) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI_set(self, ptr)


    def __call__(self, *args) -> "int const &":
        """
        __call__(vnl_vectorSI self, unsigned long long i) -> int
        __call__(vnl_vectorSI self, unsigned long long i) -> int const &
        """
        return _vnl_vectorPython.vnl_vectorSI___call__(self, *args)


    def __idiv__(self, arg0: 'int') -> "vnl_vectorSI &":
        """__idiv__(vnl_vectorSI self, int arg0) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI___idiv__(self, arg0)


    def __iadd__(self, *args) -> "vnl_vectorSI &":
        """
        __iadd__(vnl_vectorSI self, int arg0) -> vnl_vectorSI
        __iadd__(vnl_vectorSI self, vnl_vectorSI rhs) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_vectorSI &":
        """
        __isub__(vnl_vectorSI self, int value) -> vnl_vectorSI
        __isub__(vnl_vectorSI self, vnl_vectorSI rhs) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI___isub__(self, *args)


    def pre_multiply(self, M: 'vnl_matrixSI') -> "vnl_vectorSI &":
        """pre_multiply(vnl_vectorSI self, vnl_matrixSI M) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI_pre_multiply(self, M)


    def post_multiply(self, M: 'vnl_matrixSI') -> "vnl_vectorSI &":
        """post_multiply(vnl_vectorSI self, vnl_matrixSI M) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI_post_multiply(self, M)


    def __imul__(self, *args) -> "vnl_vectorSI &":
        """
        __imul__(vnl_vectorSI self, int arg0) -> vnl_vectorSI
        __imul__(vnl_vectorSI self, vnl_matrixSI m) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI___imul__(self, *args)


    def __pos__(self) -> "vnl_vectorSI":
        """__pos__(vnl_vectorSI self) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI___pos__(self)


    def __neg__(self) -> "vnl_vectorSI":
        """__neg__(vnl_vectorSI self) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI___neg__(self)


    def __div__(self, v: 'int') -> "vnl_vectorSI":
        """__div__(vnl_vectorSI self, int v) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI___div__(self, v)


    def __add__(self, *args) -> "vnl_vectorSI":
        """
        __add__(vnl_vectorSI self, int v) -> vnl_vectorSI
        __add__(vnl_vectorSI self, vnl_vectorSI v) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI___add__(self, *args)


    def __sub__(self, *args) -> "vnl_vectorSI":
        """
        __sub__(vnl_vectorSI self, int v) -> vnl_vectorSI
        __sub__(vnl_vectorSI self, vnl_vectorSI v) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_vectorSI":
        """
        __mul__(vnl_vectorSI self, int v) -> vnl_vectorSI
        __mul__(vnl_vectorSI self, vnl_matrixSI M) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI___mul__(self, *args)


    def data_block(self, *args) -> "int *":
        """
        data_block(vnl_vectorSI self) -> int const
        data_block(vnl_vectorSI self) -> int *
        """
        return _vnl_vectorPython.vnl_vectorSI_data_block(self, *args)


    def begin(self, *args) -> "int const *":
        """
        begin(vnl_vectorSI self) -> int
        begin(vnl_vectorSI self) -> int const *
        """
        return _vnl_vectorPython.vnl_vectorSI_begin(self, *args)


    def end(self, *args) -> "int const *":
        """
        end(vnl_vectorSI self) -> int
        end(vnl_vectorSI self) -> int const *
        """
        return _vnl_vectorPython.vnl_vectorSI_end(self, *args)


    def extract(self, len: 'unsigned long long', start: 'unsigned long long'=0) -> "vnl_vectorSI":
        """
        extract(vnl_vectorSI self, unsigned long long len, unsigned long long start=0) -> vnl_vectorSI
        extract(vnl_vectorSI self, unsigned long long len) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI_extract(self, len, start)


    def update(self, arg0: 'vnl_vectorSI', start: 'unsigned long long'=0) -> "vnl_vectorSI &":
        """
        update(vnl_vectorSI self, vnl_vectorSI arg0, unsigned long long start=0) -> vnl_vectorSI
        update(vnl_vectorSI self, vnl_vectorSI arg0) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI_update(self, arg0, start)


    def squared_magnitude(self) -> "unsigned int":
        """squared_magnitude(vnl_vectorSI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSI_squared_magnitude(self)


    def magnitude(self) -> "unsigned int":
        """magnitude(vnl_vectorSI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSI_magnitude(self)


    def one_norm(self) -> "unsigned int":
        """one_norm(vnl_vectorSI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSI_one_norm(self)


    def two_norm(self) -> "unsigned int":
        """two_norm(vnl_vectorSI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSI_two_norm(self)


    def inf_norm(self) -> "unsigned int":
        """inf_norm(vnl_vectorSI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSI_inf_norm(self)


    def normalize(self) -> "vnl_vectorSI &":
        """normalize(vnl_vectorSI self) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI_normalize(self)


    def rms(self) -> "unsigned int":
        """rms(vnl_vectorSI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSI_rms(self)


    def min_value(self) -> "int":
        """min_value(vnl_vectorSI self) -> int"""
        return _vnl_vectorPython.vnl_vectorSI_min_value(self)


    def max_value(self) -> "int":
        """max_value(vnl_vectorSI self) -> int"""
        return _vnl_vectorPython.vnl_vectorSI_max_value(self)


    def arg_min(self) -> "unsigned long long":
        """arg_min(vnl_vectorSI self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSI_arg_min(self)


    def arg_max(self) -> "unsigned long long":
        """arg_max(vnl_vectorSI self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSI_arg_max(self)


    def mean(self) -> "int":
        """mean(vnl_vectorSI self) -> int"""
        return _vnl_vectorPython.vnl_vectorSI_mean(self)


    def sum(self) -> "int":
        """sum(vnl_vectorSI self) -> int"""
        return _vnl_vectorPython.vnl_vectorSI_sum(self)


    def flip(self, *args) -> "vnl_vectorSI &":
        """
        flip(vnl_vectorSI self) -> vnl_vectorSI
        flip(vnl_vectorSI self, unsigned long long const & b, unsigned long long const & e) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI_flip(self, *args)


    def roll(self, shift: 'int const &') -> "vnl_vectorSI":
        """roll(vnl_vectorSI self, int const & shift) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI_roll(self, shift)


    def roll_inplace(self, shift: 'int const &') -> "vnl_vectorSI &":
        """roll_inplace(vnl_vectorSI self, int const & shift) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI_roll_inplace(self, shift)


    def swap(self, that: 'vnl_vectorSI') -> "void":
        """swap(vnl_vectorSI self, vnl_vectorSI that)"""
        return _vnl_vectorPython.vnl_vectorSI_swap(self, that)


    def assert_size(self, sz: 'unsigned long long') -> "void":
        """assert_size(vnl_vectorSI self, unsigned long long sz)"""
        return _vnl_vectorPython.vnl_vectorSI_assert_size(self, sz)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_vectorSI self)"""
        return _vnl_vectorPython.vnl_vectorSI_assert_finite(self)


    def is_finite(self) -> "bool":
        """is_finite(vnl_vectorSI self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI_is_finite(self)


    def is_zero(self) -> "bool":
        """is_zero(vnl_vectorSI self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI_is_zero(self)


    def empty(self) -> "bool":
        """empty(vnl_vectorSI self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI_empty(self)


    def is_equal(self, rhs: 'vnl_vectorSI', tol: 'double') -> "bool":
        """is_equal(vnl_vectorSI self, vnl_vectorSI rhs, double tol) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI_is_equal(self, rhs, tol)


    def operator_eq(self, v: 'vnl_vectorSI') -> "bool":
        """operator_eq(vnl_vectorSI self, vnl_vectorSI v) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI_operator_eq(self, v)


    def __eq__(self, that: 'vnl_vectorSI') -> "bool":
        """__eq__(vnl_vectorSI self, vnl_vectorSI that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI___eq__(self, that)


    def __ne__(self, that: 'vnl_vectorSI') -> "bool":
        """__ne__(vnl_vectorSI self, vnl_vectorSI that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI___ne__(self, that)


    def set_size(self, n: 'unsigned long long') -> "bool":
        """set_size(vnl_vectorSI self, unsigned long long n) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_vectorSI self)"""
        return _vnl_vectorPython.vnl_vectorSI_clear(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_vectorSI self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI_read_ascii(self, s)


    def read(s: 'istream') -> "vnl_vectorSI":
        """read(istream s) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI_read(s)

    read = staticmethod(read)
vnl_vectorSI.size = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_size, None, vnl_vectorSI)
vnl_vectorSI.put = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_put, None, vnl_vectorSI)
vnl_vectorSI.get = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_get, None, vnl_vectorSI)
vnl_vectorSI.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_fill, None, vnl_vectorSI)
vnl_vectorSI.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_copy_in, None, vnl_vectorSI)
vnl_vectorSI.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_copy_out, None, vnl_vectorSI)
vnl_vectorSI.set = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_set, None, vnl_vectorSI)
vnl_vectorSI.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___call__, None, vnl_vectorSI)
vnl_vectorSI.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___idiv__, None, vnl_vectorSI)
vnl_vectorSI.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___iadd__, None, vnl_vectorSI)
vnl_vectorSI.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___isub__, None, vnl_vectorSI)
vnl_vectorSI.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_pre_multiply, None, vnl_vectorSI)
vnl_vectorSI.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_post_multiply, None, vnl_vectorSI)
vnl_vectorSI.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___imul__, None, vnl_vectorSI)
vnl_vectorSI.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___pos__, None, vnl_vectorSI)
vnl_vectorSI.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___neg__, None, vnl_vectorSI)
vnl_vectorSI.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___div__, None, vnl_vectorSI)
vnl_vectorSI.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___add__, None, vnl_vectorSI)
vnl_vectorSI.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___sub__, None, vnl_vectorSI)
vnl_vectorSI.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___mul__, None, vnl_vectorSI)
vnl_vectorSI.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_data_block, None, vnl_vectorSI)
vnl_vectorSI.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_begin, None, vnl_vectorSI)
vnl_vectorSI.end = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_end, None, vnl_vectorSI)
vnl_vectorSI.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_extract, None, vnl_vectorSI)
vnl_vectorSI.update = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_update, None, vnl_vectorSI)
vnl_vectorSI.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_squared_magnitude, None, vnl_vectorSI)
vnl_vectorSI.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_magnitude, None, vnl_vectorSI)
vnl_vectorSI.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_one_norm, None, vnl_vectorSI)
vnl_vectorSI.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_two_norm, None, vnl_vectorSI)
vnl_vectorSI.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_inf_norm, None, vnl_vectorSI)
vnl_vectorSI.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_normalize, None, vnl_vectorSI)
vnl_vectorSI.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_rms, None, vnl_vectorSI)
vnl_vectorSI.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_min_value, None, vnl_vectorSI)
vnl_vectorSI.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_max_value, None, vnl_vectorSI)
vnl_vectorSI.arg_min = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_arg_min, None, vnl_vectorSI)
vnl_vectorSI.arg_max = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_arg_max, None, vnl_vectorSI)
vnl_vectorSI.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_mean, None, vnl_vectorSI)
vnl_vectorSI.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_sum, None, vnl_vectorSI)
vnl_vectorSI.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_flip, None, vnl_vectorSI)
vnl_vectorSI.roll = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_roll, None, vnl_vectorSI)
vnl_vectorSI.roll_inplace = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_roll_inplace, None, vnl_vectorSI)
vnl_vectorSI.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_swap, None, vnl_vectorSI)
vnl_vectorSI.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_assert_size, None, vnl_vectorSI)
vnl_vectorSI.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_assert_finite, None, vnl_vectorSI)
vnl_vectorSI.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_is_finite, None, vnl_vectorSI)
vnl_vectorSI.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_is_zero, None, vnl_vectorSI)
vnl_vectorSI.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_empty, None, vnl_vectorSI)
vnl_vectorSI.is_equal = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_is_equal, None, vnl_vectorSI)
vnl_vectorSI.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_operator_eq, None, vnl_vectorSI)
vnl_vectorSI.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___eq__, None, vnl_vectorSI)
vnl_vectorSI.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___ne__, None, vnl_vectorSI)
vnl_vectorSI.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_set_size, None, vnl_vectorSI)
vnl_vectorSI.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_clear, None, vnl_vectorSI)
vnl_vectorSI.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_read_ascii, None, vnl_vectorSI)
vnl_vectorSI_swigregister = _vnl_vectorPython.vnl_vectorSI_swigregister
vnl_vectorSI_swigregister(vnl_vectorSI)

def vnl_vectorSI_read(s: 'istream') -> "vnl_vectorSI":
    """vnl_vectorSI_read(istream s) -> vnl_vectorSI"""
    return _vnl_vectorPython.vnl_vectorSI_read(s)

class vnl_vectorSL(object):
    """Proxy of C++ vnl_vectorSL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vectorSL self) -> vnl_vectorSL
        __init__(vnl_vectorSL self, unsigned long long len) -> vnl_vectorSL
        __init__(vnl_vectorSL self, unsigned long long len, long const & v0) -> vnl_vectorSL
        __init__(vnl_vectorSL self, unsigned long long len, unsigned long long n, long const * values) -> vnl_vectorSL
        __init__(vnl_vectorSL self, long const * data_block, unsigned long long n) -> vnl_vectorSL
        __init__(vnl_vectorSL self, vnl_vectorSL arg0) -> vnl_vectorSL
        __init__(vnl_vectorSL self, vnl_vectorSL arg0, vnl_vectorSL arg1, vnl_tag_add arg2) -> vnl_vectorSL
        __init__(vnl_vectorSL self, vnl_vectorSL arg0, vnl_vectorSL arg1, vnl_tag_sub arg2) -> vnl_vectorSL
        __init__(vnl_vectorSL self, vnl_vectorSL arg0, long arg1, vnl_tag_mul arg2) -> vnl_vectorSL
        __init__(vnl_vectorSL self, vnl_vectorSL arg0, long arg1, vnl_tag_div arg2) -> vnl_vectorSL
        __init__(vnl_vectorSL self, vnl_vectorSL arg0, long arg1, vnl_tag_add arg2) -> vnl_vectorSL
        __init__(vnl_vectorSL self, vnl_vectorSL arg0, long arg1, vnl_tag_sub arg2) -> vnl_vectorSL
        __init__(vnl_vectorSL self, vnl_matrixSL arg0, vnl_vectorSL arg1, vnl_tag_mul arg2) -> vnl_vectorSL
        __init__(vnl_vectorSL self, vnl_vectorSL arg0, vnl_matrixSL arg1, vnl_tag_mul arg2) -> vnl_vectorSL
        __init__(vnl_vectorSL self, vnl_vectorSL that, vnl_tag_grab arg1) -> vnl_vectorSL
        """
        _vnl_vectorPython.vnl_vectorSL_swiginit(self, _vnl_vectorPython.new_vnl_vectorSL(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorSL

    def size(self) -> "unsigned long long":
        """size(vnl_vectorSL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSL_size(self)


    def put(self, i: 'unsigned long long', v: 'long const &') -> "void":
        """put(vnl_vectorSL self, unsigned long long i, long const & v)"""
        return _vnl_vectorPython.vnl_vectorSL_put(self, i, v)


    def get(self, i: 'unsigned long long') -> "long":
        """get(vnl_vectorSL self, unsigned long long i) -> long"""
        return _vnl_vectorPython.vnl_vectorSL_get(self, i)


    def fill(self, v: 'long const &') -> "vnl_vectorSL &":
        """fill(vnl_vectorSL self, long const & v) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL_fill(self, v)


    def copy_in(self, ptr: 'long const *') -> "vnl_vectorSL &":
        """copy_in(vnl_vectorSL self, long const * ptr) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL_copy_in(self, ptr)


    def copy_out(self, arg0: 'long *') -> "void":
        """copy_out(vnl_vectorSL self, long * arg0)"""
        return _vnl_vectorPython.vnl_vectorSL_copy_out(self, arg0)


    def set(self, ptr: 'long const *') -> "vnl_vectorSL &":
        """set(vnl_vectorSL self, long const * ptr) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL_set(self, ptr)


    def __call__(self, *args) -> "long const &":
        """
        __call__(vnl_vectorSL self, unsigned long long i) -> long
        __call__(vnl_vectorSL self, unsigned long long i) -> long const &
        """
        return _vnl_vectorPython.vnl_vectorSL___call__(self, *args)


    def __idiv__(self, arg0: 'long') -> "vnl_vectorSL &":
        """__idiv__(vnl_vectorSL self, long arg0) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL___idiv__(self, arg0)


    def __iadd__(self, *args) -> "vnl_vectorSL &":
        """
        __iadd__(vnl_vectorSL self, long arg0) -> vnl_vectorSL
        __iadd__(vnl_vectorSL self, vnl_vectorSL rhs) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_vectorSL &":
        """
        __isub__(vnl_vectorSL self, long value) -> vnl_vectorSL
        __isub__(vnl_vectorSL self, vnl_vectorSL rhs) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL___isub__(self, *args)


    def pre_multiply(self, M: 'vnl_matrixSL') -> "vnl_vectorSL &":
        """pre_multiply(vnl_vectorSL self, vnl_matrixSL M) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL_pre_multiply(self, M)


    def post_multiply(self, M: 'vnl_matrixSL') -> "vnl_vectorSL &":
        """post_multiply(vnl_vectorSL self, vnl_matrixSL M) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL_post_multiply(self, M)


    def __imul__(self, *args) -> "vnl_vectorSL &":
        """
        __imul__(vnl_vectorSL self, long arg0) -> vnl_vectorSL
        __imul__(vnl_vectorSL self, vnl_matrixSL m) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL___imul__(self, *args)


    def __pos__(self) -> "vnl_vectorSL":
        """__pos__(vnl_vectorSL self) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL___pos__(self)


    def __neg__(self) -> "vnl_vectorSL":
        """__neg__(vnl_vectorSL self) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL___neg__(self)


    def __div__(self, v: 'long') -> "vnl_vectorSL":
        """__div__(vnl_vectorSL self, long v) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL___div__(self, v)


    def __add__(self, *args) -> "vnl_vectorSL":
        """
        __add__(vnl_vectorSL self, long v) -> vnl_vectorSL
        __add__(vnl_vectorSL self, vnl_vectorSL v) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL___add__(self, *args)


    def __sub__(self, *args) -> "vnl_vectorSL":
        """
        __sub__(vnl_vectorSL self, long v) -> vnl_vectorSL
        __sub__(vnl_vectorSL self, vnl_vectorSL v) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_vectorSL":
        """
        __mul__(vnl_vectorSL self, long v) -> vnl_vectorSL
        __mul__(vnl_vectorSL self, vnl_matrixSL M) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL___mul__(self, *args)


    def data_block(self, *args) -> "long *":
        """
        data_block(vnl_vectorSL self) -> long const
        data_block(vnl_vectorSL self) -> long *
        """
        return _vnl_vectorPython.vnl_vectorSL_data_block(self, *args)


    def begin(self, *args) -> "long const *":
        """
        begin(vnl_vectorSL self) -> long
        begin(vnl_vectorSL self) -> long const *
        """
        return _vnl_vectorPython.vnl_vectorSL_begin(self, *args)


    def end(self, *args) -> "long const *":
        """
        end(vnl_vectorSL self) -> long
        end(vnl_vectorSL self) -> long const *
        """
        return _vnl_vectorPython.vnl_vectorSL_end(self, *args)


    def extract(self, len: 'unsigned long long', start: 'unsigned long long'=0) -> "vnl_vectorSL":
        """
        extract(vnl_vectorSL self, unsigned long long len, unsigned long long start=0) -> vnl_vectorSL
        extract(vnl_vectorSL self, unsigned long long len) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL_extract(self, len, start)


    def update(self, arg0: 'vnl_vectorSL', start: 'unsigned long long'=0) -> "vnl_vectorSL &":
        """
        update(vnl_vectorSL self, vnl_vectorSL arg0, unsigned long long start=0) -> vnl_vectorSL
        update(vnl_vectorSL self, vnl_vectorSL arg0) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL_update(self, arg0, start)


    def squared_magnitude(self) -> "unsigned long":
        """squared_magnitude(vnl_vectorSL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorSL_squared_magnitude(self)


    def magnitude(self) -> "unsigned long":
        """magnitude(vnl_vectorSL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorSL_magnitude(self)


    def one_norm(self) -> "unsigned long":
        """one_norm(vnl_vectorSL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorSL_one_norm(self)


    def two_norm(self) -> "unsigned long":
        """two_norm(vnl_vectorSL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorSL_two_norm(self)


    def inf_norm(self) -> "unsigned long":
        """inf_norm(vnl_vectorSL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorSL_inf_norm(self)


    def normalize(self) -> "vnl_vectorSL &":
        """normalize(vnl_vectorSL self) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL_normalize(self)


    def rms(self) -> "unsigned long":
        """rms(vnl_vectorSL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorSL_rms(self)


    def min_value(self) -> "long":
        """min_value(vnl_vectorSL self) -> long"""
        return _vnl_vectorPython.vnl_vectorSL_min_value(self)


    def max_value(self) -> "long":
        """max_value(vnl_vectorSL self) -> long"""
        return _vnl_vectorPython.vnl_vectorSL_max_value(self)


    def arg_min(self) -> "unsigned long long":
        """arg_min(vnl_vectorSL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSL_arg_min(self)


    def arg_max(self) -> "unsigned long long":
        """arg_max(vnl_vectorSL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSL_arg_max(self)


    def mean(self) -> "long":
        """mean(vnl_vectorSL self) -> long"""
        return _vnl_vectorPython.vnl_vectorSL_mean(self)


    def sum(self) -> "long":
        """sum(vnl_vectorSL self) -> long"""
        return _vnl_vectorPython.vnl_vectorSL_sum(self)


    def flip(self, *args) -> "vnl_vectorSL &":
        """
        flip(vnl_vectorSL self) -> vnl_vectorSL
        flip(vnl_vectorSL self, unsigned long long const & b, unsigned long long const & e) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL_flip(self, *args)


    def roll(self, shift: 'int const &') -> "vnl_vectorSL":
        """roll(vnl_vectorSL self, int const & shift) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL_roll(self, shift)


    def roll_inplace(self, shift: 'int const &') -> "vnl_vectorSL &":
        """roll_inplace(vnl_vectorSL self, int const & shift) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL_roll_inplace(self, shift)


    def swap(self, that: 'vnl_vectorSL') -> "void":
        """swap(vnl_vectorSL self, vnl_vectorSL that)"""
        return _vnl_vectorPython.vnl_vectorSL_swap(self, that)


    def assert_size(self, sz: 'unsigned long long') -> "void":
        """assert_size(vnl_vectorSL self, unsigned long long sz)"""
        return _vnl_vectorPython.vnl_vectorSL_assert_size(self, sz)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_vectorSL self)"""
        return _vnl_vectorPython.vnl_vectorSL_assert_finite(self)


    def is_finite(self) -> "bool":
        """is_finite(vnl_vectorSL self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL_is_finite(self)


    def is_zero(self) -> "bool":
        """is_zero(vnl_vectorSL self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL_is_zero(self)


    def empty(self) -> "bool":
        """empty(vnl_vectorSL self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL_empty(self)


    def is_equal(self, rhs: 'vnl_vectorSL', tol: 'double') -> "bool":
        """is_equal(vnl_vectorSL self, vnl_vectorSL rhs, double tol) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL_is_equal(self, rhs, tol)


    def operator_eq(self, v: 'vnl_vectorSL') -> "bool":
        """operator_eq(vnl_vectorSL self, vnl_vectorSL v) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL_operator_eq(self, v)


    def __eq__(self, that: 'vnl_vectorSL') -> "bool":
        """__eq__(vnl_vectorSL self, vnl_vectorSL that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL___eq__(self, that)


    def __ne__(self, that: 'vnl_vectorSL') -> "bool":
        """__ne__(vnl_vectorSL self, vnl_vectorSL that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL___ne__(self, that)


    def set_size(self, n: 'unsigned long long') -> "bool":
        """set_size(vnl_vectorSL self, unsigned long long n) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_vectorSL self)"""
        return _vnl_vectorPython.vnl_vectorSL_clear(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_vectorSL self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL_read_ascii(self, s)


    def read(s: 'istream') -> "vnl_vectorSL":
        """read(istream s) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL_read(s)

    read = staticmethod(read)
vnl_vectorSL.size = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_size, None, vnl_vectorSL)
vnl_vectorSL.put = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_put, None, vnl_vectorSL)
vnl_vectorSL.get = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_get, None, vnl_vectorSL)
vnl_vectorSL.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_fill, None, vnl_vectorSL)
vnl_vectorSL.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_copy_in, None, vnl_vectorSL)
vnl_vectorSL.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_copy_out, None, vnl_vectorSL)
vnl_vectorSL.set = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_set, None, vnl_vectorSL)
vnl_vectorSL.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___call__, None, vnl_vectorSL)
vnl_vectorSL.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___idiv__, None, vnl_vectorSL)
vnl_vectorSL.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___iadd__, None, vnl_vectorSL)
vnl_vectorSL.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___isub__, None, vnl_vectorSL)
vnl_vectorSL.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_pre_multiply, None, vnl_vectorSL)
vnl_vectorSL.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_post_multiply, None, vnl_vectorSL)
vnl_vectorSL.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___imul__, None, vnl_vectorSL)
vnl_vectorSL.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___pos__, None, vnl_vectorSL)
vnl_vectorSL.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___neg__, None, vnl_vectorSL)
vnl_vectorSL.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___div__, None, vnl_vectorSL)
vnl_vectorSL.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___add__, None, vnl_vectorSL)
vnl_vectorSL.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___sub__, None, vnl_vectorSL)
vnl_vectorSL.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___mul__, None, vnl_vectorSL)
vnl_vectorSL.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_data_block, None, vnl_vectorSL)
vnl_vectorSL.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_begin, None, vnl_vectorSL)
vnl_vectorSL.end = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_end, None, vnl_vectorSL)
vnl_vectorSL.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_extract, None, vnl_vectorSL)
vnl_vectorSL.update = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_update, None, vnl_vectorSL)
vnl_vectorSL.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_squared_magnitude, None, vnl_vectorSL)
vnl_vectorSL.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_magnitude, None, vnl_vectorSL)
vnl_vectorSL.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_one_norm, None, vnl_vectorSL)
vnl_vectorSL.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_two_norm, None, vnl_vectorSL)
vnl_vectorSL.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_inf_norm, None, vnl_vectorSL)
vnl_vectorSL.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_normalize, None, vnl_vectorSL)
vnl_vectorSL.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_rms, None, vnl_vectorSL)
vnl_vectorSL.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_min_value, None, vnl_vectorSL)
vnl_vectorSL.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_max_value, None, vnl_vectorSL)
vnl_vectorSL.arg_min = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_arg_min, None, vnl_vectorSL)
vnl_vectorSL.arg_max = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_arg_max, None, vnl_vectorSL)
vnl_vectorSL.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_mean, None, vnl_vectorSL)
vnl_vectorSL.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_sum, None, vnl_vectorSL)
vnl_vectorSL.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_flip, None, vnl_vectorSL)
vnl_vectorSL.roll = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_roll, None, vnl_vectorSL)
vnl_vectorSL.roll_inplace = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_roll_inplace, None, vnl_vectorSL)
vnl_vectorSL.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_swap, None, vnl_vectorSL)
vnl_vectorSL.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_assert_size, None, vnl_vectorSL)
vnl_vectorSL.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_assert_finite, None, vnl_vectorSL)
vnl_vectorSL.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_is_finite, None, vnl_vectorSL)
vnl_vectorSL.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_is_zero, None, vnl_vectorSL)
vnl_vectorSL.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_empty, None, vnl_vectorSL)
vnl_vectorSL.is_equal = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_is_equal, None, vnl_vectorSL)
vnl_vectorSL.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_operator_eq, None, vnl_vectorSL)
vnl_vectorSL.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___eq__, None, vnl_vectorSL)
vnl_vectorSL.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___ne__, None, vnl_vectorSL)
vnl_vectorSL.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_set_size, None, vnl_vectorSL)
vnl_vectorSL.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_clear, None, vnl_vectorSL)
vnl_vectorSL.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_read_ascii, None, vnl_vectorSL)
vnl_vectorSL_swigregister = _vnl_vectorPython.vnl_vectorSL_swigregister
vnl_vectorSL_swigregister(vnl_vectorSL)

def vnl_vectorSL_read(s: 'istream') -> "vnl_vectorSL":
    """vnl_vectorSL_read(istream s) -> vnl_vectorSL"""
    return _vnl_vectorPython.vnl_vectorSL_read(s)

class vnl_vectorSLL(object):
    """Proxy of C++ vnl_vectorSLL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vectorSLL self) -> vnl_vectorSLL
        __init__(vnl_vectorSLL self, unsigned long long len) -> vnl_vectorSLL
        __init__(vnl_vectorSLL self, unsigned long long len, long long const & v0) -> vnl_vectorSLL
        __init__(vnl_vectorSLL self, unsigned long long len, unsigned long long n, long long const * values) -> vnl_vectorSLL
        __init__(vnl_vectorSLL self, long long const * data_block, unsigned long long n) -> vnl_vectorSLL
        __init__(vnl_vectorSLL self, vnl_vectorSLL arg0) -> vnl_vectorSLL
        __init__(vnl_vectorSLL self, vnl_vectorSLL arg0, vnl_vectorSLL arg1, vnl_tag_add arg2) -> vnl_vectorSLL
        __init__(vnl_vectorSLL self, vnl_vectorSLL arg0, vnl_vectorSLL arg1, vnl_tag_sub arg2) -> vnl_vectorSLL
        __init__(vnl_vectorSLL self, vnl_vectorSLL arg0, long long arg1, vnl_tag_mul arg2) -> vnl_vectorSLL
        __init__(vnl_vectorSLL self, vnl_vectorSLL arg0, long long arg1, vnl_tag_div arg2) -> vnl_vectorSLL
        __init__(vnl_vectorSLL self, vnl_vectorSLL arg0, long long arg1, vnl_tag_add arg2) -> vnl_vectorSLL
        __init__(vnl_vectorSLL self, vnl_vectorSLL arg0, long long arg1, vnl_tag_sub arg2) -> vnl_vectorSLL
        __init__(vnl_vectorSLL self, vnl_matrixSLL arg0, vnl_vectorSLL arg1, vnl_tag_mul arg2) -> vnl_vectorSLL
        __init__(vnl_vectorSLL self, vnl_vectorSLL arg0, vnl_matrixSLL arg1, vnl_tag_mul arg2) -> vnl_vectorSLL
        __init__(vnl_vectorSLL self, vnl_vectorSLL that, vnl_tag_grab arg1) -> vnl_vectorSLL
        """
        _vnl_vectorPython.vnl_vectorSLL_swiginit(self, _vnl_vectorPython.new_vnl_vectorSLL(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorSLL

    def size(self) -> "unsigned long long":
        """size(vnl_vectorSLL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSLL_size(self)


    def put(self, i: 'unsigned long long', v: 'long long const &') -> "void":
        """put(vnl_vectorSLL self, unsigned long long i, long long const & v)"""
        return _vnl_vectorPython.vnl_vectorSLL_put(self, i, v)


    def get(self, i: 'unsigned long long') -> "long long":
        """get(vnl_vectorSLL self, unsigned long long i) -> long long"""
        return _vnl_vectorPython.vnl_vectorSLL_get(self, i)


    def fill(self, v: 'long long const &') -> "vnl_vectorSLL &":
        """fill(vnl_vectorSLL self, long long const & v) -> vnl_vectorSLL"""
        return _vnl_vectorPython.vnl_vectorSLL_fill(self, v)


    def copy_in(self, ptr: 'long long const *') -> "vnl_vectorSLL &":
        """copy_in(vnl_vectorSLL self, long long const * ptr) -> vnl_vectorSLL"""
        return _vnl_vectorPython.vnl_vectorSLL_copy_in(self, ptr)


    def copy_out(self, arg0: 'long long *') -> "void":
        """copy_out(vnl_vectorSLL self, long long * arg0)"""
        return _vnl_vectorPython.vnl_vectorSLL_copy_out(self, arg0)


    def set(self, ptr: 'long long const *') -> "vnl_vectorSLL &":
        """set(vnl_vectorSLL self, long long const * ptr) -> vnl_vectorSLL"""
        return _vnl_vectorPython.vnl_vectorSLL_set(self, ptr)


    def __call__(self, *args) -> "long long const &":
        """
        __call__(vnl_vectorSLL self, unsigned long long i) -> long long
        __call__(vnl_vectorSLL self, unsigned long long i) -> long long const &
        """
        return _vnl_vectorPython.vnl_vectorSLL___call__(self, *args)


    def __idiv__(self, arg0: 'long long') -> "vnl_vectorSLL &":
        """__idiv__(vnl_vectorSLL self, long long arg0) -> vnl_vectorSLL"""
        return _vnl_vectorPython.vnl_vectorSLL___idiv__(self, arg0)


    def __iadd__(self, *args) -> "vnl_vectorSLL &":
        """
        __iadd__(vnl_vectorSLL self, long long arg0) -> vnl_vectorSLL
        __iadd__(vnl_vectorSLL self, vnl_vectorSLL rhs) -> vnl_vectorSLL
        """
        return _vnl_vectorPython.vnl_vectorSLL___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_vectorSLL &":
        """
        __isub__(vnl_vectorSLL self, long long value) -> vnl_vectorSLL
        __isub__(vnl_vectorSLL self, vnl_vectorSLL rhs) -> vnl_vectorSLL
        """
        return _vnl_vectorPython.vnl_vectorSLL___isub__(self, *args)


    def pre_multiply(self, M: 'vnl_matrixSLL') -> "vnl_vectorSLL &":
        """pre_multiply(vnl_vectorSLL self, vnl_matrixSLL M) -> vnl_vectorSLL"""
        return _vnl_vectorPython.vnl_vectorSLL_pre_multiply(self, M)


    def post_multiply(self, M: 'vnl_matrixSLL') -> "vnl_vectorSLL &":
        """post_multiply(vnl_vectorSLL self, vnl_matrixSLL M) -> vnl_vectorSLL"""
        return _vnl_vectorPython.vnl_vectorSLL_post_multiply(self, M)


    def __imul__(self, *args) -> "vnl_vectorSLL &":
        """
        __imul__(vnl_vectorSLL self, long long arg0) -> vnl_vectorSLL
        __imul__(vnl_vectorSLL self, vnl_matrixSLL m) -> vnl_vectorSLL
        """
        return _vnl_vectorPython.vnl_vectorSLL___imul__(self, *args)


    def __pos__(self) -> "vnl_vectorSLL":
        """__pos__(vnl_vectorSLL self) -> vnl_vectorSLL"""
        return _vnl_vectorPython.vnl_vectorSLL___pos__(self)


    def __neg__(self) -> "vnl_vectorSLL":
        """__neg__(vnl_vectorSLL self) -> vnl_vectorSLL"""
        return _vnl_vectorPython.vnl_vectorSLL___neg__(self)


    def __div__(self, v: 'long long') -> "vnl_vectorSLL":
        """__div__(vnl_vectorSLL self, long long v) -> vnl_vectorSLL"""
        return _vnl_vectorPython.vnl_vectorSLL___div__(self, v)


    def __add__(self, *args) -> "vnl_vectorSLL":
        """
        __add__(vnl_vectorSLL self, long long v) -> vnl_vectorSLL
        __add__(vnl_vectorSLL self, vnl_vectorSLL v) -> vnl_vectorSLL
        """
        return _vnl_vectorPython.vnl_vectorSLL___add__(self, *args)


    def __sub__(self, *args) -> "vnl_vectorSLL":
        """
        __sub__(vnl_vectorSLL self, long long v) -> vnl_vectorSLL
        __sub__(vnl_vectorSLL self, vnl_vectorSLL v) -> vnl_vectorSLL
        """
        return _vnl_vectorPython.vnl_vectorSLL___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_vectorSLL":
        """
        __mul__(vnl_vectorSLL self, long long v) -> vnl_vectorSLL
        __mul__(vnl_vectorSLL self, vnl_matrixSLL M) -> vnl_vectorSLL
        """
        return _vnl_vectorPython.vnl_vectorSLL___mul__(self, *args)


    def data_block(self, *args) -> "long long *":
        """
        data_block(vnl_vectorSLL self) -> long long const
        data_block(vnl_vectorSLL self) -> long long *
        """
        return _vnl_vectorPython.vnl_vectorSLL_data_block(self, *args)


    def begin(self, *args) -> "long long const *":
        """
        begin(vnl_vectorSLL self) -> long long
        begin(vnl_vectorSLL self) -> long long const *
        """
        return _vnl_vectorPython.vnl_vectorSLL_begin(self, *args)


    def end(self, *args) -> "long long const *":
        """
        end(vnl_vectorSLL self) -> long long
        end(vnl_vectorSLL self) -> long long const *
        """
        return _vnl_vectorPython.vnl_vectorSLL_end(self, *args)


    def extract(self, len: 'unsigned long long', start: 'unsigned long long'=0) -> "vnl_vectorSLL":
        """
        extract(vnl_vectorSLL self, unsigned long long len, unsigned long long start=0) -> vnl_vectorSLL
        extract(vnl_vectorSLL self, unsigned long long len) -> vnl_vectorSLL
        """
        return _vnl_vectorPython.vnl_vectorSLL_extract(self, len, start)


    def update(self, arg0: 'vnl_vectorSLL', start: 'unsigned long long'=0) -> "vnl_vectorSLL &":
        """
        update(vnl_vectorSLL self, vnl_vectorSLL arg0, unsigned long long start=0) -> vnl_vectorSLL
        update(vnl_vectorSLL self, vnl_vectorSLL arg0) -> vnl_vectorSLL
        """
        return _vnl_vectorPython.vnl_vectorSLL_update(self, arg0, start)


    def squared_magnitude(self) -> "unsigned long long":
        """squared_magnitude(vnl_vectorSLL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSLL_squared_magnitude(self)


    def magnitude(self) -> "unsigned long long":
        """magnitude(vnl_vectorSLL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSLL_magnitude(self)


    def one_norm(self) -> "unsigned long long":
        """one_norm(vnl_vectorSLL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSLL_one_norm(self)


    def two_norm(self) -> "unsigned long long":
        """two_norm(vnl_vectorSLL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSLL_two_norm(self)


    def inf_norm(self) -> "unsigned long long":
        """inf_norm(vnl_vectorSLL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSLL_inf_norm(self)


    def normalize(self) -> "vnl_vectorSLL &":
        """normalize(vnl_vectorSLL self) -> vnl_vectorSLL"""
        return _vnl_vectorPython.vnl_vectorSLL_normalize(self)


    def rms(self) -> "unsigned long long":
        """rms(vnl_vectorSLL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSLL_rms(self)


    def min_value(self) -> "long long":
        """min_value(vnl_vectorSLL self) -> long long"""
        return _vnl_vectorPython.vnl_vectorSLL_min_value(self)


    def max_value(self) -> "long long":
        """max_value(vnl_vectorSLL self) -> long long"""
        return _vnl_vectorPython.vnl_vectorSLL_max_value(self)


    def arg_min(self) -> "unsigned long long":
        """arg_min(vnl_vectorSLL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSLL_arg_min(self)


    def arg_max(self) -> "unsigned long long":
        """arg_max(vnl_vectorSLL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSLL_arg_max(self)


    def mean(self) -> "long long":
        """mean(vnl_vectorSLL self) -> long long"""
        return _vnl_vectorPython.vnl_vectorSLL_mean(self)


    def sum(self) -> "long long":
        """sum(vnl_vectorSLL self) -> long long"""
        return _vnl_vectorPython.vnl_vectorSLL_sum(self)


    def flip(self, *args) -> "vnl_vectorSLL &":
        """
        flip(vnl_vectorSLL self) -> vnl_vectorSLL
        flip(vnl_vectorSLL self, unsigned long long const & b, unsigned long long const & e) -> vnl_vectorSLL
        """
        return _vnl_vectorPython.vnl_vectorSLL_flip(self, *args)


    def roll(self, shift: 'int const &') -> "vnl_vectorSLL":
        """roll(vnl_vectorSLL self, int const & shift) -> vnl_vectorSLL"""
        return _vnl_vectorPython.vnl_vectorSLL_roll(self, shift)


    def roll_inplace(self, shift: 'int const &') -> "vnl_vectorSLL &":
        """roll_inplace(vnl_vectorSLL self, int const & shift) -> vnl_vectorSLL"""
        return _vnl_vectorPython.vnl_vectorSLL_roll_inplace(self, shift)


    def swap(self, that: 'vnl_vectorSLL') -> "void":
        """swap(vnl_vectorSLL self, vnl_vectorSLL that)"""
        return _vnl_vectorPython.vnl_vectorSLL_swap(self, that)


    def assert_size(self, sz: 'unsigned long long') -> "void":
        """assert_size(vnl_vectorSLL self, unsigned long long sz)"""
        return _vnl_vectorPython.vnl_vectorSLL_assert_size(self, sz)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_vectorSLL self)"""
        return _vnl_vectorPython.vnl_vectorSLL_assert_finite(self)


    def is_finite(self) -> "bool":
        """is_finite(vnl_vectorSLL self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSLL_is_finite(self)


    def is_zero(self) -> "bool":
        """is_zero(vnl_vectorSLL self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSLL_is_zero(self)


    def empty(self) -> "bool":
        """empty(vnl_vectorSLL self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSLL_empty(self)


    def is_equal(self, rhs: 'vnl_vectorSLL', tol: 'double') -> "bool":
        """is_equal(vnl_vectorSLL self, vnl_vectorSLL rhs, double tol) -> bool"""
        return _vnl_vectorPython.vnl_vectorSLL_is_equal(self, rhs, tol)


    def operator_eq(self, v: 'vnl_vectorSLL') -> "bool":
        """operator_eq(vnl_vectorSLL self, vnl_vectorSLL v) -> bool"""
        return _vnl_vectorPython.vnl_vectorSLL_operator_eq(self, v)


    def __eq__(self, that: 'vnl_vectorSLL') -> "bool":
        """__eq__(vnl_vectorSLL self, vnl_vectorSLL that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSLL___eq__(self, that)


    def __ne__(self, that: 'vnl_vectorSLL') -> "bool":
        """__ne__(vnl_vectorSLL self, vnl_vectorSLL that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSLL___ne__(self, that)


    def set_size(self, n: 'unsigned long long') -> "bool":
        """set_size(vnl_vectorSLL self, unsigned long long n) -> bool"""
        return _vnl_vectorPython.vnl_vectorSLL_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_vectorSLL self)"""
        return _vnl_vectorPython.vnl_vectorSLL_clear(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_vectorSLL self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorSLL_read_ascii(self, s)


    def read(s: 'istream') -> "vnl_vectorSLL":
        """read(istream s) -> vnl_vectorSLL"""
        return _vnl_vectorPython.vnl_vectorSLL_read(s)

    read = staticmethod(read)
vnl_vectorSLL.size = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_size, None, vnl_vectorSLL)
vnl_vectorSLL.put = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_put, None, vnl_vectorSLL)
vnl_vectorSLL.get = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_get, None, vnl_vectorSLL)
vnl_vectorSLL.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_fill, None, vnl_vectorSLL)
vnl_vectorSLL.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_copy_in, None, vnl_vectorSLL)
vnl_vectorSLL.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_copy_out, None, vnl_vectorSLL)
vnl_vectorSLL.set = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_set, None, vnl_vectorSLL)
vnl_vectorSLL.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL___call__, None, vnl_vectorSLL)
vnl_vectorSLL.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL___idiv__, None, vnl_vectorSLL)
vnl_vectorSLL.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL___iadd__, None, vnl_vectorSLL)
vnl_vectorSLL.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL___isub__, None, vnl_vectorSLL)
vnl_vectorSLL.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_pre_multiply, None, vnl_vectorSLL)
vnl_vectorSLL.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_post_multiply, None, vnl_vectorSLL)
vnl_vectorSLL.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL___imul__, None, vnl_vectorSLL)
vnl_vectorSLL.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL___pos__, None, vnl_vectorSLL)
vnl_vectorSLL.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL___neg__, None, vnl_vectorSLL)
vnl_vectorSLL.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL___div__, None, vnl_vectorSLL)
vnl_vectorSLL.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL___add__, None, vnl_vectorSLL)
vnl_vectorSLL.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL___sub__, None, vnl_vectorSLL)
vnl_vectorSLL.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL___mul__, None, vnl_vectorSLL)
vnl_vectorSLL.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_data_block, None, vnl_vectorSLL)
vnl_vectorSLL.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_begin, None, vnl_vectorSLL)
vnl_vectorSLL.end = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_end, None, vnl_vectorSLL)
vnl_vectorSLL.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_extract, None, vnl_vectorSLL)
vnl_vectorSLL.update = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_update, None, vnl_vectorSLL)
vnl_vectorSLL.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_squared_magnitude, None, vnl_vectorSLL)
vnl_vectorSLL.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_magnitude, None, vnl_vectorSLL)
vnl_vectorSLL.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_one_norm, None, vnl_vectorSLL)
vnl_vectorSLL.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_two_norm, None, vnl_vectorSLL)
vnl_vectorSLL.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_inf_norm, None, vnl_vectorSLL)
vnl_vectorSLL.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_normalize, None, vnl_vectorSLL)
vnl_vectorSLL.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_rms, None, vnl_vectorSLL)
vnl_vectorSLL.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_min_value, None, vnl_vectorSLL)
vnl_vectorSLL.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_max_value, None, vnl_vectorSLL)
vnl_vectorSLL.arg_min = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_arg_min, None, vnl_vectorSLL)
vnl_vectorSLL.arg_max = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_arg_max, None, vnl_vectorSLL)
vnl_vectorSLL.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_mean, None, vnl_vectorSLL)
vnl_vectorSLL.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_sum, None, vnl_vectorSLL)
vnl_vectorSLL.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_flip, None, vnl_vectorSLL)
vnl_vectorSLL.roll = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_roll, None, vnl_vectorSLL)
vnl_vectorSLL.roll_inplace = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_roll_inplace, None, vnl_vectorSLL)
vnl_vectorSLL.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_swap, None, vnl_vectorSLL)
vnl_vectorSLL.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_assert_size, None, vnl_vectorSLL)
vnl_vectorSLL.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_assert_finite, None, vnl_vectorSLL)
vnl_vectorSLL.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_is_finite, None, vnl_vectorSLL)
vnl_vectorSLL.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_is_zero, None, vnl_vectorSLL)
vnl_vectorSLL.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_empty, None, vnl_vectorSLL)
vnl_vectorSLL.is_equal = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_is_equal, None, vnl_vectorSLL)
vnl_vectorSLL.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_operator_eq, None, vnl_vectorSLL)
vnl_vectorSLL.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL___eq__, None, vnl_vectorSLL)
vnl_vectorSLL.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL___ne__, None, vnl_vectorSLL)
vnl_vectorSLL.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_set_size, None, vnl_vectorSLL)
vnl_vectorSLL.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_clear, None, vnl_vectorSLL)
vnl_vectorSLL.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorSLL_read_ascii, None, vnl_vectorSLL)
vnl_vectorSLL_swigregister = _vnl_vectorPython.vnl_vectorSLL_swigregister
vnl_vectorSLL_swigregister(vnl_vectorSLL)

def vnl_vectorSLL_read(s: 'istream') -> "vnl_vectorSLL":
    """vnl_vectorSLL_read(istream s) -> vnl_vectorSLL"""
    return _vnl_vectorPython.vnl_vectorSLL_read(s)

class vnl_vectorSS(object):
    """Proxy of C++ vnl_vectorSS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vectorSS self) -> vnl_vectorSS
        __init__(vnl_vectorSS self, unsigned long long len) -> vnl_vectorSS
        __init__(vnl_vectorSS self, unsigned long long len, short const & v0) -> vnl_vectorSS
        __init__(vnl_vectorSS self, unsigned long long len, unsigned long long n, short const * values) -> vnl_vectorSS
        __init__(vnl_vectorSS self, short const * data_block, unsigned long long n) -> vnl_vectorSS
        __init__(vnl_vectorSS self, vnl_vectorSS arg0) -> vnl_vectorSS
        __init__(vnl_vectorSS self, vnl_vectorSS arg0, vnl_vectorSS arg1, vnl_tag_add arg2) -> vnl_vectorSS
        __init__(vnl_vectorSS self, vnl_vectorSS arg0, vnl_vectorSS arg1, vnl_tag_sub arg2) -> vnl_vectorSS
        __init__(vnl_vectorSS self, vnl_vectorSS arg0, short arg1, vnl_tag_mul arg2) -> vnl_vectorSS
        __init__(vnl_vectorSS self, vnl_vectorSS arg0, short arg1, vnl_tag_div arg2) -> vnl_vectorSS
        __init__(vnl_vectorSS self, vnl_vectorSS arg0, short arg1, vnl_tag_add arg2) -> vnl_vectorSS
        __init__(vnl_vectorSS self, vnl_vectorSS arg0, short arg1, vnl_tag_sub arg2) -> vnl_vectorSS
        __init__(vnl_vectorSS self, vnl_matrixSS arg0, vnl_vectorSS arg1, vnl_tag_mul arg2) -> vnl_vectorSS
        __init__(vnl_vectorSS self, vnl_vectorSS arg0, vnl_matrixSS arg1, vnl_tag_mul arg2) -> vnl_vectorSS
        __init__(vnl_vectorSS self, vnl_vectorSS that, vnl_tag_grab arg1) -> vnl_vectorSS
        """
        _vnl_vectorPython.vnl_vectorSS_swiginit(self, _vnl_vectorPython.new_vnl_vectorSS(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorSS

    def size(self) -> "unsigned long long":
        """size(vnl_vectorSS self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSS_size(self)


    def put(self, i: 'unsigned long long', v: 'short const &') -> "void":
        """put(vnl_vectorSS self, unsigned long long i, short const & v)"""
        return _vnl_vectorPython.vnl_vectorSS_put(self, i, v)


    def get(self, i: 'unsigned long long') -> "short":
        """get(vnl_vectorSS self, unsigned long long i) -> short"""
        return _vnl_vectorPython.vnl_vectorSS_get(self, i)


    def fill(self, v: 'short const &') -> "vnl_vectorSS &":
        """fill(vnl_vectorSS self, short const & v) -> vnl_vectorSS"""
        return _vnl_vectorPython.vnl_vectorSS_fill(self, v)


    def copy_in(self, ptr: 'short const *') -> "vnl_vectorSS &":
        """copy_in(vnl_vectorSS self, short const * ptr) -> vnl_vectorSS"""
        return _vnl_vectorPython.vnl_vectorSS_copy_in(self, ptr)


    def copy_out(self, arg0: 'short *') -> "void":
        """copy_out(vnl_vectorSS self, short * arg0)"""
        return _vnl_vectorPython.vnl_vectorSS_copy_out(self, arg0)


    def set(self, ptr: 'short const *') -> "vnl_vectorSS &":
        """set(vnl_vectorSS self, short const * ptr) -> vnl_vectorSS"""
        return _vnl_vectorPython.vnl_vectorSS_set(self, ptr)


    def __call__(self, *args) -> "short const &":
        """
        __call__(vnl_vectorSS self, unsigned long long i) -> short
        __call__(vnl_vectorSS self, unsigned long long i) -> short const &
        """
        return _vnl_vectorPython.vnl_vectorSS___call__(self, *args)


    def __idiv__(self, arg0: 'short') -> "vnl_vectorSS &":
        """__idiv__(vnl_vectorSS self, short arg0) -> vnl_vectorSS"""
        return _vnl_vectorPython.vnl_vectorSS___idiv__(self, arg0)


    def __iadd__(self, *args) -> "vnl_vectorSS &":
        """
        __iadd__(vnl_vectorSS self, short arg0) -> vnl_vectorSS
        __iadd__(vnl_vectorSS self, vnl_vectorSS rhs) -> vnl_vectorSS
        """
        return _vnl_vectorPython.vnl_vectorSS___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_vectorSS &":
        """
        __isub__(vnl_vectorSS self, short value) -> vnl_vectorSS
        __isub__(vnl_vectorSS self, vnl_vectorSS rhs) -> vnl_vectorSS
        """
        return _vnl_vectorPython.vnl_vectorSS___isub__(self, *args)


    def pre_multiply(self, M: 'vnl_matrixSS') -> "vnl_vectorSS &":
        """pre_multiply(vnl_vectorSS self, vnl_matrixSS M) -> vnl_vectorSS"""
        return _vnl_vectorPython.vnl_vectorSS_pre_multiply(self, M)


    def post_multiply(self, M: 'vnl_matrixSS') -> "vnl_vectorSS &":
        """post_multiply(vnl_vectorSS self, vnl_matrixSS M) -> vnl_vectorSS"""
        return _vnl_vectorPython.vnl_vectorSS_post_multiply(self, M)


    def __imul__(self, *args) -> "vnl_vectorSS &":
        """
        __imul__(vnl_vectorSS self, short arg0) -> vnl_vectorSS
        __imul__(vnl_vectorSS self, vnl_matrixSS m) -> vnl_vectorSS
        """
        return _vnl_vectorPython.vnl_vectorSS___imul__(self, *args)


    def __pos__(self) -> "vnl_vectorSS":
        """__pos__(vnl_vectorSS self) -> vnl_vectorSS"""
        return _vnl_vectorPython.vnl_vectorSS___pos__(self)


    def __neg__(self) -> "vnl_vectorSS":
        """__neg__(vnl_vectorSS self) -> vnl_vectorSS"""
        return _vnl_vectorPython.vnl_vectorSS___neg__(self)


    def __div__(self, v: 'short') -> "vnl_vectorSS":
        """__div__(vnl_vectorSS self, short v) -> vnl_vectorSS"""
        return _vnl_vectorPython.vnl_vectorSS___div__(self, v)


    def __add__(self, *args) -> "vnl_vectorSS":
        """
        __add__(vnl_vectorSS self, short v) -> vnl_vectorSS
        __add__(vnl_vectorSS self, vnl_vectorSS v) -> vnl_vectorSS
        """
        return _vnl_vectorPython.vnl_vectorSS___add__(self, *args)


    def __sub__(self, *args) -> "vnl_vectorSS":
        """
        __sub__(vnl_vectorSS self, short v) -> vnl_vectorSS
        __sub__(vnl_vectorSS self, vnl_vectorSS v) -> vnl_vectorSS
        """
        return _vnl_vectorPython.vnl_vectorSS___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_vectorSS":
        """
        __mul__(vnl_vectorSS self, short v) -> vnl_vectorSS
        __mul__(vnl_vectorSS self, vnl_matrixSS M) -> vnl_vectorSS
        """
        return _vnl_vectorPython.vnl_vectorSS___mul__(self, *args)


    def data_block(self, *args) -> "short *":
        """
        data_block(vnl_vectorSS self) -> short const
        data_block(vnl_vectorSS self) -> short *
        """
        return _vnl_vectorPython.vnl_vectorSS_data_block(self, *args)


    def begin(self, *args) -> "short const *":
        """
        begin(vnl_vectorSS self) -> short
        begin(vnl_vectorSS self) -> short const *
        """
        return _vnl_vectorPython.vnl_vectorSS_begin(self, *args)


    def end(self, *args) -> "short const *":
        """
        end(vnl_vectorSS self) -> short
        end(vnl_vectorSS self) -> short const *
        """
        return _vnl_vectorPython.vnl_vectorSS_end(self, *args)


    def extract(self, len: 'unsigned long long', start: 'unsigned long long'=0) -> "vnl_vectorSS":
        """
        extract(vnl_vectorSS self, unsigned long long len, unsigned long long start=0) -> vnl_vectorSS
        extract(vnl_vectorSS self, unsigned long long len) -> vnl_vectorSS
        """
        return _vnl_vectorPython.vnl_vectorSS_extract(self, len, start)


    def update(self, arg0: 'vnl_vectorSS', start: 'unsigned long long'=0) -> "vnl_vectorSS &":
        """
        update(vnl_vectorSS self, vnl_vectorSS arg0, unsigned long long start=0) -> vnl_vectorSS
        update(vnl_vectorSS self, vnl_vectorSS arg0) -> vnl_vectorSS
        """
        return _vnl_vectorPython.vnl_vectorSS_update(self, arg0, start)


    def squared_magnitude(self) -> "unsigned short":
        """squared_magnitude(vnl_vectorSS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorSS_squared_magnitude(self)


    def magnitude(self) -> "unsigned short":
        """magnitude(vnl_vectorSS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorSS_magnitude(self)


    def one_norm(self) -> "unsigned short":
        """one_norm(vnl_vectorSS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorSS_one_norm(self)


    def two_norm(self) -> "unsigned short":
        """two_norm(vnl_vectorSS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorSS_two_norm(self)


    def inf_norm(self) -> "unsigned short":
        """inf_norm(vnl_vectorSS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorSS_inf_norm(self)


    def normalize(self) -> "vnl_vectorSS &":
        """normalize(vnl_vectorSS self) -> vnl_vectorSS"""
        return _vnl_vectorPython.vnl_vectorSS_normalize(self)


    def rms(self) -> "unsigned short":
        """rms(vnl_vectorSS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorSS_rms(self)


    def min_value(self) -> "short":
        """min_value(vnl_vectorSS self) -> short"""
        return _vnl_vectorPython.vnl_vectorSS_min_value(self)


    def max_value(self) -> "short":
        """max_value(vnl_vectorSS self) -> short"""
        return _vnl_vectorPython.vnl_vectorSS_max_value(self)


    def arg_min(self) -> "unsigned long long":
        """arg_min(vnl_vectorSS self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSS_arg_min(self)


    def arg_max(self) -> "unsigned long long":
        """arg_max(vnl_vectorSS self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorSS_arg_max(self)


    def mean(self) -> "short":
        """mean(vnl_vectorSS self) -> short"""
        return _vnl_vectorPython.vnl_vectorSS_mean(self)


    def sum(self) -> "short":
        """sum(vnl_vectorSS self) -> short"""
        return _vnl_vectorPython.vnl_vectorSS_sum(self)


    def flip(self, *args) -> "vnl_vectorSS &":
        """
        flip(vnl_vectorSS self) -> vnl_vectorSS
        flip(vnl_vectorSS self, unsigned long long const & b, unsigned long long const & e) -> vnl_vectorSS
        """
        return _vnl_vectorPython.vnl_vectorSS_flip(self, *args)


    def roll(self, shift: 'int const &') -> "vnl_vectorSS":
        """roll(vnl_vectorSS self, int const & shift) -> vnl_vectorSS"""
        return _vnl_vectorPython.vnl_vectorSS_roll(self, shift)


    def roll_inplace(self, shift: 'int const &') -> "vnl_vectorSS &":
        """roll_inplace(vnl_vectorSS self, int const & shift) -> vnl_vectorSS"""
        return _vnl_vectorPython.vnl_vectorSS_roll_inplace(self, shift)


    def swap(self, that: 'vnl_vectorSS') -> "void":
        """swap(vnl_vectorSS self, vnl_vectorSS that)"""
        return _vnl_vectorPython.vnl_vectorSS_swap(self, that)


    def assert_size(self, sz: 'unsigned long long') -> "void":
        """assert_size(vnl_vectorSS self, unsigned long long sz)"""
        return _vnl_vectorPython.vnl_vectorSS_assert_size(self, sz)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_vectorSS self)"""
        return _vnl_vectorPython.vnl_vectorSS_assert_finite(self)


    def is_finite(self) -> "bool":
        """is_finite(vnl_vectorSS self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSS_is_finite(self)


    def is_zero(self) -> "bool":
        """is_zero(vnl_vectorSS self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSS_is_zero(self)


    def empty(self) -> "bool":
        """empty(vnl_vectorSS self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSS_empty(self)


    def is_equal(self, rhs: 'vnl_vectorSS', tol: 'double') -> "bool":
        """is_equal(vnl_vectorSS self, vnl_vectorSS rhs, double tol) -> bool"""
        return _vnl_vectorPython.vnl_vectorSS_is_equal(self, rhs, tol)


    def operator_eq(self, v: 'vnl_vectorSS') -> "bool":
        """operator_eq(vnl_vectorSS self, vnl_vectorSS v) -> bool"""
        return _vnl_vectorPython.vnl_vectorSS_operator_eq(self, v)


    def __eq__(self, that: 'vnl_vectorSS') -> "bool":
        """__eq__(vnl_vectorSS self, vnl_vectorSS that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSS___eq__(self, that)


    def __ne__(self, that: 'vnl_vectorSS') -> "bool":
        """__ne__(vnl_vectorSS self, vnl_vectorSS that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSS___ne__(self, that)


    def set_size(self, n: 'unsigned long long') -> "bool":
        """set_size(vnl_vectorSS self, unsigned long long n) -> bool"""
        return _vnl_vectorPython.vnl_vectorSS_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_vectorSS self)"""
        return _vnl_vectorPython.vnl_vectorSS_clear(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_vectorSS self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorSS_read_ascii(self, s)


    def read(s: 'istream') -> "vnl_vectorSS":
        """read(istream s) -> vnl_vectorSS"""
        return _vnl_vectorPython.vnl_vectorSS_read(s)

    read = staticmethod(read)
vnl_vectorSS.size = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_size, None, vnl_vectorSS)
vnl_vectorSS.put = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_put, None, vnl_vectorSS)
vnl_vectorSS.get = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_get, None, vnl_vectorSS)
vnl_vectorSS.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_fill, None, vnl_vectorSS)
vnl_vectorSS.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_copy_in, None, vnl_vectorSS)
vnl_vectorSS.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_copy_out, None, vnl_vectorSS)
vnl_vectorSS.set = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_set, None, vnl_vectorSS)
vnl_vectorSS.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSS___call__, None, vnl_vectorSS)
vnl_vectorSS.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSS___idiv__, None, vnl_vectorSS)
vnl_vectorSS.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSS___iadd__, None, vnl_vectorSS)
vnl_vectorSS.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSS___isub__, None, vnl_vectorSS)
vnl_vectorSS.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_pre_multiply, None, vnl_vectorSS)
vnl_vectorSS.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_post_multiply, None, vnl_vectorSS)
vnl_vectorSS.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSS___imul__, None, vnl_vectorSS)
vnl_vectorSS.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSS___pos__, None, vnl_vectorSS)
vnl_vectorSS.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSS___neg__, None, vnl_vectorSS)
vnl_vectorSS.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSS___div__, None, vnl_vectorSS)
vnl_vectorSS.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSS___add__, None, vnl_vectorSS)
vnl_vectorSS.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSS___sub__, None, vnl_vectorSS)
vnl_vectorSS.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSS___mul__, None, vnl_vectorSS)
vnl_vectorSS.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_data_block, None, vnl_vectorSS)
vnl_vectorSS.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_begin, None, vnl_vectorSS)
vnl_vectorSS.end = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_end, None, vnl_vectorSS)
vnl_vectorSS.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_extract, None, vnl_vectorSS)
vnl_vectorSS.update = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_update, None, vnl_vectorSS)
vnl_vectorSS.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_squared_magnitude, None, vnl_vectorSS)
vnl_vectorSS.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_magnitude, None, vnl_vectorSS)
vnl_vectorSS.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_one_norm, None, vnl_vectorSS)
vnl_vectorSS.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_two_norm, None, vnl_vectorSS)
vnl_vectorSS.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_inf_norm, None, vnl_vectorSS)
vnl_vectorSS.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_normalize, None, vnl_vectorSS)
vnl_vectorSS.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_rms, None, vnl_vectorSS)
vnl_vectorSS.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_min_value, None, vnl_vectorSS)
vnl_vectorSS.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_max_value, None, vnl_vectorSS)
vnl_vectorSS.arg_min = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_arg_min, None, vnl_vectorSS)
vnl_vectorSS.arg_max = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_arg_max, None, vnl_vectorSS)
vnl_vectorSS.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_mean, None, vnl_vectorSS)
vnl_vectorSS.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_sum, None, vnl_vectorSS)
vnl_vectorSS.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_flip, None, vnl_vectorSS)
vnl_vectorSS.roll = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_roll, None, vnl_vectorSS)
vnl_vectorSS.roll_inplace = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_roll_inplace, None, vnl_vectorSS)
vnl_vectorSS.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_swap, None, vnl_vectorSS)
vnl_vectorSS.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_assert_size, None, vnl_vectorSS)
vnl_vectorSS.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_assert_finite, None, vnl_vectorSS)
vnl_vectorSS.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_is_finite, None, vnl_vectorSS)
vnl_vectorSS.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_is_zero, None, vnl_vectorSS)
vnl_vectorSS.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_empty, None, vnl_vectorSS)
vnl_vectorSS.is_equal = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_is_equal, None, vnl_vectorSS)
vnl_vectorSS.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_operator_eq, None, vnl_vectorSS)
vnl_vectorSS.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSS___eq__, None, vnl_vectorSS)
vnl_vectorSS.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSS___ne__, None, vnl_vectorSS)
vnl_vectorSS.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_set_size, None, vnl_vectorSS)
vnl_vectorSS.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_clear, None, vnl_vectorSS)
vnl_vectorSS.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorSS_read_ascii, None, vnl_vectorSS)
vnl_vectorSS_swigregister = _vnl_vectorPython.vnl_vectorSS_swigregister
vnl_vectorSS_swigregister(vnl_vectorSS)

def vnl_vectorSS_read(s: 'istream') -> "vnl_vectorSS":
    """vnl_vectorSS_read(istream s) -> vnl_vectorSS"""
    return _vnl_vectorPython.vnl_vectorSS_read(s)

class vnl_vectorUC(object):
    """Proxy of C++ vnl_vectorUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vectorUC self) -> vnl_vectorUC
        __init__(vnl_vectorUC self, unsigned long long len) -> vnl_vectorUC
        __init__(vnl_vectorUC self, unsigned long long len, unsigned char const & v0) -> vnl_vectorUC
        __init__(vnl_vectorUC self, unsigned long long len, unsigned long long n, unsigned char const * values) -> vnl_vectorUC
        __init__(vnl_vectorUC self, unsigned char const * data_block, unsigned long long n) -> vnl_vectorUC
        __init__(vnl_vectorUC self, vnl_vectorUC arg0) -> vnl_vectorUC
        __init__(vnl_vectorUC self, vnl_vectorUC arg0, vnl_vectorUC arg1, vnl_tag_add arg2) -> vnl_vectorUC
        __init__(vnl_vectorUC self, vnl_vectorUC arg0, vnl_vectorUC arg1, vnl_tag_sub arg2) -> vnl_vectorUC
        __init__(vnl_vectorUC self, vnl_vectorUC arg0, unsigned char arg1, vnl_tag_mul arg2) -> vnl_vectorUC
        __init__(vnl_vectorUC self, vnl_vectorUC arg0, unsigned char arg1, vnl_tag_div arg2) -> vnl_vectorUC
        __init__(vnl_vectorUC self, vnl_vectorUC arg0, unsigned char arg1, vnl_tag_add arg2) -> vnl_vectorUC
        __init__(vnl_vectorUC self, vnl_vectorUC arg0, unsigned char arg1, vnl_tag_sub arg2) -> vnl_vectorUC
        __init__(vnl_vectorUC self, vnl_matrixUC arg0, vnl_vectorUC arg1, vnl_tag_mul arg2) -> vnl_vectorUC
        __init__(vnl_vectorUC self, vnl_vectorUC arg0, vnl_matrixUC arg1, vnl_tag_mul arg2) -> vnl_vectorUC
        __init__(vnl_vectorUC self, vnl_vectorUC that, vnl_tag_grab arg1) -> vnl_vectorUC
        """
        _vnl_vectorPython.vnl_vectorUC_swiginit(self, _vnl_vectorPython.new_vnl_vectorUC(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorUC

    def size(self) -> "unsigned long long":
        """size(vnl_vectorUC self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorUC_size(self)


    def put(self, i: 'unsigned long long', v: 'unsigned char const &') -> "void":
        """put(vnl_vectorUC self, unsigned long long i, unsigned char const & v)"""
        return _vnl_vectorPython.vnl_vectorUC_put(self, i, v)


    def get(self, i: 'unsigned long long') -> "unsigned char":
        """get(vnl_vectorUC self, unsigned long long i) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_get(self, i)


    def fill(self, v: 'unsigned char const &') -> "vnl_vectorUC &":
        """fill(vnl_vectorUC self, unsigned char const & v) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC_fill(self, v)


    def copy_in(self, ptr: 'unsigned char const *') -> "vnl_vectorUC &":
        """copy_in(vnl_vectorUC self, unsigned char const * ptr) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC_copy_in(self, ptr)


    def copy_out(self, arg0: 'unsigned char *') -> "void":
        """copy_out(vnl_vectorUC self, unsigned char * arg0)"""
        return _vnl_vectorPython.vnl_vectorUC_copy_out(self, arg0)


    def set(self, ptr: 'unsigned char const *') -> "vnl_vectorUC &":
        """set(vnl_vectorUC self, unsigned char const * ptr) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC_set(self, ptr)


    def __call__(self, *args) -> "unsigned char const &":
        """
        __call__(vnl_vectorUC self, unsigned long long i) -> unsigned char
        __call__(vnl_vectorUC self, unsigned long long i) -> unsigned char const &
        """
        return _vnl_vectorPython.vnl_vectorUC___call__(self, *args)


    def __idiv__(self, arg0: 'unsigned char') -> "vnl_vectorUC &":
        """__idiv__(vnl_vectorUC self, unsigned char arg0) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC___idiv__(self, arg0)


    def __iadd__(self, *args) -> "vnl_vectorUC &":
        """
        __iadd__(vnl_vectorUC self, unsigned char arg0) -> vnl_vectorUC
        __iadd__(vnl_vectorUC self, vnl_vectorUC rhs) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_vectorUC &":
        """
        __isub__(vnl_vectorUC self, unsigned char value) -> vnl_vectorUC
        __isub__(vnl_vectorUC self, vnl_vectorUC rhs) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC___isub__(self, *args)


    def pre_multiply(self, M: 'vnl_matrixUC') -> "vnl_vectorUC &":
        """pre_multiply(vnl_vectorUC self, vnl_matrixUC M) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC_pre_multiply(self, M)


    def post_multiply(self, M: 'vnl_matrixUC') -> "vnl_vectorUC &":
        """post_multiply(vnl_vectorUC self, vnl_matrixUC M) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC_post_multiply(self, M)


    def __imul__(self, *args) -> "vnl_vectorUC &":
        """
        __imul__(vnl_vectorUC self, unsigned char arg0) -> vnl_vectorUC
        __imul__(vnl_vectorUC self, vnl_matrixUC m) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC___imul__(self, *args)


    def __pos__(self) -> "vnl_vectorUC":
        """__pos__(vnl_vectorUC self) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC___pos__(self)


    def __neg__(self) -> "vnl_vectorUC":
        """__neg__(vnl_vectorUC self) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC___neg__(self)


    def __div__(self, v: 'unsigned char') -> "vnl_vectorUC":
        """__div__(vnl_vectorUC self, unsigned char v) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC___div__(self, v)


    def __add__(self, *args) -> "vnl_vectorUC":
        """
        __add__(vnl_vectorUC self, unsigned char v) -> vnl_vectorUC
        __add__(vnl_vectorUC self, vnl_vectorUC v) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC___add__(self, *args)


    def __sub__(self, *args) -> "vnl_vectorUC":
        """
        __sub__(vnl_vectorUC self, unsigned char v) -> vnl_vectorUC
        __sub__(vnl_vectorUC self, vnl_vectorUC v) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_vectorUC":
        """
        __mul__(vnl_vectorUC self, unsigned char v) -> vnl_vectorUC
        __mul__(vnl_vectorUC self, vnl_matrixUC M) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC___mul__(self, *args)


    def data_block(self, *args) -> "unsigned char *":
        """
        data_block(vnl_vectorUC self) -> unsigned char const
        data_block(vnl_vectorUC self) -> unsigned char *
        """
        return _vnl_vectorPython.vnl_vectorUC_data_block(self, *args)


    def begin(self, *args) -> "unsigned char const *":
        """
        begin(vnl_vectorUC self) -> unsigned char
        begin(vnl_vectorUC self) -> unsigned char const *
        """
        return _vnl_vectorPython.vnl_vectorUC_begin(self, *args)


    def end(self, *args) -> "unsigned char const *":
        """
        end(vnl_vectorUC self) -> unsigned char
        end(vnl_vectorUC self) -> unsigned char const *
        """
        return _vnl_vectorPython.vnl_vectorUC_end(self, *args)


    def extract(self, len: 'unsigned long long', start: 'unsigned long long'=0) -> "vnl_vectorUC":
        """
        extract(vnl_vectorUC self, unsigned long long len, unsigned long long start=0) -> vnl_vectorUC
        extract(vnl_vectorUC self, unsigned long long len) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC_extract(self, len, start)


    def update(self, arg0: 'vnl_vectorUC', start: 'unsigned long long'=0) -> "vnl_vectorUC &":
        """
        update(vnl_vectorUC self, vnl_vectorUC arg0, unsigned long long start=0) -> vnl_vectorUC
        update(vnl_vectorUC self, vnl_vectorUC arg0) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC_update(self, arg0, start)


    def squared_magnitude(self) -> "unsigned char":
        """squared_magnitude(vnl_vectorUC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_squared_magnitude(self)


    def magnitude(self) -> "unsigned char":
        """magnitude(vnl_vectorUC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_magnitude(self)


    def one_norm(self) -> "unsigned char":
        """one_norm(vnl_vectorUC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_one_norm(self)


    def two_norm(self) -> "unsigned char":
        """two_norm(vnl_vectorUC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_two_norm(self)


    def inf_norm(self) -> "unsigned char":
        """inf_norm(vnl_vectorUC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_inf_norm(self)


    def normalize(self) -> "vnl_vectorUC &":
        """normalize(vnl_vectorUC self) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC_normalize(self)


    def rms(self) -> "unsigned char":
        """rms(vnl_vectorUC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_rms(self)


    def min_value(self) -> "unsigned char":
        """min_value(vnl_vectorUC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_min_value(self)


    def max_value(self) -> "unsigned char":
        """max_value(vnl_vectorUC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_max_value(self)


    def arg_min(self) -> "unsigned long long":
        """arg_min(vnl_vectorUC self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorUC_arg_min(self)


    def arg_max(self) -> "unsigned long long":
        """arg_max(vnl_vectorUC self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorUC_arg_max(self)


    def mean(self) -> "unsigned char":
        """mean(vnl_vectorUC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_mean(self)


    def sum(self) -> "unsigned char":
        """sum(vnl_vectorUC self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_sum(self)


    def flip(self, *args) -> "vnl_vectorUC &":
        """
        flip(vnl_vectorUC self) -> vnl_vectorUC
        flip(vnl_vectorUC self, unsigned long long const & b, unsigned long long const & e) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC_flip(self, *args)


    def roll(self, shift: 'int const &') -> "vnl_vectorUC":
        """roll(vnl_vectorUC self, int const & shift) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC_roll(self, shift)


    def roll_inplace(self, shift: 'int const &') -> "vnl_vectorUC &":
        """roll_inplace(vnl_vectorUC self, int const & shift) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC_roll_inplace(self, shift)


    def swap(self, that: 'vnl_vectorUC') -> "void":
        """swap(vnl_vectorUC self, vnl_vectorUC that)"""
        return _vnl_vectorPython.vnl_vectorUC_swap(self, that)


    def assert_size(self, sz: 'unsigned long long') -> "void":
        """assert_size(vnl_vectorUC self, unsigned long long sz)"""
        return _vnl_vectorPython.vnl_vectorUC_assert_size(self, sz)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_vectorUC self)"""
        return _vnl_vectorPython.vnl_vectorUC_assert_finite(self)


    def is_finite(self) -> "bool":
        """is_finite(vnl_vectorUC self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC_is_finite(self)


    def is_zero(self) -> "bool":
        """is_zero(vnl_vectorUC self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC_is_zero(self)


    def empty(self) -> "bool":
        """empty(vnl_vectorUC self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC_empty(self)


    def is_equal(self, rhs: 'vnl_vectorUC', tol: 'double') -> "bool":
        """is_equal(vnl_vectorUC self, vnl_vectorUC rhs, double tol) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC_is_equal(self, rhs, tol)


    def operator_eq(self, v: 'vnl_vectorUC') -> "bool":
        """operator_eq(vnl_vectorUC self, vnl_vectorUC v) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC_operator_eq(self, v)


    def __eq__(self, that: 'vnl_vectorUC') -> "bool":
        """__eq__(vnl_vectorUC self, vnl_vectorUC that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC___eq__(self, that)


    def __ne__(self, that: 'vnl_vectorUC') -> "bool":
        """__ne__(vnl_vectorUC self, vnl_vectorUC that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC___ne__(self, that)


    def set_size(self, n: 'unsigned long long') -> "bool":
        """set_size(vnl_vectorUC self, unsigned long long n) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_vectorUC self)"""
        return _vnl_vectorPython.vnl_vectorUC_clear(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_vectorUC self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC_read_ascii(self, s)


    def read(s: 'istream') -> "vnl_vectorUC":
        """read(istream s) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC_read(s)

    read = staticmethod(read)
vnl_vectorUC.size = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_size, None, vnl_vectorUC)
vnl_vectorUC.put = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_put, None, vnl_vectorUC)
vnl_vectorUC.get = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_get, None, vnl_vectorUC)
vnl_vectorUC.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_fill, None, vnl_vectorUC)
vnl_vectorUC.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_copy_in, None, vnl_vectorUC)
vnl_vectorUC.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_copy_out, None, vnl_vectorUC)
vnl_vectorUC.set = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_set, None, vnl_vectorUC)
vnl_vectorUC.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___call__, None, vnl_vectorUC)
vnl_vectorUC.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___idiv__, None, vnl_vectorUC)
vnl_vectorUC.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___iadd__, None, vnl_vectorUC)
vnl_vectorUC.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___isub__, None, vnl_vectorUC)
vnl_vectorUC.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_pre_multiply, None, vnl_vectorUC)
vnl_vectorUC.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_post_multiply, None, vnl_vectorUC)
vnl_vectorUC.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___imul__, None, vnl_vectorUC)
vnl_vectorUC.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___pos__, None, vnl_vectorUC)
vnl_vectorUC.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___neg__, None, vnl_vectorUC)
vnl_vectorUC.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___div__, None, vnl_vectorUC)
vnl_vectorUC.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___add__, None, vnl_vectorUC)
vnl_vectorUC.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___sub__, None, vnl_vectorUC)
vnl_vectorUC.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___mul__, None, vnl_vectorUC)
vnl_vectorUC.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_data_block, None, vnl_vectorUC)
vnl_vectorUC.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_begin, None, vnl_vectorUC)
vnl_vectorUC.end = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_end, None, vnl_vectorUC)
vnl_vectorUC.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_extract, None, vnl_vectorUC)
vnl_vectorUC.update = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_update, None, vnl_vectorUC)
vnl_vectorUC.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_squared_magnitude, None, vnl_vectorUC)
vnl_vectorUC.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_magnitude, None, vnl_vectorUC)
vnl_vectorUC.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_one_norm, None, vnl_vectorUC)
vnl_vectorUC.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_two_norm, None, vnl_vectorUC)
vnl_vectorUC.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_inf_norm, None, vnl_vectorUC)
vnl_vectorUC.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_normalize, None, vnl_vectorUC)
vnl_vectorUC.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_rms, None, vnl_vectorUC)
vnl_vectorUC.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_min_value, None, vnl_vectorUC)
vnl_vectorUC.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_max_value, None, vnl_vectorUC)
vnl_vectorUC.arg_min = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_arg_min, None, vnl_vectorUC)
vnl_vectorUC.arg_max = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_arg_max, None, vnl_vectorUC)
vnl_vectorUC.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_mean, None, vnl_vectorUC)
vnl_vectorUC.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_sum, None, vnl_vectorUC)
vnl_vectorUC.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_flip, None, vnl_vectorUC)
vnl_vectorUC.roll = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_roll, None, vnl_vectorUC)
vnl_vectorUC.roll_inplace = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_roll_inplace, None, vnl_vectorUC)
vnl_vectorUC.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_swap, None, vnl_vectorUC)
vnl_vectorUC.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_assert_size, None, vnl_vectorUC)
vnl_vectorUC.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_assert_finite, None, vnl_vectorUC)
vnl_vectorUC.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_is_finite, None, vnl_vectorUC)
vnl_vectorUC.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_is_zero, None, vnl_vectorUC)
vnl_vectorUC.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_empty, None, vnl_vectorUC)
vnl_vectorUC.is_equal = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_is_equal, None, vnl_vectorUC)
vnl_vectorUC.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_operator_eq, None, vnl_vectorUC)
vnl_vectorUC.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___eq__, None, vnl_vectorUC)
vnl_vectorUC.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___ne__, None, vnl_vectorUC)
vnl_vectorUC.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_set_size, None, vnl_vectorUC)
vnl_vectorUC.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_clear, None, vnl_vectorUC)
vnl_vectorUC.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_read_ascii, None, vnl_vectorUC)
vnl_vectorUC_swigregister = _vnl_vectorPython.vnl_vectorUC_swigregister
vnl_vectorUC_swigregister(vnl_vectorUC)

def vnl_vectorUC_read(s: 'istream') -> "vnl_vectorUC":
    """vnl_vectorUC_read(istream s) -> vnl_vectorUC"""
    return _vnl_vectorPython.vnl_vectorUC_read(s)

class vnl_vectorUI(object):
    """Proxy of C++ vnl_vectorUI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vectorUI self) -> vnl_vectorUI
        __init__(vnl_vectorUI self, unsigned long long len) -> vnl_vectorUI
        __init__(vnl_vectorUI self, unsigned long long len, unsigned int const & v0) -> vnl_vectorUI
        __init__(vnl_vectorUI self, unsigned long long len, unsigned long long n, unsigned int const * values) -> vnl_vectorUI
        __init__(vnl_vectorUI self, unsigned int const * data_block, unsigned long long n) -> vnl_vectorUI
        __init__(vnl_vectorUI self, vnl_vectorUI arg0) -> vnl_vectorUI
        __init__(vnl_vectorUI self, vnl_vectorUI arg0, vnl_vectorUI arg1, vnl_tag_add arg2) -> vnl_vectorUI
        __init__(vnl_vectorUI self, vnl_vectorUI arg0, vnl_vectorUI arg1, vnl_tag_sub arg2) -> vnl_vectorUI
        __init__(vnl_vectorUI self, vnl_vectorUI arg0, unsigned int arg1, vnl_tag_mul arg2) -> vnl_vectorUI
        __init__(vnl_vectorUI self, vnl_vectorUI arg0, unsigned int arg1, vnl_tag_div arg2) -> vnl_vectorUI
        __init__(vnl_vectorUI self, vnl_vectorUI arg0, unsigned int arg1, vnl_tag_add arg2) -> vnl_vectorUI
        __init__(vnl_vectorUI self, vnl_vectorUI arg0, unsigned int arg1, vnl_tag_sub arg2) -> vnl_vectorUI
        __init__(vnl_vectorUI self, vnl_matrixUI arg0, vnl_vectorUI arg1, vnl_tag_mul arg2) -> vnl_vectorUI
        __init__(vnl_vectorUI self, vnl_vectorUI arg0, vnl_matrixUI arg1, vnl_tag_mul arg2) -> vnl_vectorUI
        __init__(vnl_vectorUI self, vnl_vectorUI that, vnl_tag_grab arg1) -> vnl_vectorUI
        """
        _vnl_vectorPython.vnl_vectorUI_swiginit(self, _vnl_vectorPython.new_vnl_vectorUI(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorUI

    def size(self) -> "unsigned long long":
        """size(vnl_vectorUI self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorUI_size(self)


    def put(self, i: 'unsigned long long', v: 'unsigned int const &') -> "void":
        """put(vnl_vectorUI self, unsigned long long i, unsigned int const & v)"""
        return _vnl_vectorPython.vnl_vectorUI_put(self, i, v)


    def get(self, i: 'unsigned long long') -> "unsigned int":
        """get(vnl_vectorUI self, unsigned long long i) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_get(self, i)


    def fill(self, v: 'unsigned int const &') -> "vnl_vectorUI &":
        """fill(vnl_vectorUI self, unsigned int const & v) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI_fill(self, v)


    def copy_in(self, ptr: 'unsigned int const *') -> "vnl_vectorUI &":
        """copy_in(vnl_vectorUI self, unsigned int const * ptr) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI_copy_in(self, ptr)


    def copy_out(self, arg0: 'unsigned int *') -> "void":
        """copy_out(vnl_vectorUI self, unsigned int * arg0)"""
        return _vnl_vectorPython.vnl_vectorUI_copy_out(self, arg0)


    def set(self, ptr: 'unsigned int const *') -> "vnl_vectorUI &":
        """set(vnl_vectorUI self, unsigned int const * ptr) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI_set(self, ptr)


    def __call__(self, *args) -> "unsigned int const &":
        """
        __call__(vnl_vectorUI self, unsigned long long i) -> unsigned int
        __call__(vnl_vectorUI self, unsigned long long i) -> unsigned int const &
        """
        return _vnl_vectorPython.vnl_vectorUI___call__(self, *args)


    def __idiv__(self, arg0: 'unsigned int') -> "vnl_vectorUI &":
        """__idiv__(vnl_vectorUI self, unsigned int arg0) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI___idiv__(self, arg0)


    def __iadd__(self, *args) -> "vnl_vectorUI &":
        """
        __iadd__(vnl_vectorUI self, unsigned int arg0) -> vnl_vectorUI
        __iadd__(vnl_vectorUI self, vnl_vectorUI rhs) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_vectorUI &":
        """
        __isub__(vnl_vectorUI self, unsigned int value) -> vnl_vectorUI
        __isub__(vnl_vectorUI self, vnl_vectorUI rhs) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI___isub__(self, *args)


    def pre_multiply(self, M: 'vnl_matrixUI') -> "vnl_vectorUI &":
        """pre_multiply(vnl_vectorUI self, vnl_matrixUI M) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI_pre_multiply(self, M)


    def post_multiply(self, M: 'vnl_matrixUI') -> "vnl_vectorUI &":
        """post_multiply(vnl_vectorUI self, vnl_matrixUI M) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI_post_multiply(self, M)


    def __imul__(self, *args) -> "vnl_vectorUI &":
        """
        __imul__(vnl_vectorUI self, unsigned int arg0) -> vnl_vectorUI
        __imul__(vnl_vectorUI self, vnl_matrixUI m) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI___imul__(self, *args)


    def __pos__(self) -> "vnl_vectorUI":
        """__pos__(vnl_vectorUI self) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI___pos__(self)


    def __neg__(self) -> "vnl_vectorUI":
        """__neg__(vnl_vectorUI self) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI___neg__(self)


    def __div__(self, v: 'unsigned int') -> "vnl_vectorUI":
        """__div__(vnl_vectorUI self, unsigned int v) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI___div__(self, v)


    def __add__(self, *args) -> "vnl_vectorUI":
        """
        __add__(vnl_vectorUI self, unsigned int v) -> vnl_vectorUI
        __add__(vnl_vectorUI self, vnl_vectorUI v) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI___add__(self, *args)


    def __sub__(self, *args) -> "vnl_vectorUI":
        """
        __sub__(vnl_vectorUI self, unsigned int v) -> vnl_vectorUI
        __sub__(vnl_vectorUI self, vnl_vectorUI v) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_vectorUI":
        """
        __mul__(vnl_vectorUI self, unsigned int v) -> vnl_vectorUI
        __mul__(vnl_vectorUI self, vnl_matrixUI M) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI___mul__(self, *args)


    def data_block(self, *args) -> "unsigned int *":
        """
        data_block(vnl_vectorUI self) -> unsigned int const
        data_block(vnl_vectorUI self) -> unsigned int *
        """
        return _vnl_vectorPython.vnl_vectorUI_data_block(self, *args)


    def begin(self, *args) -> "unsigned int const *":
        """
        begin(vnl_vectorUI self) -> unsigned int
        begin(vnl_vectorUI self) -> unsigned int const *
        """
        return _vnl_vectorPython.vnl_vectorUI_begin(self, *args)


    def end(self, *args) -> "unsigned int const *":
        """
        end(vnl_vectorUI self) -> unsigned int
        end(vnl_vectorUI self) -> unsigned int const *
        """
        return _vnl_vectorPython.vnl_vectorUI_end(self, *args)


    def extract(self, len: 'unsigned long long', start: 'unsigned long long'=0) -> "vnl_vectorUI":
        """
        extract(vnl_vectorUI self, unsigned long long len, unsigned long long start=0) -> vnl_vectorUI
        extract(vnl_vectorUI self, unsigned long long len) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI_extract(self, len, start)


    def update(self, arg0: 'vnl_vectorUI', start: 'unsigned long long'=0) -> "vnl_vectorUI &":
        """
        update(vnl_vectorUI self, vnl_vectorUI arg0, unsigned long long start=0) -> vnl_vectorUI
        update(vnl_vectorUI self, vnl_vectorUI arg0) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI_update(self, arg0, start)


    def squared_magnitude(self) -> "unsigned int":
        """squared_magnitude(vnl_vectorUI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_squared_magnitude(self)


    def magnitude(self) -> "unsigned int":
        """magnitude(vnl_vectorUI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_magnitude(self)


    def one_norm(self) -> "unsigned int":
        """one_norm(vnl_vectorUI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_one_norm(self)


    def two_norm(self) -> "unsigned int":
        """two_norm(vnl_vectorUI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_two_norm(self)


    def inf_norm(self) -> "unsigned int":
        """inf_norm(vnl_vectorUI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_inf_norm(self)


    def normalize(self) -> "vnl_vectorUI &":
        """normalize(vnl_vectorUI self) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI_normalize(self)


    def rms(self) -> "unsigned int":
        """rms(vnl_vectorUI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_rms(self)


    def min_value(self) -> "unsigned int":
        """min_value(vnl_vectorUI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_min_value(self)


    def max_value(self) -> "unsigned int":
        """max_value(vnl_vectorUI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_max_value(self)


    def arg_min(self) -> "unsigned long long":
        """arg_min(vnl_vectorUI self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorUI_arg_min(self)


    def arg_max(self) -> "unsigned long long":
        """arg_max(vnl_vectorUI self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorUI_arg_max(self)


    def mean(self) -> "unsigned int":
        """mean(vnl_vectorUI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_mean(self)


    def sum(self) -> "unsigned int":
        """sum(vnl_vectorUI self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_sum(self)


    def flip(self, *args) -> "vnl_vectorUI &":
        """
        flip(vnl_vectorUI self) -> vnl_vectorUI
        flip(vnl_vectorUI self, unsigned long long const & b, unsigned long long const & e) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI_flip(self, *args)


    def roll(self, shift: 'int const &') -> "vnl_vectorUI":
        """roll(vnl_vectorUI self, int const & shift) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI_roll(self, shift)


    def roll_inplace(self, shift: 'int const &') -> "vnl_vectorUI &":
        """roll_inplace(vnl_vectorUI self, int const & shift) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI_roll_inplace(self, shift)


    def swap(self, that: 'vnl_vectorUI') -> "void":
        """swap(vnl_vectorUI self, vnl_vectorUI that)"""
        return _vnl_vectorPython.vnl_vectorUI_swap(self, that)


    def assert_size(self, sz: 'unsigned long long') -> "void":
        """assert_size(vnl_vectorUI self, unsigned long long sz)"""
        return _vnl_vectorPython.vnl_vectorUI_assert_size(self, sz)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_vectorUI self)"""
        return _vnl_vectorPython.vnl_vectorUI_assert_finite(self)


    def is_finite(self) -> "bool":
        """is_finite(vnl_vectorUI self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI_is_finite(self)


    def is_zero(self) -> "bool":
        """is_zero(vnl_vectorUI self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI_is_zero(self)


    def empty(self) -> "bool":
        """empty(vnl_vectorUI self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI_empty(self)


    def is_equal(self, rhs: 'vnl_vectorUI', tol: 'double') -> "bool":
        """is_equal(vnl_vectorUI self, vnl_vectorUI rhs, double tol) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI_is_equal(self, rhs, tol)


    def operator_eq(self, v: 'vnl_vectorUI') -> "bool":
        """operator_eq(vnl_vectorUI self, vnl_vectorUI v) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI_operator_eq(self, v)


    def __eq__(self, that: 'vnl_vectorUI') -> "bool":
        """__eq__(vnl_vectorUI self, vnl_vectorUI that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI___eq__(self, that)


    def __ne__(self, that: 'vnl_vectorUI') -> "bool":
        """__ne__(vnl_vectorUI self, vnl_vectorUI that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI___ne__(self, that)


    def set_size(self, n: 'unsigned long long') -> "bool":
        """set_size(vnl_vectorUI self, unsigned long long n) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_vectorUI self)"""
        return _vnl_vectorPython.vnl_vectorUI_clear(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_vectorUI self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI_read_ascii(self, s)


    def read(s: 'istream') -> "vnl_vectorUI":
        """read(istream s) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI_read(s)

    read = staticmethod(read)
vnl_vectorUI.size = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_size, None, vnl_vectorUI)
vnl_vectorUI.put = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_put, None, vnl_vectorUI)
vnl_vectorUI.get = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_get, None, vnl_vectorUI)
vnl_vectorUI.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_fill, None, vnl_vectorUI)
vnl_vectorUI.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_copy_in, None, vnl_vectorUI)
vnl_vectorUI.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_copy_out, None, vnl_vectorUI)
vnl_vectorUI.set = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_set, None, vnl_vectorUI)
vnl_vectorUI.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___call__, None, vnl_vectorUI)
vnl_vectorUI.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___idiv__, None, vnl_vectorUI)
vnl_vectorUI.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___iadd__, None, vnl_vectorUI)
vnl_vectorUI.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___isub__, None, vnl_vectorUI)
vnl_vectorUI.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_pre_multiply, None, vnl_vectorUI)
vnl_vectorUI.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_post_multiply, None, vnl_vectorUI)
vnl_vectorUI.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___imul__, None, vnl_vectorUI)
vnl_vectorUI.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___pos__, None, vnl_vectorUI)
vnl_vectorUI.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___neg__, None, vnl_vectorUI)
vnl_vectorUI.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___div__, None, vnl_vectorUI)
vnl_vectorUI.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___add__, None, vnl_vectorUI)
vnl_vectorUI.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___sub__, None, vnl_vectorUI)
vnl_vectorUI.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___mul__, None, vnl_vectorUI)
vnl_vectorUI.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_data_block, None, vnl_vectorUI)
vnl_vectorUI.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_begin, None, vnl_vectorUI)
vnl_vectorUI.end = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_end, None, vnl_vectorUI)
vnl_vectorUI.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_extract, None, vnl_vectorUI)
vnl_vectorUI.update = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_update, None, vnl_vectorUI)
vnl_vectorUI.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_squared_magnitude, None, vnl_vectorUI)
vnl_vectorUI.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_magnitude, None, vnl_vectorUI)
vnl_vectorUI.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_one_norm, None, vnl_vectorUI)
vnl_vectorUI.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_two_norm, None, vnl_vectorUI)
vnl_vectorUI.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_inf_norm, None, vnl_vectorUI)
vnl_vectorUI.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_normalize, None, vnl_vectorUI)
vnl_vectorUI.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_rms, None, vnl_vectorUI)
vnl_vectorUI.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_min_value, None, vnl_vectorUI)
vnl_vectorUI.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_max_value, None, vnl_vectorUI)
vnl_vectorUI.arg_min = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_arg_min, None, vnl_vectorUI)
vnl_vectorUI.arg_max = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_arg_max, None, vnl_vectorUI)
vnl_vectorUI.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_mean, None, vnl_vectorUI)
vnl_vectorUI.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_sum, None, vnl_vectorUI)
vnl_vectorUI.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_flip, None, vnl_vectorUI)
vnl_vectorUI.roll = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_roll, None, vnl_vectorUI)
vnl_vectorUI.roll_inplace = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_roll_inplace, None, vnl_vectorUI)
vnl_vectorUI.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_swap, None, vnl_vectorUI)
vnl_vectorUI.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_assert_size, None, vnl_vectorUI)
vnl_vectorUI.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_assert_finite, None, vnl_vectorUI)
vnl_vectorUI.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_is_finite, None, vnl_vectorUI)
vnl_vectorUI.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_is_zero, None, vnl_vectorUI)
vnl_vectorUI.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_empty, None, vnl_vectorUI)
vnl_vectorUI.is_equal = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_is_equal, None, vnl_vectorUI)
vnl_vectorUI.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_operator_eq, None, vnl_vectorUI)
vnl_vectorUI.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___eq__, None, vnl_vectorUI)
vnl_vectorUI.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___ne__, None, vnl_vectorUI)
vnl_vectorUI.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_set_size, None, vnl_vectorUI)
vnl_vectorUI.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_clear, None, vnl_vectorUI)
vnl_vectorUI.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_read_ascii, None, vnl_vectorUI)
vnl_vectorUI_swigregister = _vnl_vectorPython.vnl_vectorUI_swigregister
vnl_vectorUI_swigregister(vnl_vectorUI)

def vnl_vectorUI_read(s: 'istream') -> "vnl_vectorUI":
    """vnl_vectorUI_read(istream s) -> vnl_vectorUI"""
    return _vnl_vectorPython.vnl_vectorUI_read(s)

class vnl_vectorUL(object):
    """Proxy of C++ vnl_vectorUL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vectorUL self) -> vnl_vectorUL
        __init__(vnl_vectorUL self, unsigned long long len) -> vnl_vectorUL
        __init__(vnl_vectorUL self, unsigned long long len, unsigned long const & v0) -> vnl_vectorUL
        __init__(vnl_vectorUL self, unsigned long long len, unsigned long long n, unsigned long const * values) -> vnl_vectorUL
        __init__(vnl_vectorUL self, unsigned long const * data_block, unsigned long long n) -> vnl_vectorUL
        __init__(vnl_vectorUL self, vnl_vectorUL arg0) -> vnl_vectorUL
        __init__(vnl_vectorUL self, vnl_vectorUL arg0, vnl_vectorUL arg1, vnl_tag_add arg2) -> vnl_vectorUL
        __init__(vnl_vectorUL self, vnl_vectorUL arg0, vnl_vectorUL arg1, vnl_tag_sub arg2) -> vnl_vectorUL
        __init__(vnl_vectorUL self, vnl_vectorUL arg0, unsigned long arg1, vnl_tag_mul arg2) -> vnl_vectorUL
        __init__(vnl_vectorUL self, vnl_vectorUL arg0, unsigned long arg1, vnl_tag_div arg2) -> vnl_vectorUL
        __init__(vnl_vectorUL self, vnl_vectorUL arg0, unsigned long arg1, vnl_tag_add arg2) -> vnl_vectorUL
        __init__(vnl_vectorUL self, vnl_vectorUL arg0, unsigned long arg1, vnl_tag_sub arg2) -> vnl_vectorUL
        __init__(vnl_vectorUL self, vnl_matrixUL arg0, vnl_vectorUL arg1, vnl_tag_mul arg2) -> vnl_vectorUL
        __init__(vnl_vectorUL self, vnl_vectorUL arg0, vnl_matrixUL arg1, vnl_tag_mul arg2) -> vnl_vectorUL
        __init__(vnl_vectorUL self, vnl_vectorUL that, vnl_tag_grab arg1) -> vnl_vectorUL
        """
        _vnl_vectorPython.vnl_vectorUL_swiginit(self, _vnl_vectorPython.new_vnl_vectorUL(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorUL

    def size(self) -> "unsigned long long":
        """size(vnl_vectorUL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorUL_size(self)


    def put(self, i: 'unsigned long long', v: 'unsigned long const &') -> "void":
        """put(vnl_vectorUL self, unsigned long long i, unsigned long const & v)"""
        return _vnl_vectorPython.vnl_vectorUL_put(self, i, v)


    def get(self, i: 'unsigned long long') -> "unsigned long":
        """get(vnl_vectorUL self, unsigned long long i) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_get(self, i)


    def fill(self, v: 'unsigned long const &') -> "vnl_vectorUL &":
        """fill(vnl_vectorUL self, unsigned long const & v) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL_fill(self, v)


    def copy_in(self, ptr: 'unsigned long const *') -> "vnl_vectorUL &":
        """copy_in(vnl_vectorUL self, unsigned long const * ptr) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL_copy_in(self, ptr)


    def copy_out(self, arg0: 'unsigned long *') -> "void":
        """copy_out(vnl_vectorUL self, unsigned long * arg0)"""
        return _vnl_vectorPython.vnl_vectorUL_copy_out(self, arg0)


    def set(self, ptr: 'unsigned long const *') -> "vnl_vectorUL &":
        """set(vnl_vectorUL self, unsigned long const * ptr) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL_set(self, ptr)


    def __call__(self, *args) -> "unsigned long const &":
        """
        __call__(vnl_vectorUL self, unsigned long long i) -> unsigned long
        __call__(vnl_vectorUL self, unsigned long long i) -> unsigned long const &
        """
        return _vnl_vectorPython.vnl_vectorUL___call__(self, *args)


    def __idiv__(self, arg0: 'unsigned long') -> "vnl_vectorUL &":
        """__idiv__(vnl_vectorUL self, unsigned long arg0) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL___idiv__(self, arg0)


    def __iadd__(self, *args) -> "vnl_vectorUL &":
        """
        __iadd__(vnl_vectorUL self, unsigned long arg0) -> vnl_vectorUL
        __iadd__(vnl_vectorUL self, vnl_vectorUL rhs) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_vectorUL &":
        """
        __isub__(vnl_vectorUL self, unsigned long value) -> vnl_vectorUL
        __isub__(vnl_vectorUL self, vnl_vectorUL rhs) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL___isub__(self, *args)


    def pre_multiply(self, M: 'vnl_matrixUL') -> "vnl_vectorUL &":
        """pre_multiply(vnl_vectorUL self, vnl_matrixUL M) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL_pre_multiply(self, M)


    def post_multiply(self, M: 'vnl_matrixUL') -> "vnl_vectorUL &":
        """post_multiply(vnl_vectorUL self, vnl_matrixUL M) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL_post_multiply(self, M)


    def __imul__(self, *args) -> "vnl_vectorUL &":
        """
        __imul__(vnl_vectorUL self, unsigned long arg0) -> vnl_vectorUL
        __imul__(vnl_vectorUL self, vnl_matrixUL m) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL___imul__(self, *args)


    def __pos__(self) -> "vnl_vectorUL":
        """__pos__(vnl_vectorUL self) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL___pos__(self)


    def __neg__(self) -> "vnl_vectorUL":
        """__neg__(vnl_vectorUL self) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL___neg__(self)


    def __div__(self, v: 'unsigned long') -> "vnl_vectorUL":
        """__div__(vnl_vectorUL self, unsigned long v) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL___div__(self, v)


    def __add__(self, *args) -> "vnl_vectorUL":
        """
        __add__(vnl_vectorUL self, unsigned long v) -> vnl_vectorUL
        __add__(vnl_vectorUL self, vnl_vectorUL v) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL___add__(self, *args)


    def __sub__(self, *args) -> "vnl_vectorUL":
        """
        __sub__(vnl_vectorUL self, unsigned long v) -> vnl_vectorUL
        __sub__(vnl_vectorUL self, vnl_vectorUL v) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_vectorUL":
        """
        __mul__(vnl_vectorUL self, unsigned long v) -> vnl_vectorUL
        __mul__(vnl_vectorUL self, vnl_matrixUL M) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL___mul__(self, *args)


    def data_block(self, *args) -> "unsigned long *":
        """
        data_block(vnl_vectorUL self) -> unsigned long const
        data_block(vnl_vectorUL self) -> unsigned long *
        """
        return _vnl_vectorPython.vnl_vectorUL_data_block(self, *args)


    def begin(self, *args) -> "unsigned long const *":
        """
        begin(vnl_vectorUL self) -> unsigned long
        begin(vnl_vectorUL self) -> unsigned long const *
        """
        return _vnl_vectorPython.vnl_vectorUL_begin(self, *args)


    def end(self, *args) -> "unsigned long const *":
        """
        end(vnl_vectorUL self) -> unsigned long
        end(vnl_vectorUL self) -> unsigned long const *
        """
        return _vnl_vectorPython.vnl_vectorUL_end(self, *args)


    def extract(self, len: 'unsigned long long', start: 'unsigned long long'=0) -> "vnl_vectorUL":
        """
        extract(vnl_vectorUL self, unsigned long long len, unsigned long long start=0) -> vnl_vectorUL
        extract(vnl_vectorUL self, unsigned long long len) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL_extract(self, len, start)


    def update(self, arg0: 'vnl_vectorUL', start: 'unsigned long long'=0) -> "vnl_vectorUL &":
        """
        update(vnl_vectorUL self, vnl_vectorUL arg0, unsigned long long start=0) -> vnl_vectorUL
        update(vnl_vectorUL self, vnl_vectorUL arg0) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL_update(self, arg0, start)


    def squared_magnitude(self) -> "unsigned long":
        """squared_magnitude(vnl_vectorUL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_squared_magnitude(self)


    def magnitude(self) -> "unsigned long":
        """magnitude(vnl_vectorUL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_magnitude(self)


    def one_norm(self) -> "unsigned long":
        """one_norm(vnl_vectorUL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_one_norm(self)


    def two_norm(self) -> "unsigned long":
        """two_norm(vnl_vectorUL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_two_norm(self)


    def inf_norm(self) -> "unsigned long":
        """inf_norm(vnl_vectorUL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_inf_norm(self)


    def normalize(self) -> "vnl_vectorUL &":
        """normalize(vnl_vectorUL self) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL_normalize(self)


    def rms(self) -> "unsigned long":
        """rms(vnl_vectorUL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_rms(self)


    def min_value(self) -> "unsigned long":
        """min_value(vnl_vectorUL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_min_value(self)


    def max_value(self) -> "unsigned long":
        """max_value(vnl_vectorUL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_max_value(self)


    def arg_min(self) -> "unsigned long long":
        """arg_min(vnl_vectorUL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorUL_arg_min(self)


    def arg_max(self) -> "unsigned long long":
        """arg_max(vnl_vectorUL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorUL_arg_max(self)


    def mean(self) -> "unsigned long":
        """mean(vnl_vectorUL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_mean(self)


    def sum(self) -> "unsigned long":
        """sum(vnl_vectorUL self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_sum(self)


    def flip(self, *args) -> "vnl_vectorUL &":
        """
        flip(vnl_vectorUL self) -> vnl_vectorUL
        flip(vnl_vectorUL self, unsigned long long const & b, unsigned long long const & e) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL_flip(self, *args)


    def roll(self, shift: 'int const &') -> "vnl_vectorUL":
        """roll(vnl_vectorUL self, int const & shift) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL_roll(self, shift)


    def roll_inplace(self, shift: 'int const &') -> "vnl_vectorUL &":
        """roll_inplace(vnl_vectorUL self, int const & shift) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL_roll_inplace(self, shift)


    def swap(self, that: 'vnl_vectorUL') -> "void":
        """swap(vnl_vectorUL self, vnl_vectorUL that)"""
        return _vnl_vectorPython.vnl_vectorUL_swap(self, that)


    def assert_size(self, sz: 'unsigned long long') -> "void":
        """assert_size(vnl_vectorUL self, unsigned long long sz)"""
        return _vnl_vectorPython.vnl_vectorUL_assert_size(self, sz)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_vectorUL self)"""
        return _vnl_vectorPython.vnl_vectorUL_assert_finite(self)


    def is_finite(self) -> "bool":
        """is_finite(vnl_vectorUL self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL_is_finite(self)


    def is_zero(self) -> "bool":
        """is_zero(vnl_vectorUL self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL_is_zero(self)


    def empty(self) -> "bool":
        """empty(vnl_vectorUL self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL_empty(self)


    def is_equal(self, rhs: 'vnl_vectorUL', tol: 'double') -> "bool":
        """is_equal(vnl_vectorUL self, vnl_vectorUL rhs, double tol) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL_is_equal(self, rhs, tol)


    def operator_eq(self, v: 'vnl_vectorUL') -> "bool":
        """operator_eq(vnl_vectorUL self, vnl_vectorUL v) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL_operator_eq(self, v)


    def __eq__(self, that: 'vnl_vectorUL') -> "bool":
        """__eq__(vnl_vectorUL self, vnl_vectorUL that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL___eq__(self, that)


    def __ne__(self, that: 'vnl_vectorUL') -> "bool":
        """__ne__(vnl_vectorUL self, vnl_vectorUL that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL___ne__(self, that)


    def set_size(self, n: 'unsigned long long') -> "bool":
        """set_size(vnl_vectorUL self, unsigned long long n) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_vectorUL self)"""
        return _vnl_vectorPython.vnl_vectorUL_clear(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_vectorUL self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL_read_ascii(self, s)


    def read(s: 'istream') -> "vnl_vectorUL":
        """read(istream s) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL_read(s)

    read = staticmethod(read)
vnl_vectorUL.size = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_size, None, vnl_vectorUL)
vnl_vectorUL.put = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_put, None, vnl_vectorUL)
vnl_vectorUL.get = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_get, None, vnl_vectorUL)
vnl_vectorUL.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_fill, None, vnl_vectorUL)
vnl_vectorUL.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_copy_in, None, vnl_vectorUL)
vnl_vectorUL.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_copy_out, None, vnl_vectorUL)
vnl_vectorUL.set = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_set, None, vnl_vectorUL)
vnl_vectorUL.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___call__, None, vnl_vectorUL)
vnl_vectorUL.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___idiv__, None, vnl_vectorUL)
vnl_vectorUL.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___iadd__, None, vnl_vectorUL)
vnl_vectorUL.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___isub__, None, vnl_vectorUL)
vnl_vectorUL.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_pre_multiply, None, vnl_vectorUL)
vnl_vectorUL.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_post_multiply, None, vnl_vectorUL)
vnl_vectorUL.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___imul__, None, vnl_vectorUL)
vnl_vectorUL.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___pos__, None, vnl_vectorUL)
vnl_vectorUL.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___neg__, None, vnl_vectorUL)
vnl_vectorUL.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___div__, None, vnl_vectorUL)
vnl_vectorUL.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___add__, None, vnl_vectorUL)
vnl_vectorUL.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___sub__, None, vnl_vectorUL)
vnl_vectorUL.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___mul__, None, vnl_vectorUL)
vnl_vectorUL.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_data_block, None, vnl_vectorUL)
vnl_vectorUL.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_begin, None, vnl_vectorUL)
vnl_vectorUL.end = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_end, None, vnl_vectorUL)
vnl_vectorUL.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_extract, None, vnl_vectorUL)
vnl_vectorUL.update = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_update, None, vnl_vectorUL)
vnl_vectorUL.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_squared_magnitude, None, vnl_vectorUL)
vnl_vectorUL.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_magnitude, None, vnl_vectorUL)
vnl_vectorUL.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_one_norm, None, vnl_vectorUL)
vnl_vectorUL.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_two_norm, None, vnl_vectorUL)
vnl_vectorUL.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_inf_norm, None, vnl_vectorUL)
vnl_vectorUL.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_normalize, None, vnl_vectorUL)
vnl_vectorUL.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_rms, None, vnl_vectorUL)
vnl_vectorUL.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_min_value, None, vnl_vectorUL)
vnl_vectorUL.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_max_value, None, vnl_vectorUL)
vnl_vectorUL.arg_min = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_arg_min, None, vnl_vectorUL)
vnl_vectorUL.arg_max = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_arg_max, None, vnl_vectorUL)
vnl_vectorUL.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_mean, None, vnl_vectorUL)
vnl_vectorUL.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_sum, None, vnl_vectorUL)
vnl_vectorUL.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_flip, None, vnl_vectorUL)
vnl_vectorUL.roll = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_roll, None, vnl_vectorUL)
vnl_vectorUL.roll_inplace = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_roll_inplace, None, vnl_vectorUL)
vnl_vectorUL.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_swap, None, vnl_vectorUL)
vnl_vectorUL.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_assert_size, None, vnl_vectorUL)
vnl_vectorUL.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_assert_finite, None, vnl_vectorUL)
vnl_vectorUL.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_is_finite, None, vnl_vectorUL)
vnl_vectorUL.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_is_zero, None, vnl_vectorUL)
vnl_vectorUL.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_empty, None, vnl_vectorUL)
vnl_vectorUL.is_equal = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_is_equal, None, vnl_vectorUL)
vnl_vectorUL.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_operator_eq, None, vnl_vectorUL)
vnl_vectorUL.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___eq__, None, vnl_vectorUL)
vnl_vectorUL.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___ne__, None, vnl_vectorUL)
vnl_vectorUL.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_set_size, None, vnl_vectorUL)
vnl_vectorUL.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_clear, None, vnl_vectorUL)
vnl_vectorUL.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_read_ascii, None, vnl_vectorUL)
vnl_vectorUL_swigregister = _vnl_vectorPython.vnl_vectorUL_swigregister
vnl_vectorUL_swigregister(vnl_vectorUL)

def vnl_vectorUL_read(s: 'istream') -> "vnl_vectorUL":
    """vnl_vectorUL_read(istream s) -> vnl_vectorUL"""
    return _vnl_vectorPython.vnl_vectorUL_read(s)

class vnl_vectorULL(object):
    """Proxy of C++ vnl_vectorULL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vectorULL self) -> vnl_vectorULL
        __init__(vnl_vectorULL self, unsigned long long len) -> vnl_vectorULL
        __init__(vnl_vectorULL self, unsigned long long len, unsigned long long const & v0) -> vnl_vectorULL
        __init__(vnl_vectorULL self, unsigned long long len, unsigned long long n, unsigned long long const * values) -> vnl_vectorULL
        __init__(vnl_vectorULL self, unsigned long long const * data_block, unsigned long long n) -> vnl_vectorULL
        __init__(vnl_vectorULL self, vnl_vectorULL arg0) -> vnl_vectorULL
        __init__(vnl_vectorULL self, vnl_vectorULL arg0, vnl_vectorULL arg1, vnl_tag_add arg2) -> vnl_vectorULL
        __init__(vnl_vectorULL self, vnl_vectorULL arg0, vnl_vectorULL arg1, vnl_tag_sub arg2) -> vnl_vectorULL
        __init__(vnl_vectorULL self, vnl_vectorULL arg0, unsigned long long arg1, vnl_tag_mul arg2) -> vnl_vectorULL
        __init__(vnl_vectorULL self, vnl_vectorULL arg0, unsigned long long arg1, vnl_tag_div arg2) -> vnl_vectorULL
        __init__(vnl_vectorULL self, vnl_vectorULL arg0, unsigned long long arg1, vnl_tag_add arg2) -> vnl_vectorULL
        __init__(vnl_vectorULL self, vnl_vectorULL arg0, unsigned long long arg1, vnl_tag_sub arg2) -> vnl_vectorULL
        __init__(vnl_vectorULL self, vnl_matrixULL arg0, vnl_vectorULL arg1, vnl_tag_mul arg2) -> vnl_vectorULL
        __init__(vnl_vectorULL self, vnl_vectorULL arg0, vnl_matrixULL arg1, vnl_tag_mul arg2) -> vnl_vectorULL
        __init__(vnl_vectorULL self, vnl_vectorULL that, vnl_tag_grab arg1) -> vnl_vectorULL
        """
        _vnl_vectorPython.vnl_vectorULL_swiginit(self, _vnl_vectorPython.new_vnl_vectorULL(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorULL

    def size(self) -> "unsigned long long":
        """size(vnl_vectorULL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorULL_size(self)


    def put(self, i: 'unsigned long long', v: 'unsigned long long const &') -> "void":
        """put(vnl_vectorULL self, unsigned long long i, unsigned long long const & v)"""
        return _vnl_vectorPython.vnl_vectorULL_put(self, i, v)


    def get(self, i: 'unsigned long long') -> "unsigned long long":
        """get(vnl_vectorULL self, unsigned long long i) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorULL_get(self, i)


    def fill(self, v: 'unsigned long long const &') -> "vnl_vectorULL &":
        """fill(vnl_vectorULL self, unsigned long long const & v) -> vnl_vectorULL"""
        return _vnl_vectorPython.vnl_vectorULL_fill(self, v)


    def copy_in(self, ptr: 'unsigned long long const *') -> "vnl_vectorULL &":
        """copy_in(vnl_vectorULL self, unsigned long long const * ptr) -> vnl_vectorULL"""
        return _vnl_vectorPython.vnl_vectorULL_copy_in(self, ptr)


    def copy_out(self, arg0: 'unsigned long long *') -> "void":
        """copy_out(vnl_vectorULL self, unsigned long long * arg0)"""
        return _vnl_vectorPython.vnl_vectorULL_copy_out(self, arg0)


    def set(self, ptr: 'unsigned long long const *') -> "vnl_vectorULL &":
        """set(vnl_vectorULL self, unsigned long long const * ptr) -> vnl_vectorULL"""
        return _vnl_vectorPython.vnl_vectorULL_set(self, ptr)


    def __call__(self, *args) -> "unsigned long long const &":
        """
        __call__(vnl_vectorULL self, unsigned long long i) -> unsigned long long
        __call__(vnl_vectorULL self, unsigned long long i) -> unsigned long long const &
        """
        return _vnl_vectorPython.vnl_vectorULL___call__(self, *args)


    def __idiv__(self, arg0: 'unsigned long long') -> "vnl_vectorULL &":
        """__idiv__(vnl_vectorULL self, unsigned long long arg0) -> vnl_vectorULL"""
        return _vnl_vectorPython.vnl_vectorULL___idiv__(self, arg0)


    def __iadd__(self, *args) -> "vnl_vectorULL &":
        """
        __iadd__(vnl_vectorULL self, unsigned long long arg0) -> vnl_vectorULL
        __iadd__(vnl_vectorULL self, vnl_vectorULL rhs) -> vnl_vectorULL
        """
        return _vnl_vectorPython.vnl_vectorULL___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_vectorULL &":
        """
        __isub__(vnl_vectorULL self, unsigned long long value) -> vnl_vectorULL
        __isub__(vnl_vectorULL self, vnl_vectorULL rhs) -> vnl_vectorULL
        """
        return _vnl_vectorPython.vnl_vectorULL___isub__(self, *args)


    def pre_multiply(self, M: 'vnl_matrixULL') -> "vnl_vectorULL &":
        """pre_multiply(vnl_vectorULL self, vnl_matrixULL M) -> vnl_vectorULL"""
        return _vnl_vectorPython.vnl_vectorULL_pre_multiply(self, M)


    def post_multiply(self, M: 'vnl_matrixULL') -> "vnl_vectorULL &":
        """post_multiply(vnl_vectorULL self, vnl_matrixULL M) -> vnl_vectorULL"""
        return _vnl_vectorPython.vnl_vectorULL_post_multiply(self, M)


    def __imul__(self, *args) -> "vnl_vectorULL &":
        """
        __imul__(vnl_vectorULL self, unsigned long long arg0) -> vnl_vectorULL
        __imul__(vnl_vectorULL self, vnl_matrixULL m) -> vnl_vectorULL
        """
        return _vnl_vectorPython.vnl_vectorULL___imul__(self, *args)


    def __pos__(self) -> "vnl_vectorULL":
        """__pos__(vnl_vectorULL self) -> vnl_vectorULL"""
        return _vnl_vectorPython.vnl_vectorULL___pos__(self)


    def __neg__(self) -> "vnl_vectorULL":
        """__neg__(vnl_vectorULL self) -> vnl_vectorULL"""
        return _vnl_vectorPython.vnl_vectorULL___neg__(self)


    def __div__(self, v: 'unsigned long long') -> "vnl_vectorULL":
        """__div__(vnl_vectorULL self, unsigned long long v) -> vnl_vectorULL"""
        return _vnl_vectorPython.vnl_vectorULL___div__(self, v)


    def __add__(self, *args) -> "vnl_vectorULL":
        """
        __add__(vnl_vectorULL self, unsigned long long v) -> vnl_vectorULL
        __add__(vnl_vectorULL self, vnl_vectorULL v) -> vnl_vectorULL
        """
        return _vnl_vectorPython.vnl_vectorULL___add__(self, *args)


    def __sub__(self, *args) -> "vnl_vectorULL":
        """
        __sub__(vnl_vectorULL self, unsigned long long v) -> vnl_vectorULL
        __sub__(vnl_vectorULL self, vnl_vectorULL v) -> vnl_vectorULL
        """
        return _vnl_vectorPython.vnl_vectorULL___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_vectorULL":
        """
        __mul__(vnl_vectorULL self, unsigned long long v) -> vnl_vectorULL
        __mul__(vnl_vectorULL self, vnl_matrixULL M) -> vnl_vectorULL
        """
        return _vnl_vectorPython.vnl_vectorULL___mul__(self, *args)


    def data_block(self, *args) -> "unsigned long long *":
        """
        data_block(vnl_vectorULL self) -> unsigned long long const
        data_block(vnl_vectorULL self) -> unsigned long long *
        """
        return _vnl_vectorPython.vnl_vectorULL_data_block(self, *args)


    def begin(self, *args) -> "unsigned long long const *":
        """
        begin(vnl_vectorULL self) -> unsigned long long
        begin(vnl_vectorULL self) -> unsigned long long const *
        """
        return _vnl_vectorPython.vnl_vectorULL_begin(self, *args)


    def end(self, *args) -> "unsigned long long const *":
        """
        end(vnl_vectorULL self) -> unsigned long long
        end(vnl_vectorULL self) -> unsigned long long const *
        """
        return _vnl_vectorPython.vnl_vectorULL_end(self, *args)


    def extract(self, len: 'unsigned long long', start: 'unsigned long long'=0) -> "vnl_vectorULL":
        """
        extract(vnl_vectorULL self, unsigned long long len, unsigned long long start=0) -> vnl_vectorULL
        extract(vnl_vectorULL self, unsigned long long len) -> vnl_vectorULL
        """
        return _vnl_vectorPython.vnl_vectorULL_extract(self, len, start)


    def update(self, arg0: 'vnl_vectorULL', start: 'unsigned long long'=0) -> "vnl_vectorULL &":
        """
        update(vnl_vectorULL self, vnl_vectorULL arg0, unsigned long long start=0) -> vnl_vectorULL
        update(vnl_vectorULL self, vnl_vectorULL arg0) -> vnl_vectorULL
        """
        return _vnl_vectorPython.vnl_vectorULL_update(self, arg0, start)


    def squared_magnitude(self) -> "unsigned long long":
        """squared_magnitude(vnl_vectorULL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorULL_squared_magnitude(self)


    def magnitude(self) -> "unsigned long long":
        """magnitude(vnl_vectorULL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorULL_magnitude(self)


    def one_norm(self) -> "unsigned long long":
        """one_norm(vnl_vectorULL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorULL_one_norm(self)


    def two_norm(self) -> "unsigned long long":
        """two_norm(vnl_vectorULL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorULL_two_norm(self)


    def inf_norm(self) -> "unsigned long long":
        """inf_norm(vnl_vectorULL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorULL_inf_norm(self)


    def normalize(self) -> "vnl_vectorULL &":
        """normalize(vnl_vectorULL self) -> vnl_vectorULL"""
        return _vnl_vectorPython.vnl_vectorULL_normalize(self)


    def rms(self) -> "unsigned long long":
        """rms(vnl_vectorULL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorULL_rms(self)


    def min_value(self) -> "unsigned long long":
        """min_value(vnl_vectorULL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorULL_min_value(self)


    def max_value(self) -> "unsigned long long":
        """max_value(vnl_vectorULL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorULL_max_value(self)


    def arg_min(self) -> "unsigned long long":
        """arg_min(vnl_vectorULL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorULL_arg_min(self)


    def arg_max(self) -> "unsigned long long":
        """arg_max(vnl_vectorULL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorULL_arg_max(self)


    def mean(self) -> "unsigned long long":
        """mean(vnl_vectorULL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorULL_mean(self)


    def sum(self) -> "unsigned long long":
        """sum(vnl_vectorULL self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorULL_sum(self)


    def flip(self, *args) -> "vnl_vectorULL &":
        """
        flip(vnl_vectorULL self) -> vnl_vectorULL
        flip(vnl_vectorULL self, unsigned long long const & b, unsigned long long const & e) -> vnl_vectorULL
        """
        return _vnl_vectorPython.vnl_vectorULL_flip(self, *args)


    def roll(self, shift: 'int const &') -> "vnl_vectorULL":
        """roll(vnl_vectorULL self, int const & shift) -> vnl_vectorULL"""
        return _vnl_vectorPython.vnl_vectorULL_roll(self, shift)


    def roll_inplace(self, shift: 'int const &') -> "vnl_vectorULL &":
        """roll_inplace(vnl_vectorULL self, int const & shift) -> vnl_vectorULL"""
        return _vnl_vectorPython.vnl_vectorULL_roll_inplace(self, shift)


    def swap(self, that: 'vnl_vectorULL') -> "void":
        """swap(vnl_vectorULL self, vnl_vectorULL that)"""
        return _vnl_vectorPython.vnl_vectorULL_swap(self, that)


    def assert_size(self, sz: 'unsigned long long') -> "void":
        """assert_size(vnl_vectorULL self, unsigned long long sz)"""
        return _vnl_vectorPython.vnl_vectorULL_assert_size(self, sz)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_vectorULL self)"""
        return _vnl_vectorPython.vnl_vectorULL_assert_finite(self)


    def is_finite(self) -> "bool":
        """is_finite(vnl_vectorULL self) -> bool"""
        return _vnl_vectorPython.vnl_vectorULL_is_finite(self)


    def is_zero(self) -> "bool":
        """is_zero(vnl_vectorULL self) -> bool"""
        return _vnl_vectorPython.vnl_vectorULL_is_zero(self)


    def empty(self) -> "bool":
        """empty(vnl_vectorULL self) -> bool"""
        return _vnl_vectorPython.vnl_vectorULL_empty(self)


    def is_equal(self, rhs: 'vnl_vectorULL', tol: 'double') -> "bool":
        """is_equal(vnl_vectorULL self, vnl_vectorULL rhs, double tol) -> bool"""
        return _vnl_vectorPython.vnl_vectorULL_is_equal(self, rhs, tol)


    def operator_eq(self, v: 'vnl_vectorULL') -> "bool":
        """operator_eq(vnl_vectorULL self, vnl_vectorULL v) -> bool"""
        return _vnl_vectorPython.vnl_vectorULL_operator_eq(self, v)


    def __eq__(self, that: 'vnl_vectorULL') -> "bool":
        """__eq__(vnl_vectorULL self, vnl_vectorULL that) -> bool"""
        return _vnl_vectorPython.vnl_vectorULL___eq__(self, that)


    def __ne__(self, that: 'vnl_vectorULL') -> "bool":
        """__ne__(vnl_vectorULL self, vnl_vectorULL that) -> bool"""
        return _vnl_vectorPython.vnl_vectorULL___ne__(self, that)


    def set_size(self, n: 'unsigned long long') -> "bool":
        """set_size(vnl_vectorULL self, unsigned long long n) -> bool"""
        return _vnl_vectorPython.vnl_vectorULL_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_vectorULL self)"""
        return _vnl_vectorPython.vnl_vectorULL_clear(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_vectorULL self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorULL_read_ascii(self, s)


    def read(s: 'istream') -> "vnl_vectorULL":
        """read(istream s) -> vnl_vectorULL"""
        return _vnl_vectorPython.vnl_vectorULL_read(s)

    read = staticmethod(read)
vnl_vectorULL.size = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_size, None, vnl_vectorULL)
vnl_vectorULL.put = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_put, None, vnl_vectorULL)
vnl_vectorULL.get = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_get, None, vnl_vectorULL)
vnl_vectorULL.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_fill, None, vnl_vectorULL)
vnl_vectorULL.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_copy_in, None, vnl_vectorULL)
vnl_vectorULL.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_copy_out, None, vnl_vectorULL)
vnl_vectorULL.set = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_set, None, vnl_vectorULL)
vnl_vectorULL.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorULL___call__, None, vnl_vectorULL)
vnl_vectorULL.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorULL___idiv__, None, vnl_vectorULL)
vnl_vectorULL.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorULL___iadd__, None, vnl_vectorULL)
vnl_vectorULL.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorULL___isub__, None, vnl_vectorULL)
vnl_vectorULL.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_pre_multiply, None, vnl_vectorULL)
vnl_vectorULL.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_post_multiply, None, vnl_vectorULL)
vnl_vectorULL.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorULL___imul__, None, vnl_vectorULL)
vnl_vectorULL.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorULL___pos__, None, vnl_vectorULL)
vnl_vectorULL.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorULL___neg__, None, vnl_vectorULL)
vnl_vectorULL.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorULL___div__, None, vnl_vectorULL)
vnl_vectorULL.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorULL___add__, None, vnl_vectorULL)
vnl_vectorULL.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorULL___sub__, None, vnl_vectorULL)
vnl_vectorULL.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorULL___mul__, None, vnl_vectorULL)
vnl_vectorULL.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_data_block, None, vnl_vectorULL)
vnl_vectorULL.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_begin, None, vnl_vectorULL)
vnl_vectorULL.end = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_end, None, vnl_vectorULL)
vnl_vectorULL.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_extract, None, vnl_vectorULL)
vnl_vectorULL.update = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_update, None, vnl_vectorULL)
vnl_vectorULL.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_squared_magnitude, None, vnl_vectorULL)
vnl_vectorULL.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_magnitude, None, vnl_vectorULL)
vnl_vectorULL.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_one_norm, None, vnl_vectorULL)
vnl_vectorULL.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_two_norm, None, vnl_vectorULL)
vnl_vectorULL.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_inf_norm, None, vnl_vectorULL)
vnl_vectorULL.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_normalize, None, vnl_vectorULL)
vnl_vectorULL.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_rms, None, vnl_vectorULL)
vnl_vectorULL.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_min_value, None, vnl_vectorULL)
vnl_vectorULL.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_max_value, None, vnl_vectorULL)
vnl_vectorULL.arg_min = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_arg_min, None, vnl_vectorULL)
vnl_vectorULL.arg_max = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_arg_max, None, vnl_vectorULL)
vnl_vectorULL.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_mean, None, vnl_vectorULL)
vnl_vectorULL.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_sum, None, vnl_vectorULL)
vnl_vectorULL.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_flip, None, vnl_vectorULL)
vnl_vectorULL.roll = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_roll, None, vnl_vectorULL)
vnl_vectorULL.roll_inplace = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_roll_inplace, None, vnl_vectorULL)
vnl_vectorULL.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_swap, None, vnl_vectorULL)
vnl_vectorULL.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_assert_size, None, vnl_vectorULL)
vnl_vectorULL.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_assert_finite, None, vnl_vectorULL)
vnl_vectorULL.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_is_finite, None, vnl_vectorULL)
vnl_vectorULL.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_is_zero, None, vnl_vectorULL)
vnl_vectorULL.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_empty, None, vnl_vectorULL)
vnl_vectorULL.is_equal = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_is_equal, None, vnl_vectorULL)
vnl_vectorULL.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_operator_eq, None, vnl_vectorULL)
vnl_vectorULL.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorULL___eq__, None, vnl_vectorULL)
vnl_vectorULL.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorULL___ne__, None, vnl_vectorULL)
vnl_vectorULL.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_set_size, None, vnl_vectorULL)
vnl_vectorULL.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_clear, None, vnl_vectorULL)
vnl_vectorULL.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorULL_read_ascii, None, vnl_vectorULL)
vnl_vectorULL_swigregister = _vnl_vectorPython.vnl_vectorULL_swigregister
vnl_vectorULL_swigregister(vnl_vectorULL)

def vnl_vectorULL_read(s: 'istream') -> "vnl_vectorULL":
    """vnl_vectorULL_read(istream s) -> vnl_vectorULL"""
    return _vnl_vectorPython.vnl_vectorULL_read(s)

class vnl_vectorUS(object):
    """Proxy of C++ vnl_vectorUS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(vnl_vectorUS self) -> vnl_vectorUS
        __init__(vnl_vectorUS self, unsigned long long len) -> vnl_vectorUS
        __init__(vnl_vectorUS self, unsigned long long len, unsigned short const & v0) -> vnl_vectorUS
        __init__(vnl_vectorUS self, unsigned long long len, unsigned long long n, unsigned short const * values) -> vnl_vectorUS
        __init__(vnl_vectorUS self, unsigned short const * data_block, unsigned long long n) -> vnl_vectorUS
        __init__(vnl_vectorUS self, vnl_vectorUS arg0) -> vnl_vectorUS
        __init__(vnl_vectorUS self, vnl_vectorUS arg0, vnl_vectorUS arg1, vnl_tag_add arg2) -> vnl_vectorUS
        __init__(vnl_vectorUS self, vnl_vectorUS arg0, vnl_vectorUS arg1, vnl_tag_sub arg2) -> vnl_vectorUS
        __init__(vnl_vectorUS self, vnl_vectorUS arg0, unsigned short arg1, vnl_tag_mul arg2) -> vnl_vectorUS
        __init__(vnl_vectorUS self, vnl_vectorUS arg0, unsigned short arg1, vnl_tag_div arg2) -> vnl_vectorUS
        __init__(vnl_vectorUS self, vnl_vectorUS arg0, unsigned short arg1, vnl_tag_add arg2) -> vnl_vectorUS
        __init__(vnl_vectorUS self, vnl_vectorUS arg0, unsigned short arg1, vnl_tag_sub arg2) -> vnl_vectorUS
        __init__(vnl_vectorUS self, vnl_matrixUS arg0, vnl_vectorUS arg1, vnl_tag_mul arg2) -> vnl_vectorUS
        __init__(vnl_vectorUS self, vnl_vectorUS arg0, vnl_matrixUS arg1, vnl_tag_mul arg2) -> vnl_vectorUS
        __init__(vnl_vectorUS self, vnl_vectorUS that, vnl_tag_grab arg1) -> vnl_vectorUS
        """
        _vnl_vectorPython.vnl_vectorUS_swiginit(self, _vnl_vectorPython.new_vnl_vectorUS(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorUS

    def size(self) -> "unsigned long long":
        """size(vnl_vectorUS self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorUS_size(self)


    def put(self, i: 'unsigned long long', v: 'unsigned short const &') -> "void":
        """put(vnl_vectorUS self, unsigned long long i, unsigned short const & v)"""
        return _vnl_vectorPython.vnl_vectorUS_put(self, i, v)


    def get(self, i: 'unsigned long long') -> "unsigned short":
        """get(vnl_vectorUS self, unsigned long long i) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_get(self, i)


    def fill(self, v: 'unsigned short const &') -> "vnl_vectorUS &":
        """fill(vnl_vectorUS self, unsigned short const & v) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS_fill(self, v)


    def copy_in(self, ptr: 'unsigned short const *') -> "vnl_vectorUS &":
        """copy_in(vnl_vectorUS self, unsigned short const * ptr) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS_copy_in(self, ptr)


    def copy_out(self, arg0: 'unsigned short *') -> "void":
        """copy_out(vnl_vectorUS self, unsigned short * arg0)"""
        return _vnl_vectorPython.vnl_vectorUS_copy_out(self, arg0)


    def set(self, ptr: 'unsigned short const *') -> "vnl_vectorUS &":
        """set(vnl_vectorUS self, unsigned short const * ptr) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS_set(self, ptr)


    def __call__(self, *args) -> "unsigned short const &":
        """
        __call__(vnl_vectorUS self, unsigned long long i) -> unsigned short
        __call__(vnl_vectorUS self, unsigned long long i) -> unsigned short const &
        """
        return _vnl_vectorPython.vnl_vectorUS___call__(self, *args)


    def __idiv__(self, arg0: 'unsigned short') -> "vnl_vectorUS &":
        """__idiv__(vnl_vectorUS self, unsigned short arg0) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS___idiv__(self, arg0)


    def __iadd__(self, *args) -> "vnl_vectorUS &":
        """
        __iadd__(vnl_vectorUS self, unsigned short arg0) -> vnl_vectorUS
        __iadd__(vnl_vectorUS self, vnl_vectorUS rhs) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_vectorUS &":
        """
        __isub__(vnl_vectorUS self, unsigned short value) -> vnl_vectorUS
        __isub__(vnl_vectorUS self, vnl_vectorUS rhs) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS___isub__(self, *args)


    def pre_multiply(self, M: 'vnl_matrixUS') -> "vnl_vectorUS &":
        """pre_multiply(vnl_vectorUS self, vnl_matrixUS M) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS_pre_multiply(self, M)


    def post_multiply(self, M: 'vnl_matrixUS') -> "vnl_vectorUS &":
        """post_multiply(vnl_vectorUS self, vnl_matrixUS M) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS_post_multiply(self, M)


    def __imul__(self, *args) -> "vnl_vectorUS &":
        """
        __imul__(vnl_vectorUS self, unsigned short arg0) -> vnl_vectorUS
        __imul__(vnl_vectorUS self, vnl_matrixUS m) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS___imul__(self, *args)


    def __pos__(self) -> "vnl_vectorUS":
        """__pos__(vnl_vectorUS self) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS___pos__(self)


    def __neg__(self) -> "vnl_vectorUS":
        """__neg__(vnl_vectorUS self) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS___neg__(self)


    def __div__(self, v: 'unsigned short') -> "vnl_vectorUS":
        """__div__(vnl_vectorUS self, unsigned short v) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS___div__(self, v)


    def __add__(self, *args) -> "vnl_vectorUS":
        """
        __add__(vnl_vectorUS self, unsigned short v) -> vnl_vectorUS
        __add__(vnl_vectorUS self, vnl_vectorUS v) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS___add__(self, *args)


    def __sub__(self, *args) -> "vnl_vectorUS":
        """
        __sub__(vnl_vectorUS self, unsigned short v) -> vnl_vectorUS
        __sub__(vnl_vectorUS self, vnl_vectorUS v) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS___sub__(self, *args)


    def __mul__(self, *args) -> "vnl_vectorUS":
        """
        __mul__(vnl_vectorUS self, unsigned short v) -> vnl_vectorUS
        __mul__(vnl_vectorUS self, vnl_matrixUS M) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS___mul__(self, *args)


    def data_block(self, *args) -> "unsigned short *":
        """
        data_block(vnl_vectorUS self) -> unsigned short const
        data_block(vnl_vectorUS self) -> unsigned short *
        """
        return _vnl_vectorPython.vnl_vectorUS_data_block(self, *args)


    def begin(self, *args) -> "unsigned short const *":
        """
        begin(vnl_vectorUS self) -> unsigned short
        begin(vnl_vectorUS self) -> unsigned short const *
        """
        return _vnl_vectorPython.vnl_vectorUS_begin(self, *args)


    def end(self, *args) -> "unsigned short const *":
        """
        end(vnl_vectorUS self) -> unsigned short
        end(vnl_vectorUS self) -> unsigned short const *
        """
        return _vnl_vectorPython.vnl_vectorUS_end(self, *args)


    def extract(self, len: 'unsigned long long', start: 'unsigned long long'=0) -> "vnl_vectorUS":
        """
        extract(vnl_vectorUS self, unsigned long long len, unsigned long long start=0) -> vnl_vectorUS
        extract(vnl_vectorUS self, unsigned long long len) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS_extract(self, len, start)


    def update(self, arg0: 'vnl_vectorUS', start: 'unsigned long long'=0) -> "vnl_vectorUS &":
        """
        update(vnl_vectorUS self, vnl_vectorUS arg0, unsigned long long start=0) -> vnl_vectorUS
        update(vnl_vectorUS self, vnl_vectorUS arg0) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS_update(self, arg0, start)


    def squared_magnitude(self) -> "unsigned short":
        """squared_magnitude(vnl_vectorUS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_squared_magnitude(self)


    def magnitude(self) -> "unsigned short":
        """magnitude(vnl_vectorUS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_magnitude(self)


    def one_norm(self) -> "unsigned short":
        """one_norm(vnl_vectorUS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_one_norm(self)


    def two_norm(self) -> "unsigned short":
        """two_norm(vnl_vectorUS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_two_norm(self)


    def inf_norm(self) -> "unsigned short":
        """inf_norm(vnl_vectorUS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_inf_norm(self)


    def normalize(self) -> "vnl_vectorUS &":
        """normalize(vnl_vectorUS self) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS_normalize(self)


    def rms(self) -> "unsigned short":
        """rms(vnl_vectorUS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_rms(self)


    def min_value(self) -> "unsigned short":
        """min_value(vnl_vectorUS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_min_value(self)


    def max_value(self) -> "unsigned short":
        """max_value(vnl_vectorUS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_max_value(self)


    def arg_min(self) -> "unsigned long long":
        """arg_min(vnl_vectorUS self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorUS_arg_min(self)


    def arg_max(self) -> "unsigned long long":
        """arg_max(vnl_vectorUS self) -> unsigned long long"""
        return _vnl_vectorPython.vnl_vectorUS_arg_max(self)


    def mean(self) -> "unsigned short":
        """mean(vnl_vectorUS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_mean(self)


    def sum(self) -> "unsigned short":
        """sum(vnl_vectorUS self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_sum(self)


    def flip(self, *args) -> "vnl_vectorUS &":
        """
        flip(vnl_vectorUS self) -> vnl_vectorUS
        flip(vnl_vectorUS self, unsigned long long const & b, unsigned long long const & e) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS_flip(self, *args)


    def roll(self, shift: 'int const &') -> "vnl_vectorUS":
        """roll(vnl_vectorUS self, int const & shift) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS_roll(self, shift)


    def roll_inplace(self, shift: 'int const &') -> "vnl_vectorUS &":
        """roll_inplace(vnl_vectorUS self, int const & shift) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS_roll_inplace(self, shift)


    def swap(self, that: 'vnl_vectorUS') -> "void":
        """swap(vnl_vectorUS self, vnl_vectorUS that)"""
        return _vnl_vectorPython.vnl_vectorUS_swap(self, that)


    def assert_size(self, sz: 'unsigned long long') -> "void":
        """assert_size(vnl_vectorUS self, unsigned long long sz)"""
        return _vnl_vectorPython.vnl_vectorUS_assert_size(self, sz)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_vectorUS self)"""
        return _vnl_vectorPython.vnl_vectorUS_assert_finite(self)


    def is_finite(self) -> "bool":
        """is_finite(vnl_vectorUS self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS_is_finite(self)


    def is_zero(self) -> "bool":
        """is_zero(vnl_vectorUS self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS_is_zero(self)


    def empty(self) -> "bool":
        """empty(vnl_vectorUS self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS_empty(self)


    def is_equal(self, rhs: 'vnl_vectorUS', tol: 'double') -> "bool":
        """is_equal(vnl_vectorUS self, vnl_vectorUS rhs, double tol) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS_is_equal(self, rhs, tol)


    def operator_eq(self, v: 'vnl_vectorUS') -> "bool":
        """operator_eq(vnl_vectorUS self, vnl_vectorUS v) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS_operator_eq(self, v)


    def __eq__(self, that: 'vnl_vectorUS') -> "bool":
        """__eq__(vnl_vectorUS self, vnl_vectorUS that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS___eq__(self, that)


    def __ne__(self, that: 'vnl_vectorUS') -> "bool":
        """__ne__(vnl_vectorUS self, vnl_vectorUS that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS___ne__(self, that)


    def set_size(self, n: 'unsigned long long') -> "bool":
        """set_size(vnl_vectorUS self, unsigned long long n) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_vectorUS self)"""
        return _vnl_vectorPython.vnl_vectorUS_clear(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_vectorUS self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS_read_ascii(self, s)


    def read(s: 'istream') -> "vnl_vectorUS":
        """read(istream s) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS_read(s)

    read = staticmethod(read)
vnl_vectorUS.size = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_size, None, vnl_vectorUS)
vnl_vectorUS.put = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_put, None, vnl_vectorUS)
vnl_vectorUS.get = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_get, None, vnl_vectorUS)
vnl_vectorUS.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_fill, None, vnl_vectorUS)
vnl_vectorUS.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_copy_in, None, vnl_vectorUS)
vnl_vectorUS.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_copy_out, None, vnl_vectorUS)
vnl_vectorUS.set = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_set, None, vnl_vectorUS)
vnl_vectorUS.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___call__, None, vnl_vectorUS)
vnl_vectorUS.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___idiv__, None, vnl_vectorUS)
vnl_vectorUS.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___iadd__, None, vnl_vectorUS)
vnl_vectorUS.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___isub__, None, vnl_vectorUS)
vnl_vectorUS.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_pre_multiply, None, vnl_vectorUS)
vnl_vectorUS.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_post_multiply, None, vnl_vectorUS)
vnl_vectorUS.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___imul__, None, vnl_vectorUS)
vnl_vectorUS.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___pos__, None, vnl_vectorUS)
vnl_vectorUS.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___neg__, None, vnl_vectorUS)
vnl_vectorUS.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___div__, None, vnl_vectorUS)
vnl_vectorUS.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___add__, None, vnl_vectorUS)
vnl_vectorUS.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___sub__, None, vnl_vectorUS)
vnl_vectorUS.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___mul__, None, vnl_vectorUS)
vnl_vectorUS.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_data_block, None, vnl_vectorUS)
vnl_vectorUS.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_begin, None, vnl_vectorUS)
vnl_vectorUS.end = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_end, None, vnl_vectorUS)
vnl_vectorUS.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_extract, None, vnl_vectorUS)
vnl_vectorUS.update = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_update, None, vnl_vectorUS)
vnl_vectorUS.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_squared_magnitude, None, vnl_vectorUS)
vnl_vectorUS.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_magnitude, None, vnl_vectorUS)
vnl_vectorUS.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_one_norm, None, vnl_vectorUS)
vnl_vectorUS.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_two_norm, None, vnl_vectorUS)
vnl_vectorUS.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_inf_norm, None, vnl_vectorUS)
vnl_vectorUS.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_normalize, None, vnl_vectorUS)
vnl_vectorUS.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_rms, None, vnl_vectorUS)
vnl_vectorUS.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_min_value, None, vnl_vectorUS)
vnl_vectorUS.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_max_value, None, vnl_vectorUS)
vnl_vectorUS.arg_min = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_arg_min, None, vnl_vectorUS)
vnl_vectorUS.arg_max = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_arg_max, None, vnl_vectorUS)
vnl_vectorUS.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_mean, None, vnl_vectorUS)
vnl_vectorUS.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_sum, None, vnl_vectorUS)
vnl_vectorUS.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_flip, None, vnl_vectorUS)
vnl_vectorUS.roll = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_roll, None, vnl_vectorUS)
vnl_vectorUS.roll_inplace = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_roll_inplace, None, vnl_vectorUS)
vnl_vectorUS.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_swap, None, vnl_vectorUS)
vnl_vectorUS.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_assert_size, None, vnl_vectorUS)
vnl_vectorUS.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_assert_finite, None, vnl_vectorUS)
vnl_vectorUS.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_is_finite, None, vnl_vectorUS)
vnl_vectorUS.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_is_zero, None, vnl_vectorUS)
vnl_vectorUS.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_empty, None, vnl_vectorUS)
vnl_vectorUS.is_equal = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_is_equal, None, vnl_vectorUS)
vnl_vectorUS.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_operator_eq, None, vnl_vectorUS)
vnl_vectorUS.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___eq__, None, vnl_vectorUS)
vnl_vectorUS.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___ne__, None, vnl_vectorUS)
vnl_vectorUS.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_set_size, None, vnl_vectorUS)
vnl_vectorUS.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_clear, None, vnl_vectorUS)
vnl_vectorUS.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_read_ascii, None, vnl_vectorUS)
vnl_vectorUS_swigregister = _vnl_vectorPython.vnl_vectorUS_swigregister
vnl_vectorUS_swigregister(vnl_vectorUS)

def vnl_vectorUS_read(s: 'istream') -> "vnl_vectorUS":
    """vnl_vectorUS_read(istream s) -> vnl_vectorUS"""
    return _vnl_vectorPython.vnl_vectorUS_read(s)



