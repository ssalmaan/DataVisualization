# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _vnl_diag_matrixPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vnl_diag_matrixPython', [dirname(__file__)])
        except ImportError:
            import _vnl_diag_matrixPython
            return _vnl_diag_matrixPython
        if fp is not None:
            try:
                _mod = imp.load_module('_vnl_diag_matrixPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vnl_diag_matrixPython = swig_import_helper()
    del swig_import_helper
else:
    import _vnl_diag_matrixPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vnl_matrixPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
class vnl_diag_matrixCF(object):
    """Proxy of C++ vnl_diag_matrixCF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_diag_matrixPython.delete_vnl_diag_matrixCF

    def __imul__(self, v: 'stdcomplexF') -> "vnl_diag_matrixCF &":
        """__imul__(vnl_diag_matrixCF self, stdcomplexF v) -> vnl_diag_matrixCF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF___imul__(self, v)


    def __idiv__(self, v: 'stdcomplexF') -> "vnl_diag_matrixCF &":
        """__idiv__(vnl_diag_matrixCF self, stdcomplexF v) -> vnl_diag_matrixCF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF___idiv__(self, v)


    def invert_in_place(self) -> "vnl_diag_matrixCF &":
        """invert_in_place(vnl_diag_matrixCF self) -> vnl_diag_matrixCF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_invert_in_place(self)


    def determinant(self) -> "stdcomplexF":
        """determinant(vnl_diag_matrixCF self) -> stdcomplexF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_determinant(self)


    def solve(self, *args) -> "void":
        """
        solve(vnl_diag_matrixCF self, vnl_vectorCF b) -> vnl_vectorCF
        solve(vnl_diag_matrixCF self, vnl_vectorCF b, vnl_vectorCF out)
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_solve(self, *args)


    def __call__(self, *args) -> "stdcomplexF const &":
        """
        __call__(vnl_diag_matrixCF self, unsigned int i, unsigned int j) -> stdcomplexF
        __call__(vnl_diag_matrixCF self, unsigned int i, unsigned int j) -> stdcomplexF
        __call__(vnl_diag_matrixCF self, unsigned int i) -> stdcomplexF
        __call__(vnl_diag_matrixCF self, unsigned int i) -> stdcomplexF
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixCF___call__(self, *args)


    def get_diagonal(self) -> "vnl_vectorCF":
        """get_diagonal(vnl_diag_matrixCF self) -> vnl_vectorCF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_get_diagonal(self)


    def diagonal(self) -> "vnl_vectorCF const &":
        """diagonal(vnl_diag_matrixCF self) -> vnl_vectorCF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_diagonal(self)


    def fill_diagonal(self, v: 'stdcomplexF') -> "vnl_diag_matrixCF &":
        """fill_diagonal(vnl_diag_matrixCF self, stdcomplexF v) -> vnl_diag_matrixCF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_fill_diagonal(self, v)


    def set_diagonal(self, v: 'vnl_vectorCF') -> "vnl_diag_matrixCF &":
        """set_diagonal(vnl_diag_matrixCF self, vnl_vectorCF v) -> vnl_diag_matrixCF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_set_diagonal(self, v)


    def begin(self, *args) -> "stdcomplexF const *":
        """
        begin(vnl_diag_matrixCF self) -> stdcomplexF
        begin(vnl_diag_matrixCF self) -> stdcomplexF
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_begin(self, *args)


    def end(self, *args) -> "stdcomplexF const *":
        """
        end(vnl_diag_matrixCF self) -> stdcomplexF
        end(vnl_diag_matrixCF self) -> stdcomplexF
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_end(self, *args)


    def size(self) -> "unsigned int":
        """size(vnl_diag_matrixCF self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_diag_matrixCF self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_diag_matrixCF self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_diag_matrixCF self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', v: 'stdcomplexF') -> "void":
        """put(vnl_diag_matrixCF self, unsigned int r, unsigned int c, stdcomplexF v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_put(self, r, c, v)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "stdcomplexF":
        """get(vnl_diag_matrixCF self, unsigned int r, unsigned int c) -> stdcomplexF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_get(self, r, c)


    def asMatrix(self) -> "vnl_matrixCF":
        """asMatrix(vnl_diag_matrixCF self) -> vnl_matrixCF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_asMatrix(self)


    def set_size(self, n: 'int') -> "void":
        """set_size(vnl_diag_matrixCF self, int n)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_diag_matrixCF self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_clear(self)


    def fill(self, x: 'stdcomplexF') -> "vnl_diag_matrixCF &":
        """fill(vnl_diag_matrixCF self, stdcomplexF x) -> vnl_diag_matrixCF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_fill(self, x)


    def data_block(self, *args) -> "stdcomplexF const *":
        """
        data_block(vnl_diag_matrixCF self) -> stdcomplexF
        data_block(vnl_diag_matrixCF self) -> stdcomplexF
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_data_block(self, *args)


    def set(self, v: 'vnl_vectorCF') -> "vnl_diag_matrixCF &":
        """set(vnl_diag_matrixCF self, vnl_vectorCF v) -> vnl_diag_matrixCF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixCF_set(self, v)


    def __init__(self, *args):
        """
        __init__(vnl_diag_matrixCF self) -> vnl_diag_matrixCF
        __init__(vnl_diag_matrixCF self, unsigned int nn) -> vnl_diag_matrixCF
        __init__(vnl_diag_matrixCF self, unsigned int nn, stdcomplexF value) -> vnl_diag_matrixCF
        __init__(vnl_diag_matrixCF self, vnl_vectorCF that) -> vnl_diag_matrixCF
        __init__(vnl_diag_matrixCF self, vnl_diag_matrixCF arg0) -> vnl_diag_matrixCF
        """
        _vnl_diag_matrixPython.vnl_diag_matrixCF_swiginit(self, _vnl_diag_matrixPython.new_vnl_diag_matrixCF(*args))
vnl_diag_matrixCF.__imul__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF___imul__, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.__idiv__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF___idiv__, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.invert_in_place = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_invert_in_place, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.determinant = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_determinant, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.solve = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_solve, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.__call__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF___call__, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.get_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_get_diagonal, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_diagonal, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.fill_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_fill_diagonal, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.set_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_set_diagonal, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.begin = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_begin, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.end = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_end, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_size, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.rows = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_rows, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.cols = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_cols, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.columns = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_columns, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.put = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_put, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.get = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_get, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.asMatrix = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_asMatrix, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.set_size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_set_size, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.clear = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_clear, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.fill = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_fill, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.data_block = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_data_block, None, vnl_diag_matrixCF)
vnl_diag_matrixCF.set = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixCF_set, None, vnl_diag_matrixCF)
vnl_diag_matrixCF_swigregister = _vnl_diag_matrixPython.vnl_diag_matrixCF_swigregister
vnl_diag_matrixCF_swigregister(vnl_diag_matrixCF)

class vnl_diag_matrixD(object):
    """Proxy of C++ vnl_diag_matrixD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_diag_matrixPython.delete_vnl_diag_matrixD

    def __imul__(self, v: 'double') -> "vnl_diag_matrixD &":
        """__imul__(vnl_diag_matrixD self, double v) -> vnl_diag_matrixD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD___imul__(self, v)


    def __idiv__(self, v: 'double') -> "vnl_diag_matrixD &":
        """__idiv__(vnl_diag_matrixD self, double v) -> vnl_diag_matrixD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD___idiv__(self, v)


    def invert_in_place(self) -> "vnl_diag_matrixD &":
        """invert_in_place(vnl_diag_matrixD self) -> vnl_diag_matrixD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_invert_in_place(self)


    def determinant(self) -> "double":
        """determinant(vnl_diag_matrixD self) -> double"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_determinant(self)


    def solve(self, *args) -> "void":
        """
        solve(vnl_diag_matrixD self, vnl_vectorD b) -> vnl_vectorD
        solve(vnl_diag_matrixD self, vnl_vectorD b, vnl_vectorD out)
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixD_solve(self, *args)


    def __call__(self, *args) -> "double const &":
        """
        __call__(vnl_diag_matrixD self, unsigned int i, unsigned int j) -> double
        __call__(vnl_diag_matrixD self, unsigned int i, unsigned int j) -> double
        __call__(vnl_diag_matrixD self, unsigned int i) -> double
        __call__(vnl_diag_matrixD self, unsigned int i) -> double const &
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixD___call__(self, *args)


    def get_diagonal(self) -> "vnl_vectorD":
        """get_diagonal(vnl_diag_matrixD self) -> vnl_vectorD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_get_diagonal(self)


    def diagonal(self) -> "vnl_vectorD const &":
        """diagonal(vnl_diag_matrixD self) -> vnl_vectorD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_diagonal(self)


    def fill_diagonal(self, v: 'double const &') -> "vnl_diag_matrixD &":
        """fill_diagonal(vnl_diag_matrixD self, double const & v) -> vnl_diag_matrixD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_fill_diagonal(self, v)


    def set_diagonal(self, v: 'vnl_vectorD') -> "vnl_diag_matrixD &":
        """set_diagonal(vnl_diag_matrixD self, vnl_vectorD v) -> vnl_diag_matrixD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_set_diagonal(self, v)


    def begin(self, *args) -> "double const *":
        """
        begin(vnl_diag_matrixD self) -> double
        begin(vnl_diag_matrixD self) -> double const *
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixD_begin(self, *args)


    def end(self, *args) -> "double const *":
        """
        end(vnl_diag_matrixD self) -> double
        end(vnl_diag_matrixD self) -> double const *
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixD_end(self, *args)


    def size(self) -> "unsigned int":
        """size(vnl_diag_matrixD self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_diag_matrixD self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_diag_matrixD self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_diag_matrixD self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', v: 'double const &') -> "void":
        """put(vnl_diag_matrixD self, unsigned int r, unsigned int c, double const & v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_put(self, r, c, v)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "double":
        """get(vnl_diag_matrixD self, unsigned int r, unsigned int c) -> double"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_get(self, r, c)


    def asMatrix(self) -> "vnl_matrixD":
        """asMatrix(vnl_diag_matrixD self) -> vnl_matrixD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_asMatrix(self)


    def set_size(self, n: 'int') -> "void":
        """set_size(vnl_diag_matrixD self, int n)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_diag_matrixD self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_clear(self)


    def fill(self, x: 'double const &') -> "vnl_diag_matrixD &":
        """fill(vnl_diag_matrixD self, double const & x) -> vnl_diag_matrixD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_fill(self, x)


    def data_block(self, *args) -> "double const *":
        """
        data_block(vnl_diag_matrixD self) -> double
        data_block(vnl_diag_matrixD self) -> double const *
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixD_data_block(self, *args)


    def set(self, v: 'vnl_vectorD') -> "vnl_diag_matrixD &":
        """set(vnl_diag_matrixD self, vnl_vectorD v) -> vnl_diag_matrixD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_set(self, v)


    def __init__(self, *args):
        """
        __init__(vnl_diag_matrixD self) -> vnl_diag_matrixD
        __init__(vnl_diag_matrixD self, unsigned int nn) -> vnl_diag_matrixD
        __init__(vnl_diag_matrixD self, unsigned int nn, double const & value) -> vnl_diag_matrixD
        __init__(vnl_diag_matrixD self, vnl_vectorD that) -> vnl_diag_matrixD
        __init__(vnl_diag_matrixD self, vnl_diag_matrixD arg0) -> vnl_diag_matrixD
        """
        _vnl_diag_matrixPython.vnl_diag_matrixD_swiginit(self, _vnl_diag_matrixPython.new_vnl_diag_matrixD(*args))
vnl_diag_matrixD.__imul__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD___imul__, None, vnl_diag_matrixD)
vnl_diag_matrixD.__idiv__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD___idiv__, None, vnl_diag_matrixD)
vnl_diag_matrixD.invert_in_place = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_invert_in_place, None, vnl_diag_matrixD)
vnl_diag_matrixD.determinant = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_determinant, None, vnl_diag_matrixD)
vnl_diag_matrixD.solve = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_solve, None, vnl_diag_matrixD)
vnl_diag_matrixD.__call__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD___call__, None, vnl_diag_matrixD)
vnl_diag_matrixD.get_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_get_diagonal, None, vnl_diag_matrixD)
vnl_diag_matrixD.diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_diagonal, None, vnl_diag_matrixD)
vnl_diag_matrixD.fill_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_fill_diagonal, None, vnl_diag_matrixD)
vnl_diag_matrixD.set_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_set_diagonal, None, vnl_diag_matrixD)
vnl_diag_matrixD.begin = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_begin, None, vnl_diag_matrixD)
vnl_diag_matrixD.end = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_end, None, vnl_diag_matrixD)
vnl_diag_matrixD.size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_size, None, vnl_diag_matrixD)
vnl_diag_matrixD.rows = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_rows, None, vnl_diag_matrixD)
vnl_diag_matrixD.cols = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_cols, None, vnl_diag_matrixD)
vnl_diag_matrixD.columns = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_columns, None, vnl_diag_matrixD)
vnl_diag_matrixD.put = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_put, None, vnl_diag_matrixD)
vnl_diag_matrixD.get = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_get, None, vnl_diag_matrixD)
vnl_diag_matrixD.asMatrix = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_asMatrix, None, vnl_diag_matrixD)
vnl_diag_matrixD.set_size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_set_size, None, vnl_diag_matrixD)
vnl_diag_matrixD.clear = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_clear, None, vnl_diag_matrixD)
vnl_diag_matrixD.fill = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_fill, None, vnl_diag_matrixD)
vnl_diag_matrixD.data_block = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_data_block, None, vnl_diag_matrixD)
vnl_diag_matrixD.set = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_set, None, vnl_diag_matrixD)
vnl_diag_matrixD_swigregister = _vnl_diag_matrixPython.vnl_diag_matrixD_swigregister
vnl_diag_matrixD_swigregister(vnl_diag_matrixD)

class vnl_diag_matrixF(object):
    """Proxy of C++ vnl_diag_matrixF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_diag_matrixPython.delete_vnl_diag_matrixF

    def __imul__(self, v: 'float') -> "vnl_diag_matrixF &":
        """__imul__(vnl_diag_matrixF self, float v) -> vnl_diag_matrixF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF___imul__(self, v)


    def __idiv__(self, v: 'float') -> "vnl_diag_matrixF &":
        """__idiv__(vnl_diag_matrixF self, float v) -> vnl_diag_matrixF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF___idiv__(self, v)


    def invert_in_place(self) -> "vnl_diag_matrixF &":
        """invert_in_place(vnl_diag_matrixF self) -> vnl_diag_matrixF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_invert_in_place(self)


    def determinant(self) -> "float":
        """determinant(vnl_diag_matrixF self) -> float"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_determinant(self)


    def solve(self, *args) -> "void":
        """
        solve(vnl_diag_matrixF self, vnl_vectorF b) -> vnl_vectorF
        solve(vnl_diag_matrixF self, vnl_vectorF b, vnl_vectorF out)
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixF_solve(self, *args)


    def __call__(self, *args) -> "float const &":
        """
        __call__(vnl_diag_matrixF self, unsigned int i, unsigned int j) -> float
        __call__(vnl_diag_matrixF self, unsigned int i, unsigned int j) -> float
        __call__(vnl_diag_matrixF self, unsigned int i) -> float
        __call__(vnl_diag_matrixF self, unsigned int i) -> float const &
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixF___call__(self, *args)


    def get_diagonal(self) -> "vnl_vectorF":
        """get_diagonal(vnl_diag_matrixF self) -> vnl_vectorF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_get_diagonal(self)


    def diagonal(self) -> "vnl_vectorF const &":
        """diagonal(vnl_diag_matrixF self) -> vnl_vectorF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_diagonal(self)


    def fill_diagonal(self, v: 'float const &') -> "vnl_diag_matrixF &":
        """fill_diagonal(vnl_diag_matrixF self, float const & v) -> vnl_diag_matrixF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_fill_diagonal(self, v)


    def set_diagonal(self, v: 'vnl_vectorF') -> "vnl_diag_matrixF &":
        """set_diagonal(vnl_diag_matrixF self, vnl_vectorF v) -> vnl_diag_matrixF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_set_diagonal(self, v)


    def begin(self, *args) -> "float const *":
        """
        begin(vnl_diag_matrixF self) -> float
        begin(vnl_diag_matrixF self) -> float const *
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixF_begin(self, *args)


    def end(self, *args) -> "float const *":
        """
        end(vnl_diag_matrixF self) -> float
        end(vnl_diag_matrixF self) -> float const *
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixF_end(self, *args)


    def size(self) -> "unsigned int":
        """size(vnl_diag_matrixF self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_diag_matrixF self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_diag_matrixF self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_diag_matrixF self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', v: 'float const &') -> "void":
        """put(vnl_diag_matrixF self, unsigned int r, unsigned int c, float const & v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_put(self, r, c, v)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "float":
        """get(vnl_diag_matrixF self, unsigned int r, unsigned int c) -> float"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_get(self, r, c)


    def asMatrix(self) -> "vnl_matrixF":
        """asMatrix(vnl_diag_matrixF self) -> vnl_matrixF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_asMatrix(self)


    def set_size(self, n: 'int') -> "void":
        """set_size(vnl_diag_matrixF self, int n)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_diag_matrixF self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_clear(self)


    def fill(self, x: 'float const &') -> "vnl_diag_matrixF &":
        """fill(vnl_diag_matrixF self, float const & x) -> vnl_diag_matrixF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_fill(self, x)


    def data_block(self, *args) -> "float const *":
        """
        data_block(vnl_diag_matrixF self) -> float
        data_block(vnl_diag_matrixF self) -> float const *
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixF_data_block(self, *args)


    def set(self, v: 'vnl_vectorF') -> "vnl_diag_matrixF &":
        """set(vnl_diag_matrixF self, vnl_vectorF v) -> vnl_diag_matrixF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_set(self, v)


    def __init__(self, *args):
        """
        __init__(vnl_diag_matrixF self) -> vnl_diag_matrixF
        __init__(vnl_diag_matrixF self, unsigned int nn) -> vnl_diag_matrixF
        __init__(vnl_diag_matrixF self, unsigned int nn, float const & value) -> vnl_diag_matrixF
        __init__(vnl_diag_matrixF self, vnl_vectorF that) -> vnl_diag_matrixF
        __init__(vnl_diag_matrixF self, vnl_diag_matrixF arg0) -> vnl_diag_matrixF
        """
        _vnl_diag_matrixPython.vnl_diag_matrixF_swiginit(self, _vnl_diag_matrixPython.new_vnl_diag_matrixF(*args))
vnl_diag_matrixF.__imul__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF___imul__, None, vnl_diag_matrixF)
vnl_diag_matrixF.__idiv__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF___idiv__, None, vnl_diag_matrixF)
vnl_diag_matrixF.invert_in_place = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_invert_in_place, None, vnl_diag_matrixF)
vnl_diag_matrixF.determinant = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_determinant, None, vnl_diag_matrixF)
vnl_diag_matrixF.solve = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_solve, None, vnl_diag_matrixF)
vnl_diag_matrixF.__call__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF___call__, None, vnl_diag_matrixF)
vnl_diag_matrixF.get_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_get_diagonal, None, vnl_diag_matrixF)
vnl_diag_matrixF.diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_diagonal, None, vnl_diag_matrixF)
vnl_diag_matrixF.fill_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_fill_diagonal, None, vnl_diag_matrixF)
vnl_diag_matrixF.set_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_set_diagonal, None, vnl_diag_matrixF)
vnl_diag_matrixF.begin = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_begin, None, vnl_diag_matrixF)
vnl_diag_matrixF.end = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_end, None, vnl_diag_matrixF)
vnl_diag_matrixF.size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_size, None, vnl_diag_matrixF)
vnl_diag_matrixF.rows = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_rows, None, vnl_diag_matrixF)
vnl_diag_matrixF.cols = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_cols, None, vnl_diag_matrixF)
vnl_diag_matrixF.columns = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_columns, None, vnl_diag_matrixF)
vnl_diag_matrixF.put = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_put, None, vnl_diag_matrixF)
vnl_diag_matrixF.get = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_get, None, vnl_diag_matrixF)
vnl_diag_matrixF.asMatrix = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_asMatrix, None, vnl_diag_matrixF)
vnl_diag_matrixF.set_size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_set_size, None, vnl_diag_matrixF)
vnl_diag_matrixF.clear = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_clear, None, vnl_diag_matrixF)
vnl_diag_matrixF.fill = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_fill, None, vnl_diag_matrixF)
vnl_diag_matrixF.data_block = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_data_block, None, vnl_diag_matrixF)
vnl_diag_matrixF.set = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_set, None, vnl_diag_matrixF)
vnl_diag_matrixF_swigregister = _vnl_diag_matrixPython.vnl_diag_matrixF_swigregister
vnl_diag_matrixF_swigregister(vnl_diag_matrixF)

class vnl_diag_matrixLD(object):
    """Proxy of C++ vnl_diag_matrixLD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_diag_matrixPython.delete_vnl_diag_matrixLD

    def __imul__(self, v: 'long double') -> "vnl_diag_matrixLD &":
        """__imul__(vnl_diag_matrixLD self, long double v) -> vnl_diag_matrixLD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD___imul__(self, v)


    def __idiv__(self, v: 'long double') -> "vnl_diag_matrixLD &":
        """__idiv__(vnl_diag_matrixLD self, long double v) -> vnl_diag_matrixLD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD___idiv__(self, v)


    def invert_in_place(self) -> "vnl_diag_matrixLD &":
        """invert_in_place(vnl_diag_matrixLD self) -> vnl_diag_matrixLD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_invert_in_place(self)


    def determinant(self) -> "long double":
        """determinant(vnl_diag_matrixLD self) -> long double"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_determinant(self)


    def solve(self, *args) -> "void":
        """
        solve(vnl_diag_matrixLD self, vnl_vectorLD b) -> vnl_vectorLD
        solve(vnl_diag_matrixLD self, vnl_vectorLD b, vnl_vectorLD out)
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_solve(self, *args)


    def __call__(self, *args) -> "long double const &":
        """
        __call__(vnl_diag_matrixLD self, unsigned int i, unsigned int j) -> long double
        __call__(vnl_diag_matrixLD self, unsigned int i, unsigned int j) -> long double
        __call__(vnl_diag_matrixLD self, unsigned int i) -> long double
        __call__(vnl_diag_matrixLD self, unsigned int i) -> long double const &
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixLD___call__(self, *args)


    def get_diagonal(self) -> "vnl_vectorLD":
        """get_diagonal(vnl_diag_matrixLD self) -> vnl_vectorLD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_get_diagonal(self)


    def diagonal(self) -> "vnl_vectorLD const &":
        """diagonal(vnl_diag_matrixLD self) -> vnl_vectorLD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_diagonal(self)


    def fill_diagonal(self, v: 'long double const &') -> "vnl_diag_matrixLD &":
        """fill_diagonal(vnl_diag_matrixLD self, long double const & v) -> vnl_diag_matrixLD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_fill_diagonal(self, v)


    def set_diagonal(self, v: 'vnl_vectorLD') -> "vnl_diag_matrixLD &":
        """set_diagonal(vnl_diag_matrixLD self, vnl_vectorLD v) -> vnl_diag_matrixLD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_set_diagonal(self, v)


    def begin(self, *args) -> "long double const *":
        """
        begin(vnl_diag_matrixLD self) -> long double
        begin(vnl_diag_matrixLD self) -> long double const *
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_begin(self, *args)


    def end(self, *args) -> "long double const *":
        """
        end(vnl_diag_matrixLD self) -> long double
        end(vnl_diag_matrixLD self) -> long double const *
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_end(self, *args)


    def size(self) -> "unsigned int":
        """size(vnl_diag_matrixLD self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_diag_matrixLD self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_diag_matrixLD self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_diag_matrixLD self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', v: 'long double const &') -> "void":
        """put(vnl_diag_matrixLD self, unsigned int r, unsigned int c, long double const & v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_put(self, r, c, v)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "long double":
        """get(vnl_diag_matrixLD self, unsigned int r, unsigned int c) -> long double"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_get(self, r, c)


    def asMatrix(self) -> "vnl_matrixLD":
        """asMatrix(vnl_diag_matrixLD self) -> vnl_matrixLD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_asMatrix(self)


    def set_size(self, n: 'int') -> "void":
        """set_size(vnl_diag_matrixLD self, int n)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_diag_matrixLD self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_clear(self)


    def fill(self, x: 'long double const &') -> "vnl_diag_matrixLD &":
        """fill(vnl_diag_matrixLD self, long double const & x) -> vnl_diag_matrixLD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_fill(self, x)


    def data_block(self, *args) -> "long double const *":
        """
        data_block(vnl_diag_matrixLD self) -> long double
        data_block(vnl_diag_matrixLD self) -> long double const *
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_data_block(self, *args)


    def set(self, v: 'vnl_vectorLD') -> "vnl_diag_matrixLD &":
        """set(vnl_diag_matrixLD self, vnl_vectorLD v) -> vnl_diag_matrixLD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_set(self, v)


    def __init__(self, *args):
        """
        __init__(vnl_diag_matrixLD self) -> vnl_diag_matrixLD
        __init__(vnl_diag_matrixLD self, unsigned int nn) -> vnl_diag_matrixLD
        __init__(vnl_diag_matrixLD self, unsigned int nn, long double const & value) -> vnl_diag_matrixLD
        __init__(vnl_diag_matrixLD self, vnl_vectorLD that) -> vnl_diag_matrixLD
        __init__(vnl_diag_matrixLD self, vnl_diag_matrixLD arg0) -> vnl_diag_matrixLD
        """
        _vnl_diag_matrixPython.vnl_diag_matrixLD_swiginit(self, _vnl_diag_matrixPython.new_vnl_diag_matrixLD(*args))
vnl_diag_matrixLD.__imul__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD___imul__, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.__idiv__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD___idiv__, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.invert_in_place = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_invert_in_place, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.determinant = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_determinant, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.solve = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_solve, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.__call__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD___call__, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.get_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_get_diagonal, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_diagonal, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.fill_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_fill_diagonal, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.set_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_set_diagonal, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.begin = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_begin, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.end = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_end, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_size, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.rows = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_rows, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.cols = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_cols, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.columns = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_columns, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.put = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_put, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.get = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_get, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.asMatrix = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_asMatrix, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.set_size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_set_size, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.clear = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_clear, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.fill = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_fill, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.data_block = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_data_block, None, vnl_diag_matrixLD)
vnl_diag_matrixLD.set = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_set, None, vnl_diag_matrixLD)
vnl_diag_matrixLD_swigregister = _vnl_diag_matrixPython.vnl_diag_matrixLD_swigregister
vnl_diag_matrixLD_swigregister(vnl_diag_matrixLD)

class vnl_diag_matrixSI(object):
    """Proxy of C++ vnl_diag_matrixSI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_diag_matrixPython.delete_vnl_diag_matrixSI

    def __imul__(self, v: 'int') -> "vnl_diag_matrixSI &":
        """__imul__(vnl_diag_matrixSI self, int v) -> vnl_diag_matrixSI"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI___imul__(self, v)


    def __idiv__(self, v: 'int') -> "vnl_diag_matrixSI &":
        """__idiv__(vnl_diag_matrixSI self, int v) -> vnl_diag_matrixSI"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI___idiv__(self, v)


    def invert_in_place(self) -> "vnl_diag_matrixSI &":
        """invert_in_place(vnl_diag_matrixSI self) -> vnl_diag_matrixSI"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_invert_in_place(self)


    def determinant(self) -> "int":
        """determinant(vnl_diag_matrixSI self) -> int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_determinant(self)


    def solve(self, *args) -> "void":
        """
        solve(vnl_diag_matrixSI self, vnl_vectorSI b) -> vnl_vectorSI
        solve(vnl_diag_matrixSI self, vnl_vectorSI b, vnl_vectorSI out)
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_solve(self, *args)


    def __call__(self, *args) -> "int const &":
        """
        __call__(vnl_diag_matrixSI self, unsigned int i, unsigned int j) -> int
        __call__(vnl_diag_matrixSI self, unsigned int i, unsigned int j) -> int
        __call__(vnl_diag_matrixSI self, unsigned int i) -> int
        __call__(vnl_diag_matrixSI self, unsigned int i) -> int const &
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixSI___call__(self, *args)


    def get_diagonal(self) -> "vnl_vectorSI":
        """get_diagonal(vnl_diag_matrixSI self) -> vnl_vectorSI"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_get_diagonal(self)


    def diagonal(self) -> "vnl_vectorSI const &":
        """diagonal(vnl_diag_matrixSI self) -> vnl_vectorSI"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_diagonal(self)


    def fill_diagonal(self, v: 'int const &') -> "vnl_diag_matrixSI &":
        """fill_diagonal(vnl_diag_matrixSI self, int const & v) -> vnl_diag_matrixSI"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_fill_diagonal(self, v)


    def set_diagonal(self, v: 'vnl_vectorSI') -> "vnl_diag_matrixSI &":
        """set_diagonal(vnl_diag_matrixSI self, vnl_vectorSI v) -> vnl_diag_matrixSI"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_set_diagonal(self, v)


    def begin(self, *args) -> "int const *":
        """
        begin(vnl_diag_matrixSI self) -> int
        begin(vnl_diag_matrixSI self) -> int const *
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_begin(self, *args)


    def end(self, *args) -> "int const *":
        """
        end(vnl_diag_matrixSI self) -> int
        end(vnl_diag_matrixSI self) -> int const *
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_end(self, *args)


    def size(self) -> "unsigned int":
        """size(vnl_diag_matrixSI self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_diag_matrixSI self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_diag_matrixSI self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_diag_matrixSI self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', v: 'int const &') -> "void":
        """put(vnl_diag_matrixSI self, unsigned int r, unsigned int c, int const & v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_put(self, r, c, v)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "int":
        """get(vnl_diag_matrixSI self, unsigned int r, unsigned int c) -> int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_get(self, r, c)


    def asMatrix(self) -> "vnl_matrixSI":
        """asMatrix(vnl_diag_matrixSI self) -> vnl_matrixSI"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_asMatrix(self)


    def set_size(self, n: 'int') -> "void":
        """set_size(vnl_diag_matrixSI self, int n)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_set_size(self, n)


    def clear(self) -> "void":
        """clear(vnl_diag_matrixSI self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_clear(self)


    def fill(self, x: 'int const &') -> "vnl_diag_matrixSI &":
        """fill(vnl_diag_matrixSI self, int const & x) -> vnl_diag_matrixSI"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_fill(self, x)


    def data_block(self, *args) -> "int const *":
        """
        data_block(vnl_diag_matrixSI self) -> int
        data_block(vnl_diag_matrixSI self) -> int const *
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_data_block(self, *args)


    def set(self, v: 'vnl_vectorSI') -> "vnl_diag_matrixSI &":
        """set(vnl_diag_matrixSI self, vnl_vectorSI v) -> vnl_diag_matrixSI"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_set(self, v)


    def __init__(self, *args):
        """
        __init__(vnl_diag_matrixSI self) -> vnl_diag_matrixSI
        __init__(vnl_diag_matrixSI self, unsigned int nn) -> vnl_diag_matrixSI
        __init__(vnl_diag_matrixSI self, unsigned int nn, int const & value) -> vnl_diag_matrixSI
        __init__(vnl_diag_matrixSI self, vnl_vectorSI that) -> vnl_diag_matrixSI
        __init__(vnl_diag_matrixSI self, vnl_diag_matrixSI arg0) -> vnl_diag_matrixSI
        """
        _vnl_diag_matrixPython.vnl_diag_matrixSI_swiginit(self, _vnl_diag_matrixPython.new_vnl_diag_matrixSI(*args))
vnl_diag_matrixSI.__imul__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI___imul__, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.__idiv__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI___idiv__, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.invert_in_place = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_invert_in_place, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.determinant = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_determinant, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.solve = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_solve, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.__call__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI___call__, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.get_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_get_diagonal, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_diagonal, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.fill_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_fill_diagonal, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.set_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_set_diagonal, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.begin = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_begin, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.end = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_end, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_size, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.rows = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_rows, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.cols = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_cols, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.columns = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_columns, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.put = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_put, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.get = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_get, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.asMatrix = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_asMatrix, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.set_size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_set_size, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.clear = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_clear, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.fill = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_fill, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.data_block = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_data_block, None, vnl_diag_matrixSI)
vnl_diag_matrixSI.set = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_set, None, vnl_diag_matrixSI)
vnl_diag_matrixSI_swigregister = _vnl_diag_matrixPython.vnl_diag_matrixSI_swigregister
vnl_diag_matrixSI_swigregister(vnl_diag_matrixSI)



