# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkGiftiMeshIOPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkGiftiMeshIOPython', [dirname(__file__)])
        except ImportError:
            import _itkGiftiMeshIOPython
            return _itkGiftiMeshIOPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkGiftiMeshIOPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkGiftiMeshIOPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkGiftiMeshIOPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkMeshIOBasePython
import ITKCommonBasePython
import pyBasePython
import itkRGBAPixelPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrix_fixedPython
import vnl_matrixPython
import vnl_vectorPython
import stdcomplexPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import itkCovariantVectorPython

def itkMapContainerIRGBAF_New():
  return itkMapContainerIRGBAF.New()


def itkMapContainerIstring_New():
  return itkMapContainerIstring.New()


def itkGiftiMeshIOFactory_New():
  return itkGiftiMeshIOFactory.New()


def itkGiftiMeshIO_New():
  return itkGiftiMeshIO.New()

class itkGiftiMeshIO(itkMeshIOBasePython.itkMeshIOBase):
    """Proxy of C++ itkGiftiMeshIO class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGiftiMeshIO_Pointer":
        """__New_orig__() -> itkGiftiMeshIO_Pointer"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGiftiMeshIO_Pointer":
        """Clone(itkGiftiMeshIO self) -> itkGiftiMeshIO_Pointer"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_Clone(self)


    def GetReadPointData(self) -> "bool":
        """GetReadPointData(itkGiftiMeshIO self) -> bool"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_GetReadPointData(self)


    def SetReadPointData(self, _arg: 'bool const') -> "void":
        """SetReadPointData(itkGiftiMeshIO self, bool const _arg)"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_SetReadPointData(self, _arg)


    def ReadPointDataOn(self) -> "void":
        """ReadPointDataOn(itkGiftiMeshIO self)"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_ReadPointDataOn(self)


    def ReadPointDataOff(self) -> "void":
        """ReadPointDataOff(itkGiftiMeshIO self)"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_ReadPointDataOff(self)


    def SetDirection(self, direction: 'itkMatrixD44') -> "void":
        """SetDirection(itkGiftiMeshIO self, itkMatrixD44 direction)"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_SetDirection(self, direction)


    def GetDirection(self) -> "itkMatrixD44 const &":
        """GetDirection(itkGiftiMeshIO self) -> itkMatrixD44"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_GetDirection(self)


    def GetLabelColorTable(self) -> "itkMapContainerIRGBAF_Pointer":
        """GetLabelColorTable(itkGiftiMeshIO self) -> itkMapContainerIRGBAF_Pointer"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_GetLabelColorTable(self)


    def GetLabelNameTable(self) -> "itkMapContainerIstring_Pointer":
        """GetLabelNameTable(itkGiftiMeshIO self) -> itkMapContainerIstring_Pointer"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_GetLabelNameTable(self)


    def SetLabelColorTable(self, colorMap: 'itkMapContainerIRGBAF') -> "void":
        """SetLabelColorTable(itkGiftiMeshIO self, itkMapContainerIRGBAF colorMap)"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_SetLabelColorTable(self, colorMap)


    def SetLabelNameTable(self, labelMap: 'itkMapContainerIstring') -> "void":
        """SetLabelNameTable(itkGiftiMeshIO self, itkMapContainerIstring labelMap)"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_SetLabelNameTable(self, labelMap)

    __swig_destroy__ = _itkGiftiMeshIOPython.delete_itkGiftiMeshIO

    def cast(obj: 'itkLightObject') -> "itkGiftiMeshIO *":
        """cast(itkLightObject obj) -> itkGiftiMeshIO"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGiftiMeshIO

        Create a new object of the class itkGiftiMeshIO and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGiftiMeshIO.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGiftiMeshIO.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGiftiMeshIO.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGiftiMeshIO.Clone = new_instancemethod(_itkGiftiMeshIOPython.itkGiftiMeshIO_Clone, None, itkGiftiMeshIO)
itkGiftiMeshIO.GetReadPointData = new_instancemethod(_itkGiftiMeshIOPython.itkGiftiMeshIO_GetReadPointData, None, itkGiftiMeshIO)
itkGiftiMeshIO.SetReadPointData = new_instancemethod(_itkGiftiMeshIOPython.itkGiftiMeshIO_SetReadPointData, None, itkGiftiMeshIO)
itkGiftiMeshIO.ReadPointDataOn = new_instancemethod(_itkGiftiMeshIOPython.itkGiftiMeshIO_ReadPointDataOn, None, itkGiftiMeshIO)
itkGiftiMeshIO.ReadPointDataOff = new_instancemethod(_itkGiftiMeshIOPython.itkGiftiMeshIO_ReadPointDataOff, None, itkGiftiMeshIO)
itkGiftiMeshIO.SetDirection = new_instancemethod(_itkGiftiMeshIOPython.itkGiftiMeshIO_SetDirection, None, itkGiftiMeshIO)
itkGiftiMeshIO.GetDirection = new_instancemethod(_itkGiftiMeshIOPython.itkGiftiMeshIO_GetDirection, None, itkGiftiMeshIO)
itkGiftiMeshIO.GetLabelColorTable = new_instancemethod(_itkGiftiMeshIOPython.itkGiftiMeshIO_GetLabelColorTable, None, itkGiftiMeshIO)
itkGiftiMeshIO.GetLabelNameTable = new_instancemethod(_itkGiftiMeshIOPython.itkGiftiMeshIO_GetLabelNameTable, None, itkGiftiMeshIO)
itkGiftiMeshIO.SetLabelColorTable = new_instancemethod(_itkGiftiMeshIOPython.itkGiftiMeshIO_SetLabelColorTable, None, itkGiftiMeshIO)
itkGiftiMeshIO.SetLabelNameTable = new_instancemethod(_itkGiftiMeshIOPython.itkGiftiMeshIO_SetLabelNameTable, None, itkGiftiMeshIO)
itkGiftiMeshIO_swigregister = _itkGiftiMeshIOPython.itkGiftiMeshIO_swigregister
itkGiftiMeshIO_swigregister(itkGiftiMeshIO)

def itkGiftiMeshIO___New_orig__() -> "itkGiftiMeshIO_Pointer":
    """itkGiftiMeshIO___New_orig__() -> itkGiftiMeshIO_Pointer"""
    return _itkGiftiMeshIOPython.itkGiftiMeshIO___New_orig__()

def itkGiftiMeshIO_cast(obj: 'itkLightObject') -> "itkGiftiMeshIO *":
    """itkGiftiMeshIO_cast(itkLightObject obj) -> itkGiftiMeshIO"""
    return _itkGiftiMeshIOPython.itkGiftiMeshIO_cast(obj)

class itkGiftiMeshIOFactory(ITKCommonBasePython.itkObjectFactoryBase):
    """Proxy of C++ itkGiftiMeshIOFactory class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGiftiMeshIOFactory_Pointer":
        """__New_orig__() -> itkGiftiMeshIOFactory_Pointer"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIOFactory___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def RegisterOneFactory() -> "void":
        """RegisterOneFactory()"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIOFactory_RegisterOneFactory()

    RegisterOneFactory = staticmethod(RegisterOneFactory)
    __swig_destroy__ = _itkGiftiMeshIOPython.delete_itkGiftiMeshIOFactory

    def cast(obj: 'itkLightObject') -> "itkGiftiMeshIOFactory *":
        """cast(itkLightObject obj) -> itkGiftiMeshIOFactory"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIOFactory_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGiftiMeshIOFactory

        Create a new object of the class itkGiftiMeshIOFactory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGiftiMeshIOFactory.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGiftiMeshIOFactory.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGiftiMeshIOFactory.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGiftiMeshIOFactory_swigregister = _itkGiftiMeshIOPython.itkGiftiMeshIOFactory_swigregister
itkGiftiMeshIOFactory_swigregister(itkGiftiMeshIOFactory)

def itkGiftiMeshIOFactory___New_orig__() -> "itkGiftiMeshIOFactory_Pointer":
    """itkGiftiMeshIOFactory___New_orig__() -> itkGiftiMeshIOFactory_Pointer"""
    return _itkGiftiMeshIOPython.itkGiftiMeshIOFactory___New_orig__()

def itkGiftiMeshIOFactory_RegisterOneFactory() -> "void":
    """itkGiftiMeshIOFactory_RegisterOneFactory()"""
    return _itkGiftiMeshIOPython.itkGiftiMeshIOFactory_RegisterOneFactory()

def itkGiftiMeshIOFactory_cast(obj: 'itkLightObject') -> "itkGiftiMeshIOFactory *":
    """itkGiftiMeshIOFactory_cast(itkLightObject obj) -> itkGiftiMeshIOFactory"""
    return _itkGiftiMeshIOPython.itkGiftiMeshIOFactory_cast(obj)

class itkMapContainerIRGBAF(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkMapContainerIRGBAF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerIRGBAF self) -> itkMapContainerIRGBAF
        __init__(itkMapContainerIRGBAF self, std::less< int > const & comp) -> itkMapContainerIRGBAF
        """
        _itkGiftiMeshIOPython.itkMapContainerIRGBAF_swiginit(self, _itkGiftiMeshIOPython.new_itkMapContainerIRGBAF(*args))

    def __New_orig__() -> "itkMapContainerIRGBAF_Pointer":
        """__New_orig__() -> itkMapContainerIRGBAF_Pointer"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerIRGBAF_Pointer":
        """Clone(itkMapContainerIRGBAF self) -> itkMapContainerIRGBAF_Pointer"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_Clone(self)


    def CastToSTLContainer(self) -> "std::map< int,itkRGBAPixelF,std::less< int >,std::allocator< std::pair< int const,itkRGBAPixelF > > > &":
        """CastToSTLContainer(itkMapContainerIRGBAF self) -> std::map< int,itkRGBAPixelF,std::less< int >,std::allocator< std::pair< int const,itkRGBAPixelF > > > &"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< int,itkRGBAPixelF,std::less< int >,std::allocator< std::pair< int const,itkRGBAPixelF > > > const &":
        """CastToSTLConstContainer(itkMapContainerIRGBAF self) -> std::map< int,itkRGBAPixelF,std::less< int >,std::allocator< std::pair< int const,itkRGBAPixelF > > > const &"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkRGBAPixelF const &":
        """
        ElementAt(itkMapContainerIRGBAF self, int arg0) -> itkRGBAPixelF
        ElementAt(itkMapContainerIRGBAF self, int arg0) -> itkRGBAPixelF
        """
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'int') -> "itkRGBAPixelF &":
        """CreateElementAt(itkMapContainerIRGBAF self, int arg0) -> itkRGBAPixelF"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'int') -> "itkRGBAPixelF":
        """GetElement(itkMapContainerIRGBAF self, int arg0) -> itkRGBAPixelF"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_GetElement(self, arg0)


    def SetElement(self, arg0: 'int', arg1: 'itkRGBAPixelF') -> "void":
        """SetElement(itkMapContainerIRGBAF self, int arg0, itkRGBAPixelF arg1)"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'int', arg1: 'itkRGBAPixelF') -> "void":
        """InsertElement(itkMapContainerIRGBAF self, int arg0, itkRGBAPixelF arg1)"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'int') -> "bool":
        """IndexExists(itkMapContainerIRGBAF self, int arg0) -> bool"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'int', arg1: 'itkRGBAPixelF') -> "bool":
        """GetElementIfIndexExists(itkMapContainerIRGBAF self, int arg0, itkRGBAPixelF arg1) -> bool"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'int') -> "void":
        """CreateIndex(itkMapContainerIRGBAF self, int arg0)"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'int') -> "void":
        """DeleteIndex(itkMapContainerIRGBAF self, int arg0)"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_DeleteIndex(self, arg0)


    def Size(self) -> "int":
        """Size(itkMapContainerIRGBAF self) -> int"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_Size(self)


    def Reserve(self, arg0: 'int') -> "void":
        """Reserve(itkMapContainerIRGBAF self, int arg0)"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """Squeeze(itkMapContainerIRGBAF self)"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_Squeeze(self)


    def Initialize(self) -> "void":
        """Initialize(itkMapContainerIRGBAF self)"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_Initialize(self)

    __swig_destroy__ = _itkGiftiMeshIOPython.delete_itkMapContainerIRGBAF

    def cast(obj: 'itkLightObject') -> "itkMapContainerIRGBAF *":
        """cast(itkLightObject obj) -> itkMapContainerIRGBAF"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerIRGBAF

        Create a new object of the class itkMapContainerIRGBAF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerIRGBAF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerIRGBAF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerIRGBAF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerIRGBAF.Clone = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_Clone, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.CastToSTLContainer = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_CastToSTLContainer, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.CastToSTLConstContainer = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_CastToSTLConstContainer, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.ElementAt = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_ElementAt, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.CreateElementAt = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_CreateElementAt, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.GetElement = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_GetElement, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.SetElement = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_SetElement, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.InsertElement = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_InsertElement, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.IndexExists = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_IndexExists, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.GetElementIfIndexExists = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_GetElementIfIndexExists, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.CreateIndex = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_CreateIndex, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.DeleteIndex = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_DeleteIndex, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.Size = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_Size, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.Reserve = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_Reserve, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.Squeeze = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_Squeeze, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF.Initialize = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_Initialize, None, itkMapContainerIRGBAF)
itkMapContainerIRGBAF_swigregister = _itkGiftiMeshIOPython.itkMapContainerIRGBAF_swigregister
itkMapContainerIRGBAF_swigregister(itkMapContainerIRGBAF)

def itkMapContainerIRGBAF___New_orig__() -> "itkMapContainerIRGBAF_Pointer":
    """itkMapContainerIRGBAF___New_orig__() -> itkMapContainerIRGBAF_Pointer"""
    return _itkGiftiMeshIOPython.itkMapContainerIRGBAF___New_orig__()

def itkMapContainerIRGBAF_cast(obj: 'itkLightObject') -> "itkMapContainerIRGBAF *":
    """itkMapContainerIRGBAF_cast(itkLightObject obj) -> itkMapContainerIRGBAF"""
    return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_cast(obj)

class itkMapContainerIstring(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkMapContainerIstring class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerIstring self) -> itkMapContainerIstring
        __init__(itkMapContainerIstring self, std::less< int > const & comp) -> itkMapContainerIstring
        """
        _itkGiftiMeshIOPython.itkMapContainerIstring_swiginit(self, _itkGiftiMeshIOPython.new_itkMapContainerIstring(*args))

    def __New_orig__() -> "itkMapContainerIstring_Pointer":
        """__New_orig__() -> itkMapContainerIstring_Pointer"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMapContainerIstring_Pointer":
        """Clone(itkMapContainerIstring self) -> itkMapContainerIstring_Pointer"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_Clone(self)


    def CastToSTLContainer(self) -> "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > &":
        """CastToSTLContainer(itkMapContainerIstring self) -> std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > &"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &":
        """CastToSTLConstContainer(itkMapContainerIstring self) -> std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "std::string const &":
        """
        ElementAt(itkMapContainerIstring self, int arg0) -> std::string
        ElementAt(itkMapContainerIstring self, int arg0) -> std::string const &
        """
        return _itkGiftiMeshIOPython.itkMapContainerIstring_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'int') -> "std::string &":
        """CreateElementAt(itkMapContainerIstring self, int arg0) -> std::string &"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'int') -> "std::string":
        """GetElement(itkMapContainerIstring self, int arg0) -> std::string"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_GetElement(self, arg0)


    def SetElement(self, arg0: 'int', arg1: 'std::string') -> "void":
        """SetElement(itkMapContainerIstring self, int arg0, std::string arg1)"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'int', arg1: 'std::string') -> "void":
        """InsertElement(itkMapContainerIstring self, int arg0, std::string arg1)"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'int') -> "bool":
        """IndexExists(itkMapContainerIstring self, int arg0) -> bool"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'int', arg1: 'std::string *') -> "bool":
        """GetElementIfIndexExists(itkMapContainerIstring self, int arg0, std::string * arg1) -> bool"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'int') -> "void":
        """CreateIndex(itkMapContainerIstring self, int arg0)"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'int') -> "void":
        """DeleteIndex(itkMapContainerIstring self, int arg0)"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_DeleteIndex(self, arg0)


    def Size(self) -> "int":
        """Size(itkMapContainerIstring self) -> int"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_Size(self)


    def Reserve(self, arg0: 'int') -> "void":
        """Reserve(itkMapContainerIstring self, int arg0)"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """Squeeze(itkMapContainerIstring self)"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_Squeeze(self)


    def Initialize(self) -> "void":
        """Initialize(itkMapContainerIstring self)"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_Initialize(self)

    __swig_destroy__ = _itkGiftiMeshIOPython.delete_itkMapContainerIstring

    def cast(obj: 'itkLightObject') -> "itkMapContainerIstring *":
        """cast(itkLightObject obj) -> itkMapContainerIstring"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerIstring

        Create a new object of the class itkMapContainerIstring and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerIstring.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerIstring.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerIstring.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerIstring.Clone = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_Clone, None, itkMapContainerIstring)
itkMapContainerIstring.CastToSTLContainer = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_CastToSTLContainer, None, itkMapContainerIstring)
itkMapContainerIstring.CastToSTLConstContainer = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_CastToSTLConstContainer, None, itkMapContainerIstring)
itkMapContainerIstring.ElementAt = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_ElementAt, None, itkMapContainerIstring)
itkMapContainerIstring.CreateElementAt = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_CreateElementAt, None, itkMapContainerIstring)
itkMapContainerIstring.GetElement = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_GetElement, None, itkMapContainerIstring)
itkMapContainerIstring.SetElement = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_SetElement, None, itkMapContainerIstring)
itkMapContainerIstring.InsertElement = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_InsertElement, None, itkMapContainerIstring)
itkMapContainerIstring.IndexExists = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_IndexExists, None, itkMapContainerIstring)
itkMapContainerIstring.GetElementIfIndexExists = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_GetElementIfIndexExists, None, itkMapContainerIstring)
itkMapContainerIstring.CreateIndex = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_CreateIndex, None, itkMapContainerIstring)
itkMapContainerIstring.DeleteIndex = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_DeleteIndex, None, itkMapContainerIstring)
itkMapContainerIstring.Size = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_Size, None, itkMapContainerIstring)
itkMapContainerIstring.Reserve = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_Reserve, None, itkMapContainerIstring)
itkMapContainerIstring.Squeeze = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_Squeeze, None, itkMapContainerIstring)
itkMapContainerIstring.Initialize = new_instancemethod(_itkGiftiMeshIOPython.itkMapContainerIstring_Initialize, None, itkMapContainerIstring)
itkMapContainerIstring_swigregister = _itkGiftiMeshIOPython.itkMapContainerIstring_swigregister
itkMapContainerIstring_swigregister(itkMapContainerIstring)

def itkMapContainerIstring___New_orig__() -> "itkMapContainerIstring_Pointer":
    """itkMapContainerIstring___New_orig__() -> itkMapContainerIstring_Pointer"""
    return _itkGiftiMeshIOPython.itkMapContainerIstring___New_orig__()

def itkMapContainerIstring_cast(obj: 'itkLightObject') -> "itkMapContainerIstring *":
    """itkMapContainerIstring_cast(itkLightObject obj) -> itkMapContainerIstring"""
    return _itkGiftiMeshIOPython.itkMapContainerIstring_cast(obj)



