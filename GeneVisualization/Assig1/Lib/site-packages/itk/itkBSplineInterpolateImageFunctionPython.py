# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkBSplineInterpolateImageFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBSplineInterpolateImageFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkBSplineInterpolateImageFunctionPython
            return _itkBSplineInterpolateImageFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBSplineInterpolateImageFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBSplineInterpolateImageFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBSplineInterpolateImageFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import pyBasePython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import itkSizePython
import ITKCommonBasePython
import itkImagePython
import itkOffsetPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkContinuousIndexPython
import itkInterpolateImageFunctionPython
import itkImageFunctionBasePython
import itkFunctionBasePython
import itkArrayPython

def itkBSplineInterpolateImageFunctionIF3DF_New():
  return itkBSplineInterpolateImageFunctionIF3DF.New()


def itkBSplineInterpolateImageFunctionIUS3DUS_New():
  return itkBSplineInterpolateImageFunctionIUS3DUS.New()


def itkBSplineInterpolateImageFunctionIUC3DUC_New():
  return itkBSplineInterpolateImageFunctionIUC3DUC.New()


def itkBSplineInterpolateImageFunctionISS3DSS_New():
  return itkBSplineInterpolateImageFunctionISS3DSS.New()


def itkBSplineInterpolateImageFunctionIF2DF_New():
  return itkBSplineInterpolateImageFunctionIF2DF.New()


def itkBSplineInterpolateImageFunctionIUS2DUS_New():
  return itkBSplineInterpolateImageFunctionIUS2DUS.New()


def itkBSplineInterpolateImageFunctionIUC2DUC_New():
  return itkBSplineInterpolateImageFunctionIUC2DUC.New()


def itkBSplineInterpolateImageFunctionISS2DSS_New():
  return itkBSplineInterpolateImageFunctionISS2DSS.New()

class itkBSplineInterpolateImageFunctionIF2DF(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionIF2DF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineInterpolateImageFunctionIF2DF_Pointer":
        """__New_orig__() -> itkBSplineInterpolateImageFunctionIF2DF_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineInterpolateImageFunctionIF2DF_Pointer":
        """Clone(itkBSplineInterpolateImageFunctionIF2DF self) -> itkBSplineInterpolateImageFunctionIF2DF_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_Clone(self)


    def Evaluate(self, *args) -> "double":
        """
        Evaluate(itkBSplineInterpolateImageFunctionIF2DF self, itkPointD2 point) -> double
        Evaluate(itkBSplineInterpolateImageFunctionIF2DF self, itkPointD2 point, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_Evaluate(self, *args)


    def EvaluateAtContinuousIndex(self, *args) -> "double":
        """
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionIF2DF self, itkContinuousIndexD2 index) -> double
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionIF2DF self, itkContinuousIndexD2 index, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateAtContinuousIndex(self, *args)


    def EvaluateDerivative(self, *args) -> "itkCovariantVectorD2":
        """
        EvaluateDerivative(itkBSplineInterpolateImageFunctionIF2DF self, itkPointD2 point) -> itkCovariantVectorD2
        EvaluateDerivative(itkBSplineInterpolateImageFunctionIF2DF self, itkPointD2 point, unsigned int threadId) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateDerivative(self, *args)


    def EvaluateDerivativeAtContinuousIndex(self, *args) -> "itkCovariantVectorD2":
        """
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIF2DF self, itkContinuousIndexD2 x) -> itkCovariantVectorD2
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIF2DF self, itkContinuousIndexD2 x, unsigned int threadId) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateDerivativeAtContinuousIndex(self, *args)


    def EvaluateValueAndDerivative(self, *args) -> "void":
        """
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionIF2DF self, itkPointD2 point, double & value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionIF2DF self, itkPointD2 point, double & value, itkCovariantVectorD2 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateValueAndDerivative(self, *args)


    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args) -> "void":
        """
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIF2DF self, itkContinuousIndexD2 x, double & value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIF2DF self, itkContinuousIndexD2 x, double & value, itkCovariantVectorD2 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """SetSplineOrder(itkBSplineInterpolateImageFunctionIF2DF self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineInterpolateImageFunctionIF2DF self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetSplineOrder(self)


    def SetNumberOfWorkUnits(self, numThreads: 'unsigned int') -> "void":
        """SetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionIF2DF self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetNumberOfWorkUnits(self, numThreads)


    def GetNumberOfWorkUnits(self) -> "unsigned int":
        """GetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionIF2DF self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetNumberOfWorkUnits(self)


    def SetUseImageDirection(self, _arg: 'bool const') -> "void":
        """SetUseImageDirection(itkBSplineInterpolateImageFunctionIF2DF self, bool const _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self) -> "bool":
        """GetUseImageDirection(itkBSplineInterpolateImageFunctionIF2DF self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetUseImageDirection(self)


    def UseImageDirectionOn(self) -> "void":
        """UseImageDirectionOn(itkBSplineInterpolateImageFunctionIF2DF self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_UseImageDirectionOn(self)


    def UseImageDirectionOff(self) -> "void":
        """UseImageDirectionOff(itkBSplineInterpolateImageFunctionIF2DF self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIF2DF

    def cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionIF2DF *":
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIF2DF"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIF2DF

        Create a new object of the class itkBSplineInterpolateImageFunctionIF2DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIF2DF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIF2DF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionIF2DF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionIF2DF.Clone = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_Clone, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_Evaluate, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateDerivative, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateValueAndDerivative, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateValueAndDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetSplineOrder, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetSplineOrder, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.SetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.GetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetUseImageDirection, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetUseImageDirection, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_UseImageDirectionOn, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_UseImageDirectionOff, None, itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_swigregister
itkBSplineInterpolateImageFunctionIF2DF_swigregister(itkBSplineInterpolateImageFunctionIF2DF)

def itkBSplineInterpolateImageFunctionIF2DF___New_orig__() -> "itkBSplineInterpolateImageFunctionIF2DF_Pointer":
    """itkBSplineInterpolateImageFunctionIF2DF___New_orig__() -> itkBSplineInterpolateImageFunctionIF2DF_Pointer"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF___New_orig__()

def itkBSplineInterpolateImageFunctionIF2DF_cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionIF2DF *":
    """itkBSplineInterpolateImageFunctionIF2DF_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIF2DF"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_cast(obj)

class itkBSplineInterpolateImageFunctionIF3DF(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionIF3DF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineInterpolateImageFunctionIF3DF_Pointer":
        """__New_orig__() -> itkBSplineInterpolateImageFunctionIF3DF_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineInterpolateImageFunctionIF3DF_Pointer":
        """Clone(itkBSplineInterpolateImageFunctionIF3DF self) -> itkBSplineInterpolateImageFunctionIF3DF_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_Clone(self)


    def Evaluate(self, *args) -> "double":
        """
        Evaluate(itkBSplineInterpolateImageFunctionIF3DF self, itkPointD3 point) -> double
        Evaluate(itkBSplineInterpolateImageFunctionIF3DF self, itkPointD3 point, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_Evaluate(self, *args)


    def EvaluateAtContinuousIndex(self, *args) -> "double":
        """
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionIF3DF self, itkContinuousIndexD3 index) -> double
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionIF3DF self, itkContinuousIndexD3 index, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateAtContinuousIndex(self, *args)


    def EvaluateDerivative(self, *args) -> "itkCovariantVectorD3":
        """
        EvaluateDerivative(itkBSplineInterpolateImageFunctionIF3DF self, itkPointD3 point) -> itkCovariantVectorD3
        EvaluateDerivative(itkBSplineInterpolateImageFunctionIF3DF self, itkPointD3 point, unsigned int threadId) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateDerivative(self, *args)


    def EvaluateDerivativeAtContinuousIndex(self, *args) -> "itkCovariantVectorD3":
        """
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIF3DF self, itkContinuousIndexD3 x) -> itkCovariantVectorD3
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIF3DF self, itkContinuousIndexD3 x, unsigned int threadId) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateDerivativeAtContinuousIndex(self, *args)


    def EvaluateValueAndDerivative(self, *args) -> "void":
        """
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionIF3DF self, itkPointD3 point, double & value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionIF3DF self, itkPointD3 point, double & value, itkCovariantVectorD3 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateValueAndDerivative(self, *args)


    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args) -> "void":
        """
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIF3DF self, itkContinuousIndexD3 x, double & value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIF3DF self, itkContinuousIndexD3 x, double & value, itkCovariantVectorD3 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """SetSplineOrder(itkBSplineInterpolateImageFunctionIF3DF self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineInterpolateImageFunctionIF3DF self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetSplineOrder(self)


    def SetNumberOfWorkUnits(self, numThreads: 'unsigned int') -> "void":
        """SetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionIF3DF self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetNumberOfWorkUnits(self, numThreads)


    def GetNumberOfWorkUnits(self) -> "unsigned int":
        """GetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionIF3DF self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetNumberOfWorkUnits(self)


    def SetUseImageDirection(self, _arg: 'bool const') -> "void":
        """SetUseImageDirection(itkBSplineInterpolateImageFunctionIF3DF self, bool const _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self) -> "bool":
        """GetUseImageDirection(itkBSplineInterpolateImageFunctionIF3DF self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetUseImageDirection(self)


    def UseImageDirectionOn(self) -> "void":
        """UseImageDirectionOn(itkBSplineInterpolateImageFunctionIF3DF self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_UseImageDirectionOn(self)


    def UseImageDirectionOff(self) -> "void":
        """UseImageDirectionOff(itkBSplineInterpolateImageFunctionIF3DF self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIF3DF

    def cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionIF3DF *":
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIF3DF"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIF3DF

        Create a new object of the class itkBSplineInterpolateImageFunctionIF3DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIF3DF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIF3DF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionIF3DF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionIF3DF.Clone = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_Clone, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_Evaluate, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateDerivative, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateValueAndDerivative, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateValueAndDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetSplineOrder, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetSplineOrder, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.SetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.GetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetUseImageDirection, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetUseImageDirection, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_UseImageDirectionOn, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_UseImageDirectionOff, None, itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_swigregister
itkBSplineInterpolateImageFunctionIF3DF_swigregister(itkBSplineInterpolateImageFunctionIF3DF)

def itkBSplineInterpolateImageFunctionIF3DF___New_orig__() -> "itkBSplineInterpolateImageFunctionIF3DF_Pointer":
    """itkBSplineInterpolateImageFunctionIF3DF___New_orig__() -> itkBSplineInterpolateImageFunctionIF3DF_Pointer"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF___New_orig__()

def itkBSplineInterpolateImageFunctionIF3DF_cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionIF3DF *":
    """itkBSplineInterpolateImageFunctionIF3DF_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIF3DF"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_cast(obj)

class itkBSplineInterpolateImageFunctionISS2DSS(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionISS2DSS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineInterpolateImageFunctionISS2DSS_Pointer":
        """__New_orig__() -> itkBSplineInterpolateImageFunctionISS2DSS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineInterpolateImageFunctionISS2DSS_Pointer":
        """Clone(itkBSplineInterpolateImageFunctionISS2DSS self) -> itkBSplineInterpolateImageFunctionISS2DSS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_Clone(self)


    def Evaluate(self, *args) -> "double":
        """
        Evaluate(itkBSplineInterpolateImageFunctionISS2DSS self, itkPointD2 point) -> double
        Evaluate(itkBSplineInterpolateImageFunctionISS2DSS self, itkPointD2 point, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_Evaluate(self, *args)


    def EvaluateAtContinuousIndex(self, *args) -> "double":
        """
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionISS2DSS self, itkContinuousIndexD2 index) -> double
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionISS2DSS self, itkContinuousIndexD2 index, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateAtContinuousIndex(self, *args)


    def EvaluateDerivative(self, *args) -> "itkCovariantVectorD2":
        """
        EvaluateDerivative(itkBSplineInterpolateImageFunctionISS2DSS self, itkPointD2 point) -> itkCovariantVectorD2
        EvaluateDerivative(itkBSplineInterpolateImageFunctionISS2DSS self, itkPointD2 point, unsigned int threadId) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateDerivative(self, *args)


    def EvaluateDerivativeAtContinuousIndex(self, *args) -> "itkCovariantVectorD2":
        """
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionISS2DSS self, itkContinuousIndexD2 x) -> itkCovariantVectorD2
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionISS2DSS self, itkContinuousIndexD2 x, unsigned int threadId) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateDerivativeAtContinuousIndex(self, *args)


    def EvaluateValueAndDerivative(self, *args) -> "void":
        """
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionISS2DSS self, itkPointD2 point, double & value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionISS2DSS self, itkPointD2 point, double & value, itkCovariantVectorD2 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateValueAndDerivative(self, *args)


    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args) -> "void":
        """
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionISS2DSS self, itkContinuousIndexD2 x, double & value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionISS2DSS self, itkContinuousIndexD2 x, double & value, itkCovariantVectorD2 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """SetSplineOrder(itkBSplineInterpolateImageFunctionISS2DSS self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineInterpolateImageFunctionISS2DSS self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_GetSplineOrder(self)


    def SetNumberOfWorkUnits(self, numThreads: 'unsigned int') -> "void":
        """SetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionISS2DSS self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_SetNumberOfWorkUnits(self, numThreads)


    def GetNumberOfWorkUnits(self) -> "unsigned int":
        """GetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionISS2DSS self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_GetNumberOfWorkUnits(self)


    def SetUseImageDirection(self, _arg: 'bool const') -> "void":
        """SetUseImageDirection(itkBSplineInterpolateImageFunctionISS2DSS self, bool const _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self) -> "bool":
        """GetUseImageDirection(itkBSplineInterpolateImageFunctionISS2DSS self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_GetUseImageDirection(self)


    def UseImageDirectionOn(self) -> "void":
        """UseImageDirectionOn(itkBSplineInterpolateImageFunctionISS2DSS self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_UseImageDirectionOn(self)


    def UseImageDirectionOff(self) -> "void":
        """UseImageDirectionOff(itkBSplineInterpolateImageFunctionISS2DSS self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionISS2DSS

    def cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionISS2DSS *":
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionISS2DSS"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionISS2DSS

        Create a new object of the class itkBSplineInterpolateImageFunctionISS2DSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionISS2DSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionISS2DSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionISS2DSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionISS2DSS.Clone = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_Clone, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_Evaluate, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateAtContinuousIndex, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateDerivative, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateValueAndDerivative, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateValueAndDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_SetSplineOrder, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_GetSplineOrder, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS.SetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_SetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS.GetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_GetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_SetUseImageDirection, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_GetUseImageDirection, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_UseImageDirectionOn, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_UseImageDirectionOff, None, itkBSplineInterpolateImageFunctionISS2DSS)
itkBSplineInterpolateImageFunctionISS2DSS_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_swigregister
itkBSplineInterpolateImageFunctionISS2DSS_swigregister(itkBSplineInterpolateImageFunctionISS2DSS)

def itkBSplineInterpolateImageFunctionISS2DSS___New_orig__() -> "itkBSplineInterpolateImageFunctionISS2DSS_Pointer":
    """itkBSplineInterpolateImageFunctionISS2DSS___New_orig__() -> itkBSplineInterpolateImageFunctionISS2DSS_Pointer"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS___New_orig__()

def itkBSplineInterpolateImageFunctionISS2DSS_cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionISS2DSS *":
    """itkBSplineInterpolateImageFunctionISS2DSS_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionISS2DSS"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_cast(obj)

class itkBSplineInterpolateImageFunctionISS3DSS(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionISS3DSS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineInterpolateImageFunctionISS3DSS_Pointer":
        """__New_orig__() -> itkBSplineInterpolateImageFunctionISS3DSS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineInterpolateImageFunctionISS3DSS_Pointer":
        """Clone(itkBSplineInterpolateImageFunctionISS3DSS self) -> itkBSplineInterpolateImageFunctionISS3DSS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_Clone(self)


    def Evaluate(self, *args) -> "double":
        """
        Evaluate(itkBSplineInterpolateImageFunctionISS3DSS self, itkPointD3 point) -> double
        Evaluate(itkBSplineInterpolateImageFunctionISS3DSS self, itkPointD3 point, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_Evaluate(self, *args)


    def EvaluateAtContinuousIndex(self, *args) -> "double":
        """
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionISS3DSS self, itkContinuousIndexD3 index) -> double
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionISS3DSS self, itkContinuousIndexD3 index, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateAtContinuousIndex(self, *args)


    def EvaluateDerivative(self, *args) -> "itkCovariantVectorD3":
        """
        EvaluateDerivative(itkBSplineInterpolateImageFunctionISS3DSS self, itkPointD3 point) -> itkCovariantVectorD3
        EvaluateDerivative(itkBSplineInterpolateImageFunctionISS3DSS self, itkPointD3 point, unsigned int threadId) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateDerivative(self, *args)


    def EvaluateDerivativeAtContinuousIndex(self, *args) -> "itkCovariantVectorD3":
        """
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionISS3DSS self, itkContinuousIndexD3 x) -> itkCovariantVectorD3
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionISS3DSS self, itkContinuousIndexD3 x, unsigned int threadId) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateDerivativeAtContinuousIndex(self, *args)


    def EvaluateValueAndDerivative(self, *args) -> "void":
        """
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionISS3DSS self, itkPointD3 point, double & value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionISS3DSS self, itkPointD3 point, double & value, itkCovariantVectorD3 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateValueAndDerivative(self, *args)


    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args) -> "void":
        """
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionISS3DSS self, itkContinuousIndexD3 x, double & value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionISS3DSS self, itkContinuousIndexD3 x, double & value, itkCovariantVectorD3 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """SetSplineOrder(itkBSplineInterpolateImageFunctionISS3DSS self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineInterpolateImageFunctionISS3DSS self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_GetSplineOrder(self)


    def SetNumberOfWorkUnits(self, numThreads: 'unsigned int') -> "void":
        """SetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionISS3DSS self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_SetNumberOfWorkUnits(self, numThreads)


    def GetNumberOfWorkUnits(self) -> "unsigned int":
        """GetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionISS3DSS self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_GetNumberOfWorkUnits(self)


    def SetUseImageDirection(self, _arg: 'bool const') -> "void":
        """SetUseImageDirection(itkBSplineInterpolateImageFunctionISS3DSS self, bool const _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self) -> "bool":
        """GetUseImageDirection(itkBSplineInterpolateImageFunctionISS3DSS self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_GetUseImageDirection(self)


    def UseImageDirectionOn(self) -> "void":
        """UseImageDirectionOn(itkBSplineInterpolateImageFunctionISS3DSS self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_UseImageDirectionOn(self)


    def UseImageDirectionOff(self) -> "void":
        """UseImageDirectionOff(itkBSplineInterpolateImageFunctionISS3DSS self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionISS3DSS

    def cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionISS3DSS *":
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionISS3DSS"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionISS3DSS

        Create a new object of the class itkBSplineInterpolateImageFunctionISS3DSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionISS3DSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionISS3DSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionISS3DSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionISS3DSS.Clone = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_Clone, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_Evaluate, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateAtContinuousIndex, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateDerivative, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateValueAndDerivative, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateValueAndDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_SetSplineOrder, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_GetSplineOrder, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS.SetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_SetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS.GetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_GetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_SetUseImageDirection, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_GetUseImageDirection, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_UseImageDirectionOn, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_UseImageDirectionOff, None, itkBSplineInterpolateImageFunctionISS3DSS)
itkBSplineInterpolateImageFunctionISS3DSS_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_swigregister
itkBSplineInterpolateImageFunctionISS3DSS_swigregister(itkBSplineInterpolateImageFunctionISS3DSS)

def itkBSplineInterpolateImageFunctionISS3DSS___New_orig__() -> "itkBSplineInterpolateImageFunctionISS3DSS_Pointer":
    """itkBSplineInterpolateImageFunctionISS3DSS___New_orig__() -> itkBSplineInterpolateImageFunctionISS3DSS_Pointer"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS___New_orig__()

def itkBSplineInterpolateImageFunctionISS3DSS_cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionISS3DSS *":
    """itkBSplineInterpolateImageFunctionISS3DSS_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionISS3DSS"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_cast(obj)

class itkBSplineInterpolateImageFunctionIUC2DUC(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionIUC2DUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineInterpolateImageFunctionIUC2DUC_Pointer":
        """__New_orig__() -> itkBSplineInterpolateImageFunctionIUC2DUC_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineInterpolateImageFunctionIUC2DUC_Pointer":
        """Clone(itkBSplineInterpolateImageFunctionIUC2DUC self) -> itkBSplineInterpolateImageFunctionIUC2DUC_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_Clone(self)


    def Evaluate(self, *args) -> "double":
        """
        Evaluate(itkBSplineInterpolateImageFunctionIUC2DUC self, itkPointD2 point) -> double
        Evaluate(itkBSplineInterpolateImageFunctionIUC2DUC self, itkPointD2 point, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_Evaluate(self, *args)


    def EvaluateAtContinuousIndex(self, *args) -> "double":
        """
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionIUC2DUC self, itkContinuousIndexD2 index) -> double
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionIUC2DUC self, itkContinuousIndexD2 index, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateAtContinuousIndex(self, *args)


    def EvaluateDerivative(self, *args) -> "itkCovariantVectorD2":
        """
        EvaluateDerivative(itkBSplineInterpolateImageFunctionIUC2DUC self, itkPointD2 point) -> itkCovariantVectorD2
        EvaluateDerivative(itkBSplineInterpolateImageFunctionIUC2DUC self, itkPointD2 point, unsigned int threadId) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateDerivative(self, *args)


    def EvaluateDerivativeAtContinuousIndex(self, *args) -> "itkCovariantVectorD2":
        """
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUC2DUC self, itkContinuousIndexD2 x) -> itkCovariantVectorD2
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUC2DUC self, itkContinuousIndexD2 x, unsigned int threadId) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateDerivativeAtContinuousIndex(self, *args)


    def EvaluateValueAndDerivative(self, *args) -> "void":
        """
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionIUC2DUC self, itkPointD2 point, double & value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionIUC2DUC self, itkPointD2 point, double & value, itkCovariantVectorD2 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateValueAndDerivative(self, *args)


    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args) -> "void":
        """
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUC2DUC self, itkContinuousIndexD2 x, double & value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUC2DUC self, itkContinuousIndexD2 x, double & value, itkCovariantVectorD2 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """SetSplineOrder(itkBSplineInterpolateImageFunctionIUC2DUC self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineInterpolateImageFunctionIUC2DUC self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetSplineOrder(self)


    def SetNumberOfWorkUnits(self, numThreads: 'unsigned int') -> "void":
        """SetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionIUC2DUC self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetNumberOfWorkUnits(self, numThreads)


    def GetNumberOfWorkUnits(self) -> "unsigned int":
        """GetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionIUC2DUC self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetNumberOfWorkUnits(self)


    def SetUseImageDirection(self, _arg: 'bool const') -> "void":
        """SetUseImageDirection(itkBSplineInterpolateImageFunctionIUC2DUC self, bool const _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self) -> "bool":
        """GetUseImageDirection(itkBSplineInterpolateImageFunctionIUC2DUC self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetUseImageDirection(self)


    def UseImageDirectionOn(self) -> "void":
        """UseImageDirectionOn(itkBSplineInterpolateImageFunctionIUC2DUC self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_UseImageDirectionOn(self)


    def UseImageDirectionOff(self) -> "void":
        """UseImageDirectionOff(itkBSplineInterpolateImageFunctionIUC2DUC self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUC2DUC

    def cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionIUC2DUC *":
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUC2DUC"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUC2DUC

        Create a new object of the class itkBSplineInterpolateImageFunctionIUC2DUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIUC2DUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIUC2DUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionIUC2DUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionIUC2DUC.Clone = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_Clone, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_Evaluate, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateDerivative, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateValueAndDerivative, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateValueAndDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetSplineOrder, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetSplineOrder, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.SetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.GetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetUseImageDirection, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetUseImageDirection, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_UseImageDirectionOn, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_UseImageDirectionOff, None, itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_swigregister
itkBSplineInterpolateImageFunctionIUC2DUC_swigregister(itkBSplineInterpolateImageFunctionIUC2DUC)

def itkBSplineInterpolateImageFunctionIUC2DUC___New_orig__() -> "itkBSplineInterpolateImageFunctionIUC2DUC_Pointer":
    """itkBSplineInterpolateImageFunctionIUC2DUC___New_orig__() -> itkBSplineInterpolateImageFunctionIUC2DUC_Pointer"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC___New_orig__()

def itkBSplineInterpolateImageFunctionIUC2DUC_cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionIUC2DUC *":
    """itkBSplineInterpolateImageFunctionIUC2DUC_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUC2DUC"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_cast(obj)

class itkBSplineInterpolateImageFunctionIUC3DUC(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionIUC3DUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineInterpolateImageFunctionIUC3DUC_Pointer":
        """__New_orig__() -> itkBSplineInterpolateImageFunctionIUC3DUC_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineInterpolateImageFunctionIUC3DUC_Pointer":
        """Clone(itkBSplineInterpolateImageFunctionIUC3DUC self) -> itkBSplineInterpolateImageFunctionIUC3DUC_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_Clone(self)


    def Evaluate(self, *args) -> "double":
        """
        Evaluate(itkBSplineInterpolateImageFunctionIUC3DUC self, itkPointD3 point) -> double
        Evaluate(itkBSplineInterpolateImageFunctionIUC3DUC self, itkPointD3 point, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_Evaluate(self, *args)


    def EvaluateAtContinuousIndex(self, *args) -> "double":
        """
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionIUC3DUC self, itkContinuousIndexD3 index) -> double
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionIUC3DUC self, itkContinuousIndexD3 index, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateAtContinuousIndex(self, *args)


    def EvaluateDerivative(self, *args) -> "itkCovariantVectorD3":
        """
        EvaluateDerivative(itkBSplineInterpolateImageFunctionIUC3DUC self, itkPointD3 point) -> itkCovariantVectorD3
        EvaluateDerivative(itkBSplineInterpolateImageFunctionIUC3DUC self, itkPointD3 point, unsigned int threadId) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateDerivative(self, *args)


    def EvaluateDerivativeAtContinuousIndex(self, *args) -> "itkCovariantVectorD3":
        """
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUC3DUC self, itkContinuousIndexD3 x) -> itkCovariantVectorD3
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUC3DUC self, itkContinuousIndexD3 x, unsigned int threadId) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateDerivativeAtContinuousIndex(self, *args)


    def EvaluateValueAndDerivative(self, *args) -> "void":
        """
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionIUC3DUC self, itkPointD3 point, double & value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionIUC3DUC self, itkPointD3 point, double & value, itkCovariantVectorD3 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateValueAndDerivative(self, *args)


    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args) -> "void":
        """
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUC3DUC self, itkContinuousIndexD3 x, double & value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUC3DUC self, itkContinuousIndexD3 x, double & value, itkCovariantVectorD3 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """SetSplineOrder(itkBSplineInterpolateImageFunctionIUC3DUC self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineInterpolateImageFunctionIUC3DUC self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetSplineOrder(self)


    def SetNumberOfWorkUnits(self, numThreads: 'unsigned int') -> "void":
        """SetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionIUC3DUC self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetNumberOfWorkUnits(self, numThreads)


    def GetNumberOfWorkUnits(self) -> "unsigned int":
        """GetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionIUC3DUC self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetNumberOfWorkUnits(self)


    def SetUseImageDirection(self, _arg: 'bool const') -> "void":
        """SetUseImageDirection(itkBSplineInterpolateImageFunctionIUC3DUC self, bool const _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self) -> "bool":
        """GetUseImageDirection(itkBSplineInterpolateImageFunctionIUC3DUC self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetUseImageDirection(self)


    def UseImageDirectionOn(self) -> "void":
        """UseImageDirectionOn(itkBSplineInterpolateImageFunctionIUC3DUC self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_UseImageDirectionOn(self)


    def UseImageDirectionOff(self) -> "void":
        """UseImageDirectionOff(itkBSplineInterpolateImageFunctionIUC3DUC self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUC3DUC

    def cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionIUC3DUC *":
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUC3DUC"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUC3DUC

        Create a new object of the class itkBSplineInterpolateImageFunctionIUC3DUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIUC3DUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIUC3DUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionIUC3DUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionIUC3DUC.Clone = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_Clone, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_Evaluate, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateDerivative, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateValueAndDerivative, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateValueAndDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetSplineOrder, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetSplineOrder, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.SetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.GetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetUseImageDirection, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetUseImageDirection, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_UseImageDirectionOn, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_UseImageDirectionOff, None, itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_swigregister
itkBSplineInterpolateImageFunctionIUC3DUC_swigregister(itkBSplineInterpolateImageFunctionIUC3DUC)

def itkBSplineInterpolateImageFunctionIUC3DUC___New_orig__() -> "itkBSplineInterpolateImageFunctionIUC3DUC_Pointer":
    """itkBSplineInterpolateImageFunctionIUC3DUC___New_orig__() -> itkBSplineInterpolateImageFunctionIUC3DUC_Pointer"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC___New_orig__()

def itkBSplineInterpolateImageFunctionIUC3DUC_cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionIUC3DUC *":
    """itkBSplineInterpolateImageFunctionIUC3DUC_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUC3DUC"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_cast(obj)

class itkBSplineInterpolateImageFunctionIUS2DUS(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionIUS2DUS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineInterpolateImageFunctionIUS2DUS_Pointer":
        """__New_orig__() -> itkBSplineInterpolateImageFunctionIUS2DUS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineInterpolateImageFunctionIUS2DUS_Pointer":
        """Clone(itkBSplineInterpolateImageFunctionIUS2DUS self) -> itkBSplineInterpolateImageFunctionIUS2DUS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_Clone(self)


    def Evaluate(self, *args) -> "double":
        """
        Evaluate(itkBSplineInterpolateImageFunctionIUS2DUS self, itkPointD2 point) -> double
        Evaluate(itkBSplineInterpolateImageFunctionIUS2DUS self, itkPointD2 point, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_Evaluate(self, *args)


    def EvaluateAtContinuousIndex(self, *args) -> "double":
        """
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionIUS2DUS self, itkContinuousIndexD2 index) -> double
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionIUS2DUS self, itkContinuousIndexD2 index, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateAtContinuousIndex(self, *args)


    def EvaluateDerivative(self, *args) -> "itkCovariantVectorD2":
        """
        EvaluateDerivative(itkBSplineInterpolateImageFunctionIUS2DUS self, itkPointD2 point) -> itkCovariantVectorD2
        EvaluateDerivative(itkBSplineInterpolateImageFunctionIUS2DUS self, itkPointD2 point, unsigned int threadId) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateDerivative(self, *args)


    def EvaluateDerivativeAtContinuousIndex(self, *args) -> "itkCovariantVectorD2":
        """
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUS2DUS self, itkContinuousIndexD2 x) -> itkCovariantVectorD2
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUS2DUS self, itkContinuousIndexD2 x, unsigned int threadId) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateDerivativeAtContinuousIndex(self, *args)


    def EvaluateValueAndDerivative(self, *args) -> "void":
        """
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionIUS2DUS self, itkPointD2 point, double & value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionIUS2DUS self, itkPointD2 point, double & value, itkCovariantVectorD2 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateValueAndDerivative(self, *args)


    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args) -> "void":
        """
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUS2DUS self, itkContinuousIndexD2 x, double & value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUS2DUS self, itkContinuousIndexD2 x, double & value, itkCovariantVectorD2 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """SetSplineOrder(itkBSplineInterpolateImageFunctionIUS2DUS self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineInterpolateImageFunctionIUS2DUS self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetSplineOrder(self)


    def SetNumberOfWorkUnits(self, numThreads: 'unsigned int') -> "void":
        """SetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionIUS2DUS self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetNumberOfWorkUnits(self, numThreads)


    def GetNumberOfWorkUnits(self) -> "unsigned int":
        """GetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionIUS2DUS self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetNumberOfWorkUnits(self)


    def SetUseImageDirection(self, _arg: 'bool const') -> "void":
        """SetUseImageDirection(itkBSplineInterpolateImageFunctionIUS2DUS self, bool const _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self) -> "bool":
        """GetUseImageDirection(itkBSplineInterpolateImageFunctionIUS2DUS self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetUseImageDirection(self)


    def UseImageDirectionOn(self) -> "void":
        """UseImageDirectionOn(itkBSplineInterpolateImageFunctionIUS2DUS self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_UseImageDirectionOn(self)


    def UseImageDirectionOff(self) -> "void":
        """UseImageDirectionOff(itkBSplineInterpolateImageFunctionIUS2DUS self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUS2DUS

    def cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionIUS2DUS *":
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUS2DUS"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUS2DUS

        Create a new object of the class itkBSplineInterpolateImageFunctionIUS2DUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIUS2DUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIUS2DUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionIUS2DUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionIUS2DUS.Clone = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_Clone, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_Evaluate, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateDerivative, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateValueAndDerivative, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateValueAndDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetSplineOrder, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetSplineOrder, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.SetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.GetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetUseImageDirection, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetUseImageDirection, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_UseImageDirectionOn, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_UseImageDirectionOff, None, itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_swigregister
itkBSplineInterpolateImageFunctionIUS2DUS_swigregister(itkBSplineInterpolateImageFunctionIUS2DUS)

def itkBSplineInterpolateImageFunctionIUS2DUS___New_orig__() -> "itkBSplineInterpolateImageFunctionIUS2DUS_Pointer":
    """itkBSplineInterpolateImageFunctionIUS2DUS___New_orig__() -> itkBSplineInterpolateImageFunctionIUS2DUS_Pointer"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS___New_orig__()

def itkBSplineInterpolateImageFunctionIUS2DUS_cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionIUS2DUS *":
    """itkBSplineInterpolateImageFunctionIUS2DUS_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUS2DUS"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_cast(obj)

class itkBSplineInterpolateImageFunctionIUS3DUS(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionIUS3DUS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBSplineInterpolateImageFunctionIUS3DUS_Pointer":
        """__New_orig__() -> itkBSplineInterpolateImageFunctionIUS3DUS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBSplineInterpolateImageFunctionIUS3DUS_Pointer":
        """Clone(itkBSplineInterpolateImageFunctionIUS3DUS self) -> itkBSplineInterpolateImageFunctionIUS3DUS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_Clone(self)


    def Evaluate(self, *args) -> "double":
        """
        Evaluate(itkBSplineInterpolateImageFunctionIUS3DUS self, itkPointD3 point) -> double
        Evaluate(itkBSplineInterpolateImageFunctionIUS3DUS self, itkPointD3 point, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_Evaluate(self, *args)


    def EvaluateAtContinuousIndex(self, *args) -> "double":
        """
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionIUS3DUS self, itkContinuousIndexD3 index) -> double
        EvaluateAtContinuousIndex(itkBSplineInterpolateImageFunctionIUS3DUS self, itkContinuousIndexD3 index, unsigned int threadId) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateAtContinuousIndex(self, *args)


    def EvaluateDerivative(self, *args) -> "itkCovariantVectorD3":
        """
        EvaluateDerivative(itkBSplineInterpolateImageFunctionIUS3DUS self, itkPointD3 point) -> itkCovariantVectorD3
        EvaluateDerivative(itkBSplineInterpolateImageFunctionIUS3DUS self, itkPointD3 point, unsigned int threadId) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateDerivative(self, *args)


    def EvaluateDerivativeAtContinuousIndex(self, *args) -> "itkCovariantVectorD3":
        """
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUS3DUS self, itkContinuousIndexD3 x) -> itkCovariantVectorD3
        EvaluateDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUS3DUS self, itkContinuousIndexD3 x, unsigned int threadId) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateDerivativeAtContinuousIndex(self, *args)


    def EvaluateValueAndDerivative(self, *args) -> "void":
        """
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionIUS3DUS self, itkPointD3 point, double & value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivative(itkBSplineInterpolateImageFunctionIUS3DUS self, itkPointD3 point, double & value, itkCovariantVectorD3 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateValueAndDerivative(self, *args)


    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args) -> "void":
        """
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUS3DUS self, itkContinuousIndexD3 x, double & value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(itkBSplineInterpolateImageFunctionIUS3DUS self, itkContinuousIndexD3 x, double & value, itkCovariantVectorD3 deriv, unsigned int threadId)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)


    def SetSplineOrder(self, SplineOrder: 'unsigned int') -> "void":
        """SetSplineOrder(itkBSplineInterpolateImageFunctionIUS3DUS self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetSplineOrder(self, SplineOrder)


    def GetSplineOrder(self) -> "int":
        """GetSplineOrder(itkBSplineInterpolateImageFunctionIUS3DUS self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetSplineOrder(self)


    def SetNumberOfWorkUnits(self, numThreads: 'unsigned int') -> "void":
        """SetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionIUS3DUS self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetNumberOfWorkUnits(self, numThreads)


    def GetNumberOfWorkUnits(self) -> "unsigned int":
        """GetNumberOfWorkUnits(itkBSplineInterpolateImageFunctionIUS3DUS self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetNumberOfWorkUnits(self)


    def SetUseImageDirection(self, _arg: 'bool const') -> "void":
        """SetUseImageDirection(itkBSplineInterpolateImageFunctionIUS3DUS self, bool const _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetUseImageDirection(self, _arg)


    def GetUseImageDirection(self) -> "bool":
        """GetUseImageDirection(itkBSplineInterpolateImageFunctionIUS3DUS self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetUseImageDirection(self)


    def UseImageDirectionOn(self) -> "void":
        """UseImageDirectionOn(itkBSplineInterpolateImageFunctionIUS3DUS self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_UseImageDirectionOn(self)


    def UseImageDirectionOff(self) -> "void":
        """UseImageDirectionOff(itkBSplineInterpolateImageFunctionIUS3DUS self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUS3DUS

    def cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionIUS3DUS *":
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUS3DUS"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUS3DUS

        Create a new object of the class itkBSplineInterpolateImageFunctionIUS3DUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIUS3DUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIUS3DUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionIUS3DUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionIUS3DUS.Clone = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_Clone, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_Evaluate, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateDerivative, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateValueAndDerivative, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateValueAndDerivativeAtContinuousIndex, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetSplineOrder, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetSplineOrder, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.SetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.GetNumberOfWorkUnits = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetNumberOfWorkUnits, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetUseImageDirection, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetUseImageDirection, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_UseImageDirectionOn, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_UseImageDirectionOff, None, itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_swigregister
itkBSplineInterpolateImageFunctionIUS3DUS_swigregister(itkBSplineInterpolateImageFunctionIUS3DUS)

def itkBSplineInterpolateImageFunctionIUS3DUS___New_orig__() -> "itkBSplineInterpolateImageFunctionIUS3DUS_Pointer":
    """itkBSplineInterpolateImageFunctionIUS3DUS___New_orig__() -> itkBSplineInterpolateImageFunctionIUS3DUS_Pointer"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS___New_orig__()

def itkBSplineInterpolateImageFunctionIUS3DUS_cast(obj: 'itkLightObject') -> "itkBSplineInterpolateImageFunctionIUS3DUS *":
    """itkBSplineInterpolateImageFunctionIUS3DUS_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUS3DUS"""
    return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_cast(obj)



