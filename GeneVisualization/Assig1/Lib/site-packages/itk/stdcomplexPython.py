# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _stdcomplexPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_stdcomplexPython', [dirname(__file__)])
        except ImportError:
            import _stdcomplexPython
            return _stdcomplexPython
        if fp is not None:
            try:
                _mod = imp.load_module('_stdcomplexPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _stdcomplexPython = swig_import_helper()
    del swig_import_helper
else:
    import _stdcomplexPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import pyBasePython
class stdcomplexD(object):
    """Proxy of C++ stdcomplexD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _stdcomplexPython.delete_stdcomplexD

    def __init__(self, *args):
        """
        __init__(stdcomplexD self, stdcomplexD arg0) -> stdcomplexD
        __init__(stdcomplexD self, stdcomplexD __z) -> stdcomplexD
        __init__(stdcomplexD self, double __r=0.0, double __i=0.0) -> stdcomplexD
        __init__(stdcomplexD self, double __r=0.0) -> stdcomplexD
        __init__(stdcomplexD self) -> stdcomplexD
        __init__(stdcomplexD self, stdcomplexF __z) -> stdcomplexD
        """
        _stdcomplexPython.stdcomplexD_swiginit(self, _stdcomplexPython.new_stdcomplexD(*args))

    def real(self, *args) -> "double const":
        """
        real(stdcomplexD self) -> double
        real(stdcomplexD self) -> double const
        """
        return _stdcomplexPython.stdcomplexD_real(self, *args)


    def imag(self, *args) -> "double const":
        """
        imag(stdcomplexD self) -> double
        imag(stdcomplexD self) -> double const
        """
        return _stdcomplexPython.stdcomplexD_imag(self, *args)


    def __iadd__(self, __d: 'double') -> "stdcomplexD &":
        """__iadd__(stdcomplexD self, double __d) -> stdcomplexD"""
        return _stdcomplexPython.stdcomplexD___iadd__(self, __d)


    def __isub__(self, __d: 'double') -> "stdcomplexD &":
        """__isub__(stdcomplexD self, double __d) -> stdcomplexD"""
        return _stdcomplexPython.stdcomplexD___isub__(self, __d)


    def __imul__(self, __d: 'double') -> "stdcomplexD &":
        """__imul__(stdcomplexD self, double __d) -> stdcomplexD"""
        return _stdcomplexPython.stdcomplexD___imul__(self, __d)


    def __idiv__(self, __d: 'double') -> "stdcomplexD &":
        """__idiv__(stdcomplexD self, double __d) -> stdcomplexD"""
        return _stdcomplexPython.stdcomplexD___idiv__(self, __d)


    def __repr__(self):
        return "stdcomplexD (%s, %s)" % (self.real(), self.imag())

    def __complex__(self):
        return complex(self.real(), self.imag())

stdcomplexD.real = new_instancemethod(_stdcomplexPython.stdcomplexD_real, None, stdcomplexD)
stdcomplexD.imag = new_instancemethod(_stdcomplexPython.stdcomplexD_imag, None, stdcomplexD)
stdcomplexD.__iadd__ = new_instancemethod(_stdcomplexPython.stdcomplexD___iadd__, None, stdcomplexD)
stdcomplexD.__isub__ = new_instancemethod(_stdcomplexPython.stdcomplexD___isub__, None, stdcomplexD)
stdcomplexD.__imul__ = new_instancemethod(_stdcomplexPython.stdcomplexD___imul__, None, stdcomplexD)
stdcomplexD.__idiv__ = new_instancemethod(_stdcomplexPython.stdcomplexD___idiv__, None, stdcomplexD)
stdcomplexD_swigregister = _stdcomplexPython.stdcomplexD_swigregister
stdcomplexD_swigregister(stdcomplexD)

class stdcomplexF(object):
    """Proxy of C++ stdcomplexF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _stdcomplexPython.delete_stdcomplexF

    def __init__(self, *args):
        """
        __init__(stdcomplexF self, stdcomplexF arg0) -> stdcomplexF
        __init__(stdcomplexF self, stdcomplexF __z) -> stdcomplexF
        __init__(stdcomplexF self, float r=0.0, float i=0.0) -> stdcomplexF
        __init__(stdcomplexF self, float r=0.0) -> stdcomplexF
        __init__(stdcomplexF self) -> stdcomplexF
        __init__(stdcomplexF self, stdcomplexD __z) -> stdcomplexF
        """
        _stdcomplexPython.stdcomplexF_swiginit(self, _stdcomplexPython.new_stdcomplexF(*args))

    def real(self, *args) -> "float const":
        """
        real(stdcomplexF self) -> float
        real(stdcomplexF self) -> float const
        """
        return _stdcomplexPython.stdcomplexF_real(self, *args)


    def imag(self, *args) -> "float const":
        """
        imag(stdcomplexF self) -> float
        imag(stdcomplexF self) -> float const
        """
        return _stdcomplexPython.stdcomplexF_imag(self, *args)


    def __iadd__(self, __f: 'float') -> "stdcomplexF &":
        """__iadd__(stdcomplexF self, float __f) -> stdcomplexF"""
        return _stdcomplexPython.stdcomplexF___iadd__(self, __f)


    def __isub__(self, __f: 'float') -> "stdcomplexF &":
        """__isub__(stdcomplexF self, float __f) -> stdcomplexF"""
        return _stdcomplexPython.stdcomplexF___isub__(self, __f)


    def __imul__(self, __f: 'float') -> "stdcomplexF &":
        """__imul__(stdcomplexF self, float __f) -> stdcomplexF"""
        return _stdcomplexPython.stdcomplexF___imul__(self, __f)


    def __idiv__(self, __f: 'float') -> "stdcomplexF &":
        """__idiv__(stdcomplexF self, float __f) -> stdcomplexF"""
        return _stdcomplexPython.stdcomplexF___idiv__(self, __f)


    def __repr__(self):
        return "stdcomplexF (%s, %s)" % (self.real(), self.imag())

    def __complex__(self):
        return complex(self.real(), self.imag())

stdcomplexF.real = new_instancemethod(_stdcomplexPython.stdcomplexF_real, None, stdcomplexF)
stdcomplexF.imag = new_instancemethod(_stdcomplexPython.stdcomplexF_imag, None, stdcomplexF)
stdcomplexF.__iadd__ = new_instancemethod(_stdcomplexPython.stdcomplexF___iadd__, None, stdcomplexF)
stdcomplexF.__isub__ = new_instancemethod(_stdcomplexPython.stdcomplexF___isub__, None, stdcomplexF)
stdcomplexF.__imul__ = new_instancemethod(_stdcomplexPython.stdcomplexF___imul__, None, stdcomplexF)
stdcomplexF.__idiv__ = new_instancemethod(_stdcomplexPython.stdcomplexF___idiv__, None, stdcomplexF)
stdcomplexF_swigregister = _stdcomplexPython.stdcomplexF_swigregister
stdcomplexF_swigregister(stdcomplexF)



