# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkDenseFiniteDifferenceImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkDenseFiniteDifferenceImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkDenseFiniteDifferenceImageFilterPython
            return _itkDenseFiniteDifferenceImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkDenseFiniteDifferenceImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkDenseFiniteDifferenceImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkDenseFiniteDifferenceImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkImageSourceCommonPython
import ITKCommonBasePython
import pyBasePython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython
import itkFiniteDifferenceFunctionPython

def itkDenseFiniteDifferenceImageFilterICVF43ICVF43_New():
  return itkDenseFiniteDifferenceImageFilterICVF43ICVF43.New()


def itkDenseFiniteDifferenceImageFilterICVF42ICVF42_New():
  return itkDenseFiniteDifferenceImageFilterICVF42ICVF42.New()


def itkDenseFiniteDifferenceImageFilterICVF33ICVF33_New():
  return itkDenseFiniteDifferenceImageFilterICVF33ICVF33.New()


def itkDenseFiniteDifferenceImageFilterICVF32ICVF32_New():
  return itkDenseFiniteDifferenceImageFilterICVF32ICVF32.New()


def itkDenseFiniteDifferenceImageFilterICVF23ICVF23_New():
  return itkDenseFiniteDifferenceImageFilterICVF23ICVF23.New()


def itkDenseFiniteDifferenceImageFilterICVF22ICVF22_New():
  return itkDenseFiniteDifferenceImageFilterICVF22ICVF22.New()


def itkDenseFiniteDifferenceImageFilterIVF43IVF43_New():
  return itkDenseFiniteDifferenceImageFilterIVF43IVF43.New()


def itkDenseFiniteDifferenceImageFilterIVF42IVF42_New():
  return itkDenseFiniteDifferenceImageFilterIVF42IVF42.New()


def itkDenseFiniteDifferenceImageFilterIVF33IVF33_New():
  return itkDenseFiniteDifferenceImageFilterIVF33IVF33.New()


def itkDenseFiniteDifferenceImageFilterIVF32IVF32_New():
  return itkDenseFiniteDifferenceImageFilterIVF32IVF32.New()


def itkDenseFiniteDifferenceImageFilterIVF23IVF23_New():
  return itkDenseFiniteDifferenceImageFilterIVF23IVF23.New()


def itkDenseFiniteDifferenceImageFilterIVF22IVF22_New():
  return itkDenseFiniteDifferenceImageFilterIVF22IVF22.New()


def itkDenseFiniteDifferenceImageFilterIF3IF3_New():
  return itkDenseFiniteDifferenceImageFilterIF3IF3.New()


def itkDenseFiniteDifferenceImageFilterIF2IF2_New():
  return itkDenseFiniteDifferenceImageFilterIF2IF2.New()

class itkDenseFiniteDifferenceImageFilterICVF22ICVF22(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterICVF22ICVF22):
    """Proxy of C++ itkDenseFiniteDifferenceImageFilterICVF22ICVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22_OutputTimesDoubleCheck
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22_OutputAdditiveOperatorsCheck
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22_OutputAdditiveAndAssignOperatorsCheck
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterICVF22ICVF22

    def cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterICVF22ICVF22 *":
        """cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterICVF22ICVF22"""
        return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterICVF22ICVF22

        Create a new object of the class itkDenseFiniteDifferenceImageFilterICVF22ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterICVF22ICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterICVF22ICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterICVF22ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDenseFiniteDifferenceImageFilterICVF22ICVF22_swigregister = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22_swigregister
itkDenseFiniteDifferenceImageFilterICVF22ICVF22_swigregister(itkDenseFiniteDifferenceImageFilterICVF22ICVF22)

def itkDenseFiniteDifferenceImageFilterICVF22ICVF22_cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterICVF22ICVF22 *":
    """itkDenseFiniteDifferenceImageFilterICVF22ICVF22_cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterICVF22ICVF22"""
    return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22_cast(obj)

class itkDenseFiniteDifferenceImageFilterICVF23ICVF23(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterICVF23ICVF23):
    """Proxy of C++ itkDenseFiniteDifferenceImageFilterICVF23ICVF23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23_OutputTimesDoubleCheck
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23_OutputAdditiveOperatorsCheck
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23_OutputAdditiveAndAssignOperatorsCheck
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterICVF23ICVF23

    def cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterICVF23ICVF23 *":
        """cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterICVF23ICVF23"""
        return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterICVF23ICVF23

        Create a new object of the class itkDenseFiniteDifferenceImageFilterICVF23ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterICVF23ICVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterICVF23ICVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterICVF23ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDenseFiniteDifferenceImageFilterICVF23ICVF23_swigregister = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23_swigregister
itkDenseFiniteDifferenceImageFilterICVF23ICVF23_swigregister(itkDenseFiniteDifferenceImageFilterICVF23ICVF23)

def itkDenseFiniteDifferenceImageFilterICVF23ICVF23_cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterICVF23ICVF23 *":
    """itkDenseFiniteDifferenceImageFilterICVF23ICVF23_cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterICVF23ICVF23"""
    return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23_cast(obj)

class itkDenseFiniteDifferenceImageFilterICVF32ICVF32(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterICVF32ICVF32):
    """Proxy of C++ itkDenseFiniteDifferenceImageFilterICVF32ICVF32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32_OutputTimesDoubleCheck
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32_OutputAdditiveOperatorsCheck
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32_OutputAdditiveAndAssignOperatorsCheck
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterICVF32ICVF32

    def cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterICVF32ICVF32 *":
        """cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterICVF32ICVF32"""
        return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterICVF32ICVF32

        Create a new object of the class itkDenseFiniteDifferenceImageFilterICVF32ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterICVF32ICVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterICVF32ICVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterICVF32ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDenseFiniteDifferenceImageFilterICVF32ICVF32_swigregister = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32_swigregister
itkDenseFiniteDifferenceImageFilterICVF32ICVF32_swigregister(itkDenseFiniteDifferenceImageFilterICVF32ICVF32)

def itkDenseFiniteDifferenceImageFilterICVF32ICVF32_cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterICVF32ICVF32 *":
    """itkDenseFiniteDifferenceImageFilterICVF32ICVF32_cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterICVF32ICVF32"""
    return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32_cast(obj)

class itkDenseFiniteDifferenceImageFilterICVF33ICVF33(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterICVF33ICVF33):
    """Proxy of C++ itkDenseFiniteDifferenceImageFilterICVF33ICVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33_OutputTimesDoubleCheck
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33_OutputAdditiveOperatorsCheck
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33_OutputAdditiveAndAssignOperatorsCheck
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterICVF33ICVF33

    def cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterICVF33ICVF33 *":
        """cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterICVF33ICVF33"""
        return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterICVF33ICVF33

        Create a new object of the class itkDenseFiniteDifferenceImageFilterICVF33ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterICVF33ICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterICVF33ICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterICVF33ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDenseFiniteDifferenceImageFilterICVF33ICVF33_swigregister = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33_swigregister
itkDenseFiniteDifferenceImageFilterICVF33ICVF33_swigregister(itkDenseFiniteDifferenceImageFilterICVF33ICVF33)

def itkDenseFiniteDifferenceImageFilterICVF33ICVF33_cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterICVF33ICVF33 *":
    """itkDenseFiniteDifferenceImageFilterICVF33ICVF33_cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterICVF33ICVF33"""
    return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33_cast(obj)

class itkDenseFiniteDifferenceImageFilterICVF42ICVF42(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterICVF42ICVF42):
    """Proxy of C++ itkDenseFiniteDifferenceImageFilterICVF42ICVF42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42_OutputTimesDoubleCheck
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42_OutputAdditiveOperatorsCheck
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42_OutputAdditiveAndAssignOperatorsCheck
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterICVF42ICVF42

    def cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterICVF42ICVF42 *":
        """cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterICVF42ICVF42"""
        return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterICVF42ICVF42

        Create a new object of the class itkDenseFiniteDifferenceImageFilterICVF42ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterICVF42ICVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterICVF42ICVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterICVF42ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDenseFiniteDifferenceImageFilterICVF42ICVF42_swigregister = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42_swigregister
itkDenseFiniteDifferenceImageFilterICVF42ICVF42_swigregister(itkDenseFiniteDifferenceImageFilterICVF42ICVF42)

def itkDenseFiniteDifferenceImageFilterICVF42ICVF42_cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterICVF42ICVF42 *":
    """itkDenseFiniteDifferenceImageFilterICVF42ICVF42_cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterICVF42ICVF42"""
    return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42_cast(obj)

class itkDenseFiniteDifferenceImageFilterICVF43ICVF43(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterICVF43ICVF43):
    """Proxy of C++ itkDenseFiniteDifferenceImageFilterICVF43ICVF43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43_OutputTimesDoubleCheck
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43_OutputAdditiveOperatorsCheck
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43_OutputAdditiveAndAssignOperatorsCheck
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterICVF43ICVF43

    def cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterICVF43ICVF43 *":
        """cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterICVF43ICVF43"""
        return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterICVF43ICVF43

        Create a new object of the class itkDenseFiniteDifferenceImageFilterICVF43ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterICVF43ICVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterICVF43ICVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterICVF43ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDenseFiniteDifferenceImageFilterICVF43ICVF43_swigregister = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43_swigregister
itkDenseFiniteDifferenceImageFilterICVF43ICVF43_swigregister(itkDenseFiniteDifferenceImageFilterICVF43ICVF43)

def itkDenseFiniteDifferenceImageFilterICVF43ICVF43_cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterICVF43ICVF43 *":
    """itkDenseFiniteDifferenceImageFilterICVF43ICVF43_cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterICVF43ICVF43"""
    return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43_cast(obj)

class itkDenseFiniteDifferenceImageFilterIF2IF2(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIF2IF2):
    """Proxy of C++ itkDenseFiniteDifferenceImageFilterIF2IF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2_OutputTimesDoubleCheck
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2_OutputAdditiveOperatorsCheck
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2_OutputAdditiveAndAssignOperatorsCheck
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIF2IF2"""
        return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIF2IF2

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDenseFiniteDifferenceImageFilterIF2IF2_swigregister = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2_swigregister
itkDenseFiniteDifferenceImageFilterIF2IF2_swigregister(itkDenseFiniteDifferenceImageFilterIF2IF2)

def itkDenseFiniteDifferenceImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIF2IF2 *":
    """itkDenseFiniteDifferenceImageFilterIF2IF2_cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIF2IF2"""
    return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2_cast(obj)

class itkDenseFiniteDifferenceImageFilterIF3IF3(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIF3IF3):
    """Proxy of C++ itkDenseFiniteDifferenceImageFilterIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3_OutputTimesDoubleCheck
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3_OutputAdditiveOperatorsCheck
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3_OutputAdditiveAndAssignOperatorsCheck
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIF3IF3"""
        return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIF3IF3

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDenseFiniteDifferenceImageFilterIF3IF3_swigregister = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3_swigregister
itkDenseFiniteDifferenceImageFilterIF3IF3_swigregister(itkDenseFiniteDifferenceImageFilterIF3IF3)

def itkDenseFiniteDifferenceImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIF3IF3 *":
    """itkDenseFiniteDifferenceImageFilterIF3IF3_cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIF3IF3"""
    return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3_cast(obj)

class itkDenseFiniteDifferenceImageFilterIVF22IVF22(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIVF22IVF22):
    """Proxy of C++ itkDenseFiniteDifferenceImageFilterIVF22IVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22_OutputTimesDoubleCheck
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22_OutputAdditiveOperatorsCheck
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22_OutputAdditiveAndAssignOperatorsCheck
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIVF22IVF22

    def cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIVF22IVF22 *":
        """cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIVF22IVF22"""
        return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIVF22IVF22

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIVF22IVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIVF22IVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDenseFiniteDifferenceImageFilterIVF22IVF22_swigregister = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22_swigregister
itkDenseFiniteDifferenceImageFilterIVF22IVF22_swigregister(itkDenseFiniteDifferenceImageFilterIVF22IVF22)

def itkDenseFiniteDifferenceImageFilterIVF22IVF22_cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIVF22IVF22 *":
    """itkDenseFiniteDifferenceImageFilterIVF22IVF22_cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIVF22IVF22"""
    return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22_cast(obj)

class itkDenseFiniteDifferenceImageFilterIVF23IVF23(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIVF23IVF23):
    """Proxy of C++ itkDenseFiniteDifferenceImageFilterIVF23IVF23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23_OutputTimesDoubleCheck
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23_OutputAdditiveOperatorsCheck
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23_OutputAdditiveAndAssignOperatorsCheck
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIVF23IVF23

    def cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIVF23IVF23 *":
        """cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIVF23IVF23"""
        return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIVF23IVF23

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIVF23IVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIVF23IVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDenseFiniteDifferenceImageFilterIVF23IVF23_swigregister = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23_swigregister
itkDenseFiniteDifferenceImageFilterIVF23IVF23_swigregister(itkDenseFiniteDifferenceImageFilterIVF23IVF23)

def itkDenseFiniteDifferenceImageFilterIVF23IVF23_cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIVF23IVF23 *":
    """itkDenseFiniteDifferenceImageFilterIVF23IVF23_cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIVF23IVF23"""
    return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23_cast(obj)

class itkDenseFiniteDifferenceImageFilterIVF32IVF32(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIVF32IVF32):
    """Proxy of C++ itkDenseFiniteDifferenceImageFilterIVF32IVF32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32_OutputTimesDoubleCheck
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32_OutputAdditiveOperatorsCheck
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32_OutputAdditiveAndAssignOperatorsCheck
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIVF32IVF32

    def cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIVF32IVF32 *":
        """cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIVF32IVF32"""
        return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIVF32IVF32

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIVF32IVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIVF32IVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDenseFiniteDifferenceImageFilterIVF32IVF32_swigregister = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32_swigregister
itkDenseFiniteDifferenceImageFilterIVF32IVF32_swigregister(itkDenseFiniteDifferenceImageFilterIVF32IVF32)

def itkDenseFiniteDifferenceImageFilterIVF32IVF32_cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIVF32IVF32 *":
    """itkDenseFiniteDifferenceImageFilterIVF32IVF32_cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIVF32IVF32"""
    return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32_cast(obj)

class itkDenseFiniteDifferenceImageFilterIVF33IVF33(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIVF33IVF33):
    """Proxy of C++ itkDenseFiniteDifferenceImageFilterIVF33IVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33_OutputTimesDoubleCheck
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33_OutputAdditiveOperatorsCheck
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33_OutputAdditiveAndAssignOperatorsCheck
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIVF33IVF33

    def cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIVF33IVF33 *":
        """cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIVF33IVF33"""
        return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIVF33IVF33

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIVF33IVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIVF33IVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDenseFiniteDifferenceImageFilterIVF33IVF33_swigregister = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33_swigregister
itkDenseFiniteDifferenceImageFilterIVF33IVF33_swigregister(itkDenseFiniteDifferenceImageFilterIVF33IVF33)

def itkDenseFiniteDifferenceImageFilterIVF33IVF33_cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIVF33IVF33 *":
    """itkDenseFiniteDifferenceImageFilterIVF33IVF33_cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIVF33IVF33"""
    return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33_cast(obj)

class itkDenseFiniteDifferenceImageFilterIVF42IVF42(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIVF42IVF42):
    """Proxy of C++ itkDenseFiniteDifferenceImageFilterIVF42IVF42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42_OutputTimesDoubleCheck
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42_OutputAdditiveOperatorsCheck
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42_OutputAdditiveAndAssignOperatorsCheck
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIVF42IVF42

    def cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIVF42IVF42 *":
        """cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIVF42IVF42"""
        return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIVF42IVF42

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIVF42IVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIVF42IVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDenseFiniteDifferenceImageFilterIVF42IVF42_swigregister = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42_swigregister
itkDenseFiniteDifferenceImageFilterIVF42IVF42_swigregister(itkDenseFiniteDifferenceImageFilterIVF42IVF42)

def itkDenseFiniteDifferenceImageFilterIVF42IVF42_cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIVF42IVF42 *":
    """itkDenseFiniteDifferenceImageFilterIVF42IVF42_cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIVF42IVF42"""
    return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42_cast(obj)

class itkDenseFiniteDifferenceImageFilterIVF43IVF43(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIVF43IVF43):
    """Proxy of C++ itkDenseFiniteDifferenceImageFilterIVF43IVF43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OutputTimesDoubleCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43_OutputTimesDoubleCheck
    OutputAdditiveOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43_OutputAdditiveOperatorsCheck
    OutputAdditiveAndAssignOperatorsCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43_OutputAdditiveAndAssignOperatorsCheck
    InputConvertibleToOutputCheck = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDenseFiniteDifferenceImageFilterPython.delete_itkDenseFiniteDifferenceImageFilterIVF43IVF43

    def cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIVF43IVF43 *":
        """cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIVF43IVF43"""
        return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDenseFiniteDifferenceImageFilterIVF43IVF43

        Create a new object of the class itkDenseFiniteDifferenceImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDenseFiniteDifferenceImageFilterIVF43IVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDenseFiniteDifferenceImageFilterIVF43IVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDenseFiniteDifferenceImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDenseFiniteDifferenceImageFilterIVF43IVF43_swigregister = _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43_swigregister
itkDenseFiniteDifferenceImageFilterIVF43IVF43_swigregister(itkDenseFiniteDifferenceImageFilterIVF43IVF43)

def itkDenseFiniteDifferenceImageFilterIVF43IVF43_cast(obj: 'itkLightObject') -> "itkDenseFiniteDifferenceImageFilterIVF43IVF43 *":
    """itkDenseFiniteDifferenceImageFilterIVF43IVF43_cast(itkLightObject obj) -> itkDenseFiniteDifferenceImageFilterIVF43IVF43"""
    return _itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43_cast(obj)


def dense_finite_difference_image_filter(*args, **kwargs):
    """Procedural interface for DenseFiniteDifferenceImageFilter"""
    import itk
    instance = itk.DenseFiniteDifferenceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def dense_finite_difference_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.DenseFiniteDifferenceImageFilter, itkTemplate.itkTemplate):
        dense_finite_difference_image_filter.__doc__ = itk.DenseFiniteDifferenceImageFilter.values()[0].__doc__
    else:
        dense_finite_difference_image_filter.__doc__ = itk.DenseFiniteDifferenceImageFilter.__doc__




