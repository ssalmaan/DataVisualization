# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkFiniteDifferenceFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkFiniteDifferenceFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkFiniteDifferenceFunctionPython
            return _itkFiniteDifferenceFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkFiniteDifferenceFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkFiniteDifferenceFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkFiniteDifferenceFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkSizePython
import pyBasePython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import ITKCommonBasePython
import itkCovariantVectorPython

def itkFiniteDifferenceFunctionICVF43_New():
  return itkFiniteDifferenceFunctionICVF43.New()


def itkFiniteDifferenceFunctionICVF42_New():
  return itkFiniteDifferenceFunctionICVF42.New()


def itkFiniteDifferenceFunctionICVF33_New():
  return itkFiniteDifferenceFunctionICVF33.New()


def itkFiniteDifferenceFunctionICVF32_New():
  return itkFiniteDifferenceFunctionICVF32.New()


def itkFiniteDifferenceFunctionICVF23_New():
  return itkFiniteDifferenceFunctionICVF23.New()


def itkFiniteDifferenceFunctionICVF22_New():
  return itkFiniteDifferenceFunctionICVF22.New()


def itkFiniteDifferenceFunctionIVF43_New():
  return itkFiniteDifferenceFunctionIVF43.New()


def itkFiniteDifferenceFunctionIVF42_New():
  return itkFiniteDifferenceFunctionIVF42.New()


def itkFiniteDifferenceFunctionIVF33_New():
  return itkFiniteDifferenceFunctionIVF33.New()


def itkFiniteDifferenceFunctionIVF32_New():
  return itkFiniteDifferenceFunctionIVF32.New()


def itkFiniteDifferenceFunctionIVF23_New():
  return itkFiniteDifferenceFunctionIVF23.New()


def itkFiniteDifferenceFunctionIVF22_New():
  return itkFiniteDifferenceFunctionIVF22.New()


def itkFiniteDifferenceFunctionIF3_New():
  return itkFiniteDifferenceFunctionIF3.New()


def itkFiniteDifferenceFunctionIF2_New():
  return itkFiniteDifferenceFunctionIF2.New()


def itkFiniteDifferenceFunctionIUS3_New():
  return itkFiniteDifferenceFunctionIUS3.New()


def itkFiniteDifferenceFunctionIUS2_New():
  return itkFiniteDifferenceFunctionIUS2.New()


def itkFiniteDifferenceFunctionIUC3_New():
  return itkFiniteDifferenceFunctionIUC3.New()


def itkFiniteDifferenceFunctionIUC2_New():
  return itkFiniteDifferenceFunctionIUC2.New()


def itkFiniteDifferenceFunctionISS3_New():
  return itkFiniteDifferenceFunctionISS3.New()


def itkFiniteDifferenceFunctionISS2_New():
  return itkFiniteDifferenceFunctionISS2.New()

class itkFiniteDifferenceFunctionICVF22(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionICVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionICVF22 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkCovariantVectorF2":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionICVF22 self, itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,2 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::CovariantVector< float,2 >,2 >,itk::Image< itk::CovariantVector< float,2 >,2 > > > const & neighborhood, void * globalData, itkVectorF2 offset) -> itkCovariantVectorF2
        ComputeUpdate(itkFiniteDifferenceFunctionICVF22 self, itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,2 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::CovariantVector< float,2 >,2 >,itk::Image< itk::CovariantVector< float,2 >,2 > > > const & neighborhood, void * globalData) -> itkCovariantVectorF2
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize2') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionICVF22 self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_SetRadius(self, r)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkFiniteDifferenceFunctionICVF22 self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionICVF22 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionICVF22 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD2 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionICVF22 self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionICVF22 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionICVF22 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionICVF22 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF22

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionICVF22 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF22"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionICVF22

        Create a new object of the class itkFiniteDifferenceFunctionICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionICVF22.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_InitializeIteration, None, itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeUpdate, None, itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_SetRadius, None, itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetRadius, None, itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_SetScaleCoefficients, None, itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetScaleCoefficients, None, itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_swigregister
itkFiniteDifferenceFunctionICVF22_swigregister(itkFiniteDifferenceFunctionICVF22)

def itkFiniteDifferenceFunctionICVF22_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionICVF22 *":
    """itkFiniteDifferenceFunctionICVF22_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF22"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_cast(obj)

class itkFiniteDifferenceFunctionICVF23(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionICVF23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionICVF23 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkCovariantVectorF2":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionICVF23 self, itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,2 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::CovariantVector< float,2 >,3 >,itk::Image< itk::CovariantVector< float,2 >,3 > > > const & neighborhood, void * globalData, itkVectorF3 offset) -> itkCovariantVectorF2
        ComputeUpdate(itkFiniteDifferenceFunctionICVF23 self, itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,2 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::CovariantVector< float,2 >,3 >,itk::Image< itk::CovariantVector< float,2 >,3 > > > const & neighborhood, void * globalData) -> itkCovariantVectorF2
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize3') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionICVF23 self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_SetRadius(self, r)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkFiniteDifferenceFunctionICVF23 self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionICVF23 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionICVF23 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD3 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionICVF23 self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionICVF23 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionICVF23 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionICVF23 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF23

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionICVF23 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF23"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionICVF23

        Create a new object of the class itkFiniteDifferenceFunctionICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionICVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionICVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionICVF23.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_InitializeIteration, None, itkFiniteDifferenceFunctionICVF23)
itkFiniteDifferenceFunctionICVF23.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ComputeUpdate, None, itkFiniteDifferenceFunctionICVF23)
itkFiniteDifferenceFunctionICVF23.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_SetRadius, None, itkFiniteDifferenceFunctionICVF23)
itkFiniteDifferenceFunctionICVF23.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_GetRadius, None, itkFiniteDifferenceFunctionICVF23)
itkFiniteDifferenceFunctionICVF23.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_SetScaleCoefficients, None, itkFiniteDifferenceFunctionICVF23)
itkFiniteDifferenceFunctionICVF23.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_GetScaleCoefficients, None, itkFiniteDifferenceFunctionICVF23)
itkFiniteDifferenceFunctionICVF23.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionICVF23)
itkFiniteDifferenceFunctionICVF23.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionICVF23)
itkFiniteDifferenceFunctionICVF23.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionICVF23)
itkFiniteDifferenceFunctionICVF23.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionICVF23)
itkFiniteDifferenceFunctionICVF23_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_swigregister
itkFiniteDifferenceFunctionICVF23_swigregister(itkFiniteDifferenceFunctionICVF23)

def itkFiniteDifferenceFunctionICVF23_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionICVF23 *":
    """itkFiniteDifferenceFunctionICVF23_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF23"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_cast(obj)

class itkFiniteDifferenceFunctionICVF32(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionICVF32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionICVF32 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkCovariantVectorF3":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionICVF32 self, itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,3 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::CovariantVector< float,3 >,2 >,itk::Image< itk::CovariantVector< float,3 >,2 > > > const & neighborhood, void * globalData, itkVectorF2 offset) -> itkCovariantVectorF3
        ComputeUpdate(itkFiniteDifferenceFunctionICVF32 self, itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,3 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::CovariantVector< float,3 >,2 >,itk::Image< itk::CovariantVector< float,3 >,2 > > > const & neighborhood, void * globalData) -> itkCovariantVectorF3
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize2') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionICVF32 self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_SetRadius(self, r)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkFiniteDifferenceFunctionICVF32 self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionICVF32 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionICVF32 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD2 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionICVF32 self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionICVF32 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionICVF32 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionICVF32 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF32

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionICVF32 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF32"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionICVF32

        Create a new object of the class itkFiniteDifferenceFunctionICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionICVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionICVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionICVF32.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_InitializeIteration, None, itkFiniteDifferenceFunctionICVF32)
itkFiniteDifferenceFunctionICVF32.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ComputeUpdate, None, itkFiniteDifferenceFunctionICVF32)
itkFiniteDifferenceFunctionICVF32.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_SetRadius, None, itkFiniteDifferenceFunctionICVF32)
itkFiniteDifferenceFunctionICVF32.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_GetRadius, None, itkFiniteDifferenceFunctionICVF32)
itkFiniteDifferenceFunctionICVF32.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_SetScaleCoefficients, None, itkFiniteDifferenceFunctionICVF32)
itkFiniteDifferenceFunctionICVF32.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_GetScaleCoefficients, None, itkFiniteDifferenceFunctionICVF32)
itkFiniteDifferenceFunctionICVF32.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionICVF32)
itkFiniteDifferenceFunctionICVF32.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionICVF32)
itkFiniteDifferenceFunctionICVF32.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionICVF32)
itkFiniteDifferenceFunctionICVF32.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionICVF32)
itkFiniteDifferenceFunctionICVF32_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_swigregister
itkFiniteDifferenceFunctionICVF32_swigregister(itkFiniteDifferenceFunctionICVF32)

def itkFiniteDifferenceFunctionICVF32_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionICVF32 *":
    """itkFiniteDifferenceFunctionICVF32_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF32"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_cast(obj)

class itkFiniteDifferenceFunctionICVF33(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionICVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionICVF33 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkCovariantVectorF3":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionICVF33 self, itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,3 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::CovariantVector< float,3 >,3 >,itk::Image< itk::CovariantVector< float,3 >,3 > > > const & neighborhood, void * globalData, itkVectorF3 offset) -> itkCovariantVectorF3
        ComputeUpdate(itkFiniteDifferenceFunctionICVF33 self, itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,3 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::CovariantVector< float,3 >,3 >,itk::Image< itk::CovariantVector< float,3 >,3 > > > const & neighborhood, void * globalData) -> itkCovariantVectorF3
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize3') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionICVF33 self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_SetRadius(self, r)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkFiniteDifferenceFunctionICVF33 self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionICVF33 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionICVF33 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD3 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionICVF33 self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionICVF33 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionICVF33 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionICVF33 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF33

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionICVF33 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF33"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionICVF33

        Create a new object of the class itkFiniteDifferenceFunctionICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionICVF33.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_InitializeIteration, None, itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeUpdate, None, itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_SetRadius, None, itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetRadius, None, itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_SetScaleCoefficients, None, itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetScaleCoefficients, None, itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_swigregister
itkFiniteDifferenceFunctionICVF33_swigregister(itkFiniteDifferenceFunctionICVF33)

def itkFiniteDifferenceFunctionICVF33_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionICVF33 *":
    """itkFiniteDifferenceFunctionICVF33_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF33"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_cast(obj)

class itkFiniteDifferenceFunctionICVF42(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionICVF42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionICVF42 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkCovariantVectorF4":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionICVF42 self, itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,4 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::CovariantVector< float,4 >,2 >,itk::Image< itk::CovariantVector< float,4 >,2 > > > const & neighborhood, void * globalData, itkVectorF2 offset) -> itkCovariantVectorF4
        ComputeUpdate(itkFiniteDifferenceFunctionICVF42 self, itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,4 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::CovariantVector< float,4 >,2 >,itk::Image< itk::CovariantVector< float,4 >,2 > > > const & neighborhood, void * globalData) -> itkCovariantVectorF4
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize2') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionICVF42 self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_SetRadius(self, r)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkFiniteDifferenceFunctionICVF42 self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionICVF42 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionICVF42 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD2 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionICVF42 self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionICVF42 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionICVF42 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionICVF42 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF42

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionICVF42 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF42"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionICVF42

        Create a new object of the class itkFiniteDifferenceFunctionICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionICVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionICVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionICVF42.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_InitializeIteration, None, itkFiniteDifferenceFunctionICVF42)
itkFiniteDifferenceFunctionICVF42.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ComputeUpdate, None, itkFiniteDifferenceFunctionICVF42)
itkFiniteDifferenceFunctionICVF42.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_SetRadius, None, itkFiniteDifferenceFunctionICVF42)
itkFiniteDifferenceFunctionICVF42.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_GetRadius, None, itkFiniteDifferenceFunctionICVF42)
itkFiniteDifferenceFunctionICVF42.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_SetScaleCoefficients, None, itkFiniteDifferenceFunctionICVF42)
itkFiniteDifferenceFunctionICVF42.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_GetScaleCoefficients, None, itkFiniteDifferenceFunctionICVF42)
itkFiniteDifferenceFunctionICVF42.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionICVF42)
itkFiniteDifferenceFunctionICVF42.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionICVF42)
itkFiniteDifferenceFunctionICVF42.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionICVF42)
itkFiniteDifferenceFunctionICVF42.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionICVF42)
itkFiniteDifferenceFunctionICVF42_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_swigregister
itkFiniteDifferenceFunctionICVF42_swigregister(itkFiniteDifferenceFunctionICVF42)

def itkFiniteDifferenceFunctionICVF42_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionICVF42 *":
    """itkFiniteDifferenceFunctionICVF42_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF42"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_cast(obj)

class itkFiniteDifferenceFunctionICVF43(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionICVF43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionICVF43 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkCovariantVectorF4":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionICVF43 self, itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,4 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::CovariantVector< float,4 >,3 >,itk::Image< itk::CovariantVector< float,4 >,3 > > > const & neighborhood, void * globalData, itkVectorF3 offset) -> itkCovariantVectorF4
        ComputeUpdate(itkFiniteDifferenceFunctionICVF43 self, itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,4 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::CovariantVector< float,4 >,3 >,itk::Image< itk::CovariantVector< float,4 >,3 > > > const & neighborhood, void * globalData) -> itkCovariantVectorF4
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize3') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionICVF43 self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_SetRadius(self, r)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkFiniteDifferenceFunctionICVF43 self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionICVF43 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionICVF43 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD3 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionICVF43 self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionICVF43 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionICVF43 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionICVF43 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF43

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionICVF43 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF43"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionICVF43

        Create a new object of the class itkFiniteDifferenceFunctionICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionICVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionICVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionICVF43.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_InitializeIteration, None, itkFiniteDifferenceFunctionICVF43)
itkFiniteDifferenceFunctionICVF43.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ComputeUpdate, None, itkFiniteDifferenceFunctionICVF43)
itkFiniteDifferenceFunctionICVF43.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_SetRadius, None, itkFiniteDifferenceFunctionICVF43)
itkFiniteDifferenceFunctionICVF43.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_GetRadius, None, itkFiniteDifferenceFunctionICVF43)
itkFiniteDifferenceFunctionICVF43.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_SetScaleCoefficients, None, itkFiniteDifferenceFunctionICVF43)
itkFiniteDifferenceFunctionICVF43.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_GetScaleCoefficients, None, itkFiniteDifferenceFunctionICVF43)
itkFiniteDifferenceFunctionICVF43.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionICVF43)
itkFiniteDifferenceFunctionICVF43.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionICVF43)
itkFiniteDifferenceFunctionICVF43.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionICVF43)
itkFiniteDifferenceFunctionICVF43.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionICVF43)
itkFiniteDifferenceFunctionICVF43_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_swigregister
itkFiniteDifferenceFunctionICVF43_swigregister(itkFiniteDifferenceFunctionICVF43)

def itkFiniteDifferenceFunctionICVF43_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionICVF43 *":
    """itkFiniteDifferenceFunctionICVF43_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF43"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_cast(obj)

class itkFiniteDifferenceFunctionIF2(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionIF2 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "float":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & neighborhood, void * globalData, itkVectorF2 offset) -> float
        ComputeUpdate(itkFiniteDifferenceFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & neighborhood, void * globalData) -> float
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize2') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionIF2 self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_SetRadius(self, r)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkFiniteDifferenceFunctionIF2 self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionIF2 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionIF2 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD2 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionIF2 self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionIF2 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionIF2 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionIF2 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIF2

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIF2 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIF2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIF2

        Create a new object of the class itkFiniteDifferenceFunctionIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIF2.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_InitializeIteration, None, itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeUpdate, None, itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_SetRadius, None, itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetRadius, None, itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_SetScaleCoefficients, None, itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetScaleCoefficients, None, itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_swigregister
itkFiniteDifferenceFunctionIF2_swigregister(itkFiniteDifferenceFunctionIF2)

def itkFiniteDifferenceFunctionIF2_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIF2 *":
    """itkFiniteDifferenceFunctionIF2_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIF2"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_cast(obj)

class itkFiniteDifferenceFunctionIF3(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionIF3 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "float":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & neighborhood, void * globalData, itkVectorF3 offset) -> float
        ComputeUpdate(itkFiniteDifferenceFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & neighborhood, void * globalData) -> float
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize3') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionIF3 self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_SetRadius(self, r)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkFiniteDifferenceFunctionIF3 self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionIF3 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionIF3 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD3 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionIF3 self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionIF3 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionIF3 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionIF3 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIF3

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIF3 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIF3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIF3

        Create a new object of the class itkFiniteDifferenceFunctionIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIF3.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_InitializeIteration, None, itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeUpdate, None, itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_SetRadius, None, itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetRadius, None, itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_SetScaleCoefficients, None, itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetScaleCoefficients, None, itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_swigregister
itkFiniteDifferenceFunctionIF3_swigregister(itkFiniteDifferenceFunctionIF3)

def itkFiniteDifferenceFunctionIF3_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIF3 *":
    """itkFiniteDifferenceFunctionIF3_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIF3"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_cast(obj)

class itkFiniteDifferenceFunctionISS2(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionISS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionISS2 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "short":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionISS2 self, itk::ConstNeighborhoodIterator< itk::Image< short,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< short,2 >,itk::Image< short,2 > > > const & neighborhood, void * globalData, itkVectorF2 offset) -> short
        ComputeUpdate(itkFiniteDifferenceFunctionISS2 self, itk::ConstNeighborhoodIterator< itk::Image< short,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< short,2 >,itk::Image< short,2 > > > const & neighborhood, void * globalData) -> short
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize2') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionISS2 self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_SetRadius(self, r)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkFiniteDifferenceFunctionISS2 self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionISS2 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionISS2 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD2 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionISS2 self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionISS2 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionISS2 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionISS2 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionISS2

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionISS2 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionISS2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionISS2

        Create a new object of the class itkFiniteDifferenceFunctionISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionISS2.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_InitializeIteration, None, itkFiniteDifferenceFunctionISS2)
itkFiniteDifferenceFunctionISS2.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ComputeUpdate, None, itkFiniteDifferenceFunctionISS2)
itkFiniteDifferenceFunctionISS2.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_SetRadius, None, itkFiniteDifferenceFunctionISS2)
itkFiniteDifferenceFunctionISS2.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_GetRadius, None, itkFiniteDifferenceFunctionISS2)
itkFiniteDifferenceFunctionISS2.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_SetScaleCoefficients, None, itkFiniteDifferenceFunctionISS2)
itkFiniteDifferenceFunctionISS2.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_GetScaleCoefficients, None, itkFiniteDifferenceFunctionISS2)
itkFiniteDifferenceFunctionISS2.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionISS2)
itkFiniteDifferenceFunctionISS2.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionISS2)
itkFiniteDifferenceFunctionISS2.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionISS2)
itkFiniteDifferenceFunctionISS2.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionISS2)
itkFiniteDifferenceFunctionISS2_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_swigregister
itkFiniteDifferenceFunctionISS2_swigregister(itkFiniteDifferenceFunctionISS2)

def itkFiniteDifferenceFunctionISS2_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionISS2 *":
    """itkFiniteDifferenceFunctionISS2_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionISS2"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_cast(obj)

class itkFiniteDifferenceFunctionISS3(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionISS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionISS3 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "short":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionISS3 self, itk::ConstNeighborhoodIterator< itk::Image< short,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< short,3 >,itk::Image< short,3 > > > const & neighborhood, void * globalData, itkVectorF3 offset) -> short
        ComputeUpdate(itkFiniteDifferenceFunctionISS3 self, itk::ConstNeighborhoodIterator< itk::Image< short,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< short,3 >,itk::Image< short,3 > > > const & neighborhood, void * globalData) -> short
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize3') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionISS3 self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_SetRadius(self, r)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkFiniteDifferenceFunctionISS3 self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionISS3 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionISS3 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD3 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionISS3 self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionISS3 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionISS3 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionISS3 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionISS3

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionISS3 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionISS3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionISS3

        Create a new object of the class itkFiniteDifferenceFunctionISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionISS3.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_InitializeIteration, None, itkFiniteDifferenceFunctionISS3)
itkFiniteDifferenceFunctionISS3.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ComputeUpdate, None, itkFiniteDifferenceFunctionISS3)
itkFiniteDifferenceFunctionISS3.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_SetRadius, None, itkFiniteDifferenceFunctionISS3)
itkFiniteDifferenceFunctionISS3.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_GetRadius, None, itkFiniteDifferenceFunctionISS3)
itkFiniteDifferenceFunctionISS3.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_SetScaleCoefficients, None, itkFiniteDifferenceFunctionISS3)
itkFiniteDifferenceFunctionISS3.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_GetScaleCoefficients, None, itkFiniteDifferenceFunctionISS3)
itkFiniteDifferenceFunctionISS3.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionISS3)
itkFiniteDifferenceFunctionISS3.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionISS3)
itkFiniteDifferenceFunctionISS3.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionISS3)
itkFiniteDifferenceFunctionISS3.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionISS3)
itkFiniteDifferenceFunctionISS3_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_swigregister
itkFiniteDifferenceFunctionISS3_swigregister(itkFiniteDifferenceFunctionISS3)

def itkFiniteDifferenceFunctionISS3_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionISS3 *":
    """itkFiniteDifferenceFunctionISS3_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionISS3"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_cast(obj)

class itkFiniteDifferenceFunctionIUC2(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionIUC2 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "unsigned char":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionIUC2 self, itk::ConstNeighborhoodIterator< itk::Image< unsigned char,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< unsigned char,2 >,itk::Image< unsigned char,2 > > > const & neighborhood, void * globalData, itkVectorF2 offset) -> unsigned char
        ComputeUpdate(itkFiniteDifferenceFunctionIUC2 self, itk::ConstNeighborhoodIterator< itk::Image< unsigned char,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< unsigned char,2 >,itk::Image< unsigned char,2 > > > const & neighborhood, void * globalData) -> unsigned char
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize2') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionIUC2 self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_SetRadius(self, r)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkFiniteDifferenceFunctionIUC2 self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionIUC2 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionIUC2 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD2 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionIUC2 self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionIUC2 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionIUC2 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionIUC2 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUC2

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIUC2 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUC2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIUC2

        Create a new object of the class itkFiniteDifferenceFunctionIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIUC2.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_InitializeIteration, None, itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeUpdate, None, itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_SetRadius, None, itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetRadius, None, itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_SetScaleCoefficients, None, itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetScaleCoefficients, None, itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_swigregister
itkFiniteDifferenceFunctionIUC2_swigregister(itkFiniteDifferenceFunctionIUC2)

def itkFiniteDifferenceFunctionIUC2_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIUC2 *":
    """itkFiniteDifferenceFunctionIUC2_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUC2"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_cast(obj)

class itkFiniteDifferenceFunctionIUC3(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionIUC3 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "unsigned char":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionIUC3 self, itk::ConstNeighborhoodIterator< itk::Image< unsigned char,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< unsigned char,3 >,itk::Image< unsigned char,3 > > > const & neighborhood, void * globalData, itkVectorF3 offset) -> unsigned char
        ComputeUpdate(itkFiniteDifferenceFunctionIUC3 self, itk::ConstNeighborhoodIterator< itk::Image< unsigned char,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< unsigned char,3 >,itk::Image< unsigned char,3 > > > const & neighborhood, void * globalData) -> unsigned char
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize3') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionIUC3 self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_SetRadius(self, r)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkFiniteDifferenceFunctionIUC3 self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionIUC3 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionIUC3 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD3 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionIUC3 self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionIUC3 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionIUC3 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionIUC3 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUC3

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIUC3 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUC3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIUC3

        Create a new object of the class itkFiniteDifferenceFunctionIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIUC3.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_InitializeIteration, None, itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeUpdate, None, itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_SetRadius, None, itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetRadius, None, itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_SetScaleCoefficients, None, itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetScaleCoefficients, None, itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_swigregister
itkFiniteDifferenceFunctionIUC3_swigregister(itkFiniteDifferenceFunctionIUC3)

def itkFiniteDifferenceFunctionIUC3_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIUC3 *":
    """itkFiniteDifferenceFunctionIUC3_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUC3"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_cast(obj)

class itkFiniteDifferenceFunctionIUS2(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionIUS2 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "unsigned short":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionIUS2 self, itk::ConstNeighborhoodIterator< itk::Image< unsigned short,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< unsigned short,2 >,itk::Image< unsigned short,2 > > > const & neighborhood, void * globalData, itkVectorF2 offset) -> unsigned short
        ComputeUpdate(itkFiniteDifferenceFunctionIUS2 self, itk::ConstNeighborhoodIterator< itk::Image< unsigned short,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< unsigned short,2 >,itk::Image< unsigned short,2 > > > const & neighborhood, void * globalData) -> unsigned short
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize2') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionIUS2 self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_SetRadius(self, r)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkFiniteDifferenceFunctionIUS2 self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionIUS2 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionIUS2 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD2 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionIUS2 self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionIUS2 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionIUS2 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionIUS2 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUS2

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIUS2 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUS2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIUS2

        Create a new object of the class itkFiniteDifferenceFunctionIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIUS2.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_InitializeIteration, None, itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeUpdate, None, itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_SetRadius, None, itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetRadius, None, itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_SetScaleCoefficients, None, itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetScaleCoefficients, None, itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_swigregister
itkFiniteDifferenceFunctionIUS2_swigregister(itkFiniteDifferenceFunctionIUS2)

def itkFiniteDifferenceFunctionIUS2_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIUS2 *":
    """itkFiniteDifferenceFunctionIUS2_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUS2"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_cast(obj)

class itkFiniteDifferenceFunctionIUS3(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionIUS3 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "unsigned short":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionIUS3 self, itk::ConstNeighborhoodIterator< itk::Image< unsigned short,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< unsigned short,3 >,itk::Image< unsigned short,3 > > > const & neighborhood, void * globalData, itkVectorF3 offset) -> unsigned short
        ComputeUpdate(itkFiniteDifferenceFunctionIUS3 self, itk::ConstNeighborhoodIterator< itk::Image< unsigned short,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< unsigned short,3 >,itk::Image< unsigned short,3 > > > const & neighborhood, void * globalData) -> unsigned short
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize3') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionIUS3 self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_SetRadius(self, r)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkFiniteDifferenceFunctionIUS3 self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionIUS3 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionIUS3 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD3 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionIUS3 self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionIUS3 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionIUS3 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionIUS3 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUS3

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIUS3 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUS3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIUS3

        Create a new object of the class itkFiniteDifferenceFunctionIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIUS3.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_InitializeIteration, None, itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeUpdate, None, itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_SetRadius, None, itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetRadius, None, itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_SetScaleCoefficients, None, itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetScaleCoefficients, None, itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_swigregister
itkFiniteDifferenceFunctionIUS3_swigregister(itkFiniteDifferenceFunctionIUS3)

def itkFiniteDifferenceFunctionIUS3_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIUS3 *":
    """itkFiniteDifferenceFunctionIUS3_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUS3"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_cast(obj)

class itkFiniteDifferenceFunctionIVF22(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionIVF22 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkVectorF2":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionIVF22 self, itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,2 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float,2 >,2 >,itk::Image< itk::Vector< float,2 >,2 > > > const & neighborhood, void * globalData, itkVectorF2 offset) -> itkVectorF2
        ComputeUpdate(itkFiniteDifferenceFunctionIVF22 self, itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,2 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float,2 >,2 >,itk::Image< itk::Vector< float,2 >,2 > > > const & neighborhood, void * globalData) -> itkVectorF2
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize2') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionIVF22 self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_SetRadius(self, r)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkFiniteDifferenceFunctionIVF22 self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionIVF22 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionIVF22 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD2 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionIVF22 self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionIVF22 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionIVF22 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionIVF22 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF22

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIVF22 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF22"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIVF22

        Create a new object of the class itkFiniteDifferenceFunctionIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionIVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionIVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIVF22.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_InitializeIteration, None, itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeUpdate, None, itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_SetRadius, None, itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetRadius, None, itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_SetScaleCoefficients, None, itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetScaleCoefficients, None, itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_swigregister
itkFiniteDifferenceFunctionIVF22_swigregister(itkFiniteDifferenceFunctionIVF22)

def itkFiniteDifferenceFunctionIVF22_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIVF22 *":
    """itkFiniteDifferenceFunctionIVF22_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF22"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_cast(obj)

class itkFiniteDifferenceFunctionIVF23(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIVF23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionIVF23 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkVectorF2":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionIVF23 self, itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,2 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float,2 >,3 >,itk::Image< itk::Vector< float,2 >,3 > > > const & neighborhood, void * globalData, itkVectorF3 offset) -> itkVectorF2
        ComputeUpdate(itkFiniteDifferenceFunctionIVF23 self, itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,2 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float,2 >,3 >,itk::Image< itk::Vector< float,2 >,3 > > > const & neighborhood, void * globalData) -> itkVectorF2
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize3') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionIVF23 self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_SetRadius(self, r)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkFiniteDifferenceFunctionIVF23 self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionIVF23 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionIVF23 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD3 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionIVF23 self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionIVF23 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionIVF23 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionIVF23 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF23

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIVF23 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF23"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIVF23

        Create a new object of the class itkFiniteDifferenceFunctionIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionIVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionIVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIVF23.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_InitializeIteration, None, itkFiniteDifferenceFunctionIVF23)
itkFiniteDifferenceFunctionIVF23.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ComputeUpdate, None, itkFiniteDifferenceFunctionIVF23)
itkFiniteDifferenceFunctionIVF23.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_SetRadius, None, itkFiniteDifferenceFunctionIVF23)
itkFiniteDifferenceFunctionIVF23.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_GetRadius, None, itkFiniteDifferenceFunctionIVF23)
itkFiniteDifferenceFunctionIVF23.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_SetScaleCoefficients, None, itkFiniteDifferenceFunctionIVF23)
itkFiniteDifferenceFunctionIVF23.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_GetScaleCoefficients, None, itkFiniteDifferenceFunctionIVF23)
itkFiniteDifferenceFunctionIVF23.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionIVF23)
itkFiniteDifferenceFunctionIVF23.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionIVF23)
itkFiniteDifferenceFunctionIVF23.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionIVF23)
itkFiniteDifferenceFunctionIVF23.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionIVF23)
itkFiniteDifferenceFunctionIVF23_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_swigregister
itkFiniteDifferenceFunctionIVF23_swigregister(itkFiniteDifferenceFunctionIVF23)

def itkFiniteDifferenceFunctionIVF23_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIVF23 *":
    """itkFiniteDifferenceFunctionIVF23_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF23"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_cast(obj)

class itkFiniteDifferenceFunctionIVF32(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIVF32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionIVF32 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkVectorF3":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionIVF32 self, itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,3 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float,3 >,2 >,itk::Image< itk::Vector< float,3 >,2 > > > const & neighborhood, void * globalData, itkVectorF2 offset) -> itkVectorF3
        ComputeUpdate(itkFiniteDifferenceFunctionIVF32 self, itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,3 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float,3 >,2 >,itk::Image< itk::Vector< float,3 >,2 > > > const & neighborhood, void * globalData) -> itkVectorF3
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize2') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionIVF32 self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_SetRadius(self, r)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkFiniteDifferenceFunctionIVF32 self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionIVF32 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionIVF32 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD2 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionIVF32 self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionIVF32 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionIVF32 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionIVF32 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF32

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIVF32 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF32"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIVF32

        Create a new object of the class itkFiniteDifferenceFunctionIVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionIVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionIVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIVF32.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_InitializeIteration, None, itkFiniteDifferenceFunctionIVF32)
itkFiniteDifferenceFunctionIVF32.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ComputeUpdate, None, itkFiniteDifferenceFunctionIVF32)
itkFiniteDifferenceFunctionIVF32.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_SetRadius, None, itkFiniteDifferenceFunctionIVF32)
itkFiniteDifferenceFunctionIVF32.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_GetRadius, None, itkFiniteDifferenceFunctionIVF32)
itkFiniteDifferenceFunctionIVF32.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_SetScaleCoefficients, None, itkFiniteDifferenceFunctionIVF32)
itkFiniteDifferenceFunctionIVF32.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_GetScaleCoefficients, None, itkFiniteDifferenceFunctionIVF32)
itkFiniteDifferenceFunctionIVF32.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionIVF32)
itkFiniteDifferenceFunctionIVF32.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionIVF32)
itkFiniteDifferenceFunctionIVF32.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionIVF32)
itkFiniteDifferenceFunctionIVF32.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionIVF32)
itkFiniteDifferenceFunctionIVF32_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_swigregister
itkFiniteDifferenceFunctionIVF32_swigregister(itkFiniteDifferenceFunctionIVF32)

def itkFiniteDifferenceFunctionIVF32_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIVF32 *":
    """itkFiniteDifferenceFunctionIVF32_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF32"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_cast(obj)

class itkFiniteDifferenceFunctionIVF33(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionIVF33 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkVectorF3":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionIVF33 self, itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,3 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float,3 >,3 >,itk::Image< itk::Vector< float,3 >,3 > > > const & neighborhood, void * globalData, itkVectorF3 offset) -> itkVectorF3
        ComputeUpdate(itkFiniteDifferenceFunctionIVF33 self, itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,3 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float,3 >,3 >,itk::Image< itk::Vector< float,3 >,3 > > > const & neighborhood, void * globalData) -> itkVectorF3
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize3') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionIVF33 self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_SetRadius(self, r)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkFiniteDifferenceFunctionIVF33 self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionIVF33 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionIVF33 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD3 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionIVF33 self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionIVF33 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionIVF33 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionIVF33 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF33

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIVF33 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF33"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIVF33

        Create a new object of the class itkFiniteDifferenceFunctionIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionIVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionIVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIVF33.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_InitializeIteration, None, itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeUpdate, None, itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_SetRadius, None, itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetRadius, None, itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_SetScaleCoefficients, None, itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetScaleCoefficients, None, itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_swigregister
itkFiniteDifferenceFunctionIVF33_swigregister(itkFiniteDifferenceFunctionIVF33)

def itkFiniteDifferenceFunctionIVF33_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIVF33 *":
    """itkFiniteDifferenceFunctionIVF33_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF33"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_cast(obj)

class itkFiniteDifferenceFunctionIVF42(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIVF42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionIVF42 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkVectorF4":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionIVF42 self, itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,4 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float,4 >,2 >,itk::Image< itk::Vector< float,4 >,2 > > > const & neighborhood, void * globalData, itkVectorF2 offset) -> itkVectorF4
        ComputeUpdate(itkFiniteDifferenceFunctionIVF42 self, itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,4 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float,4 >,2 >,itk::Image< itk::Vector< float,4 >,2 > > > const & neighborhood, void * globalData) -> itkVectorF4
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize2') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionIVF42 self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_SetRadius(self, r)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkFiniteDifferenceFunctionIVF42 self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionIVF42 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionIVF42 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD2 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionIVF42 self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionIVF42 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionIVF42 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionIVF42 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF42

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIVF42 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF42"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIVF42

        Create a new object of the class itkFiniteDifferenceFunctionIVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionIVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionIVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIVF42.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_InitializeIteration, None, itkFiniteDifferenceFunctionIVF42)
itkFiniteDifferenceFunctionIVF42.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ComputeUpdate, None, itkFiniteDifferenceFunctionIVF42)
itkFiniteDifferenceFunctionIVF42.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_SetRadius, None, itkFiniteDifferenceFunctionIVF42)
itkFiniteDifferenceFunctionIVF42.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_GetRadius, None, itkFiniteDifferenceFunctionIVF42)
itkFiniteDifferenceFunctionIVF42.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_SetScaleCoefficients, None, itkFiniteDifferenceFunctionIVF42)
itkFiniteDifferenceFunctionIVF42.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_GetScaleCoefficients, None, itkFiniteDifferenceFunctionIVF42)
itkFiniteDifferenceFunctionIVF42.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionIVF42)
itkFiniteDifferenceFunctionIVF42.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionIVF42)
itkFiniteDifferenceFunctionIVF42.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionIVF42)
itkFiniteDifferenceFunctionIVF42.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionIVF42)
itkFiniteDifferenceFunctionIVF42_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_swigregister
itkFiniteDifferenceFunctionIVF42_swigregister(itkFiniteDifferenceFunctionIVF42)

def itkFiniteDifferenceFunctionIVF42_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIVF42 *":
    """itkFiniteDifferenceFunctionIVF42_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF42"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_cast(obj)

class itkFiniteDifferenceFunctionIVF43(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIVF43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionIVF43 self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkVectorF4":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionIVF43 self, itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,4 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float,4 >,3 >,itk::Image< itk::Vector< float,4 >,3 > > > const & neighborhood, void * globalData, itkVectorF3 offset) -> itkVectorF4
        ComputeUpdate(itkFiniteDifferenceFunctionIVF43 self, itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,4 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float,4 >,3 >,itk::Image< itk::Vector< float,4 >,3 > > > const & neighborhood, void * globalData) -> itkVectorF4
        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize3') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionIVF43 self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_SetRadius(self, r)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkFiniteDifferenceFunctionIVF43 self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionIVF43 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionIVF43 self, double * vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD3 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionIVF43 self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionIVF43 self, void * GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionIVF43 self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionIVF43 self, void * GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF43

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIVF43 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF43"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIVF43

        Create a new object of the class itkFiniteDifferenceFunctionIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionIVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionIVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIVF43.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_InitializeIteration, None, itkFiniteDifferenceFunctionIVF43)
itkFiniteDifferenceFunctionIVF43.ComputeUpdate = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ComputeUpdate, None, itkFiniteDifferenceFunctionIVF43)
itkFiniteDifferenceFunctionIVF43.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_SetRadius, None, itkFiniteDifferenceFunctionIVF43)
itkFiniteDifferenceFunctionIVF43.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_GetRadius, None, itkFiniteDifferenceFunctionIVF43)
itkFiniteDifferenceFunctionIVF43.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_SetScaleCoefficients, None, itkFiniteDifferenceFunctionIVF43)
itkFiniteDifferenceFunctionIVF43.GetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_GetScaleCoefficients, None, itkFiniteDifferenceFunctionIVF43)
itkFiniteDifferenceFunctionIVF43.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionIVF43)
itkFiniteDifferenceFunctionIVF43.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionIVF43)
itkFiniteDifferenceFunctionIVF43.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionIVF43)
itkFiniteDifferenceFunctionIVF43.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionIVF43)
itkFiniteDifferenceFunctionIVF43_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_swigregister
itkFiniteDifferenceFunctionIVF43_swigregister(itkFiniteDifferenceFunctionIVF43)

def itkFiniteDifferenceFunctionIVF43_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionIVF43 *":
    """itkFiniteDifferenceFunctionIVF43_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF43"""
    return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_cast(obj)



