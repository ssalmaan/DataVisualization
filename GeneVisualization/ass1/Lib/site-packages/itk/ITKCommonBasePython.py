# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ITKCommonBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ITKCommonBasePython', [dirname(__file__)])
        except ImportError:
            import _ITKCommonBasePython
            return _ITKCommonBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_ITKCommonBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ITKCommonBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _ITKCommonBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import pyBasePython

def itkMersenneTwisterRandomVariateGenerator_New():
  return itkMersenneTwisterRandomVariateGenerator.New()


def itkRandomVariateGeneratorBase_New():
  return itkRandomVariateGeneratorBase.New()


def itkImageRegionSplitterDirection_New():
  return itkImageRegionSplitterDirection.New()


def itkImageRegionSplitterBase_New():
  return itkImageRegionSplitterBase.New()


def itkPlatformMultiThreader_New():
  return itkPlatformMultiThreader.New()


def itkPoolMultiThreader_New():
  return itkPoolMultiThreader.New()


def itkMultiThreaderBase_New():
  return itkMultiThreaderBase.New()


def itkMetaDataObjectBase_New():
  return itkMetaDataObjectBase.New()


def itkRealTimeClock_New():
  return itkRealTimeClock.New()


def itkThreadPool_New():
  return itkThreadPool.New()


def itkVersion_New():
  return itkVersion.New()


def itkOutputWindow_New():
  return itkOutputWindow.New()


def itkObjectFactoryBase_New():
  return itkObjectFactoryBase.New()


def itkDynamicLoader_New():
  return itkDynamicLoader.New()


def itkDirectory_New():
  return itkDirectory.New()


def itkCommand_New():
  return itkCommand.New()


def itkProcessObject_New():
  return itkProcessObject.New()


def itkStreamingProcessObject_New():
  return itkStreamingProcessObject.New()


def itkLightProcessObject_New():
  return itkLightProcessObject.New()


def itkDataObject_New():
  return itkDataObject.New()


def itkObject_New():
  return itkObject.New()


def itkLightObject_New():
  return itkLightObject.New()

class listitkLightObject(object):
    """Proxy of C++ std::list<(itkLightObject_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listitkLightObject self) -> SwigPyIterator"""
        return _ITKCommonBasePython.listitkLightObject_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listitkLightObject self) -> bool"""
        return _ITKCommonBasePython.listitkLightObject___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listitkLightObject self) -> bool"""
        return _ITKCommonBasePython.listitkLightObject___bool__(self)


    def __len__(self) -> "std::list< itkLightObject_Pointer >::size_type":
        """__len__(listitkLightObject self) -> std::list< itkLightObject_Pointer >::size_type"""
        return _ITKCommonBasePython.listitkLightObject___len__(self)


    def __getslice__(self, i: 'std::list< itkLightObject_Pointer >::difference_type', j: 'std::list< itkLightObject_Pointer >::difference_type') -> "std::list< itkLightObject_Pointer,std::allocator< itkLightObject_Pointer > > *":
        """__getslice__(listitkLightObject self, std::list< itkLightObject_Pointer >::difference_type i, std::list< itkLightObject_Pointer >::difference_type j) -> listitkLightObject"""
        return _ITKCommonBasePython.listitkLightObject___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listitkLightObject self, std::list< itkLightObject_Pointer >::difference_type i, std::list< itkLightObject_Pointer >::difference_type j)
        __setslice__(listitkLightObject self, std::list< itkLightObject_Pointer >::difference_type i, std::list< itkLightObject_Pointer >::difference_type j, listitkLightObject v)
        """
        return _ITKCommonBasePython.listitkLightObject___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< itkLightObject_Pointer >::difference_type', j: 'std::list< itkLightObject_Pointer >::difference_type') -> "void":
        """__delslice__(listitkLightObject self, std::list< itkLightObject_Pointer >::difference_type i, std::list< itkLightObject_Pointer >::difference_type j)"""
        return _ITKCommonBasePython.listitkLightObject___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listitkLightObject self, std::list< itkLightObject_Pointer >::difference_type i)
        __delitem__(listitkLightObject self, PySliceObject * slice)
        """
        return _ITKCommonBasePython.listitkLightObject___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< itkLightObject_Pointer >::value_type const &":
        """
        __getitem__(listitkLightObject self, PySliceObject * slice) -> listitkLightObject
        __getitem__(listitkLightObject self, std::list< itkLightObject_Pointer >::difference_type i) -> std::list< itkLightObject_Pointer >::value_type const &
        """
        return _ITKCommonBasePython.listitkLightObject___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listitkLightObject self, PySliceObject * slice, listitkLightObject v)
        __setitem__(listitkLightObject self, PySliceObject * slice)
        __setitem__(listitkLightObject self, std::list< itkLightObject_Pointer >::difference_type i, std::list< itkLightObject_Pointer >::value_type const & x)
        """
        return _ITKCommonBasePython.listitkLightObject___setitem__(self, *args)


    def pop(self) -> "std::list< itkLightObject_Pointer >::value_type":
        """pop(listitkLightObject self) -> std::list< itkLightObject_Pointer >::value_type"""
        return _ITKCommonBasePython.listitkLightObject_pop(self)


    def append(self, x: 'std::list< itkLightObject_Pointer >::value_type const &') -> "void":
        """append(listitkLightObject self, std::list< itkLightObject_Pointer >::value_type const & x)"""
        return _ITKCommonBasePython.listitkLightObject_append(self, x)


    def empty(self) -> "bool":
        """empty(listitkLightObject self) -> bool"""
        return _ITKCommonBasePython.listitkLightObject_empty(self)


    def size(self) -> "std::list< itkLightObject_Pointer >::size_type":
        """size(listitkLightObject self) -> std::list< itkLightObject_Pointer >::size_type"""
        return _ITKCommonBasePython.listitkLightObject_size(self)


    def swap(self, v: 'listitkLightObject') -> "void":
        """swap(listitkLightObject self, listitkLightObject v)"""
        return _ITKCommonBasePython.listitkLightObject_swap(self, v)


    def begin(self) -> "std::list< itkLightObject_Pointer >::iterator":
        """begin(listitkLightObject self) -> std::list< itkLightObject_Pointer >::iterator"""
        return _ITKCommonBasePython.listitkLightObject_begin(self)


    def end(self) -> "std::list< itkLightObject_Pointer >::iterator":
        """end(listitkLightObject self) -> std::list< itkLightObject_Pointer >::iterator"""
        return _ITKCommonBasePython.listitkLightObject_end(self)


    def rbegin(self) -> "std::list< itkLightObject_Pointer >::reverse_iterator":
        """rbegin(listitkLightObject self) -> std::list< itkLightObject_Pointer >::reverse_iterator"""
        return _ITKCommonBasePython.listitkLightObject_rbegin(self)


    def rend(self) -> "std::list< itkLightObject_Pointer >::reverse_iterator":
        """rend(listitkLightObject self) -> std::list< itkLightObject_Pointer >::reverse_iterator"""
        return _ITKCommonBasePython.listitkLightObject_rend(self)


    def clear(self) -> "void":
        """clear(listitkLightObject self)"""
        return _ITKCommonBasePython.listitkLightObject_clear(self)


    def get_allocator(self) -> "std::list< itkLightObject_Pointer >::allocator_type":
        """get_allocator(listitkLightObject self) -> std::list< itkLightObject_Pointer >::allocator_type"""
        return _ITKCommonBasePython.listitkLightObject_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listitkLightObject self)"""
        return _ITKCommonBasePython.listitkLightObject_pop_back(self)


    def erase(self, *args) -> "std::list< itkLightObject_Pointer >::iterator":
        """
        erase(listitkLightObject self, std::list< itkLightObject_Pointer >::iterator pos) -> std::list< itkLightObject_Pointer >::iterator
        erase(listitkLightObject self, std::list< itkLightObject_Pointer >::iterator first, std::list< itkLightObject_Pointer >::iterator last) -> std::list< itkLightObject_Pointer >::iterator
        """
        return _ITKCommonBasePython.listitkLightObject_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(itkLightObject_Pointer)> self) -> listitkLightObject
        __init__(std::list<(itkLightObject_Pointer)> self, listitkLightObject arg2) -> listitkLightObject
        __init__(std::list<(itkLightObject_Pointer)> self, std::list< itkLightObject_Pointer >::size_type size) -> listitkLightObject
        __init__(std::list<(itkLightObject_Pointer)> self, std::list< itkLightObject_Pointer >::size_type size, std::list< itkLightObject_Pointer >::value_type const & value) -> listitkLightObject
        """
        _ITKCommonBasePython.listitkLightObject_swiginit(self, _ITKCommonBasePython.new_listitkLightObject(*args))

    def push_back(self, x: 'std::list< itkLightObject_Pointer >::value_type const &') -> "void":
        """push_back(listitkLightObject self, std::list< itkLightObject_Pointer >::value_type const & x)"""
        return _ITKCommonBasePython.listitkLightObject_push_back(self, x)


    def front(self) -> "std::list< itkLightObject_Pointer >::value_type const &":
        """front(listitkLightObject self) -> std::list< itkLightObject_Pointer >::value_type const &"""
        return _ITKCommonBasePython.listitkLightObject_front(self)


    def back(self) -> "std::list< itkLightObject_Pointer >::value_type const &":
        """back(listitkLightObject self) -> std::list< itkLightObject_Pointer >::value_type const &"""
        return _ITKCommonBasePython.listitkLightObject_back(self)


    def assign(self, n: 'std::list< itkLightObject_Pointer >::size_type', x: 'std::list< itkLightObject_Pointer >::value_type const &') -> "void":
        """assign(listitkLightObject self, std::list< itkLightObject_Pointer >::size_type n, std::list< itkLightObject_Pointer >::value_type const & x)"""
        return _ITKCommonBasePython.listitkLightObject_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listitkLightObject self, std::list< itkLightObject_Pointer >::size_type new_size)
        resize(listitkLightObject self, std::list< itkLightObject_Pointer >::size_type new_size, std::list< itkLightObject_Pointer >::value_type const & x)
        """
        return _ITKCommonBasePython.listitkLightObject_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listitkLightObject self, std::list< itkLightObject_Pointer >::iterator pos, std::list< itkLightObject_Pointer >::value_type const & x) -> std::list< itkLightObject_Pointer >::iterator
        insert(listitkLightObject self, std::list< itkLightObject_Pointer >::iterator pos, std::list< itkLightObject_Pointer >::size_type n, std::list< itkLightObject_Pointer >::value_type const & x)
        """
        return _ITKCommonBasePython.listitkLightObject_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listitkLightObject self)"""
        return _ITKCommonBasePython.listitkLightObject_pop_front(self)


    def push_front(self, x: 'std::list< itkLightObject_Pointer >::value_type const &') -> "void":
        """push_front(listitkLightObject self, std::list< itkLightObject_Pointer >::value_type const & x)"""
        return _ITKCommonBasePython.listitkLightObject_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listitkLightObject self)"""
        return _ITKCommonBasePython.listitkLightObject_reverse(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_listitkLightObject
listitkLightObject.iterator = new_instancemethod(_ITKCommonBasePython.listitkLightObject_iterator, None, listitkLightObject)
listitkLightObject.__nonzero__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___nonzero__, None, listitkLightObject)
listitkLightObject.__bool__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___bool__, None, listitkLightObject)
listitkLightObject.__len__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___len__, None, listitkLightObject)
listitkLightObject.__getslice__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___getslice__, None, listitkLightObject)
listitkLightObject.__setslice__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___setslice__, None, listitkLightObject)
listitkLightObject.__delslice__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___delslice__, None, listitkLightObject)
listitkLightObject.__delitem__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___delitem__, None, listitkLightObject)
listitkLightObject.__getitem__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___getitem__, None, listitkLightObject)
listitkLightObject.__setitem__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___setitem__, None, listitkLightObject)
listitkLightObject.pop = new_instancemethod(_ITKCommonBasePython.listitkLightObject_pop, None, listitkLightObject)
listitkLightObject.append = new_instancemethod(_ITKCommonBasePython.listitkLightObject_append, None, listitkLightObject)
listitkLightObject.empty = new_instancemethod(_ITKCommonBasePython.listitkLightObject_empty, None, listitkLightObject)
listitkLightObject.size = new_instancemethod(_ITKCommonBasePython.listitkLightObject_size, None, listitkLightObject)
listitkLightObject.swap = new_instancemethod(_ITKCommonBasePython.listitkLightObject_swap, None, listitkLightObject)
listitkLightObject.begin = new_instancemethod(_ITKCommonBasePython.listitkLightObject_begin, None, listitkLightObject)
listitkLightObject.end = new_instancemethod(_ITKCommonBasePython.listitkLightObject_end, None, listitkLightObject)
listitkLightObject.rbegin = new_instancemethod(_ITKCommonBasePython.listitkLightObject_rbegin, None, listitkLightObject)
listitkLightObject.rend = new_instancemethod(_ITKCommonBasePython.listitkLightObject_rend, None, listitkLightObject)
listitkLightObject.clear = new_instancemethod(_ITKCommonBasePython.listitkLightObject_clear, None, listitkLightObject)
listitkLightObject.get_allocator = new_instancemethod(_ITKCommonBasePython.listitkLightObject_get_allocator, None, listitkLightObject)
listitkLightObject.pop_back = new_instancemethod(_ITKCommonBasePython.listitkLightObject_pop_back, None, listitkLightObject)
listitkLightObject.erase = new_instancemethod(_ITKCommonBasePython.listitkLightObject_erase, None, listitkLightObject)
listitkLightObject.push_back = new_instancemethod(_ITKCommonBasePython.listitkLightObject_push_back, None, listitkLightObject)
listitkLightObject.front = new_instancemethod(_ITKCommonBasePython.listitkLightObject_front, None, listitkLightObject)
listitkLightObject.back = new_instancemethod(_ITKCommonBasePython.listitkLightObject_back, None, listitkLightObject)
listitkLightObject.assign = new_instancemethod(_ITKCommonBasePython.listitkLightObject_assign, None, listitkLightObject)
listitkLightObject.resize = new_instancemethod(_ITKCommonBasePython.listitkLightObject_resize, None, listitkLightObject)
listitkLightObject.insert = new_instancemethod(_ITKCommonBasePython.listitkLightObject_insert, None, listitkLightObject)
listitkLightObject.pop_front = new_instancemethod(_ITKCommonBasePython.listitkLightObject_pop_front, None, listitkLightObject)
listitkLightObject.push_front = new_instancemethod(_ITKCommonBasePython.listitkLightObject_push_front, None, listitkLightObject)
listitkLightObject.reverse = new_instancemethod(_ITKCommonBasePython.listitkLightObject_reverse, None, listitkLightObject)
listitkLightObject_swigregister = _ITKCommonBasePython.listitkLightObject_swigregister
listitkLightObject_swigregister(listitkLightObject)

class vectoritkDataObject(object):
    """Proxy of C++ std::vector<(itkDataObject_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkDataObject self) -> SwigPyIterator"""
        return _ITKCommonBasePython.vectoritkDataObject_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkDataObject self) -> bool"""
        return _ITKCommonBasePython.vectoritkDataObject___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkDataObject self) -> bool"""
        return _ITKCommonBasePython.vectoritkDataObject___bool__(self)


    def __len__(self) -> "std::vector< itkDataObject_Pointer >::size_type":
        """__len__(vectoritkDataObject self) -> std::vector< itkDataObject_Pointer >::size_type"""
        return _ITKCommonBasePython.vectoritkDataObject___len__(self)


    def __getslice__(self, i: 'std::vector< itkDataObject_Pointer >::difference_type', j: 'std::vector< itkDataObject_Pointer >::difference_type') -> "std::vector< itkDataObject_Pointer,std::allocator< itkDataObject_Pointer > > *":
        """__getslice__(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::difference_type i, std::vector< itkDataObject_Pointer >::difference_type j) -> vectoritkDataObject"""
        return _ITKCommonBasePython.vectoritkDataObject___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::difference_type i, std::vector< itkDataObject_Pointer >::difference_type j)
        __setslice__(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::difference_type i, std::vector< itkDataObject_Pointer >::difference_type j, vectoritkDataObject v)
        """
        return _ITKCommonBasePython.vectoritkDataObject___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkDataObject_Pointer >::difference_type', j: 'std::vector< itkDataObject_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::difference_type i, std::vector< itkDataObject_Pointer >::difference_type j)"""
        return _ITKCommonBasePython.vectoritkDataObject___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::difference_type i)
        __delitem__(vectoritkDataObject self, PySliceObject * slice)
        """
        return _ITKCommonBasePython.vectoritkDataObject___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkDataObject_Pointer >::value_type const &":
        """
        __getitem__(vectoritkDataObject self, PySliceObject * slice) -> vectoritkDataObject
        __getitem__(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::difference_type i) -> std::vector< itkDataObject_Pointer >::value_type const &
        """
        return _ITKCommonBasePython.vectoritkDataObject___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkDataObject self, PySliceObject * slice, vectoritkDataObject v)
        __setitem__(vectoritkDataObject self, PySliceObject * slice)
        __setitem__(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::difference_type i, std::vector< itkDataObject_Pointer >::value_type const & x)
        """
        return _ITKCommonBasePython.vectoritkDataObject___setitem__(self, *args)


    def pop(self) -> "std::vector< itkDataObject_Pointer >::value_type":
        """pop(vectoritkDataObject self) -> std::vector< itkDataObject_Pointer >::value_type"""
        return _ITKCommonBasePython.vectoritkDataObject_pop(self)


    def append(self, x: 'std::vector< itkDataObject_Pointer >::value_type const &') -> "void":
        """append(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::value_type const & x)"""
        return _ITKCommonBasePython.vectoritkDataObject_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkDataObject self) -> bool"""
        return _ITKCommonBasePython.vectoritkDataObject_empty(self)


    def size(self) -> "std::vector< itkDataObject_Pointer >::size_type":
        """size(vectoritkDataObject self) -> std::vector< itkDataObject_Pointer >::size_type"""
        return _ITKCommonBasePython.vectoritkDataObject_size(self)


    def swap(self, v: 'vectoritkDataObject') -> "void":
        """swap(vectoritkDataObject self, vectoritkDataObject v)"""
        return _ITKCommonBasePython.vectoritkDataObject_swap(self, v)


    def begin(self) -> "std::vector< itkDataObject_Pointer >::iterator":
        """begin(vectoritkDataObject self) -> std::vector< itkDataObject_Pointer >::iterator"""
        return _ITKCommonBasePython.vectoritkDataObject_begin(self)


    def end(self) -> "std::vector< itkDataObject_Pointer >::iterator":
        """end(vectoritkDataObject self) -> std::vector< itkDataObject_Pointer >::iterator"""
        return _ITKCommonBasePython.vectoritkDataObject_end(self)


    def rbegin(self) -> "std::vector< itkDataObject_Pointer >::reverse_iterator":
        """rbegin(vectoritkDataObject self) -> std::vector< itkDataObject_Pointer >::reverse_iterator"""
        return _ITKCommonBasePython.vectoritkDataObject_rbegin(self)


    def rend(self) -> "std::vector< itkDataObject_Pointer >::reverse_iterator":
        """rend(vectoritkDataObject self) -> std::vector< itkDataObject_Pointer >::reverse_iterator"""
        return _ITKCommonBasePython.vectoritkDataObject_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkDataObject self)"""
        return _ITKCommonBasePython.vectoritkDataObject_clear(self)


    def get_allocator(self) -> "std::vector< itkDataObject_Pointer >::allocator_type":
        """get_allocator(vectoritkDataObject self) -> std::vector< itkDataObject_Pointer >::allocator_type"""
        return _ITKCommonBasePython.vectoritkDataObject_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkDataObject self)"""
        return _ITKCommonBasePython.vectoritkDataObject_pop_back(self)


    def erase(self, *args) -> "std::vector< itkDataObject_Pointer >::iterator":
        """
        erase(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::iterator pos) -> std::vector< itkDataObject_Pointer >::iterator
        erase(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::iterator first, std::vector< itkDataObject_Pointer >::iterator last) -> std::vector< itkDataObject_Pointer >::iterator
        """
        return _ITKCommonBasePython.vectoritkDataObject_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkDataObject_Pointer)> self) -> vectoritkDataObject
        __init__(std::vector<(itkDataObject_Pointer)> self, vectoritkDataObject arg2) -> vectoritkDataObject
        __init__(std::vector<(itkDataObject_Pointer)> self, std::vector< itkDataObject_Pointer >::size_type size) -> vectoritkDataObject
        __init__(std::vector<(itkDataObject_Pointer)> self, std::vector< itkDataObject_Pointer >::size_type size, std::vector< itkDataObject_Pointer >::value_type const & value) -> vectoritkDataObject
        """
        _ITKCommonBasePython.vectoritkDataObject_swiginit(self, _ITKCommonBasePython.new_vectoritkDataObject(*args))

    def push_back(self, x: 'std::vector< itkDataObject_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::value_type const & x)"""
        return _ITKCommonBasePython.vectoritkDataObject_push_back(self, x)


    def front(self) -> "std::vector< itkDataObject_Pointer >::value_type const &":
        """front(vectoritkDataObject self) -> std::vector< itkDataObject_Pointer >::value_type const &"""
        return _ITKCommonBasePython.vectoritkDataObject_front(self)


    def back(self) -> "std::vector< itkDataObject_Pointer >::value_type const &":
        """back(vectoritkDataObject self) -> std::vector< itkDataObject_Pointer >::value_type const &"""
        return _ITKCommonBasePython.vectoritkDataObject_back(self)


    def assign(self, n: 'std::vector< itkDataObject_Pointer >::size_type', x: 'std::vector< itkDataObject_Pointer >::value_type const &') -> "void":
        """assign(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::size_type n, std::vector< itkDataObject_Pointer >::value_type const & x)"""
        return _ITKCommonBasePython.vectoritkDataObject_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::size_type new_size)
        resize(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::size_type new_size, std::vector< itkDataObject_Pointer >::value_type const & x)
        """
        return _ITKCommonBasePython.vectoritkDataObject_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::iterator pos, std::vector< itkDataObject_Pointer >::value_type const & x) -> std::vector< itkDataObject_Pointer >::iterator
        insert(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::iterator pos, std::vector< itkDataObject_Pointer >::size_type n, std::vector< itkDataObject_Pointer >::value_type const & x)
        """
        return _ITKCommonBasePython.vectoritkDataObject_insert(self, *args)


    def reserve(self, n: 'std::vector< itkDataObject_Pointer >::size_type') -> "void":
        """reserve(vectoritkDataObject self, std::vector< itkDataObject_Pointer >::size_type n)"""
        return _ITKCommonBasePython.vectoritkDataObject_reserve(self, n)


    def capacity(self) -> "std::vector< itkDataObject_Pointer >::size_type":
        """capacity(vectoritkDataObject self) -> std::vector< itkDataObject_Pointer >::size_type"""
        return _ITKCommonBasePython.vectoritkDataObject_capacity(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_vectoritkDataObject
vectoritkDataObject.iterator = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_iterator, None, vectoritkDataObject)
vectoritkDataObject.__nonzero__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___nonzero__, None, vectoritkDataObject)
vectoritkDataObject.__bool__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___bool__, None, vectoritkDataObject)
vectoritkDataObject.__len__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___len__, None, vectoritkDataObject)
vectoritkDataObject.__getslice__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___getslice__, None, vectoritkDataObject)
vectoritkDataObject.__setslice__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___setslice__, None, vectoritkDataObject)
vectoritkDataObject.__delslice__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___delslice__, None, vectoritkDataObject)
vectoritkDataObject.__delitem__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___delitem__, None, vectoritkDataObject)
vectoritkDataObject.__getitem__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___getitem__, None, vectoritkDataObject)
vectoritkDataObject.__setitem__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___setitem__, None, vectoritkDataObject)
vectoritkDataObject.pop = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_pop, None, vectoritkDataObject)
vectoritkDataObject.append = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_append, None, vectoritkDataObject)
vectoritkDataObject.empty = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_empty, None, vectoritkDataObject)
vectoritkDataObject.size = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_size, None, vectoritkDataObject)
vectoritkDataObject.swap = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_swap, None, vectoritkDataObject)
vectoritkDataObject.begin = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_begin, None, vectoritkDataObject)
vectoritkDataObject.end = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_end, None, vectoritkDataObject)
vectoritkDataObject.rbegin = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_rbegin, None, vectoritkDataObject)
vectoritkDataObject.rend = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_rend, None, vectoritkDataObject)
vectoritkDataObject.clear = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_clear, None, vectoritkDataObject)
vectoritkDataObject.get_allocator = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_get_allocator, None, vectoritkDataObject)
vectoritkDataObject.pop_back = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_pop_back, None, vectoritkDataObject)
vectoritkDataObject.erase = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_erase, None, vectoritkDataObject)
vectoritkDataObject.push_back = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_push_back, None, vectoritkDataObject)
vectoritkDataObject.front = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_front, None, vectoritkDataObject)
vectoritkDataObject.back = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_back, None, vectoritkDataObject)
vectoritkDataObject.assign = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_assign, None, vectoritkDataObject)
vectoritkDataObject.resize = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_resize, None, vectoritkDataObject)
vectoritkDataObject.insert = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_insert, None, vectoritkDataObject)
vectoritkDataObject.reserve = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_reserve, None, vectoritkDataObject)
vectoritkDataObject.capacity = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_capacity, None, vectoritkDataObject)
vectoritkDataObject_swigregister = _ITKCommonBasePython.vectoritkDataObject_swigregister
vectoritkDataObject_swigregister(vectoritkDataObject)

class listitkObjectFactoryBase(object):
    """Proxy of C++ std::list<(p.itkObjectFactoryBase)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listitkObjectFactoryBase self) -> SwigPyIterator"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listitkObjectFactoryBase self) -> bool"""
        return _ITKCommonBasePython.listitkObjectFactoryBase___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listitkObjectFactoryBase self) -> bool"""
        return _ITKCommonBasePython.listitkObjectFactoryBase___bool__(self)


    def __len__(self) -> "std::list< itkObjectFactoryBase * >::size_type":
        """__len__(listitkObjectFactoryBase self) -> std::list< itkObjectFactoryBase * >::size_type"""
        return _ITKCommonBasePython.listitkObjectFactoryBase___len__(self)


    def __getslice__(self, i: 'std::list< itkObjectFactoryBase * >::difference_type', j: 'std::list< itkObjectFactoryBase * >::difference_type') -> "std::list< itkObjectFactoryBase *,std::allocator< itkObjectFactoryBase * > > *":
        """__getslice__(listitkObjectFactoryBase self, std::list< itkObjectFactoryBase * >::difference_type i, std::list< itkObjectFactoryBase * >::difference_type j) -> listitkObjectFactoryBase"""
        return _ITKCommonBasePython.listitkObjectFactoryBase___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listitkObjectFactoryBase self, std::list< itkObjectFactoryBase * >::difference_type i, std::list< itkObjectFactoryBase * >::difference_type j)
        __setslice__(listitkObjectFactoryBase self, std::list< itkObjectFactoryBase * >::difference_type i, std::list< itkObjectFactoryBase * >::difference_type j, listitkObjectFactoryBase v)
        """
        return _ITKCommonBasePython.listitkObjectFactoryBase___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< itkObjectFactoryBase * >::difference_type', j: 'std::list< itkObjectFactoryBase * >::difference_type') -> "void":
        """__delslice__(listitkObjectFactoryBase self, std::list< itkObjectFactoryBase * >::difference_type i, std::list< itkObjectFactoryBase * >::difference_type j)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listitkObjectFactoryBase self, std::list< itkObjectFactoryBase * >::difference_type i)
        __delitem__(listitkObjectFactoryBase self, PySliceObject * slice)
        """
        return _ITKCommonBasePython.listitkObjectFactoryBase___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< itkObjectFactoryBase * >::value_type":
        """
        __getitem__(listitkObjectFactoryBase self, PySliceObject * slice) -> listitkObjectFactoryBase
        __getitem__(listitkObjectFactoryBase self, std::list< itkObjectFactoryBase * >::difference_type i) -> itkObjectFactoryBase
        """
        return _ITKCommonBasePython.listitkObjectFactoryBase___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listitkObjectFactoryBase self, PySliceObject * slice, listitkObjectFactoryBase v)
        __setitem__(listitkObjectFactoryBase self, PySliceObject * slice)
        __setitem__(listitkObjectFactoryBase self, std::list< itkObjectFactoryBase * >::difference_type i, itkObjectFactoryBase x)
        """
        return _ITKCommonBasePython.listitkObjectFactoryBase___setitem__(self, *args)


    def pop(self) -> "std::list< itkObjectFactoryBase * >::value_type":
        """pop(listitkObjectFactoryBase self) -> itkObjectFactoryBase"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_pop(self)


    def append(self, x: 'itkObjectFactoryBase') -> "void":
        """append(listitkObjectFactoryBase self, itkObjectFactoryBase x)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_append(self, x)


    def empty(self) -> "bool":
        """empty(listitkObjectFactoryBase self) -> bool"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_empty(self)


    def size(self) -> "std::list< itkObjectFactoryBase * >::size_type":
        """size(listitkObjectFactoryBase self) -> std::list< itkObjectFactoryBase * >::size_type"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_size(self)


    def swap(self, v: 'listitkObjectFactoryBase') -> "void":
        """swap(listitkObjectFactoryBase self, listitkObjectFactoryBase v)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_swap(self, v)


    def begin(self) -> "std::list< itkObjectFactoryBase * >::iterator":
        """begin(listitkObjectFactoryBase self) -> std::list< itkObjectFactoryBase * >::iterator"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_begin(self)


    def end(self) -> "std::list< itkObjectFactoryBase * >::iterator":
        """end(listitkObjectFactoryBase self) -> std::list< itkObjectFactoryBase * >::iterator"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_end(self)


    def rbegin(self) -> "std::list< itkObjectFactoryBase * >::reverse_iterator":
        """rbegin(listitkObjectFactoryBase self) -> std::list< itkObjectFactoryBase * >::reverse_iterator"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_rbegin(self)


    def rend(self) -> "std::list< itkObjectFactoryBase * >::reverse_iterator":
        """rend(listitkObjectFactoryBase self) -> std::list< itkObjectFactoryBase * >::reverse_iterator"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_rend(self)


    def clear(self) -> "void":
        """clear(listitkObjectFactoryBase self)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_clear(self)


    def get_allocator(self) -> "std::list< itkObjectFactoryBase * >::allocator_type":
        """get_allocator(listitkObjectFactoryBase self) -> std::list< itkObjectFactoryBase * >::allocator_type"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listitkObjectFactoryBase self)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_pop_back(self)


    def erase(self, *args) -> "std::list< itkObjectFactoryBase * >::iterator":
        """
        erase(listitkObjectFactoryBase self, std::list< itkObjectFactoryBase * >::iterator pos) -> std::list< itkObjectFactoryBase * >::iterator
        erase(listitkObjectFactoryBase self, std::list< itkObjectFactoryBase * >::iterator first, std::list< itkObjectFactoryBase * >::iterator last) -> std::list< itkObjectFactoryBase * >::iterator
        """
        return _ITKCommonBasePython.listitkObjectFactoryBase_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(p.itkObjectFactoryBase)> self) -> listitkObjectFactoryBase
        __init__(std::list<(p.itkObjectFactoryBase)> self, listitkObjectFactoryBase arg2) -> listitkObjectFactoryBase
        __init__(std::list<(p.itkObjectFactoryBase)> self, std::list< itkObjectFactoryBase * >::size_type size) -> listitkObjectFactoryBase
        __init__(std::list<(p.itkObjectFactoryBase)> self, std::list< itkObjectFactoryBase * >::size_type size, itkObjectFactoryBase value) -> listitkObjectFactoryBase
        """
        _ITKCommonBasePython.listitkObjectFactoryBase_swiginit(self, _ITKCommonBasePython.new_listitkObjectFactoryBase(*args))

    def push_back(self, x: 'itkObjectFactoryBase') -> "void":
        """push_back(listitkObjectFactoryBase self, itkObjectFactoryBase x)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_push_back(self, x)


    def front(self) -> "std::list< itkObjectFactoryBase * >::value_type":
        """front(listitkObjectFactoryBase self) -> itkObjectFactoryBase"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_front(self)


    def back(self) -> "std::list< itkObjectFactoryBase * >::value_type":
        """back(listitkObjectFactoryBase self) -> itkObjectFactoryBase"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_back(self)


    def assign(self, n: 'std::list< itkObjectFactoryBase * >::size_type', x: 'itkObjectFactoryBase') -> "void":
        """assign(listitkObjectFactoryBase self, std::list< itkObjectFactoryBase * >::size_type n, itkObjectFactoryBase x)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listitkObjectFactoryBase self, std::list< itkObjectFactoryBase * >::size_type new_size)
        resize(listitkObjectFactoryBase self, std::list< itkObjectFactoryBase * >::size_type new_size, itkObjectFactoryBase x)
        """
        return _ITKCommonBasePython.listitkObjectFactoryBase_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listitkObjectFactoryBase self, std::list< itkObjectFactoryBase * >::iterator pos, itkObjectFactoryBase x) -> std::list< itkObjectFactoryBase * >::iterator
        insert(listitkObjectFactoryBase self, std::list< itkObjectFactoryBase * >::iterator pos, std::list< itkObjectFactoryBase * >::size_type n, itkObjectFactoryBase x)
        """
        return _ITKCommonBasePython.listitkObjectFactoryBase_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listitkObjectFactoryBase self)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_pop_front(self)


    def push_front(self, x: 'itkObjectFactoryBase') -> "void":
        """push_front(listitkObjectFactoryBase self, itkObjectFactoryBase x)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_push_front(self, x)


    def remove(self, x: 'itkObjectFactoryBase') -> "void":
        """remove(listitkObjectFactoryBase self, itkObjectFactoryBase x)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_remove(self, x)


    def unique(self) -> "void":
        """unique(listitkObjectFactoryBase self)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_unique(self)


    def reverse(self) -> "void":
        """reverse(listitkObjectFactoryBase self)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_reverse(self)


    def sort(self) -> "void":
        """sort(listitkObjectFactoryBase self)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_sort(self)


    def merge(self, x: 'listitkObjectFactoryBase') -> "void":
        """merge(listitkObjectFactoryBase self, listitkObjectFactoryBase x)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_merge(self, x)

    __swig_destroy__ = _ITKCommonBasePython.delete_listitkObjectFactoryBase
listitkObjectFactoryBase.iterator = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_iterator, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.__nonzero__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___nonzero__, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.__bool__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___bool__, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.__len__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___len__, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.__getslice__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___getslice__, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.__setslice__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___setslice__, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.__delslice__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___delslice__, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.__delitem__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___delitem__, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.__getitem__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___getitem__, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.__setitem__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___setitem__, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.pop = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_pop, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.append = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_append, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.empty = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_empty, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.size = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_size, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.swap = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_swap, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.begin = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_begin, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.end = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_end, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.rbegin = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_rbegin, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.rend = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_rend, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.clear = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_clear, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.get_allocator = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_get_allocator, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.pop_back = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_pop_back, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.erase = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_erase, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.push_back = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_push_back, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.front = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_front, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.back = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_back, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.assign = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_assign, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.resize = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_resize, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.insert = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_insert, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.pop_front = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_pop_front, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.push_front = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_push_front, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.remove = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_remove, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.unique = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_unique, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.reverse = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_reverse, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.sort = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_sort, None, listitkObjectFactoryBase)
listitkObjectFactoryBase.merge = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_merge, None, listitkObjectFactoryBase)
listitkObjectFactoryBase_swigregister = _ITKCommonBasePython.listitkObjectFactoryBase_swigregister
listitkObjectFactoryBase_swigregister(listitkObjectFactoryBase)

class vectoritkMetaDataDictionary(object):
    """Proxy of C++ std::vector<(p.itkMetaDataDictionary)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkMetaDataDictionary self) -> SwigPyIterator"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkMetaDataDictionary self) -> bool"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkMetaDataDictionary self) -> bool"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___bool__(self)


    def __len__(self) -> "std::vector< itkMetaDataDictionary * >::size_type":
        """__len__(vectoritkMetaDataDictionary self) -> std::vector< itkMetaDataDictionary * >::size_type"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___len__(self)


    def __getslice__(self, i: 'std::vector< itkMetaDataDictionary * >::difference_type', j: 'std::vector< itkMetaDataDictionary * >::difference_type') -> "std::vector< itkMetaDataDictionary *,std::allocator< itkMetaDataDictionary * > > *":
        """__getslice__(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::difference_type i, std::vector< itkMetaDataDictionary * >::difference_type j) -> vectoritkMetaDataDictionary"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::difference_type i, std::vector< itkMetaDataDictionary * >::difference_type j)
        __setslice__(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::difference_type i, std::vector< itkMetaDataDictionary * >::difference_type j, vectoritkMetaDataDictionary v)
        """
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkMetaDataDictionary * >::difference_type', j: 'std::vector< itkMetaDataDictionary * >::difference_type') -> "void":
        """__delslice__(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::difference_type i, std::vector< itkMetaDataDictionary * >::difference_type j)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::difference_type i)
        __delitem__(vectoritkMetaDataDictionary self, PySliceObject * slice)
        """
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkMetaDataDictionary * >::value_type":
        """
        __getitem__(vectoritkMetaDataDictionary self, PySliceObject * slice) -> vectoritkMetaDataDictionary
        __getitem__(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::difference_type i) -> itkMetaDataDictionary
        """
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkMetaDataDictionary self, PySliceObject * slice, vectoritkMetaDataDictionary v)
        __setitem__(vectoritkMetaDataDictionary self, PySliceObject * slice)
        __setitem__(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::difference_type i, itkMetaDataDictionary x)
        """
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___setitem__(self, *args)


    def pop(self) -> "std::vector< itkMetaDataDictionary * >::value_type":
        """pop(vectoritkMetaDataDictionary self) -> itkMetaDataDictionary"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_pop(self)


    def append(self, x: 'itkMetaDataDictionary') -> "void":
        """append(vectoritkMetaDataDictionary self, itkMetaDataDictionary x)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkMetaDataDictionary self) -> bool"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_empty(self)


    def size(self) -> "std::vector< itkMetaDataDictionary * >::size_type":
        """size(vectoritkMetaDataDictionary self) -> std::vector< itkMetaDataDictionary * >::size_type"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_size(self)


    def swap(self, v: 'vectoritkMetaDataDictionary') -> "void":
        """swap(vectoritkMetaDataDictionary self, vectoritkMetaDataDictionary v)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_swap(self, v)


    def begin(self) -> "std::vector< itkMetaDataDictionary * >::iterator":
        """begin(vectoritkMetaDataDictionary self) -> std::vector< itkMetaDataDictionary * >::iterator"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_begin(self)


    def end(self) -> "std::vector< itkMetaDataDictionary * >::iterator":
        """end(vectoritkMetaDataDictionary self) -> std::vector< itkMetaDataDictionary * >::iterator"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_end(self)


    def rbegin(self) -> "std::vector< itkMetaDataDictionary * >::reverse_iterator":
        """rbegin(vectoritkMetaDataDictionary self) -> std::vector< itkMetaDataDictionary * >::reverse_iterator"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_rbegin(self)


    def rend(self) -> "std::vector< itkMetaDataDictionary * >::reverse_iterator":
        """rend(vectoritkMetaDataDictionary self) -> std::vector< itkMetaDataDictionary * >::reverse_iterator"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkMetaDataDictionary self)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_clear(self)


    def get_allocator(self) -> "std::vector< itkMetaDataDictionary * >::allocator_type":
        """get_allocator(vectoritkMetaDataDictionary self) -> std::vector< itkMetaDataDictionary * >::allocator_type"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkMetaDataDictionary self)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_pop_back(self)


    def erase(self, *args) -> "std::vector< itkMetaDataDictionary * >::iterator":
        """
        erase(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::iterator pos) -> std::vector< itkMetaDataDictionary * >::iterator
        erase(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::iterator first, std::vector< itkMetaDataDictionary * >::iterator last) -> std::vector< itkMetaDataDictionary * >::iterator
        """
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.itkMetaDataDictionary)> self) -> vectoritkMetaDataDictionary
        __init__(std::vector<(p.itkMetaDataDictionary)> self, vectoritkMetaDataDictionary arg2) -> vectoritkMetaDataDictionary
        __init__(std::vector<(p.itkMetaDataDictionary)> self, std::vector< itkMetaDataDictionary * >::size_type size) -> vectoritkMetaDataDictionary
        __init__(std::vector<(p.itkMetaDataDictionary)> self, std::vector< itkMetaDataDictionary * >::size_type size, itkMetaDataDictionary value) -> vectoritkMetaDataDictionary
        """
        _ITKCommonBasePython.vectoritkMetaDataDictionary_swiginit(self, _ITKCommonBasePython.new_vectoritkMetaDataDictionary(*args))

    def push_back(self, x: 'itkMetaDataDictionary') -> "void":
        """push_back(vectoritkMetaDataDictionary self, itkMetaDataDictionary x)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_push_back(self, x)


    def front(self) -> "std::vector< itkMetaDataDictionary * >::value_type":
        """front(vectoritkMetaDataDictionary self) -> itkMetaDataDictionary"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_front(self)


    def back(self) -> "std::vector< itkMetaDataDictionary * >::value_type":
        """back(vectoritkMetaDataDictionary self) -> itkMetaDataDictionary"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_back(self)


    def assign(self, n: 'std::vector< itkMetaDataDictionary * >::size_type', x: 'itkMetaDataDictionary') -> "void":
        """assign(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::size_type n, itkMetaDataDictionary x)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::size_type new_size)
        resize(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::size_type new_size, itkMetaDataDictionary x)
        """
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::iterator pos, itkMetaDataDictionary x) -> std::vector< itkMetaDataDictionary * >::iterator
        insert(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::iterator pos, std::vector< itkMetaDataDictionary * >::size_type n, itkMetaDataDictionary x)
        """
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_insert(self, *args)


    def reserve(self, n: 'std::vector< itkMetaDataDictionary * >::size_type') -> "void":
        """reserve(vectoritkMetaDataDictionary self, std::vector< itkMetaDataDictionary * >::size_type n)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_reserve(self, n)


    def capacity(self) -> "std::vector< itkMetaDataDictionary * >::size_type":
        """capacity(vectoritkMetaDataDictionary self) -> std::vector< itkMetaDataDictionary * >::size_type"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_capacity(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_vectoritkMetaDataDictionary
vectoritkMetaDataDictionary.iterator = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_iterator, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__nonzero__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___nonzero__, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__bool__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___bool__, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__len__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___len__, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__getslice__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___getslice__, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__setslice__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___setslice__, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__delslice__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___delslice__, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__delitem__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___delitem__, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__getitem__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___getitem__, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__setitem__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___setitem__, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.pop = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_pop, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.append = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_append, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.empty = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_empty, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.size = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_size, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.swap = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_swap, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.begin = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_begin, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.end = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_end, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.rbegin = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_rbegin, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.rend = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_rend, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.clear = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_clear, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.get_allocator = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_get_allocator, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.pop_back = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_pop_back, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.erase = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_erase, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.push_back = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_push_back, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.front = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_front, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.back = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_back, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.assign = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_assign, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.resize = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_resize, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.insert = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_insert, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.reserve = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_reserve, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.capacity = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_capacity, None, vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary_swigregister = _ITKCommonBasePython.vectoritkMetaDataDictionary_swigregister
vectoritkMetaDataDictionary_swigregister(vectoritkMetaDataDictionary)

class itkDataObjectConstIterator(object):
    """Proxy of C++ itkDataObjectConstIterator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkDataObjectConstIterator self) -> itkDataObjectConstIterator
        __init__(itkDataObjectConstIterator self, itkDataObjectConstIterator iter) -> itkDataObjectConstIterator
        """
        _ITKCommonBasePython.itkDataObjectConstIterator_swiginit(self, _ITKCommonBasePython.new_itkDataObjectConstIterator(*args))

    def GetDataObject(self) -> "itkDataObject const *":
        """GetDataObject(itkDataObjectConstIterator self) -> itkDataObject"""
        return _ITKCommonBasePython.itkDataObjectConstIterator_GetDataObject(self)


    def GetName(self) -> "std::string const &":
        """GetName(itkDataObjectConstIterator self) -> std::string const &"""
        return _ITKCommonBasePython.itkDataObjectConstIterator_GetName(self)


    def __eq__(self, iter: 'itkDataObjectConstIterator') -> "bool":
        """__eq__(itkDataObjectConstIterator self, itkDataObjectConstIterator iter) -> bool"""
        return _ITKCommonBasePython.itkDataObjectConstIterator___eq__(self, iter)


    def __ne__(self, iter: 'itkDataObjectConstIterator') -> "bool":
        """__ne__(itkDataObjectConstIterator self, itkDataObjectConstIterator iter) -> bool"""
        return _ITKCommonBasePython.itkDataObjectConstIterator___ne__(self, iter)


    def GoToBegin(self) -> "void":
        """GoToBegin(itkDataObjectConstIterator self)"""
        return _ITKCommonBasePython.itkDataObjectConstIterator_GoToBegin(self)


    def IsAtEnd(self) -> "bool":
        """IsAtEnd(itkDataObjectConstIterator self) -> bool"""
        return _ITKCommonBasePython.itkDataObjectConstIterator_IsAtEnd(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkDataObjectConstIterator
itkDataObjectConstIterator.GetDataObject = new_instancemethod(_ITKCommonBasePython.itkDataObjectConstIterator_GetDataObject, None, itkDataObjectConstIterator)
itkDataObjectConstIterator.GetName = new_instancemethod(_ITKCommonBasePython.itkDataObjectConstIterator_GetName, None, itkDataObjectConstIterator)
itkDataObjectConstIterator.__eq__ = new_instancemethod(_ITKCommonBasePython.itkDataObjectConstIterator___eq__, None, itkDataObjectConstIterator)
itkDataObjectConstIterator.__ne__ = new_instancemethod(_ITKCommonBasePython.itkDataObjectConstIterator___ne__, None, itkDataObjectConstIterator)
itkDataObjectConstIterator.GoToBegin = new_instancemethod(_ITKCommonBasePython.itkDataObjectConstIterator_GoToBegin, None, itkDataObjectConstIterator)
itkDataObjectConstIterator.IsAtEnd = new_instancemethod(_ITKCommonBasePython.itkDataObjectConstIterator_IsAtEnd, None, itkDataObjectConstIterator)
itkDataObjectConstIterator_swigregister = _ITKCommonBasePython.itkDataObjectConstIterator_swigregister
itkDataObjectConstIterator_swigregister(itkDataObjectConstIterator)

class itkDataObjectIterator(object):
    """Proxy of C++ itkDataObjectIterator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkDataObjectIterator self) -> itkDataObjectIterator
        __init__(itkDataObjectIterator self, itkDataObjectIterator iter) -> itkDataObjectIterator
        """
        _ITKCommonBasePython.itkDataObjectIterator_swiginit(self, _ITKCommonBasePython.new_itkDataObjectIterator(*args))

    def GetDataObject(self) -> "itkDataObject *":
        """GetDataObject(itkDataObjectIterator self) -> itkDataObject"""
        return _ITKCommonBasePython.itkDataObjectIterator_GetDataObject(self)


    def GetName(self) -> "std::string const &":
        """GetName(itkDataObjectIterator self) -> std::string const &"""
        return _ITKCommonBasePython.itkDataObjectIterator_GetName(self)


    def __eq__(self, iter: 'itkDataObjectIterator') -> "bool":
        """__eq__(itkDataObjectIterator self, itkDataObjectIterator iter) -> bool"""
        return _ITKCommonBasePython.itkDataObjectIterator___eq__(self, iter)


    def __ne__(self, iter: 'itkDataObjectIterator') -> "bool":
        """__ne__(itkDataObjectIterator self, itkDataObjectIterator iter) -> bool"""
        return _ITKCommonBasePython.itkDataObjectIterator___ne__(self, iter)


    def GoToBegin(self) -> "void":
        """GoToBegin(itkDataObjectIterator self)"""
        return _ITKCommonBasePython.itkDataObjectIterator_GoToBegin(self)


    def IsAtEnd(self) -> "bool":
        """IsAtEnd(itkDataObjectIterator self) -> bool"""
        return _ITKCommonBasePython.itkDataObjectIterator_IsAtEnd(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkDataObjectIterator
itkDataObjectIterator.GetDataObject = new_instancemethod(_ITKCommonBasePython.itkDataObjectIterator_GetDataObject, None, itkDataObjectIterator)
itkDataObjectIterator.GetName = new_instancemethod(_ITKCommonBasePython.itkDataObjectIterator_GetName, None, itkDataObjectIterator)
itkDataObjectIterator.__eq__ = new_instancemethod(_ITKCommonBasePython.itkDataObjectIterator___eq__, None, itkDataObjectIterator)
itkDataObjectIterator.__ne__ = new_instancemethod(_ITKCommonBasePython.itkDataObjectIterator___ne__, None, itkDataObjectIterator)
itkDataObjectIterator.GoToBegin = new_instancemethod(_ITKCommonBasePython.itkDataObjectIterator_GoToBegin, None, itkDataObjectIterator)
itkDataObjectIterator.IsAtEnd = new_instancemethod(_ITKCommonBasePython.itkDataObjectIterator_IsAtEnd, None, itkDataObjectIterator)
itkDataObjectIterator_swigregister = _ITKCommonBasePython.itkDataObjectIterator_swigregister
itkDataObjectIterator_swigregister(itkDataObjectIterator)

class itkEventObject(object):
    """Proxy of C++ itkEventObject class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ITKCommonBasePython.delete_itkEventObject

    def MakeObject(self) -> "itkEventObject *":
        """MakeObject(itkEventObject self) -> itkEventObject"""
        return _ITKCommonBasePython.itkEventObject_MakeObject(self)


    def Print(self, os: 'ostream') -> "void":
        """Print(itkEventObject self, ostream os)"""
        return _ITKCommonBasePython.itkEventObject_Print(self, os)


    def GetEventName(self) -> "char const *":
        """GetEventName(itkEventObject self) -> char const *"""
        return _ITKCommonBasePython.itkEventObject_GetEventName(self)


    def CheckEvent(self, arg0: 'itkEventObject') -> "bool":
        """CheckEvent(itkEventObject self, itkEventObject arg0) -> bool"""
        return _ITKCommonBasePython.itkEventObject_CheckEvent(self, arg0)

itkEventObject.MakeObject = new_instancemethod(_ITKCommonBasePython.itkEventObject_MakeObject, None, itkEventObject)
itkEventObject.Print = new_instancemethod(_ITKCommonBasePython.itkEventObject_Print, None, itkEventObject)
itkEventObject.GetEventName = new_instancemethod(_ITKCommonBasePython.itkEventObject_GetEventName, None, itkEventObject)
itkEventObject.CheckEvent = new_instancemethod(_ITKCommonBasePython.itkEventObject_CheckEvent, None, itkEventObject)
itkEventObject_swigregister = _ITKCommonBasePython.itkEventObject_swigregister
itkEventObject_swigregister(itkEventObject)

class itkIndent(object):
    """Proxy of C++ itkIndent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def New() -> "itkIndent *":
        """New() -> itkIndent"""
        return _ITKCommonBasePython.itkIndent_New()

    New = staticmethod(New)

    def GetNameOfClass() -> "char const *":
        """GetNameOfClass() -> char const *"""
        return _ITKCommonBasePython.itkIndent_GetNameOfClass()

    GetNameOfClass = staticmethod(GetNameOfClass)

    def GetNextIndent(self) -> "itkIndent":
        """GetNextIndent(itkIndent self) -> itkIndent"""
        return _ITKCommonBasePython.itkIndent_GetNextIndent(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkIndent

    def __init__(self, *args):
        """
        __init__(itkIndent self, int ind=0) -> itkIndent
        __init__(itkIndent self) -> itkIndent
        __init__(itkIndent self, itkIndent arg0) -> itkIndent
        """
        _ITKCommonBasePython.itkIndent_swiginit(self, _ITKCommonBasePython.new_itkIndent(*args))
itkIndent.GetNextIndent = new_instancemethod(_ITKCommonBasePython.itkIndent_GetNextIndent, None, itkIndent)
itkIndent_swigregister = _ITKCommonBasePython.itkIndent_swigregister
itkIndent_swigregister(itkIndent)

def itkIndent_New() -> "itkIndent *":
    """itkIndent_New() -> itkIndent"""
    return _ITKCommonBasePython.itkIndent_New()

def itkIndent_GetNameOfClass() -> "char const *":
    """itkIndent_GetNameOfClass() -> char const *"""
    return _ITKCommonBasePython.itkIndent_GetNameOfClass()

class itkInputDataObjectConstIterator(itkDataObjectConstIterator):
    """Proxy of C++ itkInputDataObjectConstIterator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetInput(self) -> "itkDataObject const *":
        """GetInput(itkInputDataObjectConstIterator self) -> itkDataObject"""
        return _ITKCommonBasePython.itkInputDataObjectConstIterator_GetInput(self)


    def __init__(self, *args):
        """
        __init__(itkInputDataObjectConstIterator self, itkProcessObject process) -> itkInputDataObjectConstIterator
        __init__(itkInputDataObjectConstIterator self, itkInputDataObjectConstIterator arg0) -> itkInputDataObjectConstIterator
        """
        _ITKCommonBasePython.itkInputDataObjectConstIterator_swiginit(self, _ITKCommonBasePython.new_itkInputDataObjectConstIterator(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkInputDataObjectConstIterator
itkInputDataObjectConstIterator.GetInput = new_instancemethod(_ITKCommonBasePython.itkInputDataObjectConstIterator_GetInput, None, itkInputDataObjectConstIterator)
itkInputDataObjectConstIterator_swigregister = _ITKCommonBasePython.itkInputDataObjectConstIterator_swigregister
itkInputDataObjectConstIterator_swigregister(itkInputDataObjectConstIterator)

class itkInputDataObjectIterator(itkDataObjectIterator):
    """Proxy of C++ itkInputDataObjectIterator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetInput(self) -> "itkDataObject *":
        """GetInput(itkInputDataObjectIterator self) -> itkDataObject"""
        return _ITKCommonBasePython.itkInputDataObjectIterator_GetInput(self)


    def __init__(self, *args):
        """
        __init__(itkInputDataObjectIterator self, itkProcessObject process) -> itkInputDataObjectIterator
        __init__(itkInputDataObjectIterator self, itkInputDataObjectIterator arg0) -> itkInputDataObjectIterator
        """
        _ITKCommonBasePython.itkInputDataObjectIterator_swiginit(self, _ITKCommonBasePython.new_itkInputDataObjectIterator(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkInputDataObjectIterator
itkInputDataObjectIterator.GetInput = new_instancemethod(_ITKCommonBasePython.itkInputDataObjectIterator_GetInput, None, itkInputDataObjectIterator)
itkInputDataObjectIterator_swigregister = _ITKCommonBasePython.itkInputDataObjectIterator_swigregister
itkInputDataObjectIterator_swigregister(itkInputDataObjectIterator)

class itkLightObject(object):
    """Proxy of C++ itkLightObject class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLightObject_Pointer":
        """__New_orig__() -> itkLightObject_Pointer"""
        return _ITKCommonBasePython.itkLightObject___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def CreateAnother(self) -> "itkLightObject_Pointer":
        """CreateAnother(itkLightObject self) -> itkLightObject_Pointer"""
        return _ITKCommonBasePython.itkLightObject_CreateAnother(self)


    def Clone(self) -> "itkLightObject_Pointer":
        """Clone(itkLightObject self) -> itkLightObject_Pointer"""
        return _ITKCommonBasePython.itkLightObject_Clone(self)


    def GetNameOfClass(self) -> "char const *":
        """GetNameOfClass(itkLightObject self) -> char const *"""
        return _ITKCommonBasePython.itkLightObject_GetNameOfClass(self)


    def Print(self, os: 'ostream', indent: 'itkIndent'=0) -> "void":
        """
        Print(itkLightObject self, ostream os, itkIndent indent=0)
        Print(itkLightObject self, ostream os)
        """
        return _ITKCommonBasePython.itkLightObject_Print(self, os, indent)


    def BreakOnError() -> "void":
        """BreakOnError()"""
        return _ITKCommonBasePython.itkLightObject_BreakOnError()

    BreakOnError = staticmethod(BreakOnError)

    def GetReferenceCount(self) -> "int":
        """GetReferenceCount(itkLightObject self) -> int"""
        return _ITKCommonBasePython.itkLightObject_GetReferenceCount(self)


    def __str__(self) -> "std::string":
        """__str__(itkLightObject self) -> std::string"""
        return _ITKCommonBasePython.itkLightObject___str__(self)


    def __eq__(self, obj: 'itkLightObject') -> "bool":
        """__eq__(itkLightObject self, itkLightObject obj) -> bool"""
        return _ITKCommonBasePython.itkLightObject___eq__(self, obj)


    def __hash__(self) -> "size_t":
        """__hash__(itkLightObject self) -> size_t"""
        return _ITKCommonBasePython.itkLightObject___hash__(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkLightObject

    def cast(obj: 'itkLightObject') -> "itkLightObject *":
        """cast(itkLightObject obj) -> itkLightObject"""
        return _ITKCommonBasePython.itkLightObject_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLightObject

        Create a new object of the class itkLightObject and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLightObject.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLightObject.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLightObject.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLightObject.CreateAnother = new_instancemethod(_ITKCommonBasePython.itkLightObject_CreateAnother, None, itkLightObject)
itkLightObject.Clone = new_instancemethod(_ITKCommonBasePython.itkLightObject_Clone, None, itkLightObject)
itkLightObject.GetNameOfClass = new_instancemethod(_ITKCommonBasePython.itkLightObject_GetNameOfClass, None, itkLightObject)
itkLightObject.Print = new_instancemethod(_ITKCommonBasePython.itkLightObject_Print, None, itkLightObject)
itkLightObject.GetReferenceCount = new_instancemethod(_ITKCommonBasePython.itkLightObject_GetReferenceCount, None, itkLightObject)
itkLightObject.__str__ = new_instancemethod(_ITKCommonBasePython.itkLightObject___str__, None, itkLightObject)
itkLightObject.__eq__ = new_instancemethod(_ITKCommonBasePython.itkLightObject___eq__, None, itkLightObject)
itkLightObject.__hash__ = new_instancemethod(_ITKCommonBasePython.itkLightObject___hash__, None, itkLightObject)
itkLightObject_swigregister = _ITKCommonBasePython.itkLightObject_swigregister
itkLightObject_swigregister(itkLightObject)

def itkLightObject___New_orig__() -> "itkLightObject_Pointer":
    """itkLightObject___New_orig__() -> itkLightObject_Pointer"""
    return _ITKCommonBasePython.itkLightObject___New_orig__()

def itkLightObject_BreakOnError() -> "void":
    """itkLightObject_BreakOnError()"""
    return _ITKCommonBasePython.itkLightObject_BreakOnError()

def itkLightObject_cast(obj: 'itkLightObject') -> "itkLightObject *":
    """itkLightObject_cast(itkLightObject obj) -> itkLightObject"""
    return _ITKCommonBasePython.itkLightObject_cast(obj)

class itkMetaDataDictionary(object):
    """Proxy of C++ itkMetaDataDictionary class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Print(self, os: 'ostream') -> "void":
        """Print(itkMetaDataDictionary self, ostream os)"""
        return _ITKCommonBasePython.itkMetaDataDictionary_Print(self, os)


    def __init__(self, *args):
        """
        __init__(itkMetaDataDictionary self) -> itkMetaDataDictionary
        __init__(itkMetaDataDictionary self, itkMetaDataDictionary arg0) -> itkMetaDataDictionary
        """
        _ITKCommonBasePython.itkMetaDataDictionary_swiginit(self, _ITKCommonBasePython.new_itkMetaDataDictionary(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkMetaDataDictionary

    def GetKeys(self) -> "std::vector< std::string,std::allocator< std::string > >":
        """GetKeys(itkMetaDataDictionary self) -> vectorstring"""
        return _ITKCommonBasePython.itkMetaDataDictionary_GetKeys(self)


    def Get(self, arg0: 'std::string const &') -> "itkMetaDataObjectBase const *":
        """Get(itkMetaDataDictionary self, std::string const & arg0) -> itkMetaDataObjectBase"""
        return _ITKCommonBasePython.itkMetaDataDictionary_Get(self, arg0)


    def Set(self, arg0: 'std::string const &', arg1: 'itkMetaDataObjectBase') -> "void":
        """Set(itkMetaDataDictionary self, std::string const & arg0, itkMetaDataObjectBase arg1)"""
        return _ITKCommonBasePython.itkMetaDataDictionary_Set(self, arg0, arg1)


    def HasKey(self, arg0: 'std::string const &') -> "bool":
        """HasKey(itkMetaDataDictionary self, std::string const & arg0) -> bool"""
        return _ITKCommonBasePython.itkMetaDataDictionary_HasKey(self, arg0)


    def Erase(self, arg0: 'std::string const &') -> "bool":
        """Erase(itkMetaDataDictionary self, std::string const & arg0) -> bool"""
        return _ITKCommonBasePython.itkMetaDataDictionary_Erase(self, arg0)


    def Clear(self) -> "void":
        """Clear(itkMetaDataDictionary self)"""
        return _ITKCommonBasePython.itkMetaDataDictionary_Clear(self)


    def Swap(self, other: 'itkMetaDataDictionary') -> "void":
        """Swap(itkMetaDataDictionary self, itkMetaDataDictionary other)"""
        return _ITKCommonBasePython.itkMetaDataDictionary_Swap(self, other)


    def __str__(self) -> "std::string":
        """__str__(itkMetaDataDictionary self) -> std::string"""
        return _ITKCommonBasePython.itkMetaDataDictionary___str__(self)


    def __setitem__(self,key,item):
        import itk
        if isinstance(item, str):
            object = itk.MetaDataObject.S.New()
        elif isinstance(item, int):
            object = itk.MetaDataObject.SI.New()
        elif isinstance( item, float):
            object = itk.MetaDataObject.F.New()
        elif isinstance( item, bool):
            object = itk.MetaDataObject.B.New()
        else:
            object = None
        if object != None:
            object.SetMetaDataObjectValue(item)
            self.Set(key, object)
    def __getitem__(self,key):
        import itk
        obj = self.Get(key)
        return itk.down_cast(obj).GetMetaDataObjectValue()
    def __len__(self):
        return self.GetKeys().size()
    def __iter__(self):
        keys = self.GetKeys()
        for key in keys:
            yield self.Get(key)

itkMetaDataDictionary.Print = new_instancemethod(_ITKCommonBasePython.itkMetaDataDictionary_Print, None, itkMetaDataDictionary)
itkMetaDataDictionary.GetKeys = new_instancemethod(_ITKCommonBasePython.itkMetaDataDictionary_GetKeys, None, itkMetaDataDictionary)
itkMetaDataDictionary.Get = new_instancemethod(_ITKCommonBasePython.itkMetaDataDictionary_Get, None, itkMetaDataDictionary)
itkMetaDataDictionary.Set = new_instancemethod(_ITKCommonBasePython.itkMetaDataDictionary_Set, None, itkMetaDataDictionary)
itkMetaDataDictionary.HasKey = new_instancemethod(_ITKCommonBasePython.itkMetaDataDictionary_HasKey, None, itkMetaDataDictionary)
itkMetaDataDictionary.Erase = new_instancemethod(_ITKCommonBasePython.itkMetaDataDictionary_Erase, None, itkMetaDataDictionary)
itkMetaDataDictionary.Clear = new_instancemethod(_ITKCommonBasePython.itkMetaDataDictionary_Clear, None, itkMetaDataDictionary)
itkMetaDataDictionary.Swap = new_instancemethod(_ITKCommonBasePython.itkMetaDataDictionary_Swap, None, itkMetaDataDictionary)
itkMetaDataDictionary.__str__ = new_instancemethod(_ITKCommonBasePython.itkMetaDataDictionary___str__, None, itkMetaDataDictionary)
itkMetaDataDictionary_swigregister = _ITKCommonBasePython.itkMetaDataDictionary_swigregister
itkMetaDataDictionary_swigregister(itkMetaDataDictionary)

class itkMetaDataObjectBase(itkLightObject):
    """Proxy of C++ itkMetaDataObjectBase class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetMetaDataObjectTypeName(self) -> "char const *":
        """GetMetaDataObjectTypeName(itkMetaDataObjectBase self) -> char const *"""
        return _ITKCommonBasePython.itkMetaDataObjectBase_GetMetaDataObjectTypeName(self)


    def GetMetaDataObjectTypeInfo(self) -> "type_info const &":
        """GetMetaDataObjectTypeInfo(itkMetaDataObjectBase self) -> type_info const &"""
        return _ITKCommonBasePython.itkMetaDataObjectBase_GetMetaDataObjectTypeInfo(self)


    def Print(self, os: 'ostream') -> "void":
        """Print(itkMetaDataObjectBase self, ostream os)"""
        return _ITKCommonBasePython.itkMetaDataObjectBase_Print(self, os)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkMetaDataObjectBase

    def cast(obj: 'itkLightObject') -> "itkMetaDataObjectBase *":
        """cast(itkLightObject obj) -> itkMetaDataObjectBase"""
        return _ITKCommonBasePython.itkMetaDataObjectBase_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectBase

        Create a new object of the class itkMetaDataObjectBase and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectBase.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectBase.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMetaDataObjectBase.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMetaDataObjectBase.GetMetaDataObjectTypeName = new_instancemethod(_ITKCommonBasePython.itkMetaDataObjectBase_GetMetaDataObjectTypeName, None, itkMetaDataObjectBase)
itkMetaDataObjectBase.GetMetaDataObjectTypeInfo = new_instancemethod(_ITKCommonBasePython.itkMetaDataObjectBase_GetMetaDataObjectTypeInfo, None, itkMetaDataObjectBase)
itkMetaDataObjectBase.Print = new_instancemethod(_ITKCommonBasePython.itkMetaDataObjectBase_Print, None, itkMetaDataObjectBase)
itkMetaDataObjectBase_swigregister = _ITKCommonBasePython.itkMetaDataObjectBase_swigregister
itkMetaDataObjectBase_swigregister(itkMetaDataObjectBase)

def itkMetaDataObjectBase_cast(obj: 'itkLightObject') -> "itkMetaDataObjectBase *":
    """itkMetaDataObjectBase_cast(itkLightObject obj) -> itkMetaDataObjectBase"""
    return _ITKCommonBasePython.itkMetaDataObjectBase_cast(obj)

class itkNoEvent(itkEventObject):
    """Proxy of C++ itkNoEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkNoEvent self) -> itkNoEvent
        __init__(itkNoEvent self, itkNoEvent s) -> itkNoEvent
        """
        _ITKCommonBasePython.itkNoEvent_swiginit(self, _ITKCommonBasePython.new_itkNoEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkNoEvent
itkNoEvent_swigregister = _ITKCommonBasePython.itkNoEvent_swigregister
itkNoEvent_swigregister(itkNoEvent)

class itkObject(itkLightObject):
    """Proxy of C++ itkObject class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkObject_Pointer":
        """__New_orig__() -> itkObject_Pointer"""
        return _ITKCommonBasePython.itkObject___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def DebugOn(self) -> "void":
        """DebugOn(itkObject self)"""
        return _ITKCommonBasePython.itkObject_DebugOn(self)


    def DebugOff(self) -> "void":
        """DebugOff(itkObject self)"""
        return _ITKCommonBasePython.itkObject_DebugOff(self)


    def GetDebug(self) -> "bool":
        """GetDebug(itkObject self) -> bool"""
        return _ITKCommonBasePython.itkObject_GetDebug(self)


    def SetDebug(self, debugFlag: 'bool') -> "void":
        """SetDebug(itkObject self, bool debugFlag)"""
        return _ITKCommonBasePython.itkObject_SetDebug(self, debugFlag)


    def GetMTime(self) -> "unsigned long long":
        """GetMTime(itkObject self) -> unsigned long long"""
        return _ITKCommonBasePython.itkObject_GetMTime(self)


    def GetTimeStamp(self) -> "itkTimeStamp const &":
        """GetTimeStamp(itkObject self) -> itkTimeStamp"""
        return _ITKCommonBasePython.itkObject_GetTimeStamp(self)


    def Modified(self) -> "void":
        """Modified(itkObject self)"""
        return _ITKCommonBasePython.itkObject_Modified(self)


    def SetGlobalWarningDisplay(flag: 'bool') -> "void":
        """SetGlobalWarningDisplay(bool flag)"""
        return _ITKCommonBasePython.itkObject_SetGlobalWarningDisplay(flag)

    SetGlobalWarningDisplay = staticmethod(SetGlobalWarningDisplay)

    def GetGlobalWarningDisplay() -> "bool":
        """GetGlobalWarningDisplay() -> bool"""
        return _ITKCommonBasePython.itkObject_GetGlobalWarningDisplay()

    GetGlobalWarningDisplay = staticmethod(GetGlobalWarningDisplay)

    def GlobalWarningDisplayOn() -> "void":
        """GlobalWarningDisplayOn()"""
        return _ITKCommonBasePython.itkObject_GlobalWarningDisplayOn()

    GlobalWarningDisplayOn = staticmethod(GlobalWarningDisplayOn)

    def GlobalWarningDisplayOff() -> "void":
        """GlobalWarningDisplayOff()"""
        return _ITKCommonBasePython.itkObject_GlobalWarningDisplayOff()

    GlobalWarningDisplayOff = staticmethod(GlobalWarningDisplayOff)

    def AddObserver(self, *args) -> "unsigned long":
        """
        AddObserver(itkObject self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkObject self, itkEventObject event, itkCommand arg1) -> unsigned long
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _ITKCommonBasePython.itkObject_AddObserver(self, *args)


    def GetCommand(self, tag: 'unsigned long') -> "itkCommand *":
        """GetCommand(itkObject self, unsigned long tag) -> itkCommand"""
        return _ITKCommonBasePython.itkObject_GetCommand(self, tag)


    def InvokeEvent(self, *args) -> "void":
        """
        InvokeEvent(itkObject self, itkEventObject arg0)
        InvokeEvent(itkObject self, itkEventObject arg0)
        """
        return _ITKCommonBasePython.itkObject_InvokeEvent(self, *args)


    def RemoveObserver(self, tag: 'unsigned long') -> "void":
        """RemoveObserver(itkObject self, unsigned long tag)"""
        return _ITKCommonBasePython.itkObject_RemoveObserver(self, tag)


    def RemoveAllObservers(self) -> "void":
        """RemoveAllObservers(itkObject self)"""
        return _ITKCommonBasePython.itkObject_RemoveAllObservers(self)


    def HasObserver(self, event: 'itkEventObject') -> "bool":
        """HasObserver(itkObject self, itkEventObject event) -> bool"""
        return _ITKCommonBasePython.itkObject_HasObserver(self, event)


    def GetMetaDataDictionary(self, *args) -> "itkMetaDataDictionary const &":
        """
        GetMetaDataDictionary(itkObject self) -> itkMetaDataDictionary
        GetMetaDataDictionary(itkObject self) -> itkMetaDataDictionary
        """
        return _ITKCommonBasePython.itkObject_GetMetaDataDictionary(self, *args)


    def SetMetaDataDictionary(self, rhs: 'itkMetaDataDictionary') -> "void":
        """SetMetaDataDictionary(itkObject self, itkMetaDataDictionary rhs)"""
        return _ITKCommonBasePython.itkObject_SetMetaDataDictionary(self, rhs)


    def SetObjectName(self, _arg: 'std::string const') -> "void":
        """SetObjectName(itkObject self, std::string const _arg)"""
        return _ITKCommonBasePython.itkObject_SetObjectName(self, _arg)


    def GetObjectName(self) -> "std::string const &":
        """GetObjectName(itkObject self) -> std::string const &"""
        return _ITKCommonBasePython.itkObject_GetObjectName(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkObject

    def cast(obj: 'itkLightObject') -> "itkObject *":
        """cast(itkLightObject obj) -> itkObject"""
        return _ITKCommonBasePython.itkObject_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkObject

        Create a new object of the class itkObject and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkObject.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkObject.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkObject.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkObject.DebugOn = new_instancemethod(_ITKCommonBasePython.itkObject_DebugOn, None, itkObject)
itkObject.DebugOff = new_instancemethod(_ITKCommonBasePython.itkObject_DebugOff, None, itkObject)
itkObject.GetDebug = new_instancemethod(_ITKCommonBasePython.itkObject_GetDebug, None, itkObject)
itkObject.SetDebug = new_instancemethod(_ITKCommonBasePython.itkObject_SetDebug, None, itkObject)
itkObject.GetMTime = new_instancemethod(_ITKCommonBasePython.itkObject_GetMTime, None, itkObject)
itkObject.GetTimeStamp = new_instancemethod(_ITKCommonBasePython.itkObject_GetTimeStamp, None, itkObject)
itkObject.Modified = new_instancemethod(_ITKCommonBasePython.itkObject_Modified, None, itkObject)
itkObject.GetCommand = new_instancemethod(_ITKCommonBasePython.itkObject_GetCommand, None, itkObject)
itkObject.InvokeEvent = new_instancemethod(_ITKCommonBasePython.itkObject_InvokeEvent, None, itkObject)
itkObject.RemoveObserver = new_instancemethod(_ITKCommonBasePython.itkObject_RemoveObserver, None, itkObject)
itkObject.RemoveAllObservers = new_instancemethod(_ITKCommonBasePython.itkObject_RemoveAllObservers, None, itkObject)
itkObject.HasObserver = new_instancemethod(_ITKCommonBasePython.itkObject_HasObserver, None, itkObject)
itkObject.GetMetaDataDictionary = new_instancemethod(_ITKCommonBasePython.itkObject_GetMetaDataDictionary, None, itkObject)
itkObject.SetMetaDataDictionary = new_instancemethod(_ITKCommonBasePython.itkObject_SetMetaDataDictionary, None, itkObject)
itkObject.SetObjectName = new_instancemethod(_ITKCommonBasePython.itkObject_SetObjectName, None, itkObject)
itkObject.GetObjectName = new_instancemethod(_ITKCommonBasePython.itkObject_GetObjectName, None, itkObject)
itkObject_swigregister = _ITKCommonBasePython.itkObject_swigregister
itkObject_swigregister(itkObject)

def itkObject___New_orig__() -> "itkObject_Pointer":
    """itkObject___New_orig__() -> itkObject_Pointer"""
    return _ITKCommonBasePython.itkObject___New_orig__()

def itkObject_SetGlobalWarningDisplay(flag: 'bool') -> "void":
    """itkObject_SetGlobalWarningDisplay(bool flag)"""
    return _ITKCommonBasePython.itkObject_SetGlobalWarningDisplay(flag)

def itkObject_GetGlobalWarningDisplay() -> "bool":
    """itkObject_GetGlobalWarningDisplay() -> bool"""
    return _ITKCommonBasePython.itkObject_GetGlobalWarningDisplay()

def itkObject_GlobalWarningDisplayOn() -> "void":
    """itkObject_GlobalWarningDisplayOn()"""
    return _ITKCommonBasePython.itkObject_GlobalWarningDisplayOn()

def itkObject_GlobalWarningDisplayOff() -> "void":
    """itkObject_GlobalWarningDisplayOff()"""
    return _ITKCommonBasePython.itkObject_GlobalWarningDisplayOff()

def itkObject_cast(obj: 'itkLightObject') -> "itkObject *":
    """itkObject_cast(itkLightObject obj) -> itkObject"""
    return _ITKCommonBasePython.itkObject_cast(obj)

class itkObjectFactoryBase(itkObject):
    """Proxy of C++ itkObjectFactoryBase class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def CreateInstance(itkclassname: 'char const *') -> "itkLightObject_Pointer":
        """CreateInstance(char const * itkclassname) -> itkLightObject_Pointer"""
        return _ITKCommonBasePython.itkObjectFactoryBase_CreateInstance(itkclassname)

    CreateInstance = staticmethod(CreateInstance)

    def CreateAllInstance(itkclassname: 'char const *') -> "std::list< itkLightObject_Pointer,std::allocator< itkLightObject_Pointer > >":
        """CreateAllInstance(char const * itkclassname) -> listitkLightObject"""
        return _ITKCommonBasePython.itkObjectFactoryBase_CreateAllInstance(itkclassname)

    CreateAllInstance = staticmethod(CreateAllInstance)

    def ReHash() -> "void":
        """ReHash()"""
        return _ITKCommonBasePython.itkObjectFactoryBase_ReHash()

    ReHash = staticmethod(ReHash)

    def RegisterFactoryInternal(arg0: 'itkObjectFactoryBase') -> "void":
        """RegisterFactoryInternal(itkObjectFactoryBase arg0)"""
        return _ITKCommonBasePython.itkObjectFactoryBase_RegisterFactoryInternal(arg0)

    RegisterFactoryInternal = staticmethod(RegisterFactoryInternal)
    INSERT_AT_FRONT = _ITKCommonBasePython.itkObjectFactoryBase_INSERT_AT_FRONT
    INSERT_AT_BACK = _ITKCommonBasePython.itkObjectFactoryBase_INSERT_AT_BACK
    INSERT_AT_POSITION = _ITKCommonBasePython.itkObjectFactoryBase_INSERT_AT_POSITION

    def RegisterFactory(*args) -> "bool":
        """
        RegisterFactory(itkObjectFactoryBase arg0, itkObjectFactoryBase::InsertionPositionType where, unsigned long long position=0) -> bool
        RegisterFactory(itkObjectFactoryBase arg0, itkObjectFactoryBase::InsertionPositionType where) -> bool
        RegisterFactory(itkObjectFactoryBase arg0) -> bool
        """
        return _ITKCommonBasePython.itkObjectFactoryBase_RegisterFactory(*args)

    RegisterFactory = staticmethod(RegisterFactory)

    def UnRegisterFactory(arg0: 'itkObjectFactoryBase') -> "void":
        """UnRegisterFactory(itkObjectFactoryBase arg0)"""
        return _ITKCommonBasePython.itkObjectFactoryBase_UnRegisterFactory(arg0)

    UnRegisterFactory = staticmethod(UnRegisterFactory)

    def UnRegisterAllFactories() -> "void":
        """UnRegisterAllFactories()"""
        return _ITKCommonBasePython.itkObjectFactoryBase_UnRegisterAllFactories()

    UnRegisterAllFactories = staticmethod(UnRegisterAllFactories)

    def GetRegisteredFactories() -> "std::list< itkObjectFactoryBase *,std::allocator< itkObjectFactoryBase * > >":
        """GetRegisteredFactories() -> listitkObjectFactoryBase"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetRegisteredFactories()

    GetRegisteredFactories = staticmethod(GetRegisteredFactories)

    def GetITKSourceVersion(self) -> "char const *":
        """GetITKSourceVersion(itkObjectFactoryBase self) -> char const *"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetITKSourceVersion(self)


    def SetStrictVersionChecking(arg0: 'bool') -> "void":
        """SetStrictVersionChecking(bool arg0)"""
        return _ITKCommonBasePython.itkObjectFactoryBase_SetStrictVersionChecking(arg0)

    SetStrictVersionChecking = staticmethod(SetStrictVersionChecking)

    def StrictVersionCheckingOn() -> "void":
        """StrictVersionCheckingOn()"""
        return _ITKCommonBasePython.itkObjectFactoryBase_StrictVersionCheckingOn()

    StrictVersionCheckingOn = staticmethod(StrictVersionCheckingOn)

    def StrictVersionCheckingOff() -> "void":
        """StrictVersionCheckingOff()"""
        return _ITKCommonBasePython.itkObjectFactoryBase_StrictVersionCheckingOff()

    StrictVersionCheckingOff = staticmethod(StrictVersionCheckingOff)

    def GetStrictVersionChecking() -> "bool":
        """GetStrictVersionChecking() -> bool"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetStrictVersionChecking()

    GetStrictVersionChecking = staticmethod(GetStrictVersionChecking)

    def GetDescription(self) -> "char const *":
        """GetDescription(itkObjectFactoryBase self) -> char const *"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetDescription(self)


    def GetClassOverrideNames(self) -> "std::list< std::string,std::allocator< std::string > >":
        """GetClassOverrideNames(itkObjectFactoryBase self) -> liststring"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetClassOverrideNames(self)


    def GetClassOverrideWithNames(self) -> "std::list< std::string,std::allocator< std::string > >":
        """GetClassOverrideWithNames(itkObjectFactoryBase self) -> liststring"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetClassOverrideWithNames(self)


    def GetClassOverrideDescriptions(self) -> "std::list< std::string,std::allocator< std::string > >":
        """GetClassOverrideDescriptions(itkObjectFactoryBase self) -> liststring"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetClassOverrideDescriptions(self)


    def GetEnableFlags(self) -> "std::list< bool,std::allocator< bool > >":
        """GetEnableFlags(itkObjectFactoryBase self) -> listB"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetEnableFlags(self)


    def SetEnableFlag(self, flag: 'bool', className: 'char const *', subclassName: 'char const *') -> "void":
        """SetEnableFlag(itkObjectFactoryBase self, bool flag, char const * className, char const * subclassName)"""
        return _ITKCommonBasePython.itkObjectFactoryBase_SetEnableFlag(self, flag, className, subclassName)


    def GetEnableFlag(self, className: 'char const *', subclassName: 'char const *') -> "bool":
        """GetEnableFlag(itkObjectFactoryBase self, char const * className, char const * subclassName) -> bool"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetEnableFlag(self, className, subclassName)


    def Disable(self, className: 'char const *') -> "void":
        """Disable(itkObjectFactoryBase self, char const * className)"""
        return _ITKCommonBasePython.itkObjectFactoryBase_Disable(self, className)


    def GetLibraryPath(self) -> "char const *":
        """GetLibraryPath(itkObjectFactoryBase self) -> char const *"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetLibraryPath(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkObjectFactoryBase

    def cast(obj: 'itkLightObject') -> "itkObjectFactoryBase *":
        """cast(itkLightObject obj) -> itkObjectFactoryBase"""
        return _ITKCommonBasePython.itkObjectFactoryBase_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkObjectFactoryBase

        Create a new object of the class itkObjectFactoryBase and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkObjectFactoryBase.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkObjectFactoryBase.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkObjectFactoryBase.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkObjectFactoryBase.GetITKSourceVersion = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetITKSourceVersion, None, itkObjectFactoryBase)
itkObjectFactoryBase.GetDescription = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetDescription, None, itkObjectFactoryBase)
itkObjectFactoryBase.GetClassOverrideNames = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetClassOverrideNames, None, itkObjectFactoryBase)
itkObjectFactoryBase.GetClassOverrideWithNames = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetClassOverrideWithNames, None, itkObjectFactoryBase)
itkObjectFactoryBase.GetClassOverrideDescriptions = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetClassOverrideDescriptions, None, itkObjectFactoryBase)
itkObjectFactoryBase.GetEnableFlags = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetEnableFlags, None, itkObjectFactoryBase)
itkObjectFactoryBase.SetEnableFlag = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_SetEnableFlag, None, itkObjectFactoryBase)
itkObjectFactoryBase.GetEnableFlag = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetEnableFlag, None, itkObjectFactoryBase)
itkObjectFactoryBase.Disable = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_Disable, None, itkObjectFactoryBase)
itkObjectFactoryBase.GetLibraryPath = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetLibraryPath, None, itkObjectFactoryBase)
itkObjectFactoryBase_swigregister = _ITKCommonBasePython.itkObjectFactoryBase_swigregister
itkObjectFactoryBase_swigregister(itkObjectFactoryBase)

def itkObjectFactoryBase_CreateInstance(itkclassname: 'char const *') -> "itkLightObject_Pointer":
    """itkObjectFactoryBase_CreateInstance(char const * itkclassname) -> itkLightObject_Pointer"""
    return _ITKCommonBasePython.itkObjectFactoryBase_CreateInstance(itkclassname)

def itkObjectFactoryBase_CreateAllInstance(itkclassname: 'char const *') -> "std::list< itkLightObject_Pointer,std::allocator< itkLightObject_Pointer > >":
    """itkObjectFactoryBase_CreateAllInstance(char const * itkclassname) -> listitkLightObject"""
    return _ITKCommonBasePython.itkObjectFactoryBase_CreateAllInstance(itkclassname)

def itkObjectFactoryBase_ReHash() -> "void":
    """itkObjectFactoryBase_ReHash()"""
    return _ITKCommonBasePython.itkObjectFactoryBase_ReHash()

def itkObjectFactoryBase_RegisterFactoryInternal(arg0: 'itkObjectFactoryBase') -> "void":
    """itkObjectFactoryBase_RegisterFactoryInternal(itkObjectFactoryBase arg0)"""
    return _ITKCommonBasePython.itkObjectFactoryBase_RegisterFactoryInternal(arg0)

def itkObjectFactoryBase_RegisterFactory(*args) -> "bool":
    """
    RegisterFactory(itkObjectFactoryBase arg0, itkObjectFactoryBase::InsertionPositionType where, unsigned long long position=0) -> bool
    RegisterFactory(itkObjectFactoryBase arg0, itkObjectFactoryBase::InsertionPositionType where) -> bool
    itkObjectFactoryBase_RegisterFactory(itkObjectFactoryBase arg0) -> bool
    """
    return _ITKCommonBasePython.itkObjectFactoryBase_RegisterFactory(*args)

def itkObjectFactoryBase_UnRegisterFactory(arg0: 'itkObjectFactoryBase') -> "void":
    """itkObjectFactoryBase_UnRegisterFactory(itkObjectFactoryBase arg0)"""
    return _ITKCommonBasePython.itkObjectFactoryBase_UnRegisterFactory(arg0)

def itkObjectFactoryBase_UnRegisterAllFactories() -> "void":
    """itkObjectFactoryBase_UnRegisterAllFactories()"""
    return _ITKCommonBasePython.itkObjectFactoryBase_UnRegisterAllFactories()

def itkObjectFactoryBase_GetRegisteredFactories() -> "std::list< itkObjectFactoryBase *,std::allocator< itkObjectFactoryBase * > >":
    """itkObjectFactoryBase_GetRegisteredFactories() -> listitkObjectFactoryBase"""
    return _ITKCommonBasePython.itkObjectFactoryBase_GetRegisteredFactories()

def itkObjectFactoryBase_SetStrictVersionChecking(arg0: 'bool') -> "void":
    """itkObjectFactoryBase_SetStrictVersionChecking(bool arg0)"""
    return _ITKCommonBasePython.itkObjectFactoryBase_SetStrictVersionChecking(arg0)

def itkObjectFactoryBase_StrictVersionCheckingOn() -> "void":
    """itkObjectFactoryBase_StrictVersionCheckingOn()"""
    return _ITKCommonBasePython.itkObjectFactoryBase_StrictVersionCheckingOn()

def itkObjectFactoryBase_StrictVersionCheckingOff() -> "void":
    """itkObjectFactoryBase_StrictVersionCheckingOff()"""
    return _ITKCommonBasePython.itkObjectFactoryBase_StrictVersionCheckingOff()

def itkObjectFactoryBase_GetStrictVersionChecking() -> "bool":
    """itkObjectFactoryBase_GetStrictVersionChecking() -> bool"""
    return _ITKCommonBasePython.itkObjectFactoryBase_GetStrictVersionChecking()

def itkObjectFactoryBase_cast(obj: 'itkLightObject') -> "itkObjectFactoryBase *":
    """itkObjectFactoryBase_cast(itkLightObject obj) -> itkObjectFactoryBase"""
    return _ITKCommonBasePython.itkObjectFactoryBase_cast(obj)

class itkOutputDataObjectConstIterator(itkDataObjectConstIterator):
    """Proxy of C++ itkOutputDataObjectConstIterator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetOutput(self) -> "itkDataObject const *":
        """GetOutput(itkOutputDataObjectConstIterator self) -> itkDataObject"""
        return _ITKCommonBasePython.itkOutputDataObjectConstIterator_GetOutput(self)


    def __init__(self, *args):
        """
        __init__(itkOutputDataObjectConstIterator self, itkProcessObject process) -> itkOutputDataObjectConstIterator
        __init__(itkOutputDataObjectConstIterator self, itkOutputDataObjectConstIterator arg0) -> itkOutputDataObjectConstIterator
        """
        _ITKCommonBasePython.itkOutputDataObjectConstIterator_swiginit(self, _ITKCommonBasePython.new_itkOutputDataObjectConstIterator(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkOutputDataObjectConstIterator
itkOutputDataObjectConstIterator.GetOutput = new_instancemethod(_ITKCommonBasePython.itkOutputDataObjectConstIterator_GetOutput, None, itkOutputDataObjectConstIterator)
itkOutputDataObjectConstIterator_swigregister = _ITKCommonBasePython.itkOutputDataObjectConstIterator_swigregister
itkOutputDataObjectConstIterator_swigregister(itkOutputDataObjectConstIterator)

class itkOutputDataObjectIterator(itkDataObjectIterator):
    """Proxy of C++ itkOutputDataObjectIterator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetOutput(self) -> "itkDataObject *":
        """GetOutput(itkOutputDataObjectIterator self) -> itkDataObject"""
        return _ITKCommonBasePython.itkOutputDataObjectIterator_GetOutput(self)


    def __init__(self, *args):
        """
        __init__(itkOutputDataObjectIterator self, itkProcessObject process) -> itkOutputDataObjectIterator
        __init__(itkOutputDataObjectIterator self, itkOutputDataObjectIterator arg0) -> itkOutputDataObjectIterator
        """
        _ITKCommonBasePython.itkOutputDataObjectIterator_swiginit(self, _ITKCommonBasePython.new_itkOutputDataObjectIterator(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkOutputDataObjectIterator
itkOutputDataObjectIterator.GetOutput = new_instancemethod(_ITKCommonBasePython.itkOutputDataObjectIterator_GetOutput, None, itkOutputDataObjectIterator)
itkOutputDataObjectIterator_swigregister = _ITKCommonBasePython.itkOutputDataObjectIterator_swigregister
itkOutputDataObjectIterator_swigregister(itkOutputDataObjectIterator)

class itkOutputWindow(itkObject):
    """Proxy of C++ itkOutputWindow class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkOutputWindow_Pointer":
        """__New_orig__() -> itkOutputWindow_Pointer"""
        return _ITKCommonBasePython.itkOutputWindow___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def GetInstance() -> "itkOutputWindow_Pointer":
        """GetInstance() -> itkOutputWindow_Pointer"""
        return _ITKCommonBasePython.itkOutputWindow_GetInstance()

    GetInstance = staticmethod(GetInstance)

    def SetInstance(instance: 'itkOutputWindow') -> "void":
        """SetInstance(itkOutputWindow instance)"""
        return _ITKCommonBasePython.itkOutputWindow_SetInstance(instance)

    SetInstance = staticmethod(SetInstance)

    def DisplayText(self, arg0: 'char const *') -> "void":
        """DisplayText(itkOutputWindow self, char const * arg0)"""
        return _ITKCommonBasePython.itkOutputWindow_DisplayText(self, arg0)


    def DisplayErrorText(self, t: 'char const *') -> "void":
        """DisplayErrorText(itkOutputWindow self, char const * t)"""
        return _ITKCommonBasePython.itkOutputWindow_DisplayErrorText(self, t)


    def DisplayWarningText(self, t: 'char const *') -> "void":
        """DisplayWarningText(itkOutputWindow self, char const * t)"""
        return _ITKCommonBasePython.itkOutputWindow_DisplayWarningText(self, t)


    def DisplayGenericOutputText(self, t: 'char const *') -> "void":
        """DisplayGenericOutputText(itkOutputWindow self, char const * t)"""
        return _ITKCommonBasePython.itkOutputWindow_DisplayGenericOutputText(self, t)


    def DisplayDebugText(self, t: 'char const *') -> "void":
        """DisplayDebugText(itkOutputWindow self, char const * t)"""
        return _ITKCommonBasePython.itkOutputWindow_DisplayDebugText(self, t)


    def SetPromptUser(self, _arg: 'bool const') -> "void":
        """SetPromptUser(itkOutputWindow self, bool const _arg)"""
        return _ITKCommonBasePython.itkOutputWindow_SetPromptUser(self, _arg)


    def GetPromptUser(self) -> "bool":
        """GetPromptUser(itkOutputWindow self) -> bool"""
        return _ITKCommonBasePython.itkOutputWindow_GetPromptUser(self)


    def PromptUserOn(self) -> "void":
        """PromptUserOn(itkOutputWindow self)"""
        return _ITKCommonBasePython.itkOutputWindow_PromptUserOn(self)


    def PromptUserOff(self) -> "void":
        """PromptUserOff(itkOutputWindow self)"""
        return _ITKCommonBasePython.itkOutputWindow_PromptUserOff(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkOutputWindow

    def cast(obj: 'itkLightObject') -> "itkOutputWindow *":
        """cast(itkLightObject obj) -> itkOutputWindow"""
        return _ITKCommonBasePython.itkOutputWindow_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkOutputWindow

        Create a new object of the class itkOutputWindow and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOutputWindow.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkOutputWindow.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkOutputWindow.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkOutputWindow.DisplayText = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_DisplayText, None, itkOutputWindow)
itkOutputWindow.DisplayErrorText = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_DisplayErrorText, None, itkOutputWindow)
itkOutputWindow.DisplayWarningText = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_DisplayWarningText, None, itkOutputWindow)
itkOutputWindow.DisplayGenericOutputText = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_DisplayGenericOutputText, None, itkOutputWindow)
itkOutputWindow.DisplayDebugText = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_DisplayDebugText, None, itkOutputWindow)
itkOutputWindow.SetPromptUser = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_SetPromptUser, None, itkOutputWindow)
itkOutputWindow.GetPromptUser = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_GetPromptUser, None, itkOutputWindow)
itkOutputWindow.PromptUserOn = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_PromptUserOn, None, itkOutputWindow)
itkOutputWindow.PromptUserOff = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_PromptUserOff, None, itkOutputWindow)
itkOutputWindow_swigregister = _ITKCommonBasePython.itkOutputWindow_swigregister
itkOutputWindow_swigregister(itkOutputWindow)

def itkOutputWindow___New_orig__() -> "itkOutputWindow_Pointer":
    """itkOutputWindow___New_orig__() -> itkOutputWindow_Pointer"""
    return _ITKCommonBasePython.itkOutputWindow___New_orig__()

def itkOutputWindow_GetInstance() -> "itkOutputWindow_Pointer":
    """itkOutputWindow_GetInstance() -> itkOutputWindow_Pointer"""
    return _ITKCommonBasePython.itkOutputWindow_GetInstance()

def itkOutputWindow_SetInstance(instance: 'itkOutputWindow') -> "void":
    """itkOutputWindow_SetInstance(itkOutputWindow instance)"""
    return _ITKCommonBasePython.itkOutputWindow_SetInstance(instance)

def itkOutputWindow_cast(obj: 'itkLightObject') -> "itkOutputWindow *":
    """itkOutputWindow_cast(itkLightObject obj) -> itkOutputWindow"""
    return _ITKCommonBasePython.itkOutputWindow_cast(obj)

class itkProcessObject(itkObject):
    """Proxy of C++ itkProcessObject class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetInputNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        """GetInputNames(itkProcessObject self) -> vectorstring"""
        return _ITKCommonBasePython.itkProcessObject_GetInputNames(self)


    def GetRequiredInputNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        """GetRequiredInputNames(itkProcessObject self) -> vectorstring"""
        return _ITKCommonBasePython.itkProcessObject_GetRequiredInputNames(self)


    def GetInputs(self) -> "std::vector< itkDataObject_Pointer,std::allocator< itkDataObject_Pointer > >":
        """GetInputs(itkProcessObject self) -> vectoritkDataObject"""
        return _ITKCommonBasePython.itkProcessObject_GetInputs(self)


    def HasInput(self, key: 'std::string const &') -> "bool":
        """HasInput(itkProcessObject self, std::string const & key) -> bool"""
        return _ITKCommonBasePython.itkProcessObject_HasInput(self, key)


    def GetNumberOfInputs(self) -> "unsigned long long":
        """GetNumberOfInputs(itkProcessObject self) -> unsigned long long"""
        return _ITKCommonBasePython.itkProcessObject_GetNumberOfInputs(self)


    def GetNumberOfOutputs(self) -> "unsigned long long":
        """GetNumberOfOutputs(itkProcessObject self) -> unsigned long long"""
        return _ITKCommonBasePython.itkProcessObject_GetNumberOfOutputs(self)


    def GetOutputNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        """GetOutputNames(itkProcessObject self) -> vectorstring"""
        return _ITKCommonBasePython.itkProcessObject_GetOutputNames(self)


    def GetOutputs(self) -> "std::vector< itkDataObject_Pointer,std::allocator< itkDataObject_Pointer > >":
        """GetOutputs(itkProcessObject self) -> vectoritkDataObject"""
        return _ITKCommonBasePython.itkProcessObject_GetOutputs(self)


    def HasOutput(self, key: 'std::string const &') -> "bool":
        """HasOutput(itkProcessObject self, std::string const & key) -> bool"""
        return _ITKCommonBasePython.itkProcessObject_HasOutput(self, key)


    def GetIndexedInputs(self) -> "std::vector< itkDataObject_Pointer,std::allocator< itkDataObject_Pointer > >":
        """GetIndexedInputs(itkProcessObject self) -> vectoritkDataObject"""
        return _ITKCommonBasePython.itkProcessObject_GetIndexedInputs(self)


    def GetNumberOfIndexedInputs(self) -> "unsigned long long":
        """GetNumberOfIndexedInputs(itkProcessObject self) -> unsigned long long"""
        return _ITKCommonBasePython.itkProcessObject_GetNumberOfIndexedInputs(self)


    def GetNumberOfValidRequiredInputs(self) -> "unsigned long long":
        """GetNumberOfValidRequiredInputs(itkProcessObject self) -> unsigned long long"""
        return _ITKCommonBasePython.itkProcessObject_GetNumberOfValidRequiredInputs(self)


    def GetIndexedOutputs(self) -> "std::vector< itkDataObject_Pointer,std::allocator< itkDataObject_Pointer > >":
        """GetIndexedOutputs(itkProcessObject self) -> vectoritkDataObject"""
        return _ITKCommonBasePython.itkProcessObject_GetIndexedOutputs(self)


    def GetNumberOfIndexedOutputs(self) -> "unsigned long long":
        """GetNumberOfIndexedOutputs(itkProcessObject self) -> unsigned long long"""
        return _ITKCommonBasePython.itkProcessObject_GetNumberOfIndexedOutputs(self)


    def SetAbortGenerateData(self, _arg: 'bool const') -> "void":
        """SetAbortGenerateData(itkProcessObject self, bool const _arg)"""
        return _ITKCommonBasePython.itkProcessObject_SetAbortGenerateData(self, _arg)


    def GetAbortGenerateData(self) -> "bool const &":
        """GetAbortGenerateData(itkProcessObject self) -> bool const &"""
        return _ITKCommonBasePython.itkProcessObject_GetAbortGenerateData(self)


    def AbortGenerateDataOn(self) -> "void":
        """AbortGenerateDataOn(itkProcessObject self)"""
        return _ITKCommonBasePython.itkProcessObject_AbortGenerateDataOn(self)


    def AbortGenerateDataOff(self) -> "void":
        """AbortGenerateDataOff(itkProcessObject self)"""
        return _ITKCommonBasePython.itkProcessObject_AbortGenerateDataOff(self)


    def SetProgress(self, progress: 'float') -> "void":
        """SetProgress(itkProcessObject self, float progress)"""
        return _ITKCommonBasePython.itkProcessObject_SetProgress(self, progress)


    def GetProgress(self) -> "float const &":
        """GetProgress(itkProcessObject self) -> float const &"""
        return _ITKCommonBasePython.itkProcessObject_GetProgress(self)


    def UpdateProgress(self, progress: 'float') -> "void":
        """UpdateProgress(itkProcessObject self, float progress)"""
        return _ITKCommonBasePython.itkProcessObject_UpdateProgress(self, progress)


    def Update(self) -> "void":
        """Update(itkProcessObject self)"""
        return _ITKCommonBasePython.itkProcessObject_Update(self)


    def UpdateLargestPossibleRegion(self) -> "void":
        """UpdateLargestPossibleRegion(itkProcessObject self)"""
        return _ITKCommonBasePython.itkProcessObject_UpdateLargestPossibleRegion(self)


    def UpdateOutputInformation(self) -> "void":
        """UpdateOutputInformation(itkProcessObject self)"""
        return _ITKCommonBasePython.itkProcessObject_UpdateOutputInformation(self)


    def PropagateRequestedRegion(self, output: 'itkDataObject') -> "void":
        """PropagateRequestedRegion(itkProcessObject self, itkDataObject output)"""
        return _ITKCommonBasePython.itkProcessObject_PropagateRequestedRegion(self, output)


    def UpdateOutputData(self, output: 'itkDataObject') -> "void":
        """UpdateOutputData(itkProcessObject self, itkDataObject output)"""
        return _ITKCommonBasePython.itkProcessObject_UpdateOutputData(self, output)


    def EnlargeOutputRequestedRegion(self, arg0: 'itkDataObject') -> "void":
        """EnlargeOutputRequestedRegion(itkProcessObject self, itkDataObject arg0)"""
        return _ITKCommonBasePython.itkProcessObject_EnlargeOutputRequestedRegion(self, arg0)


    def ResetPipeline(self) -> "void":
        """ResetPipeline(itkProcessObject self)"""
        return _ITKCommonBasePython.itkProcessObject_ResetPipeline(self)


    def MakeOutput(self, *args) -> "itkDataObject_Pointer":
        """
        MakeOutput(itkProcessObject self, unsigned long long idx) -> itkDataObject_Pointer
        MakeOutput(itkProcessObject self, std::string const & arg0) -> itkDataObject_Pointer
        """
        return _ITKCommonBasePython.itkProcessObject_MakeOutput(self, *args)


    def SetReleaseDataFlag(self, flag: 'bool') -> "void":
        """SetReleaseDataFlag(itkProcessObject self, bool flag)"""
        return _ITKCommonBasePython.itkProcessObject_SetReleaseDataFlag(self, flag)


    def GetReleaseDataFlag(self) -> "bool":
        """GetReleaseDataFlag(itkProcessObject self) -> bool"""
        return _ITKCommonBasePython.itkProcessObject_GetReleaseDataFlag(self)


    def ReleaseDataFlagOn(self) -> "void":
        """ReleaseDataFlagOn(itkProcessObject self)"""
        return _ITKCommonBasePython.itkProcessObject_ReleaseDataFlagOn(self)


    def ReleaseDataFlagOff(self) -> "void":
        """ReleaseDataFlagOff(itkProcessObject self)"""
        return _ITKCommonBasePython.itkProcessObject_ReleaseDataFlagOff(self)


    def SetReleaseDataBeforeUpdateFlag(self, _arg: 'bool const') -> "void":
        """SetReleaseDataBeforeUpdateFlag(itkProcessObject self, bool const _arg)"""
        return _ITKCommonBasePython.itkProcessObject_SetReleaseDataBeforeUpdateFlag(self, _arg)


    def GetReleaseDataBeforeUpdateFlag(self) -> "bool const &":
        """GetReleaseDataBeforeUpdateFlag(itkProcessObject self) -> bool const &"""
        return _ITKCommonBasePython.itkProcessObject_GetReleaseDataBeforeUpdateFlag(self)


    def ReleaseDataBeforeUpdateFlagOn(self) -> "void":
        """ReleaseDataBeforeUpdateFlagOn(itkProcessObject self)"""
        return _ITKCommonBasePython.itkProcessObject_ReleaseDataBeforeUpdateFlagOn(self)


    def ReleaseDataBeforeUpdateFlagOff(self) -> "void":
        """ReleaseDataBeforeUpdateFlagOff(itkProcessObject self)"""
        return _ITKCommonBasePython.itkProcessObject_ReleaseDataBeforeUpdateFlagOff(self)


    def SetNumberOfWorkUnits(self, _arg: 'unsigned int') -> "void":
        """SetNumberOfWorkUnits(itkProcessObject self, unsigned int _arg)"""
        return _ITKCommonBasePython.itkProcessObject_SetNumberOfWorkUnits(self, _arg)


    def GetNumberOfWorkUnits(self) -> "unsigned int const &":
        """GetNumberOfWorkUnits(itkProcessObject self) -> unsigned int const &"""
        return _ITKCommonBasePython.itkProcessObject_GetNumberOfWorkUnits(self)


    def SetNumberOfThreads(self, count: 'unsigned int') -> "void":
        """SetNumberOfThreads(itkProcessObject self, unsigned int count)"""
        return _ITKCommonBasePython.itkProcessObject_SetNumberOfThreads(self, count)


    def GetNumberOfThreads(self) -> "unsigned int":
        """GetNumberOfThreads(itkProcessObject self) -> unsigned int"""
        return _ITKCommonBasePython.itkProcessObject_GetNumberOfThreads(self)


    def GetMultiThreader(self) -> "itkMultiThreaderBase *":
        """GetMultiThreader(itkProcessObject self) -> itkMultiThreaderBase"""
        return _ITKCommonBasePython.itkProcessObject_GetMultiThreader(self)


    def SetMultiThreader(self, threader: 'itkMultiThreaderBase') -> "void":
        """SetMultiThreader(itkProcessObject self, itkMultiThreaderBase threader)"""
        return _ITKCommonBasePython.itkProcessObject_SetMultiThreader(self, threader)


    def PrepareOutputs(self) -> "void":
        """PrepareOutputs(itkProcessObject self)"""
        return _ITKCommonBasePython.itkProcessObject_PrepareOutputs(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkProcessObject

    def cast(obj: 'itkLightObject') -> "itkProcessObject *":
        """cast(itkLightObject obj) -> itkProcessObject"""
        return _ITKCommonBasePython.itkProcessObject_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkProcessObject

        Create a new object of the class itkProcessObject and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProcessObject.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkProcessObject.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkProcessObject.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def __len__(self):
        """Returns the number of outputs of that object.
        """
        return self.GetNumberOfIndexedOutputs()

    def __getitem__(self, item):
        """Returns the outputs of that object.

        The outputs are casted to their real type.
        Several outputs may be returned by using the slice notation.
        """
        import itk
        if isinstance(item, slice):
            indices = item.indices(len(self))
            return [itk.down_cast(self.GetOutput(i)) for i in range(*indices)]
        else:
            return itk.down_cast(self.GetOutput(item))

    def __call__(self, *args, **kargs):
        """Deprecated procedural interface function.

        Use snake case function instead. This function is now
        merely a wrapper around the snake case function.

        Create a process object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        UpdateLargestPossibleRegion() is ran once the input are changed, and
        the current output, or tuple of outputs, if there is more than
        one, is returned. Something like 'filter(input_image, threshold=10)[0]' would
        return the first up-to-date output of a filter with multiple
        outputs.
        """
        import itkHelpers
        import warnings

        name = self.GetNameOfClass()
        snake = itkHelpers.camel_to_snake_case(name)

        warnings.warn("WrapITK warning: itk.%s() is deprecated for procedural"
        " interface. Use snake case function itk.%s() instead."
        % (name, snake), DeprecationWarning)

        filt = self.New(*args, **kargs)
        return filt.__internal_call__()


    def __internal_call__(self):
        """Create a process object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        UpdateLargestPossibleRegion() is ran once the input are changed, and
        the current output, or tuple of outputs, if there is more than
        one, is returned. Something like 'filter(input_image, threshold=10)[0]' would
        return the first up-to-date output of a filter with multiple
        outputs.
        """
        self.UpdateLargestPossibleRegion()
        try:
            if self.GetNumberOfIndexedOutputs() == 0:
                result = None
            elif self.GetNumberOfIndexedOutputs() == 1:
                result = self.GetOutput()
            else:
                result = tuple([self.GetOutput(idx) for idx in range(self.GetNumberOfIndexedOutputs())])
            return result
        except AttributeError as e:
#In theory, filters should declare that they don't return any output
    # and therefore the `GetOutput()` method should not be called. However,
    # there is no garranty that this is always the case.
            print("This filter cannot be called functionally. Use Object call instead.")

itkProcessObject.GetInputNames = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetInputNames, None, itkProcessObject)
itkProcessObject.GetRequiredInputNames = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetRequiredInputNames, None, itkProcessObject)
itkProcessObject.GetInputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetInputs, None, itkProcessObject)
itkProcessObject.HasInput = new_instancemethod(_ITKCommonBasePython.itkProcessObject_HasInput, None, itkProcessObject)
itkProcessObject.GetNumberOfInputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetNumberOfInputs, None, itkProcessObject)
itkProcessObject.GetNumberOfOutputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetNumberOfOutputs, None, itkProcessObject)
itkProcessObject.GetOutputNames = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetOutputNames, None, itkProcessObject)
itkProcessObject.GetOutputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetOutputs, None, itkProcessObject)
itkProcessObject.HasOutput = new_instancemethod(_ITKCommonBasePython.itkProcessObject_HasOutput, None, itkProcessObject)
itkProcessObject.GetIndexedInputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetIndexedInputs, None, itkProcessObject)
itkProcessObject.GetNumberOfIndexedInputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetNumberOfIndexedInputs, None, itkProcessObject)
itkProcessObject.GetNumberOfValidRequiredInputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetNumberOfValidRequiredInputs, None, itkProcessObject)
itkProcessObject.GetIndexedOutputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetIndexedOutputs, None, itkProcessObject)
itkProcessObject.GetNumberOfIndexedOutputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetNumberOfIndexedOutputs, None, itkProcessObject)
itkProcessObject.SetAbortGenerateData = new_instancemethod(_ITKCommonBasePython.itkProcessObject_SetAbortGenerateData, None, itkProcessObject)
itkProcessObject.GetAbortGenerateData = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetAbortGenerateData, None, itkProcessObject)
itkProcessObject.AbortGenerateDataOn = new_instancemethod(_ITKCommonBasePython.itkProcessObject_AbortGenerateDataOn, None, itkProcessObject)
itkProcessObject.AbortGenerateDataOff = new_instancemethod(_ITKCommonBasePython.itkProcessObject_AbortGenerateDataOff, None, itkProcessObject)
itkProcessObject.SetProgress = new_instancemethod(_ITKCommonBasePython.itkProcessObject_SetProgress, None, itkProcessObject)
itkProcessObject.GetProgress = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetProgress, None, itkProcessObject)
itkProcessObject.UpdateProgress = new_instancemethod(_ITKCommonBasePython.itkProcessObject_UpdateProgress, None, itkProcessObject)
itkProcessObject.Update = new_instancemethod(_ITKCommonBasePython.itkProcessObject_Update, None, itkProcessObject)
itkProcessObject.UpdateLargestPossibleRegion = new_instancemethod(_ITKCommonBasePython.itkProcessObject_UpdateLargestPossibleRegion, None, itkProcessObject)
itkProcessObject.UpdateOutputInformation = new_instancemethod(_ITKCommonBasePython.itkProcessObject_UpdateOutputInformation, None, itkProcessObject)
itkProcessObject.PropagateRequestedRegion = new_instancemethod(_ITKCommonBasePython.itkProcessObject_PropagateRequestedRegion, None, itkProcessObject)
itkProcessObject.UpdateOutputData = new_instancemethod(_ITKCommonBasePython.itkProcessObject_UpdateOutputData, None, itkProcessObject)
itkProcessObject.EnlargeOutputRequestedRegion = new_instancemethod(_ITKCommonBasePython.itkProcessObject_EnlargeOutputRequestedRegion, None, itkProcessObject)
itkProcessObject.ResetPipeline = new_instancemethod(_ITKCommonBasePython.itkProcessObject_ResetPipeline, None, itkProcessObject)
itkProcessObject.MakeOutput = new_instancemethod(_ITKCommonBasePython.itkProcessObject_MakeOutput, None, itkProcessObject)
itkProcessObject.SetReleaseDataFlag = new_instancemethod(_ITKCommonBasePython.itkProcessObject_SetReleaseDataFlag, None, itkProcessObject)
itkProcessObject.GetReleaseDataFlag = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetReleaseDataFlag, None, itkProcessObject)
itkProcessObject.ReleaseDataFlagOn = new_instancemethod(_ITKCommonBasePython.itkProcessObject_ReleaseDataFlagOn, None, itkProcessObject)
itkProcessObject.ReleaseDataFlagOff = new_instancemethod(_ITKCommonBasePython.itkProcessObject_ReleaseDataFlagOff, None, itkProcessObject)
itkProcessObject.SetReleaseDataBeforeUpdateFlag = new_instancemethod(_ITKCommonBasePython.itkProcessObject_SetReleaseDataBeforeUpdateFlag, None, itkProcessObject)
itkProcessObject.GetReleaseDataBeforeUpdateFlag = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetReleaseDataBeforeUpdateFlag, None, itkProcessObject)
itkProcessObject.ReleaseDataBeforeUpdateFlagOn = new_instancemethod(_ITKCommonBasePython.itkProcessObject_ReleaseDataBeforeUpdateFlagOn, None, itkProcessObject)
itkProcessObject.ReleaseDataBeforeUpdateFlagOff = new_instancemethod(_ITKCommonBasePython.itkProcessObject_ReleaseDataBeforeUpdateFlagOff, None, itkProcessObject)
itkProcessObject.SetNumberOfWorkUnits = new_instancemethod(_ITKCommonBasePython.itkProcessObject_SetNumberOfWorkUnits, None, itkProcessObject)
itkProcessObject.GetNumberOfWorkUnits = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetNumberOfWorkUnits, None, itkProcessObject)
itkProcessObject.SetNumberOfThreads = new_instancemethod(_ITKCommonBasePython.itkProcessObject_SetNumberOfThreads, None, itkProcessObject)
itkProcessObject.GetNumberOfThreads = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetNumberOfThreads, None, itkProcessObject)
itkProcessObject.GetMultiThreader = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetMultiThreader, None, itkProcessObject)
itkProcessObject.SetMultiThreader = new_instancemethod(_ITKCommonBasePython.itkProcessObject_SetMultiThreader, None, itkProcessObject)
itkProcessObject.PrepareOutputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_PrepareOutputs, None, itkProcessObject)
itkProcessObject_swigregister = _ITKCommonBasePython.itkProcessObject_swigregister
itkProcessObject_swigregister(itkProcessObject)

def itkProcessObject_cast(obj: 'itkLightObject') -> "itkProcessObject *":
    """itkProcessObject_cast(itkLightObject obj) -> itkProcessObject"""
    return _ITKCommonBasePython.itkProcessObject_cast(obj)

class itkProgressReporter(object):
    """Proxy of C++ itkProgressReporter class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, filter: 'itkProcessObject', threadId: 'unsigned int', numberOfPixels: 'unsigned long long', numberOfUpdates: 'unsigned long long'=100, initialProgress: 'float'=0., progressWeight: 'float'=1.):
        """
        __init__(itkProgressReporter self, itkProcessObject filter, unsigned int threadId, unsigned long long numberOfPixels, unsigned long long numberOfUpdates=100, float initialProgress=0., float progressWeight=1.) -> itkProgressReporter
        __init__(itkProgressReporter self, itkProcessObject filter, unsigned int threadId, unsigned long long numberOfPixels, unsigned long long numberOfUpdates=100, float initialProgress=0.) -> itkProgressReporter
        __init__(itkProgressReporter self, itkProcessObject filter, unsigned int threadId, unsigned long long numberOfPixels, unsigned long long numberOfUpdates=100) -> itkProgressReporter
        __init__(itkProgressReporter self, itkProcessObject filter, unsigned int threadId, unsigned long long numberOfPixels) -> itkProgressReporter
        """
        _ITKCommonBasePython.itkProgressReporter_swiginit(self, _ITKCommonBasePython.new_itkProgressReporter(filter, threadId, numberOfPixels, numberOfUpdates, initialProgress, progressWeight))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkProgressReporter

    def CompletedPixel(self) -> "void":
        """CompletedPixel(itkProgressReporter self)"""
        return _ITKCommonBasePython.itkProgressReporter_CompletedPixel(self)

itkProgressReporter.CompletedPixel = new_instancemethod(_ITKCommonBasePython.itkProgressReporter_CompletedPixel, None, itkProgressReporter)
itkProgressReporter_swigregister = _ITKCommonBasePython.itkProgressReporter_swigregister
itkProgressReporter_swigregister(itkProgressReporter)

class itkRandomVariateGeneratorBase(itkObject):
    """Proxy of C++ itkRandomVariateGeneratorBase class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetVariate(self) -> "double":
        """GetVariate(itkRandomVariateGeneratorBase self) -> double"""
        return _ITKCommonBasePython.itkRandomVariateGeneratorBase_GetVariate(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkRandomVariateGeneratorBase

    def cast(obj: 'itkLightObject') -> "itkRandomVariateGeneratorBase *":
        """cast(itkLightObject obj) -> itkRandomVariateGeneratorBase"""
        return _ITKCommonBasePython.itkRandomVariateGeneratorBase_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRandomVariateGeneratorBase

        Create a new object of the class itkRandomVariateGeneratorBase and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRandomVariateGeneratorBase.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRandomVariateGeneratorBase.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRandomVariateGeneratorBase.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRandomVariateGeneratorBase.GetVariate = new_instancemethod(_ITKCommonBasePython.itkRandomVariateGeneratorBase_GetVariate, None, itkRandomVariateGeneratorBase)
itkRandomVariateGeneratorBase_swigregister = _ITKCommonBasePython.itkRandomVariateGeneratorBase_swigregister
itkRandomVariateGeneratorBase_swigregister(itkRandomVariateGeneratorBase)

def itkRandomVariateGeneratorBase_cast(obj: 'itkLightObject') -> "itkRandomVariateGeneratorBase *":
    """itkRandomVariateGeneratorBase_cast(itkLightObject obj) -> itkRandomVariateGeneratorBase"""
    return _ITKCommonBasePython.itkRandomVariateGeneratorBase_cast(obj)

class itkRealTimeClock(itkObject):
    """Proxy of C++ itkRealTimeClock class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRealTimeClock_Pointer":
        """__New_orig__() -> itkRealTimeClock_Pointer"""
        return _ITKCommonBasePython.itkRealTimeClock___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRealTimeClock_Pointer":
        """Clone(itkRealTimeClock self) -> itkRealTimeClock_Pointer"""
        return _ITKCommonBasePython.itkRealTimeClock_Clone(self)


    def GetTimeInSeconds(self) -> "double":
        """GetTimeInSeconds(itkRealTimeClock self) -> double"""
        return _ITKCommonBasePython.itkRealTimeClock_GetTimeInSeconds(self)


    def GetFrequency(self) -> "double":
        """GetFrequency(itkRealTimeClock self) -> double"""
        return _ITKCommonBasePython.itkRealTimeClock_GetFrequency(self)


    def GetRealTimeStamp(self) -> "itkRealTimeStamp":
        """GetRealTimeStamp(itkRealTimeClock self) -> itkRealTimeStamp"""
        return _ITKCommonBasePython.itkRealTimeClock_GetRealTimeStamp(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkRealTimeClock

    def cast(obj: 'itkLightObject') -> "itkRealTimeClock *":
        """cast(itkLightObject obj) -> itkRealTimeClock"""
        return _ITKCommonBasePython.itkRealTimeClock_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRealTimeClock

        Create a new object of the class itkRealTimeClock and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRealTimeClock.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRealTimeClock.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRealTimeClock.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRealTimeClock.Clone = new_instancemethod(_ITKCommonBasePython.itkRealTimeClock_Clone, None, itkRealTimeClock)
itkRealTimeClock.GetTimeInSeconds = new_instancemethod(_ITKCommonBasePython.itkRealTimeClock_GetTimeInSeconds, None, itkRealTimeClock)
itkRealTimeClock.GetFrequency = new_instancemethod(_ITKCommonBasePython.itkRealTimeClock_GetFrequency, None, itkRealTimeClock)
itkRealTimeClock.GetRealTimeStamp = new_instancemethod(_ITKCommonBasePython.itkRealTimeClock_GetRealTimeStamp, None, itkRealTimeClock)
itkRealTimeClock_swigregister = _ITKCommonBasePython.itkRealTimeClock_swigregister
itkRealTimeClock_swigregister(itkRealTimeClock)

def itkRealTimeClock___New_orig__() -> "itkRealTimeClock_Pointer":
    """itkRealTimeClock___New_orig__() -> itkRealTimeClock_Pointer"""
    return _ITKCommonBasePython.itkRealTimeClock___New_orig__()

def itkRealTimeClock_cast(obj: 'itkLightObject') -> "itkRealTimeClock *":
    """itkRealTimeClock_cast(itkLightObject obj) -> itkRealTimeClock"""
    return _ITKCommonBasePython.itkRealTimeClock_cast(obj)

class itkRealTimeInterval(object):
    """Proxy of C++ itkRealTimeInterval class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ITKCommonBasePython.delete_itkRealTimeInterval

    def GetTimeInMicroSeconds(self) -> "double":
        """GetTimeInMicroSeconds(itkRealTimeInterval self) -> double"""
        return _ITKCommonBasePython.itkRealTimeInterval_GetTimeInMicroSeconds(self)


    def GetTimeInMilliSeconds(self) -> "double":
        """GetTimeInMilliSeconds(itkRealTimeInterval self) -> double"""
        return _ITKCommonBasePython.itkRealTimeInterval_GetTimeInMilliSeconds(self)


    def GetTimeInSeconds(self) -> "double":
        """GetTimeInSeconds(itkRealTimeInterval self) -> double"""
        return _ITKCommonBasePython.itkRealTimeInterval_GetTimeInSeconds(self)


    def GetTimeInMinutes(self) -> "double":
        """GetTimeInMinutes(itkRealTimeInterval self) -> double"""
        return _ITKCommonBasePython.itkRealTimeInterval_GetTimeInMinutes(self)


    def GetTimeInHours(self) -> "double":
        """GetTimeInHours(itkRealTimeInterval self) -> double"""
        return _ITKCommonBasePython.itkRealTimeInterval_GetTimeInHours(self)


    def GetTimeInDays(self) -> "double":
        """GetTimeInDays(itkRealTimeInterval self) -> double"""
        return _ITKCommonBasePython.itkRealTimeInterval_GetTimeInDays(self)


    def __sub__(self, arg0: 'itkRealTimeInterval') -> "itkRealTimeInterval":
        """__sub__(itkRealTimeInterval self, itkRealTimeInterval arg0) -> itkRealTimeInterval"""
        return _ITKCommonBasePython.itkRealTimeInterval___sub__(self, arg0)


    def __add__(self, arg0: 'itkRealTimeInterval') -> "itkRealTimeInterval":
        """__add__(itkRealTimeInterval self, itkRealTimeInterval arg0) -> itkRealTimeInterval"""
        return _ITKCommonBasePython.itkRealTimeInterval___add__(self, arg0)


    def __isub__(self, arg0: 'itkRealTimeInterval') -> "itkRealTimeInterval const &":
        """__isub__(itkRealTimeInterval self, itkRealTimeInterval arg0) -> itkRealTimeInterval"""
        return _ITKCommonBasePython.itkRealTimeInterval___isub__(self, arg0)


    def __iadd__(self, arg0: 'itkRealTimeInterval') -> "itkRealTimeInterval const &":
        """__iadd__(itkRealTimeInterval self, itkRealTimeInterval arg0) -> itkRealTimeInterval"""
        return _ITKCommonBasePython.itkRealTimeInterval___iadd__(self, arg0)


    def __gt__(self, arg0: 'itkRealTimeInterval') -> "bool":
        """__gt__(itkRealTimeInterval self, itkRealTimeInterval arg0) -> bool"""
        return _ITKCommonBasePython.itkRealTimeInterval___gt__(self, arg0)


    def __lt__(self, arg0: 'itkRealTimeInterval') -> "bool":
        """__lt__(itkRealTimeInterval self, itkRealTimeInterval arg0) -> bool"""
        return _ITKCommonBasePython.itkRealTimeInterval___lt__(self, arg0)


    def __eq__(self, arg0: 'itkRealTimeInterval') -> "bool":
        """__eq__(itkRealTimeInterval self, itkRealTimeInterval arg0) -> bool"""
        return _ITKCommonBasePython.itkRealTimeInterval___eq__(self, arg0)


    def __ne__(self, arg0: 'itkRealTimeInterval') -> "bool":
        """__ne__(itkRealTimeInterval self, itkRealTimeInterval arg0) -> bool"""
        return _ITKCommonBasePython.itkRealTimeInterval___ne__(self, arg0)


    def __le__(self, arg0: 'itkRealTimeInterval') -> "bool":
        """__le__(itkRealTimeInterval self, itkRealTimeInterval arg0) -> bool"""
        return _ITKCommonBasePython.itkRealTimeInterval___le__(self, arg0)


    def __ge__(self, arg0: 'itkRealTimeInterval') -> "bool":
        """__ge__(itkRealTimeInterval self, itkRealTimeInterval arg0) -> bool"""
        return _ITKCommonBasePython.itkRealTimeInterval___ge__(self, arg0)


    def Set(self, arg0: 'long long', arg1: 'long long') -> "void":
        """Set(itkRealTimeInterval self, long long arg0, long long arg1)"""
        return _ITKCommonBasePython.itkRealTimeInterval_Set(self, arg0, arg1)


    def __init__(self, *args):
        """
        __init__(itkRealTimeInterval self) -> itkRealTimeInterval
        __init__(itkRealTimeInterval self, long long arg0, long long arg1) -> itkRealTimeInterval
        __init__(itkRealTimeInterval self, itkRealTimeInterval arg0) -> itkRealTimeInterval
        """
        _ITKCommonBasePython.itkRealTimeInterval_swiginit(self, _ITKCommonBasePython.new_itkRealTimeInterval(*args))
itkRealTimeInterval.GetTimeInMicroSeconds = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval_GetTimeInMicroSeconds, None, itkRealTimeInterval)
itkRealTimeInterval.GetTimeInMilliSeconds = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval_GetTimeInMilliSeconds, None, itkRealTimeInterval)
itkRealTimeInterval.GetTimeInSeconds = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval_GetTimeInSeconds, None, itkRealTimeInterval)
itkRealTimeInterval.GetTimeInMinutes = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval_GetTimeInMinutes, None, itkRealTimeInterval)
itkRealTimeInterval.GetTimeInHours = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval_GetTimeInHours, None, itkRealTimeInterval)
itkRealTimeInterval.GetTimeInDays = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval_GetTimeInDays, None, itkRealTimeInterval)
itkRealTimeInterval.__sub__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval___sub__, None, itkRealTimeInterval)
itkRealTimeInterval.__add__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval___add__, None, itkRealTimeInterval)
itkRealTimeInterval.__isub__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval___isub__, None, itkRealTimeInterval)
itkRealTimeInterval.__iadd__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval___iadd__, None, itkRealTimeInterval)
itkRealTimeInterval.__gt__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval___gt__, None, itkRealTimeInterval)
itkRealTimeInterval.__lt__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval___lt__, None, itkRealTimeInterval)
itkRealTimeInterval.__eq__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval___eq__, None, itkRealTimeInterval)
itkRealTimeInterval.__ne__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval___ne__, None, itkRealTimeInterval)
itkRealTimeInterval.__le__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval___le__, None, itkRealTimeInterval)
itkRealTimeInterval.__ge__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval___ge__, None, itkRealTimeInterval)
itkRealTimeInterval.Set = new_instancemethod(_ITKCommonBasePython.itkRealTimeInterval_Set, None, itkRealTimeInterval)
itkRealTimeInterval_swigregister = _ITKCommonBasePython.itkRealTimeInterval_swigregister
itkRealTimeInterval_swigregister(itkRealTimeInterval)

class itkRealTimeStamp(object):
    """Proxy of C++ itkRealTimeStamp class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ITKCommonBasePython.delete_itkRealTimeStamp

    def GetTimeInMicroSeconds(self) -> "double":
        """GetTimeInMicroSeconds(itkRealTimeStamp self) -> double"""
        return _ITKCommonBasePython.itkRealTimeStamp_GetTimeInMicroSeconds(self)


    def GetTimeInMilliSeconds(self) -> "double":
        """GetTimeInMilliSeconds(itkRealTimeStamp self) -> double"""
        return _ITKCommonBasePython.itkRealTimeStamp_GetTimeInMilliSeconds(self)


    def GetTimeInSeconds(self) -> "double":
        """GetTimeInSeconds(itkRealTimeStamp self) -> double"""
        return _ITKCommonBasePython.itkRealTimeStamp_GetTimeInSeconds(self)


    def GetTimeInMinutes(self) -> "double":
        """GetTimeInMinutes(itkRealTimeStamp self) -> double"""
        return _ITKCommonBasePython.itkRealTimeStamp_GetTimeInMinutes(self)


    def GetTimeInHours(self) -> "double":
        """GetTimeInHours(itkRealTimeStamp self) -> double"""
        return _ITKCommonBasePython.itkRealTimeStamp_GetTimeInHours(self)


    def GetTimeInDays(self) -> "double":
        """GetTimeInDays(itkRealTimeStamp self) -> double"""
        return _ITKCommonBasePython.itkRealTimeStamp_GetTimeInDays(self)


    def __add__(self, arg0: 'itkRealTimeInterval') -> "itkRealTimeStamp":
        """__add__(itkRealTimeStamp self, itkRealTimeInterval arg0) -> itkRealTimeStamp"""
        return _ITKCommonBasePython.itkRealTimeStamp___add__(self, arg0)


    def __sub__(self, *args) -> "itkRealTimeStamp":
        """
        __sub__(itkRealTimeStamp self, itkRealTimeStamp arg0) -> itkRealTimeInterval
        __sub__(itkRealTimeStamp self, itkRealTimeInterval arg0) -> itkRealTimeStamp
        """
        return _ITKCommonBasePython.itkRealTimeStamp___sub__(self, *args)


    def __iadd__(self, arg0: 'itkRealTimeInterval') -> "itkRealTimeStamp const &":
        """__iadd__(itkRealTimeStamp self, itkRealTimeInterval arg0) -> itkRealTimeStamp"""
        return _ITKCommonBasePython.itkRealTimeStamp___iadd__(self, arg0)


    def __isub__(self, arg0: 'itkRealTimeInterval') -> "itkRealTimeStamp const &":
        """__isub__(itkRealTimeStamp self, itkRealTimeInterval arg0) -> itkRealTimeStamp"""
        return _ITKCommonBasePython.itkRealTimeStamp___isub__(self, arg0)


    def __gt__(self, arg0: 'itkRealTimeStamp') -> "bool":
        """__gt__(itkRealTimeStamp self, itkRealTimeStamp arg0) -> bool"""
        return _ITKCommonBasePython.itkRealTimeStamp___gt__(self, arg0)


    def __lt__(self, arg0: 'itkRealTimeStamp') -> "bool":
        """__lt__(itkRealTimeStamp self, itkRealTimeStamp arg0) -> bool"""
        return _ITKCommonBasePython.itkRealTimeStamp___lt__(self, arg0)


    def __eq__(self, arg0: 'itkRealTimeStamp') -> "bool":
        """__eq__(itkRealTimeStamp self, itkRealTimeStamp arg0) -> bool"""
        return _ITKCommonBasePython.itkRealTimeStamp___eq__(self, arg0)


    def __ne__(self, arg0: 'itkRealTimeStamp') -> "bool":
        """__ne__(itkRealTimeStamp self, itkRealTimeStamp arg0) -> bool"""
        return _ITKCommonBasePython.itkRealTimeStamp___ne__(self, arg0)


    def __le__(self, arg0: 'itkRealTimeStamp') -> "bool":
        """__le__(itkRealTimeStamp self, itkRealTimeStamp arg0) -> bool"""
        return _ITKCommonBasePython.itkRealTimeStamp___le__(self, arg0)


    def __ge__(self, arg0: 'itkRealTimeStamp') -> "bool":
        """__ge__(itkRealTimeStamp self, itkRealTimeStamp arg0) -> bool"""
        return _ITKCommonBasePython.itkRealTimeStamp___ge__(self, arg0)


    def __init__(self, *args):
        """
        __init__(itkRealTimeStamp self) -> itkRealTimeStamp
        __init__(itkRealTimeStamp self, itkRealTimeStamp arg0) -> itkRealTimeStamp
        """
        _ITKCommonBasePython.itkRealTimeStamp_swiginit(self, _ITKCommonBasePython.new_itkRealTimeStamp(*args))
itkRealTimeStamp.GetTimeInMicroSeconds = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp_GetTimeInMicroSeconds, None, itkRealTimeStamp)
itkRealTimeStamp.GetTimeInMilliSeconds = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp_GetTimeInMilliSeconds, None, itkRealTimeStamp)
itkRealTimeStamp.GetTimeInSeconds = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp_GetTimeInSeconds, None, itkRealTimeStamp)
itkRealTimeStamp.GetTimeInMinutes = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp_GetTimeInMinutes, None, itkRealTimeStamp)
itkRealTimeStamp.GetTimeInHours = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp_GetTimeInHours, None, itkRealTimeStamp)
itkRealTimeStamp.GetTimeInDays = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp_GetTimeInDays, None, itkRealTimeStamp)
itkRealTimeStamp.__add__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp___add__, None, itkRealTimeStamp)
itkRealTimeStamp.__sub__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp___sub__, None, itkRealTimeStamp)
itkRealTimeStamp.__iadd__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp___iadd__, None, itkRealTimeStamp)
itkRealTimeStamp.__isub__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp___isub__, None, itkRealTimeStamp)
itkRealTimeStamp.__gt__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp___gt__, None, itkRealTimeStamp)
itkRealTimeStamp.__lt__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp___lt__, None, itkRealTimeStamp)
itkRealTimeStamp.__eq__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp___eq__, None, itkRealTimeStamp)
itkRealTimeStamp.__ne__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp___ne__, None, itkRealTimeStamp)
itkRealTimeStamp.__le__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp___le__, None, itkRealTimeStamp)
itkRealTimeStamp.__ge__ = new_instancemethod(_ITKCommonBasePython.itkRealTimeStamp___ge__, None, itkRealTimeStamp)
itkRealTimeStamp_swigregister = _ITKCommonBasePython.itkRealTimeStamp_swigregister
itkRealTimeStamp_swigregister(itkRealTimeStamp)

class itkRegion(object):
    """Proxy of C++ itkRegion class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ITK_UNSTRUCTURED_REGION = _ITKCommonBasePython.itkRegion_ITK_UNSTRUCTURED_REGION
    ITK_STRUCTURED_REGION = _ITKCommonBasePython.itkRegion_ITK_STRUCTURED_REGION

    def GetNameOfClass(self) -> "char const *":
        """GetNameOfClass(itkRegion self) -> char const *"""
        return _ITKCommonBasePython.itkRegion_GetNameOfClass(self)


    def GetRegionType(self) -> "itkRegion::RegionType":
        """GetRegionType(itkRegion self) -> itkRegion::RegionType"""
        return _ITKCommonBasePython.itkRegion_GetRegionType(self)


    def Print(self, os: 'ostream', indent: 'itkIndent'=0) -> "void":
        """
        Print(itkRegion self, ostream os, itkIndent indent=0)
        Print(itkRegion self, ostream os)
        """
        return _ITKCommonBasePython.itkRegion_Print(self, os, indent)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkRegion
itkRegion.GetNameOfClass = new_instancemethod(_ITKCommonBasePython.itkRegion_GetNameOfClass, None, itkRegion)
itkRegion.GetRegionType = new_instancemethod(_ITKCommonBasePython.itkRegion_GetRegionType, None, itkRegion)
itkRegion.Print = new_instancemethod(_ITKCommonBasePython.itkRegion_Print, None, itkRegion)
itkRegion_swigregister = _ITKCommonBasePython.itkRegion_swigregister
itkRegion_swigregister(itkRegion)

class itkResourceProbeDD(object):
    """Proxy of C++ itkResourceProbeDD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ITKCommonBasePython.delete_itkResourceProbeDD

    def GetType(self) -> "std::string":
        """GetType(itkResourceProbeDD self) -> std::string"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetType(self)


    def GetUnit(self) -> "std::string":
        """GetUnit(itkResourceProbeDD self) -> std::string"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetUnit(self)


    def Start(self) -> "void":
        """Start(itkResourceProbeDD self)"""
        return _ITKCommonBasePython.itkResourceProbeDD_Start(self)


    def Stop(self) -> "void":
        """Stop(itkResourceProbeDD self)"""
        return _ITKCommonBasePython.itkResourceProbeDD_Stop(self)


    def GetNumberOfStarts(self) -> "unsigned long long":
        """GetNumberOfStarts(itkResourceProbeDD self) -> unsigned long long"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetNumberOfStarts(self)


    def GetNumberOfStops(self) -> "unsigned long long":
        """GetNumberOfStops(itkResourceProbeDD self) -> unsigned long long"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetNumberOfStops(self)


    def GetNumberOfIteration(self) -> "unsigned long long":
        """GetNumberOfIteration(itkResourceProbeDD self) -> unsigned long long"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetNumberOfIteration(self)


    def GetInstantValue(self) -> "double":
        """GetInstantValue(itkResourceProbeDD self) -> double"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetInstantValue(self)


    def GetTotal(self) -> "double":
        """GetTotal(itkResourceProbeDD self) -> double"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetTotal(self)


    def GetMean(self) -> "double":
        """GetMean(itkResourceProbeDD self) -> double"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetMean(self)


    def Reset(self) -> "void":
        """Reset(itkResourceProbeDD self)"""
        return _ITKCommonBasePython.itkResourceProbeDD_Reset(self)


    def GetMinimum(self) -> "double":
        """GetMinimum(itkResourceProbeDD self) -> double"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetMinimum(self)


    def GetMaximum(self) -> "double":
        """GetMaximum(itkResourceProbeDD self) -> double"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetMaximum(self)


    def GetStandardDeviation(self) -> "double":
        """GetStandardDeviation(itkResourceProbeDD self) -> double"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetStandardDeviation(self)


    def GetStandardError(self) -> "double":
        """GetStandardError(itkResourceProbeDD self) -> double"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetStandardError(self)


    def SetNameOfProbe(self, nameOfProbe: 'char const *') -> "void":
        """SetNameOfProbe(itkResourceProbeDD self, char const * nameOfProbe)"""
        return _ITKCommonBasePython.itkResourceProbeDD_SetNameOfProbe(self, nameOfProbe)


    def GetNameOfProbe(self) -> "std::string":
        """GetNameOfProbe(itkResourceProbeDD self) -> std::string"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetNameOfProbe(self)


    def PrintSystemInformation(self, *args) -> "void":
        """
        PrintSystemInformation(itkResourceProbeDD self, ostream os)
        PrintSystemInformation(itkResourceProbeDD self)
        """
        return _ITKCommonBasePython.itkResourceProbeDD_PrintSystemInformation(self, *args)


    def Report(self, *args) -> "void":
        """
        Report(itkResourceProbeDD self, ostream os, bool printSystemInfo=True, bool printReportHead=True, bool useTabs=False)
        Report(itkResourceProbeDD self, ostream os, bool printSystemInfo=True, bool printReportHead=True)
        Report(itkResourceProbeDD self, ostream os, bool printSystemInfo=True)
        Report(itkResourceProbeDD self, ostream os)
        Report(itkResourceProbeDD self)
        """
        return _ITKCommonBasePython.itkResourceProbeDD_Report(self, *args)


    def ExpandedReport(self, *args) -> "void":
        """
        ExpandedReport(itkResourceProbeDD self, ostream os, bool printSystemInfo=True, bool printReportHead=True, bool useTabs=False)
        ExpandedReport(itkResourceProbeDD self, ostream os, bool printSystemInfo=True, bool printReportHead=True)
        ExpandedReport(itkResourceProbeDD self, ostream os, bool printSystemInfo=True)
        ExpandedReport(itkResourceProbeDD self, ostream os)
        ExpandedReport(itkResourceProbeDD self)
        """
        return _ITKCommonBasePython.itkResourceProbeDD_ExpandedReport(self, *args)


    def JSONReport(self, *args) -> "void":
        """
        JSONReport(itkResourceProbeDD self, ostream os)
        JSONReport(itkResourceProbeDD self)
        """
        return _ITKCommonBasePython.itkResourceProbeDD_JSONReport(self, *args)


    def PrintJSONSystemInformation(self, *args) -> "void":
        """
        PrintJSONSystemInformation(itkResourceProbeDD self, ostream os)
        PrintJSONSystemInformation(itkResourceProbeDD self)
        """
        return _ITKCommonBasePython.itkResourceProbeDD_PrintJSONSystemInformation(self, *args)

itkResourceProbeDD.GetType = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetType, None, itkResourceProbeDD)
itkResourceProbeDD.GetUnit = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetUnit, None, itkResourceProbeDD)
itkResourceProbeDD.Start = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_Start, None, itkResourceProbeDD)
itkResourceProbeDD.Stop = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_Stop, None, itkResourceProbeDD)
itkResourceProbeDD.GetNumberOfStarts = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetNumberOfStarts, None, itkResourceProbeDD)
itkResourceProbeDD.GetNumberOfStops = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetNumberOfStops, None, itkResourceProbeDD)
itkResourceProbeDD.GetNumberOfIteration = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetNumberOfIteration, None, itkResourceProbeDD)
itkResourceProbeDD.GetInstantValue = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetInstantValue, None, itkResourceProbeDD)
itkResourceProbeDD.GetTotal = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetTotal, None, itkResourceProbeDD)
itkResourceProbeDD.GetMean = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetMean, None, itkResourceProbeDD)
itkResourceProbeDD.Reset = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_Reset, None, itkResourceProbeDD)
itkResourceProbeDD.GetMinimum = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetMinimum, None, itkResourceProbeDD)
itkResourceProbeDD.GetMaximum = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetMaximum, None, itkResourceProbeDD)
itkResourceProbeDD.GetStandardDeviation = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetStandardDeviation, None, itkResourceProbeDD)
itkResourceProbeDD.GetStandardError = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetStandardError, None, itkResourceProbeDD)
itkResourceProbeDD.SetNameOfProbe = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_SetNameOfProbe, None, itkResourceProbeDD)
itkResourceProbeDD.GetNameOfProbe = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetNameOfProbe, None, itkResourceProbeDD)
itkResourceProbeDD.PrintSystemInformation = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_PrintSystemInformation, None, itkResourceProbeDD)
itkResourceProbeDD.Report = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_Report, None, itkResourceProbeDD)
itkResourceProbeDD.ExpandedReport = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_ExpandedReport, None, itkResourceProbeDD)
itkResourceProbeDD.JSONReport = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_JSONReport, None, itkResourceProbeDD)
itkResourceProbeDD.PrintJSONSystemInformation = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_PrintJSONSystemInformation, None, itkResourceProbeDD)
itkResourceProbeDD_swigregister = _ITKCommonBasePython.itkResourceProbeDD_swigregister
itkResourceProbeDD_swigregister(itkResourceProbeDD)

class itkSimpleFilterWatcher(object):
    """Proxy of C++ itkSimpleFilterWatcher class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkSimpleFilterWatcher self, itkProcessObject o, char const * comment) -> itkSimpleFilterWatcher
        __init__(itkSimpleFilterWatcher self, itkProcessObject o) -> itkSimpleFilterWatcher
        __init__(itkSimpleFilterWatcher self, itkSimpleFilterWatcher arg0) -> itkSimpleFilterWatcher
        __init__(itkSimpleFilterWatcher self) -> itkSimpleFilterWatcher
        """
        _ITKCommonBasePython.itkSimpleFilterWatcher_swiginit(self, _ITKCommonBasePython.new_itkSimpleFilterWatcher(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkSimpleFilterWatcher

    def GetNameOfClass(self) -> "char const *":
        """GetNameOfClass(itkSimpleFilterWatcher self) -> char const *"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_GetNameOfClass(self)


    def QuietOn(self) -> "void":
        """QuietOn(itkSimpleFilterWatcher self)"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_QuietOn(self)


    def QuietOff(self) -> "void":
        """QuietOff(itkSimpleFilterWatcher self)"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_QuietOff(self)


    def TestAbortOn(self) -> "void":
        """TestAbortOn(itkSimpleFilterWatcher self)"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_TestAbortOn(self)


    def TestAbortOff(self) -> "void":
        """TestAbortOff(itkSimpleFilterWatcher self)"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_TestAbortOff(self)


    def GetProcess(self) -> "itkProcessObject *":
        """GetProcess(itkSimpleFilterWatcher self) -> itkProcessObject"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_GetProcess(self)


    def SetSteps(self, val: 'int') -> "void":
        """SetSteps(itkSimpleFilterWatcher self, int val)"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_SetSteps(self, val)


    def GetSteps(self) -> "int":
        """GetSteps(itkSimpleFilterWatcher self) -> int"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_GetSteps(self)


    def SetIterations(self, val: 'int') -> "void":
        """SetIterations(itkSimpleFilterWatcher self, int val)"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_SetIterations(self, val)


    def GetIterations(self) -> "int":
        """GetIterations(itkSimpleFilterWatcher self) -> int"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_GetIterations(self)


    def SetQuiet(self, val: 'bool') -> "void":
        """SetQuiet(itkSimpleFilterWatcher self, bool val)"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_SetQuiet(self, val)


    def GetQuiet(self) -> "bool":
        """GetQuiet(itkSimpleFilterWatcher self) -> bool"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_GetQuiet(self)


    def GetComment(self) -> "std::string":
        """GetComment(itkSimpleFilterWatcher self) -> std::string"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_GetComment(self)


    def GetTimeProbe(self) -> "itkTimeProbe &":
        """GetTimeProbe(itkSimpleFilterWatcher self) -> itkTimeProbe"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_GetTimeProbe(self)

itkSimpleFilterWatcher.GetNameOfClass = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_GetNameOfClass, None, itkSimpleFilterWatcher)
itkSimpleFilterWatcher.QuietOn = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_QuietOn, None, itkSimpleFilterWatcher)
itkSimpleFilterWatcher.QuietOff = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_QuietOff, None, itkSimpleFilterWatcher)
itkSimpleFilterWatcher.TestAbortOn = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_TestAbortOn, None, itkSimpleFilterWatcher)
itkSimpleFilterWatcher.TestAbortOff = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_TestAbortOff, None, itkSimpleFilterWatcher)
itkSimpleFilterWatcher.GetProcess = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_GetProcess, None, itkSimpleFilterWatcher)
itkSimpleFilterWatcher.SetSteps = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_SetSteps, None, itkSimpleFilterWatcher)
itkSimpleFilterWatcher.GetSteps = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_GetSteps, None, itkSimpleFilterWatcher)
itkSimpleFilterWatcher.SetIterations = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_SetIterations, None, itkSimpleFilterWatcher)
itkSimpleFilterWatcher.GetIterations = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_GetIterations, None, itkSimpleFilterWatcher)
itkSimpleFilterWatcher.SetQuiet = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_SetQuiet, None, itkSimpleFilterWatcher)
itkSimpleFilterWatcher.GetQuiet = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_GetQuiet, None, itkSimpleFilterWatcher)
itkSimpleFilterWatcher.GetComment = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_GetComment, None, itkSimpleFilterWatcher)
itkSimpleFilterWatcher.GetTimeProbe = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_GetTimeProbe, None, itkSimpleFilterWatcher)
itkSimpleFilterWatcher_swigregister = _ITKCommonBasePython.itkSimpleFilterWatcher_swigregister
itkSimpleFilterWatcher_swigregister(itkSimpleFilterWatcher)

class itkStoppingCriterionBase(itkObject):
    """Proxy of C++ itkStoppingCriterionBase class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def IsSatisfied(self) -> "bool":
        """IsSatisfied(itkStoppingCriterionBase self) -> bool"""
        return _ITKCommonBasePython.itkStoppingCriterionBase_IsSatisfied(self)


    def GetDescription(self) -> "std::string":
        """GetDescription(itkStoppingCriterionBase self) -> std::string"""
        return _ITKCommonBasePython.itkStoppingCriterionBase_GetDescription(self)

itkStoppingCriterionBase.IsSatisfied = new_instancemethod(_ITKCommonBasePython.itkStoppingCriterionBase_IsSatisfied, None, itkStoppingCriterionBase)
itkStoppingCriterionBase.GetDescription = new_instancemethod(_ITKCommonBasePython.itkStoppingCriterionBase_GetDescription, None, itkStoppingCriterionBase)
itkStoppingCriterionBase_swigregister = _ITKCommonBasePython.itkStoppingCriterionBase_swigregister
itkStoppingCriterionBase_swigregister(itkStoppingCriterionBase)

class itkStreamingProcessObject(itkProcessObject):
    """Proxy of C++ itkStreamingProcessObject class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GenerateData(self) -> "void":
        """GenerateData(itkStreamingProcessObject self)"""
        return _ITKCommonBasePython.itkStreamingProcessObject_GenerateData(self)


    def GetCurrentRequestNumber(self) -> "int":
        """GetCurrentRequestNumber(itkStreamingProcessObject self) -> int"""
        return _ITKCommonBasePython.itkStreamingProcessObject_GetCurrentRequestNumber(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkStreamingProcessObject

    def cast(obj: 'itkLightObject') -> "itkStreamingProcessObject *":
        """cast(itkLightObject obj) -> itkStreamingProcessObject"""
        return _ITKCommonBasePython.itkStreamingProcessObject_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkStreamingProcessObject

        Create a new object of the class itkStreamingProcessObject and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingProcessObject.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkStreamingProcessObject.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkStreamingProcessObject.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkStreamingProcessObject.GenerateData = new_instancemethod(_ITKCommonBasePython.itkStreamingProcessObject_GenerateData, None, itkStreamingProcessObject)
itkStreamingProcessObject.GetCurrentRequestNumber = new_instancemethod(_ITKCommonBasePython.itkStreamingProcessObject_GetCurrentRequestNumber, None, itkStreamingProcessObject)
itkStreamingProcessObject_swigregister = _ITKCommonBasePython.itkStreamingProcessObject_swigregister
itkStreamingProcessObject_swigregister(itkStreamingProcessObject)

def itkStreamingProcessObject_cast(obj: 'itkLightObject') -> "itkStreamingProcessObject *":
    """itkStreamingProcessObject_cast(itkLightObject obj) -> itkStreamingProcessObject"""
    return _ITKCommonBasePython.itkStreamingProcessObject_cast(obj)

class itkThreadPool(itkObject):
    """Proxy of C++ itkThreadPool class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkThreadPool_Pointer":
        """__New_orig__() -> itkThreadPool_Pointer"""
        return _ITKCommonBasePython.itkThreadPool___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def GetInstance() -> "itkThreadPool_Pointer":
        """GetInstance() -> itkThreadPool_Pointer"""
        return _ITKCommonBasePython.itkThreadPool_GetInstance()

    GetInstance = staticmethod(GetInstance)

    def AddThreads(self, count: 'unsigned int') -> "void":
        """AddThreads(itkThreadPool self, unsigned int count)"""
        return _ITKCommonBasePython.itkThreadPool_AddThreads(self, count)


    def GetMaximumNumberOfThreads(self) -> "unsigned int":
        """GetMaximumNumberOfThreads(itkThreadPool self) -> unsigned int"""
        return _ITKCommonBasePython.itkThreadPool_GetMaximumNumberOfThreads(self)


    def GetNumberOfCurrentlyIdleThreads(self) -> "int":
        """GetNumberOfCurrentlyIdleThreads(itkThreadPool self) -> int"""
        return _ITKCommonBasePython.itkThreadPool_GetNumberOfCurrentlyIdleThreads(self)


    def GetDoNotWaitForThreads() -> "bool":
        """GetDoNotWaitForThreads() -> bool"""
        return _ITKCommonBasePython.itkThreadPool_GetDoNotWaitForThreads()

    GetDoNotWaitForThreads = staticmethod(GetDoNotWaitForThreads)

    def SetDoNotWaitForThreads(doNotWaitForThreads: 'bool') -> "void":
        """SetDoNotWaitForThreads(bool doNotWaitForThreads)"""
        return _ITKCommonBasePython.itkThreadPool_SetDoNotWaitForThreads(doNotWaitForThreads)

    SetDoNotWaitForThreads = staticmethod(SetDoNotWaitForThreads)
    __swig_destroy__ = _ITKCommonBasePython.delete_itkThreadPool

    def cast(obj: 'itkLightObject') -> "itkThreadPool *":
        """cast(itkLightObject obj) -> itkThreadPool"""
        return _ITKCommonBasePython.itkThreadPool_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkThreadPool

        Create a new object of the class itkThreadPool and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThreadPool.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkThreadPool.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkThreadPool.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkThreadPool.AddThreads = new_instancemethod(_ITKCommonBasePython.itkThreadPool_AddThreads, None, itkThreadPool)
itkThreadPool.GetMaximumNumberOfThreads = new_instancemethod(_ITKCommonBasePython.itkThreadPool_GetMaximumNumberOfThreads, None, itkThreadPool)
itkThreadPool.GetNumberOfCurrentlyIdleThreads = new_instancemethod(_ITKCommonBasePython.itkThreadPool_GetNumberOfCurrentlyIdleThreads, None, itkThreadPool)
itkThreadPool_swigregister = _ITKCommonBasePython.itkThreadPool_swigregister
itkThreadPool_swigregister(itkThreadPool)

def itkThreadPool___New_orig__() -> "itkThreadPool_Pointer":
    """itkThreadPool___New_orig__() -> itkThreadPool_Pointer"""
    return _ITKCommonBasePython.itkThreadPool___New_orig__()

def itkThreadPool_GetInstance() -> "itkThreadPool_Pointer":
    """itkThreadPool_GetInstance() -> itkThreadPool_Pointer"""
    return _ITKCommonBasePython.itkThreadPool_GetInstance()

def itkThreadPool_GetDoNotWaitForThreads() -> "bool":
    """itkThreadPool_GetDoNotWaitForThreads() -> bool"""
    return _ITKCommonBasePython.itkThreadPool_GetDoNotWaitForThreads()

def itkThreadPool_SetDoNotWaitForThreads(doNotWaitForThreads: 'bool') -> "void":
    """itkThreadPool_SetDoNotWaitForThreads(bool doNotWaitForThreads)"""
    return _ITKCommonBasePython.itkThreadPool_SetDoNotWaitForThreads(doNotWaitForThreads)

def itkThreadPool_cast(obj: 'itkLightObject') -> "itkThreadPool *":
    """itkThreadPool_cast(itkLightObject obj) -> itkThreadPool"""
    return _ITKCommonBasePython.itkThreadPool_cast(obj)

class itkTimeProbe(itkResourceProbeDD):
    """Proxy of C++ itkTimeProbe class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ITKCommonBasePython.delete_itkTimeProbe

    def GetRealTimeClock(self) -> "itkRealTimeClock const *":
        """GetRealTimeClock(itkTimeProbe self) -> itkRealTimeClock"""
        return _ITKCommonBasePython.itkTimeProbe_GetRealTimeClock(self)


    def __init__(self, *args):
        """
        __init__(itkTimeProbe self) -> itkTimeProbe
        __init__(itkTimeProbe self, itkTimeProbe arg0) -> itkTimeProbe
        """
        _ITKCommonBasePython.itkTimeProbe_swiginit(self, _ITKCommonBasePython.new_itkTimeProbe(*args))
itkTimeProbe.GetRealTimeClock = new_instancemethod(_ITKCommonBasePython.itkTimeProbe_GetRealTimeClock, None, itkTimeProbe)
itkTimeProbe_swigregister = _ITKCommonBasePython.itkTimeProbe_swigregister
itkTimeProbe_swigregister(itkTimeProbe)

class itkTimeStamp(object):
    """Proxy of C++ itkTimeStamp class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def New() -> "itkTimeStamp *":
        """New() -> itkTimeStamp"""
        return _ITKCommonBasePython.itkTimeStamp_New()

    New = staticmethod(New)

    def GetNameOfClass() -> "char const *":
        """GetNameOfClass() -> char const *"""
        return _ITKCommonBasePython.itkTimeStamp_GetNameOfClass()

    GetNameOfClass = staticmethod(GetNameOfClass)

    def Modified(self) -> "void":
        """Modified(itkTimeStamp self)"""
        return _ITKCommonBasePython.itkTimeStamp_Modified(self)


    def GetMTime(self) -> "unsigned long long":
        """GetMTime(itkTimeStamp self) -> unsigned long long"""
        return _ITKCommonBasePython.itkTimeStamp_GetMTime(self)


    def __gt__(self, ts: 'itkTimeStamp') -> "bool":
        """__gt__(itkTimeStamp self, itkTimeStamp ts) -> bool"""
        return _ITKCommonBasePython.itkTimeStamp___gt__(self, ts)


    def __lt__(self, ts: 'itkTimeStamp') -> "bool":
        """__lt__(itkTimeStamp self, itkTimeStamp ts) -> bool"""
        return _ITKCommonBasePython.itkTimeStamp___lt__(self, ts)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkTimeStamp

    def __init__(self, *args):
        """
        __init__(itkTimeStamp self) -> itkTimeStamp
        __init__(itkTimeStamp self, itkTimeStamp arg0) -> itkTimeStamp
        """
        _ITKCommonBasePython.itkTimeStamp_swiginit(self, _ITKCommonBasePython.new_itkTimeStamp(*args))
itkTimeStamp.Modified = new_instancemethod(_ITKCommonBasePython.itkTimeStamp_Modified, None, itkTimeStamp)
itkTimeStamp.GetMTime = new_instancemethod(_ITKCommonBasePython.itkTimeStamp_GetMTime, None, itkTimeStamp)
itkTimeStamp.__gt__ = new_instancemethod(_ITKCommonBasePython.itkTimeStamp___gt__, None, itkTimeStamp)
itkTimeStamp.__lt__ = new_instancemethod(_ITKCommonBasePython.itkTimeStamp___lt__, None, itkTimeStamp)
itkTimeStamp_swigregister = _ITKCommonBasePython.itkTimeStamp_swigregister
itkTimeStamp_swigregister(itkTimeStamp)

def itkTimeStamp_New() -> "itkTimeStamp *":
    """itkTimeStamp_New() -> itkTimeStamp"""
    return _ITKCommonBasePython.itkTimeStamp_New()

def itkTimeStamp_GetNameOfClass() -> "char const *":
    """itkTimeStamp_GetNameOfClass() -> char const *"""
    return _ITKCommonBasePython.itkTimeStamp_GetNameOfClass()

class itkVersion(itkObject):
    """Proxy of C++ itkVersion class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVersion_Pointer":
        """__New_orig__() -> itkVersion_Pointer"""
        return _ITKCommonBasePython.itkVersion___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVersion_Pointer":
        """Clone(itkVersion self) -> itkVersion_Pointer"""
        return _ITKCommonBasePython.itkVersion_Clone(self)


    def GetITKVersion() -> "char const *":
        """GetITKVersion() -> char const *"""
        return _ITKCommonBasePython.itkVersion_GetITKVersion()

    GetITKVersion = staticmethod(GetITKVersion)

    def GetITKMajorVersion() -> "int":
        """GetITKMajorVersion() -> int"""
        return _ITKCommonBasePython.itkVersion_GetITKMajorVersion()

    GetITKMajorVersion = staticmethod(GetITKMajorVersion)

    def GetITKMinorVersion() -> "int":
        """GetITKMinorVersion() -> int"""
        return _ITKCommonBasePython.itkVersion_GetITKMinorVersion()

    GetITKMinorVersion = staticmethod(GetITKMinorVersion)

    def GetITKBuildVersion() -> "int":
        """GetITKBuildVersion() -> int"""
        return _ITKCommonBasePython.itkVersion_GetITKBuildVersion()

    GetITKBuildVersion = staticmethod(GetITKBuildVersion)

    def GetITKSourceVersion() -> "char const *":
        """GetITKSourceVersion() -> char const *"""
        return _ITKCommonBasePython.itkVersion_GetITKSourceVersion()

    GetITKSourceVersion = staticmethod(GetITKSourceVersion)
    __swig_destroy__ = _ITKCommonBasePython.delete_itkVersion

    def cast(obj: 'itkLightObject') -> "itkVersion *":
        """cast(itkLightObject obj) -> itkVersion"""
        return _ITKCommonBasePython.itkVersion_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVersion

        Create a new object of the class itkVersion and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVersion.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVersion.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVersion.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVersion.Clone = new_instancemethod(_ITKCommonBasePython.itkVersion_Clone, None, itkVersion)
itkVersion_swigregister = _ITKCommonBasePython.itkVersion_swigregister
itkVersion_swigregister(itkVersion)

def itkVersion___New_orig__() -> "itkVersion_Pointer":
    """itkVersion___New_orig__() -> itkVersion_Pointer"""
    return _ITKCommonBasePython.itkVersion___New_orig__()

def itkVersion_GetITKVersion() -> "char const *":
    """itkVersion_GetITKVersion() -> char const *"""
    return _ITKCommonBasePython.itkVersion_GetITKVersion()

def itkVersion_GetITKMajorVersion() -> "int":
    """itkVersion_GetITKMajorVersion() -> int"""
    return _ITKCommonBasePython.itkVersion_GetITKMajorVersion()

def itkVersion_GetITKMinorVersion() -> "int":
    """itkVersion_GetITKMinorVersion() -> int"""
    return _ITKCommonBasePython.itkVersion_GetITKMinorVersion()

def itkVersion_GetITKBuildVersion() -> "int":
    """itkVersion_GetITKBuildVersion() -> int"""
    return _ITKCommonBasePython.itkVersion_GetITKBuildVersion()

def itkVersion_GetITKSourceVersion() -> "char const *":
    """itkVersion_GetITKSourceVersion() -> char const *"""
    return _ITKCommonBasePython.itkVersion_GetITKSourceVersion()

def itkVersion_cast(obj: 'itkLightObject') -> "itkVersion *":
    """itkVersion_cast(itkLightObject obj) -> itkVersion"""
    return _ITKCommonBasePython.itkVersion_cast(obj)

class itkXMLFilterWatcher(itkSimpleFilterWatcher):
    """Proxy of C++ itkXMLFilterWatcher class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkXMLFilterWatcher self, itkProcessObject o, char const * comment) -> itkXMLFilterWatcher
        __init__(itkXMLFilterWatcher self, itkProcessObject o) -> itkXMLFilterWatcher
        __init__(itkXMLFilterWatcher self, itkXMLFilterWatcher arg0) -> itkXMLFilterWatcher
        """
        _ITKCommonBasePython.itkXMLFilterWatcher_swiginit(self, _ITKCommonBasePython.new_itkXMLFilterWatcher(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkXMLFilterWatcher
itkXMLFilterWatcher_swigregister = _ITKCommonBasePython.itkXMLFilterWatcher_swigregister
itkXMLFilterWatcher_swigregister(itkXMLFilterWatcher)

class itkAnyEvent(itkEventObject):
    """Proxy of C++ itkAnyEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkAnyEvent self) -> itkAnyEvent
        __init__(itkAnyEvent self, itkAnyEvent s) -> itkAnyEvent
        """
        _ITKCommonBasePython.itkAnyEvent_swiginit(self, _ITKCommonBasePython.new_itkAnyEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkAnyEvent
itkAnyEvent_swigregister = _ITKCommonBasePython.itkAnyEvent_swigregister
itkAnyEvent_swigregister(itkAnyEvent)

class itkCommand(itkObject):
    """Proxy of C++ itkCommand class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Execute(self, *args) -> "void":
        """
        Execute(itkCommand self, itkObject caller, itkEventObject event)
        Execute(itkCommand self, itkObject caller, itkEventObject event)
        """
        return _ITKCommonBasePython.itkCommand_Execute(self, *args)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkCommand

    def cast(obj: 'itkLightObject') -> "itkCommand *":
        """cast(itkLightObject obj) -> itkCommand"""
        return _ITKCommonBasePython.itkCommand_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCommand

        Create a new object of the class itkCommand and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCommand.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCommand.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCommand.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCommand.Execute = new_instancemethod(_ITKCommonBasePython.itkCommand_Execute, None, itkCommand)
itkCommand_swigregister = _ITKCommonBasePython.itkCommand_swigregister
itkCommand_swigregister(itkCommand)

def itkCommand_cast(obj: 'itkLightObject') -> "itkCommand *":
    """itkCommand_cast(itkLightObject obj) -> itkCommand"""
    return _ITKCommonBasePython.itkCommand_cast(obj)

class itkDataObject(itkObject):
    """Proxy of C++ itkDataObject class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DisconnectPipeline(self) -> "void":
        """DisconnectPipeline(itkDataObject self)"""
        return _ITKCommonBasePython.itkDataObject_DisconnectPipeline(self)


    def GetSource(self) -> "itkProcessObject_Pointer":
        """GetSource(itkDataObject self) -> itkProcessObject_Pointer"""
        return _ITKCommonBasePython.itkDataObject_GetSource(self)


    def GetSourceOutputName(self) -> "std::string const &":
        """GetSourceOutputName(itkDataObject self) -> std::string const &"""
        return _ITKCommonBasePython.itkDataObject_GetSourceOutputName(self)


    def GetSourceOutputIndex(self) -> "unsigned long long":
        """GetSourceOutputIndex(itkDataObject self) -> unsigned long long"""
        return _ITKCommonBasePython.itkDataObject_GetSourceOutputIndex(self)


    def Initialize(self) -> "void":
        """Initialize(itkDataObject self)"""
        return _ITKCommonBasePython.itkDataObject_Initialize(self)


    def SetReleaseDataFlag(self, flag: 'bool') -> "void":
        """SetReleaseDataFlag(itkDataObject self, bool flag)"""
        return _ITKCommonBasePython.itkDataObject_SetReleaseDataFlag(self, flag)


    def GetReleaseDataFlag(self) -> "bool const &":
        """GetReleaseDataFlag(itkDataObject self) -> bool const &"""
        return _ITKCommonBasePython.itkDataObject_GetReleaseDataFlag(self)


    def ReleaseDataFlagOn(self) -> "void":
        """ReleaseDataFlagOn(itkDataObject self)"""
        return _ITKCommonBasePython.itkDataObject_ReleaseDataFlagOn(self)


    def ReleaseDataFlagOff(self) -> "void":
        """ReleaseDataFlagOff(itkDataObject self)"""
        return _ITKCommonBasePython.itkDataObject_ReleaseDataFlagOff(self)


    def SetGlobalReleaseDataFlag(val: 'bool') -> "void":
        """SetGlobalReleaseDataFlag(bool val)"""
        return _ITKCommonBasePython.itkDataObject_SetGlobalReleaseDataFlag(val)

    SetGlobalReleaseDataFlag = staticmethod(SetGlobalReleaseDataFlag)

    def GetGlobalReleaseDataFlag() -> "bool":
        """GetGlobalReleaseDataFlag() -> bool"""
        return _ITKCommonBasePython.itkDataObject_GetGlobalReleaseDataFlag()

    GetGlobalReleaseDataFlag = staticmethod(GetGlobalReleaseDataFlag)

    def GlobalReleaseDataFlagOn() -> "void":
        """GlobalReleaseDataFlagOn()"""
        return _ITKCommonBasePython.itkDataObject_GlobalReleaseDataFlagOn()

    GlobalReleaseDataFlagOn = staticmethod(GlobalReleaseDataFlagOn)

    def GlobalReleaseDataFlagOff() -> "void":
        """GlobalReleaseDataFlagOff()"""
        return _ITKCommonBasePython.itkDataObject_GlobalReleaseDataFlagOff()

    GlobalReleaseDataFlagOff = staticmethod(GlobalReleaseDataFlagOff)

    def ReleaseData(self) -> "void":
        """ReleaseData(itkDataObject self)"""
        return _ITKCommonBasePython.itkDataObject_ReleaseData(self)


    def ShouldIReleaseData(self) -> "bool":
        """ShouldIReleaseData(itkDataObject self) -> bool"""
        return _ITKCommonBasePython.itkDataObject_ShouldIReleaseData(self)


    def GetDataReleased(self) -> "bool":
        """GetDataReleased(itkDataObject self) -> bool"""
        return _ITKCommonBasePython.itkDataObject_GetDataReleased(self)


    def Update(self) -> "void":
        """Update(itkDataObject self)"""
        return _ITKCommonBasePython.itkDataObject_Update(self)


    def UpdateOutputInformation(self) -> "void":
        """UpdateOutputInformation(itkDataObject self)"""
        return _ITKCommonBasePython.itkDataObject_UpdateOutputInformation(self)


    def PropagateRequestedRegion(self) -> "void":
        """PropagateRequestedRegion(itkDataObject self)"""
        return _ITKCommonBasePython.itkDataObject_PropagateRequestedRegion(self)


    def UpdateOutputData(self) -> "void":
        """UpdateOutputData(itkDataObject self)"""
        return _ITKCommonBasePython.itkDataObject_UpdateOutputData(self)


    def ResetPipeline(self) -> "void":
        """ResetPipeline(itkDataObject self)"""
        return _ITKCommonBasePython.itkDataObject_ResetPipeline(self)


    def SetPipelineMTime(self, time: 'unsigned long long') -> "void":
        """SetPipelineMTime(itkDataObject self, unsigned long long time)"""
        return _ITKCommonBasePython.itkDataObject_SetPipelineMTime(self, time)


    def GetPipelineMTime(self) -> "unsigned long long const &":
        """GetPipelineMTime(itkDataObject self) -> unsigned long long const &"""
        return _ITKCommonBasePython.itkDataObject_GetPipelineMTime(self)


    def GetUpdateMTime(self) -> "unsigned long long":
        """GetUpdateMTime(itkDataObject self) -> unsigned long long"""
        return _ITKCommonBasePython.itkDataObject_GetUpdateMTime(self)


    def SetRealTimeStamp(self, _arg: 'itkRealTimeStamp') -> "void":
        """SetRealTimeStamp(itkDataObject self, itkRealTimeStamp _arg)"""
        return _ITKCommonBasePython.itkDataObject_SetRealTimeStamp(self, _arg)


    def GetRealTimeStamp(self) -> "itkRealTimeStamp const &":
        """GetRealTimeStamp(itkDataObject self) -> itkRealTimeStamp"""
        return _ITKCommonBasePython.itkDataObject_GetRealTimeStamp(self)


    def PrepareForNewData(self) -> "void":
        """PrepareForNewData(itkDataObject self)"""
        return _ITKCommonBasePython.itkDataObject_PrepareForNewData(self)


    def DataHasBeenGenerated(self) -> "void":
        """DataHasBeenGenerated(itkDataObject self)"""
        return _ITKCommonBasePython.itkDataObject_DataHasBeenGenerated(self)


    def SetRequestedRegionToLargestPossibleRegion(self) -> "void":
        """SetRequestedRegionToLargestPossibleRegion(itkDataObject self)"""
        return _ITKCommonBasePython.itkDataObject_SetRequestedRegionToLargestPossibleRegion(self)


    def RequestedRegionIsOutsideOfTheBufferedRegion(self) -> "bool":
        """RequestedRegionIsOutsideOfTheBufferedRegion(itkDataObject self) -> bool"""
        return _ITKCommonBasePython.itkDataObject_RequestedRegionIsOutsideOfTheBufferedRegion(self)


    def VerifyRequestedRegion(self) -> "bool":
        """VerifyRequestedRegion(itkDataObject self) -> bool"""
        return _ITKCommonBasePython.itkDataObject_VerifyRequestedRegion(self)


    def CopyInformation(self, arg0: 'itkDataObject') -> "void":
        """CopyInformation(itkDataObject self, itkDataObject arg0)"""
        return _ITKCommonBasePython.itkDataObject_CopyInformation(self, arg0)


    def SetRequestedRegion(self, arg0: 'itkDataObject') -> "void":
        """SetRequestedRegion(itkDataObject self, itkDataObject arg0)"""
        return _ITKCommonBasePython.itkDataObject_SetRequestedRegion(self, arg0)


    def Graft(self, arg0: 'itkDataObject') -> "void":
        """Graft(itkDataObject self, itkDataObject arg0)"""
        return _ITKCommonBasePython.itkDataObject_Graft(self, arg0)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkDataObject

    def cast(obj: 'itkLightObject') -> "itkDataObject *":
        """cast(itkLightObject obj) -> itkDataObject"""
        return _ITKCommonBasePython.itkDataObject_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDataObject

        Create a new object of the class itkDataObject and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObject.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDataObject.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDataObject.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDataObject.DisconnectPipeline = new_instancemethod(_ITKCommonBasePython.itkDataObject_DisconnectPipeline, None, itkDataObject)
itkDataObject.GetSource = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetSource, None, itkDataObject)
itkDataObject.GetSourceOutputName = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetSourceOutputName, None, itkDataObject)
itkDataObject.GetSourceOutputIndex = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetSourceOutputIndex, None, itkDataObject)
itkDataObject.Initialize = new_instancemethod(_ITKCommonBasePython.itkDataObject_Initialize, None, itkDataObject)
itkDataObject.SetReleaseDataFlag = new_instancemethod(_ITKCommonBasePython.itkDataObject_SetReleaseDataFlag, None, itkDataObject)
itkDataObject.GetReleaseDataFlag = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetReleaseDataFlag, None, itkDataObject)
itkDataObject.ReleaseDataFlagOn = new_instancemethod(_ITKCommonBasePython.itkDataObject_ReleaseDataFlagOn, None, itkDataObject)
itkDataObject.ReleaseDataFlagOff = new_instancemethod(_ITKCommonBasePython.itkDataObject_ReleaseDataFlagOff, None, itkDataObject)
itkDataObject.ReleaseData = new_instancemethod(_ITKCommonBasePython.itkDataObject_ReleaseData, None, itkDataObject)
itkDataObject.ShouldIReleaseData = new_instancemethod(_ITKCommonBasePython.itkDataObject_ShouldIReleaseData, None, itkDataObject)
itkDataObject.GetDataReleased = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetDataReleased, None, itkDataObject)
itkDataObject.Update = new_instancemethod(_ITKCommonBasePython.itkDataObject_Update, None, itkDataObject)
itkDataObject.UpdateOutputInformation = new_instancemethod(_ITKCommonBasePython.itkDataObject_UpdateOutputInformation, None, itkDataObject)
itkDataObject.PropagateRequestedRegion = new_instancemethod(_ITKCommonBasePython.itkDataObject_PropagateRequestedRegion, None, itkDataObject)
itkDataObject.UpdateOutputData = new_instancemethod(_ITKCommonBasePython.itkDataObject_UpdateOutputData, None, itkDataObject)
itkDataObject.ResetPipeline = new_instancemethod(_ITKCommonBasePython.itkDataObject_ResetPipeline, None, itkDataObject)
itkDataObject.SetPipelineMTime = new_instancemethod(_ITKCommonBasePython.itkDataObject_SetPipelineMTime, None, itkDataObject)
itkDataObject.GetPipelineMTime = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetPipelineMTime, None, itkDataObject)
itkDataObject.GetUpdateMTime = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetUpdateMTime, None, itkDataObject)
itkDataObject.SetRealTimeStamp = new_instancemethod(_ITKCommonBasePython.itkDataObject_SetRealTimeStamp, None, itkDataObject)
itkDataObject.GetRealTimeStamp = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetRealTimeStamp, None, itkDataObject)
itkDataObject.PrepareForNewData = new_instancemethod(_ITKCommonBasePython.itkDataObject_PrepareForNewData, None, itkDataObject)
itkDataObject.DataHasBeenGenerated = new_instancemethod(_ITKCommonBasePython.itkDataObject_DataHasBeenGenerated, None, itkDataObject)
itkDataObject.SetRequestedRegionToLargestPossibleRegion = new_instancemethod(_ITKCommonBasePython.itkDataObject_SetRequestedRegionToLargestPossibleRegion, None, itkDataObject)
itkDataObject.RequestedRegionIsOutsideOfTheBufferedRegion = new_instancemethod(_ITKCommonBasePython.itkDataObject_RequestedRegionIsOutsideOfTheBufferedRegion, None, itkDataObject)
itkDataObject.VerifyRequestedRegion = new_instancemethod(_ITKCommonBasePython.itkDataObject_VerifyRequestedRegion, None, itkDataObject)
itkDataObject.CopyInformation = new_instancemethod(_ITKCommonBasePython.itkDataObject_CopyInformation, None, itkDataObject)
itkDataObject.SetRequestedRegion = new_instancemethod(_ITKCommonBasePython.itkDataObject_SetRequestedRegion, None, itkDataObject)
itkDataObject.Graft = new_instancemethod(_ITKCommonBasePython.itkDataObject_Graft, None, itkDataObject)
itkDataObject_swigregister = _ITKCommonBasePython.itkDataObject_swigregister
itkDataObject_swigregister(itkDataObject)

def itkDataObject_SetGlobalReleaseDataFlag(val: 'bool') -> "void":
    """itkDataObject_SetGlobalReleaseDataFlag(bool val)"""
    return _ITKCommonBasePython.itkDataObject_SetGlobalReleaseDataFlag(val)

def itkDataObject_GetGlobalReleaseDataFlag() -> "bool":
    """itkDataObject_GetGlobalReleaseDataFlag() -> bool"""
    return _ITKCommonBasePython.itkDataObject_GetGlobalReleaseDataFlag()

def itkDataObject_GlobalReleaseDataFlagOn() -> "void":
    """itkDataObject_GlobalReleaseDataFlagOn()"""
    return _ITKCommonBasePython.itkDataObject_GlobalReleaseDataFlagOn()

def itkDataObject_GlobalReleaseDataFlagOff() -> "void":
    """itkDataObject_GlobalReleaseDataFlagOff()"""
    return _ITKCommonBasePython.itkDataObject_GlobalReleaseDataFlagOff()

def itkDataObject_cast(obj: 'itkLightObject') -> "itkDataObject *":
    """itkDataObject_cast(itkLightObject obj) -> itkDataObject"""
    return _ITKCommonBasePython.itkDataObject_cast(obj)

class itkDeleteEvent(itkAnyEvent):
    """Proxy of C++ itkDeleteEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkDeleteEvent self) -> itkDeleteEvent
        __init__(itkDeleteEvent self, itkDeleteEvent s) -> itkDeleteEvent
        """
        _ITKCommonBasePython.itkDeleteEvent_swiginit(self, _ITKCommonBasePython.new_itkDeleteEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkDeleteEvent
itkDeleteEvent_swigregister = _ITKCommonBasePython.itkDeleteEvent_swigregister
itkDeleteEvent_swigregister(itkDeleteEvent)

class itkDirectory(itkObject):
    """Proxy of C++ itkDirectory class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectory_Pointer":
        """__New_orig__() -> itkDirectory_Pointer"""
        return _ITKCommonBasePython.itkDirectory___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Load(self, dir: 'char const *') -> "bool":
        """Load(itkDirectory self, char const * dir) -> bool"""
        return _ITKCommonBasePython.itkDirectory_Load(self, dir)


    def GetNumberOfFiles(self) -> "unsigned long long":
        """GetNumberOfFiles(itkDirectory self) -> unsigned long long"""
        return _ITKCommonBasePython.itkDirectory_GetNumberOfFiles(self)


    def GetFile(self, index: 'unsigned int') -> "char const *":
        """GetFile(itkDirectory self, unsigned int index) -> char const *"""
        return _ITKCommonBasePython.itkDirectory_GetFile(self, index)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkDirectory

    def cast(obj: 'itkLightObject') -> "itkDirectory *":
        """cast(itkLightObject obj) -> itkDirectory"""
        return _ITKCommonBasePython.itkDirectory_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectory

        Create a new object of the class itkDirectory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectory.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectory.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectory.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectory.Load = new_instancemethod(_ITKCommonBasePython.itkDirectory_Load, None, itkDirectory)
itkDirectory.GetNumberOfFiles = new_instancemethod(_ITKCommonBasePython.itkDirectory_GetNumberOfFiles, None, itkDirectory)
itkDirectory.GetFile = new_instancemethod(_ITKCommonBasePython.itkDirectory_GetFile, None, itkDirectory)
itkDirectory_swigregister = _ITKCommonBasePython.itkDirectory_swigregister
itkDirectory_swigregister(itkDirectory)

def itkDirectory___New_orig__() -> "itkDirectory_Pointer":
    """itkDirectory___New_orig__() -> itkDirectory_Pointer"""
    return _ITKCommonBasePython.itkDirectory___New_orig__()

def itkDirectory_cast(obj: 'itkLightObject') -> "itkDirectory *":
    """itkDirectory_cast(itkLightObject obj) -> itkDirectory"""
    return _ITKCommonBasePython.itkDirectory_cast(obj)

class itkDynamicLoader(itkObject):
    """Proxy of C++ itkDynamicLoader class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDynamicLoader_Pointer":
        """__New_orig__() -> itkDynamicLoader_Pointer"""
        return _ITKCommonBasePython.itkDynamicLoader___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDynamicLoader_Pointer":
        """Clone(itkDynamicLoader self) -> itkDynamicLoader_Pointer"""
        return _ITKCommonBasePython.itkDynamicLoader_Clone(self)


    def OpenLibrary(arg0: 'char const *') -> "HINSTANCE__ *":
        """OpenLibrary(char const * arg0) -> HINSTANCE__ *"""
        return _ITKCommonBasePython.itkDynamicLoader_OpenLibrary(arg0)

    OpenLibrary = staticmethod(OpenLibrary)

    def CloseLibrary(arg0: 'HINSTANCE__ *') -> "int":
        """CloseLibrary(HINSTANCE__ * arg0) -> int"""
        return _ITKCommonBasePython.itkDynamicLoader_CloseLibrary(arg0)

    CloseLibrary = staticmethod(CloseLibrary)

    def GetSymbolAddress(arg0: 'HINSTANCE__ *', arg1: 'char const *') -> "void *":
        """GetSymbolAddress(HINSTANCE__ * arg0, char const * arg1) -> void *"""
        return _ITKCommonBasePython.itkDynamicLoader_GetSymbolAddress(arg0, arg1)

    GetSymbolAddress = staticmethod(GetSymbolAddress)

    def LibPrefix() -> "char const *":
        """LibPrefix() -> char const *"""
        return _ITKCommonBasePython.itkDynamicLoader_LibPrefix()

    LibPrefix = staticmethod(LibPrefix)

    def LibExtension() -> "char const *":
        """LibExtension() -> char const *"""
        return _ITKCommonBasePython.itkDynamicLoader_LibExtension()

    LibExtension = staticmethod(LibExtension)

    def LastError() -> "char const *":
        """LastError() -> char const *"""
        return _ITKCommonBasePython.itkDynamicLoader_LastError()

    LastError = staticmethod(LastError)
    __swig_destroy__ = _ITKCommonBasePython.delete_itkDynamicLoader

    def cast(obj: 'itkLightObject') -> "itkDynamicLoader *":
        """cast(itkLightObject obj) -> itkDynamicLoader"""
        return _ITKCommonBasePython.itkDynamicLoader_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDynamicLoader

        Create a new object of the class itkDynamicLoader and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDynamicLoader.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDynamicLoader.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDynamicLoader.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDynamicLoader.Clone = new_instancemethod(_ITKCommonBasePython.itkDynamicLoader_Clone, None, itkDynamicLoader)
itkDynamicLoader_swigregister = _ITKCommonBasePython.itkDynamicLoader_swigregister
itkDynamicLoader_swigregister(itkDynamicLoader)

def itkDynamicLoader___New_orig__() -> "itkDynamicLoader_Pointer":
    """itkDynamicLoader___New_orig__() -> itkDynamicLoader_Pointer"""
    return _ITKCommonBasePython.itkDynamicLoader___New_orig__()

def itkDynamicLoader_OpenLibrary(arg0: 'char const *') -> "HINSTANCE__ *":
    """itkDynamicLoader_OpenLibrary(char const * arg0) -> HINSTANCE__ *"""
    return _ITKCommonBasePython.itkDynamicLoader_OpenLibrary(arg0)

def itkDynamicLoader_CloseLibrary(arg0: 'HINSTANCE__ *') -> "int":
    """itkDynamicLoader_CloseLibrary(HINSTANCE__ * arg0) -> int"""
    return _ITKCommonBasePython.itkDynamicLoader_CloseLibrary(arg0)

def itkDynamicLoader_GetSymbolAddress(arg0: 'HINSTANCE__ *', arg1: 'char const *') -> "void *":
    """itkDynamicLoader_GetSymbolAddress(HINSTANCE__ * arg0, char const * arg1) -> void *"""
    return _ITKCommonBasePython.itkDynamicLoader_GetSymbolAddress(arg0, arg1)

def itkDynamicLoader_LibPrefix() -> "char const *":
    """itkDynamicLoader_LibPrefix() -> char const *"""
    return _ITKCommonBasePython.itkDynamicLoader_LibPrefix()

def itkDynamicLoader_LibExtension() -> "char const *":
    """itkDynamicLoader_LibExtension() -> char const *"""
    return _ITKCommonBasePython.itkDynamicLoader_LibExtension()

def itkDynamicLoader_LastError() -> "char const *":
    """itkDynamicLoader_LastError() -> char const *"""
    return _ITKCommonBasePython.itkDynamicLoader_LastError()

def itkDynamicLoader_cast(obj: 'itkLightObject') -> "itkDynamicLoader *":
    """itkDynamicLoader_cast(itkLightObject obj) -> itkDynamicLoader"""
    return _ITKCommonBasePython.itkDynamicLoader_cast(obj)

class itkEndEvent(itkAnyEvent):
    """Proxy of C++ itkEndEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkEndEvent self) -> itkEndEvent
        __init__(itkEndEvent self, itkEndEvent s) -> itkEndEvent
        """
        _ITKCommonBasePython.itkEndEvent_swiginit(self, _ITKCommonBasePython.new_itkEndEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkEndEvent
itkEndEvent_swigregister = _ITKCommonBasePython.itkEndEvent_swigregister
itkEndEvent_swigregister(itkEndEvent)

class itkExitEvent(itkAnyEvent):
    """Proxy of C++ itkExitEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkExitEvent self) -> itkExitEvent
        __init__(itkExitEvent self, itkExitEvent s) -> itkExitEvent
        """
        _ITKCommonBasePython.itkExitEvent_swiginit(self, _ITKCommonBasePython.new_itkExitEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkExitEvent
itkExitEvent_swigregister = _ITKCommonBasePython.itkExitEvent_swigregister
itkExitEvent_swigregister(itkExitEvent)

class itkImageIORegion(itkRegion):
    """Proxy of C++ itkImageIORegion class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetImageDimension(self) -> "unsigned int":
        """GetImageDimension(itkImageIORegion self) -> unsigned int"""
        return _ITKCommonBasePython.itkImageIORegion_GetImageDimension(self)


    def GetRegionDimension(self) -> "unsigned int":
        """GetRegionDimension(itkImageIORegion self) -> unsigned int"""
        return _ITKCommonBasePython.itkImageIORegion_GetRegionDimension(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkImageIORegion

    def __init__(self, *args):
        """
        __init__(itkImageIORegion self, unsigned int dimension) -> itkImageIORegion
        __init__(itkImageIORegion self) -> itkImageIORegion
        __init__(itkImageIORegion self, itkImageIORegion region) -> itkImageIORegion
        """
        _ITKCommonBasePython.itkImageIORegion_swiginit(self, _ITKCommonBasePython.new_itkImageIORegion(*args))

    def GetModifiableIndex(self) -> "std::vector< long long,std::allocator< long long > > &":
        """GetModifiableIndex(itkImageIORegion self) -> std::vector< long long,std::allocator< long long > > &"""
        return _ITKCommonBasePython.itkImageIORegion_GetModifiableIndex(self)


    def GetModifiableSize(self) -> "std::vector< unsigned long long,std::allocator< unsigned long long > > &":
        """GetModifiableSize(itkImageIORegion self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > &"""
        return _ITKCommonBasePython.itkImageIORegion_GetModifiableSize(self)


    def GetSize(self, *args) -> "unsigned long long":
        """
        GetSize(itkImageIORegion self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > const
        GetSize(itkImageIORegion self, unsigned long i) -> unsigned long long
        """
        return _ITKCommonBasePython.itkImageIORegion_GetSize(self, *args)


    def GetIndex(self, *args) -> "long long":
        """
        GetIndex(itkImageIORegion self) -> std::vector< long long,std::allocator< long long > > const
        GetIndex(itkImageIORegion self, unsigned long i) -> long long
        """
        return _ITKCommonBasePython.itkImageIORegion_GetIndex(self, *args)


    def SetSize(self, *args) -> "void":
        """
        SetSize(itkImageIORegion self, std::vector< unsigned long long,std::allocator< unsigned long long > > const & size)
        SetSize(itkImageIORegion self, unsigned long const i, unsigned long long size)
        """
        return _ITKCommonBasePython.itkImageIORegion_SetSize(self, *args)


    def SetIndex(self, *args) -> "void":
        """
        SetIndex(itkImageIORegion self, std::vector< long long,std::allocator< long long > > const & index)
        SetIndex(itkImageIORegion self, unsigned long const i, long long idx)
        """
        return _ITKCommonBasePython.itkImageIORegion_SetIndex(self, *args)


    def __eq__(self, region: 'itkImageIORegion') -> "bool":
        """__eq__(itkImageIORegion self, itkImageIORegion region) -> bool"""
        return _ITKCommonBasePython.itkImageIORegion___eq__(self, region)


    def __ne__(self, region: 'itkImageIORegion') -> "bool":
        """__ne__(itkImageIORegion self, itkImageIORegion region) -> bool"""
        return _ITKCommonBasePython.itkImageIORegion___ne__(self, region)


    def IsInside(self, *args) -> "bool":
        """
        IsInside(itkImageIORegion self, std::vector< long long,std::allocator< long long > > const & index) -> bool
        IsInside(itkImageIORegion self, itkImageIORegion region) -> bool
        """
        return _ITKCommonBasePython.itkImageIORegion_IsInside(self, *args)


    def GetNumberOfPixels(self) -> "unsigned long long":
        """GetNumberOfPixels(itkImageIORegion self) -> unsigned long long"""
        return _ITKCommonBasePython.itkImageIORegion_GetNumberOfPixels(self)

itkImageIORegion.GetImageDimension = new_instancemethod(_ITKCommonBasePython.itkImageIORegion_GetImageDimension, None, itkImageIORegion)
itkImageIORegion.GetRegionDimension = new_instancemethod(_ITKCommonBasePython.itkImageIORegion_GetRegionDimension, None, itkImageIORegion)
itkImageIORegion.GetModifiableIndex = new_instancemethod(_ITKCommonBasePython.itkImageIORegion_GetModifiableIndex, None, itkImageIORegion)
itkImageIORegion.GetModifiableSize = new_instancemethod(_ITKCommonBasePython.itkImageIORegion_GetModifiableSize, None, itkImageIORegion)
itkImageIORegion.GetSize = new_instancemethod(_ITKCommonBasePython.itkImageIORegion_GetSize, None, itkImageIORegion)
itkImageIORegion.GetIndex = new_instancemethod(_ITKCommonBasePython.itkImageIORegion_GetIndex, None, itkImageIORegion)
itkImageIORegion.SetSize = new_instancemethod(_ITKCommonBasePython.itkImageIORegion_SetSize, None, itkImageIORegion)
itkImageIORegion.SetIndex = new_instancemethod(_ITKCommonBasePython.itkImageIORegion_SetIndex, None, itkImageIORegion)
itkImageIORegion.__eq__ = new_instancemethod(_ITKCommonBasePython.itkImageIORegion___eq__, None, itkImageIORegion)
itkImageIORegion.__ne__ = new_instancemethod(_ITKCommonBasePython.itkImageIORegion___ne__, None, itkImageIORegion)
itkImageIORegion.IsInside = new_instancemethod(_ITKCommonBasePython.itkImageIORegion_IsInside, None, itkImageIORegion)
itkImageIORegion.GetNumberOfPixels = new_instancemethod(_ITKCommonBasePython.itkImageIORegion_GetNumberOfPixels, None, itkImageIORegion)
itkImageIORegion_swigregister = _ITKCommonBasePython.itkImageIORegion_swigregister
itkImageIORegion_swigregister(itkImageIORegion)

class itkImageRegionSplitterBase(itkObject):
    """Proxy of C++ itkImageRegionSplitterBase class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNumberOfSplits(self, region: 'itkImageIORegion', requestedNumber: 'unsigned int') -> "unsigned int":
        """GetNumberOfSplits(itkImageRegionSplitterBase self, itkImageIORegion region, unsigned int requestedNumber) -> unsigned int"""
        return _ITKCommonBasePython.itkImageRegionSplitterBase_GetNumberOfSplits(self, region, requestedNumber)


    def GetSplit(self, i: 'unsigned int', numberOfPieces: 'unsigned int', region: 'itkImageIORegion') -> "unsigned int":
        """GetSplit(itkImageRegionSplitterBase self, unsigned int i, unsigned int numberOfPieces, itkImageIORegion region) -> unsigned int"""
        return _ITKCommonBasePython.itkImageRegionSplitterBase_GetSplit(self, i, numberOfPieces, region)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkImageRegionSplitterBase

    def cast(obj: 'itkLightObject') -> "itkImageRegionSplitterBase *":
        """cast(itkLightObject obj) -> itkImageRegionSplitterBase"""
        return _ITKCommonBasePython.itkImageRegionSplitterBase_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegionSplitterBase

        Create a new object of the class itkImageRegionSplitterBase and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegionSplitterBase.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegionSplitterBase.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegionSplitterBase.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegionSplitterBase.GetNumberOfSplits = new_instancemethod(_ITKCommonBasePython.itkImageRegionSplitterBase_GetNumberOfSplits, None, itkImageRegionSplitterBase)
itkImageRegionSplitterBase.GetSplit = new_instancemethod(_ITKCommonBasePython.itkImageRegionSplitterBase_GetSplit, None, itkImageRegionSplitterBase)
itkImageRegionSplitterBase_swigregister = _ITKCommonBasePython.itkImageRegionSplitterBase_swigregister
itkImageRegionSplitterBase_swigregister(itkImageRegionSplitterBase)

def itkImageRegionSplitterBase_cast(obj: 'itkLightObject') -> "itkImageRegionSplitterBase *":
    """itkImageRegionSplitterBase_cast(itkLightObject obj) -> itkImageRegionSplitterBase"""
    return _ITKCommonBasePython.itkImageRegionSplitterBase_cast(obj)

class itkImageRegionSplitterDirection(itkImageRegionSplitterBase):
    """Proxy of C++ itkImageRegionSplitterDirection class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRegionSplitterDirection_Pointer":
        """__New_orig__() -> itkImageRegionSplitterDirection_Pointer"""
        return _ITKCommonBasePython.itkImageRegionSplitterDirection___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRegionSplitterDirection_Pointer":
        """Clone(itkImageRegionSplitterDirection self) -> itkImageRegionSplitterDirection_Pointer"""
        return _ITKCommonBasePython.itkImageRegionSplitterDirection_Clone(self)


    def GetDirection(self) -> "unsigned int":
        """GetDirection(itkImageRegionSplitterDirection self) -> unsigned int"""
        return _ITKCommonBasePython.itkImageRegionSplitterDirection_GetDirection(self)


    def SetDirection(self, _arg: 'unsigned int const') -> "void":
        """SetDirection(itkImageRegionSplitterDirection self, unsigned int const _arg)"""
        return _ITKCommonBasePython.itkImageRegionSplitterDirection_SetDirection(self, _arg)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkImageRegionSplitterDirection

    def cast(obj: 'itkLightObject') -> "itkImageRegionSplitterDirection *":
        """cast(itkLightObject obj) -> itkImageRegionSplitterDirection"""
        return _ITKCommonBasePython.itkImageRegionSplitterDirection_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageRegionSplitterDirection

        Create a new object of the class itkImageRegionSplitterDirection and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegionSplitterDirection.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRegionSplitterDirection.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRegionSplitterDirection.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRegionSplitterDirection.Clone = new_instancemethod(_ITKCommonBasePython.itkImageRegionSplitterDirection_Clone, None, itkImageRegionSplitterDirection)
itkImageRegionSplitterDirection.GetDirection = new_instancemethod(_ITKCommonBasePython.itkImageRegionSplitterDirection_GetDirection, None, itkImageRegionSplitterDirection)
itkImageRegionSplitterDirection.SetDirection = new_instancemethod(_ITKCommonBasePython.itkImageRegionSplitterDirection_SetDirection, None, itkImageRegionSplitterDirection)
itkImageRegionSplitterDirection_swigregister = _ITKCommonBasePython.itkImageRegionSplitterDirection_swigregister
itkImageRegionSplitterDirection_swigregister(itkImageRegionSplitterDirection)

def itkImageRegionSplitterDirection___New_orig__() -> "itkImageRegionSplitterDirection_Pointer":
    """itkImageRegionSplitterDirection___New_orig__() -> itkImageRegionSplitterDirection_Pointer"""
    return _ITKCommonBasePython.itkImageRegionSplitterDirection___New_orig__()

def itkImageRegionSplitterDirection_cast(obj: 'itkLightObject') -> "itkImageRegionSplitterDirection *":
    """itkImageRegionSplitterDirection_cast(itkLightObject obj) -> itkImageRegionSplitterDirection"""
    return _ITKCommonBasePython.itkImageRegionSplitterDirection_cast(obj)

class itkInitializeEvent(itkAnyEvent):
    """Proxy of C++ itkInitializeEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkInitializeEvent self) -> itkInitializeEvent
        __init__(itkInitializeEvent self, itkInitializeEvent s) -> itkInitializeEvent
        """
        _ITKCommonBasePython.itkInitializeEvent_swiginit(self, _ITKCommonBasePython.new_itkInitializeEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkInitializeEvent
itkInitializeEvent_swigregister = _ITKCommonBasePython.itkInitializeEvent_swigregister
itkInitializeEvent_swigregister(itkInitializeEvent)

class itkIterationEvent(itkAnyEvent):
    """Proxy of C++ itkIterationEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkIterationEvent self) -> itkIterationEvent
        __init__(itkIterationEvent self, itkIterationEvent s) -> itkIterationEvent
        """
        _ITKCommonBasePython.itkIterationEvent_swiginit(self, _ITKCommonBasePython.new_itkIterationEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkIterationEvent
itkIterationEvent_swigregister = _ITKCommonBasePython.itkIterationEvent_swigregister
itkIterationEvent_swigregister(itkIterationEvent)

class itkLightProcessObject(itkObject):
    """Proxy of C++ itkLightProcessObject class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLightProcessObject_Pointer":
        """__New_orig__() -> itkLightProcessObject_Pointer"""
        return _ITKCommonBasePython.itkLightProcessObject___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLightProcessObject_Pointer":
        """Clone(itkLightProcessObject self) -> itkLightProcessObject_Pointer"""
        return _ITKCommonBasePython.itkLightProcessObject_Clone(self)


    def SetAbortGenerateData(self, _arg: 'bool const') -> "void":
        """SetAbortGenerateData(itkLightProcessObject self, bool const _arg)"""
        return _ITKCommonBasePython.itkLightProcessObject_SetAbortGenerateData(self, _arg)


    def GetAbortGenerateData(self) -> "bool const &":
        """GetAbortGenerateData(itkLightProcessObject self) -> bool const &"""
        return _ITKCommonBasePython.itkLightProcessObject_GetAbortGenerateData(self)


    def AbortGenerateDataOn(self) -> "void":
        """AbortGenerateDataOn(itkLightProcessObject self)"""
        return _ITKCommonBasePython.itkLightProcessObject_AbortGenerateDataOn(self)


    def AbortGenerateDataOff(self) -> "void":
        """AbortGenerateDataOff(itkLightProcessObject self)"""
        return _ITKCommonBasePython.itkLightProcessObject_AbortGenerateDataOff(self)


    def SetProgress(self, _arg: 'float') -> "void":
        """SetProgress(itkLightProcessObject self, float _arg)"""
        return _ITKCommonBasePython.itkLightProcessObject_SetProgress(self, _arg)


    def GetProgress(self) -> "float const &":
        """GetProgress(itkLightProcessObject self) -> float const &"""
        return _ITKCommonBasePython.itkLightProcessObject_GetProgress(self)


    def UpdateProgress(self, amount: 'float') -> "void":
        """UpdateProgress(itkLightProcessObject self, float amount)"""
        return _ITKCommonBasePython.itkLightProcessObject_UpdateProgress(self, amount)


    def UpdateOutputData(self) -> "void":
        """UpdateOutputData(itkLightProcessObject self)"""
        return _ITKCommonBasePython.itkLightProcessObject_UpdateOutputData(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkLightProcessObject

    def cast(obj: 'itkLightObject') -> "itkLightProcessObject *":
        """cast(itkLightObject obj) -> itkLightProcessObject"""
        return _ITKCommonBasePython.itkLightProcessObject_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLightProcessObject

        Create a new object of the class itkLightProcessObject and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLightProcessObject.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLightProcessObject.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLightProcessObject.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLightProcessObject.Clone = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_Clone, None, itkLightProcessObject)
itkLightProcessObject.SetAbortGenerateData = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_SetAbortGenerateData, None, itkLightProcessObject)
itkLightProcessObject.GetAbortGenerateData = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_GetAbortGenerateData, None, itkLightProcessObject)
itkLightProcessObject.AbortGenerateDataOn = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_AbortGenerateDataOn, None, itkLightProcessObject)
itkLightProcessObject.AbortGenerateDataOff = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_AbortGenerateDataOff, None, itkLightProcessObject)
itkLightProcessObject.SetProgress = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_SetProgress, None, itkLightProcessObject)
itkLightProcessObject.GetProgress = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_GetProgress, None, itkLightProcessObject)
itkLightProcessObject.UpdateProgress = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_UpdateProgress, None, itkLightProcessObject)
itkLightProcessObject.UpdateOutputData = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_UpdateOutputData, None, itkLightProcessObject)
itkLightProcessObject_swigregister = _ITKCommonBasePython.itkLightProcessObject_swigregister
itkLightProcessObject_swigregister(itkLightProcessObject)

def itkLightProcessObject___New_orig__() -> "itkLightProcessObject_Pointer":
    """itkLightProcessObject___New_orig__() -> itkLightProcessObject_Pointer"""
    return _ITKCommonBasePython.itkLightProcessObject___New_orig__()

def itkLightProcessObject_cast(obj: 'itkLightObject') -> "itkLightProcessObject *":
    """itkLightProcessObject_cast(itkLightObject obj) -> itkLightProcessObject"""
    return _ITKCommonBasePython.itkLightProcessObject_cast(obj)

class itkMersenneTwisterRandomVariateGenerator(itkRandomVariateGeneratorBase):
    """Proxy of C++ itkMersenneTwisterRandomVariateGenerator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMersenneTwisterRandomVariateGenerator_Pointer":
        """__New_orig__() -> itkMersenneTwisterRandomVariateGenerator_Pointer"""
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def GetInstance() -> "itkMersenneTwisterRandomVariateGenerator_Pointer":
        """GetInstance() -> itkMersenneTwisterRandomVariateGenerator_Pointer"""
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetInstance()

    GetInstance = staticmethod(GetInstance)

    def Initialize(self, *args) -> "void":
        """
        Initialize(itkMersenneTwisterRandomVariateGenerator self, unsigned int const oneSeed)
        Initialize(itkMersenneTwisterRandomVariateGenerator self)
        """
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_Initialize(self, *args)


    def GetVariateWithClosedRange(self, *args) -> "double":
        """
        GetVariateWithClosedRange(itkMersenneTwisterRandomVariateGenerator self) -> double
        GetVariateWithClosedRange(itkMersenneTwisterRandomVariateGenerator self, double const & n) -> double
        """
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetVariateWithClosedRange(self, *args)


    def GetVariateWithOpenUpperRange(self, *args) -> "double":
        """
        GetVariateWithOpenUpperRange(itkMersenneTwisterRandomVariateGenerator self) -> double
        GetVariateWithOpenUpperRange(itkMersenneTwisterRandomVariateGenerator self, double const & n) -> double
        """
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetVariateWithOpenUpperRange(self, *args)


    def GetVariateWithOpenRange(self, *args) -> "double":
        """
        GetVariateWithOpenRange(itkMersenneTwisterRandomVariateGenerator self) -> double
        GetVariateWithOpenRange(itkMersenneTwisterRandomVariateGenerator self, double const & n) -> double
        """
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetVariateWithOpenRange(self, *args)


    def GetIntegerVariate(self, *args) -> "unsigned int":
        """
        GetIntegerVariate(itkMersenneTwisterRandomVariateGenerator self) -> unsigned int
        GetIntegerVariate(itkMersenneTwisterRandomVariateGenerator self, unsigned int const & n) -> unsigned int
        """
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetIntegerVariate(self, *args)


    def Get53BitVariate(self) -> "double":
        """Get53BitVariate(itkMersenneTwisterRandomVariateGenerator self) -> double"""
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_Get53BitVariate(self)


    def GetNormalVariate(self, mean: 'double const &'=0., variance: 'double const &'=1.) -> "double":
        """
        GetNormalVariate(itkMersenneTwisterRandomVariateGenerator self, double const & mean=0., double const & variance=1.) -> double
        GetNormalVariate(itkMersenneTwisterRandomVariateGenerator self, double const & mean=0.) -> double
        GetNormalVariate(itkMersenneTwisterRandomVariateGenerator self) -> double
        """
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetNormalVariate(self, mean, variance)


    def GetUniformVariate(self, a: 'double const &', b: 'double const &') -> "double":
        """GetUniformVariate(itkMersenneTwisterRandomVariateGenerator self, double const & a, double const & b) -> double"""
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetUniformVariate(self, a, b)


    def __call__(self) -> "double":
        """__call__(itkMersenneTwisterRandomVariateGenerator self) -> double"""
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator___call__(self)


    def SetSeed(self, *args) -> "void":
        """
        SetSeed(itkMersenneTwisterRandomVariateGenerator self, unsigned int const oneSeed)
        SetSeed(itkMersenneTwisterRandomVariateGenerator self)
        """
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_SetSeed(self, *args)


    def GetSeed(self) -> "unsigned int":
        """GetSeed(itkMersenneTwisterRandomVariateGenerator self) -> unsigned int"""
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetSeed(self)


    def GetNextSeed() -> "unsigned int":
        """GetNextSeed() -> unsigned int"""
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetNextSeed()

    GetNextSeed = staticmethod(GetNextSeed)
    __swig_destroy__ = _ITKCommonBasePython.delete_itkMersenneTwisterRandomVariateGenerator

    def cast(obj: 'itkLightObject') -> "itkMersenneTwisterRandomVariateGenerator *":
        """cast(itkLightObject obj) -> itkMersenneTwisterRandomVariateGenerator"""
        return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMersenneTwisterRandomVariateGenerator

        Create a new object of the class itkMersenneTwisterRandomVariateGenerator and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMersenneTwisterRandomVariateGenerator.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMersenneTwisterRandomVariateGenerator.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMersenneTwisterRandomVariateGenerator.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMersenneTwisterRandomVariateGenerator.Initialize = new_instancemethod(_ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_Initialize, None, itkMersenneTwisterRandomVariateGenerator)
itkMersenneTwisterRandomVariateGenerator.GetVariateWithClosedRange = new_instancemethod(_ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetVariateWithClosedRange, None, itkMersenneTwisterRandomVariateGenerator)
itkMersenneTwisterRandomVariateGenerator.GetVariateWithOpenUpperRange = new_instancemethod(_ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetVariateWithOpenUpperRange, None, itkMersenneTwisterRandomVariateGenerator)
itkMersenneTwisterRandomVariateGenerator.GetVariateWithOpenRange = new_instancemethod(_ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetVariateWithOpenRange, None, itkMersenneTwisterRandomVariateGenerator)
itkMersenneTwisterRandomVariateGenerator.GetIntegerVariate = new_instancemethod(_ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetIntegerVariate, None, itkMersenneTwisterRandomVariateGenerator)
itkMersenneTwisterRandomVariateGenerator.Get53BitVariate = new_instancemethod(_ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_Get53BitVariate, None, itkMersenneTwisterRandomVariateGenerator)
itkMersenneTwisterRandomVariateGenerator.GetNormalVariate = new_instancemethod(_ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetNormalVariate, None, itkMersenneTwisterRandomVariateGenerator)
itkMersenneTwisterRandomVariateGenerator.GetUniformVariate = new_instancemethod(_ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetUniformVariate, None, itkMersenneTwisterRandomVariateGenerator)
itkMersenneTwisterRandomVariateGenerator.__call__ = new_instancemethod(_ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator___call__, None, itkMersenneTwisterRandomVariateGenerator)
itkMersenneTwisterRandomVariateGenerator.SetSeed = new_instancemethod(_ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_SetSeed, None, itkMersenneTwisterRandomVariateGenerator)
itkMersenneTwisterRandomVariateGenerator.GetSeed = new_instancemethod(_ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetSeed, None, itkMersenneTwisterRandomVariateGenerator)
itkMersenneTwisterRandomVariateGenerator_swigregister = _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_swigregister
itkMersenneTwisterRandomVariateGenerator_swigregister(itkMersenneTwisterRandomVariateGenerator)

def itkMersenneTwisterRandomVariateGenerator___New_orig__() -> "itkMersenneTwisterRandomVariateGenerator_Pointer":
    """itkMersenneTwisterRandomVariateGenerator___New_orig__() -> itkMersenneTwisterRandomVariateGenerator_Pointer"""
    return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator___New_orig__()

def itkMersenneTwisterRandomVariateGenerator_GetInstance() -> "itkMersenneTwisterRandomVariateGenerator_Pointer":
    """itkMersenneTwisterRandomVariateGenerator_GetInstance() -> itkMersenneTwisterRandomVariateGenerator_Pointer"""
    return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetInstance()

def itkMersenneTwisterRandomVariateGenerator_GetNextSeed() -> "unsigned int":
    """itkMersenneTwisterRandomVariateGenerator_GetNextSeed() -> unsigned int"""
    return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_GetNextSeed()

def itkMersenneTwisterRandomVariateGenerator_cast(obj: 'itkLightObject') -> "itkMersenneTwisterRandomVariateGenerator *":
    """itkMersenneTwisterRandomVariateGenerator_cast(itkLightObject obj) -> itkMersenneTwisterRandomVariateGenerator"""
    return _ITKCommonBasePython.itkMersenneTwisterRandomVariateGenerator_cast(obj)

class itkMeshRegion(itkRegion):
    """Proxy of C++ itkMeshRegion class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ITKCommonBasePython.delete_itkMeshRegion

    def GetNumberOfRegions(self) -> "unsigned long long":
        """GetNumberOfRegions(itkMeshRegion self) -> unsigned long long"""
        return _ITKCommonBasePython.itkMeshRegion_GetNumberOfRegions(self)


    def SetNumberOfRegions(self, num: 'unsigned long long') -> "void":
        """SetNumberOfRegions(itkMeshRegion self, unsigned long long num)"""
        return _ITKCommonBasePython.itkMeshRegion_SetNumberOfRegions(self, num)


    def GetRegion(self) -> "unsigned long long":
        """GetRegion(itkMeshRegion self) -> unsigned long long"""
        return _ITKCommonBasePython.itkMeshRegion_GetRegion(self)


    def SetRegion(self, region: 'unsigned long long') -> "void":
        """SetRegion(itkMeshRegion self, unsigned long long region)"""
        return _ITKCommonBasePython.itkMeshRegion_SetRegion(self, region)


    def __init__(self, *args):
        """
        __init__(itkMeshRegion self) -> itkMeshRegion
        __init__(itkMeshRegion self, itkMeshRegion arg0) -> itkMeshRegion
        """
        _ITKCommonBasePython.itkMeshRegion_swiginit(self, _ITKCommonBasePython.new_itkMeshRegion(*args))
itkMeshRegion.GetNumberOfRegions = new_instancemethod(_ITKCommonBasePython.itkMeshRegion_GetNumberOfRegions, None, itkMeshRegion)
itkMeshRegion.SetNumberOfRegions = new_instancemethod(_ITKCommonBasePython.itkMeshRegion_SetNumberOfRegions, None, itkMeshRegion)
itkMeshRegion.GetRegion = new_instancemethod(_ITKCommonBasePython.itkMeshRegion_GetRegion, None, itkMeshRegion)
itkMeshRegion.SetRegion = new_instancemethod(_ITKCommonBasePython.itkMeshRegion_SetRegion, None, itkMeshRegion)
itkMeshRegion_swigregister = _ITKCommonBasePython.itkMeshRegion_swigregister
itkMeshRegion_swigregister(itkMeshRegion)

class itkModifiedEvent(itkAnyEvent):
    """Proxy of C++ itkModifiedEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkModifiedEvent self) -> itkModifiedEvent
        __init__(itkModifiedEvent self, itkModifiedEvent s) -> itkModifiedEvent
        """
        _ITKCommonBasePython.itkModifiedEvent_swiginit(self, _ITKCommonBasePython.new_itkModifiedEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkModifiedEvent
itkModifiedEvent_swigregister = _ITKCommonBasePython.itkModifiedEvent_swigregister
itkModifiedEvent_swigregister(itkModifiedEvent)

class itkMultiResolutionIterationEvent(itkIterationEvent):
    """Proxy of C++ itkMultiResolutionIterationEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMultiResolutionIterationEvent self) -> itkMultiResolutionIterationEvent
        __init__(itkMultiResolutionIterationEvent self, itkMultiResolutionIterationEvent s) -> itkMultiResolutionIterationEvent
        """
        _ITKCommonBasePython.itkMultiResolutionIterationEvent_swiginit(self, _ITKCommonBasePython.new_itkMultiResolutionIterationEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkMultiResolutionIterationEvent
itkMultiResolutionIterationEvent_swigregister = _ITKCommonBasePython.itkMultiResolutionIterationEvent_swigregister
itkMultiResolutionIterationEvent_swigregister(itkMultiResolutionIterationEvent)

class itkMultiThreaderBase(itkObject):
    """Proxy of C++ itkMultiThreaderBase class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiThreaderBase_Pointer":
        """__New_orig__() -> itkMultiThreaderBase_Pointer"""
        return _ITKCommonBasePython.itkMultiThreaderBase___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def SetMaximumNumberOfThreads(self, numberOfThreads: 'unsigned int') -> "void":
        """SetMaximumNumberOfThreads(itkMultiThreaderBase self, unsigned int numberOfThreads)"""
        return _ITKCommonBasePython.itkMultiThreaderBase_SetMaximumNumberOfThreads(self, numberOfThreads)


    def GetMaximumNumberOfThreads(self) -> "unsigned int":
        """GetMaximumNumberOfThreads(itkMultiThreaderBase self) -> unsigned int"""
        return _ITKCommonBasePython.itkMultiThreaderBase_GetMaximumNumberOfThreads(self)


    def SetNumberOfWorkUnits(self, numberOfWorkUnits: 'unsigned int') -> "void":
        """SetNumberOfWorkUnits(itkMultiThreaderBase self, unsigned int numberOfWorkUnits)"""
        return _ITKCommonBasePython.itkMultiThreaderBase_SetNumberOfWorkUnits(self, numberOfWorkUnits)


    def GetNumberOfWorkUnits(self) -> "unsigned int":
        """GetNumberOfWorkUnits(itkMultiThreaderBase self) -> unsigned int"""
        return _ITKCommonBasePython.itkMultiThreaderBase_GetNumberOfWorkUnits(self)


    def SetGlobalMaximumNumberOfThreads(val: 'unsigned int') -> "void":
        """SetGlobalMaximumNumberOfThreads(unsigned int val)"""
        return _ITKCommonBasePython.itkMultiThreaderBase_SetGlobalMaximumNumberOfThreads(val)

    SetGlobalMaximumNumberOfThreads = staticmethod(SetGlobalMaximumNumberOfThreads)

    def GetGlobalMaximumNumberOfThreads() -> "unsigned int":
        """GetGlobalMaximumNumberOfThreads() -> unsigned int"""
        return _ITKCommonBasePython.itkMultiThreaderBase_GetGlobalMaximumNumberOfThreads()

    GetGlobalMaximumNumberOfThreads = staticmethod(GetGlobalMaximumNumberOfThreads)

    def SetGlobalDefaultUseThreadPool(GlobalDefaultUseThreadPool: 'bool const') -> "void":
        """SetGlobalDefaultUseThreadPool(bool const GlobalDefaultUseThreadPool)"""
        return _ITKCommonBasePython.itkMultiThreaderBase_SetGlobalDefaultUseThreadPool(GlobalDefaultUseThreadPool)

    SetGlobalDefaultUseThreadPool = staticmethod(SetGlobalDefaultUseThreadPool)

    def GetGlobalDefaultUseThreadPool() -> "bool":
        """GetGlobalDefaultUseThreadPool() -> bool"""
        return _ITKCommonBasePython.itkMultiThreaderBase_GetGlobalDefaultUseThreadPool()

    GetGlobalDefaultUseThreadPool = staticmethod(GetGlobalDefaultUseThreadPool)
    Platform = _ITKCommonBasePython.itkMultiThreaderBase_Platform
    First = _ITKCommonBasePython.itkMultiThreaderBase_First
    Pool = _ITKCommonBasePython.itkMultiThreaderBase_Pool
    TBB = _ITKCommonBasePython.itkMultiThreaderBase_TBB
    Last = _ITKCommonBasePython.itkMultiThreaderBase_Last
    Unknown = _ITKCommonBasePython.itkMultiThreaderBase_Unknown

    def ThreaderTypeFromString(threaderString: 'std::string') -> "itkMultiThreaderBase::ThreaderType":
        """ThreaderTypeFromString(std::string threaderString) -> itkMultiThreaderBase::ThreaderType"""
        return _ITKCommonBasePython.itkMultiThreaderBase_ThreaderTypeFromString(threaderString)

    ThreaderTypeFromString = staticmethod(ThreaderTypeFromString)

    def ThreaderTypeToString(threader: 'itkMultiThreaderBase::ThreaderType') -> "std::string":
        """ThreaderTypeToString(itkMultiThreaderBase::ThreaderType threader) -> std::string"""
        return _ITKCommonBasePython.itkMultiThreaderBase_ThreaderTypeToString(threader)

    ThreaderTypeToString = staticmethod(ThreaderTypeToString)

    def SetGlobalDefaultThreader(threaderType: 'itkMultiThreaderBase::ThreaderType') -> "void":
        """SetGlobalDefaultThreader(itkMultiThreaderBase::ThreaderType threaderType)"""
        return _ITKCommonBasePython.itkMultiThreaderBase_SetGlobalDefaultThreader(threaderType)

    SetGlobalDefaultThreader = staticmethod(SetGlobalDefaultThreader)

    def GetGlobalDefaultThreader() -> "itkMultiThreaderBase::ThreaderType":
        """GetGlobalDefaultThreader() -> itkMultiThreaderBase::ThreaderType"""
        return _ITKCommonBasePython.itkMultiThreaderBase_GetGlobalDefaultThreader()

    GetGlobalDefaultThreader = staticmethod(GetGlobalDefaultThreader)

    def SetGlobalDefaultNumberOfThreads(val: 'unsigned int') -> "void":
        """SetGlobalDefaultNumberOfThreads(unsigned int val)"""
        return _ITKCommonBasePython.itkMultiThreaderBase_SetGlobalDefaultNumberOfThreads(val)

    SetGlobalDefaultNumberOfThreads = staticmethod(SetGlobalDefaultNumberOfThreads)

    def GetGlobalDefaultNumberOfThreads() -> "unsigned int":
        """GetGlobalDefaultNumberOfThreads() -> unsigned int"""
        return _ITKCommonBasePython.itkMultiThreaderBase_GetGlobalDefaultNumberOfThreads()

    GetGlobalDefaultNumberOfThreads = staticmethod(GetGlobalDefaultNumberOfThreads)

    def SetNumberOfThreads(self, numberOfThreads: 'unsigned int') -> "void":
        """SetNumberOfThreads(itkMultiThreaderBase self, unsigned int numberOfThreads)"""
        return _ITKCommonBasePython.itkMultiThreaderBase_SetNumberOfThreads(self, numberOfThreads)


    def GetNumberOfThreads(self) -> "unsigned int":
        """GetNumberOfThreads(itkMultiThreaderBase self) -> unsigned int"""
        return _ITKCommonBasePython.itkMultiThreaderBase_GetNumberOfThreads(self)


    def SingleMethodExecute(self) -> "void":
        """SingleMethodExecute(itkMultiThreaderBase self)"""
        return _ITKCommonBasePython.itkMultiThreaderBase_SingleMethodExecute(self)


    def HandleFilterProgress(filter: 'itkProcessObject', progress: 'float'=-1.) -> "void":
        """
        HandleFilterProgress(itkProcessObject filter, float progress=-1.)
        HandleFilterProgress(itkProcessObject filter)
        """
        return _ITKCommonBasePython.itkMultiThreaderBase_HandleFilterProgress(filter, progress)

    HandleFilterProgress = staticmethod(HandleFilterProgress)
    __swig_destroy__ = _ITKCommonBasePython.delete_itkMultiThreaderBase

    def cast(obj: 'itkLightObject') -> "itkMultiThreaderBase *":
        """cast(itkLightObject obj) -> itkMultiThreaderBase"""
        return _ITKCommonBasePython.itkMultiThreaderBase_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiThreaderBase

        Create a new object of the class itkMultiThreaderBase and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiThreaderBase.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiThreaderBase.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiThreaderBase.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiThreaderBase.SetMaximumNumberOfThreads = new_instancemethod(_ITKCommonBasePython.itkMultiThreaderBase_SetMaximumNumberOfThreads, None, itkMultiThreaderBase)
itkMultiThreaderBase.GetMaximumNumberOfThreads = new_instancemethod(_ITKCommonBasePython.itkMultiThreaderBase_GetMaximumNumberOfThreads, None, itkMultiThreaderBase)
itkMultiThreaderBase.SetNumberOfWorkUnits = new_instancemethod(_ITKCommonBasePython.itkMultiThreaderBase_SetNumberOfWorkUnits, None, itkMultiThreaderBase)
itkMultiThreaderBase.GetNumberOfWorkUnits = new_instancemethod(_ITKCommonBasePython.itkMultiThreaderBase_GetNumberOfWorkUnits, None, itkMultiThreaderBase)
itkMultiThreaderBase.SetNumberOfThreads = new_instancemethod(_ITKCommonBasePython.itkMultiThreaderBase_SetNumberOfThreads, None, itkMultiThreaderBase)
itkMultiThreaderBase.GetNumberOfThreads = new_instancemethod(_ITKCommonBasePython.itkMultiThreaderBase_GetNumberOfThreads, None, itkMultiThreaderBase)
itkMultiThreaderBase.SingleMethodExecute = new_instancemethod(_ITKCommonBasePython.itkMultiThreaderBase_SingleMethodExecute, None, itkMultiThreaderBase)
itkMultiThreaderBase_swigregister = _ITKCommonBasePython.itkMultiThreaderBase_swigregister
itkMultiThreaderBase_swigregister(itkMultiThreaderBase)

def itkMultiThreaderBase___New_orig__() -> "itkMultiThreaderBase_Pointer":
    """itkMultiThreaderBase___New_orig__() -> itkMultiThreaderBase_Pointer"""
    return _ITKCommonBasePython.itkMultiThreaderBase___New_orig__()

def itkMultiThreaderBase_SetGlobalMaximumNumberOfThreads(val: 'unsigned int') -> "void":
    """itkMultiThreaderBase_SetGlobalMaximumNumberOfThreads(unsigned int val)"""
    return _ITKCommonBasePython.itkMultiThreaderBase_SetGlobalMaximumNumberOfThreads(val)

def itkMultiThreaderBase_GetGlobalMaximumNumberOfThreads() -> "unsigned int":
    """itkMultiThreaderBase_GetGlobalMaximumNumberOfThreads() -> unsigned int"""
    return _ITKCommonBasePython.itkMultiThreaderBase_GetGlobalMaximumNumberOfThreads()

def itkMultiThreaderBase_SetGlobalDefaultUseThreadPool(GlobalDefaultUseThreadPool: 'bool const') -> "void":
    """itkMultiThreaderBase_SetGlobalDefaultUseThreadPool(bool const GlobalDefaultUseThreadPool)"""
    return _ITKCommonBasePython.itkMultiThreaderBase_SetGlobalDefaultUseThreadPool(GlobalDefaultUseThreadPool)

def itkMultiThreaderBase_GetGlobalDefaultUseThreadPool() -> "bool":
    """itkMultiThreaderBase_GetGlobalDefaultUseThreadPool() -> bool"""
    return _ITKCommonBasePython.itkMultiThreaderBase_GetGlobalDefaultUseThreadPool()

def itkMultiThreaderBase_ThreaderTypeFromString(threaderString: 'std::string') -> "itkMultiThreaderBase::ThreaderType":
    """itkMultiThreaderBase_ThreaderTypeFromString(std::string threaderString) -> itkMultiThreaderBase::ThreaderType"""
    return _ITKCommonBasePython.itkMultiThreaderBase_ThreaderTypeFromString(threaderString)

def itkMultiThreaderBase_ThreaderTypeToString(threader: 'itkMultiThreaderBase::ThreaderType') -> "std::string":
    """itkMultiThreaderBase_ThreaderTypeToString(itkMultiThreaderBase::ThreaderType threader) -> std::string"""
    return _ITKCommonBasePython.itkMultiThreaderBase_ThreaderTypeToString(threader)

def itkMultiThreaderBase_SetGlobalDefaultThreader(threaderType: 'itkMultiThreaderBase::ThreaderType') -> "void":
    """itkMultiThreaderBase_SetGlobalDefaultThreader(itkMultiThreaderBase::ThreaderType threaderType)"""
    return _ITKCommonBasePython.itkMultiThreaderBase_SetGlobalDefaultThreader(threaderType)

def itkMultiThreaderBase_GetGlobalDefaultThreader() -> "itkMultiThreaderBase::ThreaderType":
    """itkMultiThreaderBase_GetGlobalDefaultThreader() -> itkMultiThreaderBase::ThreaderType"""
    return _ITKCommonBasePython.itkMultiThreaderBase_GetGlobalDefaultThreader()

def itkMultiThreaderBase_SetGlobalDefaultNumberOfThreads(val: 'unsigned int') -> "void":
    """itkMultiThreaderBase_SetGlobalDefaultNumberOfThreads(unsigned int val)"""
    return _ITKCommonBasePython.itkMultiThreaderBase_SetGlobalDefaultNumberOfThreads(val)

def itkMultiThreaderBase_GetGlobalDefaultNumberOfThreads() -> "unsigned int":
    """itkMultiThreaderBase_GetGlobalDefaultNumberOfThreads() -> unsigned int"""
    return _ITKCommonBasePython.itkMultiThreaderBase_GetGlobalDefaultNumberOfThreads()

def itkMultiThreaderBase_HandleFilterProgress(filter: 'itkProcessObject', progress: 'float'=-1.) -> "void":
    """
    HandleFilterProgress(itkProcessObject filter, float progress=-1.)
    itkMultiThreaderBase_HandleFilterProgress(itkProcessObject filter)
    """
    return _ITKCommonBasePython.itkMultiThreaderBase_HandleFilterProgress(filter, progress)

def itkMultiThreaderBase_cast(obj: 'itkLightObject') -> "itkMultiThreaderBase *":
    """itkMultiThreaderBase_cast(itkLightObject obj) -> itkMultiThreaderBase"""
    return _ITKCommonBasePython.itkMultiThreaderBase_cast(obj)

class itkPickEvent(itkAnyEvent):
    """Proxy of C++ itkPickEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkPickEvent self) -> itkPickEvent
        __init__(itkPickEvent self, itkPickEvent s) -> itkPickEvent
        """
        _ITKCommonBasePython.itkPickEvent_swiginit(self, _ITKCommonBasePython.new_itkPickEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkPickEvent
itkPickEvent_swigregister = _ITKCommonBasePython.itkPickEvent_swigregister
itkPickEvent_swigregister(itkPickEvent)

class itkPlatformMultiThreader(itkMultiThreaderBase):
    """Proxy of C++ itkPlatformMultiThreader class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPlatformMultiThreader_Pointer":
        """__New_orig__() -> itkPlatformMultiThreader_Pointer"""
        return _ITKCommonBasePython.itkPlatformMultiThreader___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPlatformMultiThreader_Pointer":
        """Clone(itkPlatformMultiThreader self) -> itkPlatformMultiThreader_Pointer"""
        return _ITKCommonBasePython.itkPlatformMultiThreader_Clone(self)


    def SetGlobalMaximumNumberOfThreads(val: 'unsigned int') -> "void":
        """SetGlobalMaximumNumberOfThreads(unsigned int val)"""
        return _ITKCommonBasePython.itkPlatformMultiThreader_SetGlobalMaximumNumberOfThreads(val)

    SetGlobalMaximumNumberOfThreads = staticmethod(SetGlobalMaximumNumberOfThreads)

    def GetGlobalMaximumNumberOfThreads() -> "unsigned int":
        """GetGlobalMaximumNumberOfThreads() -> unsigned int"""
        return _ITKCommonBasePython.itkPlatformMultiThreader_GetGlobalMaximumNumberOfThreads()

    GetGlobalMaximumNumberOfThreads = staticmethod(GetGlobalMaximumNumberOfThreads)

    def SetGlobalDefaultNumberOfThreads(val: 'unsigned int') -> "void":
        """SetGlobalDefaultNumberOfThreads(unsigned int val)"""
        return _ITKCommonBasePython.itkPlatformMultiThreader_SetGlobalDefaultNumberOfThreads(val)

    SetGlobalDefaultNumberOfThreads = staticmethod(SetGlobalDefaultNumberOfThreads)

    def GetGlobalDefaultNumberOfThreads() -> "unsigned int":
        """GetGlobalDefaultNumberOfThreads() -> unsigned int"""
        return _ITKCommonBasePython.itkPlatformMultiThreader_GetGlobalDefaultNumberOfThreads()

    GetGlobalDefaultNumberOfThreads = staticmethod(GetGlobalDefaultNumberOfThreads)

    def MultipleMethodExecute(self) -> "void":
        """MultipleMethodExecute(itkPlatformMultiThreader self)"""
        return _ITKCommonBasePython.itkPlatformMultiThreader_MultipleMethodExecute(self)


    def TerminateThread(self, thread_id: 'unsigned int') -> "void":
        """TerminateThread(itkPlatformMultiThreader self, unsigned int thread_id)"""
        return _ITKCommonBasePython.itkPlatformMultiThreader_TerminateThread(self, thread_id)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkPlatformMultiThreader

    def cast(obj: 'itkLightObject') -> "itkPlatformMultiThreader *":
        """cast(itkLightObject obj) -> itkPlatformMultiThreader"""
        return _ITKCommonBasePython.itkPlatformMultiThreader_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPlatformMultiThreader

        Create a new object of the class itkPlatformMultiThreader and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPlatformMultiThreader.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPlatformMultiThreader.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPlatformMultiThreader.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPlatformMultiThreader.Clone = new_instancemethod(_ITKCommonBasePython.itkPlatformMultiThreader_Clone, None, itkPlatformMultiThreader)
itkPlatformMultiThreader.MultipleMethodExecute = new_instancemethod(_ITKCommonBasePython.itkPlatformMultiThreader_MultipleMethodExecute, None, itkPlatformMultiThreader)
itkPlatformMultiThreader.TerminateThread = new_instancemethod(_ITKCommonBasePython.itkPlatformMultiThreader_TerminateThread, None, itkPlatformMultiThreader)
itkPlatformMultiThreader_swigregister = _ITKCommonBasePython.itkPlatformMultiThreader_swigregister
itkPlatformMultiThreader_swigregister(itkPlatformMultiThreader)

def itkPlatformMultiThreader___New_orig__() -> "itkPlatformMultiThreader_Pointer":
    """itkPlatformMultiThreader___New_orig__() -> itkPlatformMultiThreader_Pointer"""
    return _ITKCommonBasePython.itkPlatformMultiThreader___New_orig__()

def itkPlatformMultiThreader_SetGlobalMaximumNumberOfThreads(val: 'unsigned int') -> "void":
    """itkPlatformMultiThreader_SetGlobalMaximumNumberOfThreads(unsigned int val)"""
    return _ITKCommonBasePython.itkPlatformMultiThreader_SetGlobalMaximumNumberOfThreads(val)

def itkPlatformMultiThreader_GetGlobalMaximumNumberOfThreads() -> "unsigned int":
    """itkPlatformMultiThreader_GetGlobalMaximumNumberOfThreads() -> unsigned int"""
    return _ITKCommonBasePython.itkPlatformMultiThreader_GetGlobalMaximumNumberOfThreads()

def itkPlatformMultiThreader_SetGlobalDefaultNumberOfThreads(val: 'unsigned int') -> "void":
    """itkPlatformMultiThreader_SetGlobalDefaultNumberOfThreads(unsigned int val)"""
    return _ITKCommonBasePython.itkPlatformMultiThreader_SetGlobalDefaultNumberOfThreads(val)

def itkPlatformMultiThreader_GetGlobalDefaultNumberOfThreads() -> "unsigned int":
    """itkPlatformMultiThreader_GetGlobalDefaultNumberOfThreads() -> unsigned int"""
    return _ITKCommonBasePython.itkPlatformMultiThreader_GetGlobalDefaultNumberOfThreads()

def itkPlatformMultiThreader_cast(obj: 'itkLightObject') -> "itkPlatformMultiThreader *":
    """itkPlatformMultiThreader_cast(itkLightObject obj) -> itkPlatformMultiThreader"""
    return _ITKCommonBasePython.itkPlatformMultiThreader_cast(obj)

class itkPoolMultiThreader(itkMultiThreaderBase):
    """Proxy of C++ itkPoolMultiThreader class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPoolMultiThreader_Pointer":
        """__New_orig__() -> itkPoolMultiThreader_Pointer"""
        return _ITKCommonBasePython.itkPoolMultiThreader___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPoolMultiThreader_Pointer":
        """Clone(itkPoolMultiThreader self) -> itkPoolMultiThreader_Pointer"""
        return _ITKCommonBasePython.itkPoolMultiThreader_Clone(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkPoolMultiThreader

    def cast(obj: 'itkLightObject') -> "itkPoolMultiThreader *":
        """cast(itkLightObject obj) -> itkPoolMultiThreader"""
        return _ITKCommonBasePython.itkPoolMultiThreader_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPoolMultiThreader

        Create a new object of the class itkPoolMultiThreader and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPoolMultiThreader.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPoolMultiThreader.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPoolMultiThreader.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPoolMultiThreader.Clone = new_instancemethod(_ITKCommonBasePython.itkPoolMultiThreader_Clone, None, itkPoolMultiThreader)
itkPoolMultiThreader_swigregister = _ITKCommonBasePython.itkPoolMultiThreader_swigregister
itkPoolMultiThreader_swigregister(itkPoolMultiThreader)

def itkPoolMultiThreader___New_orig__() -> "itkPoolMultiThreader_Pointer":
    """itkPoolMultiThreader___New_orig__() -> itkPoolMultiThreader_Pointer"""
    return _ITKCommonBasePython.itkPoolMultiThreader___New_orig__()

def itkPoolMultiThreader_cast(obj: 'itkLightObject') -> "itkPoolMultiThreader *":
    """itkPoolMultiThreader_cast(itkLightObject obj) -> itkPoolMultiThreader"""
    return _ITKCommonBasePython.itkPoolMultiThreader_cast(obj)

class itkProgressEvent(itkAnyEvent):
    """Proxy of C++ itkProgressEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkProgressEvent self) -> itkProgressEvent
        __init__(itkProgressEvent self, itkProgressEvent s) -> itkProgressEvent
        """
        _ITKCommonBasePython.itkProgressEvent_swiginit(self, _ITKCommonBasePython.new_itkProgressEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkProgressEvent
itkProgressEvent_swigregister = _ITKCommonBasePython.itkProgressEvent_swigregister
itkProgressEvent_swigregister(itkProgressEvent)

class itkStartEvent(itkAnyEvent):
    """Proxy of C++ itkStartEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkStartEvent self) -> itkStartEvent
        __init__(itkStartEvent self, itkStartEvent s) -> itkStartEvent
        """
        _ITKCommonBasePython.itkStartEvent_swiginit(self, _ITKCommonBasePython.new_itkStartEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkStartEvent
itkStartEvent_swigregister = _ITKCommonBasePython.itkStartEvent_swigregister
itkStartEvent_swigregister(itkStartEvent)

class itkStartPickEvent(itkPickEvent):
    """Proxy of C++ itkStartPickEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkStartPickEvent self) -> itkStartPickEvent
        __init__(itkStartPickEvent self, itkStartPickEvent s) -> itkStartPickEvent
        """
        _ITKCommonBasePython.itkStartPickEvent_swiginit(self, _ITKCommonBasePython.new_itkStartPickEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkStartPickEvent
itkStartPickEvent_swigregister = _ITKCommonBasePython.itkStartPickEvent_swigregister
itkStartPickEvent_swigregister(itkStartPickEvent)

class itkUserEvent(itkAnyEvent):
    """Proxy of C++ itkUserEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkUserEvent self) -> itkUserEvent
        __init__(itkUserEvent self, itkUserEvent s) -> itkUserEvent
        """
        _ITKCommonBasePython.itkUserEvent_swiginit(self, _ITKCommonBasePython.new_itkUserEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkUserEvent
itkUserEvent_swigregister = _ITKCommonBasePython.itkUserEvent_swigregister
itkUserEvent_swigregister(itkUserEvent)

class itkAbortCheckEvent(itkPickEvent):
    """Proxy of C++ itkAbortCheckEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkAbortCheckEvent self) -> itkAbortCheckEvent
        __init__(itkAbortCheckEvent self, itkAbortCheckEvent s) -> itkAbortCheckEvent
        """
        _ITKCommonBasePython.itkAbortCheckEvent_swiginit(self, _ITKCommonBasePython.new_itkAbortCheckEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkAbortCheckEvent
itkAbortCheckEvent_swigregister = _ITKCommonBasePython.itkAbortCheckEvent_swigregister
itkAbortCheckEvent_swigregister(itkAbortCheckEvent)

class itkAbortEvent(itkAnyEvent):
    """Proxy of C++ itkAbortEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkAbortEvent self) -> itkAbortEvent
        __init__(itkAbortEvent self, itkAbortEvent s) -> itkAbortEvent
        """
        _ITKCommonBasePython.itkAbortEvent_swiginit(self, _ITKCommonBasePython.new_itkAbortEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkAbortEvent
itkAbortEvent_swigregister = _ITKCommonBasePython.itkAbortEvent_swigregister
itkAbortEvent_swigregister(itkAbortEvent)

class itkEndPickEvent(itkPickEvent):
    """Proxy of C++ itkEndPickEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkEndPickEvent self) -> itkEndPickEvent
        __init__(itkEndPickEvent self, itkEndPickEvent s) -> itkEndPickEvent
        """
        _ITKCommonBasePython.itkEndPickEvent_swiginit(self, _ITKCommonBasePython.new_itkEndPickEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkEndPickEvent
itkEndPickEvent_swigregister = _ITKCommonBasePython.itkEndPickEvent_swigregister
itkEndPickEvent_swigregister(itkEndPickEvent)

class itkFunctionAndGradientEvaluationIterationEvent(itkIterationEvent):
    """Proxy of C++ itkFunctionAndGradientEvaluationIterationEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkFunctionAndGradientEvaluationIterationEvent self) -> itkFunctionAndGradientEvaluationIterationEvent
        __init__(itkFunctionAndGradientEvaluationIterationEvent self, itkFunctionAndGradientEvaluationIterationEvent s) -> itkFunctionAndGradientEvaluationIterationEvent
        """
        _ITKCommonBasePython.itkFunctionAndGradientEvaluationIterationEvent_swiginit(self, _ITKCommonBasePython.new_itkFunctionAndGradientEvaluationIterationEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkFunctionAndGradientEvaluationIterationEvent
itkFunctionAndGradientEvaluationIterationEvent_swigregister = _ITKCommonBasePython.itkFunctionAndGradientEvaluationIterationEvent_swigregister
itkFunctionAndGradientEvaluationIterationEvent_swigregister(itkFunctionAndGradientEvaluationIterationEvent)

class itkFunctionEvaluationIterationEvent(itkIterationEvent):
    """Proxy of C++ itkFunctionEvaluationIterationEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkFunctionEvaluationIterationEvent self) -> itkFunctionEvaluationIterationEvent
        __init__(itkFunctionEvaluationIterationEvent self, itkFunctionEvaluationIterationEvent s) -> itkFunctionEvaluationIterationEvent
        """
        _ITKCommonBasePython.itkFunctionEvaluationIterationEvent_swiginit(self, _ITKCommonBasePython.new_itkFunctionEvaluationIterationEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkFunctionEvaluationIterationEvent
itkFunctionEvaluationIterationEvent_swigregister = _ITKCommonBasePython.itkFunctionEvaluationIterationEvent_swigregister
itkFunctionEvaluationIterationEvent_swigregister(itkFunctionEvaluationIterationEvent)

class itkGradientEvaluationIterationEvent(itkIterationEvent):
    """Proxy of C++ itkGradientEvaluationIterationEvent class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkGradientEvaluationIterationEvent self) -> itkGradientEvaluationIterationEvent
        __init__(itkGradientEvaluationIterationEvent self, itkGradientEvaluationIterationEvent s) -> itkGradientEvaluationIterationEvent
        """
        _ITKCommonBasePython.itkGradientEvaluationIterationEvent_swiginit(self, _ITKCommonBasePython.new_itkGradientEvaluationIterationEvent(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkGradientEvaluationIterationEvent
itkGradientEvaluationIterationEvent_swigregister = _ITKCommonBasePython.itkGradientEvaluationIterationEvent_swigregister
itkGradientEvaluationIterationEvent_swigregister(itkGradientEvaluationIterationEvent)


def streaming_process_object(*args, **kwargs):
    """Procedural interface for StreamingProcessObject"""
    import itk
    instance = itk.StreamingProcessObject.New(*args, **kwargs)
    return instance.__internal_call__()

def streaming_process_object_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.StreamingProcessObject, itkTemplate.itkTemplate):
        streaming_process_object.__doc__ = itk.StreamingProcessObject.values()[0].__doc__
    else:
        streaming_process_object.__doc__ = itk.StreamingProcessObject.__doc__




