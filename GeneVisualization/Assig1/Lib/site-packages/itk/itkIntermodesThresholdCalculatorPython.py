# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkIntermodesThresholdCalculatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkIntermodesThresholdCalculatorPython', [dirname(__file__)])
        except ImportError:
            import _itkIntermodesThresholdCalculatorPython
            return _itkIntermodesThresholdCalculatorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkIntermodesThresholdCalculatorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkIntermodesThresholdCalculatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkIntermodesThresholdCalculatorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkHistogramThresholdCalculatorPython
import itkHistogramPython
import itkSamplePython
import ITKCommonBasePython
import pyBasePython
import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkSimpleDataObjectDecoratorPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkCovariantVectorPython

def itkIntermodesThresholdCalculatorHFF_New():
  return itkIntermodesThresholdCalculatorHFF.New()


def itkIntermodesThresholdCalculatorHDF_New():
  return itkIntermodesThresholdCalculatorHDF.New()


def itkIntermodesThresholdCalculatorHFUS_New():
  return itkIntermodesThresholdCalculatorHFUS.New()


def itkIntermodesThresholdCalculatorHDUS_New():
  return itkIntermodesThresholdCalculatorHDUS.New()


def itkIntermodesThresholdCalculatorHFUC_New():
  return itkIntermodesThresholdCalculatorHFUC.New()


def itkIntermodesThresholdCalculatorHDUC_New():
  return itkIntermodesThresholdCalculatorHDUC.New()


def itkIntermodesThresholdCalculatorHFSS_New():
  return itkIntermodesThresholdCalculatorHFSS.New()


def itkIntermodesThresholdCalculatorHDSS_New():
  return itkIntermodesThresholdCalculatorHDSS.New()

class itkIntermodesThresholdCalculatorHDF(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF):
    """Proxy of C++ itkIntermodesThresholdCalculatorHDF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIntermodesThresholdCalculatorHDF_Pointer":
        """__New_orig__() -> itkIntermodesThresholdCalculatorHDF_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIntermodesThresholdCalculatorHDF_Pointer":
        """Clone(itkIntermodesThresholdCalculatorHDF self) -> itkIntermodesThresholdCalculatorHDF_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_Clone(self)


    def SetMaximumSmoothingIterations(self, _arg: 'unsigned long long const') -> "void":
        """SetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHDF self, unsigned long long const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_SetMaximumSmoothingIterations(self, _arg)


    def GetMaximumSmoothingIterations(self) -> "unsigned long long":
        """GetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHDF self) -> unsigned long long"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, _arg: 'bool const') -> "void":
        """SetUseInterMode(itkIntermodesThresholdCalculatorHDF self, bool const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_SetUseInterMode(self, _arg)


    def GetUseInterMode(self) -> "bool":
        """GetUseInterMode(itkIntermodesThresholdCalculatorHDF self) -> bool"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_GetUseInterMode(self)


    def UseInterModeOn(self) -> "void":
        """UseInterModeOn(itkIntermodesThresholdCalculatorHDF self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_UseInterModeOn(self)


    def UseInterModeOff(self) -> "void":
        """UseInterModeOff(itkIntermodesThresholdCalculatorHDF self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_UseInterModeOff(self)

    __swig_destroy__ = _itkIntermodesThresholdCalculatorPython.delete_itkIntermodesThresholdCalculatorHDF

    def cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHDF *":
        """cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHDF"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdCalculatorHDF

        Create a new object of the class itkIntermodesThresholdCalculatorHDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdCalculatorHDF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdCalculatorHDF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdCalculatorHDF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdCalculatorHDF.Clone = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_Clone, None, itkIntermodesThresholdCalculatorHDF)
itkIntermodesThresholdCalculatorHDF.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_SetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHDF)
itkIntermodesThresholdCalculatorHDF.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_GetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHDF)
itkIntermodesThresholdCalculatorHDF.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_SetUseInterMode, None, itkIntermodesThresholdCalculatorHDF)
itkIntermodesThresholdCalculatorHDF.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_GetUseInterMode, None, itkIntermodesThresholdCalculatorHDF)
itkIntermodesThresholdCalculatorHDF.UseInterModeOn = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_UseInterModeOn, None, itkIntermodesThresholdCalculatorHDF)
itkIntermodesThresholdCalculatorHDF.UseInterModeOff = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_UseInterModeOff, None, itkIntermodesThresholdCalculatorHDF)
itkIntermodesThresholdCalculatorHDF_swigregister = _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_swigregister
itkIntermodesThresholdCalculatorHDF_swigregister(itkIntermodesThresholdCalculatorHDF)

def itkIntermodesThresholdCalculatorHDF___New_orig__() -> "itkIntermodesThresholdCalculatorHDF_Pointer":
    """itkIntermodesThresholdCalculatorHDF___New_orig__() -> itkIntermodesThresholdCalculatorHDF_Pointer"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF___New_orig__()

def itkIntermodesThresholdCalculatorHDF_cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHDF *":
    """itkIntermodesThresholdCalculatorHDF_cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHDF"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDF_cast(obj)

class itkIntermodesThresholdCalculatorHDSS(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS):
    """Proxy of C++ itkIntermodesThresholdCalculatorHDSS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIntermodesThresholdCalculatorHDSS_Pointer":
        """__New_orig__() -> itkIntermodesThresholdCalculatorHDSS_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIntermodesThresholdCalculatorHDSS_Pointer":
        """Clone(itkIntermodesThresholdCalculatorHDSS self) -> itkIntermodesThresholdCalculatorHDSS_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_Clone(self)


    def SetMaximumSmoothingIterations(self, _arg: 'unsigned long long const') -> "void":
        """SetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHDSS self, unsigned long long const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_SetMaximumSmoothingIterations(self, _arg)


    def GetMaximumSmoothingIterations(self) -> "unsigned long long":
        """GetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHDSS self) -> unsigned long long"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, _arg: 'bool const') -> "void":
        """SetUseInterMode(itkIntermodesThresholdCalculatorHDSS self, bool const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_SetUseInterMode(self, _arg)


    def GetUseInterMode(self) -> "bool":
        """GetUseInterMode(itkIntermodesThresholdCalculatorHDSS self) -> bool"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_GetUseInterMode(self)


    def UseInterModeOn(self) -> "void":
        """UseInterModeOn(itkIntermodesThresholdCalculatorHDSS self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_UseInterModeOn(self)


    def UseInterModeOff(self) -> "void":
        """UseInterModeOff(itkIntermodesThresholdCalculatorHDSS self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_UseInterModeOff(self)

    __swig_destroy__ = _itkIntermodesThresholdCalculatorPython.delete_itkIntermodesThresholdCalculatorHDSS

    def cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHDSS *":
        """cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHDSS"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdCalculatorHDSS

        Create a new object of the class itkIntermodesThresholdCalculatorHDSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdCalculatorHDSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdCalculatorHDSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdCalculatorHDSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdCalculatorHDSS.Clone = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_Clone, None, itkIntermodesThresholdCalculatorHDSS)
itkIntermodesThresholdCalculatorHDSS.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_SetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHDSS)
itkIntermodesThresholdCalculatorHDSS.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_GetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHDSS)
itkIntermodesThresholdCalculatorHDSS.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_SetUseInterMode, None, itkIntermodesThresholdCalculatorHDSS)
itkIntermodesThresholdCalculatorHDSS.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_GetUseInterMode, None, itkIntermodesThresholdCalculatorHDSS)
itkIntermodesThresholdCalculatorHDSS.UseInterModeOn = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_UseInterModeOn, None, itkIntermodesThresholdCalculatorHDSS)
itkIntermodesThresholdCalculatorHDSS.UseInterModeOff = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_UseInterModeOff, None, itkIntermodesThresholdCalculatorHDSS)
itkIntermodesThresholdCalculatorHDSS_swigregister = _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_swigregister
itkIntermodesThresholdCalculatorHDSS_swigregister(itkIntermodesThresholdCalculatorHDSS)

def itkIntermodesThresholdCalculatorHDSS___New_orig__() -> "itkIntermodesThresholdCalculatorHDSS_Pointer":
    """itkIntermodesThresholdCalculatorHDSS___New_orig__() -> itkIntermodesThresholdCalculatorHDSS_Pointer"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS___New_orig__()

def itkIntermodesThresholdCalculatorHDSS_cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHDSS *":
    """itkIntermodesThresholdCalculatorHDSS_cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHDSS"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDSS_cast(obj)

class itkIntermodesThresholdCalculatorHDUC(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC):
    """Proxy of C++ itkIntermodesThresholdCalculatorHDUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIntermodesThresholdCalculatorHDUC_Pointer":
        """__New_orig__() -> itkIntermodesThresholdCalculatorHDUC_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIntermodesThresholdCalculatorHDUC_Pointer":
        """Clone(itkIntermodesThresholdCalculatorHDUC self) -> itkIntermodesThresholdCalculatorHDUC_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_Clone(self)


    def SetMaximumSmoothingIterations(self, _arg: 'unsigned long long const') -> "void":
        """SetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHDUC self, unsigned long long const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_SetMaximumSmoothingIterations(self, _arg)


    def GetMaximumSmoothingIterations(self) -> "unsigned long long":
        """GetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHDUC self) -> unsigned long long"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, _arg: 'bool const') -> "void":
        """SetUseInterMode(itkIntermodesThresholdCalculatorHDUC self, bool const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_SetUseInterMode(self, _arg)


    def GetUseInterMode(self) -> "bool":
        """GetUseInterMode(itkIntermodesThresholdCalculatorHDUC self) -> bool"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_GetUseInterMode(self)


    def UseInterModeOn(self) -> "void":
        """UseInterModeOn(itkIntermodesThresholdCalculatorHDUC self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_UseInterModeOn(self)


    def UseInterModeOff(self) -> "void":
        """UseInterModeOff(itkIntermodesThresholdCalculatorHDUC self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_UseInterModeOff(self)

    __swig_destroy__ = _itkIntermodesThresholdCalculatorPython.delete_itkIntermodesThresholdCalculatorHDUC

    def cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHDUC *":
        """cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHDUC"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdCalculatorHDUC

        Create a new object of the class itkIntermodesThresholdCalculatorHDUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdCalculatorHDUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdCalculatorHDUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdCalculatorHDUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdCalculatorHDUC.Clone = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_Clone, None, itkIntermodesThresholdCalculatorHDUC)
itkIntermodesThresholdCalculatorHDUC.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_SetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHDUC)
itkIntermodesThresholdCalculatorHDUC.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_GetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHDUC)
itkIntermodesThresholdCalculatorHDUC.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_SetUseInterMode, None, itkIntermodesThresholdCalculatorHDUC)
itkIntermodesThresholdCalculatorHDUC.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_GetUseInterMode, None, itkIntermodesThresholdCalculatorHDUC)
itkIntermodesThresholdCalculatorHDUC.UseInterModeOn = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_UseInterModeOn, None, itkIntermodesThresholdCalculatorHDUC)
itkIntermodesThresholdCalculatorHDUC.UseInterModeOff = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_UseInterModeOff, None, itkIntermodesThresholdCalculatorHDUC)
itkIntermodesThresholdCalculatorHDUC_swigregister = _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_swigregister
itkIntermodesThresholdCalculatorHDUC_swigregister(itkIntermodesThresholdCalculatorHDUC)

def itkIntermodesThresholdCalculatorHDUC___New_orig__() -> "itkIntermodesThresholdCalculatorHDUC_Pointer":
    """itkIntermodesThresholdCalculatorHDUC___New_orig__() -> itkIntermodesThresholdCalculatorHDUC_Pointer"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC___New_orig__()

def itkIntermodesThresholdCalculatorHDUC_cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHDUC *":
    """itkIntermodesThresholdCalculatorHDUC_cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHDUC"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUC_cast(obj)

class itkIntermodesThresholdCalculatorHDUS(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS):
    """Proxy of C++ itkIntermodesThresholdCalculatorHDUS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIntermodesThresholdCalculatorHDUS_Pointer":
        """__New_orig__() -> itkIntermodesThresholdCalculatorHDUS_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIntermodesThresholdCalculatorHDUS_Pointer":
        """Clone(itkIntermodesThresholdCalculatorHDUS self) -> itkIntermodesThresholdCalculatorHDUS_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_Clone(self)


    def SetMaximumSmoothingIterations(self, _arg: 'unsigned long long const') -> "void":
        """SetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHDUS self, unsigned long long const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_SetMaximumSmoothingIterations(self, _arg)


    def GetMaximumSmoothingIterations(self) -> "unsigned long long":
        """GetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHDUS self) -> unsigned long long"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, _arg: 'bool const') -> "void":
        """SetUseInterMode(itkIntermodesThresholdCalculatorHDUS self, bool const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_SetUseInterMode(self, _arg)


    def GetUseInterMode(self) -> "bool":
        """GetUseInterMode(itkIntermodesThresholdCalculatorHDUS self) -> bool"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_GetUseInterMode(self)


    def UseInterModeOn(self) -> "void":
        """UseInterModeOn(itkIntermodesThresholdCalculatorHDUS self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_UseInterModeOn(self)


    def UseInterModeOff(self) -> "void":
        """UseInterModeOff(itkIntermodesThresholdCalculatorHDUS self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_UseInterModeOff(self)

    __swig_destroy__ = _itkIntermodesThresholdCalculatorPython.delete_itkIntermodesThresholdCalculatorHDUS

    def cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHDUS *":
        """cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHDUS"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdCalculatorHDUS

        Create a new object of the class itkIntermodesThresholdCalculatorHDUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdCalculatorHDUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdCalculatorHDUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdCalculatorHDUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdCalculatorHDUS.Clone = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_Clone, None, itkIntermodesThresholdCalculatorHDUS)
itkIntermodesThresholdCalculatorHDUS.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_SetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHDUS)
itkIntermodesThresholdCalculatorHDUS.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_GetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHDUS)
itkIntermodesThresholdCalculatorHDUS.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_SetUseInterMode, None, itkIntermodesThresholdCalculatorHDUS)
itkIntermodesThresholdCalculatorHDUS.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_GetUseInterMode, None, itkIntermodesThresholdCalculatorHDUS)
itkIntermodesThresholdCalculatorHDUS.UseInterModeOn = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_UseInterModeOn, None, itkIntermodesThresholdCalculatorHDUS)
itkIntermodesThresholdCalculatorHDUS.UseInterModeOff = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_UseInterModeOff, None, itkIntermodesThresholdCalculatorHDUS)
itkIntermodesThresholdCalculatorHDUS_swigregister = _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_swigregister
itkIntermodesThresholdCalculatorHDUS_swigregister(itkIntermodesThresholdCalculatorHDUS)

def itkIntermodesThresholdCalculatorHDUS___New_orig__() -> "itkIntermodesThresholdCalculatorHDUS_Pointer":
    """itkIntermodesThresholdCalculatorHDUS___New_orig__() -> itkIntermodesThresholdCalculatorHDUS_Pointer"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS___New_orig__()

def itkIntermodesThresholdCalculatorHDUS_cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHDUS *":
    """itkIntermodesThresholdCalculatorHDUS_cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHDUS"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHDUS_cast(obj)

class itkIntermodesThresholdCalculatorHFF(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF):
    """Proxy of C++ itkIntermodesThresholdCalculatorHFF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIntermodesThresholdCalculatorHFF_Pointer":
        """__New_orig__() -> itkIntermodesThresholdCalculatorHFF_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIntermodesThresholdCalculatorHFF_Pointer":
        """Clone(itkIntermodesThresholdCalculatorHFF self) -> itkIntermodesThresholdCalculatorHFF_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_Clone(self)


    def SetMaximumSmoothingIterations(self, _arg: 'unsigned long long const') -> "void":
        """SetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHFF self, unsigned long long const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_SetMaximumSmoothingIterations(self, _arg)


    def GetMaximumSmoothingIterations(self) -> "unsigned long long":
        """GetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHFF self) -> unsigned long long"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, _arg: 'bool const') -> "void":
        """SetUseInterMode(itkIntermodesThresholdCalculatorHFF self, bool const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_SetUseInterMode(self, _arg)


    def GetUseInterMode(self) -> "bool":
        """GetUseInterMode(itkIntermodesThresholdCalculatorHFF self) -> bool"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_GetUseInterMode(self)


    def UseInterModeOn(self) -> "void":
        """UseInterModeOn(itkIntermodesThresholdCalculatorHFF self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_UseInterModeOn(self)


    def UseInterModeOff(self) -> "void":
        """UseInterModeOff(itkIntermodesThresholdCalculatorHFF self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_UseInterModeOff(self)

    __swig_destroy__ = _itkIntermodesThresholdCalculatorPython.delete_itkIntermodesThresholdCalculatorHFF

    def cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHFF *":
        """cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHFF"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdCalculatorHFF

        Create a new object of the class itkIntermodesThresholdCalculatorHFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdCalculatorHFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdCalculatorHFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdCalculatorHFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdCalculatorHFF.Clone = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_Clone, None, itkIntermodesThresholdCalculatorHFF)
itkIntermodesThresholdCalculatorHFF.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_SetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHFF)
itkIntermodesThresholdCalculatorHFF.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_GetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHFF)
itkIntermodesThresholdCalculatorHFF.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_SetUseInterMode, None, itkIntermodesThresholdCalculatorHFF)
itkIntermodesThresholdCalculatorHFF.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_GetUseInterMode, None, itkIntermodesThresholdCalculatorHFF)
itkIntermodesThresholdCalculatorHFF.UseInterModeOn = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_UseInterModeOn, None, itkIntermodesThresholdCalculatorHFF)
itkIntermodesThresholdCalculatorHFF.UseInterModeOff = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_UseInterModeOff, None, itkIntermodesThresholdCalculatorHFF)
itkIntermodesThresholdCalculatorHFF_swigregister = _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_swigregister
itkIntermodesThresholdCalculatorHFF_swigregister(itkIntermodesThresholdCalculatorHFF)

def itkIntermodesThresholdCalculatorHFF___New_orig__() -> "itkIntermodesThresholdCalculatorHFF_Pointer":
    """itkIntermodesThresholdCalculatorHFF___New_orig__() -> itkIntermodesThresholdCalculatorHFF_Pointer"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF___New_orig__()

def itkIntermodesThresholdCalculatorHFF_cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHFF *":
    """itkIntermodesThresholdCalculatorHFF_cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHFF"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFF_cast(obj)

class itkIntermodesThresholdCalculatorHFSS(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS):
    """Proxy of C++ itkIntermodesThresholdCalculatorHFSS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIntermodesThresholdCalculatorHFSS_Pointer":
        """__New_orig__() -> itkIntermodesThresholdCalculatorHFSS_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIntermodesThresholdCalculatorHFSS_Pointer":
        """Clone(itkIntermodesThresholdCalculatorHFSS self) -> itkIntermodesThresholdCalculatorHFSS_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_Clone(self)


    def SetMaximumSmoothingIterations(self, _arg: 'unsigned long long const') -> "void":
        """SetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHFSS self, unsigned long long const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_SetMaximumSmoothingIterations(self, _arg)


    def GetMaximumSmoothingIterations(self) -> "unsigned long long":
        """GetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHFSS self) -> unsigned long long"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, _arg: 'bool const') -> "void":
        """SetUseInterMode(itkIntermodesThresholdCalculatorHFSS self, bool const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_SetUseInterMode(self, _arg)


    def GetUseInterMode(self) -> "bool":
        """GetUseInterMode(itkIntermodesThresholdCalculatorHFSS self) -> bool"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_GetUseInterMode(self)


    def UseInterModeOn(self) -> "void":
        """UseInterModeOn(itkIntermodesThresholdCalculatorHFSS self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_UseInterModeOn(self)


    def UseInterModeOff(self) -> "void":
        """UseInterModeOff(itkIntermodesThresholdCalculatorHFSS self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_UseInterModeOff(self)

    __swig_destroy__ = _itkIntermodesThresholdCalculatorPython.delete_itkIntermodesThresholdCalculatorHFSS

    def cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHFSS *":
        """cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHFSS"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdCalculatorHFSS

        Create a new object of the class itkIntermodesThresholdCalculatorHFSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdCalculatorHFSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdCalculatorHFSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdCalculatorHFSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdCalculatorHFSS.Clone = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_Clone, None, itkIntermodesThresholdCalculatorHFSS)
itkIntermodesThresholdCalculatorHFSS.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_SetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHFSS)
itkIntermodesThresholdCalculatorHFSS.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_GetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHFSS)
itkIntermodesThresholdCalculatorHFSS.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_SetUseInterMode, None, itkIntermodesThresholdCalculatorHFSS)
itkIntermodesThresholdCalculatorHFSS.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_GetUseInterMode, None, itkIntermodesThresholdCalculatorHFSS)
itkIntermodesThresholdCalculatorHFSS.UseInterModeOn = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_UseInterModeOn, None, itkIntermodesThresholdCalculatorHFSS)
itkIntermodesThresholdCalculatorHFSS.UseInterModeOff = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_UseInterModeOff, None, itkIntermodesThresholdCalculatorHFSS)
itkIntermodesThresholdCalculatorHFSS_swigregister = _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_swigregister
itkIntermodesThresholdCalculatorHFSS_swigregister(itkIntermodesThresholdCalculatorHFSS)

def itkIntermodesThresholdCalculatorHFSS___New_orig__() -> "itkIntermodesThresholdCalculatorHFSS_Pointer":
    """itkIntermodesThresholdCalculatorHFSS___New_orig__() -> itkIntermodesThresholdCalculatorHFSS_Pointer"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS___New_orig__()

def itkIntermodesThresholdCalculatorHFSS_cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHFSS *":
    """itkIntermodesThresholdCalculatorHFSS_cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHFSS"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFSS_cast(obj)

class itkIntermodesThresholdCalculatorHFUC(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC):
    """Proxy of C++ itkIntermodesThresholdCalculatorHFUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIntermodesThresholdCalculatorHFUC_Pointer":
        """__New_orig__() -> itkIntermodesThresholdCalculatorHFUC_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIntermodesThresholdCalculatorHFUC_Pointer":
        """Clone(itkIntermodesThresholdCalculatorHFUC self) -> itkIntermodesThresholdCalculatorHFUC_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_Clone(self)


    def SetMaximumSmoothingIterations(self, _arg: 'unsigned long long const') -> "void":
        """SetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHFUC self, unsigned long long const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_SetMaximumSmoothingIterations(self, _arg)


    def GetMaximumSmoothingIterations(self) -> "unsigned long long":
        """GetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHFUC self) -> unsigned long long"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, _arg: 'bool const') -> "void":
        """SetUseInterMode(itkIntermodesThresholdCalculatorHFUC self, bool const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_SetUseInterMode(self, _arg)


    def GetUseInterMode(self) -> "bool":
        """GetUseInterMode(itkIntermodesThresholdCalculatorHFUC self) -> bool"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_GetUseInterMode(self)


    def UseInterModeOn(self) -> "void":
        """UseInterModeOn(itkIntermodesThresholdCalculatorHFUC self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_UseInterModeOn(self)


    def UseInterModeOff(self) -> "void":
        """UseInterModeOff(itkIntermodesThresholdCalculatorHFUC self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_UseInterModeOff(self)

    __swig_destroy__ = _itkIntermodesThresholdCalculatorPython.delete_itkIntermodesThresholdCalculatorHFUC

    def cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHFUC *":
        """cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHFUC"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdCalculatorHFUC

        Create a new object of the class itkIntermodesThresholdCalculatorHFUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdCalculatorHFUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdCalculatorHFUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdCalculatorHFUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdCalculatorHFUC.Clone = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_Clone, None, itkIntermodesThresholdCalculatorHFUC)
itkIntermodesThresholdCalculatorHFUC.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_SetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHFUC)
itkIntermodesThresholdCalculatorHFUC.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_GetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHFUC)
itkIntermodesThresholdCalculatorHFUC.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_SetUseInterMode, None, itkIntermodesThresholdCalculatorHFUC)
itkIntermodesThresholdCalculatorHFUC.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_GetUseInterMode, None, itkIntermodesThresholdCalculatorHFUC)
itkIntermodesThresholdCalculatorHFUC.UseInterModeOn = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_UseInterModeOn, None, itkIntermodesThresholdCalculatorHFUC)
itkIntermodesThresholdCalculatorHFUC.UseInterModeOff = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_UseInterModeOff, None, itkIntermodesThresholdCalculatorHFUC)
itkIntermodesThresholdCalculatorHFUC_swigregister = _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_swigregister
itkIntermodesThresholdCalculatorHFUC_swigregister(itkIntermodesThresholdCalculatorHFUC)

def itkIntermodesThresholdCalculatorHFUC___New_orig__() -> "itkIntermodesThresholdCalculatorHFUC_Pointer":
    """itkIntermodesThresholdCalculatorHFUC___New_orig__() -> itkIntermodesThresholdCalculatorHFUC_Pointer"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC___New_orig__()

def itkIntermodesThresholdCalculatorHFUC_cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHFUC *":
    """itkIntermodesThresholdCalculatorHFUC_cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHFUC"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUC_cast(obj)

class itkIntermodesThresholdCalculatorHFUS(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS):
    """Proxy of C++ itkIntermodesThresholdCalculatorHFUS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIntermodesThresholdCalculatorHFUS_Pointer":
        """__New_orig__() -> itkIntermodesThresholdCalculatorHFUS_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIntermodesThresholdCalculatorHFUS_Pointer":
        """Clone(itkIntermodesThresholdCalculatorHFUS self) -> itkIntermodesThresholdCalculatorHFUS_Pointer"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_Clone(self)


    def SetMaximumSmoothingIterations(self, _arg: 'unsigned long long const') -> "void":
        """SetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHFUS self, unsigned long long const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_SetMaximumSmoothingIterations(self, _arg)


    def GetMaximumSmoothingIterations(self) -> "unsigned long long":
        """GetMaximumSmoothingIterations(itkIntermodesThresholdCalculatorHFUS self) -> unsigned long long"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, _arg: 'bool const') -> "void":
        """SetUseInterMode(itkIntermodesThresholdCalculatorHFUS self, bool const _arg)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_SetUseInterMode(self, _arg)


    def GetUseInterMode(self) -> "bool":
        """GetUseInterMode(itkIntermodesThresholdCalculatorHFUS self) -> bool"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_GetUseInterMode(self)


    def UseInterModeOn(self) -> "void":
        """UseInterModeOn(itkIntermodesThresholdCalculatorHFUS self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_UseInterModeOn(self)


    def UseInterModeOff(self) -> "void":
        """UseInterModeOff(itkIntermodesThresholdCalculatorHFUS self)"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_UseInterModeOff(self)

    __swig_destroy__ = _itkIntermodesThresholdCalculatorPython.delete_itkIntermodesThresholdCalculatorHFUS

    def cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHFUS *":
        """cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHFUS"""
        return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdCalculatorHFUS

        Create a new object of the class itkIntermodesThresholdCalculatorHFUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdCalculatorHFUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdCalculatorHFUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdCalculatorHFUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdCalculatorHFUS.Clone = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_Clone, None, itkIntermodesThresholdCalculatorHFUS)
itkIntermodesThresholdCalculatorHFUS.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_SetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHFUS)
itkIntermodesThresholdCalculatorHFUS.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_GetMaximumSmoothingIterations, None, itkIntermodesThresholdCalculatorHFUS)
itkIntermodesThresholdCalculatorHFUS.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_SetUseInterMode, None, itkIntermodesThresholdCalculatorHFUS)
itkIntermodesThresholdCalculatorHFUS.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_GetUseInterMode, None, itkIntermodesThresholdCalculatorHFUS)
itkIntermodesThresholdCalculatorHFUS.UseInterModeOn = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_UseInterModeOn, None, itkIntermodesThresholdCalculatorHFUS)
itkIntermodesThresholdCalculatorHFUS.UseInterModeOff = new_instancemethod(_itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_UseInterModeOff, None, itkIntermodesThresholdCalculatorHFUS)
itkIntermodesThresholdCalculatorHFUS_swigregister = _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_swigregister
itkIntermodesThresholdCalculatorHFUS_swigregister(itkIntermodesThresholdCalculatorHFUS)

def itkIntermodesThresholdCalculatorHFUS___New_orig__() -> "itkIntermodesThresholdCalculatorHFUS_Pointer":
    """itkIntermodesThresholdCalculatorHFUS___New_orig__() -> itkIntermodesThresholdCalculatorHFUS_Pointer"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS___New_orig__()

def itkIntermodesThresholdCalculatorHFUS_cast(obj: 'itkLightObject') -> "itkIntermodesThresholdCalculatorHFUS *":
    """itkIntermodesThresholdCalculatorHFUS_cast(itkLightObject obj) -> itkIntermodesThresholdCalculatorHFUS"""
    return _itkIntermodesThresholdCalculatorPython.itkIntermodesThresholdCalculatorHFUS_cast(obj)


def intermodes_threshold_calculator(*args, **kwargs):
    """Procedural interface for IntermodesThresholdCalculator"""
    import itk
    instance = itk.IntermodesThresholdCalculator.New(*args, **kwargs)
    return instance.__internal_call__()

def intermodes_threshold_calculator_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.IntermodesThresholdCalculator, itkTemplate.itkTemplate):
        intermodes_threshold_calculator.__doc__ = itk.IntermodesThresholdCalculator.values()[0].__doc__
    else:
        intermodes_threshold_calculator.__doc__ = itk.IntermodesThresholdCalculator.__doc__




