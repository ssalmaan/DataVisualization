# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkDivideImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkDivideImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkDivideImageFilterPython
            return _itkDivideImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkDivideImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkDivideImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkDivideImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkBinaryGeneratorImageFilterPython
import itkInPlaceImageFilterBPython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkSimpleDataObjectDecoratorPython
import itkArrayPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython

def itkDivideImageFilterICF3IF3ICF3_New():
  return itkDivideImageFilterICF3IF3ICF3.New()


def itkDivideImageFilterICF2IF2ICF2_New():
  return itkDivideImageFilterICF2IF2ICF2.New()


def itkDivideImageFilterICF3ICF3ICF3_New():
  return itkDivideImageFilterICF3ICF3ICF3.New()


def itkDivideImageFilterICF2ICF2ICF2_New():
  return itkDivideImageFilterICF2ICF2ICF2.New()


def itkDivideImageFilterIF3IF3IF3_New():
  return itkDivideImageFilterIF3IF3IF3.New()


def itkDivideImageFilterIF2IF2IF2_New():
  return itkDivideImageFilterIF2IF2IF2.New()


def itkDivideImageFilterIUS3IUS3IUS3_New():
  return itkDivideImageFilterIUS3IUS3IUS3.New()


def itkDivideImageFilterIUS2IUS2IUS2_New():
  return itkDivideImageFilterIUS2IUS2IUS2.New()


def itkDivideImageFilterIUC3IUC3IUC3_New():
  return itkDivideImageFilterIUC3IUC3IUC3.New()


def itkDivideImageFilterIUC2IUC2IUC2_New():
  return itkDivideImageFilterIUC2IUC2IUC2.New()


def itkDivideImageFilterISS3ISS3ISS3_New():
  return itkDivideImageFilterISS3ISS3ISS3.New()


def itkDivideImageFilterISS2ISS2ISS2_New():
  return itkDivideImageFilterISS2ISS2ISS2.New()

class itkDivideImageFilterICF2ICF2ICF2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF2ICF2ICF2):
    """Proxy of C++ itkDivideImageFilterICF2ICF2ICF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDivideImageFilterICF2ICF2ICF2_Pointer":
        """__New_orig__() -> itkDivideImageFilterICF2ICF2ICF2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDivideImageFilterICF2ICF2ICF2_Pointer":
        """Clone(itkDivideImageFilterICF2ICF2ICF2 self) -> itkDivideImageFilterICF2ICF2ICF2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Clone(self)

    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Input1Input2OutputDivisionOperatorsCheck
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF2ICF2ICF2

    def cast(obj: 'itkLightObject') -> "itkDivideImageFilterICF2ICF2ICF2 *":
        """cast(itkLightObject obj) -> itkDivideImageFilterICF2ICF2ICF2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF2ICF2ICF2

        Create a new object of the class itkDivideImageFilterICF2ICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICF2ICF2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICF2ICF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF2ICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterICF2ICF2ICF2.Clone = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Clone, None, itkDivideImageFilterICF2ICF2ICF2)
itkDivideImageFilterICF2ICF2ICF2_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_swigregister
itkDivideImageFilterICF2ICF2ICF2_swigregister(itkDivideImageFilterICF2ICF2ICF2)

def itkDivideImageFilterICF2ICF2ICF2___New_orig__() -> "itkDivideImageFilterICF2ICF2ICF2_Pointer":
    """itkDivideImageFilterICF2ICF2ICF2___New_orig__() -> itkDivideImageFilterICF2ICF2ICF2_Pointer"""
    return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2___New_orig__()

def itkDivideImageFilterICF2ICF2ICF2_cast(obj: 'itkLightObject') -> "itkDivideImageFilterICF2ICF2ICF2 *":
    """itkDivideImageFilterICF2ICF2ICF2_cast(itkLightObject obj) -> itkDivideImageFilterICF2ICF2ICF2"""
    return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_cast(obj)

class itkDivideImageFilterICF2IF2ICF2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF2IF2ICF2):
    """Proxy of C++ itkDivideImageFilterICF2IF2ICF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDivideImageFilterICF2IF2ICF2_Pointer":
        """__New_orig__() -> itkDivideImageFilterICF2IF2ICF2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDivideImageFilterICF2IF2ICF2_Pointer":
        """Clone(itkDivideImageFilterICF2IF2ICF2 self) -> itkDivideImageFilterICF2IF2ICF2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Clone(self)

    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Input1Input2OutputDivisionOperatorsCheck
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF2IF2ICF2

    def cast(obj: 'itkLightObject') -> "itkDivideImageFilterICF2IF2ICF2 *":
        """cast(itkLightObject obj) -> itkDivideImageFilterICF2IF2ICF2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF2IF2ICF2

        Create a new object of the class itkDivideImageFilterICF2IF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICF2IF2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICF2IF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF2IF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterICF2IF2ICF2.Clone = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Clone, None, itkDivideImageFilterICF2IF2ICF2)
itkDivideImageFilterICF2IF2ICF2_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_swigregister
itkDivideImageFilterICF2IF2ICF2_swigregister(itkDivideImageFilterICF2IF2ICF2)

def itkDivideImageFilterICF2IF2ICF2___New_orig__() -> "itkDivideImageFilterICF2IF2ICF2_Pointer":
    """itkDivideImageFilterICF2IF2ICF2___New_orig__() -> itkDivideImageFilterICF2IF2ICF2_Pointer"""
    return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2___New_orig__()

def itkDivideImageFilterICF2IF2ICF2_cast(obj: 'itkLightObject') -> "itkDivideImageFilterICF2IF2ICF2 *":
    """itkDivideImageFilterICF2IF2ICF2_cast(itkLightObject obj) -> itkDivideImageFilterICF2IF2ICF2"""
    return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_cast(obj)

class itkDivideImageFilterICF3ICF3ICF3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF3ICF3ICF3):
    """Proxy of C++ itkDivideImageFilterICF3ICF3ICF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDivideImageFilterICF3ICF3ICF3_Pointer":
        """__New_orig__() -> itkDivideImageFilterICF3ICF3ICF3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDivideImageFilterICF3ICF3ICF3_Pointer":
        """Clone(itkDivideImageFilterICF3ICF3ICF3 self) -> itkDivideImageFilterICF3ICF3ICF3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Clone(self)

    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Input1Input2OutputDivisionOperatorsCheck
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF3ICF3ICF3

    def cast(obj: 'itkLightObject') -> "itkDivideImageFilterICF3ICF3ICF3 *":
        """cast(itkLightObject obj) -> itkDivideImageFilterICF3ICF3ICF3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF3ICF3ICF3

        Create a new object of the class itkDivideImageFilterICF3ICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICF3ICF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICF3ICF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF3ICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterICF3ICF3ICF3.Clone = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Clone, None, itkDivideImageFilterICF3ICF3ICF3)
itkDivideImageFilterICF3ICF3ICF3_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_swigregister
itkDivideImageFilterICF3ICF3ICF3_swigregister(itkDivideImageFilterICF3ICF3ICF3)

def itkDivideImageFilterICF3ICF3ICF3___New_orig__() -> "itkDivideImageFilterICF3ICF3ICF3_Pointer":
    """itkDivideImageFilterICF3ICF3ICF3___New_orig__() -> itkDivideImageFilterICF3ICF3ICF3_Pointer"""
    return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3___New_orig__()

def itkDivideImageFilterICF3ICF3ICF3_cast(obj: 'itkLightObject') -> "itkDivideImageFilterICF3ICF3ICF3 *":
    """itkDivideImageFilterICF3ICF3ICF3_cast(itkLightObject obj) -> itkDivideImageFilterICF3ICF3ICF3"""
    return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_cast(obj)

class itkDivideImageFilterICF3IF3ICF3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF3IF3ICF3):
    """Proxy of C++ itkDivideImageFilterICF3IF3ICF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDivideImageFilterICF3IF3ICF3_Pointer":
        """__New_orig__() -> itkDivideImageFilterICF3IF3ICF3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDivideImageFilterICF3IF3ICF3_Pointer":
        """Clone(itkDivideImageFilterICF3IF3ICF3 self) -> itkDivideImageFilterICF3IF3ICF3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Clone(self)

    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Input1Input2OutputDivisionOperatorsCheck
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF3IF3ICF3

    def cast(obj: 'itkLightObject') -> "itkDivideImageFilterICF3IF3ICF3 *":
        """cast(itkLightObject obj) -> itkDivideImageFilterICF3IF3ICF3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF3IF3ICF3

        Create a new object of the class itkDivideImageFilterICF3IF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICF3IF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICF3IF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF3IF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterICF3IF3ICF3.Clone = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Clone, None, itkDivideImageFilterICF3IF3ICF3)
itkDivideImageFilterICF3IF3ICF3_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_swigregister
itkDivideImageFilterICF3IF3ICF3_swigregister(itkDivideImageFilterICF3IF3ICF3)

def itkDivideImageFilterICF3IF3ICF3___New_orig__() -> "itkDivideImageFilterICF3IF3ICF3_Pointer":
    """itkDivideImageFilterICF3IF3ICF3___New_orig__() -> itkDivideImageFilterICF3IF3ICF3_Pointer"""
    return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3___New_orig__()

def itkDivideImageFilterICF3IF3ICF3_cast(obj: 'itkLightObject') -> "itkDivideImageFilterICF3IF3ICF3 *":
    """itkDivideImageFilterICF3IF3ICF3_cast(itkLightObject obj) -> itkDivideImageFilterICF3IF3ICF3"""
    return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_cast(obj)

class itkDivideImageFilterIF2IF2IF2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    """Proxy of C++ itkDivideImageFilterIF2IF2IF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDivideImageFilterIF2IF2IF2_Pointer":
        """__New_orig__() -> itkDivideImageFilterIF2IF2IF2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDivideImageFilterIF2IF2IF2_Pointer":
        """Clone(itkDivideImageFilterIF2IF2IF2 self) -> itkDivideImageFilterIF2IF2IF2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Clone(self)

    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Input1Input2OutputDivisionOperatorsCheck
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIF2IF2IF2

    def cast(obj: 'itkLightObject') -> "itkDivideImageFilterIF2IF2IF2 *":
        """cast(itkLightObject obj) -> itkDivideImageFilterIF2IF2IF2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIF2IF2IF2

        Create a new object of the class itkDivideImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIF2IF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIF2IF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIF2IF2IF2.Clone = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Clone, None, itkDivideImageFilterIF2IF2IF2)
itkDivideImageFilterIF2IF2IF2_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_swigregister
itkDivideImageFilterIF2IF2IF2_swigregister(itkDivideImageFilterIF2IF2IF2)

def itkDivideImageFilterIF2IF2IF2___New_orig__() -> "itkDivideImageFilterIF2IF2IF2_Pointer":
    """itkDivideImageFilterIF2IF2IF2___New_orig__() -> itkDivideImageFilterIF2IF2IF2_Pointer"""
    return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2___New_orig__()

def itkDivideImageFilterIF2IF2IF2_cast(obj: 'itkLightObject') -> "itkDivideImageFilterIF2IF2IF2 *":
    """itkDivideImageFilterIF2IF2IF2_cast(itkLightObject obj) -> itkDivideImageFilterIF2IF2IF2"""
    return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_cast(obj)

class itkDivideImageFilterIF3IF3IF3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    """Proxy of C++ itkDivideImageFilterIF3IF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDivideImageFilterIF3IF3IF3_Pointer":
        """__New_orig__() -> itkDivideImageFilterIF3IF3IF3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDivideImageFilterIF3IF3IF3_Pointer":
        """Clone(itkDivideImageFilterIF3IF3IF3 self) -> itkDivideImageFilterIF3IF3IF3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Clone(self)

    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Input1Input2OutputDivisionOperatorsCheck
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIF3IF3IF3

    def cast(obj: 'itkLightObject') -> "itkDivideImageFilterIF3IF3IF3 *":
        """cast(itkLightObject obj) -> itkDivideImageFilterIF3IF3IF3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIF3IF3IF3

        Create a new object of the class itkDivideImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIF3IF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIF3IF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIF3IF3IF3.Clone = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Clone, None, itkDivideImageFilterIF3IF3IF3)
itkDivideImageFilterIF3IF3IF3_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_swigregister
itkDivideImageFilterIF3IF3IF3_swigregister(itkDivideImageFilterIF3IF3IF3)

def itkDivideImageFilterIF3IF3IF3___New_orig__() -> "itkDivideImageFilterIF3IF3IF3_Pointer":
    """itkDivideImageFilterIF3IF3IF3___New_orig__() -> itkDivideImageFilterIF3IF3IF3_Pointer"""
    return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3___New_orig__()

def itkDivideImageFilterIF3IF3IF3_cast(obj: 'itkLightObject') -> "itkDivideImageFilterIF3IF3IF3 *":
    """itkDivideImageFilterIF3IF3IF3_cast(itkLightObject obj) -> itkDivideImageFilterIF3IF3IF3"""
    return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_cast(obj)

class itkDivideImageFilterISS2ISS2ISS2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    """Proxy of C++ itkDivideImageFilterISS2ISS2ISS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDivideImageFilterISS2ISS2ISS2_Pointer":
        """__New_orig__() -> itkDivideImageFilterISS2ISS2ISS2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDivideImageFilterISS2ISS2ISS2_Pointer":
        """Clone(itkDivideImageFilterISS2ISS2ISS2 self) -> itkDivideImageFilterISS2ISS2ISS2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_Clone(self)

    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_Input1Input2OutputDivisionOperatorsCheck
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterISS2ISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkDivideImageFilterISS2ISS2ISS2 *":
        """cast(itkLightObject obj) -> itkDivideImageFilterISS2ISS2ISS2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterISS2ISS2ISS2

        Create a new object of the class itkDivideImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterISS2ISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterISS2ISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterISS2ISS2ISS2.Clone = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_Clone, None, itkDivideImageFilterISS2ISS2ISS2)
itkDivideImageFilterISS2ISS2ISS2_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_swigregister
itkDivideImageFilterISS2ISS2ISS2_swigregister(itkDivideImageFilterISS2ISS2ISS2)

def itkDivideImageFilterISS2ISS2ISS2___New_orig__() -> "itkDivideImageFilterISS2ISS2ISS2_Pointer":
    """itkDivideImageFilterISS2ISS2ISS2___New_orig__() -> itkDivideImageFilterISS2ISS2ISS2_Pointer"""
    return _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2___New_orig__()

def itkDivideImageFilterISS2ISS2ISS2_cast(obj: 'itkLightObject') -> "itkDivideImageFilterISS2ISS2ISS2 *":
    """itkDivideImageFilterISS2ISS2ISS2_cast(itkLightObject obj) -> itkDivideImageFilterISS2ISS2ISS2"""
    return _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_cast(obj)

class itkDivideImageFilterISS3ISS3ISS3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    """Proxy of C++ itkDivideImageFilterISS3ISS3ISS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDivideImageFilterISS3ISS3ISS3_Pointer":
        """__New_orig__() -> itkDivideImageFilterISS3ISS3ISS3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDivideImageFilterISS3ISS3ISS3_Pointer":
        """Clone(itkDivideImageFilterISS3ISS3ISS3 self) -> itkDivideImageFilterISS3ISS3ISS3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_Clone(self)

    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_Input1Input2OutputDivisionOperatorsCheck
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterISS3ISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkDivideImageFilterISS3ISS3ISS3 *":
        """cast(itkLightObject obj) -> itkDivideImageFilterISS3ISS3ISS3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterISS3ISS3ISS3

        Create a new object of the class itkDivideImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterISS3ISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterISS3ISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterISS3ISS3ISS3.Clone = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_Clone, None, itkDivideImageFilterISS3ISS3ISS3)
itkDivideImageFilterISS3ISS3ISS3_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_swigregister
itkDivideImageFilterISS3ISS3ISS3_swigregister(itkDivideImageFilterISS3ISS3ISS3)

def itkDivideImageFilterISS3ISS3ISS3___New_orig__() -> "itkDivideImageFilterISS3ISS3ISS3_Pointer":
    """itkDivideImageFilterISS3ISS3ISS3___New_orig__() -> itkDivideImageFilterISS3ISS3ISS3_Pointer"""
    return _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3___New_orig__()

def itkDivideImageFilterISS3ISS3ISS3_cast(obj: 'itkLightObject') -> "itkDivideImageFilterISS3ISS3ISS3 *":
    """itkDivideImageFilterISS3ISS3ISS3_cast(itkLightObject obj) -> itkDivideImageFilterISS3ISS3ISS3"""
    return _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_cast(obj)

class itkDivideImageFilterIUC2IUC2IUC2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    """Proxy of C++ itkDivideImageFilterIUC2IUC2IUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDivideImageFilterIUC2IUC2IUC2_Pointer":
        """__New_orig__() -> itkDivideImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDivideImageFilterIUC2IUC2IUC2_Pointer":
        """Clone(itkDivideImageFilterIUC2IUC2IUC2 self) -> itkDivideImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Clone(self)

    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Input1Input2OutputDivisionOperatorsCheck
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUC2IUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkDivideImageFilterIUC2IUC2IUC2 *":
        """cast(itkLightObject obj) -> itkDivideImageFilterIUC2IUC2IUC2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUC2IUC2IUC2

        Create a new object of the class itkDivideImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIUC2IUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIUC2IUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUC2IUC2IUC2.Clone = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Clone, None, itkDivideImageFilterIUC2IUC2IUC2)
itkDivideImageFilterIUC2IUC2IUC2_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_swigregister
itkDivideImageFilterIUC2IUC2IUC2_swigregister(itkDivideImageFilterIUC2IUC2IUC2)

def itkDivideImageFilterIUC2IUC2IUC2___New_orig__() -> "itkDivideImageFilterIUC2IUC2IUC2_Pointer":
    """itkDivideImageFilterIUC2IUC2IUC2___New_orig__() -> itkDivideImageFilterIUC2IUC2IUC2_Pointer"""
    return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2___New_orig__()

def itkDivideImageFilterIUC2IUC2IUC2_cast(obj: 'itkLightObject') -> "itkDivideImageFilterIUC2IUC2IUC2 *":
    """itkDivideImageFilterIUC2IUC2IUC2_cast(itkLightObject obj) -> itkDivideImageFilterIUC2IUC2IUC2"""
    return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_cast(obj)

class itkDivideImageFilterIUC3IUC3IUC3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    """Proxy of C++ itkDivideImageFilterIUC3IUC3IUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDivideImageFilterIUC3IUC3IUC3_Pointer":
        """__New_orig__() -> itkDivideImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDivideImageFilterIUC3IUC3IUC3_Pointer":
        """Clone(itkDivideImageFilterIUC3IUC3IUC3 self) -> itkDivideImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Clone(self)

    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Input1Input2OutputDivisionOperatorsCheck
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUC3IUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkDivideImageFilterIUC3IUC3IUC3 *":
        """cast(itkLightObject obj) -> itkDivideImageFilterIUC3IUC3IUC3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUC3IUC3IUC3

        Create a new object of the class itkDivideImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIUC3IUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIUC3IUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUC3IUC3IUC3.Clone = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Clone, None, itkDivideImageFilterIUC3IUC3IUC3)
itkDivideImageFilterIUC3IUC3IUC3_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_swigregister
itkDivideImageFilterIUC3IUC3IUC3_swigregister(itkDivideImageFilterIUC3IUC3IUC3)

def itkDivideImageFilterIUC3IUC3IUC3___New_orig__() -> "itkDivideImageFilterIUC3IUC3IUC3_Pointer":
    """itkDivideImageFilterIUC3IUC3IUC3___New_orig__() -> itkDivideImageFilterIUC3IUC3IUC3_Pointer"""
    return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3___New_orig__()

def itkDivideImageFilterIUC3IUC3IUC3_cast(obj: 'itkLightObject') -> "itkDivideImageFilterIUC3IUC3IUC3 *":
    """itkDivideImageFilterIUC3IUC3IUC3_cast(itkLightObject obj) -> itkDivideImageFilterIUC3IUC3IUC3"""
    return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_cast(obj)

class itkDivideImageFilterIUS2IUS2IUS2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    """Proxy of C++ itkDivideImageFilterIUS2IUS2IUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDivideImageFilterIUS2IUS2IUS2_Pointer":
        """__New_orig__() -> itkDivideImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDivideImageFilterIUS2IUS2IUS2_Pointer":
        """Clone(itkDivideImageFilterIUS2IUS2IUS2 self) -> itkDivideImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Clone(self)

    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Input1Input2OutputDivisionOperatorsCheck
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUS2IUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkDivideImageFilterIUS2IUS2IUS2 *":
        """cast(itkLightObject obj) -> itkDivideImageFilterIUS2IUS2IUS2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUS2IUS2IUS2

        Create a new object of the class itkDivideImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIUS2IUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIUS2IUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUS2IUS2IUS2.Clone = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Clone, None, itkDivideImageFilterIUS2IUS2IUS2)
itkDivideImageFilterIUS2IUS2IUS2_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_swigregister
itkDivideImageFilterIUS2IUS2IUS2_swigregister(itkDivideImageFilterIUS2IUS2IUS2)

def itkDivideImageFilterIUS2IUS2IUS2___New_orig__() -> "itkDivideImageFilterIUS2IUS2IUS2_Pointer":
    """itkDivideImageFilterIUS2IUS2IUS2___New_orig__() -> itkDivideImageFilterIUS2IUS2IUS2_Pointer"""
    return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2___New_orig__()

def itkDivideImageFilterIUS2IUS2IUS2_cast(obj: 'itkLightObject') -> "itkDivideImageFilterIUS2IUS2IUS2 *":
    """itkDivideImageFilterIUS2IUS2IUS2_cast(itkLightObject obj) -> itkDivideImageFilterIUS2IUS2IUS2"""
    return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_cast(obj)

class itkDivideImageFilterIUS3IUS3IUS3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    """Proxy of C++ itkDivideImageFilterIUS3IUS3IUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDivideImageFilterIUS3IUS3IUS3_Pointer":
        """__New_orig__() -> itkDivideImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDivideImageFilterIUS3IUS3IUS3_Pointer":
        """Clone(itkDivideImageFilterIUS3IUS3IUS3 self) -> itkDivideImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Clone(self)

    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Input1Input2OutputDivisionOperatorsCheck
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUS3IUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkDivideImageFilterIUS3IUS3IUS3 *":
        """cast(itkLightObject obj) -> itkDivideImageFilterIUS3IUS3IUS3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUS3IUS3IUS3

        Create a new object of the class itkDivideImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIUS3IUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIUS3IUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUS3IUS3IUS3.Clone = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Clone, None, itkDivideImageFilterIUS3IUS3IUS3)
itkDivideImageFilterIUS3IUS3IUS3_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_swigregister
itkDivideImageFilterIUS3IUS3IUS3_swigregister(itkDivideImageFilterIUS3IUS3IUS3)

def itkDivideImageFilterIUS3IUS3IUS3___New_orig__() -> "itkDivideImageFilterIUS3IUS3IUS3_Pointer":
    """itkDivideImageFilterIUS3IUS3IUS3___New_orig__() -> itkDivideImageFilterIUS3IUS3IUS3_Pointer"""
    return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3___New_orig__()

def itkDivideImageFilterIUS3IUS3IUS3_cast(obj: 'itkLightObject') -> "itkDivideImageFilterIUS3IUS3IUS3 *":
    """itkDivideImageFilterIUS3IUS3IUS3_cast(itkLightObject obj) -> itkDivideImageFilterIUS3IUS3IUS3"""
    return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_cast(obj)


def divide_image_filter(*args, **kwargs):
    """Procedural interface for DivideImageFilter"""
    import itk
    instance = itk.DivideImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def divide_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.DivideImageFilter, itkTemplate.itkTemplate):
        divide_image_filter.__doc__ = itk.DivideImageFilter.values()[0].__doc__
    else:
        divide_image_filter.__doc__ = itk.DivideImageFilter.__doc__




