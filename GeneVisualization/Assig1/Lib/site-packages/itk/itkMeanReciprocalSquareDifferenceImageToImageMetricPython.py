# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMeanReciprocalSquareDifferenceImageToImageMetricPython', [dirname(__file__)])
        except ImportError:
            import _itkMeanReciprocalSquareDifferenceImageToImageMetricPython
            return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMeanReciprocalSquareDifferenceImageToImageMetricPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMeanReciprocalSquareDifferenceImageToImageMetricPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMeanReciprocalSquareDifferenceImageToImageMetricPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImageToImageMetricPython
import ITKCostFunctionsPython
import vnl_least_squares_functionPython
import vnl_matrixPython
import vnl_vectorPython
import stdcomplexPython
import itkArrayPython
import itkOptimizerParametersPython
import itkArray2DPython
import vnl_cost_functionPython
import vnl_unary_functionPython
import itkCostFunctionPython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkSpatialObjectBasePython
import itkSpatialObjectPropertyPython
import itkBoundingBoxPython
import itkMapContainerPython
import itkVectorContainerPython
import itkContinuousIndexPython
import itkAffineTransformPython
import itkTransformBasePython
import itkVariableLengthVectorPython
import itkDiffusionTensor3DPython
import itkMatrixOffsetTransformBasePython
import itkInterpolateImageFunctionPython
import itkImageFunctionBasePython
import itkFunctionBasePython

def itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.New()


def itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.New()


def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.New()


def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.New()


def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.New()


def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.New()


def itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.New()


def itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2(itkImageToImageMetricPython.itkImageToImageMetricIF2IF2):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer":
        """__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer":
        """Clone(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Clone(self)


    def GetLambda(self) -> "double":
        """GetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_GetLambda(self)


    def SetLambda(self, _arg: 'double const') -> "void":
        """SetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_SetLambda(self, _arg)


    def GetDelta(self) -> "double":
        """GetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_GetDelta(self)


    def SetDelta(self, _arg: 'double const') -> "void":
        """SetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_SetDelta(self, _arg)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2

    def cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 *":
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.Clone = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Clone, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_GetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_SetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_GetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_SetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2___New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2___New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 *":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_cast(obj)

class itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3(itkImageToImageMetricPython.itkImageToImageMetricIF3IF3):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer":
        """__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer":
        """Clone(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Clone(self)


    def GetLambda(self) -> "double":
        """GetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_GetLambda(self)


    def SetLambda(self, _arg: 'double const') -> "void":
        """SetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_SetLambda(self, _arg)


    def GetDelta(self) -> "double":
        """GetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_GetDelta(self)


    def SetDelta(self, _arg: 'double const') -> "void":
        """SetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_SetDelta(self, _arg)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3

    def cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 *":
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.Clone = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Clone, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_GetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_SetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_GetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_SetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3___New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3___New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 *":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_cast(obj)

class itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2(itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_Pointer":
        """__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_Pointer":
        """Clone(itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2 self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_Clone(self)


    def GetLambda(self) -> "double":
        """GetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_GetLambda(self)


    def SetLambda(self, _arg: 'double const') -> "void":
        """SetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_SetLambda(self, _arg)


    def GetDelta(self) -> "double":
        """GetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_GetDelta(self)


    def SetDelta(self, _arg: 'double const') -> "void":
        """SetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_SetDelta(self, _arg)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2 *":
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.Clone = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_Clone, None, itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_GetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_SetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_GetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_SetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2)

def itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2___New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_Pointer":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2___New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_Pointer"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2 *":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_cast(obj)

class itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3(itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_Pointer":
        """__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_Pointer":
        """Clone(itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3 self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_Clone(self)


    def GetLambda(self) -> "double":
        """GetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_GetLambda(self)


    def SetLambda(self, _arg: 'double const') -> "void":
        """SetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_SetLambda(self, _arg)


    def GetDelta(self) -> "double":
        """GetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_GetDelta(self)


    def SetDelta(self, _arg: 'double const') -> "void":
        """SetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_SetDelta(self, _arg)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3 *":
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.Clone = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_Clone, None, itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_GetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_SetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_GetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_SetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3)

def itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3___New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_Pointer":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3___New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_Pointer"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3 *":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_cast(obj)

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2(itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer":
        """__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer":
        """Clone(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Clone(self)


    def GetLambda(self) -> "double":
        """GetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_GetLambda(self)


    def SetLambda(self, _arg: 'double const') -> "void":
        """SetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_SetLambda(self, _arg)


    def GetDelta(self) -> "double":
        """GetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_GetDelta(self)


    def SetDelta(self, _arg: 'double const') -> "void":
        """SetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_SetDelta(self, _arg)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.Clone = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Clone, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_GetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_SetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_GetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_SetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2___New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2___New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 *":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_cast(obj)

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3(itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer":
        """__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer":
        """Clone(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Clone(self)


    def GetLambda(self) -> "double":
        """GetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_GetLambda(self)


    def SetLambda(self, _arg: 'double const') -> "void":
        """SetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_SetLambda(self, _arg)


    def GetDelta(self) -> "double":
        """GetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_GetDelta(self)


    def SetDelta(self, _arg: 'double const') -> "void":
        """SetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_SetDelta(self, _arg)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.Clone = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Clone, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_GetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_SetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_GetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_SetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3___New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3___New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 *":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_cast(obj)

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2(itkImageToImageMetricPython.itkImageToImageMetricIUS2IUS2):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer":
        """__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer":
        """Clone(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Clone(self)


    def GetLambda(self) -> "double":
        """GetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_GetLambda(self)


    def SetLambda(self, _arg: 'double const') -> "void":
        """SetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_SetLambda(self, _arg)


    def GetDelta(self) -> "double":
        """GetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_GetDelta(self)


    def SetDelta(self, _arg: 'double const') -> "void":
        """SetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_SetDelta(self, _arg)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.Clone = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Clone, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_GetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_SetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_GetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_SetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2___New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2___New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 *":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_cast(obj)

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3(itkImageToImageMetricPython.itkImageToImageMetricIUS3IUS3):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer":
        """__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer":
        """Clone(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Clone(self)


    def GetLambda(self) -> "double":
        """GetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_GetLambda(self)


    def SetLambda(self, _arg: 'double const') -> "void":
        """SetLambda(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_SetLambda(self, _arg)


    def GetDelta(self) -> "double":
        """GetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_GetDelta(self)


    def SetDelta(self, _arg: 'double const') -> "void":
        """SetDelta(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 self, double const _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_SetDelta(self, _arg)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.Clone = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Clone, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_GetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_SetLambda, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_GetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_SetDelta, None, itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3___New_orig__() -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3___New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_cast(obj: 'itkLightObject') -> "itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 *":
    """itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3"""
    return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_cast(obj)



