# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _vnl_matrix_fixedPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vnl_matrix_fixedPython', [dirname(__file__)])
        except ImportError:
            import _vnl_matrix_fixedPython
            return _vnl_matrix_fixedPython
        if fp is not None:
            try:
                _mod = imp.load_module('_vnl_matrix_fixedPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vnl_matrix_fixedPython = swig_import_helper()
    del swig_import_helper
else:
    import _vnl_matrix_fixedPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vnl_matrixPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
class vnl_matrix_fixedD_2_2(object):
    """Proxy of C++ vnl_matrix_fixedD_2_2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_2_2

    def __init__(self, *args):
        """
        __init__(vnl_matrix_fixedD_2_2 self) -> vnl_matrix_fixedD_2_2
        __init__(vnl_matrix_fixedD_2_2 self, vnl_matrix_fixedD_2_2 rhs) -> vnl_matrix_fixedD_2_2
        __init__(vnl_matrix_fixedD_2_2 self, unsigned int n, unsigned int m) -> vnl_matrix_fixedD_2_2
        __init__(vnl_matrix_fixedD_2_2 self, double value) -> vnl_matrix_fixedD_2_2
        __init__(vnl_matrix_fixedD_2_2 self, double const * datablck) -> vnl_matrix_fixedD_2_2
        __init__(vnl_matrix_fixedD_2_2 self, vnl_matrixD rhs) -> vnl_matrix_fixedD_2_2
        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_2_2(*args))

    def size(self) -> "unsigned int":
        """size(vnl_matrix_fixedD_2_2 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrix_fixedD_2_2 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrix_fixedD_2_2 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrix_fixedD_2_2 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', v: 'double const &') -> "void":
        """put(vnl_matrix_fixedD_2_2 self, unsigned int r, unsigned int c, double const & v)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_put(self, r, c, v)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "double":
        """get(vnl_matrix_fixedD_2_2 self, unsigned int r, unsigned int c) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get(self, r, c)


    def __call__(self, *args) -> "double const &":
        """
        __call__(vnl_matrix_fixedD_2_2 self, unsigned int r, unsigned int c) -> double
        __call__(vnl_matrix_fixedD_2_2 self, unsigned int r, unsigned int c) -> double const &
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___call__(self, *args)


    def fill(self, arg0: 'double') -> "vnl_matrix_fixedD_2_2 &":
        """fill(vnl_matrix_fixedD_2_2 self, double arg0) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_fill(self, arg0)


    def fill_diagonal(self, arg0: 'double') -> "vnl_matrix_fixedD_2_2 &":
        """fill_diagonal(vnl_matrix_fixedD_2_2 self, double arg0) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorD') -> "vnl_matrix_fixedD_2_2 &":
        """set_diagonal(vnl_matrix_fixedD_2_2 self, vnl_vectorD arg0) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'double const *') -> "vnl_matrix_fixedD_2_2 &":
        """copy_in(vnl_matrix_fixedD_2_2 self, double const * arg0) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_copy_in(self, arg0)


    def set(self, *args) -> "vnl_matrix_fixedD_2_2 &":
        """
        set(vnl_matrix_fixedD_2_2 self, unsigned int r, unsigned int c, double const & v) -> vnl_matrix_fixedD_2_2
        set(vnl_matrix_fixedD_2_2 self, double const * d) -> vnl_matrix_fixedD_2_2
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set(self, *args)


    def copy_out(self, arg0: 'double *') -> "void":
        """copy_out(vnl_matrix_fixedD_2_2 self, double * arg0)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_copy_out(self, arg0)


    def inplace_transpose(self) -> "vnl_matrix_fixedD_2_2 &":
        """inplace_transpose(vnl_matrix_fixedD_2_2 self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_inplace_transpose(self)


    def __idiv__(self, s: 'double') -> "vnl_matrix_fixedD_2_2 &":
        """__idiv__(vnl_matrix_fixedD_2_2 self, double s) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___idiv__(self, s)


    def __iadd__(self, *args) -> "vnl_matrix_fixedD_2_2 &":
        """
        __iadd__(vnl_matrix_fixedD_2_2 self, double s) -> vnl_matrix_fixedD_2_2
        __iadd__(vnl_matrix_fixedD_2_2 self, vnl_matrix_fixedD_2_2 m) -> vnl_matrix_fixedD_2_2
        __iadd__(vnl_matrix_fixedD_2_2 self, vnl_matrixD m) -> vnl_matrix_fixedD_2_2
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrix_fixedD_2_2 &":
        """
        __isub__(vnl_matrix_fixedD_2_2 self, double s) -> vnl_matrix_fixedD_2_2
        __isub__(vnl_matrix_fixedD_2_2 self, vnl_matrix_fixedD_2_2 m) -> vnl_matrix_fixedD_2_2
        __isub__(vnl_matrix_fixedD_2_2 self, vnl_matrixD m) -> vnl_matrix_fixedD_2_2
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___isub__(self, *args)


    def __neg__(self) -> "vnl_matrix_fixedD_2_2":
        """__neg__(vnl_matrix_fixedD_2_2 self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___neg__(self)


    def __imul__(self, *args) -> "vnl_matrix_fixedD_2_2 &":
        """
        __imul__(vnl_matrix_fixedD_2_2 self, double s) -> vnl_matrix_fixedD_2_2
        __imul__(vnl_matrix_fixedD_2_2 self, vnl_matrix_fixedD_2_2 s) -> vnl_matrix_fixedD_2_2
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___imul__(self, *args)


    def transpose(self) -> "vnl_matrix_fixedD_2_2":
        """transpose(vnl_matrix_fixedD_2_2 self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrix_fixedD_2_2":
        """conjugate_transpose(vnl_matrix_fixedD_2_2 self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixD', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrix_fixedD_2_2 &":
        """
        update(vnl_matrix_fixedD_2_2 self, vnl_matrixD arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrix_fixedD_2_2
        update(vnl_matrix_fixedD_2_2 self, vnl_matrixD arg0, unsigned int top=0) -> vnl_matrix_fixedD_2_2
        update(vnl_matrix_fixedD_2_2 self, vnl_matrixD arg0) -> vnl_matrix_fixedD_2_2
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrix_fixedD_2_2 &":
        """
        set_column(vnl_matrix_fixedD_2_2 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_2_2
        set_column(vnl_matrix_fixedD_2_2 self, unsigned int i, double value) -> vnl_matrix_fixedD_2_2
        set_column(vnl_matrix_fixedD_2_2 self, unsigned int j, vnl_vectorD v) -> vnl_matrix_fixedD_2_2
        set_column(vnl_matrix_fixedD_2_2 self, unsigned int j, vnl_vector_fixed< double,2 > const & v) -> vnl_matrix_fixedD_2_2
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixD') -> "vnl_matrix_fixedD_2_2 &":
        """set_columns(vnl_matrix_fixedD_2_2 self, unsigned int starting_column, vnl_matrixD M) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrix_fixedD_2_2 &":
        """
        set_row(vnl_matrix_fixedD_2_2 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_2_2
        set_row(vnl_matrix_fixedD_2_2 self, unsigned int i, double value) -> vnl_matrix_fixedD_2_2
        set_row(vnl_matrix_fixedD_2_2 self, unsigned int i, vnl_vectorD arg1) -> vnl_matrix_fixedD_2_2
        set_row(vnl_matrix_fixedD_2_2 self, unsigned int i, vnl_vector_fixed< double,2 > const & arg1) -> vnl_matrix_fixedD_2_2
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrix_fixedD_2_2 self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_2_2 self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_2_2 self, unsigned int r, unsigned int c) -> vnl_matrixD
        extract(vnl_matrix_fixedD_2_2 self, vnl_matrixD sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrix_fixedD_2_2 self, vnl_matrixD sub_matrix, unsigned int top=0)
        extract(vnl_matrix_fixedD_2_2 self, vnl_matrixD sub_matrix)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_extract(self, *args)


    def get_row(self, row: 'unsigned int') -> "vnl_vector_fixed< double,2 >":
        """get_row(vnl_matrix_fixedD_2_2 self, unsigned int row) -> vnl_vector_fixed< double,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_row(self, row)


    def get_column(self, col: 'unsigned int') -> "vnl_vector_fixed< double,2 >":
        """get_column(vnl_matrix_fixedD_2_2 self, unsigned int col) -> vnl_vector_fixed< double,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_column(self, col)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_rows(vnl_matrix_fixedD_2_2 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_columns(vnl_matrix_fixedD_2_2 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_rows(vnl_matrix_fixedD_2_2 self, unsigned int rowstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_columns(vnl_matrix_fixedD_2_2 self, unsigned int colstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorD":
        """get_diagonal(vnl_matrix_fixedD_2_2 self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vector_fixed< double,4 >":
        """flatten_row_major(vnl_matrix_fixedD_2_2 self) -> vnl_vector_fixed< double,4 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vector_fixed< double,4 >":
        """flatten_column_major(vnl_matrix_fixedD_2_2 self) -> vnl_vector_fixed< double,4 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrix_fixedD_2_2 &":
        """set_identity(vnl_matrix_fixedD_2_2 self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_identity(self)


    def flipud(self) -> "vnl_matrix_fixedD_2_2 &":
        """flipud(vnl_matrix_fixedD_2_2 self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_flipud(self)


    def fliplr(self) -> "vnl_matrix_fixedD_2_2 &":
        """fliplr(vnl_matrix_fixedD_2_2 self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_fliplr(self)


    def normalize_rows(self) -> "vnl_matrix_fixedD_2_2 &":
        """normalize_rows(vnl_matrix_fixedD_2_2 self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrix_fixedD_2_2 &":
        """normalize_columns(vnl_matrix_fixedD_2_2 self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_2_2 &":
        """scale_row(vnl_matrix_fixedD_2_2 self, unsigned int row, double value) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_2_2 &":
        """scale_column(vnl_matrix_fixedD_2_2 self, unsigned int col, double value) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrix_fixedD_2_2') -> "void":
        """swap(vnl_matrix_fixedD_2_2 self, vnl_matrix_fixedD_2_2 that)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_swap(self, that)


    def array_one_norm(self) -> "double":
        """array_one_norm(vnl_matrix_fixedD_2_2 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_array_one_norm(self)


    def array_two_norm(self) -> "double":
        """array_two_norm(vnl_matrix_fixedD_2_2 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_array_two_norm(self)


    def array_inf_norm(self) -> "double":
        """array_inf_norm(vnl_matrix_fixedD_2_2 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_array_inf_norm(self)


    def absolute_value_sum(self) -> "double":
        """absolute_value_sum(vnl_matrix_fixedD_2_2 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_absolute_value_sum(self)


    def absolute_value_max(self) -> "double":
        """absolute_value_max(vnl_matrix_fixedD_2_2 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_absolute_value_max(self)


    def operator_one_norm(self) -> "double":
        """operator_one_norm(vnl_matrix_fixedD_2_2 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_operator_one_norm(self)


    def operator_inf_norm(self) -> "double":
        """operator_inf_norm(vnl_matrix_fixedD_2_2 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_operator_inf_norm(self)


    def frobenius_norm(self) -> "double":
        """frobenius_norm(vnl_matrix_fixedD_2_2 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_frobenius_norm(self)


    def fro_norm(self) -> "double":
        """fro_norm(vnl_matrix_fixedD_2_2 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_fro_norm(self)


    def rms(self) -> "double":
        """rms(vnl_matrix_fixedD_2_2 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_rms(self)


    def min_value(self) -> "double":
        """min_value(vnl_matrix_fixedD_2_2 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_min_value(self)


    def max_value(self) -> "double":
        """max_value(vnl_matrix_fixedD_2_2 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrix_fixedD_2_2 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrix_fixedD_2_2 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_arg_max(self)


    def mean(self) -> "double":
        """mean(vnl_matrix_fixedD_2_2 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrix_fixedD_2_2 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrix_fixedD_2_2 self) -> bool
        is_identity(vnl_matrix_fixedD_2_2 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrix_fixedD_2_2 self) -> bool
        is_zero(vnl_matrix_fixedD_2_2 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrix_fixedD_2_2', tol: 'double') -> "bool":
        """is_equal(vnl_matrix_fixedD_2_2 self, vnl_matrix_fixedD_2_2 rhs, double tol) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrix_fixedD_2_2 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrix_fixedD_2_2 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_has_nans(self)


    def assert_size(self, nr_rows: 'unsigned int', nr_cols: 'unsigned int') -> "void":
        """assert_size(vnl_matrix_fixedD_2_2 self, unsigned int nr_rows, unsigned int nr_cols)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_assert_size(self, nr_rows, nr_cols)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrix_fixedD_2_2 self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_assert_finite(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrix_fixedD_2_2 self, istream s) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_read_ascii(self, s)


    def data_block(self, *args) -> "double *":
        """
        data_block(vnl_matrix_fixedD_2_2 self) -> double const
        data_block(vnl_matrix_fixedD_2_2 self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_data_block(self, *args)


    def as_matrix(self) -> "vnl_matrixD const":
        """as_matrix(vnl_matrix_fixedD_2_2 self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_as_matrix(self)


    def begin(self, *args) -> "double const *":
        """
        begin(vnl_matrix_fixedD_2_2 self) -> double
        begin(vnl_matrix_fixedD_2_2 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_begin(self, *args)


    def end(self, *args) -> "double const *":
        """
        end(vnl_matrix_fixedD_2_2 self) -> double
        end(vnl_matrix_fixedD_2_2 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrix_fixedD_2_2') -> "bool":
        """operator_eq(vnl_matrix_fixedD_2_2 self, vnl_matrix_fixedD_2_2 rhs) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_operator_eq(self, rhs)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(vnl_matrix_fixedD_2_2 self, vnl_matrix_fixedD_2_2 that) -> bool
        __eq__(vnl_matrix_fixedD_2_2 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(vnl_matrix_fixedD_2_2 self, vnl_matrix_fixedD_2_2 that) -> bool
        __ne__(vnl_matrix_fixedD_2_2 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___ne__(self, *args)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrix_fixedD_2_2 self, ostream os)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2__print(self, os)


    def add(*args) -> "void":
        """
        add(double const * a, double const * b, double * r)
        add(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_add(*args)

    add = staticmethod(add)

    def sub(*args) -> "void":
        """
        sub(double const * a, double const * b, double * r)
        sub(double const * a, double b, double * r)
        sub(double a, double const * b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_sub(*args)

    sub = staticmethod(sub)

    def mul(*args) -> "void":
        """
        mul(double const * a, double const * b, double * r)
        mul(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_mul(*args)

    mul = staticmethod(mul)

    def div(*args) -> "void":
        """
        div(double const * a, double const * b, double * r)
        div(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_div(*args)

    div = staticmethod(div)

    def equal(a: 'double const *', b: 'double const *') -> "bool":
        """equal(double const * a, double const * b) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_equal(a, b)

    equal = staticmethod(equal)
vnl_matrix_fixedD_2_2.size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_size, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_rows, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.cols = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_cols, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_columns, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.put = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_put, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.get = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.__call__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___call__, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.fill = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_fill, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.fill_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_fill_diagonal, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.set_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_diagonal, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.copy_in = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_copy_in, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.set = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.copy_out = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_copy_out, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.inplace_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_inplace_transpose, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.__idiv__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___idiv__, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.__iadd__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___iadd__, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.__isub__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___isub__, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.__neg__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___neg__, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.__imul__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___imul__, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_transpose, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.conjugate_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_conjugate_transpose, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.update = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_update, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.set_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_column, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.set_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_columns, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.set_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_row, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.extract = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_extract, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.get_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_row, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.get_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_column, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.get_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_rows, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.get_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_columns, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.get_n_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_n_rows, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.get_n_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_n_columns, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.get_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_diagonal, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.flatten_row_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_flatten_row_major, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.flatten_column_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_flatten_column_major, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.set_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_identity, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.flipud = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_flipud, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.fliplr = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_fliplr, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.normalize_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_normalize_rows, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.normalize_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_normalize_columns, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.scale_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_scale_row, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.scale_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_scale_column, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.swap = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_swap, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.array_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_array_one_norm, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.array_two_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_array_two_norm, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.array_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_array_inf_norm, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.absolute_value_sum = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_absolute_value_sum, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.absolute_value_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_absolute_value_max, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.operator_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_operator_one_norm, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.operator_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_operator_inf_norm, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.frobenius_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_frobenius_norm, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.fro_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_fro_norm, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.rms = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_rms, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.min_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_min_value, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.max_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_max_value, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.arg_min = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_arg_min, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.arg_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_arg_max, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.mean = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_mean, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.empty = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_empty, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.is_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_is_identity, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.is_zero = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_is_zero, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.is_equal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_is_equal, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.is_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_is_finite, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.has_nans = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_has_nans, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.assert_size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_assert_size, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.assert_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_assert_finite, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.read_ascii = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_read_ascii, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.data_block = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_data_block, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.as_matrix = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_as_matrix, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.begin = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_begin, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.end = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_end, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.operator_eq = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_operator_eq, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.__eq__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___eq__, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2.__ne__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___ne__, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2._print = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2__print, None, vnl_matrix_fixedD_2_2)
vnl_matrix_fixedD_2_2_swigregister = _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_swigregister
vnl_matrix_fixedD_2_2_swigregister(vnl_matrix_fixedD_2_2)

def vnl_matrix_fixedD_2_2_add(*args) -> "void":
    """
    add(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_2_2_add(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_add(*args)

def vnl_matrix_fixedD_2_2_sub(*args) -> "void":
    """
    sub(double const * a, double const * b, double * r)
    sub(double const * a, double b, double * r)
    vnl_matrix_fixedD_2_2_sub(double a, double const * b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_sub(*args)

def vnl_matrix_fixedD_2_2_mul(*args) -> "void":
    """
    mul(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_2_2_mul(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_mul(*args)

def vnl_matrix_fixedD_2_2_div(*args) -> "void":
    """
    div(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_2_2_div(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_div(*args)

def vnl_matrix_fixedD_2_2_equal(a: 'double const *', b: 'double const *') -> "bool":
    """vnl_matrix_fixedD_2_2_equal(double const * a, double const * b) -> bool"""
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_equal(a, b)

class vnl_matrix_fixedD_2_3(object):
    """Proxy of C++ vnl_matrix_fixedD_2_3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_2_3

    def __init__(self, *args):
        """
        __init__(vnl_matrix_fixedD_2_3 self) -> vnl_matrix_fixedD_2_3
        __init__(vnl_matrix_fixedD_2_3 self, vnl_matrix_fixedD_2_3 rhs) -> vnl_matrix_fixedD_2_3
        __init__(vnl_matrix_fixedD_2_3 self, unsigned int n, unsigned int m) -> vnl_matrix_fixedD_2_3
        __init__(vnl_matrix_fixedD_2_3 self, double value) -> vnl_matrix_fixedD_2_3
        __init__(vnl_matrix_fixedD_2_3 self, double const * datablck) -> vnl_matrix_fixedD_2_3
        __init__(vnl_matrix_fixedD_2_3 self, vnl_matrixD rhs) -> vnl_matrix_fixedD_2_3
        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_2_3(*args))

    def size(self) -> "unsigned int":
        """size(vnl_matrix_fixedD_2_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrix_fixedD_2_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrix_fixedD_2_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrix_fixedD_2_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', v: 'double const &') -> "void":
        """put(vnl_matrix_fixedD_2_3 self, unsigned int r, unsigned int c, double const & v)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_put(self, r, c, v)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "double":
        """get(vnl_matrix_fixedD_2_3 self, unsigned int r, unsigned int c) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get(self, r, c)


    def __call__(self, *args) -> "double const &":
        """
        __call__(vnl_matrix_fixedD_2_3 self, unsigned int r, unsigned int c) -> double
        __call__(vnl_matrix_fixedD_2_3 self, unsigned int r, unsigned int c) -> double const &
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___call__(self, *args)


    def fill(self, arg0: 'double') -> "vnl_matrix_fixedD_2_3 &":
        """fill(vnl_matrix_fixedD_2_3 self, double arg0) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_fill(self, arg0)


    def fill_diagonal(self, arg0: 'double') -> "vnl_matrix_fixedD_2_3 &":
        """fill_diagonal(vnl_matrix_fixedD_2_3 self, double arg0) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorD') -> "vnl_matrix_fixedD_2_3 &":
        """set_diagonal(vnl_matrix_fixedD_2_3 self, vnl_vectorD arg0) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'double const *') -> "vnl_matrix_fixedD_2_3 &":
        """copy_in(vnl_matrix_fixedD_2_3 self, double const * arg0) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_copy_in(self, arg0)


    def set(self, *args) -> "vnl_matrix_fixedD_2_3 &":
        """
        set(vnl_matrix_fixedD_2_3 self, unsigned int r, unsigned int c, double const & v) -> vnl_matrix_fixedD_2_3
        set(vnl_matrix_fixedD_2_3 self, double const * d) -> vnl_matrix_fixedD_2_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set(self, *args)


    def copy_out(self, arg0: 'double *') -> "void":
        """copy_out(vnl_matrix_fixedD_2_3 self, double * arg0)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_copy_out(self, arg0)


    def inplace_transpose(self) -> "vnl_matrix_fixedD_2_3 &":
        """inplace_transpose(vnl_matrix_fixedD_2_3 self) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_inplace_transpose(self)


    def __idiv__(self, s: 'double') -> "vnl_matrix_fixedD_2_3 &":
        """__idiv__(vnl_matrix_fixedD_2_3 self, double s) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___idiv__(self, s)


    def __iadd__(self, *args) -> "vnl_matrix_fixedD_2_3 &":
        """
        __iadd__(vnl_matrix_fixedD_2_3 self, double s) -> vnl_matrix_fixedD_2_3
        __iadd__(vnl_matrix_fixedD_2_3 self, vnl_matrix_fixedD_2_3 m) -> vnl_matrix_fixedD_2_3
        __iadd__(vnl_matrix_fixedD_2_3 self, vnl_matrixD m) -> vnl_matrix_fixedD_2_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrix_fixedD_2_3 &":
        """
        __isub__(vnl_matrix_fixedD_2_3 self, double s) -> vnl_matrix_fixedD_2_3
        __isub__(vnl_matrix_fixedD_2_3 self, vnl_matrix_fixedD_2_3 m) -> vnl_matrix_fixedD_2_3
        __isub__(vnl_matrix_fixedD_2_3 self, vnl_matrixD m) -> vnl_matrix_fixedD_2_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___isub__(self, *args)


    def __neg__(self) -> "vnl_matrix_fixedD_2_3":
        """__neg__(vnl_matrix_fixedD_2_3 self) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___neg__(self)


    def __imul__(self, *args) -> "vnl_matrix_fixedD_2_3 &":
        """
        __imul__(vnl_matrix_fixedD_2_3 self, double s) -> vnl_matrix_fixedD_2_3
        __imul__(vnl_matrix_fixedD_2_3 self, vnl_matrix_fixedD_3_3 s) -> vnl_matrix_fixedD_2_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___imul__(self, *args)


    def transpose(self) -> "vnl_matrix_fixed< double,3,2 >":
        """transpose(vnl_matrix_fixedD_2_3 self) -> vnl_matrix_fixed< double,3,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrix_fixed< double,3,2 >":
        """conjugate_transpose(vnl_matrix_fixedD_2_3 self) -> vnl_matrix_fixed< double,3,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixD', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrix_fixedD_2_3 &":
        """
        update(vnl_matrix_fixedD_2_3 self, vnl_matrixD arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrix_fixedD_2_3
        update(vnl_matrix_fixedD_2_3 self, vnl_matrixD arg0, unsigned int top=0) -> vnl_matrix_fixedD_2_3
        update(vnl_matrix_fixedD_2_3 self, vnl_matrixD arg0) -> vnl_matrix_fixedD_2_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrix_fixedD_2_3 &":
        """
        set_column(vnl_matrix_fixedD_2_3 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_2_3
        set_column(vnl_matrix_fixedD_2_3 self, unsigned int i, double value) -> vnl_matrix_fixedD_2_3
        set_column(vnl_matrix_fixedD_2_3 self, unsigned int j, vnl_vectorD v) -> vnl_matrix_fixedD_2_3
        set_column(vnl_matrix_fixedD_2_3 self, unsigned int j, vnl_vector_fixed< double,2 > const & v) -> vnl_matrix_fixedD_2_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixD') -> "vnl_matrix_fixedD_2_3 &":
        """set_columns(vnl_matrix_fixedD_2_3 self, unsigned int starting_column, vnl_matrixD M) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrix_fixedD_2_3 &":
        """
        set_row(vnl_matrix_fixedD_2_3 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_2_3
        set_row(vnl_matrix_fixedD_2_3 self, unsigned int i, double value) -> vnl_matrix_fixedD_2_3
        set_row(vnl_matrix_fixedD_2_3 self, unsigned int i, vnl_vectorD arg1) -> vnl_matrix_fixedD_2_3
        set_row(vnl_matrix_fixedD_2_3 self, unsigned int i, vnl_vector_fixed< double,3 > const & arg1) -> vnl_matrix_fixedD_2_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrix_fixedD_2_3 self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_2_3 self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_2_3 self, unsigned int r, unsigned int c) -> vnl_matrixD
        extract(vnl_matrix_fixedD_2_3 self, vnl_matrixD sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrix_fixedD_2_3 self, vnl_matrixD sub_matrix, unsigned int top=0)
        extract(vnl_matrix_fixedD_2_3 self, vnl_matrixD sub_matrix)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_extract(self, *args)


    def get_row(self, row: 'unsigned int') -> "vnl_vector_fixed< double,3 >":
        """get_row(vnl_matrix_fixedD_2_3 self, unsigned int row) -> vnl_vector_fixed< double,3 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_row(self, row)


    def get_column(self, col: 'unsigned int') -> "vnl_vector_fixed< double,2 >":
        """get_column(vnl_matrix_fixedD_2_3 self, unsigned int col) -> vnl_vector_fixed< double,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_column(self, col)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_rows(vnl_matrix_fixedD_2_3 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_columns(vnl_matrix_fixedD_2_3 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_rows(vnl_matrix_fixedD_2_3 self, unsigned int rowstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_columns(vnl_matrix_fixedD_2_3 self, unsigned int colstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorD":
        """get_diagonal(vnl_matrix_fixedD_2_3 self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vector_fixed< double,6 >":
        """flatten_row_major(vnl_matrix_fixedD_2_3 self) -> vnl_vector_fixed< double,6 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vector_fixed< double,6 >":
        """flatten_column_major(vnl_matrix_fixedD_2_3 self) -> vnl_vector_fixed< double,6 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrix_fixedD_2_3 &":
        """set_identity(vnl_matrix_fixedD_2_3 self) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_identity(self)


    def flipud(self) -> "vnl_matrix_fixedD_2_3 &":
        """flipud(vnl_matrix_fixedD_2_3 self) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_flipud(self)


    def fliplr(self) -> "vnl_matrix_fixedD_2_3 &":
        """fliplr(vnl_matrix_fixedD_2_3 self) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_fliplr(self)


    def normalize_rows(self) -> "vnl_matrix_fixedD_2_3 &":
        """normalize_rows(vnl_matrix_fixedD_2_3 self) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrix_fixedD_2_3 &":
        """normalize_columns(vnl_matrix_fixedD_2_3 self) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_2_3 &":
        """scale_row(vnl_matrix_fixedD_2_3 self, unsigned int row, double value) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_2_3 &":
        """scale_column(vnl_matrix_fixedD_2_3 self, unsigned int col, double value) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrix_fixedD_2_3') -> "void":
        """swap(vnl_matrix_fixedD_2_3 self, vnl_matrix_fixedD_2_3 that)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_swap(self, that)


    def array_one_norm(self) -> "double":
        """array_one_norm(vnl_matrix_fixedD_2_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_array_one_norm(self)


    def array_two_norm(self) -> "double":
        """array_two_norm(vnl_matrix_fixedD_2_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_array_two_norm(self)


    def array_inf_norm(self) -> "double":
        """array_inf_norm(vnl_matrix_fixedD_2_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_array_inf_norm(self)


    def absolute_value_sum(self) -> "double":
        """absolute_value_sum(vnl_matrix_fixedD_2_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_absolute_value_sum(self)


    def absolute_value_max(self) -> "double":
        """absolute_value_max(vnl_matrix_fixedD_2_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_absolute_value_max(self)


    def operator_one_norm(self) -> "double":
        """operator_one_norm(vnl_matrix_fixedD_2_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_operator_one_norm(self)


    def operator_inf_norm(self) -> "double":
        """operator_inf_norm(vnl_matrix_fixedD_2_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_operator_inf_norm(self)


    def frobenius_norm(self) -> "double":
        """frobenius_norm(vnl_matrix_fixedD_2_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_frobenius_norm(self)


    def fro_norm(self) -> "double":
        """fro_norm(vnl_matrix_fixedD_2_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_fro_norm(self)


    def rms(self) -> "double":
        """rms(vnl_matrix_fixedD_2_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_rms(self)


    def min_value(self) -> "double":
        """min_value(vnl_matrix_fixedD_2_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_min_value(self)


    def max_value(self) -> "double":
        """max_value(vnl_matrix_fixedD_2_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrix_fixedD_2_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrix_fixedD_2_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_arg_max(self)


    def mean(self) -> "double":
        """mean(vnl_matrix_fixedD_2_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrix_fixedD_2_3 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrix_fixedD_2_3 self) -> bool
        is_identity(vnl_matrix_fixedD_2_3 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrix_fixedD_2_3 self) -> bool
        is_zero(vnl_matrix_fixedD_2_3 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrix_fixedD_2_3', tol: 'double') -> "bool":
        """is_equal(vnl_matrix_fixedD_2_3 self, vnl_matrix_fixedD_2_3 rhs, double tol) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrix_fixedD_2_3 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrix_fixedD_2_3 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_has_nans(self)


    def assert_size(self, nr_rows: 'unsigned int', nr_cols: 'unsigned int') -> "void":
        """assert_size(vnl_matrix_fixedD_2_3 self, unsigned int nr_rows, unsigned int nr_cols)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_assert_size(self, nr_rows, nr_cols)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrix_fixedD_2_3 self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_assert_finite(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrix_fixedD_2_3 self, istream s) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_read_ascii(self, s)


    def data_block(self, *args) -> "double *":
        """
        data_block(vnl_matrix_fixedD_2_3 self) -> double const
        data_block(vnl_matrix_fixedD_2_3 self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_data_block(self, *args)


    def as_matrix(self) -> "vnl_matrixD const":
        """as_matrix(vnl_matrix_fixedD_2_3 self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_as_matrix(self)


    def begin(self, *args) -> "double const *":
        """
        begin(vnl_matrix_fixedD_2_3 self) -> double
        begin(vnl_matrix_fixedD_2_3 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_begin(self, *args)


    def end(self, *args) -> "double const *":
        """
        end(vnl_matrix_fixedD_2_3 self) -> double
        end(vnl_matrix_fixedD_2_3 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrix_fixedD_2_3') -> "bool":
        """operator_eq(vnl_matrix_fixedD_2_3 self, vnl_matrix_fixedD_2_3 rhs) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_operator_eq(self, rhs)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(vnl_matrix_fixedD_2_3 self, vnl_matrix_fixedD_2_3 that) -> bool
        __eq__(vnl_matrix_fixedD_2_3 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(vnl_matrix_fixedD_2_3 self, vnl_matrix_fixedD_2_3 that) -> bool
        __ne__(vnl_matrix_fixedD_2_3 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___ne__(self, *args)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrix_fixedD_2_3 self, ostream os)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3__print(self, os)


    def add(*args) -> "void":
        """
        add(double const * a, double const * b, double * r)
        add(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_add(*args)

    add = staticmethod(add)

    def sub(*args) -> "void":
        """
        sub(double const * a, double const * b, double * r)
        sub(double const * a, double b, double * r)
        sub(double a, double const * b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_sub(*args)

    sub = staticmethod(sub)

    def mul(*args) -> "void":
        """
        mul(double const * a, double const * b, double * r)
        mul(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_mul(*args)

    mul = staticmethod(mul)

    def div(*args) -> "void":
        """
        div(double const * a, double const * b, double * r)
        div(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_div(*args)

    div = staticmethod(div)

    def equal(a: 'double const *', b: 'double const *') -> "bool":
        """equal(double const * a, double const * b) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_equal(a, b)

    equal = staticmethod(equal)
vnl_matrix_fixedD_2_3.size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_size, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_rows, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.cols = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_cols, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_columns, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.put = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_put, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.get = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.__call__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___call__, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.fill = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_fill, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.fill_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_fill_diagonal, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.set_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_diagonal, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.copy_in = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_copy_in, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.set = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.copy_out = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_copy_out, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.inplace_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_inplace_transpose, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.__idiv__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___idiv__, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.__iadd__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___iadd__, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.__isub__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___isub__, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.__neg__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___neg__, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.__imul__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___imul__, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_transpose, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.conjugate_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_conjugate_transpose, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.update = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_update, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.set_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_column, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.set_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_columns, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.set_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_row, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.extract = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_extract, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.get_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_row, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.get_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_column, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.get_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_rows, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.get_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_columns, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.get_n_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_n_rows, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.get_n_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_n_columns, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.get_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_diagonal, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.flatten_row_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_flatten_row_major, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.flatten_column_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_flatten_column_major, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.set_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_identity, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.flipud = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_flipud, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.fliplr = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_fliplr, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.normalize_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_normalize_rows, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.normalize_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_normalize_columns, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.scale_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_scale_row, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.scale_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_scale_column, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.swap = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_swap, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.array_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_array_one_norm, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.array_two_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_array_two_norm, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.array_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_array_inf_norm, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.absolute_value_sum = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_absolute_value_sum, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.absolute_value_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_absolute_value_max, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.operator_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_operator_one_norm, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.operator_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_operator_inf_norm, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.frobenius_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_frobenius_norm, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.fro_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_fro_norm, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.rms = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_rms, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.min_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_min_value, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.max_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_max_value, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.arg_min = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_arg_min, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.arg_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_arg_max, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.mean = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_mean, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.empty = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_empty, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.is_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_is_identity, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.is_zero = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_is_zero, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.is_equal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_is_equal, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.is_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_is_finite, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.has_nans = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_has_nans, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.assert_size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_assert_size, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.assert_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_assert_finite, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.read_ascii = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_read_ascii, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.data_block = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_data_block, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.as_matrix = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_as_matrix, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.begin = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_begin, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.end = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_end, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.operator_eq = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_operator_eq, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.__eq__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___eq__, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3.__ne__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___ne__, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3._print = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3__print, None, vnl_matrix_fixedD_2_3)
vnl_matrix_fixedD_2_3_swigregister = _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_swigregister
vnl_matrix_fixedD_2_3_swigregister(vnl_matrix_fixedD_2_3)

def vnl_matrix_fixedD_2_3_add(*args) -> "void":
    """
    add(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_2_3_add(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_add(*args)

def vnl_matrix_fixedD_2_3_sub(*args) -> "void":
    """
    sub(double const * a, double const * b, double * r)
    sub(double const * a, double b, double * r)
    vnl_matrix_fixedD_2_3_sub(double a, double const * b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_sub(*args)

def vnl_matrix_fixedD_2_3_mul(*args) -> "void":
    """
    mul(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_2_3_mul(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_mul(*args)

def vnl_matrix_fixedD_2_3_div(*args) -> "void":
    """
    div(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_2_3_div(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_div(*args)

def vnl_matrix_fixedD_2_3_equal(a: 'double const *', b: 'double const *') -> "bool":
    """vnl_matrix_fixedD_2_3_equal(double const * a, double const * b) -> bool"""
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_equal(a, b)

class vnl_matrix_fixedD_2_6(object):
    """Proxy of C++ vnl_matrix_fixedD_2_6 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_2_6

    def __init__(self, *args):
        """
        __init__(vnl_matrix_fixedD_2_6 self) -> vnl_matrix_fixedD_2_6
        __init__(vnl_matrix_fixedD_2_6 self, vnl_matrix_fixedD_2_6 rhs) -> vnl_matrix_fixedD_2_6
        __init__(vnl_matrix_fixedD_2_6 self, unsigned int n, unsigned int m) -> vnl_matrix_fixedD_2_6
        __init__(vnl_matrix_fixedD_2_6 self, double value) -> vnl_matrix_fixedD_2_6
        __init__(vnl_matrix_fixedD_2_6 self, double const * datablck) -> vnl_matrix_fixedD_2_6
        __init__(vnl_matrix_fixedD_2_6 self, vnl_matrixD rhs) -> vnl_matrix_fixedD_2_6
        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_2_6(*args))

    def size(self) -> "unsigned int":
        """size(vnl_matrix_fixedD_2_6 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrix_fixedD_2_6 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrix_fixedD_2_6 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrix_fixedD_2_6 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', v: 'double const &') -> "void":
        """put(vnl_matrix_fixedD_2_6 self, unsigned int r, unsigned int c, double const & v)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_put(self, r, c, v)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "double":
        """get(vnl_matrix_fixedD_2_6 self, unsigned int r, unsigned int c) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get(self, r, c)


    def __call__(self, *args) -> "double const &":
        """
        __call__(vnl_matrix_fixedD_2_6 self, unsigned int r, unsigned int c) -> double
        __call__(vnl_matrix_fixedD_2_6 self, unsigned int r, unsigned int c) -> double const &
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___call__(self, *args)


    def fill(self, arg0: 'double') -> "vnl_matrix_fixedD_2_6 &":
        """fill(vnl_matrix_fixedD_2_6 self, double arg0) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_fill(self, arg0)


    def fill_diagonal(self, arg0: 'double') -> "vnl_matrix_fixedD_2_6 &":
        """fill_diagonal(vnl_matrix_fixedD_2_6 self, double arg0) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorD') -> "vnl_matrix_fixedD_2_6 &":
        """set_diagonal(vnl_matrix_fixedD_2_6 self, vnl_vectorD arg0) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'double const *') -> "vnl_matrix_fixedD_2_6 &":
        """copy_in(vnl_matrix_fixedD_2_6 self, double const * arg0) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_copy_in(self, arg0)


    def set(self, *args) -> "vnl_matrix_fixedD_2_6 &":
        """
        set(vnl_matrix_fixedD_2_6 self, unsigned int r, unsigned int c, double const & v) -> vnl_matrix_fixedD_2_6
        set(vnl_matrix_fixedD_2_6 self, double const * d) -> vnl_matrix_fixedD_2_6
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set(self, *args)


    def copy_out(self, arg0: 'double *') -> "void":
        """copy_out(vnl_matrix_fixedD_2_6 self, double * arg0)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_copy_out(self, arg0)


    def inplace_transpose(self) -> "vnl_matrix_fixedD_2_6 &":
        """inplace_transpose(vnl_matrix_fixedD_2_6 self) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_inplace_transpose(self)


    def __idiv__(self, s: 'double') -> "vnl_matrix_fixedD_2_6 &":
        """__idiv__(vnl_matrix_fixedD_2_6 self, double s) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___idiv__(self, s)


    def __iadd__(self, *args) -> "vnl_matrix_fixedD_2_6 &":
        """
        __iadd__(vnl_matrix_fixedD_2_6 self, double s) -> vnl_matrix_fixedD_2_6
        __iadd__(vnl_matrix_fixedD_2_6 self, vnl_matrix_fixedD_2_6 m) -> vnl_matrix_fixedD_2_6
        __iadd__(vnl_matrix_fixedD_2_6 self, vnl_matrixD m) -> vnl_matrix_fixedD_2_6
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrix_fixedD_2_6 &":
        """
        __isub__(vnl_matrix_fixedD_2_6 self, double s) -> vnl_matrix_fixedD_2_6
        __isub__(vnl_matrix_fixedD_2_6 self, vnl_matrix_fixedD_2_6 m) -> vnl_matrix_fixedD_2_6
        __isub__(vnl_matrix_fixedD_2_6 self, vnl_matrixD m) -> vnl_matrix_fixedD_2_6
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___isub__(self, *args)


    def __neg__(self) -> "vnl_matrix_fixedD_2_6":
        """__neg__(vnl_matrix_fixedD_2_6 self) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___neg__(self)


    def __imul__(self, *args) -> "vnl_matrix_fixedD_2_6 &":
        """
        __imul__(vnl_matrix_fixedD_2_6 self, double s) -> vnl_matrix_fixedD_2_6
        __imul__(vnl_matrix_fixedD_2_6 self, vnl_matrix_fixed< double,6,6 > const & s) -> vnl_matrix_fixedD_2_6
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___imul__(self, *args)


    def transpose(self) -> "vnl_matrix_fixed< double,6,2 >":
        """transpose(vnl_matrix_fixedD_2_6 self) -> vnl_matrix_fixed< double,6,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrix_fixed< double,6,2 >":
        """conjugate_transpose(vnl_matrix_fixedD_2_6 self) -> vnl_matrix_fixed< double,6,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixD', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrix_fixedD_2_6 &":
        """
        update(vnl_matrix_fixedD_2_6 self, vnl_matrixD arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrix_fixedD_2_6
        update(vnl_matrix_fixedD_2_6 self, vnl_matrixD arg0, unsigned int top=0) -> vnl_matrix_fixedD_2_6
        update(vnl_matrix_fixedD_2_6 self, vnl_matrixD arg0) -> vnl_matrix_fixedD_2_6
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrix_fixedD_2_6 &":
        """
        set_column(vnl_matrix_fixedD_2_6 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_2_6
        set_column(vnl_matrix_fixedD_2_6 self, unsigned int i, double value) -> vnl_matrix_fixedD_2_6
        set_column(vnl_matrix_fixedD_2_6 self, unsigned int j, vnl_vectorD v) -> vnl_matrix_fixedD_2_6
        set_column(vnl_matrix_fixedD_2_6 self, unsigned int j, vnl_vector_fixed< double,2 > const & v) -> vnl_matrix_fixedD_2_6
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixD') -> "vnl_matrix_fixedD_2_6 &":
        """set_columns(vnl_matrix_fixedD_2_6 self, unsigned int starting_column, vnl_matrixD M) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrix_fixedD_2_6 &":
        """
        set_row(vnl_matrix_fixedD_2_6 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_2_6
        set_row(vnl_matrix_fixedD_2_6 self, unsigned int i, double value) -> vnl_matrix_fixedD_2_6
        set_row(vnl_matrix_fixedD_2_6 self, unsigned int i, vnl_vectorD arg1) -> vnl_matrix_fixedD_2_6
        set_row(vnl_matrix_fixedD_2_6 self, unsigned int i, vnl_vector_fixed< double,6 > const & arg1) -> vnl_matrix_fixedD_2_6
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrix_fixedD_2_6 self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_2_6 self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_2_6 self, unsigned int r, unsigned int c) -> vnl_matrixD
        extract(vnl_matrix_fixedD_2_6 self, vnl_matrixD sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrix_fixedD_2_6 self, vnl_matrixD sub_matrix, unsigned int top=0)
        extract(vnl_matrix_fixedD_2_6 self, vnl_matrixD sub_matrix)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_extract(self, *args)


    def get_row(self, row: 'unsigned int') -> "vnl_vector_fixed< double,6 >":
        """get_row(vnl_matrix_fixedD_2_6 self, unsigned int row) -> vnl_vector_fixed< double,6 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_row(self, row)


    def get_column(self, col: 'unsigned int') -> "vnl_vector_fixed< double,2 >":
        """get_column(vnl_matrix_fixedD_2_6 self, unsigned int col) -> vnl_vector_fixed< double,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_column(self, col)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_rows(vnl_matrix_fixedD_2_6 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_columns(vnl_matrix_fixedD_2_6 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_rows(vnl_matrix_fixedD_2_6 self, unsigned int rowstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_columns(vnl_matrix_fixedD_2_6 self, unsigned int colstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorD":
        """get_diagonal(vnl_matrix_fixedD_2_6 self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vector_fixed< double,12 >":
        """flatten_row_major(vnl_matrix_fixedD_2_6 self) -> vnl_vector_fixed< double,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vector_fixed< double,12 >":
        """flatten_column_major(vnl_matrix_fixedD_2_6 self) -> vnl_vector_fixed< double,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrix_fixedD_2_6 &":
        """set_identity(vnl_matrix_fixedD_2_6 self) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_identity(self)


    def flipud(self) -> "vnl_matrix_fixedD_2_6 &":
        """flipud(vnl_matrix_fixedD_2_6 self) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_flipud(self)


    def fliplr(self) -> "vnl_matrix_fixedD_2_6 &":
        """fliplr(vnl_matrix_fixedD_2_6 self) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_fliplr(self)


    def normalize_rows(self) -> "vnl_matrix_fixedD_2_6 &":
        """normalize_rows(vnl_matrix_fixedD_2_6 self) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrix_fixedD_2_6 &":
        """normalize_columns(vnl_matrix_fixedD_2_6 self) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_2_6 &":
        """scale_row(vnl_matrix_fixedD_2_6 self, unsigned int row, double value) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_2_6 &":
        """scale_column(vnl_matrix_fixedD_2_6 self, unsigned int col, double value) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrix_fixedD_2_6') -> "void":
        """swap(vnl_matrix_fixedD_2_6 self, vnl_matrix_fixedD_2_6 that)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_swap(self, that)


    def array_one_norm(self) -> "double":
        """array_one_norm(vnl_matrix_fixedD_2_6 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_array_one_norm(self)


    def array_two_norm(self) -> "double":
        """array_two_norm(vnl_matrix_fixedD_2_6 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_array_two_norm(self)


    def array_inf_norm(self) -> "double":
        """array_inf_norm(vnl_matrix_fixedD_2_6 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_array_inf_norm(self)


    def absolute_value_sum(self) -> "double":
        """absolute_value_sum(vnl_matrix_fixedD_2_6 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_absolute_value_sum(self)


    def absolute_value_max(self) -> "double":
        """absolute_value_max(vnl_matrix_fixedD_2_6 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_absolute_value_max(self)


    def operator_one_norm(self) -> "double":
        """operator_one_norm(vnl_matrix_fixedD_2_6 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_operator_one_norm(self)


    def operator_inf_norm(self) -> "double":
        """operator_inf_norm(vnl_matrix_fixedD_2_6 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_operator_inf_norm(self)


    def frobenius_norm(self) -> "double":
        """frobenius_norm(vnl_matrix_fixedD_2_6 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_frobenius_norm(self)


    def fro_norm(self) -> "double":
        """fro_norm(vnl_matrix_fixedD_2_6 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_fro_norm(self)


    def rms(self) -> "double":
        """rms(vnl_matrix_fixedD_2_6 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_rms(self)


    def min_value(self) -> "double":
        """min_value(vnl_matrix_fixedD_2_6 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_min_value(self)


    def max_value(self) -> "double":
        """max_value(vnl_matrix_fixedD_2_6 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrix_fixedD_2_6 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrix_fixedD_2_6 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_arg_max(self)


    def mean(self) -> "double":
        """mean(vnl_matrix_fixedD_2_6 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrix_fixedD_2_6 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrix_fixedD_2_6 self) -> bool
        is_identity(vnl_matrix_fixedD_2_6 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrix_fixedD_2_6 self) -> bool
        is_zero(vnl_matrix_fixedD_2_6 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrix_fixedD_2_6', tol: 'double') -> "bool":
        """is_equal(vnl_matrix_fixedD_2_6 self, vnl_matrix_fixedD_2_6 rhs, double tol) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrix_fixedD_2_6 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrix_fixedD_2_6 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_has_nans(self)


    def assert_size(self, nr_rows: 'unsigned int', nr_cols: 'unsigned int') -> "void":
        """assert_size(vnl_matrix_fixedD_2_6 self, unsigned int nr_rows, unsigned int nr_cols)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_assert_size(self, nr_rows, nr_cols)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrix_fixedD_2_6 self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_assert_finite(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrix_fixedD_2_6 self, istream s) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_read_ascii(self, s)


    def data_block(self, *args) -> "double *":
        """
        data_block(vnl_matrix_fixedD_2_6 self) -> double const
        data_block(vnl_matrix_fixedD_2_6 self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_data_block(self, *args)


    def as_matrix(self) -> "vnl_matrixD const":
        """as_matrix(vnl_matrix_fixedD_2_6 self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_as_matrix(self)


    def begin(self, *args) -> "double const *":
        """
        begin(vnl_matrix_fixedD_2_6 self) -> double
        begin(vnl_matrix_fixedD_2_6 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_begin(self, *args)


    def end(self, *args) -> "double const *":
        """
        end(vnl_matrix_fixedD_2_6 self) -> double
        end(vnl_matrix_fixedD_2_6 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrix_fixedD_2_6') -> "bool":
        """operator_eq(vnl_matrix_fixedD_2_6 self, vnl_matrix_fixedD_2_6 rhs) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_operator_eq(self, rhs)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(vnl_matrix_fixedD_2_6 self, vnl_matrix_fixedD_2_6 that) -> bool
        __eq__(vnl_matrix_fixedD_2_6 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(vnl_matrix_fixedD_2_6 self, vnl_matrix_fixedD_2_6 that) -> bool
        __ne__(vnl_matrix_fixedD_2_6 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___ne__(self, *args)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrix_fixedD_2_6 self, ostream os)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6__print(self, os)


    def add(*args) -> "void":
        """
        add(double const * a, double const * b, double * r)
        add(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_add(*args)

    add = staticmethod(add)

    def sub(*args) -> "void":
        """
        sub(double const * a, double const * b, double * r)
        sub(double const * a, double b, double * r)
        sub(double a, double const * b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_sub(*args)

    sub = staticmethod(sub)

    def mul(*args) -> "void":
        """
        mul(double const * a, double const * b, double * r)
        mul(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_mul(*args)

    mul = staticmethod(mul)

    def div(*args) -> "void":
        """
        div(double const * a, double const * b, double * r)
        div(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_div(*args)

    div = staticmethod(div)

    def equal(a: 'double const *', b: 'double const *') -> "bool":
        """equal(double const * a, double const * b) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_equal(a, b)

    equal = staticmethod(equal)
vnl_matrix_fixedD_2_6.size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_size, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_rows, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.cols = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_cols, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_columns, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.put = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_put, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.get = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.__call__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___call__, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.fill = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_fill, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.fill_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_fill_diagonal, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.set_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_diagonal, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.copy_in = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_copy_in, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.set = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.copy_out = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_copy_out, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.inplace_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_inplace_transpose, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.__idiv__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___idiv__, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.__iadd__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___iadd__, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.__isub__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___isub__, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.__neg__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___neg__, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.__imul__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___imul__, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_transpose, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.conjugate_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_conjugate_transpose, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.update = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_update, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.set_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_column, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.set_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_columns, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.set_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_row, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.extract = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_extract, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.get_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_row, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.get_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_column, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.get_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_rows, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.get_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_columns, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.get_n_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_n_rows, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.get_n_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_n_columns, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.get_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_diagonal, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.flatten_row_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_flatten_row_major, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.flatten_column_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_flatten_column_major, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.set_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_identity, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.flipud = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_flipud, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.fliplr = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_fliplr, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.normalize_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_normalize_rows, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.normalize_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_normalize_columns, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.scale_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_scale_row, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.scale_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_scale_column, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.swap = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_swap, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.array_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_array_one_norm, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.array_two_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_array_two_norm, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.array_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_array_inf_norm, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.absolute_value_sum = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_absolute_value_sum, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.absolute_value_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_absolute_value_max, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.operator_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_operator_one_norm, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.operator_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_operator_inf_norm, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.frobenius_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_frobenius_norm, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.fro_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_fro_norm, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.rms = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_rms, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.min_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_min_value, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.max_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_max_value, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.arg_min = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_arg_min, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.arg_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_arg_max, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.mean = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_mean, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.empty = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_empty, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.is_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_is_identity, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.is_zero = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_is_zero, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.is_equal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_is_equal, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.is_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_is_finite, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.has_nans = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_has_nans, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.assert_size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_assert_size, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.assert_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_assert_finite, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.read_ascii = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_read_ascii, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.data_block = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_data_block, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.as_matrix = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_as_matrix, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.begin = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_begin, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.end = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_end, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.operator_eq = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_operator_eq, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.__eq__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___eq__, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6.__ne__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___ne__, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6._print = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6__print, None, vnl_matrix_fixedD_2_6)
vnl_matrix_fixedD_2_6_swigregister = _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_swigregister
vnl_matrix_fixedD_2_6_swigregister(vnl_matrix_fixedD_2_6)

def vnl_matrix_fixedD_2_6_add(*args) -> "void":
    """
    add(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_2_6_add(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_add(*args)

def vnl_matrix_fixedD_2_6_sub(*args) -> "void":
    """
    sub(double const * a, double const * b, double * r)
    sub(double const * a, double b, double * r)
    vnl_matrix_fixedD_2_6_sub(double a, double const * b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_sub(*args)

def vnl_matrix_fixedD_2_6_mul(*args) -> "void":
    """
    mul(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_2_6_mul(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_mul(*args)

def vnl_matrix_fixedD_2_6_div(*args) -> "void":
    """
    div(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_2_6_div(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_div(*args)

def vnl_matrix_fixedD_2_6_equal(a: 'double const *', b: 'double const *') -> "bool":
    """vnl_matrix_fixedD_2_6_equal(double const * a, double const * b) -> bool"""
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_equal(a, b)

class vnl_matrix_fixedD_3_12(object):
    """Proxy of C++ vnl_matrix_fixedD_3_12 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_3_12

    def __init__(self, *args):
        """
        __init__(vnl_matrix_fixedD_3_12 self) -> vnl_matrix_fixedD_3_12
        __init__(vnl_matrix_fixedD_3_12 self, vnl_matrix_fixedD_3_12 rhs) -> vnl_matrix_fixedD_3_12
        __init__(vnl_matrix_fixedD_3_12 self, unsigned int n, unsigned int m) -> vnl_matrix_fixedD_3_12
        __init__(vnl_matrix_fixedD_3_12 self, double value) -> vnl_matrix_fixedD_3_12
        __init__(vnl_matrix_fixedD_3_12 self, double const * datablck) -> vnl_matrix_fixedD_3_12
        __init__(vnl_matrix_fixedD_3_12 self, vnl_matrixD rhs) -> vnl_matrix_fixedD_3_12
        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_3_12(*args))

    def size(self) -> "unsigned int":
        """size(vnl_matrix_fixedD_3_12 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrix_fixedD_3_12 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrix_fixedD_3_12 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrix_fixedD_3_12 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', v: 'double const &') -> "void":
        """put(vnl_matrix_fixedD_3_12 self, unsigned int r, unsigned int c, double const & v)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_put(self, r, c, v)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "double":
        """get(vnl_matrix_fixedD_3_12 self, unsigned int r, unsigned int c) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get(self, r, c)


    def __call__(self, *args) -> "double const &":
        """
        __call__(vnl_matrix_fixedD_3_12 self, unsigned int r, unsigned int c) -> double
        __call__(vnl_matrix_fixedD_3_12 self, unsigned int r, unsigned int c) -> double const &
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___call__(self, *args)


    def fill(self, arg0: 'double') -> "vnl_matrix_fixedD_3_12 &":
        """fill(vnl_matrix_fixedD_3_12 self, double arg0) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_fill(self, arg0)


    def fill_diagonal(self, arg0: 'double') -> "vnl_matrix_fixedD_3_12 &":
        """fill_diagonal(vnl_matrix_fixedD_3_12 self, double arg0) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorD') -> "vnl_matrix_fixedD_3_12 &":
        """set_diagonal(vnl_matrix_fixedD_3_12 self, vnl_vectorD arg0) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'double const *') -> "vnl_matrix_fixedD_3_12 &":
        """copy_in(vnl_matrix_fixedD_3_12 self, double const * arg0) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_copy_in(self, arg0)


    def set(self, *args) -> "vnl_matrix_fixedD_3_12 &":
        """
        set(vnl_matrix_fixedD_3_12 self, unsigned int r, unsigned int c, double const & v) -> vnl_matrix_fixedD_3_12
        set(vnl_matrix_fixedD_3_12 self, double const * d) -> vnl_matrix_fixedD_3_12
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set(self, *args)


    def copy_out(self, arg0: 'double *') -> "void":
        """copy_out(vnl_matrix_fixedD_3_12 self, double * arg0)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_copy_out(self, arg0)


    def inplace_transpose(self) -> "vnl_matrix_fixedD_3_12 &":
        """inplace_transpose(vnl_matrix_fixedD_3_12 self) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_inplace_transpose(self)


    def __idiv__(self, s: 'double') -> "vnl_matrix_fixedD_3_12 &":
        """__idiv__(vnl_matrix_fixedD_3_12 self, double s) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___idiv__(self, s)


    def __iadd__(self, *args) -> "vnl_matrix_fixedD_3_12 &":
        """
        __iadd__(vnl_matrix_fixedD_3_12 self, double s) -> vnl_matrix_fixedD_3_12
        __iadd__(vnl_matrix_fixedD_3_12 self, vnl_matrix_fixedD_3_12 m) -> vnl_matrix_fixedD_3_12
        __iadd__(vnl_matrix_fixedD_3_12 self, vnl_matrixD m) -> vnl_matrix_fixedD_3_12
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrix_fixedD_3_12 &":
        """
        __isub__(vnl_matrix_fixedD_3_12 self, double s) -> vnl_matrix_fixedD_3_12
        __isub__(vnl_matrix_fixedD_3_12 self, vnl_matrix_fixedD_3_12 m) -> vnl_matrix_fixedD_3_12
        __isub__(vnl_matrix_fixedD_3_12 self, vnl_matrixD m) -> vnl_matrix_fixedD_3_12
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___isub__(self, *args)


    def __neg__(self) -> "vnl_matrix_fixedD_3_12":
        """__neg__(vnl_matrix_fixedD_3_12 self) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___neg__(self)


    def __imul__(self, *args) -> "vnl_matrix_fixedD_3_12 &":
        """
        __imul__(vnl_matrix_fixedD_3_12 self, double s) -> vnl_matrix_fixedD_3_12
        __imul__(vnl_matrix_fixedD_3_12 self, vnl_matrix_fixed< double,12,12 > const & s) -> vnl_matrix_fixedD_3_12
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___imul__(self, *args)


    def transpose(self) -> "vnl_matrix_fixed< double,12,3 >":
        """transpose(vnl_matrix_fixedD_3_12 self) -> vnl_matrix_fixed< double,12,3 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrix_fixed< double,12,3 >":
        """conjugate_transpose(vnl_matrix_fixedD_3_12 self) -> vnl_matrix_fixed< double,12,3 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixD', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrix_fixedD_3_12 &":
        """
        update(vnl_matrix_fixedD_3_12 self, vnl_matrixD arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrix_fixedD_3_12
        update(vnl_matrix_fixedD_3_12 self, vnl_matrixD arg0, unsigned int top=0) -> vnl_matrix_fixedD_3_12
        update(vnl_matrix_fixedD_3_12 self, vnl_matrixD arg0) -> vnl_matrix_fixedD_3_12
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrix_fixedD_3_12 &":
        """
        set_column(vnl_matrix_fixedD_3_12 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_3_12
        set_column(vnl_matrix_fixedD_3_12 self, unsigned int i, double value) -> vnl_matrix_fixedD_3_12
        set_column(vnl_matrix_fixedD_3_12 self, unsigned int j, vnl_vectorD v) -> vnl_matrix_fixedD_3_12
        set_column(vnl_matrix_fixedD_3_12 self, unsigned int j, vnl_vector_fixed< double,3 > const & v) -> vnl_matrix_fixedD_3_12
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixD') -> "vnl_matrix_fixedD_3_12 &":
        """set_columns(vnl_matrix_fixedD_3_12 self, unsigned int starting_column, vnl_matrixD M) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrix_fixedD_3_12 &":
        """
        set_row(vnl_matrix_fixedD_3_12 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_3_12
        set_row(vnl_matrix_fixedD_3_12 self, unsigned int i, double value) -> vnl_matrix_fixedD_3_12
        set_row(vnl_matrix_fixedD_3_12 self, unsigned int i, vnl_vectorD arg1) -> vnl_matrix_fixedD_3_12
        set_row(vnl_matrix_fixedD_3_12 self, unsigned int i, vnl_vector_fixed< double,12 > const & arg1) -> vnl_matrix_fixedD_3_12
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrix_fixedD_3_12 self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_3_12 self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_3_12 self, unsigned int r, unsigned int c) -> vnl_matrixD
        extract(vnl_matrix_fixedD_3_12 self, vnl_matrixD sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrix_fixedD_3_12 self, vnl_matrixD sub_matrix, unsigned int top=0)
        extract(vnl_matrix_fixedD_3_12 self, vnl_matrixD sub_matrix)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_extract(self, *args)


    def get_row(self, row: 'unsigned int') -> "vnl_vector_fixed< double,12 >":
        """get_row(vnl_matrix_fixedD_3_12 self, unsigned int row) -> vnl_vector_fixed< double,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_row(self, row)


    def get_column(self, col: 'unsigned int') -> "vnl_vector_fixed< double,3 >":
        """get_column(vnl_matrix_fixedD_3_12 self, unsigned int col) -> vnl_vector_fixed< double,3 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_column(self, col)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_rows(vnl_matrix_fixedD_3_12 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_columns(vnl_matrix_fixedD_3_12 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_rows(vnl_matrix_fixedD_3_12 self, unsigned int rowstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_columns(vnl_matrix_fixedD_3_12 self, unsigned int colstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorD":
        """get_diagonal(vnl_matrix_fixedD_3_12 self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vector_fixed< double,36 >":
        """flatten_row_major(vnl_matrix_fixedD_3_12 self) -> vnl_vector_fixed< double,36 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vector_fixed< double,36 >":
        """flatten_column_major(vnl_matrix_fixedD_3_12 self) -> vnl_vector_fixed< double,36 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrix_fixedD_3_12 &":
        """set_identity(vnl_matrix_fixedD_3_12 self) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_identity(self)


    def flipud(self) -> "vnl_matrix_fixedD_3_12 &":
        """flipud(vnl_matrix_fixedD_3_12 self) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_flipud(self)


    def fliplr(self) -> "vnl_matrix_fixedD_3_12 &":
        """fliplr(vnl_matrix_fixedD_3_12 self) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_fliplr(self)


    def normalize_rows(self) -> "vnl_matrix_fixedD_3_12 &":
        """normalize_rows(vnl_matrix_fixedD_3_12 self) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrix_fixedD_3_12 &":
        """normalize_columns(vnl_matrix_fixedD_3_12 self) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_3_12 &":
        """scale_row(vnl_matrix_fixedD_3_12 self, unsigned int row, double value) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_3_12 &":
        """scale_column(vnl_matrix_fixedD_3_12 self, unsigned int col, double value) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrix_fixedD_3_12') -> "void":
        """swap(vnl_matrix_fixedD_3_12 self, vnl_matrix_fixedD_3_12 that)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_swap(self, that)


    def array_one_norm(self) -> "double":
        """array_one_norm(vnl_matrix_fixedD_3_12 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_array_one_norm(self)


    def array_two_norm(self) -> "double":
        """array_two_norm(vnl_matrix_fixedD_3_12 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_array_two_norm(self)


    def array_inf_norm(self) -> "double":
        """array_inf_norm(vnl_matrix_fixedD_3_12 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_array_inf_norm(self)


    def absolute_value_sum(self) -> "double":
        """absolute_value_sum(vnl_matrix_fixedD_3_12 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_absolute_value_sum(self)


    def absolute_value_max(self) -> "double":
        """absolute_value_max(vnl_matrix_fixedD_3_12 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_absolute_value_max(self)


    def operator_one_norm(self) -> "double":
        """operator_one_norm(vnl_matrix_fixedD_3_12 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_operator_one_norm(self)


    def operator_inf_norm(self) -> "double":
        """operator_inf_norm(vnl_matrix_fixedD_3_12 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_operator_inf_norm(self)


    def frobenius_norm(self) -> "double":
        """frobenius_norm(vnl_matrix_fixedD_3_12 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_frobenius_norm(self)


    def fro_norm(self) -> "double":
        """fro_norm(vnl_matrix_fixedD_3_12 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_fro_norm(self)


    def rms(self) -> "double":
        """rms(vnl_matrix_fixedD_3_12 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_rms(self)


    def min_value(self) -> "double":
        """min_value(vnl_matrix_fixedD_3_12 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_min_value(self)


    def max_value(self) -> "double":
        """max_value(vnl_matrix_fixedD_3_12 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrix_fixedD_3_12 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrix_fixedD_3_12 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_arg_max(self)


    def mean(self) -> "double":
        """mean(vnl_matrix_fixedD_3_12 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrix_fixedD_3_12 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrix_fixedD_3_12 self) -> bool
        is_identity(vnl_matrix_fixedD_3_12 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrix_fixedD_3_12 self) -> bool
        is_zero(vnl_matrix_fixedD_3_12 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrix_fixedD_3_12', tol: 'double') -> "bool":
        """is_equal(vnl_matrix_fixedD_3_12 self, vnl_matrix_fixedD_3_12 rhs, double tol) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrix_fixedD_3_12 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrix_fixedD_3_12 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_has_nans(self)


    def assert_size(self, nr_rows: 'unsigned int', nr_cols: 'unsigned int') -> "void":
        """assert_size(vnl_matrix_fixedD_3_12 self, unsigned int nr_rows, unsigned int nr_cols)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_assert_size(self, nr_rows, nr_cols)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrix_fixedD_3_12 self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_assert_finite(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrix_fixedD_3_12 self, istream s) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_read_ascii(self, s)


    def data_block(self, *args) -> "double *":
        """
        data_block(vnl_matrix_fixedD_3_12 self) -> double const
        data_block(vnl_matrix_fixedD_3_12 self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_data_block(self, *args)


    def as_matrix(self) -> "vnl_matrixD const":
        """as_matrix(vnl_matrix_fixedD_3_12 self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_as_matrix(self)


    def begin(self, *args) -> "double const *":
        """
        begin(vnl_matrix_fixedD_3_12 self) -> double
        begin(vnl_matrix_fixedD_3_12 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_begin(self, *args)


    def end(self, *args) -> "double const *":
        """
        end(vnl_matrix_fixedD_3_12 self) -> double
        end(vnl_matrix_fixedD_3_12 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrix_fixedD_3_12') -> "bool":
        """operator_eq(vnl_matrix_fixedD_3_12 self, vnl_matrix_fixedD_3_12 rhs) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_operator_eq(self, rhs)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(vnl_matrix_fixedD_3_12 self, vnl_matrix_fixedD_3_12 that) -> bool
        __eq__(vnl_matrix_fixedD_3_12 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(vnl_matrix_fixedD_3_12 self, vnl_matrix_fixedD_3_12 that) -> bool
        __ne__(vnl_matrix_fixedD_3_12 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___ne__(self, *args)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrix_fixedD_3_12 self, ostream os)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12__print(self, os)


    def add(*args) -> "void":
        """
        add(double const * a, double const * b, double * r)
        add(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_add(*args)

    add = staticmethod(add)

    def sub(*args) -> "void":
        """
        sub(double const * a, double const * b, double * r)
        sub(double const * a, double b, double * r)
        sub(double a, double const * b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_sub(*args)

    sub = staticmethod(sub)

    def mul(*args) -> "void":
        """
        mul(double const * a, double const * b, double * r)
        mul(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_mul(*args)

    mul = staticmethod(mul)

    def div(*args) -> "void":
        """
        div(double const * a, double const * b, double * r)
        div(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_div(*args)

    div = staticmethod(div)

    def equal(a: 'double const *', b: 'double const *') -> "bool":
        """equal(double const * a, double const * b) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_equal(a, b)

    equal = staticmethod(equal)
vnl_matrix_fixedD_3_12.size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_size, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_rows, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.cols = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_cols, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_columns, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.put = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_put, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.get = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.__call__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___call__, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.fill = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_fill, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.fill_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_fill_diagonal, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.set_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_diagonal, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.copy_in = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_copy_in, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.set = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.copy_out = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_copy_out, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.inplace_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_inplace_transpose, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.__idiv__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___idiv__, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.__iadd__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___iadd__, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.__isub__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___isub__, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.__neg__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___neg__, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.__imul__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___imul__, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_transpose, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.conjugate_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_conjugate_transpose, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.update = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_update, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.set_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_column, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.set_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_columns, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.set_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_row, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.extract = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_extract, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.get_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_row, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.get_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_column, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.get_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_rows, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.get_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_columns, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.get_n_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_n_rows, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.get_n_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_n_columns, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.get_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_diagonal, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.flatten_row_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_flatten_row_major, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.flatten_column_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_flatten_column_major, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.set_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_identity, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.flipud = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_flipud, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.fliplr = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_fliplr, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.normalize_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_normalize_rows, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.normalize_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_normalize_columns, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.scale_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_scale_row, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.scale_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_scale_column, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.swap = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_swap, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.array_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_array_one_norm, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.array_two_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_array_two_norm, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.array_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_array_inf_norm, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.absolute_value_sum = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_absolute_value_sum, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.absolute_value_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_absolute_value_max, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.operator_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_operator_one_norm, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.operator_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_operator_inf_norm, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.frobenius_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_frobenius_norm, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.fro_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_fro_norm, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.rms = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_rms, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.min_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_min_value, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.max_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_max_value, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.arg_min = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_arg_min, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.arg_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_arg_max, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.mean = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_mean, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.empty = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_empty, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.is_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_is_identity, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.is_zero = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_is_zero, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.is_equal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_is_equal, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.is_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_is_finite, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.has_nans = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_has_nans, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.assert_size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_assert_size, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.assert_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_assert_finite, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.read_ascii = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_read_ascii, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.data_block = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_data_block, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.as_matrix = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_as_matrix, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.begin = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_begin, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.end = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_end, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.operator_eq = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_operator_eq, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.__eq__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___eq__, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12.__ne__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___ne__, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12._print = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12__print, None, vnl_matrix_fixedD_3_12)
vnl_matrix_fixedD_3_12_swigregister = _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_swigregister
vnl_matrix_fixedD_3_12_swigregister(vnl_matrix_fixedD_3_12)

def vnl_matrix_fixedD_3_12_add(*args) -> "void":
    """
    add(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_3_12_add(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_add(*args)

def vnl_matrix_fixedD_3_12_sub(*args) -> "void":
    """
    sub(double const * a, double const * b, double * r)
    sub(double const * a, double b, double * r)
    vnl_matrix_fixedD_3_12_sub(double a, double const * b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_sub(*args)

def vnl_matrix_fixedD_3_12_mul(*args) -> "void":
    """
    mul(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_3_12_mul(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_mul(*args)

def vnl_matrix_fixedD_3_12_div(*args) -> "void":
    """
    div(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_3_12_div(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_div(*args)

def vnl_matrix_fixedD_3_12_equal(a: 'double const *', b: 'double const *') -> "bool":
    """vnl_matrix_fixedD_3_12_equal(double const * a, double const * b) -> bool"""
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_equal(a, b)

class vnl_matrix_fixedD_3_3(object):
    """Proxy of C++ vnl_matrix_fixedD_3_3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_3_3

    def __init__(self, *args):
        """
        __init__(vnl_matrix_fixedD_3_3 self) -> vnl_matrix_fixedD_3_3
        __init__(vnl_matrix_fixedD_3_3 self, vnl_matrix_fixedD_3_3 rhs) -> vnl_matrix_fixedD_3_3
        __init__(vnl_matrix_fixedD_3_3 self, unsigned int n, unsigned int m) -> vnl_matrix_fixedD_3_3
        __init__(vnl_matrix_fixedD_3_3 self, double value) -> vnl_matrix_fixedD_3_3
        __init__(vnl_matrix_fixedD_3_3 self, double const * datablck) -> vnl_matrix_fixedD_3_3
        __init__(vnl_matrix_fixedD_3_3 self, vnl_matrixD rhs) -> vnl_matrix_fixedD_3_3
        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_3_3(*args))

    def size(self) -> "unsigned int":
        """size(vnl_matrix_fixedD_3_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrix_fixedD_3_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrix_fixedD_3_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrix_fixedD_3_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', v: 'double const &') -> "void":
        """put(vnl_matrix_fixedD_3_3 self, unsigned int r, unsigned int c, double const & v)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_put(self, r, c, v)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "double":
        """get(vnl_matrix_fixedD_3_3 self, unsigned int r, unsigned int c) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get(self, r, c)


    def __call__(self, *args) -> "double const &":
        """
        __call__(vnl_matrix_fixedD_3_3 self, unsigned int r, unsigned int c) -> double
        __call__(vnl_matrix_fixedD_3_3 self, unsigned int r, unsigned int c) -> double const &
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___call__(self, *args)


    def fill(self, arg0: 'double') -> "vnl_matrix_fixedD_3_3 &":
        """fill(vnl_matrix_fixedD_3_3 self, double arg0) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_fill(self, arg0)


    def fill_diagonal(self, arg0: 'double') -> "vnl_matrix_fixedD_3_3 &":
        """fill_diagonal(vnl_matrix_fixedD_3_3 self, double arg0) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorD') -> "vnl_matrix_fixedD_3_3 &":
        """set_diagonal(vnl_matrix_fixedD_3_3 self, vnl_vectorD arg0) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'double const *') -> "vnl_matrix_fixedD_3_3 &":
        """copy_in(vnl_matrix_fixedD_3_3 self, double const * arg0) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_copy_in(self, arg0)


    def set(self, *args) -> "vnl_matrix_fixedD_3_3 &":
        """
        set(vnl_matrix_fixedD_3_3 self, unsigned int r, unsigned int c, double const & v) -> vnl_matrix_fixedD_3_3
        set(vnl_matrix_fixedD_3_3 self, double const * d) -> vnl_matrix_fixedD_3_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set(self, *args)


    def copy_out(self, arg0: 'double *') -> "void":
        """copy_out(vnl_matrix_fixedD_3_3 self, double * arg0)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_copy_out(self, arg0)


    def inplace_transpose(self) -> "vnl_matrix_fixedD_3_3 &":
        """inplace_transpose(vnl_matrix_fixedD_3_3 self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_inplace_transpose(self)


    def __idiv__(self, s: 'double') -> "vnl_matrix_fixedD_3_3 &":
        """__idiv__(vnl_matrix_fixedD_3_3 self, double s) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___idiv__(self, s)


    def __iadd__(self, *args) -> "vnl_matrix_fixedD_3_3 &":
        """
        __iadd__(vnl_matrix_fixedD_3_3 self, double s) -> vnl_matrix_fixedD_3_3
        __iadd__(vnl_matrix_fixedD_3_3 self, vnl_matrix_fixedD_3_3 m) -> vnl_matrix_fixedD_3_3
        __iadd__(vnl_matrix_fixedD_3_3 self, vnl_matrixD m) -> vnl_matrix_fixedD_3_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrix_fixedD_3_3 &":
        """
        __isub__(vnl_matrix_fixedD_3_3 self, double s) -> vnl_matrix_fixedD_3_3
        __isub__(vnl_matrix_fixedD_3_3 self, vnl_matrix_fixedD_3_3 m) -> vnl_matrix_fixedD_3_3
        __isub__(vnl_matrix_fixedD_3_3 self, vnl_matrixD m) -> vnl_matrix_fixedD_3_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___isub__(self, *args)


    def __neg__(self) -> "vnl_matrix_fixedD_3_3":
        """__neg__(vnl_matrix_fixedD_3_3 self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___neg__(self)


    def __imul__(self, *args) -> "vnl_matrix_fixedD_3_3 &":
        """
        __imul__(vnl_matrix_fixedD_3_3 self, double s) -> vnl_matrix_fixedD_3_3
        __imul__(vnl_matrix_fixedD_3_3 self, vnl_matrix_fixedD_3_3 s) -> vnl_matrix_fixedD_3_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___imul__(self, *args)


    def transpose(self) -> "vnl_matrix_fixedD_3_3":
        """transpose(vnl_matrix_fixedD_3_3 self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrix_fixedD_3_3":
        """conjugate_transpose(vnl_matrix_fixedD_3_3 self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixD', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrix_fixedD_3_3 &":
        """
        update(vnl_matrix_fixedD_3_3 self, vnl_matrixD arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrix_fixedD_3_3
        update(vnl_matrix_fixedD_3_3 self, vnl_matrixD arg0, unsigned int top=0) -> vnl_matrix_fixedD_3_3
        update(vnl_matrix_fixedD_3_3 self, vnl_matrixD arg0) -> vnl_matrix_fixedD_3_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrix_fixedD_3_3 &":
        """
        set_column(vnl_matrix_fixedD_3_3 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_3_3
        set_column(vnl_matrix_fixedD_3_3 self, unsigned int i, double value) -> vnl_matrix_fixedD_3_3
        set_column(vnl_matrix_fixedD_3_3 self, unsigned int j, vnl_vectorD v) -> vnl_matrix_fixedD_3_3
        set_column(vnl_matrix_fixedD_3_3 self, unsigned int j, vnl_vector_fixed< double,3 > const & v) -> vnl_matrix_fixedD_3_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixD') -> "vnl_matrix_fixedD_3_3 &":
        """set_columns(vnl_matrix_fixedD_3_3 self, unsigned int starting_column, vnl_matrixD M) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrix_fixedD_3_3 &":
        """
        set_row(vnl_matrix_fixedD_3_3 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_3_3
        set_row(vnl_matrix_fixedD_3_3 self, unsigned int i, double value) -> vnl_matrix_fixedD_3_3
        set_row(vnl_matrix_fixedD_3_3 self, unsigned int i, vnl_vectorD arg1) -> vnl_matrix_fixedD_3_3
        set_row(vnl_matrix_fixedD_3_3 self, unsigned int i, vnl_vector_fixed< double,3 > const & arg1) -> vnl_matrix_fixedD_3_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrix_fixedD_3_3 self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_3_3 self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_3_3 self, unsigned int r, unsigned int c) -> vnl_matrixD
        extract(vnl_matrix_fixedD_3_3 self, vnl_matrixD sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrix_fixedD_3_3 self, vnl_matrixD sub_matrix, unsigned int top=0)
        extract(vnl_matrix_fixedD_3_3 self, vnl_matrixD sub_matrix)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_extract(self, *args)


    def get_row(self, row: 'unsigned int') -> "vnl_vector_fixed< double,3 >":
        """get_row(vnl_matrix_fixedD_3_3 self, unsigned int row) -> vnl_vector_fixed< double,3 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_row(self, row)


    def get_column(self, col: 'unsigned int') -> "vnl_vector_fixed< double,3 >":
        """get_column(vnl_matrix_fixedD_3_3 self, unsigned int col) -> vnl_vector_fixed< double,3 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_column(self, col)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_rows(vnl_matrix_fixedD_3_3 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_columns(vnl_matrix_fixedD_3_3 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_rows(vnl_matrix_fixedD_3_3 self, unsigned int rowstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_columns(vnl_matrix_fixedD_3_3 self, unsigned int colstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorD":
        """get_diagonal(vnl_matrix_fixedD_3_3 self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vector_fixed< double,9 >":
        """flatten_row_major(vnl_matrix_fixedD_3_3 self) -> vnl_vector_fixed< double,9 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vector_fixed< double,9 >":
        """flatten_column_major(vnl_matrix_fixedD_3_3 self) -> vnl_vector_fixed< double,9 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrix_fixedD_3_3 &":
        """set_identity(vnl_matrix_fixedD_3_3 self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_identity(self)


    def flipud(self) -> "vnl_matrix_fixedD_3_3 &":
        """flipud(vnl_matrix_fixedD_3_3 self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_flipud(self)


    def fliplr(self) -> "vnl_matrix_fixedD_3_3 &":
        """fliplr(vnl_matrix_fixedD_3_3 self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_fliplr(self)


    def normalize_rows(self) -> "vnl_matrix_fixedD_3_3 &":
        """normalize_rows(vnl_matrix_fixedD_3_3 self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrix_fixedD_3_3 &":
        """normalize_columns(vnl_matrix_fixedD_3_3 self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_3_3 &":
        """scale_row(vnl_matrix_fixedD_3_3 self, unsigned int row, double value) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_3_3 &":
        """scale_column(vnl_matrix_fixedD_3_3 self, unsigned int col, double value) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrix_fixedD_3_3') -> "void":
        """swap(vnl_matrix_fixedD_3_3 self, vnl_matrix_fixedD_3_3 that)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_swap(self, that)


    def array_one_norm(self) -> "double":
        """array_one_norm(vnl_matrix_fixedD_3_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_array_one_norm(self)


    def array_two_norm(self) -> "double":
        """array_two_norm(vnl_matrix_fixedD_3_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_array_two_norm(self)


    def array_inf_norm(self) -> "double":
        """array_inf_norm(vnl_matrix_fixedD_3_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_array_inf_norm(self)


    def absolute_value_sum(self) -> "double":
        """absolute_value_sum(vnl_matrix_fixedD_3_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_absolute_value_sum(self)


    def absolute_value_max(self) -> "double":
        """absolute_value_max(vnl_matrix_fixedD_3_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_absolute_value_max(self)


    def operator_one_norm(self) -> "double":
        """operator_one_norm(vnl_matrix_fixedD_3_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_operator_one_norm(self)


    def operator_inf_norm(self) -> "double":
        """operator_inf_norm(vnl_matrix_fixedD_3_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_operator_inf_norm(self)


    def frobenius_norm(self) -> "double":
        """frobenius_norm(vnl_matrix_fixedD_3_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_frobenius_norm(self)


    def fro_norm(self) -> "double":
        """fro_norm(vnl_matrix_fixedD_3_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_fro_norm(self)


    def rms(self) -> "double":
        """rms(vnl_matrix_fixedD_3_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_rms(self)


    def min_value(self) -> "double":
        """min_value(vnl_matrix_fixedD_3_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_min_value(self)


    def max_value(self) -> "double":
        """max_value(vnl_matrix_fixedD_3_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrix_fixedD_3_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrix_fixedD_3_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_arg_max(self)


    def mean(self) -> "double":
        """mean(vnl_matrix_fixedD_3_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrix_fixedD_3_3 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrix_fixedD_3_3 self) -> bool
        is_identity(vnl_matrix_fixedD_3_3 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrix_fixedD_3_3 self) -> bool
        is_zero(vnl_matrix_fixedD_3_3 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrix_fixedD_3_3', tol: 'double') -> "bool":
        """is_equal(vnl_matrix_fixedD_3_3 self, vnl_matrix_fixedD_3_3 rhs, double tol) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrix_fixedD_3_3 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrix_fixedD_3_3 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_has_nans(self)


    def assert_size(self, nr_rows: 'unsigned int', nr_cols: 'unsigned int') -> "void":
        """assert_size(vnl_matrix_fixedD_3_3 self, unsigned int nr_rows, unsigned int nr_cols)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_assert_size(self, nr_rows, nr_cols)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrix_fixedD_3_3 self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_assert_finite(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrix_fixedD_3_3 self, istream s) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_read_ascii(self, s)


    def data_block(self, *args) -> "double *":
        """
        data_block(vnl_matrix_fixedD_3_3 self) -> double const
        data_block(vnl_matrix_fixedD_3_3 self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_data_block(self, *args)


    def as_matrix(self) -> "vnl_matrixD const":
        """as_matrix(vnl_matrix_fixedD_3_3 self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_as_matrix(self)


    def begin(self, *args) -> "double const *":
        """
        begin(vnl_matrix_fixedD_3_3 self) -> double
        begin(vnl_matrix_fixedD_3_3 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_begin(self, *args)


    def end(self, *args) -> "double const *":
        """
        end(vnl_matrix_fixedD_3_3 self) -> double
        end(vnl_matrix_fixedD_3_3 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrix_fixedD_3_3') -> "bool":
        """operator_eq(vnl_matrix_fixedD_3_3 self, vnl_matrix_fixedD_3_3 rhs) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_operator_eq(self, rhs)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(vnl_matrix_fixedD_3_3 self, vnl_matrix_fixedD_3_3 that) -> bool
        __eq__(vnl_matrix_fixedD_3_3 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(vnl_matrix_fixedD_3_3 self, vnl_matrix_fixedD_3_3 that) -> bool
        __ne__(vnl_matrix_fixedD_3_3 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___ne__(self, *args)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrix_fixedD_3_3 self, ostream os)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3__print(self, os)


    def add(*args) -> "void":
        """
        add(double const * a, double const * b, double * r)
        add(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_add(*args)

    add = staticmethod(add)

    def sub(*args) -> "void":
        """
        sub(double const * a, double const * b, double * r)
        sub(double const * a, double b, double * r)
        sub(double a, double const * b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_sub(*args)

    sub = staticmethod(sub)

    def mul(*args) -> "void":
        """
        mul(double const * a, double const * b, double * r)
        mul(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_mul(*args)

    mul = staticmethod(mul)

    def div(*args) -> "void":
        """
        div(double const * a, double const * b, double * r)
        div(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_div(*args)

    div = staticmethod(div)

    def equal(a: 'double const *', b: 'double const *') -> "bool":
        """equal(double const * a, double const * b) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_equal(a, b)

    equal = staticmethod(equal)
vnl_matrix_fixedD_3_3.size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_size, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_rows, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.cols = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_cols, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_columns, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.put = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_put, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.get = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.__call__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___call__, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.fill = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_fill, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.fill_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_fill_diagonal, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.set_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_diagonal, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.copy_in = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_copy_in, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.set = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.copy_out = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_copy_out, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.inplace_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_inplace_transpose, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.__idiv__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___idiv__, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.__iadd__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___iadd__, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.__isub__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___isub__, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.__neg__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___neg__, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.__imul__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___imul__, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_transpose, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.conjugate_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_conjugate_transpose, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.update = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_update, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.set_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_column, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.set_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_columns, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.set_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_row, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.extract = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_extract, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.get_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_row, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.get_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_column, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.get_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_rows, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.get_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_columns, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.get_n_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_n_rows, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.get_n_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_n_columns, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.get_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_diagonal, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.flatten_row_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_flatten_row_major, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.flatten_column_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_flatten_column_major, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.set_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_identity, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.flipud = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_flipud, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.fliplr = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_fliplr, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.normalize_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_normalize_rows, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.normalize_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_normalize_columns, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.scale_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_scale_row, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.scale_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_scale_column, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.swap = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_swap, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.array_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_array_one_norm, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.array_two_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_array_two_norm, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.array_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_array_inf_norm, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.absolute_value_sum = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_absolute_value_sum, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.absolute_value_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_absolute_value_max, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.operator_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_operator_one_norm, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.operator_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_operator_inf_norm, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.frobenius_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_frobenius_norm, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.fro_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_fro_norm, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.rms = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_rms, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.min_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_min_value, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.max_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_max_value, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.arg_min = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_arg_min, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.arg_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_arg_max, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.mean = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_mean, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.empty = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_empty, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.is_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_is_identity, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.is_zero = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_is_zero, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.is_equal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_is_equal, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.is_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_is_finite, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.has_nans = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_has_nans, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.assert_size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_assert_size, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.assert_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_assert_finite, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.read_ascii = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_read_ascii, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.data_block = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_data_block, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.as_matrix = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_as_matrix, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.begin = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_begin, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.end = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_end, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.operator_eq = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_operator_eq, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.__eq__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___eq__, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3.__ne__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___ne__, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3._print = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3__print, None, vnl_matrix_fixedD_3_3)
vnl_matrix_fixedD_3_3_swigregister = _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_swigregister
vnl_matrix_fixedD_3_3_swigregister(vnl_matrix_fixedD_3_3)

def vnl_matrix_fixedD_3_3_add(*args) -> "void":
    """
    add(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_3_3_add(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_add(*args)

def vnl_matrix_fixedD_3_3_sub(*args) -> "void":
    """
    sub(double const * a, double const * b, double * r)
    sub(double const * a, double b, double * r)
    vnl_matrix_fixedD_3_3_sub(double a, double const * b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_sub(*args)

def vnl_matrix_fixedD_3_3_mul(*args) -> "void":
    """
    mul(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_3_3_mul(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_mul(*args)

def vnl_matrix_fixedD_3_3_div(*args) -> "void":
    """
    div(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_3_3_div(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_div(*args)

def vnl_matrix_fixedD_3_3_equal(a: 'double const *', b: 'double const *') -> "bool":
    """vnl_matrix_fixedD_3_3_equal(double const * a, double const * b) -> bool"""
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_equal(a, b)

class vnl_matrix_fixedD_3_4(object):
    """Proxy of C++ vnl_matrix_fixedD_3_4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_3_4

    def __init__(self, *args):
        """
        __init__(vnl_matrix_fixedD_3_4 self) -> vnl_matrix_fixedD_3_4
        __init__(vnl_matrix_fixedD_3_4 self, vnl_matrix_fixedD_3_4 rhs) -> vnl_matrix_fixedD_3_4
        __init__(vnl_matrix_fixedD_3_4 self, unsigned int n, unsigned int m) -> vnl_matrix_fixedD_3_4
        __init__(vnl_matrix_fixedD_3_4 self, double value) -> vnl_matrix_fixedD_3_4
        __init__(vnl_matrix_fixedD_3_4 self, double const * datablck) -> vnl_matrix_fixedD_3_4
        __init__(vnl_matrix_fixedD_3_4 self, vnl_matrixD rhs) -> vnl_matrix_fixedD_3_4
        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_3_4(*args))

    def size(self) -> "unsigned int":
        """size(vnl_matrix_fixedD_3_4 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrix_fixedD_3_4 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrix_fixedD_3_4 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrix_fixedD_3_4 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', v: 'double const &') -> "void":
        """put(vnl_matrix_fixedD_3_4 self, unsigned int r, unsigned int c, double const & v)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_put(self, r, c, v)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "double":
        """get(vnl_matrix_fixedD_3_4 self, unsigned int r, unsigned int c) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get(self, r, c)


    def __call__(self, *args) -> "double const &":
        """
        __call__(vnl_matrix_fixedD_3_4 self, unsigned int r, unsigned int c) -> double
        __call__(vnl_matrix_fixedD_3_4 self, unsigned int r, unsigned int c) -> double const &
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___call__(self, *args)


    def fill(self, arg0: 'double') -> "vnl_matrix_fixedD_3_4 &":
        """fill(vnl_matrix_fixedD_3_4 self, double arg0) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_fill(self, arg0)


    def fill_diagonal(self, arg0: 'double') -> "vnl_matrix_fixedD_3_4 &":
        """fill_diagonal(vnl_matrix_fixedD_3_4 self, double arg0) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorD') -> "vnl_matrix_fixedD_3_4 &":
        """set_diagonal(vnl_matrix_fixedD_3_4 self, vnl_vectorD arg0) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'double const *') -> "vnl_matrix_fixedD_3_4 &":
        """copy_in(vnl_matrix_fixedD_3_4 self, double const * arg0) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_copy_in(self, arg0)


    def set(self, *args) -> "vnl_matrix_fixedD_3_4 &":
        """
        set(vnl_matrix_fixedD_3_4 self, unsigned int r, unsigned int c, double const & v) -> vnl_matrix_fixedD_3_4
        set(vnl_matrix_fixedD_3_4 self, double const * d) -> vnl_matrix_fixedD_3_4
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set(self, *args)


    def copy_out(self, arg0: 'double *') -> "void":
        """copy_out(vnl_matrix_fixedD_3_4 self, double * arg0)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_copy_out(self, arg0)


    def inplace_transpose(self) -> "vnl_matrix_fixedD_3_4 &":
        """inplace_transpose(vnl_matrix_fixedD_3_4 self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_inplace_transpose(self)


    def __idiv__(self, s: 'double') -> "vnl_matrix_fixedD_3_4 &":
        """__idiv__(vnl_matrix_fixedD_3_4 self, double s) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___idiv__(self, s)


    def __iadd__(self, *args) -> "vnl_matrix_fixedD_3_4 &":
        """
        __iadd__(vnl_matrix_fixedD_3_4 self, double s) -> vnl_matrix_fixedD_3_4
        __iadd__(vnl_matrix_fixedD_3_4 self, vnl_matrix_fixedD_3_4 m) -> vnl_matrix_fixedD_3_4
        __iadd__(vnl_matrix_fixedD_3_4 self, vnl_matrixD m) -> vnl_matrix_fixedD_3_4
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrix_fixedD_3_4 &":
        """
        __isub__(vnl_matrix_fixedD_3_4 self, double s) -> vnl_matrix_fixedD_3_4
        __isub__(vnl_matrix_fixedD_3_4 self, vnl_matrix_fixedD_3_4 m) -> vnl_matrix_fixedD_3_4
        __isub__(vnl_matrix_fixedD_3_4 self, vnl_matrixD m) -> vnl_matrix_fixedD_3_4
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___isub__(self, *args)


    def __neg__(self) -> "vnl_matrix_fixedD_3_4":
        """__neg__(vnl_matrix_fixedD_3_4 self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___neg__(self)


    def __imul__(self, *args) -> "vnl_matrix_fixedD_3_4 &":
        """
        __imul__(vnl_matrix_fixedD_3_4 self, double s) -> vnl_matrix_fixedD_3_4
        __imul__(vnl_matrix_fixedD_3_4 self, vnl_matrix_fixedD_4_4 s) -> vnl_matrix_fixedD_3_4
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___imul__(self, *args)


    def transpose(self) -> "vnl_matrix_fixedD_4_3":
        """transpose(vnl_matrix_fixedD_3_4 self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrix_fixedD_4_3":
        """conjugate_transpose(vnl_matrix_fixedD_3_4 self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixD', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrix_fixedD_3_4 &":
        """
        update(vnl_matrix_fixedD_3_4 self, vnl_matrixD arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrix_fixedD_3_4
        update(vnl_matrix_fixedD_3_4 self, vnl_matrixD arg0, unsigned int top=0) -> vnl_matrix_fixedD_3_4
        update(vnl_matrix_fixedD_3_4 self, vnl_matrixD arg0) -> vnl_matrix_fixedD_3_4
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrix_fixedD_3_4 &":
        """
        set_column(vnl_matrix_fixedD_3_4 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_3_4
        set_column(vnl_matrix_fixedD_3_4 self, unsigned int i, double value) -> vnl_matrix_fixedD_3_4
        set_column(vnl_matrix_fixedD_3_4 self, unsigned int j, vnl_vectorD v) -> vnl_matrix_fixedD_3_4
        set_column(vnl_matrix_fixedD_3_4 self, unsigned int j, vnl_vector_fixed< double,3 > const & v) -> vnl_matrix_fixedD_3_4
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixD') -> "vnl_matrix_fixedD_3_4 &":
        """set_columns(vnl_matrix_fixedD_3_4 self, unsigned int starting_column, vnl_matrixD M) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrix_fixedD_3_4 &":
        """
        set_row(vnl_matrix_fixedD_3_4 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_3_4
        set_row(vnl_matrix_fixedD_3_4 self, unsigned int i, double value) -> vnl_matrix_fixedD_3_4
        set_row(vnl_matrix_fixedD_3_4 self, unsigned int i, vnl_vectorD arg1) -> vnl_matrix_fixedD_3_4
        set_row(vnl_matrix_fixedD_3_4 self, unsigned int i, vnl_vector_fixed< double,4 > const & arg1) -> vnl_matrix_fixedD_3_4
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrix_fixedD_3_4 self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_3_4 self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_3_4 self, unsigned int r, unsigned int c) -> vnl_matrixD
        extract(vnl_matrix_fixedD_3_4 self, vnl_matrixD sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrix_fixedD_3_4 self, vnl_matrixD sub_matrix, unsigned int top=0)
        extract(vnl_matrix_fixedD_3_4 self, vnl_matrixD sub_matrix)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_extract(self, *args)


    def get_row(self, row: 'unsigned int') -> "vnl_vector_fixed< double,4 >":
        """get_row(vnl_matrix_fixedD_3_4 self, unsigned int row) -> vnl_vector_fixed< double,4 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_row(self, row)


    def get_column(self, col: 'unsigned int') -> "vnl_vector_fixed< double,3 >":
        """get_column(vnl_matrix_fixedD_3_4 self, unsigned int col) -> vnl_vector_fixed< double,3 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_column(self, col)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_rows(vnl_matrix_fixedD_3_4 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_columns(vnl_matrix_fixedD_3_4 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_rows(vnl_matrix_fixedD_3_4 self, unsigned int rowstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_columns(vnl_matrix_fixedD_3_4 self, unsigned int colstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorD":
        """get_diagonal(vnl_matrix_fixedD_3_4 self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vector_fixed< double,12 >":
        """flatten_row_major(vnl_matrix_fixedD_3_4 self) -> vnl_vector_fixed< double,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vector_fixed< double,12 >":
        """flatten_column_major(vnl_matrix_fixedD_3_4 self) -> vnl_vector_fixed< double,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrix_fixedD_3_4 &":
        """set_identity(vnl_matrix_fixedD_3_4 self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_identity(self)


    def flipud(self) -> "vnl_matrix_fixedD_3_4 &":
        """flipud(vnl_matrix_fixedD_3_4 self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_flipud(self)


    def fliplr(self) -> "vnl_matrix_fixedD_3_4 &":
        """fliplr(vnl_matrix_fixedD_3_4 self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_fliplr(self)


    def normalize_rows(self) -> "vnl_matrix_fixedD_3_4 &":
        """normalize_rows(vnl_matrix_fixedD_3_4 self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrix_fixedD_3_4 &":
        """normalize_columns(vnl_matrix_fixedD_3_4 self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_3_4 &":
        """scale_row(vnl_matrix_fixedD_3_4 self, unsigned int row, double value) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_3_4 &":
        """scale_column(vnl_matrix_fixedD_3_4 self, unsigned int col, double value) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrix_fixedD_3_4') -> "void":
        """swap(vnl_matrix_fixedD_3_4 self, vnl_matrix_fixedD_3_4 that)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_swap(self, that)


    def array_one_norm(self) -> "double":
        """array_one_norm(vnl_matrix_fixedD_3_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_array_one_norm(self)


    def array_two_norm(self) -> "double":
        """array_two_norm(vnl_matrix_fixedD_3_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_array_two_norm(self)


    def array_inf_norm(self) -> "double":
        """array_inf_norm(vnl_matrix_fixedD_3_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_array_inf_norm(self)


    def absolute_value_sum(self) -> "double":
        """absolute_value_sum(vnl_matrix_fixedD_3_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_absolute_value_sum(self)


    def absolute_value_max(self) -> "double":
        """absolute_value_max(vnl_matrix_fixedD_3_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_absolute_value_max(self)


    def operator_one_norm(self) -> "double":
        """operator_one_norm(vnl_matrix_fixedD_3_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_operator_one_norm(self)


    def operator_inf_norm(self) -> "double":
        """operator_inf_norm(vnl_matrix_fixedD_3_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_operator_inf_norm(self)


    def frobenius_norm(self) -> "double":
        """frobenius_norm(vnl_matrix_fixedD_3_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_frobenius_norm(self)


    def fro_norm(self) -> "double":
        """fro_norm(vnl_matrix_fixedD_3_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_fro_norm(self)


    def rms(self) -> "double":
        """rms(vnl_matrix_fixedD_3_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_rms(self)


    def min_value(self) -> "double":
        """min_value(vnl_matrix_fixedD_3_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_min_value(self)


    def max_value(self) -> "double":
        """max_value(vnl_matrix_fixedD_3_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrix_fixedD_3_4 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrix_fixedD_3_4 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_arg_max(self)


    def mean(self) -> "double":
        """mean(vnl_matrix_fixedD_3_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrix_fixedD_3_4 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrix_fixedD_3_4 self) -> bool
        is_identity(vnl_matrix_fixedD_3_4 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrix_fixedD_3_4 self) -> bool
        is_zero(vnl_matrix_fixedD_3_4 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrix_fixedD_3_4', tol: 'double') -> "bool":
        """is_equal(vnl_matrix_fixedD_3_4 self, vnl_matrix_fixedD_3_4 rhs, double tol) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrix_fixedD_3_4 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrix_fixedD_3_4 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_has_nans(self)


    def assert_size(self, nr_rows: 'unsigned int', nr_cols: 'unsigned int') -> "void":
        """assert_size(vnl_matrix_fixedD_3_4 self, unsigned int nr_rows, unsigned int nr_cols)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_assert_size(self, nr_rows, nr_cols)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrix_fixedD_3_4 self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_assert_finite(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrix_fixedD_3_4 self, istream s) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_read_ascii(self, s)


    def data_block(self, *args) -> "double *":
        """
        data_block(vnl_matrix_fixedD_3_4 self) -> double const
        data_block(vnl_matrix_fixedD_3_4 self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_data_block(self, *args)


    def as_matrix(self) -> "vnl_matrixD const":
        """as_matrix(vnl_matrix_fixedD_3_4 self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_as_matrix(self)


    def begin(self, *args) -> "double const *":
        """
        begin(vnl_matrix_fixedD_3_4 self) -> double
        begin(vnl_matrix_fixedD_3_4 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_begin(self, *args)


    def end(self, *args) -> "double const *":
        """
        end(vnl_matrix_fixedD_3_4 self) -> double
        end(vnl_matrix_fixedD_3_4 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrix_fixedD_3_4') -> "bool":
        """operator_eq(vnl_matrix_fixedD_3_4 self, vnl_matrix_fixedD_3_4 rhs) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_operator_eq(self, rhs)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(vnl_matrix_fixedD_3_4 self, vnl_matrix_fixedD_3_4 that) -> bool
        __eq__(vnl_matrix_fixedD_3_4 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(vnl_matrix_fixedD_3_4 self, vnl_matrix_fixedD_3_4 that) -> bool
        __ne__(vnl_matrix_fixedD_3_4 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___ne__(self, *args)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrix_fixedD_3_4 self, ostream os)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4__print(self, os)


    def add(*args) -> "void":
        """
        add(double const * a, double const * b, double * r)
        add(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_add(*args)

    add = staticmethod(add)

    def sub(*args) -> "void":
        """
        sub(double const * a, double const * b, double * r)
        sub(double const * a, double b, double * r)
        sub(double a, double const * b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_sub(*args)

    sub = staticmethod(sub)

    def mul(*args) -> "void":
        """
        mul(double const * a, double const * b, double * r)
        mul(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_mul(*args)

    mul = staticmethod(mul)

    def div(*args) -> "void":
        """
        div(double const * a, double const * b, double * r)
        div(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_div(*args)

    div = staticmethod(div)

    def equal(a: 'double const *', b: 'double const *') -> "bool":
        """equal(double const * a, double const * b) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_equal(a, b)

    equal = staticmethod(equal)
vnl_matrix_fixedD_3_4.size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_size, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_rows, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.cols = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_cols, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_columns, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.put = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_put, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.get = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.__call__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___call__, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.fill = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_fill, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.fill_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_fill_diagonal, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.set_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_diagonal, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.copy_in = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_copy_in, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.set = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.copy_out = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_copy_out, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.inplace_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_inplace_transpose, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.__idiv__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___idiv__, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.__iadd__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___iadd__, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.__isub__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___isub__, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.__neg__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___neg__, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.__imul__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___imul__, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_transpose, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.conjugate_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_conjugate_transpose, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.update = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_update, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.set_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_column, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.set_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_columns, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.set_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_row, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.extract = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_extract, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.get_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_row, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.get_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_column, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.get_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_rows, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.get_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_columns, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.get_n_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_n_rows, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.get_n_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_n_columns, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.get_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_diagonal, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.flatten_row_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_flatten_row_major, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.flatten_column_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_flatten_column_major, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.set_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_identity, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.flipud = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_flipud, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.fliplr = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_fliplr, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.normalize_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_normalize_rows, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.normalize_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_normalize_columns, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.scale_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_scale_row, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.scale_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_scale_column, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.swap = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_swap, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.array_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_array_one_norm, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.array_two_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_array_two_norm, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.array_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_array_inf_norm, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.absolute_value_sum = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_absolute_value_sum, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.absolute_value_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_absolute_value_max, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.operator_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_operator_one_norm, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.operator_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_operator_inf_norm, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.frobenius_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_frobenius_norm, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.fro_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_fro_norm, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.rms = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_rms, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.min_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_min_value, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.max_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_max_value, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.arg_min = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_arg_min, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.arg_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_arg_max, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.mean = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_mean, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.empty = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_empty, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.is_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_is_identity, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.is_zero = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_is_zero, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.is_equal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_is_equal, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.is_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_is_finite, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.has_nans = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_has_nans, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.assert_size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_assert_size, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.assert_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_assert_finite, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.read_ascii = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_read_ascii, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.data_block = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_data_block, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.as_matrix = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_as_matrix, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.begin = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_begin, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.end = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_end, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.operator_eq = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_operator_eq, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.__eq__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___eq__, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4.__ne__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___ne__, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4._print = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4__print, None, vnl_matrix_fixedD_3_4)
vnl_matrix_fixedD_3_4_swigregister = _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_swigregister
vnl_matrix_fixedD_3_4_swigregister(vnl_matrix_fixedD_3_4)

def vnl_matrix_fixedD_3_4_add(*args) -> "void":
    """
    add(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_3_4_add(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_add(*args)

def vnl_matrix_fixedD_3_4_sub(*args) -> "void":
    """
    sub(double const * a, double const * b, double * r)
    sub(double const * a, double b, double * r)
    vnl_matrix_fixedD_3_4_sub(double a, double const * b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_sub(*args)

def vnl_matrix_fixedD_3_4_mul(*args) -> "void":
    """
    mul(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_3_4_mul(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_mul(*args)

def vnl_matrix_fixedD_3_4_div(*args) -> "void":
    """
    div(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_3_4_div(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_div(*args)

def vnl_matrix_fixedD_3_4_equal(a: 'double const *', b: 'double const *') -> "bool":
    """vnl_matrix_fixedD_3_4_equal(double const * a, double const * b) -> bool"""
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_equal(a, b)

class vnl_matrix_fixedD_4_3(object):
    """Proxy of C++ vnl_matrix_fixedD_4_3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_4_3

    def __init__(self, *args):
        """
        __init__(vnl_matrix_fixedD_4_3 self) -> vnl_matrix_fixedD_4_3
        __init__(vnl_matrix_fixedD_4_3 self, vnl_matrix_fixedD_4_3 rhs) -> vnl_matrix_fixedD_4_3
        __init__(vnl_matrix_fixedD_4_3 self, unsigned int n, unsigned int m) -> vnl_matrix_fixedD_4_3
        __init__(vnl_matrix_fixedD_4_3 self, double value) -> vnl_matrix_fixedD_4_3
        __init__(vnl_matrix_fixedD_4_3 self, double const * datablck) -> vnl_matrix_fixedD_4_3
        __init__(vnl_matrix_fixedD_4_3 self, vnl_matrixD rhs) -> vnl_matrix_fixedD_4_3
        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_4_3(*args))

    def size(self) -> "unsigned int":
        """size(vnl_matrix_fixedD_4_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrix_fixedD_4_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrix_fixedD_4_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrix_fixedD_4_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', v: 'double const &') -> "void":
        """put(vnl_matrix_fixedD_4_3 self, unsigned int r, unsigned int c, double const & v)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_put(self, r, c, v)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "double":
        """get(vnl_matrix_fixedD_4_3 self, unsigned int r, unsigned int c) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get(self, r, c)


    def __call__(self, *args) -> "double const &":
        """
        __call__(vnl_matrix_fixedD_4_3 self, unsigned int r, unsigned int c) -> double
        __call__(vnl_matrix_fixedD_4_3 self, unsigned int r, unsigned int c) -> double const &
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___call__(self, *args)


    def fill(self, arg0: 'double') -> "vnl_matrix_fixedD_4_3 &":
        """fill(vnl_matrix_fixedD_4_3 self, double arg0) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_fill(self, arg0)


    def fill_diagonal(self, arg0: 'double') -> "vnl_matrix_fixedD_4_3 &":
        """fill_diagonal(vnl_matrix_fixedD_4_3 self, double arg0) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorD') -> "vnl_matrix_fixedD_4_3 &":
        """set_diagonal(vnl_matrix_fixedD_4_3 self, vnl_vectorD arg0) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'double const *') -> "vnl_matrix_fixedD_4_3 &":
        """copy_in(vnl_matrix_fixedD_4_3 self, double const * arg0) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_copy_in(self, arg0)


    def set(self, *args) -> "vnl_matrix_fixedD_4_3 &":
        """
        set(vnl_matrix_fixedD_4_3 self, unsigned int r, unsigned int c, double const & v) -> vnl_matrix_fixedD_4_3
        set(vnl_matrix_fixedD_4_3 self, double const * d) -> vnl_matrix_fixedD_4_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set(self, *args)


    def copy_out(self, arg0: 'double *') -> "void":
        """copy_out(vnl_matrix_fixedD_4_3 self, double * arg0)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_copy_out(self, arg0)


    def inplace_transpose(self) -> "vnl_matrix_fixedD_4_3 &":
        """inplace_transpose(vnl_matrix_fixedD_4_3 self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_inplace_transpose(self)


    def __idiv__(self, s: 'double') -> "vnl_matrix_fixedD_4_3 &":
        """__idiv__(vnl_matrix_fixedD_4_3 self, double s) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___idiv__(self, s)


    def __iadd__(self, *args) -> "vnl_matrix_fixedD_4_3 &":
        """
        __iadd__(vnl_matrix_fixedD_4_3 self, double s) -> vnl_matrix_fixedD_4_3
        __iadd__(vnl_matrix_fixedD_4_3 self, vnl_matrix_fixedD_4_3 m) -> vnl_matrix_fixedD_4_3
        __iadd__(vnl_matrix_fixedD_4_3 self, vnl_matrixD m) -> vnl_matrix_fixedD_4_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrix_fixedD_4_3 &":
        """
        __isub__(vnl_matrix_fixedD_4_3 self, double s) -> vnl_matrix_fixedD_4_3
        __isub__(vnl_matrix_fixedD_4_3 self, vnl_matrix_fixedD_4_3 m) -> vnl_matrix_fixedD_4_3
        __isub__(vnl_matrix_fixedD_4_3 self, vnl_matrixD m) -> vnl_matrix_fixedD_4_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___isub__(self, *args)


    def __neg__(self) -> "vnl_matrix_fixedD_4_3":
        """__neg__(vnl_matrix_fixedD_4_3 self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___neg__(self)


    def __imul__(self, *args) -> "vnl_matrix_fixedD_4_3 &":
        """
        __imul__(vnl_matrix_fixedD_4_3 self, double s) -> vnl_matrix_fixedD_4_3
        __imul__(vnl_matrix_fixedD_4_3 self, vnl_matrix_fixedD_3_3 s) -> vnl_matrix_fixedD_4_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___imul__(self, *args)


    def transpose(self) -> "vnl_matrix_fixedD_3_4":
        """transpose(vnl_matrix_fixedD_4_3 self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrix_fixedD_3_4":
        """conjugate_transpose(vnl_matrix_fixedD_4_3 self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixD', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrix_fixedD_4_3 &":
        """
        update(vnl_matrix_fixedD_4_3 self, vnl_matrixD arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrix_fixedD_4_3
        update(vnl_matrix_fixedD_4_3 self, vnl_matrixD arg0, unsigned int top=0) -> vnl_matrix_fixedD_4_3
        update(vnl_matrix_fixedD_4_3 self, vnl_matrixD arg0) -> vnl_matrix_fixedD_4_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrix_fixedD_4_3 &":
        """
        set_column(vnl_matrix_fixedD_4_3 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_4_3
        set_column(vnl_matrix_fixedD_4_3 self, unsigned int i, double value) -> vnl_matrix_fixedD_4_3
        set_column(vnl_matrix_fixedD_4_3 self, unsigned int j, vnl_vectorD v) -> vnl_matrix_fixedD_4_3
        set_column(vnl_matrix_fixedD_4_3 self, unsigned int j, vnl_vector_fixed< double,4 > const & v) -> vnl_matrix_fixedD_4_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixD') -> "vnl_matrix_fixedD_4_3 &":
        """set_columns(vnl_matrix_fixedD_4_3 self, unsigned int starting_column, vnl_matrixD M) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrix_fixedD_4_3 &":
        """
        set_row(vnl_matrix_fixedD_4_3 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_4_3
        set_row(vnl_matrix_fixedD_4_3 self, unsigned int i, double value) -> vnl_matrix_fixedD_4_3
        set_row(vnl_matrix_fixedD_4_3 self, unsigned int i, vnl_vectorD arg1) -> vnl_matrix_fixedD_4_3
        set_row(vnl_matrix_fixedD_4_3 self, unsigned int i, vnl_vector_fixed< double,3 > const & arg1) -> vnl_matrix_fixedD_4_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrix_fixedD_4_3 self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_4_3 self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_4_3 self, unsigned int r, unsigned int c) -> vnl_matrixD
        extract(vnl_matrix_fixedD_4_3 self, vnl_matrixD sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrix_fixedD_4_3 self, vnl_matrixD sub_matrix, unsigned int top=0)
        extract(vnl_matrix_fixedD_4_3 self, vnl_matrixD sub_matrix)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_extract(self, *args)


    def get_row(self, row: 'unsigned int') -> "vnl_vector_fixed< double,3 >":
        """get_row(vnl_matrix_fixedD_4_3 self, unsigned int row) -> vnl_vector_fixed< double,3 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_row(self, row)


    def get_column(self, col: 'unsigned int') -> "vnl_vector_fixed< double,4 >":
        """get_column(vnl_matrix_fixedD_4_3 self, unsigned int col) -> vnl_vector_fixed< double,4 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_column(self, col)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_rows(vnl_matrix_fixedD_4_3 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_columns(vnl_matrix_fixedD_4_3 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_rows(vnl_matrix_fixedD_4_3 self, unsigned int rowstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_columns(vnl_matrix_fixedD_4_3 self, unsigned int colstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorD":
        """get_diagonal(vnl_matrix_fixedD_4_3 self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vector_fixed< double,12 >":
        """flatten_row_major(vnl_matrix_fixedD_4_3 self) -> vnl_vector_fixed< double,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vector_fixed< double,12 >":
        """flatten_column_major(vnl_matrix_fixedD_4_3 self) -> vnl_vector_fixed< double,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrix_fixedD_4_3 &":
        """set_identity(vnl_matrix_fixedD_4_3 self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_identity(self)


    def flipud(self) -> "vnl_matrix_fixedD_4_3 &":
        """flipud(vnl_matrix_fixedD_4_3 self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_flipud(self)


    def fliplr(self) -> "vnl_matrix_fixedD_4_3 &":
        """fliplr(vnl_matrix_fixedD_4_3 self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_fliplr(self)


    def normalize_rows(self) -> "vnl_matrix_fixedD_4_3 &":
        """normalize_rows(vnl_matrix_fixedD_4_3 self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrix_fixedD_4_3 &":
        """normalize_columns(vnl_matrix_fixedD_4_3 self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_4_3 &":
        """scale_row(vnl_matrix_fixedD_4_3 self, unsigned int row, double value) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_4_3 &":
        """scale_column(vnl_matrix_fixedD_4_3 self, unsigned int col, double value) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrix_fixedD_4_3') -> "void":
        """swap(vnl_matrix_fixedD_4_3 self, vnl_matrix_fixedD_4_3 that)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_swap(self, that)


    def array_one_norm(self) -> "double":
        """array_one_norm(vnl_matrix_fixedD_4_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_array_one_norm(self)


    def array_two_norm(self) -> "double":
        """array_two_norm(vnl_matrix_fixedD_4_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_array_two_norm(self)


    def array_inf_norm(self) -> "double":
        """array_inf_norm(vnl_matrix_fixedD_4_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_array_inf_norm(self)


    def absolute_value_sum(self) -> "double":
        """absolute_value_sum(vnl_matrix_fixedD_4_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_absolute_value_sum(self)


    def absolute_value_max(self) -> "double":
        """absolute_value_max(vnl_matrix_fixedD_4_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_absolute_value_max(self)


    def operator_one_norm(self) -> "double":
        """operator_one_norm(vnl_matrix_fixedD_4_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_operator_one_norm(self)


    def operator_inf_norm(self) -> "double":
        """operator_inf_norm(vnl_matrix_fixedD_4_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_operator_inf_norm(self)


    def frobenius_norm(self) -> "double":
        """frobenius_norm(vnl_matrix_fixedD_4_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_frobenius_norm(self)


    def fro_norm(self) -> "double":
        """fro_norm(vnl_matrix_fixedD_4_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_fro_norm(self)


    def rms(self) -> "double":
        """rms(vnl_matrix_fixedD_4_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_rms(self)


    def min_value(self) -> "double":
        """min_value(vnl_matrix_fixedD_4_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_min_value(self)


    def max_value(self) -> "double":
        """max_value(vnl_matrix_fixedD_4_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrix_fixedD_4_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrix_fixedD_4_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_arg_max(self)


    def mean(self) -> "double":
        """mean(vnl_matrix_fixedD_4_3 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrix_fixedD_4_3 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrix_fixedD_4_3 self) -> bool
        is_identity(vnl_matrix_fixedD_4_3 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrix_fixedD_4_3 self) -> bool
        is_zero(vnl_matrix_fixedD_4_3 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrix_fixedD_4_3', tol: 'double') -> "bool":
        """is_equal(vnl_matrix_fixedD_4_3 self, vnl_matrix_fixedD_4_3 rhs, double tol) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrix_fixedD_4_3 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrix_fixedD_4_3 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_has_nans(self)


    def assert_size(self, nr_rows: 'unsigned int', nr_cols: 'unsigned int') -> "void":
        """assert_size(vnl_matrix_fixedD_4_3 self, unsigned int nr_rows, unsigned int nr_cols)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_assert_size(self, nr_rows, nr_cols)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrix_fixedD_4_3 self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_assert_finite(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrix_fixedD_4_3 self, istream s) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_read_ascii(self, s)


    def data_block(self, *args) -> "double *":
        """
        data_block(vnl_matrix_fixedD_4_3 self) -> double const
        data_block(vnl_matrix_fixedD_4_3 self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_data_block(self, *args)


    def as_matrix(self) -> "vnl_matrixD const":
        """as_matrix(vnl_matrix_fixedD_4_3 self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_as_matrix(self)


    def begin(self, *args) -> "double const *":
        """
        begin(vnl_matrix_fixedD_4_3 self) -> double
        begin(vnl_matrix_fixedD_4_3 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_begin(self, *args)


    def end(self, *args) -> "double const *":
        """
        end(vnl_matrix_fixedD_4_3 self) -> double
        end(vnl_matrix_fixedD_4_3 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrix_fixedD_4_3') -> "bool":
        """operator_eq(vnl_matrix_fixedD_4_3 self, vnl_matrix_fixedD_4_3 rhs) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_operator_eq(self, rhs)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(vnl_matrix_fixedD_4_3 self, vnl_matrix_fixedD_4_3 that) -> bool
        __eq__(vnl_matrix_fixedD_4_3 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(vnl_matrix_fixedD_4_3 self, vnl_matrix_fixedD_4_3 that) -> bool
        __ne__(vnl_matrix_fixedD_4_3 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___ne__(self, *args)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrix_fixedD_4_3 self, ostream os)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3__print(self, os)


    def add(*args) -> "void":
        """
        add(double const * a, double const * b, double * r)
        add(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_add(*args)

    add = staticmethod(add)

    def sub(*args) -> "void":
        """
        sub(double const * a, double const * b, double * r)
        sub(double const * a, double b, double * r)
        sub(double a, double const * b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_sub(*args)

    sub = staticmethod(sub)

    def mul(*args) -> "void":
        """
        mul(double const * a, double const * b, double * r)
        mul(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_mul(*args)

    mul = staticmethod(mul)

    def div(*args) -> "void":
        """
        div(double const * a, double const * b, double * r)
        div(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_div(*args)

    div = staticmethod(div)

    def equal(a: 'double const *', b: 'double const *') -> "bool":
        """equal(double const * a, double const * b) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_equal(a, b)

    equal = staticmethod(equal)
vnl_matrix_fixedD_4_3.size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_size, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_rows, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.cols = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_cols, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_columns, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.put = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_put, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.get = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.__call__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___call__, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.fill = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_fill, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.fill_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_fill_diagonal, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.set_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_diagonal, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.copy_in = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_copy_in, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.set = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.copy_out = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_copy_out, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.inplace_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_inplace_transpose, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.__idiv__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___idiv__, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.__iadd__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___iadd__, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.__isub__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___isub__, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.__neg__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___neg__, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.__imul__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___imul__, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_transpose, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.conjugate_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_conjugate_transpose, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.update = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_update, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.set_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_column, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.set_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_columns, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.set_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_row, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.extract = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_extract, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.get_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_row, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.get_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_column, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.get_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_rows, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.get_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_columns, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.get_n_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_n_rows, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.get_n_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_n_columns, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.get_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_diagonal, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.flatten_row_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_flatten_row_major, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.flatten_column_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_flatten_column_major, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.set_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_identity, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.flipud = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_flipud, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.fliplr = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_fliplr, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.normalize_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_normalize_rows, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.normalize_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_normalize_columns, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.scale_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_scale_row, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.scale_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_scale_column, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.swap = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_swap, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.array_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_array_one_norm, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.array_two_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_array_two_norm, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.array_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_array_inf_norm, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.absolute_value_sum = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_absolute_value_sum, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.absolute_value_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_absolute_value_max, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.operator_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_operator_one_norm, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.operator_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_operator_inf_norm, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.frobenius_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_frobenius_norm, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.fro_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_fro_norm, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.rms = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_rms, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.min_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_min_value, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.max_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_max_value, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.arg_min = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_arg_min, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.arg_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_arg_max, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.mean = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_mean, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.empty = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_empty, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.is_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_is_identity, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.is_zero = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_is_zero, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.is_equal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_is_equal, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.is_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_is_finite, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.has_nans = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_has_nans, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.assert_size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_assert_size, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.assert_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_assert_finite, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.read_ascii = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_read_ascii, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.data_block = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_data_block, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.as_matrix = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_as_matrix, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.begin = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_begin, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.end = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_end, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.operator_eq = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_operator_eq, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.__eq__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___eq__, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3.__ne__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___ne__, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3._print = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3__print, None, vnl_matrix_fixedD_4_3)
vnl_matrix_fixedD_4_3_swigregister = _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_swigregister
vnl_matrix_fixedD_4_3_swigregister(vnl_matrix_fixedD_4_3)

def vnl_matrix_fixedD_4_3_add(*args) -> "void":
    """
    add(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_4_3_add(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_add(*args)

def vnl_matrix_fixedD_4_3_sub(*args) -> "void":
    """
    sub(double const * a, double const * b, double * r)
    sub(double const * a, double b, double * r)
    vnl_matrix_fixedD_4_3_sub(double a, double const * b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_sub(*args)

def vnl_matrix_fixedD_4_3_mul(*args) -> "void":
    """
    mul(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_4_3_mul(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_mul(*args)

def vnl_matrix_fixedD_4_3_div(*args) -> "void":
    """
    div(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_4_3_div(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_div(*args)

def vnl_matrix_fixedD_4_3_equal(a: 'double const *', b: 'double const *') -> "bool":
    """vnl_matrix_fixedD_4_3_equal(double const * a, double const * b) -> bool"""
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_equal(a, b)

class vnl_matrix_fixedD_4_4(object):
    """Proxy of C++ vnl_matrix_fixedD_4_4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_4_4

    def __init__(self, *args):
        """
        __init__(vnl_matrix_fixedD_4_4 self) -> vnl_matrix_fixedD_4_4
        __init__(vnl_matrix_fixedD_4_4 self, vnl_matrix_fixedD_4_4 rhs) -> vnl_matrix_fixedD_4_4
        __init__(vnl_matrix_fixedD_4_4 self, unsigned int n, unsigned int m) -> vnl_matrix_fixedD_4_4
        __init__(vnl_matrix_fixedD_4_4 self, double value) -> vnl_matrix_fixedD_4_4
        __init__(vnl_matrix_fixedD_4_4 self, double const * datablck) -> vnl_matrix_fixedD_4_4
        __init__(vnl_matrix_fixedD_4_4 self, vnl_matrixD rhs) -> vnl_matrix_fixedD_4_4
        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_4_4(*args))

    def size(self) -> "unsigned int":
        """size(vnl_matrix_fixedD_4_4 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrix_fixedD_4_4 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrix_fixedD_4_4 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrix_fixedD_4_4 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', v: 'double const &') -> "void":
        """put(vnl_matrix_fixedD_4_4 self, unsigned int r, unsigned int c, double const & v)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_put(self, r, c, v)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "double":
        """get(vnl_matrix_fixedD_4_4 self, unsigned int r, unsigned int c) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get(self, r, c)


    def __call__(self, *args) -> "double const &":
        """
        __call__(vnl_matrix_fixedD_4_4 self, unsigned int r, unsigned int c) -> double
        __call__(vnl_matrix_fixedD_4_4 self, unsigned int r, unsigned int c) -> double const &
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___call__(self, *args)


    def fill(self, arg0: 'double') -> "vnl_matrix_fixedD_4_4 &":
        """fill(vnl_matrix_fixedD_4_4 self, double arg0) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_fill(self, arg0)


    def fill_diagonal(self, arg0: 'double') -> "vnl_matrix_fixedD_4_4 &":
        """fill_diagonal(vnl_matrix_fixedD_4_4 self, double arg0) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorD') -> "vnl_matrix_fixedD_4_4 &":
        """set_diagonal(vnl_matrix_fixedD_4_4 self, vnl_vectorD arg0) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'double const *') -> "vnl_matrix_fixedD_4_4 &":
        """copy_in(vnl_matrix_fixedD_4_4 self, double const * arg0) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_copy_in(self, arg0)


    def set(self, *args) -> "vnl_matrix_fixedD_4_4 &":
        """
        set(vnl_matrix_fixedD_4_4 self, unsigned int r, unsigned int c, double const & v) -> vnl_matrix_fixedD_4_4
        set(vnl_matrix_fixedD_4_4 self, double const * d) -> vnl_matrix_fixedD_4_4
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set(self, *args)


    def copy_out(self, arg0: 'double *') -> "void":
        """copy_out(vnl_matrix_fixedD_4_4 self, double * arg0)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_copy_out(self, arg0)


    def inplace_transpose(self) -> "vnl_matrix_fixedD_4_4 &":
        """inplace_transpose(vnl_matrix_fixedD_4_4 self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_inplace_transpose(self)


    def __idiv__(self, s: 'double') -> "vnl_matrix_fixedD_4_4 &":
        """__idiv__(vnl_matrix_fixedD_4_4 self, double s) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___idiv__(self, s)


    def __iadd__(self, *args) -> "vnl_matrix_fixedD_4_4 &":
        """
        __iadd__(vnl_matrix_fixedD_4_4 self, double s) -> vnl_matrix_fixedD_4_4
        __iadd__(vnl_matrix_fixedD_4_4 self, vnl_matrix_fixedD_4_4 m) -> vnl_matrix_fixedD_4_4
        __iadd__(vnl_matrix_fixedD_4_4 self, vnl_matrixD m) -> vnl_matrix_fixedD_4_4
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrix_fixedD_4_4 &":
        """
        __isub__(vnl_matrix_fixedD_4_4 self, double s) -> vnl_matrix_fixedD_4_4
        __isub__(vnl_matrix_fixedD_4_4 self, vnl_matrix_fixedD_4_4 m) -> vnl_matrix_fixedD_4_4
        __isub__(vnl_matrix_fixedD_4_4 self, vnl_matrixD m) -> vnl_matrix_fixedD_4_4
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___isub__(self, *args)


    def __neg__(self) -> "vnl_matrix_fixedD_4_4":
        """__neg__(vnl_matrix_fixedD_4_4 self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___neg__(self)


    def __imul__(self, *args) -> "vnl_matrix_fixedD_4_4 &":
        """
        __imul__(vnl_matrix_fixedD_4_4 self, double s) -> vnl_matrix_fixedD_4_4
        __imul__(vnl_matrix_fixedD_4_4 self, vnl_matrix_fixedD_4_4 s) -> vnl_matrix_fixedD_4_4
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___imul__(self, *args)


    def transpose(self) -> "vnl_matrix_fixedD_4_4":
        """transpose(vnl_matrix_fixedD_4_4 self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrix_fixedD_4_4":
        """conjugate_transpose(vnl_matrix_fixedD_4_4 self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixD', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrix_fixedD_4_4 &":
        """
        update(vnl_matrix_fixedD_4_4 self, vnl_matrixD arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrix_fixedD_4_4
        update(vnl_matrix_fixedD_4_4 self, vnl_matrixD arg0, unsigned int top=0) -> vnl_matrix_fixedD_4_4
        update(vnl_matrix_fixedD_4_4 self, vnl_matrixD arg0) -> vnl_matrix_fixedD_4_4
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrix_fixedD_4_4 &":
        """
        set_column(vnl_matrix_fixedD_4_4 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_4_4
        set_column(vnl_matrix_fixedD_4_4 self, unsigned int i, double value) -> vnl_matrix_fixedD_4_4
        set_column(vnl_matrix_fixedD_4_4 self, unsigned int j, vnl_vectorD v) -> vnl_matrix_fixedD_4_4
        set_column(vnl_matrix_fixedD_4_4 self, unsigned int j, vnl_vector_fixed< double,4 > const & v) -> vnl_matrix_fixedD_4_4
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixD') -> "vnl_matrix_fixedD_4_4 &":
        """set_columns(vnl_matrix_fixedD_4_4 self, unsigned int starting_column, vnl_matrixD M) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrix_fixedD_4_4 &":
        """
        set_row(vnl_matrix_fixedD_4_4 self, unsigned int i, double const * v) -> vnl_matrix_fixedD_4_4
        set_row(vnl_matrix_fixedD_4_4 self, unsigned int i, double value) -> vnl_matrix_fixedD_4_4
        set_row(vnl_matrix_fixedD_4_4 self, unsigned int i, vnl_vectorD arg1) -> vnl_matrix_fixedD_4_4
        set_row(vnl_matrix_fixedD_4_4 self, unsigned int i, vnl_vector_fixed< double,4 > const & arg1) -> vnl_matrix_fixedD_4_4
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrix_fixedD_4_4 self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_4_4 self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixD
        extract(vnl_matrix_fixedD_4_4 self, unsigned int r, unsigned int c) -> vnl_matrixD
        extract(vnl_matrix_fixedD_4_4 self, vnl_matrixD sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrix_fixedD_4_4 self, vnl_matrixD sub_matrix, unsigned int top=0)
        extract(vnl_matrix_fixedD_4_4 self, vnl_matrixD sub_matrix)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_extract(self, *args)


    def get_row(self, row: 'unsigned int') -> "vnl_vector_fixed< double,4 >":
        """get_row(vnl_matrix_fixedD_4_4 self, unsigned int row) -> vnl_vector_fixed< double,4 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_row(self, row)


    def get_column(self, col: 'unsigned int') -> "vnl_vector_fixed< double,4 >":
        """get_column(vnl_matrix_fixedD_4_4 self, unsigned int col) -> vnl_vector_fixed< double,4 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_column(self, col)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_rows(vnl_matrix_fixedD_4_4 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixD":
        """get_columns(vnl_matrix_fixedD_4_4 self, vnl_vectorUI i) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_rows(vnl_matrix_fixedD_4_4 self, unsigned int rowstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixD":
        """get_n_columns(vnl_matrix_fixedD_4_4 self, unsigned int colstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorD":
        """get_diagonal(vnl_matrix_fixedD_4_4 self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vector_fixed< double,16 >":
        """flatten_row_major(vnl_matrix_fixedD_4_4 self) -> vnl_vector_fixed< double,16 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vector_fixed< double,16 >":
        """flatten_column_major(vnl_matrix_fixedD_4_4 self) -> vnl_vector_fixed< double,16 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrix_fixedD_4_4 &":
        """set_identity(vnl_matrix_fixedD_4_4 self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_identity(self)


    def flipud(self) -> "vnl_matrix_fixedD_4_4 &":
        """flipud(vnl_matrix_fixedD_4_4 self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_flipud(self)


    def fliplr(self) -> "vnl_matrix_fixedD_4_4 &":
        """fliplr(vnl_matrix_fixedD_4_4 self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_fliplr(self)


    def normalize_rows(self) -> "vnl_matrix_fixedD_4_4 &":
        """normalize_rows(vnl_matrix_fixedD_4_4 self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrix_fixedD_4_4 &":
        """normalize_columns(vnl_matrix_fixedD_4_4 self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_4_4 &":
        """scale_row(vnl_matrix_fixedD_4_4 self, unsigned int row, double value) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'double') -> "vnl_matrix_fixedD_4_4 &":
        """scale_column(vnl_matrix_fixedD_4_4 self, unsigned int col, double value) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrix_fixedD_4_4') -> "void":
        """swap(vnl_matrix_fixedD_4_4 self, vnl_matrix_fixedD_4_4 that)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_swap(self, that)


    def array_one_norm(self) -> "double":
        """array_one_norm(vnl_matrix_fixedD_4_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_array_one_norm(self)


    def array_two_norm(self) -> "double":
        """array_two_norm(vnl_matrix_fixedD_4_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_array_two_norm(self)


    def array_inf_norm(self) -> "double":
        """array_inf_norm(vnl_matrix_fixedD_4_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_array_inf_norm(self)


    def absolute_value_sum(self) -> "double":
        """absolute_value_sum(vnl_matrix_fixedD_4_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_absolute_value_sum(self)


    def absolute_value_max(self) -> "double":
        """absolute_value_max(vnl_matrix_fixedD_4_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_absolute_value_max(self)


    def operator_one_norm(self) -> "double":
        """operator_one_norm(vnl_matrix_fixedD_4_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_operator_one_norm(self)


    def operator_inf_norm(self) -> "double":
        """operator_inf_norm(vnl_matrix_fixedD_4_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_operator_inf_norm(self)


    def frobenius_norm(self) -> "double":
        """frobenius_norm(vnl_matrix_fixedD_4_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_frobenius_norm(self)


    def fro_norm(self) -> "double":
        """fro_norm(vnl_matrix_fixedD_4_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_fro_norm(self)


    def rms(self) -> "double":
        """rms(vnl_matrix_fixedD_4_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_rms(self)


    def min_value(self) -> "double":
        """min_value(vnl_matrix_fixedD_4_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_min_value(self)


    def max_value(self) -> "double":
        """max_value(vnl_matrix_fixedD_4_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrix_fixedD_4_4 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrix_fixedD_4_4 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_arg_max(self)


    def mean(self) -> "double":
        """mean(vnl_matrix_fixedD_4_4 self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrix_fixedD_4_4 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrix_fixedD_4_4 self) -> bool
        is_identity(vnl_matrix_fixedD_4_4 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrix_fixedD_4_4 self) -> bool
        is_zero(vnl_matrix_fixedD_4_4 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrix_fixedD_4_4', tol: 'double') -> "bool":
        """is_equal(vnl_matrix_fixedD_4_4 self, vnl_matrix_fixedD_4_4 rhs, double tol) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrix_fixedD_4_4 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrix_fixedD_4_4 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_has_nans(self)


    def assert_size(self, nr_rows: 'unsigned int', nr_cols: 'unsigned int') -> "void":
        """assert_size(vnl_matrix_fixedD_4_4 self, unsigned int nr_rows, unsigned int nr_cols)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_assert_size(self, nr_rows, nr_cols)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrix_fixedD_4_4 self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_assert_finite(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrix_fixedD_4_4 self, istream s) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_read_ascii(self, s)


    def data_block(self, *args) -> "double *":
        """
        data_block(vnl_matrix_fixedD_4_4 self) -> double const
        data_block(vnl_matrix_fixedD_4_4 self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_data_block(self, *args)


    def as_matrix(self) -> "vnl_matrixD const":
        """as_matrix(vnl_matrix_fixedD_4_4 self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_as_matrix(self)


    def begin(self, *args) -> "double const *":
        """
        begin(vnl_matrix_fixedD_4_4 self) -> double
        begin(vnl_matrix_fixedD_4_4 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_begin(self, *args)


    def end(self, *args) -> "double const *":
        """
        end(vnl_matrix_fixedD_4_4 self) -> double
        end(vnl_matrix_fixedD_4_4 self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrix_fixedD_4_4') -> "bool":
        """operator_eq(vnl_matrix_fixedD_4_4 self, vnl_matrix_fixedD_4_4 rhs) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_operator_eq(self, rhs)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(vnl_matrix_fixedD_4_4 self, vnl_matrix_fixedD_4_4 that) -> bool
        __eq__(vnl_matrix_fixedD_4_4 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(vnl_matrix_fixedD_4_4 self, vnl_matrix_fixedD_4_4 that) -> bool
        __ne__(vnl_matrix_fixedD_4_4 self, vnl_matrixD that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___ne__(self, *args)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrix_fixedD_4_4 self, ostream os)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4__print(self, os)


    def add(*args) -> "void":
        """
        add(double const * a, double const * b, double * r)
        add(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_add(*args)

    add = staticmethod(add)

    def sub(*args) -> "void":
        """
        sub(double const * a, double const * b, double * r)
        sub(double const * a, double b, double * r)
        sub(double a, double const * b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_sub(*args)

    sub = staticmethod(sub)

    def mul(*args) -> "void":
        """
        mul(double const * a, double const * b, double * r)
        mul(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_mul(*args)

    mul = staticmethod(mul)

    def div(*args) -> "void":
        """
        div(double const * a, double const * b, double * r)
        div(double const * a, double b, double * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_div(*args)

    div = staticmethod(div)

    def equal(a: 'double const *', b: 'double const *') -> "bool":
        """equal(double const * a, double const * b) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_equal(a, b)

    equal = staticmethod(equal)
vnl_matrix_fixedD_4_4.size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_size, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_rows, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.cols = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_cols, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_columns, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.put = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_put, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.get = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.__call__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___call__, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.fill = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_fill, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.fill_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_fill_diagonal, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.set_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_diagonal, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.copy_in = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_copy_in, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.set = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.copy_out = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_copy_out, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.inplace_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_inplace_transpose, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.__idiv__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___idiv__, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.__iadd__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___iadd__, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.__isub__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___isub__, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.__neg__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___neg__, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.__imul__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___imul__, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_transpose, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.conjugate_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_conjugate_transpose, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.update = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_update, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.set_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_column, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.set_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_columns, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.set_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_row, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.extract = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_extract, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.get_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_row, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.get_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_column, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.get_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_rows, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.get_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_columns, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.get_n_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_n_rows, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.get_n_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_n_columns, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.get_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_diagonal, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.flatten_row_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_flatten_row_major, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.flatten_column_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_flatten_column_major, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.set_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_identity, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.flipud = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_flipud, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.fliplr = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_fliplr, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.normalize_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_normalize_rows, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.normalize_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_normalize_columns, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.scale_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_scale_row, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.scale_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_scale_column, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.swap = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_swap, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.array_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_array_one_norm, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.array_two_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_array_two_norm, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.array_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_array_inf_norm, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.absolute_value_sum = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_absolute_value_sum, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.absolute_value_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_absolute_value_max, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.operator_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_operator_one_norm, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.operator_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_operator_inf_norm, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.frobenius_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_frobenius_norm, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.fro_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_fro_norm, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.rms = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_rms, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.min_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_min_value, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.max_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_max_value, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.arg_min = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_arg_min, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.arg_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_arg_max, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.mean = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_mean, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.empty = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_empty, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.is_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_is_identity, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.is_zero = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_is_zero, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.is_equal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_is_equal, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.is_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_is_finite, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.has_nans = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_has_nans, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.assert_size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_assert_size, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.assert_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_assert_finite, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.read_ascii = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_read_ascii, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.data_block = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_data_block, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.as_matrix = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_as_matrix, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.begin = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_begin, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.end = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_end, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.operator_eq = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_operator_eq, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.__eq__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___eq__, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4.__ne__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___ne__, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4._print = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4__print, None, vnl_matrix_fixedD_4_4)
vnl_matrix_fixedD_4_4_swigregister = _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_swigregister
vnl_matrix_fixedD_4_4_swigregister(vnl_matrix_fixedD_4_4)

def vnl_matrix_fixedD_4_4_add(*args) -> "void":
    """
    add(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_4_4_add(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_add(*args)

def vnl_matrix_fixedD_4_4_sub(*args) -> "void":
    """
    sub(double const * a, double const * b, double * r)
    sub(double const * a, double b, double * r)
    vnl_matrix_fixedD_4_4_sub(double a, double const * b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_sub(*args)

def vnl_matrix_fixedD_4_4_mul(*args) -> "void":
    """
    mul(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_4_4_mul(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_mul(*args)

def vnl_matrix_fixedD_4_4_div(*args) -> "void":
    """
    div(double const * a, double const * b, double * r)
    vnl_matrix_fixedD_4_4_div(double const * a, double b, double * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_div(*args)

def vnl_matrix_fixedD_4_4_equal(a: 'double const *', b: 'double const *') -> "bool":
    """vnl_matrix_fixedD_4_4_equal(double const * a, double const * b) -> bool"""
    return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_equal(a, b)

class vnl_matrix_fixedF_3_3(object):
    """Proxy of C++ vnl_matrix_fixedF_3_3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedF_3_3

    def __init__(self, *args):
        """
        __init__(vnl_matrix_fixedF_3_3 self) -> vnl_matrix_fixedF_3_3
        __init__(vnl_matrix_fixedF_3_3 self, vnl_matrix_fixedF_3_3 rhs) -> vnl_matrix_fixedF_3_3
        __init__(vnl_matrix_fixedF_3_3 self, unsigned int n, unsigned int m) -> vnl_matrix_fixedF_3_3
        __init__(vnl_matrix_fixedF_3_3 self, float value) -> vnl_matrix_fixedF_3_3
        __init__(vnl_matrix_fixedF_3_3 self, float const * datablck) -> vnl_matrix_fixedF_3_3
        __init__(vnl_matrix_fixedF_3_3 self, vnl_matrixF rhs) -> vnl_matrix_fixedF_3_3
        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedF_3_3(*args))

    def size(self) -> "unsigned int":
        """size(vnl_matrix_fixedF_3_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_size(self)


    def rows(self) -> "unsigned int":
        """rows(vnl_matrix_fixedF_3_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_rows(self)


    def cols(self) -> "unsigned int":
        """cols(vnl_matrix_fixedF_3_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_cols(self)


    def columns(self) -> "unsigned int":
        """columns(vnl_matrix_fixedF_3_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_columns(self)


    def put(self, r: 'unsigned int', c: 'unsigned int', v: 'float const &') -> "void":
        """put(vnl_matrix_fixedF_3_3 self, unsigned int r, unsigned int c, float const & v)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_put(self, r, c, v)


    def get(self, r: 'unsigned int', c: 'unsigned int') -> "float":
        """get(vnl_matrix_fixedF_3_3 self, unsigned int r, unsigned int c) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get(self, r, c)


    def __call__(self, *args) -> "float const &":
        """
        __call__(vnl_matrix_fixedF_3_3 self, unsigned int r, unsigned int c) -> float
        __call__(vnl_matrix_fixedF_3_3 self, unsigned int r, unsigned int c) -> float const &
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___call__(self, *args)


    def fill(self, arg0: 'float') -> "vnl_matrix_fixedF_3_3 &":
        """fill(vnl_matrix_fixedF_3_3 self, float arg0) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_fill(self, arg0)


    def fill_diagonal(self, arg0: 'float') -> "vnl_matrix_fixedF_3_3 &":
        """fill_diagonal(vnl_matrix_fixedF_3_3 self, float arg0) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_fill_diagonal(self, arg0)


    def set_diagonal(self, arg0: 'vnl_vectorF') -> "vnl_matrix_fixedF_3_3 &":
        """set_diagonal(vnl_matrix_fixedF_3_3 self, vnl_vectorF arg0) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_diagonal(self, arg0)


    def copy_in(self, arg0: 'float const *') -> "vnl_matrix_fixedF_3_3 &":
        """copy_in(vnl_matrix_fixedF_3_3 self, float const * arg0) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_copy_in(self, arg0)


    def set(self, *args) -> "vnl_matrix_fixedF_3_3 &":
        """
        set(vnl_matrix_fixedF_3_3 self, unsigned int r, unsigned int c, float const & v) -> vnl_matrix_fixedF_3_3
        set(vnl_matrix_fixedF_3_3 self, float const * d) -> vnl_matrix_fixedF_3_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set(self, *args)


    def copy_out(self, arg0: 'float *') -> "void":
        """copy_out(vnl_matrix_fixedF_3_3 self, float * arg0)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_copy_out(self, arg0)


    def inplace_transpose(self) -> "vnl_matrix_fixedF_3_3 &":
        """inplace_transpose(vnl_matrix_fixedF_3_3 self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_inplace_transpose(self)


    def __idiv__(self, s: 'float') -> "vnl_matrix_fixedF_3_3 &":
        """__idiv__(vnl_matrix_fixedF_3_3 self, float s) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___idiv__(self, s)


    def __iadd__(self, *args) -> "vnl_matrix_fixedF_3_3 &":
        """
        __iadd__(vnl_matrix_fixedF_3_3 self, float s) -> vnl_matrix_fixedF_3_3
        __iadd__(vnl_matrix_fixedF_3_3 self, vnl_matrix_fixedF_3_3 m) -> vnl_matrix_fixedF_3_3
        __iadd__(vnl_matrix_fixedF_3_3 self, vnl_matrixF m) -> vnl_matrix_fixedF_3_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___iadd__(self, *args)


    def __isub__(self, *args) -> "vnl_matrix_fixedF_3_3 &":
        """
        __isub__(vnl_matrix_fixedF_3_3 self, float s) -> vnl_matrix_fixedF_3_3
        __isub__(vnl_matrix_fixedF_3_3 self, vnl_matrix_fixedF_3_3 m) -> vnl_matrix_fixedF_3_3
        __isub__(vnl_matrix_fixedF_3_3 self, vnl_matrixF m) -> vnl_matrix_fixedF_3_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___isub__(self, *args)


    def __neg__(self) -> "vnl_matrix_fixedF_3_3":
        """__neg__(vnl_matrix_fixedF_3_3 self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___neg__(self)


    def __imul__(self, *args) -> "vnl_matrix_fixedF_3_3 &":
        """
        __imul__(vnl_matrix_fixedF_3_3 self, float s) -> vnl_matrix_fixedF_3_3
        __imul__(vnl_matrix_fixedF_3_3 self, vnl_matrix_fixedF_3_3 s) -> vnl_matrix_fixedF_3_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___imul__(self, *args)


    def transpose(self) -> "vnl_matrix_fixedF_3_3":
        """transpose(vnl_matrix_fixedF_3_3 self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_transpose(self)


    def conjugate_transpose(self) -> "vnl_matrix_fixedF_3_3":
        """conjugate_transpose(vnl_matrix_fixedF_3_3 self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_conjugate_transpose(self)


    def update(self, arg0: 'vnl_matrixF', top: 'unsigned int'=0, left: 'unsigned int'=0) -> "vnl_matrix_fixedF_3_3 &":
        """
        update(vnl_matrix_fixedF_3_3 self, vnl_matrixF arg0, unsigned int top=0, unsigned int left=0) -> vnl_matrix_fixedF_3_3
        update(vnl_matrix_fixedF_3_3 self, vnl_matrixF arg0, unsigned int top=0) -> vnl_matrix_fixedF_3_3
        update(vnl_matrix_fixedF_3_3 self, vnl_matrixF arg0) -> vnl_matrix_fixedF_3_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_update(self, arg0, top, left)


    def set_column(self, *args) -> "vnl_matrix_fixedF_3_3 &":
        """
        set_column(vnl_matrix_fixedF_3_3 self, unsigned int i, float const * v) -> vnl_matrix_fixedF_3_3
        set_column(vnl_matrix_fixedF_3_3 self, unsigned int i, float value) -> vnl_matrix_fixedF_3_3
        set_column(vnl_matrix_fixedF_3_3 self, unsigned int j, vnl_vectorF v) -> vnl_matrix_fixedF_3_3
        set_column(vnl_matrix_fixedF_3_3 self, unsigned int j, vnl_vector_fixed< float,3 > const & v) -> vnl_matrix_fixedF_3_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_column(self, *args)


    def set_columns(self, starting_column: 'unsigned int', M: 'vnl_matrixF') -> "vnl_matrix_fixedF_3_3 &":
        """set_columns(vnl_matrix_fixedF_3_3 self, unsigned int starting_column, vnl_matrixF M) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_columns(self, starting_column, M)


    def set_row(self, *args) -> "vnl_matrix_fixedF_3_3 &":
        """
        set_row(vnl_matrix_fixedF_3_3 self, unsigned int i, float const * v) -> vnl_matrix_fixedF_3_3
        set_row(vnl_matrix_fixedF_3_3 self, unsigned int i, float value) -> vnl_matrix_fixedF_3_3
        set_row(vnl_matrix_fixedF_3_3 self, unsigned int i, vnl_vectorF arg1) -> vnl_matrix_fixedF_3_3
        set_row(vnl_matrix_fixedF_3_3 self, unsigned int i, vnl_vector_fixed< float,3 > const & arg1) -> vnl_matrix_fixedF_3_3
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_row(self, *args)


    def extract(self, *args) -> "void":
        """
        extract(vnl_matrix_fixedF_3_3 self, unsigned int r, unsigned int c, unsigned int top=0, unsigned int left=0) -> vnl_matrixF
        extract(vnl_matrix_fixedF_3_3 self, unsigned int r, unsigned int c, unsigned int top=0) -> vnl_matrixF
        extract(vnl_matrix_fixedF_3_3 self, unsigned int r, unsigned int c) -> vnl_matrixF
        extract(vnl_matrix_fixedF_3_3 self, vnl_matrixF sub_matrix, unsigned int top=0, unsigned int left=0)
        extract(vnl_matrix_fixedF_3_3 self, vnl_matrixF sub_matrix, unsigned int top=0)
        extract(vnl_matrix_fixedF_3_3 self, vnl_matrixF sub_matrix)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_extract(self, *args)


    def get_row(self, row: 'unsigned int') -> "vnl_vector_fixed< float,3 >":
        """get_row(vnl_matrix_fixedF_3_3 self, unsigned int row) -> vnl_vector_fixed< float,3 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_row(self, row)


    def get_column(self, col: 'unsigned int') -> "vnl_vector_fixed< float,3 >":
        """get_column(vnl_matrix_fixedF_3_3 self, unsigned int col) -> vnl_vector_fixed< float,3 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_column(self, col)


    def get_rows(self, i: 'vnl_vectorUI') -> "vnl_matrixF":
        """get_rows(vnl_matrix_fixedF_3_3 self, vnl_vectorUI i) -> vnl_matrixF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_rows(self, i)


    def get_columns(self, i: 'vnl_vectorUI') -> "vnl_matrixF":
        """get_columns(vnl_matrix_fixedF_3_3 self, vnl_vectorUI i) -> vnl_matrixF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_columns(self, i)


    def get_n_rows(self, rowstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixF":
        """get_n_rows(vnl_matrix_fixedF_3_3 self, unsigned int rowstart, unsigned int n) -> vnl_matrixF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_n_rows(self, rowstart, n)


    def get_n_columns(self, colstart: 'unsigned int', n: 'unsigned int') -> "vnl_matrixF":
        """get_n_columns(vnl_matrix_fixedF_3_3 self, unsigned int colstart, unsigned int n) -> vnl_matrixF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_n_columns(self, colstart, n)


    def get_diagonal(self) -> "vnl_vectorF":
        """get_diagonal(vnl_matrix_fixedF_3_3 self) -> vnl_vectorF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_diagonal(self)


    def flatten_row_major(self) -> "vnl_vector_fixed< float,9 >":
        """flatten_row_major(vnl_matrix_fixedF_3_3 self) -> vnl_vector_fixed< float,9 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_flatten_row_major(self)


    def flatten_column_major(self) -> "vnl_vector_fixed< float,9 >":
        """flatten_column_major(vnl_matrix_fixedF_3_3 self) -> vnl_vector_fixed< float,9 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_flatten_column_major(self)


    def set_identity(self) -> "vnl_matrix_fixedF_3_3 &":
        """set_identity(vnl_matrix_fixedF_3_3 self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_identity(self)


    def flipud(self) -> "vnl_matrix_fixedF_3_3 &":
        """flipud(vnl_matrix_fixedF_3_3 self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_flipud(self)


    def fliplr(self) -> "vnl_matrix_fixedF_3_3 &":
        """fliplr(vnl_matrix_fixedF_3_3 self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_fliplr(self)


    def normalize_rows(self) -> "vnl_matrix_fixedF_3_3 &":
        """normalize_rows(vnl_matrix_fixedF_3_3 self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_normalize_rows(self)


    def normalize_columns(self) -> "vnl_matrix_fixedF_3_3 &":
        """normalize_columns(vnl_matrix_fixedF_3_3 self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_normalize_columns(self)


    def scale_row(self, row: 'unsigned int', value: 'float') -> "vnl_matrix_fixedF_3_3 &":
        """scale_row(vnl_matrix_fixedF_3_3 self, unsigned int row, float value) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_scale_row(self, row, value)


    def scale_column(self, col: 'unsigned int', value: 'float') -> "vnl_matrix_fixedF_3_3 &":
        """scale_column(vnl_matrix_fixedF_3_3 self, unsigned int col, float value) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_scale_column(self, col, value)


    def swap(self, that: 'vnl_matrix_fixedF_3_3') -> "void":
        """swap(vnl_matrix_fixedF_3_3 self, vnl_matrix_fixedF_3_3 that)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_swap(self, that)


    def array_one_norm(self) -> "float":
        """array_one_norm(vnl_matrix_fixedF_3_3 self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_array_one_norm(self)


    def array_two_norm(self) -> "float":
        """array_two_norm(vnl_matrix_fixedF_3_3 self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_array_two_norm(self)


    def array_inf_norm(self) -> "float":
        """array_inf_norm(vnl_matrix_fixedF_3_3 self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_array_inf_norm(self)


    def absolute_value_sum(self) -> "float":
        """absolute_value_sum(vnl_matrix_fixedF_3_3 self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_absolute_value_sum(self)


    def absolute_value_max(self) -> "float":
        """absolute_value_max(vnl_matrix_fixedF_3_3 self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_absolute_value_max(self)


    def operator_one_norm(self) -> "float":
        """operator_one_norm(vnl_matrix_fixedF_3_3 self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_operator_one_norm(self)


    def operator_inf_norm(self) -> "float":
        """operator_inf_norm(vnl_matrix_fixedF_3_3 self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_operator_inf_norm(self)


    def frobenius_norm(self) -> "float":
        """frobenius_norm(vnl_matrix_fixedF_3_3 self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_frobenius_norm(self)


    def fro_norm(self) -> "float":
        """fro_norm(vnl_matrix_fixedF_3_3 self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_fro_norm(self)


    def rms(self) -> "float":
        """rms(vnl_matrix_fixedF_3_3 self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_rms(self)


    def min_value(self) -> "float":
        """min_value(vnl_matrix_fixedF_3_3 self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_min_value(self)


    def max_value(self) -> "float":
        """max_value(vnl_matrix_fixedF_3_3 self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_max_value(self)


    def arg_min(self) -> "unsigned int":
        """arg_min(vnl_matrix_fixedF_3_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_arg_min(self)


    def arg_max(self) -> "unsigned int":
        """arg_max(vnl_matrix_fixedF_3_3 self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_arg_max(self)


    def mean(self) -> "float":
        """mean(vnl_matrix_fixedF_3_3 self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_mean(self)


    def empty(self) -> "bool":
        """empty(vnl_matrix_fixedF_3_3 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_empty(self)


    def is_identity(self, *args) -> "bool":
        """
        is_identity(vnl_matrix_fixedF_3_3 self) -> bool
        is_identity(vnl_matrix_fixedF_3_3 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_is_identity(self, *args)


    def is_zero(self, *args) -> "bool":
        """
        is_zero(vnl_matrix_fixedF_3_3 self) -> bool
        is_zero(vnl_matrix_fixedF_3_3 self, double tol) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_is_zero(self, *args)


    def is_equal(self, rhs: 'vnl_matrix_fixedF_3_3', tol: 'double') -> "bool":
        """is_equal(vnl_matrix_fixedF_3_3 self, vnl_matrix_fixedF_3_3 rhs, double tol) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_is_equal(self, rhs, tol)


    def is_finite(self) -> "bool":
        """is_finite(vnl_matrix_fixedF_3_3 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_is_finite(self)


    def has_nans(self) -> "bool":
        """has_nans(vnl_matrix_fixedF_3_3 self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_has_nans(self)


    def assert_size(self, nr_rows: 'unsigned int', nr_cols: 'unsigned int') -> "void":
        """assert_size(vnl_matrix_fixedF_3_3 self, unsigned int nr_rows, unsigned int nr_cols)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_assert_size(self, nr_rows, nr_cols)


    def assert_finite(self) -> "void":
        """assert_finite(vnl_matrix_fixedF_3_3 self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_assert_finite(self)


    def read_ascii(self, s: 'istream') -> "bool":
        """read_ascii(vnl_matrix_fixedF_3_3 self, istream s) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_read_ascii(self, s)


    def data_block(self, *args) -> "float *":
        """
        data_block(vnl_matrix_fixedF_3_3 self) -> float const
        data_block(vnl_matrix_fixedF_3_3 self) -> float *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_data_block(self, *args)


    def as_matrix(self) -> "vnl_matrixF const":
        """as_matrix(vnl_matrix_fixedF_3_3 self) -> vnl_matrixF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_as_matrix(self)


    def begin(self, *args) -> "float const *":
        """
        begin(vnl_matrix_fixedF_3_3 self) -> float
        begin(vnl_matrix_fixedF_3_3 self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_begin(self, *args)


    def end(self, *args) -> "float const *":
        """
        end(vnl_matrix_fixedF_3_3 self) -> float
        end(vnl_matrix_fixedF_3_3 self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_end(self, *args)


    def operator_eq(self, rhs: 'vnl_matrix_fixedF_3_3') -> "bool":
        """operator_eq(vnl_matrix_fixedF_3_3 self, vnl_matrix_fixedF_3_3 rhs) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_operator_eq(self, rhs)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(vnl_matrix_fixedF_3_3 self, vnl_matrix_fixedF_3_3 that) -> bool
        __eq__(vnl_matrix_fixedF_3_3 self, vnl_matrixF that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(vnl_matrix_fixedF_3_3 self, vnl_matrix_fixedF_3_3 that) -> bool
        __ne__(vnl_matrix_fixedF_3_3 self, vnl_matrixF that) -> bool
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___ne__(self, *args)


    def _print(self, os: 'ostream') -> "void":
        """_print(vnl_matrix_fixedF_3_3 self, ostream os)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3__print(self, os)


    def add(*args) -> "void":
        """
        add(float const * a, float const * b, float * r)
        add(float const * a, float b, float * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_add(*args)

    add = staticmethod(add)

    def sub(*args) -> "void":
        """
        sub(float const * a, float const * b, float * r)
        sub(float const * a, float b, float * r)
        sub(float a, float const * b, float * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_sub(*args)

    sub = staticmethod(sub)

    def mul(*args) -> "void":
        """
        mul(float const * a, float const * b, float * r)
        mul(float const * a, float b, float * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_mul(*args)

    mul = staticmethod(mul)

    def div(*args) -> "void":
        """
        div(float const * a, float const * b, float * r)
        div(float const * a, float b, float * r)
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_div(*args)

    div = staticmethod(div)

    def equal(a: 'float const *', b: 'float const *') -> "bool":
        """equal(float const * a, float const * b) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_equal(a, b)

    equal = staticmethod(equal)
vnl_matrix_fixedF_3_3.size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_size, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_rows, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.cols = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_cols, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_columns, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.put = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_put, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.get = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.__call__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___call__, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.fill = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_fill, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.fill_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_fill_diagonal, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.set_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_diagonal, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.copy_in = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_copy_in, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.set = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.copy_out = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_copy_out, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.inplace_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_inplace_transpose, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.__idiv__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___idiv__, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.__iadd__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___iadd__, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.__isub__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___isub__, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.__neg__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___neg__, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.__imul__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___imul__, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_transpose, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.conjugate_transpose = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_conjugate_transpose, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.update = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_update, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.set_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_column, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.set_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_columns, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.set_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_row, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.extract = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_extract, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.get_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_row, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.get_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_column, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.get_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_rows, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.get_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_columns, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.get_n_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_n_rows, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.get_n_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_n_columns, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.get_diagonal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_diagonal, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.flatten_row_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_flatten_row_major, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.flatten_column_major = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_flatten_column_major, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.set_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_identity, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.flipud = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_flipud, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.fliplr = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_fliplr, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.normalize_rows = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_normalize_rows, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.normalize_columns = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_normalize_columns, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.scale_row = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_scale_row, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.scale_column = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_scale_column, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.swap = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_swap, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.array_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_array_one_norm, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.array_two_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_array_two_norm, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.array_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_array_inf_norm, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.absolute_value_sum = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_absolute_value_sum, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.absolute_value_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_absolute_value_max, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.operator_one_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_operator_one_norm, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.operator_inf_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_operator_inf_norm, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.frobenius_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_frobenius_norm, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.fro_norm = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_fro_norm, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.rms = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_rms, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.min_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_min_value, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.max_value = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_max_value, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.arg_min = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_arg_min, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.arg_max = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_arg_max, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.mean = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_mean, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.empty = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_empty, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.is_identity = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_is_identity, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.is_zero = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_is_zero, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.is_equal = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_is_equal, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.is_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_is_finite, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.has_nans = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_has_nans, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.assert_size = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_assert_size, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.assert_finite = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_assert_finite, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.read_ascii = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_read_ascii, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.data_block = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_data_block, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.as_matrix = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_as_matrix, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.begin = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_begin, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.end = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_end, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.operator_eq = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_operator_eq, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.__eq__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___eq__, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3.__ne__ = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___ne__, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3._print = new_instancemethod(_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3__print, None, vnl_matrix_fixedF_3_3)
vnl_matrix_fixedF_3_3_swigregister = _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_swigregister
vnl_matrix_fixedF_3_3_swigregister(vnl_matrix_fixedF_3_3)

def vnl_matrix_fixedF_3_3_add(*args) -> "void":
    """
    add(float const * a, float const * b, float * r)
    vnl_matrix_fixedF_3_3_add(float const * a, float b, float * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_add(*args)

def vnl_matrix_fixedF_3_3_sub(*args) -> "void":
    """
    sub(float const * a, float const * b, float * r)
    sub(float const * a, float b, float * r)
    vnl_matrix_fixedF_3_3_sub(float a, float const * b, float * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_sub(*args)

def vnl_matrix_fixedF_3_3_mul(*args) -> "void":
    """
    mul(float const * a, float const * b, float * r)
    vnl_matrix_fixedF_3_3_mul(float const * a, float b, float * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_mul(*args)

def vnl_matrix_fixedF_3_3_div(*args) -> "void":
    """
    div(float const * a, float const * b, float * r)
    vnl_matrix_fixedF_3_3_div(float const * a, float b, float * r)
    """
    return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_div(*args)

def vnl_matrix_fixedF_3_3_equal(a: 'float const *', b: 'float const *') -> "bool":
    """vnl_matrix_fixedF_3_3_equal(float const * a, float const * b) -> bool"""
    return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_equal(a, b)



