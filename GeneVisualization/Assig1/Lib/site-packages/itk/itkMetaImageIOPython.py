# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkMetaImageIOPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMetaImageIOPython', [dirname(__file__)])
        except ImportError:
            import _itkMetaImageIOPython
            return _itkMetaImageIOPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMetaImageIOPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMetaImageIOPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMetaImageIOPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import ITKIOImageBaseBasePython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython

def itkMetaImageIOFactory_New():
  return itkMetaImageIOFactory.New()


def itkMetaImageIO_New():
  return itkMetaImageIO.New()

class itkMetaImageIO(ITKIOImageBaseBasePython.itkImageIOBase):
    """Proxy of C++ itkMetaImageIO class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMetaImageIO_Pointer":
        """__New_orig__() -> itkMetaImageIO_Pointer"""
        return _itkMetaImageIOPython.itkMetaImageIO___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMetaImageIO_Pointer":
        """Clone(itkMetaImageIO self) -> itkMetaImageIO_Pointer"""
        return _itkMetaImageIOPython.itkMetaImageIO_Clone(self)


    def GetMetaImagePointer(self) -> "MetaImage *":
        """GetMetaImagePointer(itkMetaImageIO self) -> MetaImage *"""
        return _itkMetaImageIOPython.itkMetaImageIO_GetMetaImagePointer(self)


    def SetDataFileName(self, filename: 'char const *') -> "void":
        """SetDataFileName(itkMetaImageIO self, char const * filename)"""
        return _itkMetaImageIOPython.itkMetaImageIO_SetDataFileName(self, filename)


    def SetDoublePrecision(self, precision: 'unsigned int') -> "void":
        """SetDoublePrecision(itkMetaImageIO self, unsigned int precision)"""
        return _itkMetaImageIOPython.itkMetaImageIO_SetDoublePrecision(self, precision)


    def SetSubSamplingFactor(self, _arg: 'unsigned int const') -> "void":
        """SetSubSamplingFactor(itkMetaImageIO self, unsigned int const _arg)"""
        return _itkMetaImageIOPython.itkMetaImageIO_SetSubSamplingFactor(self, _arg)


    def GetSubSamplingFactor(self) -> "unsigned int":
        """GetSubSamplingFactor(itkMetaImageIO self) -> unsigned int"""
        return _itkMetaImageIOPython.itkMetaImageIO_GetSubSamplingFactor(self)


    def SetDefaultDoublePrecision(precision: 'unsigned int') -> "void":
        """SetDefaultDoublePrecision(unsigned int precision)"""
        return _itkMetaImageIOPython.itkMetaImageIO_SetDefaultDoublePrecision(precision)

    SetDefaultDoublePrecision = staticmethod(SetDefaultDoublePrecision)

    def GetDefaultDoublePrecision() -> "unsigned int":
        """GetDefaultDoublePrecision() -> unsigned int"""
        return _itkMetaImageIOPython.itkMetaImageIO_GetDefaultDoublePrecision()

    GetDefaultDoublePrecision = staticmethod(GetDefaultDoublePrecision)
    __swig_destroy__ = _itkMetaImageIOPython.delete_itkMetaImageIO

    def cast(obj: 'itkLightObject') -> "itkMetaImageIO *":
        """cast(itkLightObject obj) -> itkMetaImageIO"""
        return _itkMetaImageIOPython.itkMetaImageIO_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMetaImageIO

        Create a new object of the class itkMetaImageIO and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaImageIO.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMetaImageIO.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMetaImageIO.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMetaImageIO.Clone = new_instancemethod(_itkMetaImageIOPython.itkMetaImageIO_Clone, None, itkMetaImageIO)
itkMetaImageIO.GetMetaImagePointer = new_instancemethod(_itkMetaImageIOPython.itkMetaImageIO_GetMetaImagePointer, None, itkMetaImageIO)
itkMetaImageIO.SetDataFileName = new_instancemethod(_itkMetaImageIOPython.itkMetaImageIO_SetDataFileName, None, itkMetaImageIO)
itkMetaImageIO.SetDoublePrecision = new_instancemethod(_itkMetaImageIOPython.itkMetaImageIO_SetDoublePrecision, None, itkMetaImageIO)
itkMetaImageIO.SetSubSamplingFactor = new_instancemethod(_itkMetaImageIOPython.itkMetaImageIO_SetSubSamplingFactor, None, itkMetaImageIO)
itkMetaImageIO.GetSubSamplingFactor = new_instancemethod(_itkMetaImageIOPython.itkMetaImageIO_GetSubSamplingFactor, None, itkMetaImageIO)
itkMetaImageIO_swigregister = _itkMetaImageIOPython.itkMetaImageIO_swigregister
itkMetaImageIO_swigregister(itkMetaImageIO)

def itkMetaImageIO___New_orig__() -> "itkMetaImageIO_Pointer":
    """itkMetaImageIO___New_orig__() -> itkMetaImageIO_Pointer"""
    return _itkMetaImageIOPython.itkMetaImageIO___New_orig__()

def itkMetaImageIO_SetDefaultDoublePrecision(precision: 'unsigned int') -> "void":
    """itkMetaImageIO_SetDefaultDoublePrecision(unsigned int precision)"""
    return _itkMetaImageIOPython.itkMetaImageIO_SetDefaultDoublePrecision(precision)

def itkMetaImageIO_GetDefaultDoublePrecision() -> "unsigned int":
    """itkMetaImageIO_GetDefaultDoublePrecision() -> unsigned int"""
    return _itkMetaImageIOPython.itkMetaImageIO_GetDefaultDoublePrecision()

def itkMetaImageIO_cast(obj: 'itkLightObject') -> "itkMetaImageIO *":
    """itkMetaImageIO_cast(itkLightObject obj) -> itkMetaImageIO"""
    return _itkMetaImageIOPython.itkMetaImageIO_cast(obj)

class itkMetaImageIOFactory(ITKCommonBasePython.itkObjectFactoryBase):
    """Proxy of C++ itkMetaImageIOFactory class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMetaImageIOFactory_Pointer":
        """__New_orig__() -> itkMetaImageIOFactory_Pointer"""
        return _itkMetaImageIOPython.itkMetaImageIOFactory___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def RegisterOneFactory() -> "void":
        """RegisterOneFactory()"""
        return _itkMetaImageIOPython.itkMetaImageIOFactory_RegisterOneFactory()

    RegisterOneFactory = staticmethod(RegisterOneFactory)
    __swig_destroy__ = _itkMetaImageIOPython.delete_itkMetaImageIOFactory

    def cast(obj: 'itkLightObject') -> "itkMetaImageIOFactory *":
        """cast(itkLightObject obj) -> itkMetaImageIOFactory"""
        return _itkMetaImageIOPython.itkMetaImageIOFactory_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMetaImageIOFactory

        Create a new object of the class itkMetaImageIOFactory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaImageIOFactory.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMetaImageIOFactory.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMetaImageIOFactory.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMetaImageIOFactory_swigregister = _itkMetaImageIOPython.itkMetaImageIOFactory_swigregister
itkMetaImageIOFactory_swigregister(itkMetaImageIOFactory)

def itkMetaImageIOFactory___New_orig__() -> "itkMetaImageIOFactory_Pointer":
    """itkMetaImageIOFactory___New_orig__() -> itkMetaImageIOFactory_Pointer"""
    return _itkMetaImageIOPython.itkMetaImageIOFactory___New_orig__()

def itkMetaImageIOFactory_RegisterOneFactory() -> "void":
    """itkMetaImageIOFactory_RegisterOneFactory()"""
    return _itkMetaImageIOPython.itkMetaImageIOFactory_RegisterOneFactory()

def itkMetaImageIOFactory_cast(obj: 'itkLightObject') -> "itkMetaImageIOFactory *":
    """itkMetaImageIOFactory_cast(itkLightObject obj) -> itkMetaImageIOFactory"""
    return _itkMetaImageIOPython.itkMetaImageIOFactory_cast(obj)



