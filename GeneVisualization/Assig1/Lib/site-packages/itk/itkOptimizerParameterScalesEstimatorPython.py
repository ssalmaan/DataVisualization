# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkOptimizerParameterScalesEstimatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkOptimizerParameterScalesEstimatorPython', [dirname(__file__)])
        except ImportError:
            import _itkOptimizerParameterScalesEstimatorPython
            return _itkOptimizerParameterScalesEstimatorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkOptimizerParameterScalesEstimatorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkOptimizerParameterScalesEstimatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkOptimizerParameterScalesEstimatorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkOptimizerParametersPython
import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import ITKCommonBasePython

def itkOptimizerParameterScalesEstimatorTemplateF_New():
  return itkOptimizerParameterScalesEstimatorTemplateF.New()


def itkOptimizerParameterScalesEstimatorTemplateD_New():
  return itkOptimizerParameterScalesEstimatorTemplateD.New()

class itkOptimizerParameterScalesEstimatorTemplateD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkOptimizerParameterScalesEstimatorTemplateD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def EstimateScales(self, scales: 'itkOptimizerParametersD') -> "void":
        """EstimateScales(itkOptimizerParameterScalesEstimatorTemplateD self, itkOptimizerParametersD scales)"""
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_EstimateScales(self, scales)


    def EstimateStepScale(self, step: 'itkOptimizerParametersD') -> "double":
        """EstimateStepScale(itkOptimizerParameterScalesEstimatorTemplateD self, itkOptimizerParametersD step) -> double"""
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_EstimateStepScale(self, step)


    def EstimateLocalStepScales(self, step: 'itkOptimizerParametersD', localStepScales: 'itkOptimizerParametersD') -> "void":
        """EstimateLocalStepScales(itkOptimizerParameterScalesEstimatorTemplateD self, itkOptimizerParametersD step, itkOptimizerParametersD localStepScales)"""
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_EstimateLocalStepScales(self, step, localStepScales)


    def EstimateMaximumStepSize(self) -> "double":
        """EstimateMaximumStepSize(itkOptimizerParameterScalesEstimatorTemplateD self) -> double"""
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_EstimateMaximumStepSize(self)

    __swig_destroy__ = _itkOptimizerParameterScalesEstimatorPython.delete_itkOptimizerParameterScalesEstimatorTemplateD

    def cast(obj: 'itkLightObject') -> "itkOptimizerParameterScalesEstimatorTemplateD *":
        """cast(itkLightObject obj) -> itkOptimizerParameterScalesEstimatorTemplateD"""
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkOptimizerParameterScalesEstimatorTemplateD

        Create a new object of the class itkOptimizerParameterScalesEstimatorTemplateD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOptimizerParameterScalesEstimatorTemplateD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkOptimizerParameterScalesEstimatorTemplateD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkOptimizerParameterScalesEstimatorTemplateD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkOptimizerParameterScalesEstimatorTemplateD.EstimateScales = new_instancemethod(_itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_EstimateScales, None, itkOptimizerParameterScalesEstimatorTemplateD)
itkOptimizerParameterScalesEstimatorTemplateD.EstimateStepScale = new_instancemethod(_itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_EstimateStepScale, None, itkOptimizerParameterScalesEstimatorTemplateD)
itkOptimizerParameterScalesEstimatorTemplateD.EstimateLocalStepScales = new_instancemethod(_itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_EstimateLocalStepScales, None, itkOptimizerParameterScalesEstimatorTemplateD)
itkOptimizerParameterScalesEstimatorTemplateD.EstimateMaximumStepSize = new_instancemethod(_itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_EstimateMaximumStepSize, None, itkOptimizerParameterScalesEstimatorTemplateD)
itkOptimizerParameterScalesEstimatorTemplateD_swigregister = _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_swigregister
itkOptimizerParameterScalesEstimatorTemplateD_swigregister(itkOptimizerParameterScalesEstimatorTemplateD)

def itkOptimizerParameterScalesEstimatorTemplateD_cast(obj: 'itkLightObject') -> "itkOptimizerParameterScalesEstimatorTemplateD *":
    """itkOptimizerParameterScalesEstimatorTemplateD_cast(itkLightObject obj) -> itkOptimizerParameterScalesEstimatorTemplateD"""
    return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_cast(obj)

class itkOptimizerParameterScalesEstimatorTemplateF(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkOptimizerParameterScalesEstimatorTemplateF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def EstimateScales(self, scales: 'itkOptimizerParametersF') -> "void":
        """EstimateScales(itkOptimizerParameterScalesEstimatorTemplateF self, itkOptimizerParametersF scales)"""
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_EstimateScales(self, scales)


    def EstimateStepScale(self, step: 'itkOptimizerParametersF') -> "float":
        """EstimateStepScale(itkOptimizerParameterScalesEstimatorTemplateF self, itkOptimizerParametersF step) -> float"""
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_EstimateStepScale(self, step)


    def EstimateLocalStepScales(self, step: 'itkOptimizerParametersF', localStepScales: 'itkOptimizerParametersF') -> "void":
        """EstimateLocalStepScales(itkOptimizerParameterScalesEstimatorTemplateF self, itkOptimizerParametersF step, itkOptimizerParametersF localStepScales)"""
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_EstimateLocalStepScales(self, step, localStepScales)


    def EstimateMaximumStepSize(self) -> "float":
        """EstimateMaximumStepSize(itkOptimizerParameterScalesEstimatorTemplateF self) -> float"""
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_EstimateMaximumStepSize(self)

    __swig_destroy__ = _itkOptimizerParameterScalesEstimatorPython.delete_itkOptimizerParameterScalesEstimatorTemplateF

    def cast(obj: 'itkLightObject') -> "itkOptimizerParameterScalesEstimatorTemplateF *":
        """cast(itkLightObject obj) -> itkOptimizerParameterScalesEstimatorTemplateF"""
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkOptimizerParameterScalesEstimatorTemplateF

        Create a new object of the class itkOptimizerParameterScalesEstimatorTemplateF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOptimizerParameterScalesEstimatorTemplateF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkOptimizerParameterScalesEstimatorTemplateF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkOptimizerParameterScalesEstimatorTemplateF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkOptimizerParameterScalesEstimatorTemplateF.EstimateScales = new_instancemethod(_itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_EstimateScales, None, itkOptimizerParameterScalesEstimatorTemplateF)
itkOptimizerParameterScalesEstimatorTemplateF.EstimateStepScale = new_instancemethod(_itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_EstimateStepScale, None, itkOptimizerParameterScalesEstimatorTemplateF)
itkOptimizerParameterScalesEstimatorTemplateF.EstimateLocalStepScales = new_instancemethod(_itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_EstimateLocalStepScales, None, itkOptimizerParameterScalesEstimatorTemplateF)
itkOptimizerParameterScalesEstimatorTemplateF.EstimateMaximumStepSize = new_instancemethod(_itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_EstimateMaximumStepSize, None, itkOptimizerParameterScalesEstimatorTemplateF)
itkOptimizerParameterScalesEstimatorTemplateF_swigregister = _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_swigregister
itkOptimizerParameterScalesEstimatorTemplateF_swigregister(itkOptimizerParameterScalesEstimatorTemplateF)

def itkOptimizerParameterScalesEstimatorTemplateF_cast(obj: 'itkLightObject') -> "itkOptimizerParameterScalesEstimatorTemplateF *":
    """itkOptimizerParameterScalesEstimatorTemplateF_cast(itkLightObject obj) -> itkOptimizerParameterScalesEstimatorTemplateF"""
    return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_cast(obj)



