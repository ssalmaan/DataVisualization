# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkInterpolateImageFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkInterpolateImageFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkInterpolateImageFunctionPython
            return _itkInterpolateImageFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkInterpolateImageFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkInterpolateImageFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkInterpolateImageFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import pyBasePython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import itkSizePython
import itkImageFunctionBasePython
import itkFunctionBasePython
import itkArrayPython
import itkContinuousIndexPython
import itkIndexPython
import itkOffsetPython
import itkImagePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import ITKCommonBasePython
import itkImageRegionPython
import itkRGBPixelPython
import itkRGBAPixelPython

def itkInterpolateImageFunctionIRGBAUC3D_New():
  return itkInterpolateImageFunctionIRGBAUC3D.New()


def itkInterpolateImageFunctionIRGBUC3D_New():
  return itkInterpolateImageFunctionIRGBUC3D.New()


def itkInterpolateImageFunctionICVF33D_New():
  return itkInterpolateImageFunctionICVF33D.New()


def itkInterpolateImageFunctionIVF33D_New():
  return itkInterpolateImageFunctionIVF33D.New()


def itkInterpolateImageFunctionIF3F_New():
  return itkInterpolateImageFunctionIF3F.New()


def itkInterpolateImageFunctionIF3D_New():
  return itkInterpolateImageFunctionIF3D.New()


def itkInterpolateImageFunctionIUS3F_New():
  return itkInterpolateImageFunctionIUS3F.New()


def itkInterpolateImageFunctionIUS3D_New():
  return itkInterpolateImageFunctionIUS3D.New()


def itkInterpolateImageFunctionIUC3F_New():
  return itkInterpolateImageFunctionIUC3F.New()


def itkInterpolateImageFunctionIUC3D_New():
  return itkInterpolateImageFunctionIUC3D.New()


def itkInterpolateImageFunctionISS3F_New():
  return itkInterpolateImageFunctionISS3F.New()


def itkInterpolateImageFunctionISS3D_New():
  return itkInterpolateImageFunctionISS3D.New()


def itkInterpolateImageFunctionIRGBAUC2D_New():
  return itkInterpolateImageFunctionIRGBAUC2D.New()


def itkInterpolateImageFunctionIRGBUC2D_New():
  return itkInterpolateImageFunctionIRGBUC2D.New()


def itkInterpolateImageFunctionICVF22D_New():
  return itkInterpolateImageFunctionICVF22D.New()


def itkInterpolateImageFunctionIVF22D_New():
  return itkInterpolateImageFunctionIVF22D.New()


def itkInterpolateImageFunctionIF2F_New():
  return itkInterpolateImageFunctionIF2F.New()


def itkInterpolateImageFunctionIF2D_New():
  return itkInterpolateImageFunctionIF2D.New()


def itkInterpolateImageFunctionIUS2F_New():
  return itkInterpolateImageFunctionIUS2F.New()


def itkInterpolateImageFunctionIUS2D_New():
  return itkInterpolateImageFunctionIUS2D.New()


def itkInterpolateImageFunctionIUC2F_New():
  return itkInterpolateImageFunctionIUC2F.New()


def itkInterpolateImageFunctionIUC2D_New():
  return itkInterpolateImageFunctionIUC2D.New()


def itkInterpolateImageFunctionISS2F_New():
  return itkInterpolateImageFunctionISS2F.New()


def itkInterpolateImageFunctionISS2D_New():
  return itkInterpolateImageFunctionISS2D.New()

class itkInterpolateImageFunctionICVF22D(itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D):
    """Proxy of C++ itkInterpolateImageFunctionICVF22D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize2":
        """GetRadius(itkInterpolateImageFunctionICVF22D self) -> itkSize2"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF22D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionICVF22D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionICVF22D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionICVF22D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF22D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionICVF22D

        Create a new object of the class itkInterpolateImageFunctionICVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionICVF22D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionICVF22D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionICVF22D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionICVF22D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF22D_GetRadius, None, itkInterpolateImageFunctionICVF22D)
itkInterpolateImageFunctionICVF22D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF22D_swigregister
itkInterpolateImageFunctionICVF22D_swigregister(itkInterpolateImageFunctionICVF22D)

def itkInterpolateImageFunctionICVF22D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionICVF22D *":
    """itkInterpolateImageFunctionICVF22D_cast(itkLightObject obj) -> itkInterpolateImageFunctionICVF22D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF22D_cast(obj)

class itkInterpolateImageFunctionICVF33D(itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D):
    """Proxy of C++ itkInterpolateImageFunctionICVF33D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize3":
        """GetRadius(itkInterpolateImageFunctionICVF33D self) -> itkSize3"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF33D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionICVF33D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionICVF33D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionICVF33D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF33D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionICVF33D

        Create a new object of the class itkInterpolateImageFunctionICVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionICVF33D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionICVF33D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionICVF33D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionICVF33D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF33D_GetRadius, None, itkInterpolateImageFunctionICVF33D)
itkInterpolateImageFunctionICVF33D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF33D_swigregister
itkInterpolateImageFunctionICVF33D_swigregister(itkInterpolateImageFunctionICVF33D)

def itkInterpolateImageFunctionICVF33D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionICVF33D *":
    """itkInterpolateImageFunctionICVF33D_cast(itkLightObject obj) -> itkInterpolateImageFunctionICVF33D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF33D_cast(obj)

class itkInterpolateImageFunctionIF2D(itkImageFunctionBasePython.itkImageFunctionIF2DD):
    """Proxy of C++ itkInterpolateImageFunctionIF2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize2":
        """GetRadius(itkInterpolateImageFunctionIF2D self) -> itkSize2"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIF2D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIF2D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIF2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIF2D

        Create a new object of the class itkInterpolateImageFunctionIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIF2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIF2D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_GetRadius, None, itkInterpolateImageFunctionIF2D)
itkInterpolateImageFunctionIF2D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_swigregister
itkInterpolateImageFunctionIF2D_swigregister(itkInterpolateImageFunctionIF2D)

def itkInterpolateImageFunctionIF2D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIF2D *":
    """itkInterpolateImageFunctionIF2D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIF2D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_cast(obj)

class itkInterpolateImageFunctionIF2F(itkImageFunctionBasePython.itkImageFunctionIF2DF):
    """Proxy of C++ itkInterpolateImageFunctionIF2F class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize2":
        """GetRadius(itkInterpolateImageFunctionIF2F self) -> itkSize2"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIF2F

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIF2F *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIF2F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIF2F

        Create a new object of the class itkInterpolateImageFunctionIF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIF2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIF2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIF2F.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_GetRadius, None, itkInterpolateImageFunctionIF2F)
itkInterpolateImageFunctionIF2F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_swigregister
itkInterpolateImageFunctionIF2F_swigregister(itkInterpolateImageFunctionIF2F)

def itkInterpolateImageFunctionIF2F_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIF2F *":
    """itkInterpolateImageFunctionIF2F_cast(itkLightObject obj) -> itkInterpolateImageFunctionIF2F"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_cast(obj)

class itkInterpolateImageFunctionIF3D(itkImageFunctionBasePython.itkImageFunctionIF3DD):
    """Proxy of C++ itkInterpolateImageFunctionIF3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize3":
        """GetRadius(itkInterpolateImageFunctionIF3D self) -> itkSize3"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIF3D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIF3D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIF3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIF3D

        Create a new object of the class itkInterpolateImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIF3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIF3D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_GetRadius, None, itkInterpolateImageFunctionIF3D)
itkInterpolateImageFunctionIF3D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_swigregister
itkInterpolateImageFunctionIF3D_swigregister(itkInterpolateImageFunctionIF3D)

def itkInterpolateImageFunctionIF3D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIF3D *":
    """itkInterpolateImageFunctionIF3D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIF3D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_cast(obj)

class itkInterpolateImageFunctionIF3F(itkImageFunctionBasePython.itkImageFunctionIF3DF):
    """Proxy of C++ itkInterpolateImageFunctionIF3F class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize3":
        """GetRadius(itkInterpolateImageFunctionIF3F self) -> itkSize3"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIF3F

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIF3F *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIF3F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIF3F

        Create a new object of the class itkInterpolateImageFunctionIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIF3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIF3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIF3F.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_GetRadius, None, itkInterpolateImageFunctionIF3F)
itkInterpolateImageFunctionIF3F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_swigregister
itkInterpolateImageFunctionIF3F_swigregister(itkInterpolateImageFunctionIF3F)

def itkInterpolateImageFunctionIF3F_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIF3F *":
    """itkInterpolateImageFunctionIF3F_cast(itkLightObject obj) -> itkInterpolateImageFunctionIF3F"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_cast(obj)

class itkInterpolateImageFunctionIRGBAUC2D(itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD):
    """Proxy of C++ itkInterpolateImageFunctionIRGBAUC2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize2":
        """GetRadius(itkInterpolateImageFunctionIRGBAUC2D self) -> itkSize2"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC2D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIRGBAUC2D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIRGBAUC2D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIRGBAUC2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIRGBAUC2D

        Create a new object of the class itkInterpolateImageFunctionIRGBAUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIRGBAUC2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIRGBAUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIRGBAUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIRGBAUC2D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC2D_GetRadius, None, itkInterpolateImageFunctionIRGBAUC2D)
itkInterpolateImageFunctionIRGBAUC2D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC2D_swigregister
itkInterpolateImageFunctionIRGBAUC2D_swigregister(itkInterpolateImageFunctionIRGBAUC2D)

def itkInterpolateImageFunctionIRGBAUC2D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIRGBAUC2D *":
    """itkInterpolateImageFunctionIRGBAUC2D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIRGBAUC2D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC2D_cast(obj)

class itkInterpolateImageFunctionIRGBAUC3D(itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD):
    """Proxy of C++ itkInterpolateImageFunctionIRGBAUC3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize3":
        """GetRadius(itkInterpolateImageFunctionIRGBAUC3D self) -> itkSize3"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC3D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIRGBAUC3D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIRGBAUC3D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIRGBAUC3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIRGBAUC3D

        Create a new object of the class itkInterpolateImageFunctionIRGBAUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIRGBAUC3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIRGBAUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIRGBAUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIRGBAUC3D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC3D_GetRadius, None, itkInterpolateImageFunctionIRGBAUC3D)
itkInterpolateImageFunctionIRGBAUC3D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC3D_swigregister
itkInterpolateImageFunctionIRGBAUC3D_swigregister(itkInterpolateImageFunctionIRGBAUC3D)

def itkInterpolateImageFunctionIRGBAUC3D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIRGBAUC3D *":
    """itkInterpolateImageFunctionIRGBAUC3D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIRGBAUC3D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC3D_cast(obj)

class itkInterpolateImageFunctionIRGBUC2D(itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD):
    """Proxy of C++ itkInterpolateImageFunctionIRGBUC2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize2":
        """GetRadius(itkInterpolateImageFunctionIRGBUC2D self) -> itkSize2"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC2D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIRGBUC2D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIRGBUC2D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIRGBUC2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIRGBUC2D

        Create a new object of the class itkInterpolateImageFunctionIRGBUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIRGBUC2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIRGBUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIRGBUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIRGBUC2D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC2D_GetRadius, None, itkInterpolateImageFunctionIRGBUC2D)
itkInterpolateImageFunctionIRGBUC2D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC2D_swigregister
itkInterpolateImageFunctionIRGBUC2D_swigregister(itkInterpolateImageFunctionIRGBUC2D)

def itkInterpolateImageFunctionIRGBUC2D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIRGBUC2D *":
    """itkInterpolateImageFunctionIRGBUC2D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIRGBUC2D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC2D_cast(obj)

class itkInterpolateImageFunctionIRGBUC3D(itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD):
    """Proxy of C++ itkInterpolateImageFunctionIRGBUC3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize3":
        """GetRadius(itkInterpolateImageFunctionIRGBUC3D self) -> itkSize3"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC3D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIRGBUC3D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIRGBUC3D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIRGBUC3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIRGBUC3D

        Create a new object of the class itkInterpolateImageFunctionIRGBUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIRGBUC3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIRGBUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIRGBUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIRGBUC3D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC3D_GetRadius, None, itkInterpolateImageFunctionIRGBUC3D)
itkInterpolateImageFunctionIRGBUC3D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC3D_swigregister
itkInterpolateImageFunctionIRGBUC3D_swigregister(itkInterpolateImageFunctionIRGBUC3D)

def itkInterpolateImageFunctionIRGBUC3D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIRGBUC3D *":
    """itkInterpolateImageFunctionIRGBUC3D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIRGBUC3D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC3D_cast(obj)

class itkInterpolateImageFunctionISS2D(itkImageFunctionBasePython.itkImageFunctionISS2DD):
    """Proxy of C++ itkInterpolateImageFunctionISS2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize2":
        """GetRadius(itkInterpolateImageFunctionISS2D self) -> itkSize2"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionISS2D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionISS2D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionISS2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionISS2D

        Create a new object of the class itkInterpolateImageFunctionISS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionISS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionISS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionISS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionISS2D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D_GetRadius, None, itkInterpolateImageFunctionISS2D)
itkInterpolateImageFunctionISS2D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D_swigregister
itkInterpolateImageFunctionISS2D_swigregister(itkInterpolateImageFunctionISS2D)

def itkInterpolateImageFunctionISS2D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionISS2D *":
    """itkInterpolateImageFunctionISS2D_cast(itkLightObject obj) -> itkInterpolateImageFunctionISS2D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D_cast(obj)

class itkInterpolateImageFunctionISS2F(itkImageFunctionBasePython.itkImageFunctionISS2DF):
    """Proxy of C++ itkInterpolateImageFunctionISS2F class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize2":
        """GetRadius(itkInterpolateImageFunctionISS2F self) -> itkSize2"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2F_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionISS2F

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionISS2F *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionISS2F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionISS2F

        Create a new object of the class itkInterpolateImageFunctionISS2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionISS2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionISS2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionISS2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionISS2F.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2F_GetRadius, None, itkInterpolateImageFunctionISS2F)
itkInterpolateImageFunctionISS2F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2F_swigregister
itkInterpolateImageFunctionISS2F_swigregister(itkInterpolateImageFunctionISS2F)

def itkInterpolateImageFunctionISS2F_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionISS2F *":
    """itkInterpolateImageFunctionISS2F_cast(itkLightObject obj) -> itkInterpolateImageFunctionISS2F"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2F_cast(obj)

class itkInterpolateImageFunctionISS3D(itkImageFunctionBasePython.itkImageFunctionISS3DD):
    """Proxy of C++ itkInterpolateImageFunctionISS3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize3":
        """GetRadius(itkInterpolateImageFunctionISS3D self) -> itkSize3"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionISS3D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionISS3D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionISS3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionISS3D

        Create a new object of the class itkInterpolateImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionISS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionISS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionISS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionISS3D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D_GetRadius, None, itkInterpolateImageFunctionISS3D)
itkInterpolateImageFunctionISS3D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D_swigregister
itkInterpolateImageFunctionISS3D_swigregister(itkInterpolateImageFunctionISS3D)

def itkInterpolateImageFunctionISS3D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionISS3D *":
    """itkInterpolateImageFunctionISS3D_cast(itkLightObject obj) -> itkInterpolateImageFunctionISS3D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D_cast(obj)

class itkInterpolateImageFunctionISS3F(itkImageFunctionBasePython.itkImageFunctionISS3DF):
    """Proxy of C++ itkInterpolateImageFunctionISS3F class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize3":
        """GetRadius(itkInterpolateImageFunctionISS3F self) -> itkSize3"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3F_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionISS3F

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionISS3F *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionISS3F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionISS3F

        Create a new object of the class itkInterpolateImageFunctionISS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionISS3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionISS3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionISS3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionISS3F.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3F_GetRadius, None, itkInterpolateImageFunctionISS3F)
itkInterpolateImageFunctionISS3F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3F_swigregister
itkInterpolateImageFunctionISS3F_swigregister(itkInterpolateImageFunctionISS3F)

def itkInterpolateImageFunctionISS3F_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionISS3F *":
    """itkInterpolateImageFunctionISS3F_cast(itkLightObject obj) -> itkInterpolateImageFunctionISS3F"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3F_cast(obj)

class itkInterpolateImageFunctionIUC2D(itkImageFunctionBasePython.itkImageFunctionIUC2DD):
    """Proxy of C++ itkInterpolateImageFunctionIUC2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize2":
        """GetRadius(itkInterpolateImageFunctionIUC2D self) -> itkSize2"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUC2D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUC2D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUC2D

        Create a new object of the class itkInterpolateImageFunctionIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUC2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUC2D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_GetRadius, None, itkInterpolateImageFunctionIUC2D)
itkInterpolateImageFunctionIUC2D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_swigregister
itkInterpolateImageFunctionIUC2D_swigregister(itkInterpolateImageFunctionIUC2D)

def itkInterpolateImageFunctionIUC2D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUC2D *":
    """itkInterpolateImageFunctionIUC2D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC2D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_cast(obj)

class itkInterpolateImageFunctionIUC2F(itkImageFunctionBasePython.itkImageFunctionIUC2DF):
    """Proxy of C++ itkInterpolateImageFunctionIUC2F class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize2":
        """GetRadius(itkInterpolateImageFunctionIUC2F self) -> itkSize2"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUC2F

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUC2F *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC2F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUC2F

        Create a new object of the class itkInterpolateImageFunctionIUC2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUC2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUC2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUC2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUC2F.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_GetRadius, None, itkInterpolateImageFunctionIUC2F)
itkInterpolateImageFunctionIUC2F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_swigregister
itkInterpolateImageFunctionIUC2F_swigregister(itkInterpolateImageFunctionIUC2F)

def itkInterpolateImageFunctionIUC2F_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUC2F *":
    """itkInterpolateImageFunctionIUC2F_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC2F"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_cast(obj)

class itkInterpolateImageFunctionIUC3D(itkImageFunctionBasePython.itkImageFunctionIUC3DD):
    """Proxy of C++ itkInterpolateImageFunctionIUC3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize3":
        """GetRadius(itkInterpolateImageFunctionIUC3D self) -> itkSize3"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUC3D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUC3D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUC3D

        Create a new object of the class itkInterpolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUC3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUC3D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_GetRadius, None, itkInterpolateImageFunctionIUC3D)
itkInterpolateImageFunctionIUC3D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_swigregister
itkInterpolateImageFunctionIUC3D_swigregister(itkInterpolateImageFunctionIUC3D)

def itkInterpolateImageFunctionIUC3D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUC3D *":
    """itkInterpolateImageFunctionIUC3D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC3D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_cast(obj)

class itkInterpolateImageFunctionIUC3F(itkImageFunctionBasePython.itkImageFunctionIUC3DF):
    """Proxy of C++ itkInterpolateImageFunctionIUC3F class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize3":
        """GetRadius(itkInterpolateImageFunctionIUC3F self) -> itkSize3"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUC3F

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUC3F *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC3F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUC3F

        Create a new object of the class itkInterpolateImageFunctionIUC3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUC3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUC3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUC3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUC3F.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_GetRadius, None, itkInterpolateImageFunctionIUC3F)
itkInterpolateImageFunctionIUC3F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_swigregister
itkInterpolateImageFunctionIUC3F_swigregister(itkInterpolateImageFunctionIUC3F)

def itkInterpolateImageFunctionIUC3F_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUC3F *":
    """itkInterpolateImageFunctionIUC3F_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC3F"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_cast(obj)

class itkInterpolateImageFunctionIUS2D(itkImageFunctionBasePython.itkImageFunctionIUS2DD):
    """Proxy of C++ itkInterpolateImageFunctionIUS2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize2":
        """GetRadius(itkInterpolateImageFunctionIUS2D self) -> itkSize2"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUS2D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUS2D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUS2D

        Create a new object of the class itkInterpolateImageFunctionIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUS2D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_GetRadius, None, itkInterpolateImageFunctionIUS2D)
itkInterpolateImageFunctionIUS2D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_swigregister
itkInterpolateImageFunctionIUS2D_swigregister(itkInterpolateImageFunctionIUS2D)

def itkInterpolateImageFunctionIUS2D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUS2D *":
    """itkInterpolateImageFunctionIUS2D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS2D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_cast(obj)

class itkInterpolateImageFunctionIUS2F(itkImageFunctionBasePython.itkImageFunctionIUS2DF):
    """Proxy of C++ itkInterpolateImageFunctionIUS2F class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize2":
        """GetRadius(itkInterpolateImageFunctionIUS2F self) -> itkSize2"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUS2F

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUS2F *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS2F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUS2F

        Create a new object of the class itkInterpolateImageFunctionIUS2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUS2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUS2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUS2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUS2F.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_GetRadius, None, itkInterpolateImageFunctionIUS2F)
itkInterpolateImageFunctionIUS2F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_swigregister
itkInterpolateImageFunctionIUS2F_swigregister(itkInterpolateImageFunctionIUS2F)

def itkInterpolateImageFunctionIUS2F_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUS2F *":
    """itkInterpolateImageFunctionIUS2F_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS2F"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_cast(obj)

class itkInterpolateImageFunctionIUS3D(itkImageFunctionBasePython.itkImageFunctionIUS3DD):
    """Proxy of C++ itkInterpolateImageFunctionIUS3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize3":
        """GetRadius(itkInterpolateImageFunctionIUS3D self) -> itkSize3"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUS3D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUS3D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUS3D

        Create a new object of the class itkInterpolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUS3D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_GetRadius, None, itkInterpolateImageFunctionIUS3D)
itkInterpolateImageFunctionIUS3D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_swigregister
itkInterpolateImageFunctionIUS3D_swigregister(itkInterpolateImageFunctionIUS3D)

def itkInterpolateImageFunctionIUS3D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUS3D *":
    """itkInterpolateImageFunctionIUS3D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS3D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_cast(obj)

class itkInterpolateImageFunctionIUS3F(itkImageFunctionBasePython.itkImageFunctionIUS3DF):
    """Proxy of C++ itkInterpolateImageFunctionIUS3F class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize3":
        """GetRadius(itkInterpolateImageFunctionIUS3F self) -> itkSize3"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUS3F

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUS3F *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS3F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUS3F

        Create a new object of the class itkInterpolateImageFunctionIUS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIUS3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIUS3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUS3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUS3F.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_GetRadius, None, itkInterpolateImageFunctionIUS3F)
itkInterpolateImageFunctionIUS3F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_swigregister
itkInterpolateImageFunctionIUS3F_swigregister(itkInterpolateImageFunctionIUS3F)

def itkInterpolateImageFunctionIUS3F_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIUS3F *":
    """itkInterpolateImageFunctionIUS3F_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS3F"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_cast(obj)

class itkInterpolateImageFunctionIVF22D(itkImageFunctionBasePython.itkImageFunctionIVF22DD):
    """Proxy of C++ itkInterpolateImageFunctionIVF22D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize2":
        """GetRadius(itkInterpolateImageFunctionIVF22D self) -> itkSize2"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF22D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIVF22D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIVF22D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIVF22D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF22D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIVF22D

        Create a new object of the class itkInterpolateImageFunctionIVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIVF22D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIVF22D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIVF22D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIVF22D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF22D_GetRadius, None, itkInterpolateImageFunctionIVF22D)
itkInterpolateImageFunctionIVF22D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF22D_swigregister
itkInterpolateImageFunctionIVF22D_swigregister(itkInterpolateImageFunctionIVF22D)

def itkInterpolateImageFunctionIVF22D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIVF22D *":
    """itkInterpolateImageFunctionIVF22D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIVF22D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF22D_cast(obj)

class itkInterpolateImageFunctionIVF33D(itkImageFunctionBasePython.itkImageFunctionIVF33DD):
    """Proxy of C++ itkInterpolateImageFunctionIVF33D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetRadius(self) -> "itkSize3":
        """GetRadius(itkInterpolateImageFunctionIVF33D self) -> itkSize3"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF33D_GetRadius(self)

    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIVF33D

    def cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIVF33D *":
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIVF33D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF33D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIVF33D

        Create a new object of the class itkInterpolateImageFunctionIVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFunctionIVF33D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFunctionIVF33D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIVF33D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIVF33D.GetRadius = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF33D_GetRadius, None, itkInterpolateImageFunctionIVF33D)
itkInterpolateImageFunctionIVF33D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF33D_swigregister
itkInterpolateImageFunctionIVF33D_swigregister(itkInterpolateImageFunctionIVF33D)

def itkInterpolateImageFunctionIVF33D_cast(obj: 'itkLightObject') -> "itkInterpolateImageFunctionIVF33D *":
    """itkInterpolateImageFunctionIVF33D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIVF33D"""
    return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF33D_cast(obj)



