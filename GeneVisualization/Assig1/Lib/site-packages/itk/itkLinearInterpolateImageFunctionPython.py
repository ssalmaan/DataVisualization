# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkLinearInterpolateImageFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkLinearInterpolateImageFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkLinearInterpolateImageFunctionPython
            return _itkLinearInterpolateImageFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkLinearInterpolateImageFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkLinearInterpolateImageFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkLinearInterpolateImageFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkRGBAPixelPython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkContinuousIndexPython
import itkIndexPython
import itkOffsetPython
import itkPointPython
import itkInterpolateImageFunctionPython
import itkImageFunctionBasePython
import itkFunctionBasePython
import itkArrayPython
import itkImagePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkRGBPixelPython

def itkLinearInterpolateImageFunctionIRGBAUC3D_New():
  return itkLinearInterpolateImageFunctionIRGBAUC3D.New()


def itkLinearInterpolateImageFunctionIRGBUC3D_New():
  return itkLinearInterpolateImageFunctionIRGBUC3D.New()


def itkLinearInterpolateImageFunctionICVF33D_New():
  return itkLinearInterpolateImageFunctionICVF33D.New()


def itkLinearInterpolateImageFunctionIVF33D_New():
  return itkLinearInterpolateImageFunctionIVF33D.New()


def itkLinearInterpolateImageFunctionIF3D_New():
  return itkLinearInterpolateImageFunctionIF3D.New()


def itkLinearInterpolateImageFunctionIUS3D_New():
  return itkLinearInterpolateImageFunctionIUS3D.New()


def itkLinearInterpolateImageFunctionIUC3D_New():
  return itkLinearInterpolateImageFunctionIUC3D.New()


def itkLinearInterpolateImageFunctionISS3D_New():
  return itkLinearInterpolateImageFunctionISS3D.New()


def itkLinearInterpolateImageFunctionIRGBAUC2D_New():
  return itkLinearInterpolateImageFunctionIRGBAUC2D.New()


def itkLinearInterpolateImageFunctionIRGBUC2D_New():
  return itkLinearInterpolateImageFunctionIRGBUC2D.New()


def itkLinearInterpolateImageFunctionICVF22D_New():
  return itkLinearInterpolateImageFunctionICVF22D.New()


def itkLinearInterpolateImageFunctionIVF22D_New():
  return itkLinearInterpolateImageFunctionIVF22D.New()


def itkLinearInterpolateImageFunctionIF2D_New():
  return itkLinearInterpolateImageFunctionIF2D.New()


def itkLinearInterpolateImageFunctionIUS2D_New():
  return itkLinearInterpolateImageFunctionIUS2D.New()


def itkLinearInterpolateImageFunctionIUC2D_New():
  return itkLinearInterpolateImageFunctionIUC2D.New()


def itkLinearInterpolateImageFunctionISS2D_New():
  return itkLinearInterpolateImageFunctionISS2D.New()

class itkLinearInterpolateImageFunctionICVF22D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF22D):
    """Proxy of C++ itkLinearInterpolateImageFunctionICVF22D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionICVF22D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionICVF22D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF22D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionICVF22D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionICVF22D self) -> itkLinearInterpolateImageFunctionICVF22D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF22D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionICVF22D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionICVF22D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionICVF22D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF22D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionICVF22D

        Create a new object of the class itkLinearInterpolateImageFunctionICVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionICVF22D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionICVF22D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionICVF22D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionICVF22D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF22D_Clone, None, itkLinearInterpolateImageFunctionICVF22D)
itkLinearInterpolateImageFunctionICVF22D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF22D_swigregister
itkLinearInterpolateImageFunctionICVF22D_swigregister(itkLinearInterpolateImageFunctionICVF22D)

def itkLinearInterpolateImageFunctionICVF22D___New_orig__() -> "itkLinearInterpolateImageFunctionICVF22D_Pointer":
    """itkLinearInterpolateImageFunctionICVF22D___New_orig__() -> itkLinearInterpolateImageFunctionICVF22D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF22D___New_orig__()

def itkLinearInterpolateImageFunctionICVF22D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionICVF22D *":
    """itkLinearInterpolateImageFunctionICVF22D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionICVF22D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF22D_cast(obj)

class itkLinearInterpolateImageFunctionICVF33D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF33D):
    """Proxy of C++ itkLinearInterpolateImageFunctionICVF33D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionICVF33D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionICVF33D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF33D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionICVF33D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionICVF33D self) -> itkLinearInterpolateImageFunctionICVF33D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF33D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionICVF33D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionICVF33D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionICVF33D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF33D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionICVF33D

        Create a new object of the class itkLinearInterpolateImageFunctionICVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionICVF33D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionICVF33D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionICVF33D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionICVF33D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF33D_Clone, None, itkLinearInterpolateImageFunctionICVF33D)
itkLinearInterpolateImageFunctionICVF33D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF33D_swigregister
itkLinearInterpolateImageFunctionICVF33D_swigregister(itkLinearInterpolateImageFunctionICVF33D)

def itkLinearInterpolateImageFunctionICVF33D___New_orig__() -> "itkLinearInterpolateImageFunctionICVF33D_Pointer":
    """itkLinearInterpolateImageFunctionICVF33D___New_orig__() -> itkLinearInterpolateImageFunctionICVF33D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF33D___New_orig__()

def itkLinearInterpolateImageFunctionICVF33D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionICVF33D *":
    """itkLinearInterpolateImageFunctionICVF33D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionICVF33D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionICVF33D_cast(obj)

class itkLinearInterpolateImageFunctionIF2D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    """Proxy of C++ itkLinearInterpolateImageFunctionIF2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionIF2D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionIF2D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionIF2D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionIF2D self) -> itkLinearInterpolateImageFunctionIF2D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF2D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIF2D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIF2D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIF2D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIF2D

        Create a new object of the class itkLinearInterpolateImageFunctionIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIF2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionIF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionIF2D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF2D_Clone, None, itkLinearInterpolateImageFunctionIF2D)
itkLinearInterpolateImageFunctionIF2D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF2D_swigregister
itkLinearInterpolateImageFunctionIF2D_swigregister(itkLinearInterpolateImageFunctionIF2D)

def itkLinearInterpolateImageFunctionIF2D___New_orig__() -> "itkLinearInterpolateImageFunctionIF2D_Pointer":
    """itkLinearInterpolateImageFunctionIF2D___New_orig__() -> itkLinearInterpolateImageFunctionIF2D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF2D___New_orig__()

def itkLinearInterpolateImageFunctionIF2D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIF2D *":
    """itkLinearInterpolateImageFunctionIF2D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIF2D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF2D_cast(obj)

class itkLinearInterpolateImageFunctionIF3D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    """Proxy of C++ itkLinearInterpolateImageFunctionIF3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionIF3D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionIF3D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionIF3D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionIF3D self) -> itkLinearInterpolateImageFunctionIF3D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF3D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIF3D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIF3D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIF3D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIF3D

        Create a new object of the class itkLinearInterpolateImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIF3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionIF3D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF3D_Clone, None, itkLinearInterpolateImageFunctionIF3D)
itkLinearInterpolateImageFunctionIF3D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF3D_swigregister
itkLinearInterpolateImageFunctionIF3D_swigregister(itkLinearInterpolateImageFunctionIF3D)

def itkLinearInterpolateImageFunctionIF3D___New_orig__() -> "itkLinearInterpolateImageFunctionIF3D_Pointer":
    """itkLinearInterpolateImageFunctionIF3D___New_orig__() -> itkLinearInterpolateImageFunctionIF3D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF3D___New_orig__()

def itkLinearInterpolateImageFunctionIF3D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIF3D *":
    """itkLinearInterpolateImageFunctionIF3D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIF3D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIF3D_cast(obj)

class itkLinearInterpolateImageFunctionIRGBAUC2D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC2D):
    """Proxy of C++ itkLinearInterpolateImageFunctionIRGBAUC2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionIRGBAUC2D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionIRGBAUC2D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionIRGBAUC2D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionIRGBAUC2D self) -> itkLinearInterpolateImageFunctionIRGBAUC2D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC2D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIRGBAUC2D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIRGBAUC2D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIRGBAUC2D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIRGBAUC2D

        Create a new object of the class itkLinearInterpolateImageFunctionIRGBAUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIRGBAUC2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIRGBAUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionIRGBAUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionIRGBAUC2D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC2D_Clone, None, itkLinearInterpolateImageFunctionIRGBAUC2D)
itkLinearInterpolateImageFunctionIRGBAUC2D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC2D_swigregister
itkLinearInterpolateImageFunctionIRGBAUC2D_swigregister(itkLinearInterpolateImageFunctionIRGBAUC2D)

def itkLinearInterpolateImageFunctionIRGBAUC2D___New_orig__() -> "itkLinearInterpolateImageFunctionIRGBAUC2D_Pointer":
    """itkLinearInterpolateImageFunctionIRGBAUC2D___New_orig__() -> itkLinearInterpolateImageFunctionIRGBAUC2D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC2D___New_orig__()

def itkLinearInterpolateImageFunctionIRGBAUC2D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIRGBAUC2D *":
    """itkLinearInterpolateImageFunctionIRGBAUC2D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIRGBAUC2D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC2D_cast(obj)

class itkLinearInterpolateImageFunctionIRGBAUC3D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC3D):
    """Proxy of C++ itkLinearInterpolateImageFunctionIRGBAUC3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionIRGBAUC3D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionIRGBAUC3D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionIRGBAUC3D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionIRGBAUC3D self) -> itkLinearInterpolateImageFunctionIRGBAUC3D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC3D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIRGBAUC3D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIRGBAUC3D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIRGBAUC3D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIRGBAUC3D

        Create a new object of the class itkLinearInterpolateImageFunctionIRGBAUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIRGBAUC3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIRGBAUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionIRGBAUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionIRGBAUC3D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC3D_Clone, None, itkLinearInterpolateImageFunctionIRGBAUC3D)
itkLinearInterpolateImageFunctionIRGBAUC3D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC3D_swigregister
itkLinearInterpolateImageFunctionIRGBAUC3D_swigregister(itkLinearInterpolateImageFunctionIRGBAUC3D)

def itkLinearInterpolateImageFunctionIRGBAUC3D___New_orig__() -> "itkLinearInterpolateImageFunctionIRGBAUC3D_Pointer":
    """itkLinearInterpolateImageFunctionIRGBAUC3D___New_orig__() -> itkLinearInterpolateImageFunctionIRGBAUC3D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC3D___New_orig__()

def itkLinearInterpolateImageFunctionIRGBAUC3D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIRGBAUC3D *":
    """itkLinearInterpolateImageFunctionIRGBAUC3D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIRGBAUC3D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBAUC3D_cast(obj)

class itkLinearInterpolateImageFunctionIRGBUC2D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC2D):
    """Proxy of C++ itkLinearInterpolateImageFunctionIRGBUC2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionIRGBUC2D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionIRGBUC2D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionIRGBUC2D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionIRGBUC2D self) -> itkLinearInterpolateImageFunctionIRGBUC2D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC2D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIRGBUC2D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIRGBUC2D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIRGBUC2D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIRGBUC2D

        Create a new object of the class itkLinearInterpolateImageFunctionIRGBUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIRGBUC2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIRGBUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionIRGBUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionIRGBUC2D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC2D_Clone, None, itkLinearInterpolateImageFunctionIRGBUC2D)
itkLinearInterpolateImageFunctionIRGBUC2D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC2D_swigregister
itkLinearInterpolateImageFunctionIRGBUC2D_swigregister(itkLinearInterpolateImageFunctionIRGBUC2D)

def itkLinearInterpolateImageFunctionIRGBUC2D___New_orig__() -> "itkLinearInterpolateImageFunctionIRGBUC2D_Pointer":
    """itkLinearInterpolateImageFunctionIRGBUC2D___New_orig__() -> itkLinearInterpolateImageFunctionIRGBUC2D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC2D___New_orig__()

def itkLinearInterpolateImageFunctionIRGBUC2D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIRGBUC2D *":
    """itkLinearInterpolateImageFunctionIRGBUC2D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIRGBUC2D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC2D_cast(obj)

class itkLinearInterpolateImageFunctionIRGBUC3D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC3D):
    """Proxy of C++ itkLinearInterpolateImageFunctionIRGBUC3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionIRGBUC3D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionIRGBUC3D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionIRGBUC3D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionIRGBUC3D self) -> itkLinearInterpolateImageFunctionIRGBUC3D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC3D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIRGBUC3D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIRGBUC3D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIRGBUC3D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIRGBUC3D

        Create a new object of the class itkLinearInterpolateImageFunctionIRGBUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIRGBUC3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIRGBUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionIRGBUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionIRGBUC3D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC3D_Clone, None, itkLinearInterpolateImageFunctionIRGBUC3D)
itkLinearInterpolateImageFunctionIRGBUC3D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC3D_swigregister
itkLinearInterpolateImageFunctionIRGBUC3D_swigregister(itkLinearInterpolateImageFunctionIRGBUC3D)

def itkLinearInterpolateImageFunctionIRGBUC3D___New_orig__() -> "itkLinearInterpolateImageFunctionIRGBUC3D_Pointer":
    """itkLinearInterpolateImageFunctionIRGBUC3D___New_orig__() -> itkLinearInterpolateImageFunctionIRGBUC3D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC3D___New_orig__()

def itkLinearInterpolateImageFunctionIRGBUC3D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIRGBUC3D *":
    """itkLinearInterpolateImageFunctionIRGBUC3D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIRGBUC3D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIRGBUC3D_cast(obj)

class itkLinearInterpolateImageFunctionISS2D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    """Proxy of C++ itkLinearInterpolateImageFunctionISS2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionISS2D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionISS2D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionISS2D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionISS2D self) -> itkLinearInterpolateImageFunctionISS2D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS2D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionISS2D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionISS2D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionISS2D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionISS2D

        Create a new object of the class itkLinearInterpolateImageFunctionISS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionISS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionISS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionISS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionISS2D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS2D_Clone, None, itkLinearInterpolateImageFunctionISS2D)
itkLinearInterpolateImageFunctionISS2D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS2D_swigregister
itkLinearInterpolateImageFunctionISS2D_swigregister(itkLinearInterpolateImageFunctionISS2D)

def itkLinearInterpolateImageFunctionISS2D___New_orig__() -> "itkLinearInterpolateImageFunctionISS2D_Pointer":
    """itkLinearInterpolateImageFunctionISS2D___New_orig__() -> itkLinearInterpolateImageFunctionISS2D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS2D___New_orig__()

def itkLinearInterpolateImageFunctionISS2D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionISS2D *":
    """itkLinearInterpolateImageFunctionISS2D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionISS2D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS2D_cast(obj)

class itkLinearInterpolateImageFunctionISS3D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    """Proxy of C++ itkLinearInterpolateImageFunctionISS3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionISS3D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionISS3D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionISS3D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionISS3D self) -> itkLinearInterpolateImageFunctionISS3D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS3D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionISS3D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionISS3D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionISS3D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionISS3D

        Create a new object of the class itkLinearInterpolateImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionISS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionISS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionISS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionISS3D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS3D_Clone, None, itkLinearInterpolateImageFunctionISS3D)
itkLinearInterpolateImageFunctionISS3D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS3D_swigregister
itkLinearInterpolateImageFunctionISS3D_swigregister(itkLinearInterpolateImageFunctionISS3D)

def itkLinearInterpolateImageFunctionISS3D___New_orig__() -> "itkLinearInterpolateImageFunctionISS3D_Pointer":
    """itkLinearInterpolateImageFunctionISS3D___New_orig__() -> itkLinearInterpolateImageFunctionISS3D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS3D___New_orig__()

def itkLinearInterpolateImageFunctionISS3D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionISS3D *":
    """itkLinearInterpolateImageFunctionISS3D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionISS3D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionISS3D_cast(obj)

class itkLinearInterpolateImageFunctionIUC2D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    """Proxy of C++ itkLinearInterpolateImageFunctionIUC2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionIUC2D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionIUC2D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionIUC2D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionIUC2D self) -> itkLinearInterpolateImageFunctionIUC2D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC2D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIUC2D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIUC2D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIUC2D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIUC2D

        Create a new object of the class itkLinearInterpolateImageFunctionIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIUC2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionIUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionIUC2D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC2D_Clone, None, itkLinearInterpolateImageFunctionIUC2D)
itkLinearInterpolateImageFunctionIUC2D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC2D_swigregister
itkLinearInterpolateImageFunctionIUC2D_swigregister(itkLinearInterpolateImageFunctionIUC2D)

def itkLinearInterpolateImageFunctionIUC2D___New_orig__() -> "itkLinearInterpolateImageFunctionIUC2D_Pointer":
    """itkLinearInterpolateImageFunctionIUC2D___New_orig__() -> itkLinearInterpolateImageFunctionIUC2D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC2D___New_orig__()

def itkLinearInterpolateImageFunctionIUC2D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIUC2D *":
    """itkLinearInterpolateImageFunctionIUC2D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIUC2D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC2D_cast(obj)

class itkLinearInterpolateImageFunctionIUC3D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    """Proxy of C++ itkLinearInterpolateImageFunctionIUC3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionIUC3D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionIUC3D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionIUC3D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionIUC3D self) -> itkLinearInterpolateImageFunctionIUC3D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC3D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIUC3D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIUC3D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIUC3D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIUC3D

        Create a new object of the class itkLinearInterpolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIUC3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionIUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionIUC3D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC3D_Clone, None, itkLinearInterpolateImageFunctionIUC3D)
itkLinearInterpolateImageFunctionIUC3D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC3D_swigregister
itkLinearInterpolateImageFunctionIUC3D_swigregister(itkLinearInterpolateImageFunctionIUC3D)

def itkLinearInterpolateImageFunctionIUC3D___New_orig__() -> "itkLinearInterpolateImageFunctionIUC3D_Pointer":
    """itkLinearInterpolateImageFunctionIUC3D___New_orig__() -> itkLinearInterpolateImageFunctionIUC3D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC3D___New_orig__()

def itkLinearInterpolateImageFunctionIUC3D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIUC3D *":
    """itkLinearInterpolateImageFunctionIUC3D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIUC3D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUC3D_cast(obj)

class itkLinearInterpolateImageFunctionIUS2D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    """Proxy of C++ itkLinearInterpolateImageFunctionIUS2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionIUS2D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionIUS2D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionIUS2D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionIUS2D self) -> itkLinearInterpolateImageFunctionIUS2D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS2D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIUS2D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIUS2D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIUS2D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIUS2D

        Create a new object of the class itkLinearInterpolateImageFunctionIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIUS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIUS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionIUS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionIUS2D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS2D_Clone, None, itkLinearInterpolateImageFunctionIUS2D)
itkLinearInterpolateImageFunctionIUS2D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS2D_swigregister
itkLinearInterpolateImageFunctionIUS2D_swigregister(itkLinearInterpolateImageFunctionIUS2D)

def itkLinearInterpolateImageFunctionIUS2D___New_orig__() -> "itkLinearInterpolateImageFunctionIUS2D_Pointer":
    """itkLinearInterpolateImageFunctionIUS2D___New_orig__() -> itkLinearInterpolateImageFunctionIUS2D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS2D___New_orig__()

def itkLinearInterpolateImageFunctionIUS2D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIUS2D *":
    """itkLinearInterpolateImageFunctionIUS2D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIUS2D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS2D_cast(obj)

class itkLinearInterpolateImageFunctionIUS3D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    """Proxy of C++ itkLinearInterpolateImageFunctionIUS3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionIUS3D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionIUS3D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionIUS3D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionIUS3D self) -> itkLinearInterpolateImageFunctionIUS3D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS3D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIUS3D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIUS3D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIUS3D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIUS3D

        Create a new object of the class itkLinearInterpolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIUS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIUS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionIUS3D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS3D_Clone, None, itkLinearInterpolateImageFunctionIUS3D)
itkLinearInterpolateImageFunctionIUS3D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS3D_swigregister
itkLinearInterpolateImageFunctionIUS3D_swigregister(itkLinearInterpolateImageFunctionIUS3D)

def itkLinearInterpolateImageFunctionIUS3D___New_orig__() -> "itkLinearInterpolateImageFunctionIUS3D_Pointer":
    """itkLinearInterpolateImageFunctionIUS3D___New_orig__() -> itkLinearInterpolateImageFunctionIUS3D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS3D___New_orig__()

def itkLinearInterpolateImageFunctionIUS3D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIUS3D *":
    """itkLinearInterpolateImageFunctionIUS3D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIUS3D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIUS3D_cast(obj)

class itkLinearInterpolateImageFunctionIVF22D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF22D):
    """Proxy of C++ itkLinearInterpolateImageFunctionIVF22D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionIVF22D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionIVF22D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF22D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionIVF22D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionIVF22D self) -> itkLinearInterpolateImageFunctionIVF22D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF22D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIVF22D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIVF22D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIVF22D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF22D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIVF22D

        Create a new object of the class itkLinearInterpolateImageFunctionIVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIVF22D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIVF22D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionIVF22D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionIVF22D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF22D_Clone, None, itkLinearInterpolateImageFunctionIVF22D)
itkLinearInterpolateImageFunctionIVF22D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF22D_swigregister
itkLinearInterpolateImageFunctionIVF22D_swigregister(itkLinearInterpolateImageFunctionIVF22D)

def itkLinearInterpolateImageFunctionIVF22D___New_orig__() -> "itkLinearInterpolateImageFunctionIVF22D_Pointer":
    """itkLinearInterpolateImageFunctionIVF22D___New_orig__() -> itkLinearInterpolateImageFunctionIVF22D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF22D___New_orig__()

def itkLinearInterpolateImageFunctionIVF22D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIVF22D *":
    """itkLinearInterpolateImageFunctionIVF22D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIVF22D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF22D_cast(obj)

class itkLinearInterpolateImageFunctionIVF33D(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF33D):
    """Proxy of C++ itkLinearInterpolateImageFunctionIVF33D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLinearInterpolateImageFunctionIVF33D_Pointer":
        """__New_orig__() -> itkLinearInterpolateImageFunctionIVF33D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF33D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLinearInterpolateImageFunctionIVF33D_Pointer":
        """Clone(itkLinearInterpolateImageFunctionIVF33D self) -> itkLinearInterpolateImageFunctionIVF33D_Pointer"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF33D_Clone(self)

    __swig_destroy__ = _itkLinearInterpolateImageFunctionPython.delete_itkLinearInterpolateImageFunctionIVF33D

    def cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIVF33D *":
        """cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIVF33D"""
        return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF33D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLinearInterpolateImageFunctionIVF33D

        Create a new object of the class itkLinearInterpolateImageFunctionIVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLinearInterpolateImageFunctionIVF33D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLinearInterpolateImageFunctionIVF33D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLinearInterpolateImageFunctionIVF33D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLinearInterpolateImageFunctionIVF33D.Clone = new_instancemethod(_itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF33D_Clone, None, itkLinearInterpolateImageFunctionIVF33D)
itkLinearInterpolateImageFunctionIVF33D_swigregister = _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF33D_swigregister
itkLinearInterpolateImageFunctionIVF33D_swigregister(itkLinearInterpolateImageFunctionIVF33D)

def itkLinearInterpolateImageFunctionIVF33D___New_orig__() -> "itkLinearInterpolateImageFunctionIVF33D_Pointer":
    """itkLinearInterpolateImageFunctionIVF33D___New_orig__() -> itkLinearInterpolateImageFunctionIVF33D_Pointer"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF33D___New_orig__()

def itkLinearInterpolateImageFunctionIVF33D_cast(obj: 'itkLightObject') -> "itkLinearInterpolateImageFunctionIVF33D *":
    """itkLinearInterpolateImageFunctionIVF33D_cast(itkLightObject obj) -> itkLinearInterpolateImageFunctionIVF33D"""
    return _itkLinearInterpolateImageFunctionPython.itkLinearInterpolateImageFunctionIVF33D_cast(obj)



